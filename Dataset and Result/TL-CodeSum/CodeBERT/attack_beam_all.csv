Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,"public void addListener(Listener listener){
  mListeners.add(listener);
  notifyServiceDiscovered(mMatchingDrones);
}
","public void removeAdapter(Listener adder){
  mAdders.add(adder);
  notifyServiceDiscovered(mMatchingDrones);
}
",21,4,"listener:adder,addListener:removeAdapter,mListeners:mAdders,",281,0.925971154,Beam
1,"private <T extends CWLResource>List<T> lookForResources(CWLResourceType type,Class<T> clazz){
  List<T> resources=getRequirements(type,clazz);
  if (resources == null || resources.size() == 0) {
    resources=getHints(type,clazz);
  }
  return resources;
}","private <T extends CWLResource>List<T> lookFindTypes(CWLResourceType resource,Class<T> Clclass){
  List<T> services=getRequirements(resource,Clclass);
  if (services == null || services.size() == 0) {
    services=getHints(resource,Clclass);
  }
  return services;
}",64,4,"type:resource,lookForResources:lookFindTypes,clazz:Clclass,resources:services,",430,1.335072454,Beam
3,"public void writeSI32(int value) throws IOException {
  flushBits();
  out.write(value & 0xff);
  out.write(value >> 8);
  out.write(value >> 16);
  out.write(value >> 24);
  bytesWritten+=4;
}","public void writeI64(int start) throws IOException {
  flushBits();
  out.write(start & 0xff);
  out.write(start >> 8);
  out.write(start >> 16);
  out.write(start >> 24);
  bytesWritten+=4;
}",58,4,"writeSI32:writeI64,value:start,",78,0.276935991,Beam
4,,,135,9,,1889,9.522080696,0
5,,,33,3,,281,1.148839382,0
7,"public static double lnGamma(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}","public static double logCalma(double data){
  double x=data, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}",119,5,"lnGamma:logCalma,alpha:data,",71,0.39220132,Beam
8,"public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}
","public boolean validate(String element,String rule){
  return (element.equalsIgnoreCase(rule));
}
",22,3,"value:element,",40,0.147929815,Beam
9,,,24,2,,322,1.697519847,0
10,"public static <T>String toString(Collection<T> collection){
  if (collection == null) {
    return ""null"";
  }
  if (collection.isEmpty()) {
    return """";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="""";
  for (  T t : collection) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter="", "";
  }
  return buf.toString();
}
","public static <T>String ToStr(Collection<T> chain){
  if (chain == null) {
    return ""null"";
  }
  if (chain.isEmpty()) {
    return """";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="""";
  for (  T t : chain) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter="", "";
  }
  return buf.ToStr();
}
",97,5,"toString:ToStr,collection:chain,",120,0.456829615,Beam
12,"private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}","private void checkHeadingsFierachy(Elements items,TestSolutionHandler testSolutionHandler){
  if (items.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=items.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}",213,11,"checkHeadingsHierarchy:checkHeadingsFierachy,elements:items,",229,1.363520869,Beam
13,"public static String byteArrayToHexString(byte[] block,int offset,int length){
  StringBuffer buf=new StringBuffer();
  int len=block.length;
  length=length + offset;
  if ((len < length)) {
    length=len;
  }
  for (int i=0 + offset; i < length; i++) {
    byte2hex(block[i],buf);
    if (i < length - 1) {
      buf.append(':');
    }
  }
  return buf.toString();
}","public static String byteArrayToHexString(byte[] block,int prefix,int length){
  StringBuffer buf=new StringBuffer();
  int len=block.length;
  length=length + prefix;
  if ((len < length)) {
    length=len;
  }
  for (int i=0 + prefix; i < length; i++) {
    byte2hex(block[i],buf);
    if (i < length - 1) {
      buf.append(':');
    }
  }
  return buf.toString();
}",105,7,"offset:prefix,",12,0.053387384,Beam
14,,,36,3,,242,0.933521736,0
15,,,121,6,,1147,4.590854025,0
16,"public JKSSignatureToken(InputStream ksStream,String ksPassword){
  try {
    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    password=(ksPassword == null) ? null : ksPassword.toCharArray();
    keyStore.load(ksStream,password);
  }
 catch (  Exception e) {
    throw new DSSException(e);
  }
 finally {
    if (ksStream != null) {
      try {
        ksStream.close();
      }
 catch (      IOException e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
}
","public JKSSigningKey(InputStream opensSteam,String ksPassword){
  try {
    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    password=(ksPassword == null) ? null : ksPassword.toCharArray();
    keyStore.load(opensSteam,password);
  }
 catch (  Exception e) {
    throw new DSSException(e);
  }
 finally {
    if (opensSteam != null) {
      try {
        opensSteam.close();
      }
 catch (      IOException e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
}
",106,7,"JKSSignatureToken:JKSSigningKey,ksStream:opensSteam,",1068,4.994890984,Beam
17,"private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}","private ResponsePacket invokeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}",186,10,"executeCount:invokeCount,",52,0.206793912,Beam
18,,,111,7,,1580,40.23962913,0
19,"@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}
","@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse addApplication(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.addApplication(applicationName,containerId,path);
  return new HttpOk();
}
",101,6,"createDirectory:addApplication,",45,0.16503224,Beam
20,,,14,2,,252,0.758200947,0
21,"public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}","public void divide(double limit){
  setValue(Math.max(0,getValue() - limit));
}",25,2,"value:limit,damage:divide,",77,0.29772375,Beam
22,"void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}","void define(MemberDefinition class,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].class == class) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(class,slot,from,to);
}",195,9,"field:class,",9,0.062589594,Beam
23,,,16,3,,489,2.061206083,0
24,,,71,3,,470,2.435095922,0
25,"@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
","@Override public boolean addSecondVector(String sickerType,int state){
  OutputSensor outputSensor=new OutputSensor(sickerType);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
",48,5,"addOutputSensor:addSecondVector,sensorName:sickerType,",85,0.332422276,Beam
26,,,123,7,,1106,6.169507106,0
27,,,156,14,,2596,10.99097575,0
28,,,79,5,,470,2.240400386,0
29,,,53,8,,1640,5.973549656,0
30,"public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
","public void delResourcesDir(String clusterName,ResourceType filetype,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,filetype));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
",73,6,"deleteResourceConfig:delResourcesDir,resourceType:filetype,",161,0.539255571,Beam
31,"public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}
","public static String formatURL(final URI database,final Charset encoding) throws IOException {
  return IOUtils.formatURL(database.toURL(),Charsets.toCharset(encoding));
}
",36,3,"toString:formatURL,uri:database,",184,0.799506203,Beam
32,,,21,2,,232,0.9655303,0
33,,,16,3,,115,0.402201962,0
36,"public static String decode(AbstractMessage msg,Boolean ext,int header){
  if (ext == false) {
    return decode(msg);
  }
  return ""Bootloader Message Type: "" + header;
}
","public static String DECODE(AbstractMessage html,Boolean ext,int header){
  if (ext == false) {
    return DECODE(html);
  }
  return ""Bootloader Message Type: "" + header;
}
",35,4,"msg:html,decode:DECODE,",182,0.721599193,Beam
37,"private double normalDens(double x,double mean,double stdDev){
  double diff=x - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}","private double normalGradents(double xx,double md,double GradDiv){
  double diff=xx - md;
  return (1 / (m_normalSum * GradDiv)) * Math.exp(-(diff * diff / (2 * GradDiv * GradDiv)));
}",53,6,"stdDev:GradDiv,mean:md,x:xx,normalDens:normalGradents,m_normConst:m_normalSum,",1280,6.338147938,Beam
38,"@Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {
  try {
    fillScannedResult(blocksChunkHolder);
  }
 catch (  FilterUnsupportedException e) {
    throw new QueryExecutionException(e.getMessage());
  }
  return scannedResult;
}
","@Override public AbstractScannedResult scanBlockslet(BlocksChunkHolder blocksChunksHather) throws QueryExecutionException {
  try {
    fillScannedResult(blocksChunksHather);
  }
 catch (  FilterUnsupportedException e) {
    throw new QueryExecutionException(e.getMessage());
  }
  return scannedResult;
}
",42,4,"scanBlocklet:scanBlockslet,blocksChunkHolder:blocksChunksHather,",106,0.481162961,Beam
39,,,34,3,,535,2.206985807,0
40,,,73,5,,802,18.79538494,0
41,"protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}
","protected void processClickCommand(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processClickCommand(e);
}
",51,4,"processMouseEvent:processClickCommand,",45,0.134196369,Beam
42,,,37,4,,627,3.91243339,0
43,,,64,5,,1094,3.481988382,0
44,,,31,4,,830,3.990900079,0
45,"private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
","private void onTrackStationEnd(Attributes addrib){
  latitude=addrib.getValue(ATTRIBUTE_LAT);
  longitude=addrib.getValue(ATTRIBUTE_LON);
  longitudes=null;
  start=null;
}
",35,6,"onTrackPointStart:onTrackStationEnd,attributes:addrib,altitude:longitudes,time:start,",686,2.690291595,Beam
46,"void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
","void start(){
  ImageContainer.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
",24,4,"release:start,imageLoader:ImageContainer,",33,0.110025541,Beam
48,"@Override public void flush(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}
","@Override public void push(){
  FlushTask tag;
synchronized (logRecords) {
    tag=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  tag.run();
}
",45,3,"flush:push,task:tag,",99,0.379377023,Beam
49,"private void destinationTypeChanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}","private void destinationPathchanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destributionDBSSL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destributionDBSSL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}",437,16,"destinationTypeChanged:destinationPathchanged,m_destinationDatabaseURL:m_destributionDBSSL,",455,2.551522577,Beam
50,"public Builder addEmail(Email email){
  emails.add(email);
  return this;
}
","public Builder addEmail(Email model){
  emails.add(model);
  return this;
}
",19,3,"email:model,",22,0.08148464,Beam
51,,,129,10,,2047,15.6784206,0
52,,,117,6,,1099,13.41570347,0
53,"public void resetCount(){
  msgCnt.set(0);
}","public void updateSum(){
  msgCnt.set(0);
}",14,2,"resetCount:updateSum,",10,0.033691732,Beam
54,"public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}","public static int encodeCustomSettings(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}",36,3,"encodeCacheFlags:encodeCustomSettings,",10,0.03664186,Beam
55,,,89,4,,624,2.868064582,0
56,,,52,4,,722,3.188582011,0
57,,,95,6,,1210,7.495678806,0
58,"private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
","private void splitItems(final JCriteriumTreeNode unitNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=unitNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  unitNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    unitNode.add(child);
    child.setParent(unitNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    unitNode.add(child);
    child.setParent(unitNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    unitNode.add(child);
    child.setParent(unitNode);
  }
}
",204,8,"parentNode:unitNode,sortChildren:splitItems,",106,0.599225748,Beam
59,,,17,2,,141,0.553106777,0
60,,,369,17,,1099,21.53122361501060,0
61,,,22,1,,49,0.203913705,0
62,"public GTSEncoder(long baseTimestamp){
  this.baseTimestamp=baseTimestamp;
  this.stream=new ByteArrayOutputStream();
  this.wrappingKey=null;
}
","public GTSEncoder(long baseTimement){
  this.baseTimement=baseTimement;
  this.stream=new ByteArrayOutputStream();
  this.wrappingKey=null;
}
",29,2,"baseTimestamp:baseTimement,",32,0.133992835,Beam
64,,,26,2,,236,0.90795445,0
65,"public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
","public static void o(Zdiagmat I){
  o(I,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
",23,2,"D:I,",10,0.033990792,Beam
66,"public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}","public void replace(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}",190,6,"insertOrRefresh:replace,",24,0.224303524,Beam
67,,,62,5,,807,3.303814069,0
68,"public String requestStatistics(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}","public String encodeStatistics(){
  bp.setLength(0);
  makeStringBuffer(bp);
  return bp.toString();
}",26,2,"requestStatistics:encodeStatistics,sb:bp,",28,0.092709192,Beam
69,,,14,2,,121,0.476839093,0
70,,,357,18,,4127,23.35757992,0
71,"public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}","public static int info(String error,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(error);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(error + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}",151,10,"update:info,sql:error,",88,0.320885901,Beam
73,"public void auditCallhome(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);
}
","public void auditeCallInfo(OperationTypeEnum auditType,String OPERimentalstatus,String position,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),OPERimentalstatus,position,descparams);
}
",44,6,"operationalStatus:OPERimentalstatus,description:position,auditCallhome:auditeCallInfo,",814,2.966527208,Beam
74,"public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
","public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDiallections.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDiallections.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importCloser=fileChoosers.get(title);
    if (importCloser == null) {
      importCloser=new JFileChooser(Utils.getCWD());
      importCloser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importCloser.setFileFilter(fileNameExtensionFilter);
      }
      importCloser.setDialogTitle(title);
      fileChoosers.put(title,importCloser);
    }
    int returnVal=importCloser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importCloser.isMultiSelectionEnabled()) {
        return importCloser.getSelectedFiles();
      }
 else {
        return new File[]{importCloser.getSelectedFile()};
      }
    }
  }
  return null;
}
",258,10,"importChooser:importCloser,fileDialogs:fileDiallections,",461,2.707099124,Beam
75,,,122,12,,2801,10.63453331,0
76,,,35,3,,68,0.206064987,0
77,,,773,16,,2256,13.11097658,0
78,,,18,3,,257,0.744697229,0
79,,,113,9,,2027,9.892755659,0
80,"private double[] parseVector(String s){
  String[] entries=WHITESPACE_PATTERN.split(s);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}","private double[] scanMatrix(String input){
  String[] entries=WHITESPACE_PATTERN.split(input);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}",89,5,"s:input,parseVector:scanMatrix,",88,0.325434371,Beam
81,,,31,4,,602,1.98232075,0
82,"@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public int bytes(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}",150,7,"read:bytes,",43,0.213483135,Beam
83,"private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String label=request.getParameter(""start"");
  String detail=request.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
","private void start(HttpServletRequest resource,HttpServletResponse response) throws IOException {
  String label=resource.getParameter(""start"");
  String detail=resource.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
",71,8,"request:resource,",3,0.029385436,Beam
84,,,80,6,,1488,6.365325487,0
85,,,57,3,,369,1.391361892,0
86,,,111,10,,1235,7.771555785,0
87,,,78,6,,1340,22.4783413,0
89,"protected String format(Object o){
  return o.toString();
}
","protected String output(Object o){
  return o.toString();
}
",16,2,"format:output,",5,0.022718112,Beam
90,"public void addAll(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addAll(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}","public void AddData(Collection<? extends T> archive){
  if (mEventDelegate != null)   mEventDelegate.addData(archive == null ? 0 : archive.size());
  if (archive != null && archive.size() != 0) {
synchronized (mLock) {
      mObjects.AddData(archive);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}",74,6,"addAll:AddData,collection:archive,",172,0.751660474,Beam
91,,,22,3,,349,1.281782246,0
92,,,33,2,,330,1.536188145,0
93,"private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
","private JsonObject createResponse(Map<String,Object> files,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  files.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
",89,7,"headers:files,createRequest:createResponse,",496,1.732489661,Beam
94,,,24,3,,238,0.845358797,0
95,,,186,12,,3280,16.23872201,0
96,,,21,3,,441,1.673538613,0
97,"public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
","public void addRow(Column field){
  if (field != null) {
    cols.remove(field);
  }
}
",24,3,"removeColumn:addRow,column:field,columns:cols,",216,0.630357409,Beam
98,"public void playMedia(boolean showPlayerWindow){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerWindow(showPlayerWindow);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}","public void playMedium(boolean showPlayerWindow){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerWindow(showPlayerWindow);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}",70,5,"playMedia:playMedium,",4,0.015196876,Beam
100,"public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
","public boolean isSlave(Object nw){
  Node node=(Node)nw;
  return !node.hasChildNodes();
}
",25,3,"isLeaf:isSlave,nd:nw,",56,0.228954347,Beam
101,,,14,2,,153,0.475154257,0
102,,,29,3,,672,2.682938381,0
103,,,22,3,,509,2.477107938,0
104,,,266,6,,871,5.464402243,0
105,,,29,3,,73,0.291629124,0
106,"public InSpacePredicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
","public InSpaceCondiction(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
",35,4,"InSpacePredicate:InSpaceCondiction,",39,0.167499395,Beam
107,,,61,4,,755,5.083096548,0
108,,,104,10,,1166,5.290463161,0
109,"@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
","@Override public void loadLinks(Task task,Iterable<ObjectId> projectByIdls,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectByIdls,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
",168,11,"addRelations:loadLinks,projectIds:projectByIdls,",231,1.705331262,Beam
110,,,16,3,,241,0.949110134,0
111,,,161,11,,1425,9.064175614,0
112,"public Statement between(Object former,Object later){
  statement.append("" BETWEEN "");
  append(former);
  statement.append("" AND "");
  append(later);
  return this;
}
","public Statement between(Object feature,Object two){
  statement.append("" BETWEEN "");
  append(feature);
  statement.append("" AND "");
  append(two);
  return this;
}
",39,4,"former:feature,later:two,",174,0.703375041,Beam
113,,,220,11,,3844,17.72516132,0
114,"public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}","public static boolean containIP(int cidrPrix,int cidrMaskFits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskFits;
  if (bitsToShift > 0) {
    cidrPrix=cidrPrix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrix=cidrPrix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrix != ip) {
    matched=false;
  }
  return matched;
}",77,6,"cidrPrefix:cidrPrix,cidrMaskBits:cidrMaskFits,",298,1.891582457,Beam
115,"public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
","public final void registerActivity(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
",19,3,"delayTask:registerActivity,",10,0.040695743,Beam
116,"private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      viewMap.remove(name);
    }
    contextMap.clear();
  }
}
","private void destroyLoannels(Map<String,Object> actionCache,Map<String,ViewScopeContextObject> conceptList){
  ArrayList<String> removingStringList=new ArrayList<>();
  if (conceptList != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : conceptList.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(actionCache.get(contextObject.getName()),creationalContext);
      removingStringList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removingStringList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      actionCache.remove(name);
    }
    conceptList.clear();
  }
}
",174,12,"destroyBeans:destroyLoannels,contextMap:conceptList,viewMap:actionCache,removalNameList:removingStringList,",4011,20.82048868,Beam
117,,,103,6,,1289,5.959758739,0
118,"public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}","public static String generateNativeGuidForStoragePortFromDevications(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}",47,4,"generateNativeGuidForStoragePortFromIndication:generateNativeGuidForStoragePortFromDevications,",13,0.061607357,Beam
119,"private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}","private void loadFbinary(DataInputStream in) throws IOException {
  if (in.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (in.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=in.readInt();
  optimalCoupling=in.readInt();
  extendSelections=in.readInt();
  joinMethod=in.readInt();
  joinWeightShift=in.readInt();
  int weightLength=in.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=in.readInt();
  }
  int unitsLength=in.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(in);
  }
  int unitTypesLength=in.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(in);
  }
  sts=new SampleSet(in);
  mcep=new SampleSet(in);
  int numCarts=in.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(in);
    CART cart=CARTImpl.loadFbinary(in);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}",316,23,"loadBinary:loadFbinary,is:in,",130,0.705773008,Beam
120,"public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}
","public void controld(SwtPlatform... platforms){
  controld(Arrays.asList(platforms));
}
",20,2,"configs:controld,",18,0.057955972,Beam
121,,,38,4,,215,0.669368672,0
122,,,22,2,,207,0.872602101,0
123,,,67,4,,569,1.784705953,0
124,,,92,8,,1152,5.608659391,0
125,"public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}","public static String[] sync(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}",139,7,"split:sync,",12,0.052568785,Beam
127,,,148,8,,1602,12.80514609,0
128,,,87,4,,521,3.508765304,0
129,"public GetBufferedRandomAccessSource(IRandomAccessSource source){
  this.source=source;
  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}","public getBufferedRandomAccessSources(IRandomAccessSource source){
  this.source=source;
  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}",61,2,"GetBufferedRandomAccessSource:getBufferedRandomAccessSources,",37,0.160486162,Beam
130,"public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
","public static byte[] randomByte(int address){
  byte[] bytes=new byte[address];
  seededRandom.nextBytes(bytes);
  return bytes;
}
",33,4,"size:address,randomBytes:randomByte,",84,0.276650306,Beam
131,"String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException {
  Date source=null;
  if (obj instanceof Date) {
    source=(Date)obj;
  }
 else   if (obj instanceof String) {
    try {
      source=parse((String)obj);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((obj == null) ? ""null"" : obj.toString());
  }
  return format(source,toAppendTo);
}
","String println(Object ext,StringBuffer toAppendTO) throws IllegalArgumentException {
  Date service=null;
  if (ext instanceof Date) {
    service=(Date)ext;
  }
 else   if (ext instanceof String) {
    try {
      service=parse((String)ext);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (service == null) {
    throw new IllegalArgumentException((ext == null) ? ""null"" : ext.toString());
  }
  return println(service,toAppendTO);
}
",108,5,"format:println,obj:ext,toAppendTo:toAppendTO,source:service,",849,19.52780863,Beam
132,"public void register(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}
","public void load(GridCacheTtlManager mdr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mdr);
  }
}
",32,5,"register:load,mgr:mdr,",121,0.61551406,Beam
133,"void purgeLastArticles(int amountToPurge){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  String query=""_id IN ( SELECT _id FROM "" + TABLE_ARTICLES + "" WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET ""+ (Utils.ARTICLE_LIMIT - amountToPurge + "")"");
  safelyDeleteArticles(query,null);
  Log.d(TAG,""purgeLastArticles took "" + (System.currentTimeMillis() - time) + ""ms"");
}","void purgeLastCartories(int amountTopurge){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  String query=""_id IN ( SELECT _id FROM "" + TABLE_ARTICLES + "" WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET ""+ (Utils.ARTICLE_LIMIT - amountTopurge + "")"");
  safelyDeleteArticles(query,null);
  Log.d(TAG,""purgeLastArticles took "" + (System.currentTimeMillis() - time) + ""ms"");
}",73,5,"amountToPurge:amountTopurge,purgeLastArticles:purgeLastCartories,",118,0.554356106,Beam
134,,,40,4,,178,0.790776924,0
135,"@Override public void processNewLines(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}","@Override public void processNewFlelines(String[] sheets){
  for (  String line : sheets) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}",202,14,"processNewLines:processNewFlelines,lines:sheets,",85,0.354136276,Beam
136,"private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
","private static void addValuesFromValues(int startPosition,int endIndex){
  for (int i=startPosition; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
",40,5,"startIndex:startPosition,addItemsToList:addValuesFromValues,",207,0.734086001,Beam
137,"public static String toRegex(String glob,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegex(glob,separator.charAt(0));
}","public static String oReggex(String globe,String elcer){
  checkNotNull(elcer,""separator must be non-null"");
  checkArgument(elcer.length() == 1,""separator must be a single character: %s"",elcer);
  return oReggex(globe,elcer.charAt(0));
}",48,3,"glob:globe,toRegex:oReggex,separator:elcer,",490,2.311529307,Beam
138,,,32,3,,638,2.311051357,0
139,,,45,5,,796,3.13154337,0
141,,,13,2,,242,1.350410151,0
142,,,15,1,,49,0.266739428,0
144,,,68,8,,2190,7.907445804,0
145,"public boolean initDialog(){
  log.config("""");
  gbc.anchor=GridBagConstraints.NORTHWEST;
  gbc.weightx=0;
  gbc.weighty=0;
  gbc.gridy=m_line++;
  gbc.gridx=0;
  gbc.gridwidth=1;
  gbc.insets=nullInset;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  centerPanel.add(Box.createVerticalStrut(10),gbc);
  MClient client=MClient.get(Env.getCtx());
  String ASPFilter="""";
  if (client.isUseASP())   ASPFilter=""   AND (   p.AD_Process_Para_ID IN ( "" + ""              SELECT pp.AD_Process_Para_ID "" + ""                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl ""+ ""               WHERE p.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND cl.AD_Client_ID = "" + client.getAD_Client_ID() + ""                 AND cl.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND pp.ASP_Process_ID = p.ASP_Process_ID ""+ ""                 AND pp.IsActive = \'Y\' ""+ ""                 AND p.IsActive = \'Y\' ""+ ""                 AND l.IsActive = \'Y\' ""+ ""                 AND cl.IsActive = \'Y\' ""+ ""                 AND pp.ASP_Status = \'S\') ""+ ""        OR p.AD_Process_Para_ID IN ( ""+ ""              SELECT AD_Process_Para_ID ""+ ""                FROM ASP_ClientException ce ""+ ""               WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""                 AND ce.IsActive = \'Y\' ""+ ""                 AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""                 AND ce.AD_Tab_ID IS NULL ""+ ""                 AND ce.AD_Field_ID IS NULL ""+ ""                 AND ce.ASP_Status = \'S\') ""+ ""       ) ""+ ""   AND p.AD_Process_Para_ID NOT IN ( ""+ ""          SELECT AD_Process_Para_ID ""+ ""            FROM ASP_ClientException ce ""+ ""           WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""             AND ce.IsActive = \'Y\' ""+ ""             AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""             AND ce.AD_Tab_ID IS NULL ""+ ""             AND ce.AD_Field_ID IS NULL ""+ ""             AND ce.ASP_Status = \'H\')"";
  String sql=null;
  if (Env.isBaseLanguage(Env.getCtx(),""AD_Process_Para""))   sql=""SELECT p.Name, p.Description, p.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND p.IsActive=\'Y\' "" + ASPFilter + "" ORDER BY SeqNo"";
 else   sql=""SELECT t.Name, t.Description, t.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND t.AD_Language=\'"" + Env.getAD_Language(Env.getCtx()) + ""\'""+ "" AND p.IsActive=\'Y\' ""+ ASPFilter+ "" ORDER BY SeqNo"";
  boolean hasFields=false;
  try {
    PreparedStatement pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,m_processInfo.getAD_Process_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      hasFields=true;
      createField(rs);
    }
    rs.close();
    pstmt.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
  }
  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,""View & Model vector size is different"");
  if (hasFields) {
    gbc.gridy=m_line++;
    centerPanel.add(Box.createVerticalStrut(10),gbc);
    gbc.gridx=3;
    centerPanel.add(Box.createHorizontalStrut(12),gbc);
    AEnv.positionCenterWindow(m_frame,this);
  }
 else   dispose();
  return hasFields;
}","public boolean initGUI(){
  log.config("""");
  gbc.anchor=GridBagConstraints.NORTHWEST;
  gbc.weightx=0;
  gbc.weighty=0;
  gbc.gridy=m_line++;
  gbc.gridx=0;
  gbc.gridwidth=1;
  gbc.insets=nullInset;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  centerPanel.add(Box.createVerticalStrut(10),gbc);
  MClient client=MClient.get(Env.getCtx());
  String ASPFilter="""";
  if (client.isUseASP())   ASPFilter=""   AND (   p.AD_Process_Para_ID IN ( "" + ""              SELECT pp.AD_Process_Para_ID "" + ""                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl ""+ ""               WHERE p.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND cl.AD_Client_ID = "" + client.getAD_Client_ID() + ""                 AND cl.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND pp.ASP_Process_ID = p.ASP_Process_ID ""+ ""                 AND pp.IsActive = \'Y\' ""+ ""                 AND p.IsActive = \'Y\' ""+ ""                 AND l.IsActive = \'Y\' ""+ ""                 AND cl.IsActive = \'Y\' ""+ ""                 AND pp.ASP_Status = \'S\') ""+ ""        OR p.AD_Process_Para_ID IN ( ""+ ""              SELECT AD_Process_Para_ID ""+ ""                FROM ASP_ClientException ce ""+ ""               WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""                 AND ce.IsActive = \'Y\' ""+ ""                 AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""                 AND ce.AD_Tab_ID IS NULL ""+ ""                 AND ce.AD_Field_ID IS NULL ""+ ""                 AND ce.ASP_Status = \'S\') ""+ ""       ) ""+ ""   AND p.AD_Process_Para_ID NOT IN ( ""+ ""          SELECT AD_Process_Para_ID ""+ ""            FROM ASP_ClientException ce ""+ ""           WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""             AND ce.IsActive = \'Y\' ""+ ""             AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""             AND ce.AD_Tab_ID IS NULL ""+ ""             AND ce.AD_Field_ID IS NULL ""+ ""             AND ce.ASP_Status = \'H\')"";
  String sql=null;
  if (Env.isBaseLanguage(Env.getCtx(),""AD_Process_Para""))   sql=""SELECT p.Name, p.Description, p.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND p.IsActive=\'Y\' "" + ASPFilter + "" ORDER BY SeqNo"";
 else   sql=""SELECT t.Name, t.Description, t.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND t.AD_Language=\'"" + Env.getAD_Language(Env.getCtx()) + ""\'""+ "" AND p.IsActive=\'Y\' ""+ ASPFilter+ "" ORDER BY SeqNo"";
  boolean hasFields=false;
  try {
    PreparedStatement pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,m_processInfo.getAD_Process_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      hasFields=true;
      createField(rs);
    }
    rs.close();
    pstmt.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
  }
  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,""View & Model vector size is different"");
  if (hasFields) {
    gbc.gridy=m_line++;
    centerPanel.add(Box.createVerticalStrut(10),gbc);
    gbc.gridx=3;
    centerPanel.add(Box.createHorizontalStrut(12),gbc);
    AEnv.positionCenterWindow(m_frame,this);
  }
 else   dispose();
  return hasFields;
}",482,14,"initDialog:initGUI,",3,0.032499437,Beam
146,,,112,7,,1960,8.089807149,0
147,"public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}","public static boolean aqualf(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.aqualf(field1,field2);
  }
}",55,3,"equals:aqualf,",43,0.229151622,Beam
148,"final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void echo(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",72,6,"println:echo,",4,0.022652539,Beam
149,"protected void cutSelectedBean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
","protected void cutSelectedMean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
",165,8,"cutSelectedBean:cutSelectedMean,selectedBeanLocation:selectedBeeanLocation,",91,0.612026,Beam
150,"public boolean isLeaf(){
  return children == null || children.isEmpty();
}
","public boolean isBlave(){
  return children == null || children.isEmpty();
}
",18,2,"isLeaf:isBlave,",13,0.047362411,Beam
151,"public String render(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
","public String traverse(ValueExpr theExpt) throws Exception {
  theExpt.visit(this);
  return mBuffer.toString();
}
",25,3,"theExpr:theExpt,render:traverse,",98,0.357413201,Beam
152,"public boolean isNumericalRun(String pin){
  final int len=pin.length();
  int prevDigit=Character.digit(pin.charAt(0),10);
  int prevDiff=Integer.MAX_VALUE;
  boolean isRun=true;
  for (int i=1; isRun && i < len; i++) {
    final int digit=Character.digit(pin.charAt(i),10);
    final int diff=digit - prevDigit;
    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {
      isRun=false;
    }
    prevDiff=diff;
    prevDigit=digit;
  }
  return isRun;
}","public boolean isNumereticLength(String bin){
  final int len=bin.length();
  int prevDigit=Character.digit(bin.charAt(0),10);
  int prevDiff=Integer.MAX_VALUE;
  boolean isComb=true;
  for (int i=1; isComb && i < len; i++) {
    final int digit=Character.digit(bin.charAt(i),10);
    final int diff=digit - prevDigit;
    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {
      isComb=false;
    }
    prevDiff=diff;
    prevDigit=digit;
  }
  return isComb;
}",121,9,"pin:bin,isNumericalRun:isNumereticLength,isRun:isComb,",557,2.550803053,Beam
153,,,310,13,,3616,20.7717339,0
154,,,23,3,,475,1.493789319,0
157,"public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}","public static void drawVerticalMarginIndicator(Graphics2D g,String object,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (object == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(object,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(object,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(object,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}",430,16,"text:object,",183,1.19264166,Beam
158,"public void start(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug(""Starting Task: "" + toString());
    startTime=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}
","public void art(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug(""Starting Task: "" + toString());
    startTime=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}
",77,4,"start:art,",27,0.090530237,Beam
159,,,17,2,,37,0.137385821,0
160,"@Override public void readExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}
","@Override public void handleExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}
",79,10,"readExternal:handleExternal,",36,0.296652555,Beam
161,"private void addExtentEntry(){
  extentModel.addNewEntry();
  removeExtentButton.setEnabled(false);
}
","private void addIntensionFile(){
  extentModel.addNewEntry();
  removeExpentButton.setEnabled(false);
}
",20,3,"addExtentEntry:addIntensionFile,removeExtentButton:removeExpentButton,",125,0.48514847,Beam
162,"private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_S < 1 || blockSize_L < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSize_S + "" or blockSize_L: ""+ blockSize_L);
  }
  int s=r.read(blockSize_S);
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart part=new DiffPart(DiffAction.INSERT);
  part.setStart(s);
  part.setText(output.toString(WIKIPEDIA_ENCODING));
  return part;
}","private DiffPart DeccodeBlock(final int blockSize_S,final int blockSize_LI) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_S < 1 || blockSize_LI < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSize_S + "" or blockSize_L: ""+ blockSize_LI);
  }
  int s=r.read(blockSize_S);
  int l=r.read(blockSize_LI);
  ByteArrayOutputStream default=new ByteArrayOutputStream();
  for (int wei=0; wei < l; wei++) {
    default.write(r.readByte());
  }
  DiffPart player=new DiffPart(DiffAction.INSERT);
  player.setStart(s);
  player.setText(default.toString(WIKIPEDIA_ENCODING));
  return player;
}",131,9,"decodeAdd:DeccodeBlock,blockSize_L:blockSize_LI,output:default,i:wei,part:player,",1679,6.650908951,Beam
163,,,73,8,,949,3.352630432,0
164,,,15,1,,49,0.183848345,0
165,,,45,7,,2345,12.30283441,0
166,,,31,2,,49,0.292155957,0
167,"private void loadManifest(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifest=_jarPath.getManifest();
      if (_manifest == null)       return;
      Attributes attr=_manifest.getMainAttributes();
      if (attr != null)       addManifestPackage("""",attr);
      Map<String,Attributes> entries=_manifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
","private void loadLogPackage(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _configifest=_jarPath.getManifest();
      if (_configifest == null)       return;
      Attributes attr=_configifest.getMainAttributes();
      if (attr != null)       addManifestPackage("""",attr);
      Map<String,Attributes> entries=_configifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
",163,10,"loadManifest:loadLogPackage,_manifest:_configifest,",314,1.766677797,Beam
168,"protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
","protected void readVersion(String bElement){
  try {
    value=Byte.parseByte(bElement.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
",36,3,"loadValue:readVersion,sValue:bElement,",95,0.840654433,Beam
170,,,58,6,,1096,4.642488972,0
171,,,149,9,,1877,6.95385346,0
172,,,50,4,,672,10.49965307,0
173,"public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final long lowerBound,final long upperBound){
  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.DROP_VARS,new ArrayList<VarNode>()),new NV(Annotations.LOWER_BOUND,lowerBound),new NV(Annotations.UPPER_BOUND,upperBound)));
  final Set<VarNode> dropVars=new LinkedHashSet<>();
  dropVars.add(tVarLeft);
  dropVars.add(tVarRight);
  setProperty(Annotations.DROP_VARS,dropVars);
}
","public ArbitraryLengthPatternRoot(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final long lowerBound,final long pperBand){
  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.DROP_VARS,new ArrayList<VarNode>()),new NV(Annotations.LOWER_BOUND,lowerBound),new NV(Annotations.UPPER_BOUND,pperBand)));
  final Set<VarNode> dropVars=new LinkedHashSet<>();
  dropVars.add(tVarLeft);
  dropVars.add(tVarRight);
  setProperty(Annotations.DROP_VARS,dropVars);
}
",161,8,"ArbitraryLengthPathNode:ArbitraryLengthPatternRoot,upperBound:pperBand,",366,2.076074568,Beam
174,"public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
","public static String toYml(final Config toconConfig,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toYml(toconConfig,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
",55,5,"toConvert:toconConfig,toXml:toYml,",241,0.815813184,Beam
175,"@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);
}
","@Override public boolean drigateTo(Selector obj,Selector destobj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return drigateTo(device.findObject(obj.toUiSelector()),destobj,steps);
}
",40,5,"dragTo:drigateTo,destObj:destobj,",440,1.607070732,Beam
176,"QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
","QName toqWord(Class<?> configPackage){
  String globalPART;
  String namespaceUri;
  if (configPackage.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=configPackage.getAnnotation(XmlRootElement.class);
    globalPART=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (configPackage.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=configPackage.getAnnotation(XmlType.class);
    globalPART=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + configPackage + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(globalPART)) {
    globalPART=ClassUtils.getShortNameAsProperty(configPackage);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=configPackage.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,globalPART);
}
",211,6,"toQName:toqWord,outputClass:configPackage,localPart:globalPART,",756,4.336299129,Beam
177,,,74,5,,977,4.528869943,0
178,"private void updateLegends(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}","private void create(){
  if (media_pin == null) {
    media_pin=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  media_pin.setPreferredSize(new Dimension(media_pin.getPreferredSize().width,(m_plots.size() + 1) * 20));
  media_pin.setMaximumSize(new Dimension(media_pin.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry entries;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  media_pin.removeAll();
  padder.setLayout(gb);
  media_pin.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(media_pin,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    entries=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    media_pin.add(entries,constraints);
  }
}",412,10,"updateLegends:create,tmp:entries,m_span:media_pin,",777,4.952541693,Beam
179,,,64,4,,525,2.535697309,0
181,"public void add(final CreatureRespawnPoint point){
  respawnPoints.add(point);
}
","public void all(final CreatureRespawnPoint port){
  respawnPoints.all(port);
}
",17,3,"add:all,point:port,",77,0.309241807,Beam
182,,,134,8,,2222,12.26757125,0
183,,,18,3,,454,1.870924397,0
184,,,34,3,,338,1.295501463,0
185,,,254,6,,1572,9.702923294,0
186,"protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}","protected double computeStpDEV(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double anselta=m_delta;
  if (kappa > s) {
    anselta=Math.sqrt(kappa - s);
  }
  return anselta;
}",154,14,"computeStdDev:computeStpDEV,sigma:anselta,",1407,5.005620885,Beam
187,"protected static void postProcessFlood(IHex[] hexSet,int modifier){
  int n;
  IHex field;
  ITerrainFactory f=Terrains.getTerrainFactory();
  for (n=0; n < hexSet.length; n++) {
    field=hexSet[n];
    int elev=field.getLevel() - modifier;
    if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) {
      field.addTerrain(f.createTerrain(Terrains.SWAMP,1));
    }
 else     if (elev < 0) {
      if (elev < -4) {
        elev=-4;
      }
      field.removeAllTerrains();
      field.addTerrain(f.createTerrain(Terrains.WATER,-elev));
      field.setLevel(modifier);
    }
  }
}","protected static void postProcessFloor(IHex[] hexSet,int modifier){
  int n;
  IHex field;
  ITerrainFactory f=Terrains.getTerrainFactory();
  for (n=0; n < hexSet.length; n++) {
    field=hexSet[n];
    int elev=field.getLevel() - modifier;
    if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) {
      field.addTerrain(f.createTerrain(Terrains.SWAMP,1));
    }
 else     if (elev < 0) {
      if (elev < -4) {
        elev=-4;
      }
      field.removeAllTerrains();
      field.addTerrain(f.createTerrain(Terrains.WATER,-elev));
      field.setLevel(modifier);
    }
  }
}",168,7,"postProcessFlood:postProcessFloor,",5,0.071512882,Beam
188,,,49,4,,160,0.423350628,0
189,,,252,17,,2827,16.79761364,0
190,"@NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){
  if (isAssignable(target,source))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target);
  if (directConversion.isPresent())   return directConversion;
  Optional<TypeConversion> arrayConversion=findArrayConversion(source,target);
  if (arrayConversion.isPresent())   return arrayConversion;
  Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target);
  if (optionalConversion.isPresent())   return optionalConversion;
  Optional<TypeConversion> enumConversion=findEnumConversion(target);
  if (enumConversion.isPresent())   return enumConversion;
  return Optional.empty();
}
","@NotNull private Optional<TypeConversion> findConversionFormDBValue(@NotNull Type string,@NotNull Type pointer){
  if (isAssignable(pointer,string))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFormDBValue(string,pointer);
  if (directConversion.isPresent())   return directConversion;
  Optional<TypeConversion> arrayConversion=findArrayConversion(string,pointer);
  if (arrayConversion.isPresent())   return arrayConversion;
  Optional<TypeConversion> optionalConversion=findOptionalConversion(string,pointer);
  if (optionalConversion.isPresent())   return optionalConversion;
  Optional<TypeConversion> enumConversion=findEnumConversion(pointer);
  if (enumConversion.isPresent())   return enumConversion;
  return Optional.empty();
}
",145,8,"findConversionFromDbValue:findConversionFormDBValue,target:pointer,source:string,",474,2.996147267,Beam
191,,,26,3,,204,0.72336338,0
192,,,28,3,,454,1.833420694,0
193,"public Optional<BlazeVertex> vertex(final String vertexId){
  try (final CloseableIterator<Vertex> it=vertices(vertexId)){
    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException(""Multiple vertices found with id: "" + vertexId);
    }
    return v;
  }
 }
","public Optional<BlazeVertex> verices(final String vertePath){
  try (final CloseableIterator<Vertex> it=vertices(vertePath)){
    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException(""Multiple vertices found with id: "" + vertePath);
    }
    return v;
  }
 }
",84,4,"vertexId:vertePath,vertex:verices,",51,0.225827861,Beam
194,,,23,4,,433,1.767016149,0
195,"public static void registerDefaultResolvers(){
synchronized (resolverList) {
    resolverList.add(new ResourceResolver(new ResolverFragment()));
    resolverList.add(new ResourceResolver(new ResolverLocalFilesystem()));
    resolverList.add(new ResourceResolver(new ResolverXPointer()));
    resolverList.add(new ResourceResolver(new ResolverDirectHTTP()));
  }
}
","public static void registerDefaultResulvers(){
synchronized (resinterList) {
    resinterList.add(new ResourceResolver(new ResolverFragment()));
    resinterList.add(new ResourceResolver(new ResolverLocalFilesystem()));
    resinterList.add(new ResourceResolver(new ResolverXPointer()));
    resinterList.add(new ResourceResolver(new ResolverDirectHTTP()));
  }
}
",70,2,"registerDefaultResolvers:registerDefaultResulvers,resolverList:resinterList,",27,0.110415665,Beam
196,"public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}","public void optimize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.optimize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.optimize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.optimize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.optimize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.optimize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.optimize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}",438,27,"initialize:optimize,",96,0.495110552,Beam
197,,,91,8,,1304,17.39509954,0
199,"public static String parseDiskString(String input){
  String delims=""[ ]+"";
  String[] tokens=input.split(delims);
  return tokens[0];
}","public static String parseDeviceBytes(String feed){
  String delims=""[ ]+"";
  String[] tokens=feed.split(delims);
  return tokens[0];
}",33,4,"parseDiskString:parseDeviceBytes,input:feed,",92,0.468951909,Beam
200,"public void append(String string){
  for (int i=0; i < string.length(); i++)   append(string.charAt(i));
}","public void append(String address){
  for (int i=0; i < address.length(); i++)   append(address.charAt(i));
}",37,3,"string:address,",16,0.065945446,Beam
201,,,18,2,,321,1.891456779,0
202,"void hideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
","void showContent(){
  Insets Insett=getInsets();
  setBorder(BorderFactory.createEmptyBorder(Insett.top,Insett.left,Insett.bottom,Insett.right));
}
",37,2,"hideBorder:showContent,insets:Insett,",171,0.517248694,Beam
203,,,42,6,,790,3.000886695,0
204,"public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String addArray(ByteArrayTag token){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : token.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(addArray(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:addArray,tag:token,",181,0.745206753,Beam
205,"public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}","public String fill(Object omin,Object omad){
  int id=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omad);
  if (max > id) {
    return Integer.toString(rnd.nextInt(max - id) + id);
  }
  return ""0"";
}",60,6,"random:fill,omax:omad,min:id,",629,2.17773246,Beam
206,,,30,4,,631,2.543505983,0
207,,,38,3,,410,2.317521735,0
208,"public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}","public boolean equALSElse(){
  return (Double.doubleToLongBits(value) == 0);
}",19,2,"equalsDefault:equALSElse,",7,0.02457242,Beam
209,"@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
","@Override public List<String> listKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
",78,5,"allKeys:listKeys,",6,0.02296232,Beam
210,"@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
","@Override public void do_after_propomations(){
  for (  HeapInsIntervalManager im : new__pts.values()) {
    im.flush();
  }
  new__pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
",40,3,"do_after_propagation:do_after_propomations,new_pts:new__pts,",93,0.348343956,Beam
211,"public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
","public ResourcesPoet newFloat(String member,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",member);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
",58,6,"addInteger:newFloat,name:member,",217,0.569268572,Beam
212,,,97,6,,1389,4.432369101,0
213,"public void remove(IAdaptable a){
  children.remove(a);
}
","public void un(IAdaptable item){
  children.un(item);
}
",16,3,"remove:un,a:item,",94,0.370048054,Beam
214,,,223,9,,1881,11.69983683,0
215,,,102,8,,2338,12.10025861,0
216,"protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
","protected void deleteInstanceVertifier(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean effect) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteInstanceVertifier(instanceVertex,effect);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
",68,7,"force:effect,deleteTypeVertex:deleteInstanceVertifier,",326,1.203276948,Beam
217,"private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> translate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateMemberValues){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateMemberValues,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}",221,15,"postIndexedLSR:translate,immediateNodeValue:immediateMemberValues,",245,3.227218688,Beam
218,,,21,1,,25,0.103837001,0
219,,,16,2,,342,1.848491104,0
220,"protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
","protected boolean matchesFilter(final String input,final String[] route){
  for (  final String match : route) {
    if (!input.contains(match))     return false;
  }
  return true;
}
",42,4,"filter:route,",9,0.041937971,Beam
221,,,85,4,,243,0.926466024,0
222,"final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void echo(double gradient){
  Writer out=this.out;
  if (out == null)   return;
  print(gradient);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,6,"v:gradient,println:echo,",180,0.585910066,Beam
223,,,42,4,,587,2.035578823,0
224,"protected boolean isServerTransaction(){
  return this instanceof SIPServerTransaction;
}
","protected boolean ISClientSession(){
  return this instanceof SIPServerTransaction;
}
",12,1,"isServerTransaction:ISClientSession,",21,0.060676626,Beam
225,,,16,2,,205,1.014949958,0
226,"public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){
  this(streamOne);
  add(streamTwo);
  outerJoinQualifiers.add(outerJoinQualifier);
}
","public FromClause(Stream model1,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){
  this(model1);
  add(streamTwo);
  outerJoinQualifiers.add(outerJoinQualifier);
}",31,5,"streamOne:model1,",78,0.453065681,Beam
227,,,113,4,,530,3.226780641,0
228,"public void addPreferencesButton(){
  JButton prefsButton=new JButton(""Prefs"");
  prefsButton.setHideActionText(true);
  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefsButton);
}
","public void addPreffsChannel(){
  JButton prefabButton=new JButton(""Prefs"");
  prefabButton.setHideActionText(true);
  prefabButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefabButton);
}
",42,3,"addPreferencesButton:addPreffsChannel,prefsButton:prefabButton,",225,0.814641392,Beam
229,,,291,25,,4213,44.45741959,0
230,,,45,6,,916,5.560971415,0
231,,,31,4,,629,2.577910658,0
232,,,20,2,,63,0.201156767,0
233,,,58,3,,417,2.295799637,0
234,,,81,6,,1360,6.001871828,0
235,,,97,6,,1493,5.960644722,0
236,"private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}","private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int n=0; n < size; n++) {
    insert(objs[n],n);
  }
}",72,7,"i:n,",58,0.271733352,Beam
237,,,23,4,,299,1.596790961,0
238,,,55,6,,1199,3.87071083,0
239,,,106,19,,5297,20.82754086,0
240,"private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}","private void draw(String element,String offset){
  if (element == null) {
    return;
  }
  if (element.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(element,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}",213,12,"pathStyleHelper:draw,style:element,",391,2.04786195,Beam
241,,,25,2,,259,1.016055632,0
242,"public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}","public double calculateExcitancyRadio(){
  excitatoryPato=exSyncerSet.size() / (double)size();
  if (Double.isNaN(excitatoryPato)) {
    return 0;
  }
  return excitatoryPato;
}",39,3,"calculateExcitatoryRatio:calculateExcitancyRadio,excitatoryRatio:excitatoryPato,exSynapseSet:exSyncerSet,",235,2.263467813,Beam
243,,,43,4,,751,3.002756953,0
244,"public synchronized void reloadConfiguration(){
  properties=null;
  finalParameters.clear();
}
","public synchronized void restloadResources(){
  properties=null;
  finalParameters.clear();
}
",18,3,"reloadConfiguration:restloadResources,",7,0.025577207,Beam
245,"protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
","protected void wordtransfer(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
",34,6,"arraycopy:wordtransfer,",74,0.267483719,Beam
246,"public void testPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}","public void runPutFindRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}",154,7,"testPutGetRemove:runPutFindRemove,",8,0.028193092,Beam
247,"public static synchronized DataSourceViewsManager sharedInstance(){
  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();
  return sharedInstance;
}
","public static synchronized DataSourceViewsManager privateRegion(){
  if (privateRegion == null)   privateRegion=new DataSourceViewsManager();
  return privateRegion;
}
",25,1,"sharedInstance:privateRegion,",17,0.064898952,Beam
248,"public static String[] parseTitle(String title){
  String v[]={"""",""""};
  if (title == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}","public static String[] parsetitle(String key){
  String view[]={"""",""""};
  if (key == null)   return view;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(key);
  if (m.find()) {
    view[0]=m.group(1);
    view[1]=m.group(2);
  }
 else {
    view[0]=key;
  }
  return view;
}",103,5,"parseTitle:parsetitle,title:key,v:view,",670,4.730187666,Beam
249,,,133,10,,1995,14.09476369,0
250,"public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
","public Iterable<ServiceDescriptor> registerResources(){
  ArrayList<ServiceDescriptor> serviceDescryptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescryptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescryptors;
}
",47,4,"listServices:registerResources,serviceDescriptors:serviceDescryptors,",49,0.224288996,Beam
251,"private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}","private double[][] xPrime(int s){
  double[][] point=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(s - i - 1);
    System.arraycopy(yPrime[0],0,point[0],i * numVars,numVars);
  }
  return point;
}",93,6,"t:s,x:point,",647,5.082242382,Beam
252,,,85,8,,1952,6.049251139,0
253,"public synchronized void checkAccess(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}","public synchronized void updateAuth(LicenseCheckerCallback handler){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    handler.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),handler,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        handler.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}",187,11,"checkAccess:updateAuth,callback:handler,",47,1.29843924,Beam
254,"private void shutdown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
","private void shutdownDown(){
  if (nbetterListReader != null) {
    logger.info(""Closing n-best writer"");
    nbetterListReader.close();
  }
  if (algorithmEditor != null) {
    logger.info(""Closing alignment writer"");
    algorithmEditor.close();
  }
}
",49,4,"shutdown:shutdownDown,alignmentWriter:algorithmEditor,nbestListWriter:nbetterListReader,",240,1.450479941,Beam
255,,,281,14,,2087,7.396227916,0
257,"public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}
","public String[] buildReport(File xmlFiles) throws SAXException, IOException {
  Document document=builder.parse(xmlFiles);
  return (buildReport(document));
}
",33,4,"parseConfiguration:buildReport,xmlFile:xmlFiles,",87,0.308632604,Beam
258,,,13,2,,190,0.871378827,0
259,,,181,9,,856,5.309056807,0
260,,,391,20,,485,6.73627576,0
261,"public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}
","public synchronized Future<V> unit(Callable<V> task) throws RejectedExecutionException {
  return pool.unit(task);
}
",26,3,"submit:unit,",56,0.20406462,Beam
263,,,25,2,,343,1.67859753,0
264,"public Optional<T> last(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
","public Optional<T> service(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
",49,3,"last:service,",26,0.117662696,Beam
265,"private synchronized IMqttToken removeMqttToken(Bundle data){
  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityToken != null) {
    int tokenNumber=Integer.parseInt(activityToken);
    IMqttToken token=tokenMap.get(tokenNumber);
    tokenMap.delete(tokenNumber);
    return token;
  }
  return null;
}
","private synchronized IMqttToken removeMqttTask(Bundle data){
  String ActivityWord=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (ActivityWord != null) {
    int tokenNumber=Integer.parseInt(ActivityWord);
    IMqttToken rule=tokenMap.get(tokenNumber);
    tokenMap.delete(tokenNumber);
    return rule;
  }
  return null;
}
",63,6,"removeMqttToken:removeMqttTask,activityToken:ActivityWord,token:rule,",1020,4.727967338,Beam
266,,,15,3,,158,0.897706481,0
267,"private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}","private int calculateWallStyle(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}",40,5,"calculateTotalHeight:calculateWallStyle,",67,0.315854239,Beam
268,,,104,4,,617,3.768396084,0
269,"private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
","private void onSchemaComplexType(Element schemaComplexTime,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexTime.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexTime.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexTime.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexTime.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
",162,11,"schemaComplexType:schemaComplexTime,",10,0.095638661,Beam
270,,,45,2,,220,0.979858077,0
271,,,53,5,,717,2.636458623,0
273,"@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
","@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processLogues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerQueue.clearInvalidatedLayers();
}
",81,6,"processQueues:processLogues,layerManager:layerQueue,",358,2.212261959,Beam
274,,,47,4,,641,2.608857187,0
275,"public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
","public void contentContentsChange(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
",54,7,"contentsChanged:contentContentsChange,",51,0.190720085,Beam
276,"protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}","protected SizeRequirements update(int axis,SizeRequirements br){
  updateGrid();
  calculateColumnRequirements(axis);
  if (br == null) {
    br=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  br.minimum=(int)min;
  br.preferred=(int)pref;
  br.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,br,cssWidth,null)) {
    if (br.minimum < (int)min) {
      br.maximum=br.minimum=br.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=br.minimum;
  totalColumnRequirements.preferred=br.preferred;
  totalColumnRequirements.maximum=br.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      br.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      br.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      br.alignment=1;
    }
 else {
      br.alignment=0;
    }
  }
 else {
    br.alignment=0;
  }
  return br;
}",343,16,"calculateMinorAxisRequirements:update,r:br,",89,0.73462499,Beam
277,"private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}","private void generateUnsignedIntFeatures(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}",478,23,"generateUniformIntegerExamples:generateUnsignedIntFeatures,",22,0.118519509,Beam
278,,,95,5,,191,1.044067522,0
279,"private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}
","private Map<URI,Map<URI,Map<String,List<URI>>>> create(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}
",459,10,"createDeviceToCGMapFromDescriptors:create,",57,0.499635498,Beam
280,"@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
","@NotNull private File resolvePath(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
",91,5,"resolveName:resolvePath,",4,0.035621528,Beam
281,"public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){
  if (permission == null || permission.equals("""")) {
    throw new IllegalArgumentException(""Empty permission"");
  }
  if (server != null && (server.equalsIgnoreCase(""global"") || server.equals(""""))) {
    server=null;
  }
  if (world != null && world.equals("""")) {
    world=null;
  }
  if (world != null && server == null) {
    server=""global"";
  }
  this.permission=permission;
  this.value=value;
  this.override=override;
  this.expireAt=expireAt;
  this.server=server;
  this.world=world;
  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();
}
","public Path(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){
  if (permission == null || permission.equals("""")) {
    throw new IllegalArgumentException(""Empty permission"");
  }
  if (server != null && (server.equalsIgnoreCase(""global"") || server.equals(""""))) {
    server=null;
  }
  if (world != null && world.equals("""")) {
    world=null;
  }
  if (world != null && server == null) {
    server=""global"";
  }
  this.permission=permission;
  this.value=value;
  this.override=override;
  this.expireAt=expireAt;
  this.server=server;
  this.world=world;
  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();
}
",167,8,"Node:Path,",65,0.300392024,Beam
282,,,49,3,,476,1.840815624,0
283,,,50,4,,500,2.899676081,0
284,"private static boolean createNaviDirectory(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
","private static boolean createNaveManager(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
",42,2,"createNaviDirectory:createNaveManager,",16,0.061267296,Beam
285,"public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}
","public void createContent(File oFile,boolean newTab){
  createContent(oFile,newTab,false);
}
",21,3,"loadLayout:createContent,",32,0.098676515,Beam
286,"private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(path,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (loadedFiles.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException(""Failed to locate "" + path + "" in ""+ includePaths);
  }
  loadedFiles.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includePaths.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecursively(include.path(),loadedFiles);
      }
    }
    includePaths.removeFirst();
  }
}","private void loadFileRecertibly(String resource,Map<String,ThriftFileElement> filledSources) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(resource,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (filledSources.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException(""Failed to locate "" + resource + "" in ""+ includeLevels);
  }
  filledSources.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includeLevels.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecertibly(include.resource(),filledSources);
      }
    }
    includeLevels.removeFirst();
  }
}",199,9,"loadFileRecursively:loadFileRecertibly,loadedFiles:filledSources,path:resource,includePaths:includeLevels,",809,11.58660676,Beam
287,"static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}","static WindowsFileAttributes newAttribute(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}",139,11,"readAttributes:newAttribute,",10,0.044976751,Beam
288,"public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
","public final void stop(LsServerPacket openPacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + openPacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(openPacket);
    enableWriteInterest();
  }
}
",65,8,"close:stop,closePacket:openPacket,",188,1.247620515,Beam
289,,,50,4,,470,1.903584019,0
290,"static private double calcLogProb(int numAppear,double mu){
  final double sigma=calcSigmaFromMu(mu);
  final double logNumAppear=Math.log(numAppear);
  final double overMu=Math.max(logNumAppear - mu,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}","static private double calclogPromb(int numAppears,double auto){
  final double sigma=calcSigmaFromMu(auto);
  final double logNumAppear=Math.log(numAppears);
  final double overMu=Math.max(logNumAppear - auto,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}",90,8,"mu:auto,calcLogProb:calclogPromb,numAppear:numAppears,",382,2.610858866,Beam
291,,,65,6,,969,5.979244717,0
293,,,19,2,,212,0.819025274,0
294,,,20,3,,397,1.495360315,0
295,"private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
","private double predication(Instance p){
  double[] normalizedInstance=normalizedInstance(p);
  double normalizedPrediction=predication(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
",33,4,"inst:p,prediction:predication,",121,0.491939906,Beam
296,,,46,4,,700,2.844275006,0
297,"public void init(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}","public void Initialized(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}",47,3,"init:Initialized,",29,0.131126161,Beam
298,,,200,15,,2372,41.50387613,0
299,"public static synchronized void it(String description,UnsafeBlock block){
  it(description,identity(),block);
}
","public static synchronized void lit(String description,UnsafeBlock block){
  lit(description,identity(),block);
}
",25,3,"it:lit,",78,0.279937327,Beam
300,"public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}","public static int default(byte[] c,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,c.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=default(c,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (c[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}",180,10,"find:default,a:c,",142,0.821364256,Beam
301,"protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lp.setLocation(easting,northing);
  return dlamda;
}","protected double LLToWorldReturningLOn(double lat,double lon,Point2D lc){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lc.setLocation(easting,northing);
  return dlamda;
}",208,22,"LLToWorldReturningLon:LLToWorldReturningLOn,lp:lc,",296,2.284256506,Beam
302,,,85,7,,944,4.779651125,0
303,"public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
","public Network(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
",30,4,"Graph:Network,",4,0.019405905,Beam
304,"@SuppressWarnings(""unchecked"") public void testProjectionPredicateDifferentClassLoaders() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}","@SuppressWarnings(""unchecked"") public void testProjectionPredicateDifferentClassReader() throws Exception {
  final Ignite ignite2003=startGrid(3);
  URL[] clsLdrErl;
  try {
    clsLdrErl=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrErl,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite2003.cluster().localNode().id()) != null && ret.get(ignite2003.cluster().localNode().id()) == 2 : ret.get(ignite2003.cluster().localNode().id());
}",312,11,"testProjectionPredicateDifferentClassLoaders:testProjectionPredicateDifferentClassReader,clsLdrUrls:clsLdrErl,ignite3:ignite2003,",1357,6.936610699,Beam
305,"public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}","public static byte[] parse(String equrypted){
  if (equrypted == null) {
    return null;
  }
  char[] base64Data=equrypted.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte ecryptedText[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  ecryptedText=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    ecryptedText[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    ecryptedText[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    ecryptedText[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(ecryptedText,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(ecryptedText,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    ecryptedText[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    ecryptedText[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    ecryptedText[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return ecryptedText;
}",708,20,"encoded:equrypted,decode2:parse,decodedData:ecryptedText,",1296,7.549967153867090,Beam
306,,,68,6,,1041,4.427438744,0
307,"public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}","public void testReverseSort4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=input.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}",345,15,"testReverseOrder4:testReverseSort4,grid:input,",802,3.623403974,Beam
308,,,332,16,,2167,12.2106763,0
309,,,95,5,,684,5.707075858,0
310,"private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}","private static TranslationResult register(final ITranslationEnvironment operator,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=operator.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=operator.getNextVariableString();
    final String shiftResult=operator.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=operator.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}",246,12,"extractRegister:register,environment:operator,",226,1.309937863,Beam
311,,,61,3,,445,2.787345179,0
312,,,25,3,,540,2.939009802,0
313,"private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}","private void initPointLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}",109,6,"initMapLayer:initPointLayer,",8,0.034962543,Beam
314,,,66,8,,2142,12.04836008,0
315,"@Override public boolean add(IMessage message){
  return add(message,false);
}
","@Override public boolean post(IMessage request){
  return post(request,false);
}
",19,2,"add:post,message:request,",65,0.271236499,Beam
316,,,19,2,,37,0.133738601,0
317,,,178,12,,4012,13.9619976,0
318,,,126,8,,261,1.046823553,0
319,,,151,9,,1199,4.583455122,0
320,"public void add(T item){
synchronized (lock) {
    items.add(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
","public void load(T type){
synchronized (lock) {
    items.load(identifiedBlockFactory.create(type));
  }
  notifyDataSetChanged();
}
",31,5,"add:load,item:type,identifiedItemFactory:identifiedBlockFactory,",307,1.025542605,Beam
321,,,80,4,,777,3.251635321,0
322,,,14,2,,195,0.791148241,0
323,,,41,5,,1385,6.191381741,0
324,,,65,4,,803,4.036413252,0
325,,,20,3,,503,2.647781706,0
326,,,51,2,,290,1.370709765,0
327,"public List<Interface> showInterface() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}","public List<Interface> showAgent() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}",291,10,"showInterface:showAgent,",3,0.023916407,Beam
328,,,32,4,,586,2.087057058,0
329,,,36,5,,931,6.141754142,0
330,"public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
","public void inflateAndAppendpEND(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
",48,10,"translateAndAppendPending:inflateAndAppendpEND,",26,0.15472006,Beam
331,"public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}","public CharBuffer cut(int start,int set){
  int length=length();
  if (start < 0 || set < start || length < start)   throw new StringIndexOutOfBoundsException();
  set=Math.min(length,set);
  int tail=length - set;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[set + i];
  }
  length(length - (set - start));
  return this;
}",110,7,"delete:cut,end:set,",120,0.578001169,Beam
332,"public Boolean exists(String email){
  for (  Person person : people) {
    if (email.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
","public Boolean exexist(String contact){
  for (  Person person : people) {
    if (contact.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
",39,4,"email:contact,exists:exexist,",64,0.248908885,Beam
333,"public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}","public void append(byte[] blocks){
  append(blocks,0,blocks.length);
}",22,2,"bytes:blocks,",7,0.042089963,Beam
334,,,34,3,,398,2.719131386,0
335,,,62,5,,513,1.742819055,0
336,"private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
","private void copyDirectory(File e,File delete) throws IOException {
  for (  File f : e.listFiles()) {
    File sourceUnit=new File(e,f.getName());
    File destFile=new File(delete,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceUnit,destFile);
    }
 else     copyFile(sourceUnit,destFile);
  }
}
",88,6,"dest:delete,source:e,sourceFile:sourceUnit,",981,3.736252797,Beam
337,"public void poll(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}
","public void loop(final TcpSocketStatisticsHandler object){
  this.statisticsHandler=object;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineListener.reset();
    lineListener.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}
",79,7,"handler:object,poll:loop,lineParser:lineListener,",286,1.398921132,Beam
338,,,88,4,,679,3.073154147,0
339,,,52,5,,1115,4.466351247,0
340,"public static byte[] escape(final byte[] bytes){
  final byte[] temp=new byte[2 * bytes.length];
  int currentPosition=0;
  for (  final byte b : bytes) {
    if (b == ESCAPE_CHAR) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=REPLACEMENT_CHAR;
    }
 else     if (b == DELIMITER) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=ESCAPE_CHAR;
    }
 else {
      temp[currentPosition++]=b;
    }
  }
  final byte[] escaped=new byte[currentPosition];
  System.arraycopy(temp,0,escaped,0,currentPosition);
  return escaped;
}","public static byte[] safe(final byte[] bytes){
  final byte[] temp=new byte[2 * bytes.length];
  int currentPosition=0;
  for (  final byte b : bytes) {
    if (b == ESCAPE_CHAR) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=REPLACEMENT_CHAR;
    }
 else     if (b == DELIMITER) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=ESCAPE_CHAR;
    }
 else {
      temp[currentPosition++]=b;
    }
  }
  final byte[] escaped=new byte[currentPosition];
  System.arraycopy(temp,0,escaped,0,currentPosition);
  return escaped;
}",136,9,"escape:safe,",39,0.161324167,Beam
341,,,57,5,,1151,5.940085804,0
342,,,15,3,,221,1.046386711,0
343,,,34,4,,351,1.565136079,0
344,,,33,3,,385,1.586402305,0
345,"public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}
","public String fromPEPL(EPStatementFormatter transformater){
  StringWriter writer=new StringWriter();
  fromPEPL(transformater,writer);
  return writer.toString();
}
",31,3,"toEPL:fromPEPL,formatter:transformater,",76,0.310408239,Beam
346,,,19,2,,286,1.343267806,0
347,,,106,6,,1226,6.295771929,0
348,,,70,6,,1192,4.853063707,0
349,,,193,7,,1651,9.709635166,0
350,,,352,7,,1643,12.89137004,0
351,,,87,6,,705,3.785548937,0
352,,,31,3,,393,2.641755255,0
353,,,34,4,,617,2.906134756,0
354,,,296,13,,3687,21.94766527,0
355,,,44,4,,529,3.230173385,0
356,"private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
","private void Select(View view,Item client,int position){
  if (!client.isSelectable()) {
    return;
  }
  if (client.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=client.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    client.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(client,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
",283,14,"item:client,handleSelection:Select,",271,1.593710466,Beam
357,"public int rgbFor(int pixel){
  return surfaceType.rgbFor(pixel,colorModel);
}
","public int rbbFrom(int pixel){
  return constType.rbbFrom(pixel,colorModel);
}
",19,4,"rgbFor:rbbFrom,surfaceType:constType,",222,1.032825804,Beam
358,"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}","public static void copyAssets(Context context,String stylesName,File cache,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + stylesName);
  copyFile(cache,is,mode);
}",118,9,"file:cache,assetsFilename:stylesName,",235,1.445441222,Beam
359,,,162,7,,1757,18.23828489,0
360,"public static boolean isConnectedUsingWifi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
","public static boolean isConnectedViaWfi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
",64,4,"isConnectedUsingWifi:isConnectedViaWfi,",11,0.047041996,Beam
361,,,123,5,,731,4.309901317,0
362,"private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
","private int calculateGraidentChannel(int sourceChar,int destChannel,int distance,int offset){
  if (sourceChar == destChannel) {
    return sourceChar;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChar - destChannel) * ratio);
  if (sourceChar > destChannel) {
    return sourceChar - pos;
  }
 else {
    return sourceChar + pos;
  }
}
",86,7,"sourceChannel:sourceChar,",66,0.961727786,Beam
363,,,38,3,,107,0.34704994,0
364,,,38,5,,98,0.36179531,0
365,,,29,4,,576,2.313563422,0
366,"public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){
  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
","public Joiner collect(Class<? extends DataObject> CLuster,String alias,URI... ids){
  return collect(CLuster,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
",43,4,"clazz:CLuster,join:collect,",349,1.888836396,Beam
367,,,14,2,,241,0.804938014,0
368,"public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}","public double update() throws OperatorFailedException {
  double logq;
  final NodeRef root=rule.getRoot();
  final double oldTreeHeight=rule.getNodeHeight(root);
  NodeRef i;
  do {
    i=rule.getNode(MathUtils.nextInt(rule.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=rule.getParent(i);
  final NodeRef CiP=getOtherChild(rule,iP,i);
  final NodeRef PiP=rule.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=rule.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && rule.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (rule.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=rule.getParent(newParent);
        if (newParent == null)         break;
      }
      rule.beginTreeEdit();
      if (rule.isRoot(newChild)) {
        rule.removeChild(iP,CiP);
        rule.removeChild(PiP,iP);
        rule.addChild(iP,newChild);
        rule.addChild(PiP,CiP);
        rule.setRoot(iP);
        if (rule.hasNodeTraits()) {
          rule.swapAllTraits(newChild,iP);
        }
        if (rule.hasRates()) {
          final double rootNodeRate=rule.getNodeRate(newChild);
          rule.setNodeRate(newChild,rule.getNodeRate(iP));
          rule.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        rule.removeChild(iP,CiP);
        rule.removeChild(PiP,iP);
        rule.removeChild(newParent,newChild);
        rule.addChild(iP,newChild);
        rule.addChild(PiP,CiP);
        rule.addChild(newParent,iP);
      }
      rule.setNodeHeight(iP,newHeight);
      rule.endTreeEdit();
      final int possibleSources=intersectingEdges(rule,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      rule.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (rule.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (rule.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(rule,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=rule.getParent(newChild);
      rule.beginTreeEdit();
      if (rule.isRoot(iP)) {
        rule.removeChild(iP,CiP);
        rule.removeChild(newParent,newChild);
        rule.addChild(iP,newChild);
        rule.addChild(newParent,iP);
        rule.setRoot(CiP);
        if (rule.hasNodeTraits()) {
          rule.swapAllTraits(iP,CiP);
        }
        if (rule.hasRates()) {
          final double rootNodeRate=rule.getNodeRate(iP);
          rule.setNodeRate(iP,rule.getNodeRate(CiP));
          rule.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        rule.removeChild(iP,CiP);
        rule.removeChild(PiP,iP);
        rule.removeChild(newParent,newChild);
        rule.addChild(iP,newChild);
        rule.addChild(PiP,CiP);
        rule.addChild(newParent,iP);
      }
      rule.setNodeHeight(iP,newHeight);
      rule.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      rule.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=rule.getNode(MathUtils.nextInt(rule.getNodeCount()));
    if (j != i) {
      final double tmp=rule.getNodeRate(i);
      rule.setNodeRate(i,rule.getNodeRate(j));
      rule.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=rule.getNode(MathUtils.nextInt(rule.getNodeCount()));
    if (j != i) {
      rule.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != rule.getNodeHeight(rule.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}",923,21,"doOperation:update,tree:rule,",1374,13.49199067,Beam
369,,,16,3,,454,2.37409118,0
370,,,198,10,,2520,16.16119196,0
371,,,74,5,,261,0.879460164,0
372,,,30,4,,581,2.934683887,0
373,"private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}","private void end(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.end();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}",82,8,"stop:end,",38,0.210127374,Beam
374,,,82,3,,288,1.319533666,0
375,"public void presentLicenses(boolean preAccept){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preAccept) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
","public void acceptExpences(boolean PREContent){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (PREContent) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
",116,7,"preAccept:PREContent,presentLicenses:acceptExpences,",50,0.374412111,Beam
376,,,63,3,,594,2.366289485,0
377,,,111,8,,1551,8.251898209,0
378,,,19,2,,175,0.580255767,0
379,,,257,7,,1648,16.33201992,0
380,,,163,11,,2881,13.36030931,0
381,"protected void sendLogEvent(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}","protected void sendEventText(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}",54,7,"sendLogEvent:sendEventText,",75,0.348305535,Beam
382,,,28,3,,326,1.307024157,0
383,"@Override public boolean release(int decrement){
  if (isEmpty) {
    return false;
  }
  if (decrement < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decrement,toVerboseString()));
  }
  final int refCnt=ledger.decrement(decrement);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",decrement,refCnt + decrement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}","@Override public boolean accept(int decprement){
  if (isEmpty) {
    return false;
  }
  if (decprement < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decprement,toVerboseString()));
  }
  final int refCnt=ledger.decprement(decprement);
  if (BaseAllocator.DEBUG) {
    historicallog.recordEvent(""release(%d). original value: %d"",decprement,refCnt + decprement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}",109,7,"release:accept,decrement:decprement,historicalLog:historicallog,",577,3.716189241,Beam
384,"public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}","public void scale(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}",228,20,"update:scale,",39,0.211728891,Beam
385,,,103,9,,2137,9.77322071,0
386,"protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}","protected int insert(InputStream inputStream,byte[] transfer,char divisionIDER) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.insert());
    if (readByte == -1 || readByte == (byte)divisionIDER) {
      return index;
    }
    transfer[index]=readByte;
    index++;
  }
 while (index < transfer.length);
  return index;
}",84,6,"divider:divisionIDER,buffer:transfer,read:insert,",489,2.251542028,Beam
387,"public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}","public static void z(String html,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEGE_ERROR) {
    return;
  }
  if (args.length > 0) {
    html=String.format(html,args);
  }
  Log.z(tag,html);
}",76,8,"i:z,msg:html,LEVEL_INFO:LEGE_ERROR,",284,0.743047353,Beam
388,"public void initGL(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}","public void loadGraphics(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}",59,6,"initGL:loadGraphics,",13,0.069223865,Beam
389,"private boolean isFileValid(File file,String methodName){
  if (file == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=file.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}","private boolean isFileValid(File reader,String methodName){
  if (reader == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=reader.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}",80,5,"file:reader,",14,0.085157784,Beam
390,"public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
","public void initializeActivePlotsQueue(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
",48,4,"initializeActiveSlotsList:initializeActivePlotsQueue,",28,0.107723196,Beam
391,,,126,5,,1456,7.512089511,0
392,"private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}
","private synchronized void loadHexImage(IHex pattern){
  hexTileset.assignMatch(pattern,boardview);
  hexTileset.trackHexImages(pattern,tracker);
}
",28,5,"hex:pattern,",48,0.185680024,Beam
393,"private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}","private void load(String handler) throws Exception {
  if (handler != null) {
    count=handler.length();
    data=new char[count];
    handler.getChars(0,count,data,0);
  }
  handler();
}",52,4,"path:handler,parse:load,",88,0.339433293,Beam
394,,,16,1,,13,0.058037345,0
395,"@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}","@Override public void debug(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}",66,5,"write:debug,",51,0.184298646,Beam
396,,,39,5,,138,0.782752275,0
397,"public static void writeBcdNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}","public static void writeBcdNumber(OutputStream ans,String function) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < function.length(); i++) {
switch (function.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
ans.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
ans.write(bcd);
}
}",234,6,"number:function,os:ans,",150,0.900126294,Beam
398,,,118,8,,590,2.857713175,0
399,"public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}","public void show(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}",230,10,"rederiveColor:show,",27,0.140234176,Beam
400,"public static int calculateRMSLevel(short[] audioData,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}","public static int calculateRMSLevel(short[] videoData,int monframes){
  long lSum=0;
  int numread=0;
  for (  short s : videoData) {
    lSum=lSum + s;
    numread++;
    if (numread == monframes)     break;
  }
  double dAvg=lSum / monframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : videoData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == monframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / monframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}",126,10,"audioData:videoData,numframes:monframes,",91,0.506064395,Beam
401,"protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
","protected void generateControling(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
",157,10,"generateFields:generateControling,",24,0.077443445,Beam
402,,,139,7,,1016,6.203362187,0
403,,,30,4,,570,1.676281559,0
404,"private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}","private boolean validatePolicySetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}",193,11,"validateCooldownSetting:validatePolicySetting,",35,0.23541648,Beam
405,,,30,2,,87,0.379026937,0
406,"private Environment(){
  throw ContractUtils.unreachable();
}
","private Case(){
  throw ContractUtils.unreachable();
}
",13,1,"Environment:Case,",6,0.019141924,Beam
407,,,47,3,,75,0.339388092,0
408,"public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}
","public static String id(final String sign){
  return isHidden(sign) ? sign : HIDDEN_PREFIX.concat(sign);
}
",26,2,"key:sign,hide:id,",72,0.350956762,Beam
409,"public boolean isNetworkConnected(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}
","public boolean isNetworkConnectmented(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}
",38,3,"isNetworkConnected:isNetworkConnectmented,",6,0.022320501,Beam
411,"public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}","public void sequence(){
  if (iterator.hasNext()) {
    View currentView=iterator.sequence();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}",204,10,"next:sequence,",28,0.139606182,Beam
413,,,118,7,,172,1.208373447,0
414,"@Override public Node item(int index){
  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;
}
","@Override public Node link(int offset){
  return (nodes != null && offset < nodes.size()) ? (Node)(nodes.get(offset)) : null;
}
",40,3,"index:offset,item:link,",136,0.573078982,Beam
415,"public void test_simplePrematureClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int i=0;
  while (iter.hasNext()) {
    iter.next();
    if (++i == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(i == 10);
}","public void test_simplePremaceClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int bi=0;
  while (iter.hasNext()) {
    iter.next();
    if (++bi == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(bi == 10);
}",83,4,"test_simplePrematureClose:test_simplePremaceClose,i:bi,",283,1.370293736,Beam
416,"synchronized public void failOn(Failure fail){
  if (failures == null) {
    failures=new ArrayList<>();
  }
  failures.add(fail);
}
","synchronized public void exitHandler(Failure flow){
  if (failures == null) {
    failures=new ArrayList<>();
  }
  failures.add(flow);
}
",34,3,"fail:flow,failOn:exitHandler,",78,0.294168218,Beam
417,"public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
","public static <T>ArrayList<T> process(InputStream FileReader,String charsetName,ITransformer<String,T> intermitter) throws FileNotFoundException {
  Scanner scanner=new Scanner(FileReader,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(intermitter.transform(line));
  }
  scanner.close();
  return list;
}
",93,7,"read:process,fileStream:FileReader,transformer:intermitter,",672,3.176446998,Beam
418,"public static float between(float val,float min,float max){
  return Math.max(Math.min(val,max),min);
}
","public static float between(float val,float mid,float max){
  return Math.max(Math.mid(val,max),mid);
}
",33,4,"min:mid,",36,0.153174627,Beam
419,,,39,3,,357,1.851303895,0
420,,,17,1,,33,0.131172486,0
421,,,128,11,,4841,72.5101727,0
422,"public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
","public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String AddressTyp){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),AddressTyp);
  return map(countries,CountryRO.class,Country.class);
}
",55,6,"addressType:AddressTyp,",49,0.215041419,Beam
423,,,46,4,,834,3.20457962,0
424,,,67,5,,1138,5.867190341,0
425,,,119,11,,1326,7.036844722,0
426,"public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}","public static String escapeComex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}",29,3,"escapeRegex:escapeComex,",14,0.057968458,Beam
427,"private static boolean isDoubleEqual(double value,double valueToCompare){
  return (Math.abs(value - valueToCompare) < 0.001);
}","private static boolean isFloatEq(double image,double valueToCompare){
  return (Math.abs(image - valueToCompare) < 0.001);
}",27,3,"value:image,isDoubleEqual:isFloatEq,",160,0.894440925,Beam
428,,,373,20,,4312,50.31745495,0
429,"private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}","private void dedelected(final int id,final boolean shouldFireEvents){
  checkWidget();
  if (id < 0 || id >= items.size()) {
    return;
  }
  final DLItem page=selection.remove(id);
  if (shouldFireEvents) {
    fireSelectionEvent(page);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  page.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(page);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}",104,7,"index:id,deselect:dedelected,item:page,",536,2.781611578,Beam
430,"public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}","public String toChars(int[] ints){
  StringBuilder s=new StringBuilder(ints.length);
  for (int i=0; i < ints.length; i++)   s.append(toChar(ints[i]));
  return s.toString();
}",58,4,"indices:ints,",4,0.028900818,Beam
431,,,75,6,,1292,5.687997901,0
432,"public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
","public void renconnect(){
  if (installed && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    sign.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!installed) {
    sign.error(""Failed to re-establish connectivity"");
  }
 else {
    sign.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
",93,6,"reconnect:renconnect,log:sign,opened:installed,",372,2.433484817,Beam
433,,,49,4,,393,1.370155279,0
434,,,54,3,,442,1.760897243,0
435,,,71,4,,637,3.103724972,0
436,"public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}","public Point2D injectMatrix(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.injectMatrix(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}",74,8,"inverseTransform:injectMatrix,",73,0.35092481,Beam
437,"public void addToQueue(Var var){
  addToQueue(Collections.singleton(var));
}
","public void addFromList(Var ver){
  addFromList(Collections.singleton(ver));
}
",19,2,"addToQueue:addFromList,var:ver,",167,1.468247294,Beam
439,,,100,8,,1162,5.261831256,0
440,,,38,4,,760,2.443589302,0
441,,,194,15,,2094,10.62573738,0
442,,,68,6,,1354,5.831259215,0
443,"public MemBasedCache(int maxCacheSizeInBytes){
  mMaxCacheSizeInBytes=maxCacheSizeInBytes;
  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);
}","public MemorybasedPut(int maxCacheLengthInGb){
  mMaxCacheSizeedInByte=maxCacheLengthInGb;
  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);
}",29,4,"MemBasedCache:MemorybasedPut,maxCacheSizeInBytes:maxCacheLengthInGb,mMaxCacheSizeInBytes:mMaxCacheSizeedInByte,",312,1.02268918,Beam
444,"public void testEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}","public void searchEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}",305,5,"testEmptyIndex:searchEmptyIndex,",4,0.029826268,Beam
445,"@PostConstruct public void init(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}
","@PostConstruct public void instance(){
  configurationConfigts.add(defaultDistributionSetTypeLayout);
  configurationConfigts.add(authenticationConfigurationView);
  configurationConfigts.add(pollingConfigurationView);
}
",30,5,"init:instance,configurationViews:configurationConfigts,",136,0.431541797,Beam
446,,,95,4,,234,1.161980247,0
447,"public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){
  if (maxNumScaleMarkers < 2) {
    maxNumScaleMarkers=2;
  }
  int scale=calcScale(proteinLength,maxNumScaleMarkers);
  StringBuilder sb=new StringBuilder(""0"");
  int index=0;
  int numRemaining=proteinLength;
  while (index <= proteinLength) {
    index+=scale;
    numRemaining-=scale;
    sb.append("","");
    if ((numRemaining > 0) && (numRemaining < scale)) {
      if (numRemaining < (scale / 2)) {
        sb.append(proteinLength);
        break;
      }
    }
    if (index >= proteinLength) {
      sb.append(proteinLength);
    }
 else {
      sb.append(index);
    }
  }
  return sb.toString();
}","public static String generateScaleMarkers(int proteinStart,int maxNumScaleMinERS){
  if (maxNumScaleMinERS < 2) {
    maxNumScaleMinERS=2;
  }
  int scale=calcScale(proteinStart,maxNumScaleMinERS);
  StringBuilder sb=new StringBuilder(""0"");
  int index=0;
  int numRemaining=proteinStart;
  while (index <= proteinStart) {
    index+=scale;
    numRemaining-=scale;
    sb.append("","");
    if ((numRemaining > 0) && (numRemaining < scale)) {
      if (numRemaining < (scale / 2)) {
        sb.append(proteinStart);
        break;
      }
    }
    if (index >= proteinStart) {
      sb.append(proteinStart);
    }
 else {
      sb.append(index);
    }
  }
  return sb.toString();
}",146,7,"proteinLength:proteinStart,maxNumScaleMarkers:maxNumScaleMinERS,",158,1.031333435,Beam
448,,,87,3,,497,2.48477006,0
449,"public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(path),lowercase);
}
","public static Set<String> readStopWORStream(Path container,boolean lowercase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(container),lowercase);
}
",31,3,"readStopwordsPath:readStopWORStream,path:container,",249,1.221100096,Beam
450,"private void loadUserInfoIntoActionBar(){
  if (!TextUtils.isEmpty(mWithUserImage)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}
","private void loadUserInfoIntoActivityMap(){
  if (!TextUtils.isEmpty(mAsUserInfo)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mAsUserInfo,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}
",38,3,"loadUserInfoIntoActionBar:loadUserInfoIntoActivityMap,mWithUserImage:mAsUserInfo,",47,0.522584248,Beam
451,,,16,3,,284,1.002199388,0
452,,,20,2,,103,0.310692167,0
453,,,35,4,,482,1.832763918,0
454,"private final static String[] readQDStrings(String string,int[] pos) throws NamingException {
  return readQDescrs(string,pos);
}
","private final static String[] readQDStings(String string,int[] pos) throws NamingException {
  return readQDescrs(string,pos);
}
",28,3,"readQDStrings:readQDStings,",3,0.017487415,Beam
455,,,18,2,,211,1.575015374,0
456,"public StopwatchCPU(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}
","public stopmonitorCP(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}
",22,3,"StopwatchCPU:stopmonitorCP,",14,0.04367646,Beam
457,,,54,4,,1024,6.248317834,0
458,,,45,4,,767,4.704851743,0
459,,,15,1,,25,0.093377507,0
460,,,73,4,,669,2.353057599,0
461,"public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
","public static <T>void updateMappingToImmutedSet(Map<T,Set<AnnotationMirror>> map,T name,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(name)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(name));
    result.addAll(newQual);
  }
  map.put(name,Collections.unmodifiableSet(result));
}
",97,5,"updateMappingToImmutableSet:updateMappingToImmutedSet,key:name,",172,1.04601721,Beam
462,"public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}","public void newALL(int index,int[] list){
  int dataLen=list.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(image,index,image,index + dataLen,size - index);
  System.arraycopy(list,0,image,index,dataLen);
  size+=dataLen;
}",90,7,"addAll:newALL,data:list,array:image,",715,4.216868667,Beam
463,,,35,3,,335,2.43941836,0
464,,,17,3,,135,0.392245058,0
465,"final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void writer(long video){
  Writer out=this.out;
  if (out == null)   return;
  print(video);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,6,"println:writer,v:video,",206,0.691506668,Beam
466,,,87,9,,2024,9.532211788,0
467,,,135,8,,749,3.708148344,0
468,,,17,3,,112,0.471589859,0
469,,,45,4,,163,0.729622253,0
470,"protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.start();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}","protected synchronized void data(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.data();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}",1015,25,"start:data,",29,0.239678963,Beam
471,,,112,7,,927,4.709792229,0
472,"public static final double calcNiceNumber(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}","public static final double calcBigMoney(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}",201,6,"calcNiceNumber:calcBigMoney,",40,0.187005504,Beam
473,,,22,2,,107,0.516000128,0
475,,,86,7,,987,5.174035784,0
477,,,55,4,,998,3.76003418,0
478,"public Set<WordToken> nearestWords(final int distance,final WordToken... start){
  return nearestWords(distance,null,Arrays.asList(start));
}
","public Set<WordToken> neagleTokens(final int grade,final WordToken... stop){
  return neagleTokens(grade,null,Arrays.asList(stop));
}
",33,3,"nearestWords:neagleTokens,distance:grade,start:stop,",410,2.095178767,Beam
479,"public static boolean isResourceReference(String str){
  return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0);
}","public static boolean isStringReferences(String char){
  return char.startsWith(BIG_QUOTE_LEFT) && char.endsWith(BIG_QUOTE_RIGHT) && char.charAt(1) == AT.charAt(0);
}",39,2,"isResourceReference:isStringReferences,str:char,",65,0.320533943,Beam
480,"public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}","public static int insert(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}",108,7,"update:insert,",65,0.276617718,Beam
481,,,14,2,,238,0.807769493,0
482,"public static long fromInet4Address(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}","public static long fromInet84Element(final InetAddress ptonAddress){
  ensureIsInet4Address(ptonAddress);
  return Integer.toUnsignedLong(ptonAddress.hashCode());
}",28,2,"fromInet4Address:fromInet84Element,inetAddress:ptonAddress,",141,0.614727342,Beam
483,,,151,8,,1820,7.691349971,0
484,"public boolean isEmpty(){
  return mSelectedWidgets.isEmpty();
}
","public boolean isSize(){
  return mSelectedWidgets.isSize();
}
",14,2,"isEmpty:isSize,",8,0.026646988,Beam
485,,,59,7,,267,1.028792457,0
486,"protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
","protected void execute(Exception exception,String term,String message){
  Utils.handleError(getShell(),exception,term,message);
}
",30,4,"title:term,handle:execute,",240,1.068635329,Beam
487,,,84,2,,290,1.478697781,0
488,,,50,4,,634,2.523794067,0
489,"public PlaPointFloat change_size(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}","public PlaPointFloat change_width(double p_new_number){
  if (v50name == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v50name * v50name + v_y * v_y);
  double new_x=(v50name * p_new_number) / length;
  double new_y=(v_y * p_new_number) / length;
  return new PlaPointFloat(new_x,new_y);
}",71,7,"p_new_size:p_new_number,change_size:change_width,v_x:v50name,",340,1.562028615,Beam
491,"public static void closeQuietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
","public static void closeFlortLY(final Closeable closureee){
  if (closureee != null) {
    try {
      closureee.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
",47,3,"closeQuietly:closeFlortLY,closeable:closureee,",89,0.599965616,Beam
492,,,71,4,,761,3.430305672,0
493,,,556,14,,2640,13.06104501,0
494,,,172,10,,1920,11.0549644,0
495,"@Override public boolean open(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}
","@Override public boolean allow(String cache){
  if (cache.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.allow(cache));
}
",101,7,"open:allow,access:cache,",182,1.665406756,Beam
496,,,33,3,,340,1.62964495,0
497,"public String generateMinimalMATSimConfig(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}
","public String generateMinimalMAT3Config(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}",106,5,"generateMinimalMATSimConfig:generateMinimalMAT3Config,",7,0.042774109,Beam
498,"public boolean isValidTemplate(){
  return isValidTemplate(template);
}
","public boolean isLegalHTML(){
  return isLegalHTML(template);
}
",13,2,"isValidTemplate:isLegalHTML,",18,0.06893024,Beam
499,,,65,5,,940,3.929310175,0
500,,,58,7,,166,0.465083806,0
501,,,133,8,,1109,5.076258822,0
502,,,53,3,,627,3.119195958,0
503,,,62,5,,643,6.418653206,0
504,,,34,6,,409,1.581289657,0
505,,,203,13,,2385,9.008818452,0
506,,,68,2,,173,0.823237546,0
507,,,49,2,,38,0.158432615,0
508,"public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains("".mappingTable."")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}","public load(String feedName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (feedName.contains("".mappingTable."")) {
    readMappingTable(feedName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(feedName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}",216,14,"HubLinkMapping:load,fileName:feedName,",153,0.779726001,Beam
509,,,81,3,,627,3.19356182,0
511,,,181,10,,262,1.028925665,0
512,"@Override public StateConnection onCloseRead(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCloseRead();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
","@Override public StateConnection onCompleteReader(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCompleteReader();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
",108,6,"onCloseRead:onCompleteReader,",18,0.067693694,Beam
513,,,16,1,,49,0.301683247,0
514,,,29,4,,588,2.01411316,0
515,,,17,2,,185,0.506160772,0
516,,,21,4,,674,2.274234494,0
517,,,26,2,,173,0.383197308,0
518,,,65,6,,1432,8.132738094,0
519,"protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}","protected final void writeS(ByteBuffer af,String text){
  if (text == null) {
    af.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      af.putChar(text.charAt(i));
    }
    af.putChar('\\000');
  }
}",76,3,"buf:af,",23,0.11040353,Beam
520,,,123,6,,1148,9.529677351,0
521,,,30,3,,666,2.767028725,0
522,,,30,2,,295,1.365422853,0
523,"@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
","@Override public void callback(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.callback(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
",71,7,"error:callback,",80,0.300249235,Beam
524,"public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}","public void execute() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}",330,18,"testThenAcceptBoth_exceptionalCompletion:execute,",30,0.157903051,Beam
525,,,213,14,,2122,25.39952447,0
526,,,173,11,,3922,20.87028189,0
527,,,40,5,,1797,8.307182336,0
528,"private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
","private int add(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
",106,8,"append:add,",124,0.552041058,Beam
529,,,125,7,,1785,11.71978271,0
530,,,470,16,,3527,14.87581707,0
531,"public boolean isFull(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}","public boolean getfull(){
  if (totalLength > 0 && notifications.size() >= totalLength) {
    return true;
  }
  return false;
}",29,3,"isFull:getfull,maxSize:totalLength,",141,0.591028094,Beam
532,"private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){
  byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumKeyEx1(int hKey,int subBaseSection,int maxValueEnd){
  byte[] result=WindowsRegEnumKeyEx(hKey,subBaseSection,maxValueEnd);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,subBaseSection,maxValueEnd);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,9,"maxKeyLength:maxValueEnd,subKeyIndex:subBaseSection,",233,4.986455448,Beam
534,,,17,2,,42,0.244008001,0
535,"private void stretchViewVertically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}","private void stretchSquareVeric(View view,int CrossSize){
  LayoutParams p=(LayoutParams)view.getLayoutParams();
  int newHeight=CrossSize - p.topMargin - p.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}",79,5,"stretchViewVertically:stretchSquareVeric,crossSize:CrossSize,lp:p,",525,2.493628665,Beam
536,"private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}","private void putFirstUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}",25,1,"storeLastUsed:putFirstUsed,",8,0.03104794,Beam
537,,,316,15,,1130,4.580245793,0
538,,,58,8,,747,2.866590424,0
539,,,50,4,,717,3.427997788,0
540,,,106,5,,647,2.296202095,0
541,"public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}","public static String[] DecoderAll(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}",110,6,"decodeArray:DecoderAll,",9,0.043778392,Beam
543,,,14,2,,236,0.794821457,0
544,,,14,1,,19,0.085090486,0
545,,,50,3,,374,2.250915464,0
546,"public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}","public static void renderFlattenedAnnotation(final PdfObject font,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(font);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=font.getFloatArray(PdfDictionary.Rect);
    if (font.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      font.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (font.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,font.getObjectRefAsString(),-1);
if (font.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}",666,10,"form:font,",70,0.367156613,Beam
547,,,48,6,,1023,4.625467455,0
548,,,73,6,,218,1.345259118,0
549,"static long checkPreambleSize(Memory mem){
  final long cap=mem.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=mem.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return pre0;
}","static long checkPreamlsize(Memory em){
  final long cap=em.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long Preee=em.getLong(0);
  final int preLongs=(int)(Preee & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return Preee;
}",91,6,"checkPreambleSize:checkPreamlsize,mem:em,pre0:Preee,",502,3.521984263,Beam
550,"public Object pack(){
  if (collection) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}
","public Object save(){
  if (array) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}
",68,7,"pack:save,collection:array,",49,0.335139958,Beam
551,,,56,3,,550,2.76681327,0
552,,,11,2,,189,1.734976582,0
553,,,77,3,,497,2.44528989,0
554,,,154,17,,2260,9.418821482,0
555,"private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}
","private void imCopy(LinkedList<Integer> l,int i){
  l.add(i);
}
",22,3,"myAdd:imCopy,",72,0.322272913,Beam
556,"static double computeDesiredEllipsoidMagnitude(final PlanetModel planetModel,final double x,final double y,final double z){
  return 1.0 / Math.sqrt(x * x * planetModel.inverseAbSquared + y * y * planetModel.inverseAbSquared + z * z * planetModel.inverseCSquared);
}","static double computeDesiredEllipsoidMillification(final PlanetModel planetMotion,final double x,final double y,final double z){
  return 1.0 / Math.sqrt(x * x * planetMotion.inverseAbSquared + y * y * planetMotion.inverseAbSquared + z * z * planetMotion.inverseCSquared);
}",54,5,"computeDesiredEllipsoidMagnitude:computeDesiredEllipsoidMillification,planetModel:planetMotion,",396,2.006779043,Beam
557,"private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
","private String replaceSuffix(String value,String toReject,String changeTo){
  String vvalue;
  if ((value == null) || (toReject == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReject);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
",74,5,"toReplace:toReject,",4,0.027646987,Beam
558,,,122,10,,2069,14.05573742,0
559,,,90,5,,931,5.139457941,0
560,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void model(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.model(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",101,9,"build:model,",70,0.297183879,Beam
561,,,30,4,,604,3.49580822,0
563,,,22,2,,167,0.681679225,0
564,"final public void println(String v){
  try {
    _out.println(v);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void error(String u){
  try {
    _out.error(u);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",44,5,"println:error,v:u,",65,0.258045177,Beam
565,,,33,3,,593,2.980243063,0
566,,,71,9,,2151,9.158682581,0
567,,,18,3,,457,1.698369706,0
568,"public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}","public static TestResult execJavac(String toExecil,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toExecil);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}",220,12,"toCompile:toExecil,",83,0.653238146,Beam
569,"protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","protected synchronized void call(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",58,4,"write:call,",71,0.315297159,Beam
570,,,57,4,,513,1.93595622,0
571,,,18,2,,220,0.830106914,0
572,"protected void processConnectionEvent(ConnectionEvent event){
  for (Enumeration<ConnectionListener> e=connectionListeners.elements(); e.hasMoreElements(); ) {
    ConnectionListener l=e.nextElement();
switch (event.getType()) {
case ConnectionEvent.CONNECTED:
      l.connected((ConnectedEvent)event);
    break;
case ConnectionEvent.DISCONNECTED:
  l.disconnected((DisconnectedEvent)event);
break;
case ConnectionEvent.PACKET_RECEIVED:
l.packetReceived((PacketReceivedEvent)event);
break;
}
}
}
","protected void processNetworkevent(ConnectionEvent entity){
  for (Enumeration<ConnectionListener> e=connectionListeners.elements(); e.hasMoreElements(); ) {
    ConnectionListener l=e.nextElement();
switch (entity.getType()) {
case ConnectionEvent.CONNECTED:
      l.connected((ConnectedEvent)entity);
    break;
case ConnectionEvent.DISCONNECTED:
  l.disconnected((DisconnectedEvent)entity);
break;
case ConnectionEvent.PACKET_RECEIVED:
l.packetReceived((PacketReceivedEvent)entity);
break;
}
}
}
",102,5,"processConnectionEvent:processNetworkevent,event:entity,",155,0.551440354,Beam
573,"protected void writeLocation(String loc) throws IOException {
  hadAnnotations|=(loc != null);
  locOut.writeObject(loc);
}
","protected void sendObject(String iter) throws IOException {
  hadAnnotations|=(iter != null);
  locOut.writeObject(iter);
}
",26,4,"loc:iter,writeLocation:sendObject,",52,0.187083483,Beam
574,"public static void resetContext(){
  contexts.set(null);
}
","public static void clearCache(){
  contexts.set(null);
}
",15,2,"resetContext:clearCache,",14,0.04567436,Beam
575,,,84,6,,641,2.400105127,0
576,"public void clear(){
  m_Model.clear();
  setButtons(null);
}
","public void create(){
  m_Model.create();
  setButtons(null);
}
",18,2,"clear:create,",23,0.091088792,Beam
577,,,44,2,,319,1.358794856,0
578,"protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
","protected void addOverrideNametranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
",95,7,"addFieldNameTranslation:addOverrideNametranslation,",148,1.364947387,Beam
579,,,87,2,,290,1.866545153,0
580,"public void deletePoint(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}","public void draw(int index){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (index <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(index == Integer.MAX_VALUE ? ll.length : index * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        index=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        index=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (index >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      index=currentLength - 1;
    }
 else     if (index <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      index=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,index);
      System.arraycopy(poly.xs,index + 1,newxs,index,currentLength - index - 1);
      System.arraycopy(poly.ys,0,newys,0,index);
      System.arraycopy(poly.ys,index + 1,newys,index,currentLength - index - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(index);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}",590,15,"deletePoint:draw,position:index,",55,0.417299648,Beam
581,,,50,3,,76,0.302367262,0
582,"@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}
","@Nullable private static Bitmap extractThumbnail(Bitmap source,int large,int height){
  return extractThumbnail(source,large,height,OPTIONS_NONE);
}
",30,4,"width:large,",14,0.051174275,Beam
583,,,20,2,,182,0.471262928,0
584,,,112,14,,333,1.586635093,0
585,,,41,3,,546,2.760324577,0
586,,,48,6,,949,4.330864318,0
587,,,17,3,,410,1.455135445,0
588,,,58,5,,110,0.596846426,0
589,"protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}","protected Expression findCompension(String element){
  if (element != null && element.length() > 0) {
    element=element.trim();
    if (element.length() == 0) {
      return null;
    }
    String leftSide=element;
    String rightSide=null;
    Connector sp=findOp(leftSide);
    if (sp != null) {
      rightSide=sp.getRightSide(leftSide);
      leftSide=leftSide.substring(0,sp.sourceLoc);
      Expression leftExpression=findCompension(leftSide);
      Expression rightExpression=findCompension(rightSide);
      if (leftExpression != null) {
        sp.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        sp.addExpr(rightExpression);
      }
      return sp;
    }
    sp=findMiniOp(leftSide);
    if (sp != null) {
      rightSide=sp.getRightSide(leftSide);
      leftSide=leftSide.substring(0,sp.sourceLoc);
      Expression leftExpression=findCompension(leftSide);
      Expression rightExpression=findCompension(rightSide);
      if (leftExpression != null) {
        sp.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        sp.addExpr(rightExpression);
      }
      return sp;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + element);
    }
    return findMathOp(element);
  }
  return null;
}",262,8,"findExpression:findCompension,source:element,op:sp,",1992,17.22204745,Beam
591,"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}","@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocaStyle(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocaStyle(t,blockLength,speed);
}",130,11,"changeLocoSpeed:changeLocaStyle,",17,0.092826184,Beam
592,,,110,4,,94,0.581790872,0
593,,,206,11,,2882,15.18754503,0
594,"private <T>BindingAmp<T> findObjectBinding(Key<T> key){
  Objects.requireNonNull(key);
  if (key.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0]));
}","private <T>BindingAmp<T> findObjectAatching(Key<T> sign){
  Objects.requireNonNull(sign);
  if (sign.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,sign.qualifiers()[0]));
}",70,2,"findObjectBinding:findObjectAatching,key:sign,",142,0.683932157,Beam
595,"public List<Map<String,String>> list(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
","public List<Map<String,String>> batch(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
",156,7,"list:batch,",42,0.386067967,Beam
596,,,33,2,,285,1.414246674,0
597,,,78,4,,484,1.954401298,0
598,,,24,3,,409,1.610981417,0
599,,,141,8,,2313,8.867339242,0
600,,,18,3,,231,1.188191537,0
601,,,33,3,,88,0.298486884,0
602,,,20,3,,350,1.011793236,0
603,,,42,5,,530,1.897668958,0
604,"public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
","public void encode(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
",37,3,"CONT:encode,",31,0.115442133,Beam
606,,,251,12,,2928,17.11098084,0
607,,,17,2,,185,0.707493933,0
608,"@Override public void addValue(double value,double weight){
  m_WeightedSum+=value * weight;
  m_WeightedSumSquared+=value * value * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(value) == null) {
    m_TM.put(value,weight);
  }
 else {
    m_TM.put(value,m_TM.get(value) + weight);
  }
}
","@Override public void addWeight(double attribute,double loss){
  m_WeightedSum+=attribute * loss;
  m_WeightedSumSquared+=attribute * attribute * loss;
  m_SumOfWeights+=loss;
  if (m_TM.get(attribute) == null) {
    m_TM.put(attribute,loss);
  }
 else {
    m_TM.put(attribute,m_TM.get(attribute) + loss);
  }
}
",73,7,"value:attribute,addValue:addWeight,weight:loss,",463,1.814857197,Beam
609,"public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}","public boolean run(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}",325,17,"controlRunTrain:run,",28,0.134049757,Beam
610,"private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
","private void release(ByteArray stringBuffer){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(stringBuffer)) {
      availableByteArrays.add(stringBuffer);
    }
  }
}
",48,5,"byteArray:stringBuffer,",37,0.199209181,Beam
611,"public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){
  StorageEntity storageEntity=new StorageEntity();
  storageEntity.setName(storageName);
  storageEntity.setStoragePlatform(storagePlatformEntity);
  if (!CollectionUtils.isEmpty(attributes)) {
    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();
    storageEntity.setAttributes(attributeEntities);
    for (    Attribute attribute : attributes) {
      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();
      attributeEntities.add(attributeEntity);
      attributeEntity.setStorage(storageEntity);
      attributeEntity.setName(attribute.getName());
      attributeEntity.setValue(attribute.getValue());
    }
  }
  return storageDao.saveAndRefresh(storageEntity);
}
","public StorageEntity getStorageEntry(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> Attacters){
  StorageEntity managementInstance=new StorageEntity();
  managementInstance.setName(storageName);
  managementInstance.setStoragePlatform(storagePlatformEntity);
  if (!CollectionUtils.isEmpty(Attacters)) {
    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();
    managementInstance.setAttributes(attributeEntities);
    for (    Attribute attribute : Attacters) {
      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();
      attributeEntities.add(attributeEntity);
      attributeEntity.setStorage(managementInstance);
      attributeEntity.setName(attribute.getName());
      attributeEntity.setValue(attribute.getValue());
    }
  }
  return storageDao.saveAndRefresh(managementInstance);
}
",133,9,"createStorageEntity:getStorageEntry,attributes:Attacters,storageEntity:managementInstance,",746,3.093779612,Beam
613,"public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){
  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {
    return false;
  }
  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);
  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);
  resp.setDateHeader(""Last-Modified"",lastMod);
  resp.setHeader(""ETag"",etag);
  if (checkETagValidators(req,resp,reqMethod,etag)) {
    return true;
  }
  if (checkLastModValidators(req,resp,lastMod)) {
    return true;
  }
  return false;
}
","public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method errType,final HttpServletResponse resp){
  if (Method.POST == errType || Method.OTHER == errType) {
    return false;
  }
  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);
  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);
  resp.setDateHeader(""Last-Modified"",lastMod);
  resp.setHeader(""ETag"",etag);
  if (checkETagValidators(req,resp,errType,etag)) {
    return true;
  }
  if (checkLastModValidators(req,resp,lastMod)) {
    return true;
  }
  return false;
}
",119,7,"reqMethod:errType,",55,0.352052565,Beam
614,,,24,2,,266,1.037219473,0
615,,,134,9,,546,2.495297535,0
616,,,34,3,,417,1.359089887,0
617,,,106,9,,2428,60.20305393,0
618,,,137,10,,322,0.882088141,0
619,,,77,5,,479,2.952791039,0
620,"@SuppressLint(""NewApi"") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}","@SuppressLint(""NewApi"") @Nullable public static Drawable interfates(boolean forceSystemHandlingWhenPossible,@NonNull Resources classes,@DrawableRes int info){
  boolean systemHandning=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(info),systemHandning));
  if (systemHandning) {
    return classes.getDrawable(info,null);
  }
  try {
    return VectorDrawable.create(classes,info);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}",99,5,"resources:classes,inflate:interfates,id:info,systemHandling:systemHandning,",1019,7.795721773,Beam
621,,,60,5,,631,2.894623152,0
622,,,116,7,,1659,11.61243972,0
625,"public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){
  super(selectionModifiers);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
","public PickingGraphMenuPlugin(int electionModifications,int addToSelectedModifiers){
  super(electionModifications);
  this.addToSelectedModifiers=addToSelectedModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
",44,3,"PickingGraphMousePlugin:PickingGraphMenuPlugin,addToSelectionModifiers:addToSelectedModifiers,selectionModifiers:electionModifications,",348,1.449592797,Beam
626,"public void addToDictionary(String s){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(s.trim());
}
","public void addFromdet(String v){
  if (!getAutoComplete())   return;
  if (prefix == null) {
    setUp();
    this.prefix=createDefaultDictionary();
  }
  prefix.addEntry(v.trim());
}
",49,3,"addToDictionary:addFromdet,s:v,dict:prefix,",383,1.908273296,Beam
627,"private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}","private static Key CreatedesK(byte[] classes,int offset){
  byte[] whereBytes=new byte[7];
  System.arraycopy(classes,offset,whereBytes,0,7);
  byte[] resource=new byte[8];
  resource[0]=whereBytes[0];
  resource[1]=(byte)(whereBytes[0] << 7 | (whereBytes[1] & 0xff) >>> 1);
  resource[2]=(byte)(whereBytes[1] << 6 | (whereBytes[2] & 0xff) >>> 2);
  resource[3]=(byte)(whereBytes[2] << 5 | (whereBytes[3] & 0xff) >>> 3);
  resource[4]=(byte)(whereBytes[3] << 4 | (whereBytes[4] & 0xff) >>> 4);
  resource[5]=(byte)(whereBytes[4] << 3 | (whereBytes[5] & 0xff) >>> 5);
  resource[6]=(byte)(whereBytes[5] << 2 | (whereBytes[6] & 0xff) >>> 6);
  resource[7]=(byte)(whereBytes[6] << 1);
  oddParity(resource);
  return new SecretKeySpec(resource,""DES"");
}",273,5,"createDESKey:CreatedesK,bytes:classes,material:resource,keyBytes:whereBytes,",967,5.068266483,Beam
628,,,48,3,,445,1.616400309,0
629,,,60,5,,1531,7.078270912,0
630,"public void drawRenderedImage(RenderedImage img,AffineTransform xform){
  if (img == null) {
    return;
  }
  mPrintMetrics.drawImage(this,img);
  mDrawingArea.addInfinite();
}
","public void drawRaggedMedia(RenderedImage img,AffineTransform xform){
  if (img == null) {
    return;
  }
  mPrintMetrics.drawImage(this,img);
  mDrawingArea.addInfinite();
}
",37,5,"drawRenderedImage:drawRaggedMedia,",45,0.633217378,Beam
631,,,113,8,,1160,12.43654942,0
632,"private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
","private Element createENDPoints(String name,String attrWilling,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrWilling == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrWilling);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
",119,7,"createEndPoint:createENDPoints,attrBinding:attrWilling,",486,1.996114004,Beam
633,"public void addInterface(String interfaceName){
  short interfaceIndex=itsConstantPool.addClass(interfaceName);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}
","public void insertComponent(String InterfaceIndex){
  short interfaceIndex=itsConstantPool.addClass(InterfaceIndex);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}
",31,5,"interfaceName:InterfaceIndex,addInterface:insertComponent,",88,0.284234114,Beam
634,"public void registerSensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}","public void RegisterSensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}",125,9,"registerSensor:RegisterSensor,",6,0.097811083,Beam
635,,,37,1,,63,0.266652914,0
636,"private static ClassNode makeType(ClassNode cn,boolean usingClass){
  if (usingClass) {
    ClassNode clazzType=CLASS_Type.getPlainNodeReference();
    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)});
    return clazzType;
  }
 else {
    return cn;
  }
}
","private static ClassNode parseClass(ClassNode css,boolean usingClass){
  if (usingClass) {
    ClassNode clazzType=CLASS_Type.getPlainNodeReference();
    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(css)});
    return clazzType;
  }
 else {
    return css;
  }
}
",54,4,"makeType:parseClass,cn:css,",259,1.363239471,Beam
637,"public static InputStream streamFromString(String location) throws IOException {
  InputStream is=null;
  URL url=urlFromString(location,null,false);
  if (url != null) {
    is=url.openStream();
  }
 else {
    File f=new File(location);
    if (f.exists())     is=new FileInputStream(f);
  }
  if (is == null) {
    return null;
  }
 else   if (isGZipFile(location)) {
    return new GZIPInputStream(is);
  }
 else {
    return is;
  }
}
","public static InputStream streamAsString(String location) throws IOException {
  InputStream is=null;
  URL url=urlFromString(location,null,false);
  if (url != null) {
    is=url.openStream();
  }
 else {
    File f=new File(location);
    if (f.exists())     is=new FileInputStream(f);
  }
  if (is == null) {
    return null;
  }
 else   if (isGZipFile(location)) {
    return new GZIPInputStream(is);
  }
 else {
    return is;
  }
}
",107,5,"streamFromString:streamAsString,",9,0.044888592,Beam
638,,,37,3,,427,1.761209778,0
639,,,37,3,,333,1.801576992,0
640,,,89,4,,650,3.724509132,0
641,"public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}","public File createNextFile(File containerDir) throws IOException {
  if (containerDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newArea=createFileObject(containerDir,NewFolderStr);
  int i=2;
  while (newArea.exists() && i < 100) {
    newArea=createFileObject(containerDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newArea.exists()) {
    throw new IOException(""Directory already exists:"" + newArea.getAbsolutePath());
  }
 else {
    newArea.mkdirs();
  }
  return newArea;
}",113,6,"createNewFolder:createNextFile,containingDir:containerDir,newFolder:newArea,newFolderString:NewFolderStr,",627,3.420225453,Beam
642,,,31,3,,469,1.867141918,0
643,"public static Byte[] valuesOf(byte[] array){
  Byte[] dest=new Byte[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Byte.valueOf(array[i]);
  }
  return dest;
}","public static Byte[] typesof(byte[] instance){
  Byte[] union=new Byte[instance.length];
  for (int i=0; i < instance.length; i++) {
    union[i]=Byte.valueOf(instance[i]);
  }
  return union;
}",63,4,"valuesOf:typesof,array:instance,dest:union,",423,2.085060537,Beam
644,,,47,5,,525,2.031900601,0
645,,,37,2,,289,1.287094053,0
646,,,233,14,,1214,8.183753876,0
647,"public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
","public ArrayList<ConstraintWidget> findTwidens(WidgetContainer document,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle array=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : document.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (array.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
",154,12,"findWidgets:findTwidens,container:document,area:array,",1754,8.278397,Beam
648,"public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}","public void pull(IResource[] events,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(events);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}",178,12,"commit:pull,resources:events,",154,0.724886417,Beam
649,"public static PlainText plain(short text){
  return plain(Integer.toString(text));
}
","public static PlainText cache(short index){
  return cache(Integer.toString(index));
}
",21,2,"plain:cache,text:index,",83,0.312701507,Beam
650,"public double adjustedPow10(double val){
  boolean negFlag=(val < 0.0);
  if (negFlag) {
    val=-val;
  }
  double res;
  if (val < 1.0) {
    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,val);
  }
  return negFlag ? (-res) : res;
}","public double doublePows90(double eval){
  boolean negFlag=(eval < 0.0);
  if (negFlag) {
    eval=-eval;
  }
  double res;
  if (eval < 1.0) {
    res=(Math.pow(10,eval + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,eval);
  }
  return negFlag ? (-res) : res;
}",83,4,"adjustedPow10:doublePows90,val:eval,",53,0.419046442,Beam
651,"private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}","private TransportNetwork checkCached(String databaseId){
  try {
    String filename=databaseId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,databaseId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}",252,12,"networkId:databaseId,",35,0.187312146,Beam
652,"public MessageCapture(final Logger logger,final boolean captureEntity){
  this(logger,captureEntity,false);
}
","public messageProcess(final Logger plugging,final boolean captureEntity){
  this(plugging,captureEntity,false);
}
",22,3,"MessageCapture:messageProcess,logger:plugging,",205,0.769493596,Beam
653,,,68,5,,1223,4.437807083,0
654,,,48,5,,597,2.389982005,0
655,"private void createMissingValues(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}","private void createmissingMaps(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}",165,7,"createMissingValues:createmissingMaps,",11,0.051837099,Beam
656,"public long inactiveTimeMillis(){
  return System.currentTimeMillis() - lastTimeMillis;
}
","public long inactiveTimeCenti(){
  return System.currentTimeMillis() - lastTimeMillis;
}
",16,2,"inactiveTimeMillis:inactiveTimeCenti,",10,0.052843873,Beam
658,"public static boolean canBeRandomized(Class clazz){
  return ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.equals(String.class) || clazz.equals(IDiscordClient.class);
}
","public static boolean canBENormalizable(Class cllass){
  return ClassUtils.isPrimitiveOrWrapper(cllass) || cllass.equals(String.class) || cllass.equals(IDiscordClient.class);
}
",36,2,"canBeRandomized:canBENormalizable,clazz:cllass,",61,0.441856043,Beam
659,"public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}","public String subsubject(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.subsubject(start);
  }
  return subject.subsubject(start,stop);
}",50,4,"substring:subsubject,",115,0.573994303,Beam
660,"private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}","private void addLimitedITREFit(LineSegment offset0,LineSegment offset1,double density,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * density;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=density - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}",255,22,"distance:density,addLimitedMitreJoin:addLimitedITREFit,",371,3.166627522,Beam
661,,,39,3,,287,1.441810528,0
662,"protected int drawNextEventTimeDiff(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}","protected int getNextEventEventDiff(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}",45,4,"drawNextEventTimeDiff:getNextEventEventDiff,",5,0.02654295,Beam
663,,,17,3,,358,1.188219953,0
664,"protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}","protected boolean iscompetitive(Taxa taxa,List<Taxon> availableTaxes){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxes.contains(taxon)) {
      return false;
    }
  }
  return true;
}",63,5,"isCompatible:iscompetitive,availableTaxa:availableTaxes,",143,0.934981509,Beam
665,,,110,9,,1552,7.66313115,0
666,,,24,3,,265,1.235105781,0
667,"public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void performSaveAs(String schemaPrefixedClassName,String selFilePath,ContainerConfig containerDef){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixedClassName,selFilePath);
    updateFile(containerDef,fileWithDefaultConfiguration.getPath(),schemaPrefixedClassName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",55,6,"schemaPrefixFileName:schemaPrefixedClassName,containerConfig:containerDef,",109,0.513524222,Beam
668,,,60,5,,396,4.532596083,0
669,"@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}
","@Override public SelectableChannel selectableConnection(){
  return socketChannel;
}
",12,2,"selectableChannel:selectableConnection,",3,0.015824743,Beam
670,,,88,6,,1209,6.860446846,0
671,,,170,7,,1053,6.508675444,0
672,,,160,10,,1787,7.447601449,0
674,"private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
","private void closeAndOpen(boolean sign){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (sign) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
",130,8,"save:sign,saveAndClose:closeAndOpen,",77,0.293013795,Beam
675,,,23,3,,342,1.356754462,0
676,"private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
","private void captureSameStr(String oldString,String newString,Map<String,String> map,String projectName){
  Reject.ifNull(projectName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(projectName,newString);
  }
}
",66,5,"captureDifferentString:captureSameStr,appName:projectName,",131,1.02919699,Beam
677,"public void collapseTree(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}","public void collizeRow(){
  for (int i=1; i < source.getRowCount(); ++i) {
    source.collapseRow(i);
  }
}",34,3,"collapseTree:collizeRow,tree:source,",103,0.316502353,Beam
678,,,138,11,,1520,5.566121006,0
679,,,72,4,,425,2.107311416,0
680,"private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
","private Object createInner(SimpleObject path,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(path));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(path);
  if (encounter == null) {
    return path;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
",142,9,"post:path,",42,0.357764502,Beam
681,,,51,4,,598,2.443192756,0
682,"public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}","public OsmElement transferHome(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}",213,10,"pasteFrom:transferHome,",9,0.045721086,Beam
683,,,26,3,,466,1.704034185,0
684,"private static native boolean renderFrame(int[] pixels,long gifFileInPtr,int[] metaData);
","private static native boolean transformMedia(int[] pixels,long gifFileInPtr,int[] metaData);
",20,4,"renderFrame:transformMedia,",58,0.284999824,Beam
685,"protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
","protected HttpURLConnection configureRequest(final HttpURLConnection error){
  if (credentials != null)   error.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  error.setRequestProperty(HEADER_USER_AGENT,userAgent);
  error.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return error;
}
",48,4,"request:error,",23,0.102667352,Beam
686,,,75,5,,1075,6.760572386,0
688,"public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static String enode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",81,5,"encode:enode,",4,0.008082934,Beam
689,"public PutIndexTemplateRequest aliases(XContentBuilder source){
  return aliases(source.bytes());
}
","public PutIndexTemplateRequest allease(XContentBuilder client){
  return allease(client.bytes());
}
",19,2,"aliases:allease,source:client,",173,0.731957146,Beam
690,"public void send(XTraceReport report){
  outgoing.offer(report);
}
","public void process(XTraceReport report){
  outgoing.offer(report);
}
",16,3,"send:process,",43,0.138774069,Beam
691,"public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}
","public default void addedFiles(final ContentProvider contentProvider,final String fileName,final EntryInformation entryManager) throws IOException {
  addedFiles(contentProvider,fileName,entryManager,Optional.empty());
}
",36,4,"addFile:addedFiles,entryInformation:entryManager,",253,1.007650129,Beam
692,"public void shutdown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
","public void killdown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
",50,5,"shutdown:killdown,",4,0.014951213,Beam
693,"private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){
  List<ProgressThread> toRemove=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread pg : queuedThreads) {
      if (!pg.isBlockedByDependencies()) {
        if (!pg.isWaiting()) {
          toRemove.add(pg);
          EXECUTOR.execute(pg.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThread pg : toRemove) {
synchronized (LOCK) {
      queuedThreads.remove(pg);
    }
  }
}
","private static final void checkQueueForDependenciesAndExecuteUnblocking(){
  List<ProgressThread> toKeep=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread pg : queuedThreads) {
      if (!pg.isBlockedByDependencies()) {
        if (!pg.isWaiting()) {
          toKeep.add(pg);
          EXECUTOR.execute(pg.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThread pg : toKeep) {
synchronized (LOCK) {
      queuedThreads.remove(pg);
    }
  }
}
",99,5,"checkQueueForDependenciesAndExecuteUnblockedTasks:checkQueueForDependenciesAndExecuteUnblocking,toRemove:toKeep,",24,0.13729318,Beam
694,,,46,4,,579,1.816577947,0
695,,,30,3,,140,0.5307658,0
696,,,159,9,,1521,10.79931758,0
697,"public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}
","public void registerPhoto(PhotoEntity picture){
  photos.remove(picture);
}
",16,3,"removePhoto:registerPhoto,photo:picture,",46,0.141977974,Beam
698,,,65,4,,652,2.596952955,0
699,"public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}","public static double expp(double f,double da,double shape){
  if (!(f > 0) || f == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(f - da) / da;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * f * f* f)) - shape * v * v / (2. * f) : Double.NEGATIVE_INFINITY;
}",94,5,"x:f,logpdf:expp,mu:da,",555,1.856587251,Beam
701,"public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
","public String getToFile(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
",58,5,"betToString:getToFile,",19,0.06037722,Beam
702,,,27,3,,87,0.294675569,0
703,"public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}","public double[] pcopy(double x_[]){
  return popY(new double[][]{x_})[0];
}",30,2,"popy:pcopy,",23,0.107631075,Beam
704,"private static String normalisePath(String path){
  return path.replace('\\\\','/');
}
","private static String normalizeStr(String id){
  return id.replace('\\\\','/');
}
",20,2,"path:id,normalisePath:normalizeStr,",88,0.594904713,Beam
705,"private String trimUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}","private String TrimURI(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}",47,2,"trimUrl:TrimURI,",10,0.051590387,Beam
706,,,55,5,,173,1.021027005,0
707,"private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}","private static void insertCommentsInTree(Node node,List<Comment> comments2Attribute){
  if (comments2Attribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : comments2Attribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    comments2Attribute.removeAll(commentsInsideChild);
    insertCommentsInTree(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : comments2Attribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(comments2Attribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  comments2Attribute.removeAll(attributedComments);
  for (  Comment c : comments2Attribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}",370,14,"commentsToAttribute:comments2Attribute,insertCommentsInNode:insertCommentsInTree,",383,2.729227078,Beam
708,,,118,6,,1071,6.22801377,0
709,"private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      cache.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}","private void waitForIteratorsCleared(IgniteCache<String,Integer> pool,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      pool.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}",106,7,"cache:pool,",34,0.142530636,Beam
710,,,78,6,,223,0.960433185,0
711,,,82,4,,114,0.546115287,0
712,,,20,3,,375,1.593464311,0
714,,,20,3,,124,0.430954103,0
715,,,30,4,,441,1.556339824,0
716,"public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}
","public boolean registerUser(String alias,String word,String uri) throws DataAccessException {
  if (checkUsernameExists(alias)) {
    return false;
  }
  storeUser(alias,word,uri);
  return true;
}
",41,4,"username:alias,password:word,",333,1.143972504,Beam
717,,,69,8,,230,0.959358291,0
718,,,14,1,,13,0.035177179,0
719,,,101,9,,1309,5.922850589,0
720,"public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}","public String[] ShowVersions() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}",188,9,"showVersion:ShowVersions,",9,0.035770476,Beam
721,"public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}","public void copyFromChanged(Change resourceSwitch){
  if (resourceSwitch.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(resourceSwitch.revision());
  }
  if (resourceSwitch.timestamp() != null) {
    Date date=resourceSwitch.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}",101,4,"sourceChange:resourceSwitch,importFromChange:copyFromChanged,",65,0.376290492,Beam
722,,,28,3,,490,2.553151476,0
723,,,76,4,,221,1.160465491,0
724,,,219,12,,1644,8.085827084,0
725,,,16,3,,489,1.527974582,0
726,"public static void restorePreviousOutAndErrStream(){
  if (!alreadyMuted) {
    return;
  }
  System.setOut(latestOut);
  System.setErr(latestErr);
  alreadyMuted=false;
}
","public static void restorePreviousOutAndErRStream(){
  if (!alreadyMuted) {
    return;
  }
  System.setOut(latestOut);
  System.setErr(latestErr);
  alreadyMuted=false;
}
",35,4,"restorePreviousOutAndErrStream:restorePreviousOutAndErRStream,",3,0.030124263,Beam
727,,,456,11,,2688,13.02693865,0
728,,,24,2,,282,1.678065499,0
729,,,92,6,,746,3.232444032,0
730,"public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmURI + "" ""+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}
","public static void record(String algorithmReference,Class<? extends SignatureAlgorithmSpi> implementerPackage) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmReference + "" ""+ implementerPackage);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmReference);
  if (registeredClass != null) {
    Object exArgs[]={algorithmReference,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmReference,implementerPackage);
}
",124,7,"register:record,algorithmURI:algorithmReference,implementingClass:implementerPackage,",542,2.431344823,Beam
731,,,13,2,,193,0.887958463,0
732,"public void putStyle(String styleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelector);
}
","public void putTheme(String styleId,StyleSelector styleSelectractor){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelectractor);
}
",52,6,"styleSelector:styleSelectractor,putStyle:putTheme,",104,0.450378164,Beam
733,"public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
","public Object run(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
",71,9,"apply:run,",54,0.278971553,Beam
734,,,26,3,,409,1.81286209,0
735,"private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}","private static List<Vector2D> buildSquetragonal(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}",60,4,"buildQuadrilateral:buildSquetragonal,",23,0.093029654,Beam
736,,,27,3,,446,2.492965011,0
737,,,80,7,,1377,6.511892871,0
738,,,51,5,,1303,4.921059004,0
739,,,40,2,,220,0.711775243,0
740,,,394,16,,4300,65.4117062,0
741,,,22,3,,118,0.510913996,0
742,,,161,6,,1416,7.086060059,0
743,,,90,8,,1010,4.695604392,0
744,"public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}","public void invalidateAndUntwrap(ByteBuffer... ufubs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    carrer.lazySet(0);
    Thread.yield();
    for (    ByteBuffer eb : ufubs) {
      cleaner.freeBuffer(resourceDescription,eb);
    }
  }
}",55,7,"invalidateAndUnmap:invalidateAndUntwrap,bufs:ufubs,barrier:carrer,b:eb,",1094,9.495920773,Beam
745,"public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
","public T aggedNumbers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
",34,2,"allowedUsers:aggedNumbers,",12,0.04721218,Beam
747,"private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}","private double variance(double[] feat){
  double result=0;
  for (int i=0; i < feat.length; i++)   result+=feat[i];
  return result / feat.length;
}",46,4,"mean:variance,vec:feat,",62,0.258116504,Beam
748,,,152,10,,4266,28.71865943,0
749,,,20,2,,238,1.275503612,0
750,,,45,4,,657,3.984128551,0
751,"public boolean isStable(){
  return myFeatures.contains(FEATURE_STABLE);
}
","public boolean isSTachable(){
  return myFeatures.contains(FEATURE_STABLE);
}
",15,2,"isStable:isSTachable,",15,0.048668182,Beam
752,"public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}
","public static UiResult closeURL(URI uri){
  return closeURL(uri.toString());
}
",20,2,"openUrl:closeURL,",11,0.040493568,Beam
753,,,46,2,,293,1.424445566,0
754,"public ClassAnnotator(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}
","public Classanannotation(URL[] codebase,Properties proPS){
  if (proPS != null)   properties.putAll(proPS);
  setAnnotationURLs(codebase);
}
",31,4,"ClassAnnotator:Classanannotation,props:proPS,",92,0.339568019,Beam
755,,,117,4,,158,1.197383972,0
756,"public double norm(){
  double sum=0;
  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];
  return Math.sqrt(sum);
}","public double scale(){
  double total=0;
  for (int i=0; i < complements.length; i++)   total+=complements[i] * complements[i];
  return Math.sqrt(total);
}",48,4,"norm:scale,components:complements,sum:total,",720,3.018984044,Beam
758,,,30,3,,558,2.487184854,0
759,,,76,2,,95,0.436279321,0
760,"public void checkBackupInfo(final File backupInfoFile,boolean backupInMultiVdc){
  try (InputStream fis=new FileInputStream(backupInfoFile)){
    Properties properties=new Properties();
    properties.load(fis);
    checkVersion(properties);
    checkHosts(properties,backupInMultiVdc);
  }
 catch (  IOException ex) {
    log.warn(""Unable to check backup Info"",ex);
  }
}
","public void checkBackupsInf(final File backupInfoFile,boolean backupInMultiVdc){
  try (InputStream fis=new FileInputStream(backupInfoFile)){
    Properties properties=new Properties();
    properties.load(fis);
    checkVersion(properties);
    checkHosts(properties,backupInMultiVdc);
  }
 catch (  IOException ex) {
    log.warn(""Unable to check backup Info"",ex);
  }
}
",69,7,"checkBackupInfo:checkBackupsInf,",17,0.059638047,Beam
761,,,89,5,,928,4.324185061,0
762,,,17,1,,25,0.084363413,0
763,"public boolean handleFile(File file){
  if (DEBUG) {
    logger.fine(""searching finds: "" + file.getAbsolutePath());
  }
  filenames.add(file);
  return true;
}
","public boolean handleFiles(File page){
  if (PUT) {
    logger.fine(""searching finds: "" + page.getAbsolutePath());
  }
  filenames.add(page);
  return true;
}
",38,5,"handleFile:handleFiles,file:page,DEBUG:PUT,",283,1.160463452,Beam
764,"public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}
","public boolean isitoReader(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue x=i.next();
    if (x.isitoReader()) {
      return true;
    }
  }
  return false;
}
",54,4,"isToRead:isitoReader,v:x,",99,0.485393751,Beam
765,"public void record(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
","public void register(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
",107,6,"record:register,",14,0.0556228,Beam
766,,,166,7,,1415,7.352419523,0
767,,,34,3,,654,6.219885743,0
768,"public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
","public static String getdatetime(java.util.Date data,String type,String locale,String imeTime){
  SimpleDateFormat dateFormat=getDateFormat(type,locale,imeTime);
synchronized (dateFormat) {
    return dateFormat.type(data);
  }
}
",49,6,"formatDateTime:getdatetime,format:type,date:data,timeZone:imeTime,",1252,5.178631008,Beam
769,"public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}","public void deleteEntry(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}",42,3,"deleteItem:deleteEntry,",5,0.014597754,Beam
770,,,59,5,,928,6.16026624,0
771,,,28,2,,95,0.42676841,0
772,,,95,7,,1330,6.041385567,0
773,,,161,3,,593,4.114359689,0
774,"private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}","private static void order3(int[] x,int off,int lin){
  if (lin < 7) {
    for (int i=off; i < lin + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (lin >> 1);
  if (lin > 7) {
    int l=off;
    int n=off + lin - 1;
    if (lin > 40) {
      int s=lin / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + lin - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + lin;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   order3(x,off,s);
  if ((s=d - c) > 1)   order3(x,n - s,s);
}",437,15,"sort1:order3,len:lin,",124,0.871631734,Beam
775,"protected void engineUpdate(byte b) throws SignatureException {
  messageDigest.update(b);
  needsReset=true;
}
","protected void digestProcess(byte eb) throws SignatureException {
  messageDigest.update(eb);
  needsReset=true;
}
",22,4,"engineUpdate:digestProcess,b:eb,",137,0.469974152,Beam
776,,,127,5,,745,4.068350164,0
777,"public static void registerDecayableObject(Decayable obj){
  decayObjects.add(obj);
}
","public static void registerDecayableObject(Decayable js){
  decayObjects.add(js);
}
",17,3,"obj:js,",26,0.127145533,Beam
778,,,91,4,,896,4.710539305,0
779,"public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}
","public void writeString(final String name,final float volume) throws java.io.IOException {
  writeString(name,Float.toString(volume));
}
",32,3,"value:volume,writeField:writeString,",302,1.089881174,Beam
780,,,38,2,,64,0.269015034,0
781,,,12,2,,142,0.62539862,0
782,,,12,2,,173,0.570818913,0
783,,,20,2,,173,0.763537244,0
784,"public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
","public static LowMemoryWatcher use(@NotNull Runnable bootnative){
  return new LowMemoryWatcher(bootnative);
}
",19,2,"runnable:bootnative,register:use,",61,0.277432048,Beam
785,,,146,14,,2347,7.813442771,0
786,,,77,3,,435,1.647718807,0
787,"public UniformDistribution estimate(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}","public UniformDistribution ESTimated(double in,double right,final int count){
  double grow=(count > 1) ? 0.5 * (right - in) / (count - 1) : 0.;
  return new UniformDistribution(Math.right(in - grow,-Double.MAX_VALUE),Math.in(right + grow,Double.MAX_VALUE));
}",73,5,"max:right,min:in,estimate:ESTimated,",527,2.254411209,Beam
788,"public boolean step(){
  long current=System.currentTimeMillis();
  if (mStart == 0 || (current - mStart < 0)) {
    mProgress=0;
  }
 else   if (current - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(current - mStart) / (double)mDuration;
  }
  return true;
}","public boolean mode(){
  long current=System.currentTimeMillis();
  if (mStart == 0 || (current - mStart < 0)) {
    mProgress=0;
  }
 else   if (current - mStart > mDuration) {
    if (mLoot) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(current - mStart) / (double)mDuration;
  }
  return true;
}",90,6,"step:mode,mLoop:mLoot,",58,0.316511373,Beam
789,"void ReconstructPrivateSubrs(int Font,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){
  for (int i=0; i < fonts[Font].fdprivateLengths.length; i++) {
    if (fdSubrs[i] != null && fonts[Font].PrivateSubrsOffset[i] >= 0) {
      OutputList.addLast(new SubrMarkerItem(fdSubrs[i],fdPrivateBase[i]));
      if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length));
    }
  }
}","void ReconstructPrivateSubrs(int Letter,IndexBaseItem[] fdPrivBase,OffsetItem[] fdSubras){
  for (int i=0; i < fonts[Letter].fdprivateLengths.length; i++) {
    if (fdSubras[i] != null && fonts[Letter].PrivateSubrsOffset[i] >= 0) {
      OutputList.addLast(new SubrMarkerItem(fdSubras[i],fdPrivBase[i]));
      if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length));
    }
  }
}",124,8,"fdSubrs:fdSubras,fdPrivateBase:fdPrivBase,Font:Letter,",583,3.275619944,Beam
791,,,93,4,,484,2.075092947,0
792,,,44,5,,587,2.371245754,0
793,"public static List<String> splitPath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
","public static List<String> splitDir(File info){
  List<String> output=new ArrayList<>();
  File current=info;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
",68,4,"file:info,splitPath:splitDir,",58,0.540775669,Beam
794,,,105,7,,889,5.290075346,0
796,,,93,5,,1053,5.643538833,0
797,,,29,2,,266,1.355593399,0
798,"public void schedule(TimerTask task,long delay){
  if (delay < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(task,System.currentTimeMillis() + delay,0);
}","public void scheate(TimerTask job,long loop){
  if (loop < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(job,System.currentTimeMillis() + loop,0);
}",40,3,"schedule:scheate,delay:loop,task:job,",363,1.496629079,Beam
799,,,73,6,,651,3.32255617,0
800,,,16,3,,323,1.238379614,0
801,"void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
","void saveAction(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
",17,3,"saveAsync:saveAction,",19,0.0771969,Beam
803,,,27,2,,298,1.181089751,0
804,,,39,6,,1517,7.102095052,0
805,"public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
","public static void registerTransportMBoan(String taskKey){
  MBeanServer mBeanServer=getMBeanServer(taskKey);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName name=TransportConstants.createTransportMBeanObjectName(taskKey);
  if (!mBeanServer.isRegistered(name)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,name);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + taskKey + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + taskKey + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + taskKey + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + taskKey + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
",220,10,"containerName:taskKey,registerTransportMBean:registerTransportMBoan,objName:name,",614,4.899589483,Beam
806,"public static void resetCurrentFileList(String logName){
  currentFileList.remove(PREFIX + logName);
}
","public static void resetFileFilesSet(String logDir){
  currentLogSet.remove(PREFIX + logDir);
}
",19,4,"resetCurrentFileList:resetFileFilesSet,logName:logDir,currentFileList:currentLogSet,",296,1.277282111,Beam
807,,,29,5,,954,8.968237484,0
808,"protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
","protected final void verce(@NotNull Set<LocalResourceRepository> visit,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visit.contains(this)) {
    return;
  }
  visit.add(this);
  doMerge(visit,type,seenQualifiers,result);
}
",71,5,"visited:visit,merge:verce,",612,2.91004928,Beam
809,,,52,3,,335,1.242656704,0
810,"protected void writeTransform(AffineTransform t) throws IOException {
  pageStream.matrix(t);
}
","protected void writeTransform(AffineTransform o) throws IOException {
  pageStream.matrix(o);
}
",18,3,"t:o,",20,0.082860998,Beam
811,,,30,3,,152,0.44569391,0
812,,,17,2,,103,0.476145677,0
813,,,237,9,,2463,11.12484761,0
814,"static CopyState readCopyState(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}","static CopyState readCopyRule(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}",147,10,"readCopyState:readCopyRule,",39,0.200761386,Beam
815,"protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}","protected void smartInsertAfterBracket(IDocument position,DocumentCommand element){
  if (element.offset == -1 || position.getLength() == 0) {
    return;
  }
  try {
    int p=(element.offset == position.getLength() ? element.offset - 1 : element.offset);
    int line=position.getLineOfOffset(p);
    int start=position.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(position,start,element.offset);
    if (whiteend == element.offset) {
      int indLine=findMatchingOpenBracket(position,line,element.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(position,indLine));
        replaceText.append(position.get(whiteend,element.offset - whiteend));
        replaceText.append(element.text);
        element.length=element.offset - start;
        element.offset=start;
        element.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}",215,10,"command:element,document:position,",178,1.053209579,Beam
816,,,22,3,,398,1.437946288,0
817,"public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}","public void appendRoll(MMRandom prnd){
  int result=prnd.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}",105,6,"rng:prnd,addRoll:appendRoll,",48,0.237932221,Beam
818,,,47,5,,956,2.625434724,0
819,,,54,4,,672,4.339968566,0
820,"public Block(boolean multiPush){
  this(multiPush,""block"",null,Arrays.asList(""scrape-1"",""scrape-2""));
}","public Init(boolean multiPush){
  this(multiPush,""block"",null,Arrays.asList(""scrape-1"",""scrape-2""));
}",26,2,"Block:Init,",14,0.049877882,Beam
821,,,41,4,,486,1.4806005,0
822,,,18,2,,342,1.672732377,0
823,"public void swap(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
","public void swand(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
",59,5,"swap:swand,",5,0.018641388,Beam
824,"public void removeAddress(AddressEntity address){
  addresses.remove(address);
}
","public void updateAccount(AddressEntity address){
  addresses.remove(address);
}
",16,3,"removeAddress:updateAccount,",37,0.112265722,Beam
825,"private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}
","private boolean advanceApiUpgradeto(TreeSet<AreaPanelInfo> sortedAsiTime,AreaPanelInfo si,int data){
  AreaPanel ap=si.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(data,true);
  if (tt == null || tt.id == si.currTtId)   return false;
  sortedAsiTime.remove(si);
  if (si.setTt(tt,Integer.MAX_VALUE))   sortedAsiTime.add(si);
  return true;
}
",95,7,"api:si,sortedApiTree:sortedAsiTime,time:data,advanceApiUpTo:advanceApiUpgradeto,",859,4.938721669,Beam
826,,,64,5,,186,0.724975785,0
827,,,48,5,,1092,4.403902626,0
828,"public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}","public void w(ByteBuffer message) throws IOException {
  message.position(0);
  if (mFileChannel.size() + message.capacity() < mMaxSize) {
    while (message.hasRemaining()) {
      mFileChannel.w(message);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=message.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.w(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.w(next);
    }
    updateWaveFileSize();
  }
}",186,9,"buffer:message,write:w,",137,0.666279443,Beam
829,,,224,7,,1875,14.47885378,0
830,"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    s.writeObject(attrEnum.nextElement());
  }
}
","private void writeObject(java.io.ObjectOutputStream details) throws java.io.IOException {
  details.defaultWriteObject();
  details.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    details.writeObject(attrEnum.nextElement());
  }
}
",69,4,"s:details,",30,0.18318301,Beam
831,"public IStatus run(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}","public IStatus login(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus imageCode=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection volume=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=volume.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      imageCode=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,volume.getResponseMessage()));
    }
    long contentLength=volume.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (imageCode == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        imageCode=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    imageCode=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    imageCode=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return imageCode;
}",307,14,"run:login,jobStatus:imageCode,connection:volume,",1604,8.201846242,Beam
832,"@Override public void close() throws IOException {
  input.close();
}
","@Override public void error() throws IOException {
  feed.error();
}
",17,2,"close:error,input:feed,",194,0.730189379,Beam
833,,,51,3,,538,3.28731846,0
834,"public boolean next() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}","public boolean load() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}",197,11,"next:load,",11,0.075629306,Beam
835,,,17,3,,355,1.297511669,0
836,,,68,6,,1509,9.458258728,0
837,"<T>List<T> concatValues(final T[]... data){
  final List<T> rv=new ArrayList<>();
  for (  T[] values : data) {
    rv.addAll(Arrays.asList(values));
  }
  return rv;
}
","<T>List<T> concatValues(final T[]... options){
  final List<T> rv=new ArrayList<>();
  for (  T[] values : options) {
    rv.addAll(Arrays.asList(values));
  }
  return rv;
}
",58,4,"data:options,",17,0.072657776,Beam
838,"@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}","@Override public boolean addResult(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}",45,4,"hasNext:addResult,",12,0.047908537,Beam
839,,,555,11,,3154,24.55341241,0
840,,,33,1,,63,0.260853318,0
841,"public Interceptor[] buildMethodInterceptors(Method method){
  Interceptors before=method.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}
","public Interceptor[] buildMethodInterceptionor(Method header){
  Interceptors data=header.getAnnotation(Interceptors.class);
  return data != null ? createInterceptors(data) : NULL_INTERCEPTOR_ARRAY;
}
",35,4,"buildMethodInterceptors:buildMethodInterceptionor,method:header,before:data,",298,1.452244047,Beam
843,,,18,1,,60,0.234147398,0
844,"@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}
","@Deprecated public void append(final String entry,final String value){
  List<String> l=map.get(entry);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(entry,l);
  }
}
",65,5,"name:entry,",12,0.063061647,Beam
845,,,68,7,,1195,5.150661445,0
846,,,67,6,,756,2.724272152,0
847,,,23,5,,841,2.687637186,0
848,,,39,6,,1197,4.175830777,0
849,"private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}","private void pendPhoto(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}",215,10,"paintPreview:pendPhoto,",71,0.33229835,Beam
850,,,102,9,,215,0.987988472,0
852,,,39,3,,396,1.867772941,0
853,"public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=b.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
","public boolean equasesCaps(String audio,int ai,String bin,int Bi,boolean ignoreCase){
  char ca=audio.charAt(ai);
  char cb=bin.charAt(Bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
",70,8,"equalsChars:equasesCaps,bi:Bi,b:bin,a:audio,",1578,39.92223514,Beam
854,"public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}","public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retreatEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retreatEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retreatEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}",193,4,"retainEmpty:retreatEmpty,",41,0.293397009,Beam
855,"private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
","private void clearFeature(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
",34,6,"cacheAttribute:clearFeature,",13,0.021548684,Beam
856,,,111,8,,2528,6.3181355,0
857,"private static BufferedImage makeSquare(BufferedImage input){
  if (input.getHeight() == input.getWidth()) {
    return input;
  }
 else {
    int max=Math.max(input.getHeight(),input.getWidth());
    int dx=(max - input.getWidth()) / 2;
    int dy=(max - input.getHeight()) / 2;
    return createImg(max,max,input.getType(),null);
  }
}","private static BufferedImage makeSquare(BufferedImage format){
  if (format.getHeight() == format.getWidth()) {
    return format;
  }
 else {
    int max=Math.max(format.getHeight(),format.getWidth());
    int dx=(max - format.getWidth()) / 2;
    int dy=(max - format.getHeight()) / 2;
    return createImg(max,max,format.getType(),null);
  }
}",98,3,"input:format,",8,0.050180988,Beam
858,,,197,15,,1039,24.196482519308700,0
859,"public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}","public static byte[] base64decode(String ped){
  if (null == ped)   return null;
  byte[] src=ped.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}",515,16,"coded:ped,",17,0.090141737,Beam
860,"public static String formatDps(final double dps){
  return ""("" + String.format(""%.2f"",dps) + "" dps)"";
}","public static String formatDeps(final double Damps){
  return ""("" + String.format(""%.2f"",Damps) + "" dps)"";
}",25,2,"dps:Damps,formatDps:formatDeps,",81,0.205999839,Beam
861,"public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
","public void requestAfterExenations(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
",97,6,"requestAfterExplanation:requestAfterExenations,",9,0.030093586,Beam
862,"@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}","@Override public int find(byte[] pool,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.find(pool,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.find(pool,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}",151,7,"read:find,buf:pool,",429,1.293215672,Beam
863,,,69,5,,702,1.967897145,0
864,"public void addCondition(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}
","public void insertCond(final Condition record){
  conditions.add(record);
  record.setId(conditionIdCounter++);
}
",25,4,"addCondition:insertCond,condition:record,",59,0.116363446,Beam
865,,,21,2,,223,0.498708141,0
866,"@Override public boolean flingBackward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {
  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());
  if (isVertical)   scrollable.setAsVerticalList();
 else   scrollable.setAsHorizontalList();
  return scrollable.flingBackward();
}
","@Override public boolean fancingForwardward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {
  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());
  if (isVertical)   scrollable.setAsVerticalList();
 else   scrollable.setAsHorizontalList();
  return scrollable.fancingForwardward();
}
",53,4,"flingBackward:fancingForwardward,",84,0.284245038,Beam
867,"public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}
","public int compCompareAll(NamedMediaType response){
  return __Name.compCompareAll(response.__Name);
}
",19,3,"other:response,compareTo:compCompareAll,_name:__Name,",238,0.759684332,Beam
868,,,21,2,,252,0.587765797,0
869,,,88,6,,320,0.848187892,0
870,"private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}","private void enssureFileClose(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File aveLine=new File(ctx.getFilesDir(),SEUREFILE);
  try {
    FileOutputStream filesUse=null;
    DataOutputStream up=null;
    if (aveLine.exists()) {
      filesUse=ctx.openFileOutput(SEUREFILE,Context.MODE_APPEND);
      up=new DataOutputStream(new BufferedOutputStream(filesUse));
    }
 else {
      filesUse=ctx.openFileOutput(SEUREFILE,Context.MODE_PRIVATE);
      up=new DataOutputStream(new BufferedOutputStream(filesUse));
      up.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=up;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}",154,10,"ensureFileOpen:enssureFileClose,saveFile:aveLine,fileOutput:filesUse,out:up,SAVEFILE:SEUREFILE,",2735,20.800578,Beam
871,,,178,9,,304,0.856249511,0
872,"public void startPlayback(){
  Log.d(TAG,"">> startPlayback"");
  if (null == mRecordFile) {
    Log.e(TAG,""no file to playback!"");
    return;
  }
  mPlayer=new MediaPlayer();
  try {
    mPlayer.setDataSource(mRecordFile.getAbsolutePath());
    Log.d(TAG,""MediaPlayer.setDataSource("" + mRecordFile.getAbsolutePath() + "")"");
    mPlayer.setOnCompletionListener(this);
    mPlayer.setOnErrorListener(this);
    mPlayer.prepare();
    Log.d(TAG,""MediaPlayer.prepare()"");
    mPlayer.start();
  }
 catch (  IOException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  SecurityException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
  setState(STATE_PLAYBACK);
  Log.d(TAG,""<< startPlayback"");
}
","public void startBroadback(){
  Log.d(TAG,"">> startPlayback"");
  if (null == mRecordFile) {
    Log.e(TAG,""no file to playback!"");
    return;
  }
  mPlayer=new MediaPlayer();
  try {
    mPlayer.setDataSource(mRecordFile.getAbsolutePath());
    Log.d(TAG,""MediaPlayer.setDataSource("" + mRecordFile.getAbsolutePath() + "")"");
    mPlayer.setOnCompletionListener(this);
    mPlayer.setOnErrorListener(this);
    mPlayer.prepare();
    Log.d(TAG,""MediaPlayer.prepare()"");
    mPlayer.start();
  }
 catch (  IOException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  SecurityException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
  setState(STATE_PLAYBACK);
  Log.d(TAG,""<< startPlayback"");
}
",222,4,"startPlayback:startBroadback,",6,0.020121861,Beam
873,"public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}
","public boolean processPackage(PdxWriter writer,Object b){
  if (isRelevant(b.getClass())) {
    processPackage(writer,b,getClassInfo(b.getClass()));
    return true;
  }
  return false;
}
",47,3,"obj:b,writeData:processPackage,",259,0.587208887,Beam
874,,,149,5,,483,1.805313245,0
875,,,99,6,,1245,3.152080425,0
876,"private void loadTranslationsCacheIfEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
","private void loadTranslationsCacheIfZero(){
  if (TranslationTable.isEmpty()) {
    for (    ObjectTranslation version : translations) {
      if (version.getLocale() != null && version.getProperty() != null && !StringUtils.isEmpty(version.getValue())) {
        String key=ObjectTranslation.getCacheKey(version.getLocale(),version.getProperty());
        TranslationTable.put(key,version.getValue());
      }
    }
  }
}
",91,5,"loadTranslationsCacheIfEmpty:loadTranslationsCacheIfZero,translationCache:TranslationTable,translation:version,",546,1.50031805,Beam
877,,,31,2,,280,0.645458059,0
878,"public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""""))   return;
  readConfig(new FileReader(filename));
}
","public void loadConfig(String download) throws FileNotFoundException {
  if (download == null || download.equals(""""))   return;
  loadConfig(new FileReader(download));
}
",35,2,"filename:download,readConfig:loadConfig,",49,0.088857154,Beam
879,"public void sort(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.sort(values,0,size);
    sorted=true;
  }
}","public void iter(){
  throwIfImmutable();
  if (!Sored) {
    Arrays.iter(values,0,size);
    Sored=true;
  }
}",33,4,"sort:iter,sorted:Sored,",335,1.042725456,Beam
880,,,103,4,,638,3.539874609,0
881,"public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
","public void prepentFile(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File currentCode=calcParentTree();
  if (null != currentCode) {
    treeFile=currentCode;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
",62,4,"ascendTree:prepentFile,parentTree:currentCode,",92,0.224338214,Beam
882,,,46,4,,444,0.874301314,0
884,"private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){
  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gb == 0.0) {
    beforeRootT=tb;
    beforeRootG=gb;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gb >= ga);
    return true;
  }
}","private boolean createroot(final ODEStateInterpolator interpator,final double ta,final double ga,final double tb,final double gb){
  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gb == 0.0) {
    beforeRootT=tb;
    beforeRootG=gb;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gb >= ga);
    return true;
  }
}",545,20,"findRoot:createroot,interpolator:interpator,",316,1.790628246,Beam
885,"@Override public boolean isArmed(){
  return other.isArmed();
}
","@Override public boolean allowArMed(){
  return other.allowArMed();
}
",16,2,"isArmed:allowArMed,",29,0.080938709,Beam
886,"public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
","public static void assumesCase(BooleanSupplier assumeAppler,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumeAppler.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
",38,3,"assumptionSupplier:assumeAppler,assumeTrue:assumesCase,",154,0.4266475,Beam
887,"private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + ip);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + ip,nfe);
  }
  return parts.length;
}","private static int ip2Byte(String http,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=http.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + http);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + http);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + http,nfe);
  }
  return parts.length;
}",157,8,"ipToBytes:ip2Byte,ip:http,",175,0.635769784,Beam
888,"protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}","protected int skip(SpeechRecord recorder,byte[] batch){
  int len=batch.length;
  int numOfBytes=recorder.skip(batch,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(batch,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}",75,8,"buffer:batch,read:skip,",250,0.651025275,Beam
889,"protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
","protected void primate(){
  for (  ProcessInfoParameter catan : getParameter()) {
    String name=catan.getParameterName();
    if (catan.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=catan.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
",76,6,"prepare:primate,para:catan,",44,0.087269672,Beam
890,"public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}
","public int head(long FILELeft,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(FILELeft);
  return _file.head(buffer,offset,length);
}
",41,6,"read:head,fileOffset:FILELeft,",227,0.563333877,Beam
892,,,177,9,,2463,38.97095482,0
893,,,27,4,,848,2.364381766,0
894,,,58,3,,457,0.95865049,0
895,,,36,3,,452,1.125319477,0
896,"public StartListener(Object resource){
  _resource=resource;
}
","public ListEvent(Object media){
  _resource=media;
}
",12,3,"StartListener:ListEvent,resource:media,",66,0.112267005,Beam
897,"private void loadSubmissions(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}","private void loadSecscription(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}",99,6,"loadSubmissions:loadSecscription,",19,0.033847189,Beam
899,,,80,5,,1032,2.036359549,0
900,"@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){
  checkSasHandleGood(sasCore);
  grainSamples=grain;
  return 0;
}","@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int casCore,int grain){
  checkSasHandleGood(casCore);
  grainSamples=grain;
  return 0;
}",39,4,"sasCore:casCore,",19,0.045471009,Beam
901,,,51,5,,1010,2.27163384,0
902,,,141,8,,1802,7.368404619,0
903,"void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
","void generateWhile(Tree.WhileStatement future){
  Tree.WhileClause whileClause=future.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
",61,5,"that:future,",24,0.053576585,Beam
904,,,144,5,,763,2.267650898,0
905,"public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}","public static double toDingencies(double e){
  if (Double.isInfinite(e) || e == 0.0) {
    return e;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(e);
  double xb=e - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}",72,6,"x:e,toDegrees:toDingencies,",111,0.299236186,Beam
906,,,16,2,,33,0.060388303,0
907,"public void assignThreadForSubscriber(@NonNull Object subscriber){
  Looper looper=Looper.myLooper();
  if (looper != null) {
    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscriber),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler);
  }
 else {
    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscriber));
  }
}
","public void assignThreadForSubscriber(@NonNull Object subscaper){
  Looper looper=Looper.myLooper();
  if (looper != null) {
    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscaper),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler);
  }
 else {
    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscaper));
  }
}
",73,5,"subscriber:subscaper,",44,0.198245807,Beam
908,,,260,16,,2380,9.178096239,0
909,,,15,2,,136,0.297786335,0
910,"protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}
","protected String scanWith(final String alias,String start){
  return scanWith(alias,null,start);
}
",23,3,"searchFor:scanWith,target:alias,",303,0.890195704,Beam
911,,,37,4,,531,1.309457807,0
912,"private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}","private long converToGb(int omegaSec){
  long versions=omegaSec;
  versions=versions * 1024 * 1024;
  return versions;
}",25,3,"megaBytes:omegaSec,convertToBytes:converToGb,bytes:versions,",230,0.434655249,Beam
913,"public void test_getPutByteArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}","public void next(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}",211,9,"test_getPutByteArray:next,",21,0.057878153,Beam
914,,,99,5,,1242,2.483791792,0
915,"public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
","public void config(String fileznFolder) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(fileznFolder,directoryFlag.get());
  client=new EtcdClient(urIs.toArray(new URI[urIs.size()]));
  client.setRetryHandler(retryingRule);
  initialSetAllFlagz();
}
",62,6,"flagzDirectory:fileznFolder,init:config,retryPolicy:retryingRule,uris:urIs,",908,8.595639428,Beam
916,"public void close() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}","public void init() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.init();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}",68,3,"close:init,",24,0.056741742,Beam
917,"public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}","public static String moralpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha moralpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(moralpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}",134,7,"morpha:moralpha,",6,0.023105228,Beam
918,,,151,7,,1040,4.318975071,0
919,,,78,2,,306,0.727192183,0
920,,,26,3,,499,1.152318645,0
921,"@Override public Iterator<Profile> iterator(){
  return profiles.iterator();
}
","@Override public Iterator<Profile> loop(){
  return profiles.loop();
}
",19,2,"iterator:loop,",22,0.044992884,Beam
922,"String parse(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
","String pack(String cellStr,int layoutCurstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutCurstant];
}
",24,3,"parse:pack,layoutConstant:layoutCurstant,",126,0.479333989,Beam
923,,,88,7,,721,2.20477763,0
924,"public void remove(String btxn){
synchronized (filterMap) {
    FilterProcessor oldfp=filterMap.get(btxn);
    if (oldfp != null) {
      globalExclusionFilters.remove(oldfp);
      btxnFilters.remove(oldfp);
    }
  }
}
","public void shift(String btestc){
synchronized (filterMap) {
    FilterProcessor newfp=filterMap.get(btestc);
    if (newfp != null) {
      globalExclusionFilters.shift(newfp);
      btxnFilters.shift(newfp);
    }
  }
}
",47,6,"remove:shift,btxn:btestc,oldfp:newfp,",271,1.00081195,Beam
925,"protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}","protected int _Offset(int vtable64offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable64offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable64offset) : 0;
}",42,5,"__offset:_Offset,vtable_offset:vtable64offset,",91,0.388117965,Beam
926,,,217,10,,1451,4.439690502,0
927,"public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}","public IElementType capturingComment(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}",194,1,"captureString:capturingComment,",11,0.037172639,Beam
928,"private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
","private List<NameValuePair> buildIPTParameters(Ipt ipt,String organizationName){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organizationName != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organizationName)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
",210,6,"organisationKey:organizationName,",9,0.043082154,Beam
929,,,200,15,,1220,3.389788274,0
930,"public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
","public static void copy(SSOToken token,OrganizationConfigManager request,OrganizationConfigManager local) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + request.getOrganizationName() + "" Child org: ""+ local.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,request.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,local.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(local.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
",450,19,"copyRealmPrivilegesFromParent:copy,child:local,parent:request,",596,2.580685389,Beam
931,,,114,8,,1481,6.589693689,0
932,,,54,3,,672,1.702314933,0
933,,,41,5,,1389,4.478592277,0
934,,,35,2,,170,0.423895204,0
935,,,14,1,,63,0.159693611,0
936,"public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}","public void modifier(SSOToken token,String objName,ModificationItem[] modules) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (modules == null)|| (modules.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < modules.length; i++) {
      modifyValues(objName,modules[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}",377,15,"modify:modifier,mods:modules,",208,1.080650802,Beam
937,"public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
","public static NativePage createNativePageWithSSL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageWithSSL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
",42,6,"createNativePageForURL:createNativePageWithSSL,",106,0.251870914,Beam
938,"public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}","public void transform(PlaEllipse[] p_ellipse__gr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse__gr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse__gr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}",260,16,"fill_ellipse_arr:transform,p_ellipse_arr:p_ellipse__gr,",146,0.59774971,Beam
939,"public final <T>void removeInternal(List<T> list,int position){
  if (hasHeaderView() && position == 0)   return;
  if (enableLoadMore() && position == getItemCount() - 1)   return;
  if (list.size() > 0) {
synchronized (mLock) {
      list.remove(hasHeaderView() ? position - 1 : position);
    }
    removeNotifyExternal(position);
    notifyItemRemoved(position);
  }
}","public final <T>void removeInternal(List<T> test,int move){
  if (hasHeaderView() && move == 0)   return;
  if (enableLoadMore() && move == getItemCount() - 1)   return;
  if (test.size() > 0) {
synchronized (mLock) {
      test.remove(hasHeaderView() ? move - 1 : move);
    }
    removeNotifyExternal(move);
    notifyItemRemoved(move);
  }
}",90,4,"position:move,list:test,",260,0.571394404,Beam
940,"public void addListener(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}
","public void removeAdapter(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}
",22,3,"addListener:removeAdapter,",37,0.127864067,Beam
941,,,74,6,,1073,3.3909126,0
942,"public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
","public boolean indicateDirtyRead(ITemplateHolder style){
  return ((style.isReadOperation() && _useDirtyWrite) || style.isDirtyReadRequested());
}
",28,3,"template:style,_useDirtyRead:_useDirtyWrite,",220,0.629260536,Beam
943,"public boolean checkModifiers(MouseEvent e){
  return e.getModifiers() == modifiers;
}
","public boolean testMODifier(MouseEvent p){
  return p.getModifiers() == moders;
}
",18,3,"checkModifiers:testMODifier,e:p,modifiers:moders,",251,0.578747586,Beam
945,,,77,4,,580,1.770892843,0
946,"private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
","private void updateZonalSet(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
",84,8,"updateZoningMap:updateZonalSet,",22,0.060228721,Beam
947,,,27,3,,140,0.359968686,0
949,,,39,2,,149,0.321568418,0
950,,,53,5,,991,3.081774954,0
951,,,71,4,,820,1.614683402,0
952,"public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}","public double Percentage(ConstantRange frame){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant Pct : sorted) {
    if (frame.contains(Pct))     contained.add(Pct);
 else     if (contained.isEmpty())     prev=Pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}",119,8,"percentage:Percentage,range:frame,pct:Pct,",473,1.045861733,Beam
953,,,47,4,,85,0.160227056,0
954,"public void despawn(VisibleObject object){
  despawn(object,true);
}
","public void DesParent(VisibleObject object){
  DesParent(object,true);
}
",16,2,"despawn:DesParent,",11,0.032939339,Beam
955,,,85,3,,462,1.505705635,0
956,"static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
","static public void addAll(List<String> table,String[] area){
  for (  String item : area)   table.add(item);
}
",32,4,"array:area,list:table,",224,0.5935763,Beam
957,,,47,4,,714,1.840428873,0
958,,,182,3,,127,0.314811945,0
960,,,35,4,,926,5.601177756,0
961,"public void add(String name,long cnt){
  if (_values == null) {
    _values=new ArrayList<>(30);
  }
  _values.add(new Count(this,name,cnt));
}","public void set(String name,long cnt){
  if (_values == null) {
    _values=new ArrayList<>(30);
  }
  _values.set(new Count(this,name,cnt));
}",45,4,"add:set,",3,0.013034411,Beam
962,"private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}","private Map<UUID,int[]> map(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mmakers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mmakers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> map=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      map.put(node.nodeId,arr);
    }
  }
  return map;
}",444,13,"reducers:map,mappers:mmakers,",380,1.758522534,Beam
963,"@SuppressWarnings(""unchecked"") private void expungeStaleEntries(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}","@SuppressWarnings(""unchecked"") private void expungeStaggedStrations(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=loop.indexOf(le);
      if (i != -1) {
        loop.remove(i);
      }
    }
  }
}",75,7,"expungeStaleEntries:expungeStaggedStrations,list:loop,",67,0.180221653,Beam
964,,,83,7,,2297,6.503024908,0
965,"public static String formatLong(long number){
  return intFormat.format(number);
}
","public static String FormatBig(long zero){
  return intFormat.format(zero);
}
",18,3,"formatLong:FormatBig,number:zero,",53,0.103150626,Beam
966,,,61,6,,1284,2.515511676,0
967,,,76,5,,681,2.34511526,0
968,,,58,10,,3318,7.01405822,0
969,,,65,5,,232,0.542337306,0
970,,,26,1,,63,0.151553039,0
971,,,30,3,,347,0.738569995,0
972,"public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}","public synchronized void trackHexImages(IHex hex,MediaTracker TRacker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  TRacker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      TRacker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      TRacker.addImage(i.next(),1);
    }
  }
}",146,10,"tracker:TRacker,",33,0.08757563,Beam
973,"private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}","private static String formatsampleSize(int frequency){
  return MHZ_FORMATTER.format((double)frequency / 1E6d);
}",23,2,"formatSampleRate:formatsampleSize,rate:frequency,",82,0.193820016,Beam
974,,,58,5,,395,1.009713515,0
975,,,83,5,,782,3.94516561,0
976,,,17,2,,156,0.491063495,0
977,"public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}","public void writeNoScale(Image cp,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (cp.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= trMax) {
    page.drawImage(cp,x,y,cp.getWidth(null),cp.getHeight(null),null);
  }
}",94,15,"c:cp,prFirst:trMax,",451,1.534365789,Beam
978,"public boolean isLessThen(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) < 0);
}","public boolean isLessthan(Default Default){
  assertDefined();
  BigDecimal paramsValue=notNull(this);
  BigDecimal parameter=notNull(Default);
  return (paramsValue.compareTo(parameter) < 0);
}",41,4,"Percent:Default,isLessThen:isLessthan,thisValue:paramsValue,",259,0.751847112,Beam
979,"public void close() throws IOException {
  rrdFile.close();
}
","public void end() throws IOException {
  rrdFile.end();
}
",15,2,"close:end,",8,0.029459314,Beam
980,,,84,4,,396,1.316345,0
981,"private void checkShutdown(){
synchronized (mux) {
    if (isBeingShutdown)     throw new RejectedExecutionException(""Failed to execute command during executor shutdown."");
  }
}
","private void checkExecdown(){
synchronized (mux) {
    if (isBeingDisdown)     throw new RejectedExecutionException(""Failed to execute command during executor shutdown."");
  }
}
",24,3,"checkShutdown:checkExecdown,isBeingShutdown:isBeingDisdown,",39,0.100968111,Beam
982,,,17,3,,361,0.805672622,0
984,,,63,6,,1246,2.836667899,0
985,"public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void externalEntityDef(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDef(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",79,9,"externalEntityDecl:externalEntityDef,",3,0.013053731,Beam
986,,,58,4,,972,6.227292319,0
987,,,64,4,,638,1.804463704,0
988,"private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        resolveFiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}","private void reolvingParents(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        reolvingParents(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}",141,9,"resolveFiles:reolvingParents,",80,0.322433043,Beam
989,,,30,2,,113,0.266089757,0
991,,,31,2,,206,0.514133775,0
992,,,213,12,,3846,28.91694393,0
993,,,54,5,,167,0.532908106,0
994,"@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
","@Override public long enableWindow(long scrollID) throws IOException {
  long size=keyStream.dataSizeUpToWindow(scrollID) + valueStream.dataSizeUpToWindow(scrollID);
  windowsForFreeMemory.add(scrollID);
  return size;
}
",40,6,"freeMemory:enableWindow,windowId:scrollID,",68,0.220237474,Beam
995,"private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}","private static int decodeIntets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}",98,5,"decodeOctets:decodeIntets,",37,0.100719202,Beam
996,,,29,3,,402,1.129616861,0
997,,,11,3,,343,1.826070881,0
998,,,68,5,,497,1.290777858,0
999,"public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}","public void calculuteMin(double sub){
  if (this.sub == -1) {
    this.sub=sub;
  }
 else {
    this.sub=Math.sub(this.sub,sub);
  }
}",44,2,"min:sub,calculateMin:calculuteMin,",71,0.168251761,Beam
1000,,,28,4,,430,1.08530252,0
1001,"private List<double[]> initializeWeightsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    weights.add(weight);
  }
  while (weights.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    weights.add(weight);
    candidates.remove(weight);
  }
  return weights;
}","private List<double[]> initializeWewardsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> tests=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    tests.add(weight);
  }
  while (tests.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < tests.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),tests.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    tests.add(weight);
    candidates.remove(weight);
  }
  return tests;
}",335,12,"initializeWeightsND:initializeWewardsND,weights:tests,",75,0.391773081,Beam
1002,"public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
","public static Object desynchronization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
",106,5,"deserialization:desynchronization,",32,0.074499889,Beam
1003,"public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
","public boolean endsWithout(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWithout(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
",43,3,"endsWith:endsWithout,",3,0.015032403,Beam
1004,"public void testOtherToStringDefault(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
","public void assertOtherToNumberDouble(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
",36,2,"testOtherToStringDefault:assertOtherToNumberDouble,",17,0.04009978,Beam
1005,,,178,8,,2167,7.475396725,0
1007,"private InputStream findTemplate(String path,String template){
  try {
    File file=new File(path,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
","private InputStream readModule(String path,String html){
  try {
    File file=new File(path,html);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
",67,4,"findTemplate:readModule,template:html,",132,0.422523908,Beam
1008,"public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  recipients=new HashSet(recipients);
  DistributedMember me=originDm.getDistributionManagerId();
  if (recipients.contains(me)) {
    recipients.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",recipients);
  }
  rp=new ReplyProcessor21(originDm,recipients);
  processorId=rp.getProcessorId();
  setRecipients(recipients);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}","public void sent(Set Recapresses,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  Recapresses=new HashSet(Recapresses);
  DistributedMember me=originDm.getDistributionManagerId();
  if (Recapresses.contains(me)) {
    Recapresses.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",Recapresses);
  }
  rp=new ReplyProcessor21(originDm,Recapresses);
  processorId=rp.getProcessorId();
  setRecipients(Recapresses);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}",197,12,"recipients:Recapresses,send:sent,",289,2.369167586,Beam
1009,"private void cmd_import(){
  JFileChooser jc=new JFileChooser();
  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  jc.setDialogType(JFileChooser.OPEN_DIALOG);
  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}","private void cmd_export(){
  JFileChooser xc=new JFileChooser();
  xc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  xc.setDialogType(JFileChooser.OPEN_DIALOG);
  xc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (xc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(xc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}",175,8,"cmd_import:cmd_export,jc:xc,",7,0.036695357,Beam
1010,"@RequestMapping(value=""/SAML2/IDPSSO/{tenant:.*}"") public void ssoBindingError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""IDP SSO binding error! The client locale is "" + locale.toString() + "", tenant is ""+ tenant);
  ssoDefaultTenantError(locale,response);
}","@RequestMapping(value=""/SAML2/IDPSSO/{tenant:.*}"") public void ssoFindingInfo(Locale locale,@PathVariable(value=""tenant"") String tenants,HttpServletResponse feed) throws IOException {
  logger.info(""IDP SSO binding error! The client locale is "" + locale.toString() + "", tenant is ""+ tenants);
  ssoDefaultTenantError(locale,feed);
}",55,5,"ssoBindingError:ssoFindingInfo,response:feed,tenant:tenants,",619,1.346302923,Beam
1011,,,98,7,,1560,3.374031989,0
1012,"public static double[] lsf2lpc(double[] lsf){
  MathUtils.quickSort(lsf);
  int P=lsf.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsf[0]);
  }
  for (i=1; i < P; i++) {
    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ lsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}","public static double[] lsf_lp(double[] rsf){
  MathUtils.quickSort(rsf);
  int M=rsf.length;
  int half_order=M / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[M / 2 + 1];
  double[] a1=new double[M / 2 + 1];
  double[] a2=new double[M / 2 + 1];
  double[] b=new double[M / 2 + 1];
  double[] b1=new double[M / 2 + 1];
  double[] b2=new double[M / 2 + 1];
  double[] p=new double[M / 2];
  double[] q=new double[M / 2];
  double[] oneMinusA=new double[M + 1];
  oneMinusA[0]=1.;
  if ((rsf[0] <= 0.0) || (rsf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + rsf[0]);
  }
  for (i=1; i < M; i++) {
    if (rsf[i] <= rsf[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((rsf[i] <= 0.0) || (rsf[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ rsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * rsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * rsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= M; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}",545,17,"lsf2lpc:lsf_lp,lsf:rsf,P:M,",3945,62.16838045,Beam
1013,,,17,3,,448,0.994701024,0
1014,"protected void parseCommand(final String... args){
  for (  String arg : args) {
    final Command command=Command.valueOfName(arg);
    if (command != null) {
      setCommand(command);
      break;
    }
  }
}
","protected void seCmd(final String... args){
  for (  String arg : args) {
    final Command pattern=Command.valueOfName(arg);
    if (pattern != null) {
      setCommand(pattern);
      break;
    }
  }
}
",46,4,"parseCommand:seCmd,command:pattern,",18,0.049468096,Beam
1015,"private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){
  if (slice != null) {
    Collection<Replica> allReplicasForShard=slice.getReplicas();
    if (allReplicasForShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""No replicas found  in shard/collection: "" + shard + ""/""+ collectionName);
    }
    if (allReplicasForShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There is only one replica available in shard/collection: "" + shard + ""/""+ collectionName+ "". Cannot delete that."");
    }
    if (allReplicasForShard.size() <= count) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There are lesser num replicas requested to be deleted than are available in shard/collection : "" + shard + ""/""+ collectionName+ "" Requested: ""+ count+ "" Available: ""+ allReplicasForShard.size()+ ""."");
    }
  }
}","private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int depth){
  if (slice != null) {
    Collection<Replica> allReplicasForShard=slice.getReplicas();
    if (allReplicasForShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""No replicas found  in shard/collection: "" + shard + ""/""+ collectionName);
    }
    if (allReplicasForShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There is only one replica available in shard/collection: "" + shard + ""/""+ collectionName+ "". Cannot delete that."");
    }
    if (allReplicasForShard.size() <= depth) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There are lesser num replicas requested to be deleted than are available in shard/collection : "" + shard + ""/""+ collectionName+ "" Requested: ""+ depth+ "" Available: ""+ allReplicasForShard.size()+ ""."");
    }
  }
}",143,6,"count:depth,",65,0.262039288,Beam
1016,"public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}","public void void_getPutByteBuffer(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}",211,9,"test_getPutByteArray:void_getPutByteBuffer,",8,0.029115566,Beam
1017,,,50,4,,283,0.628468541,0
1018,"public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}","public static String replace(String e,int x,char fillChar){
  if (e.length() >= x) {
    return e;
  }
  StringBuffer sb=new StringBuffer(x);
  for (int i=x - e.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(e);
  return sb.toString();
}",82,6,"right:replace,width:x,s:e,",533,1.476301201,Beam
1019,,,90,6,,960,1.917914589,0
1020,,,67,6,,218,0.50889916,0
1022,"private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}","private synchronized boolean startStatsBroner(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}",98,8,"pollStatsBroker:startStatsBroner,",18,0.03861984,Beam
1023,,,184,8,,1807,6.063379824,0
1024,,,79,8,,1868,5.367767469,0
1025,"public EventBean[] toArray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}","public EventBean[] toA(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionEvent == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] ports=new EventBean[1 + additionEvent.size()];
  ports[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionEvent) {
    ports[count]=theEvent;
    count++;
  }
  return ports;
}",92,6,"toArray:toA,additionalEvents:additionEvent,events:ports,",343,0.947333419,Beam
1026,,,184,5,,992,8.855044274,0
1027,"public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}","public void renameToolLabel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}",87,7,"renameEditorPanel:renameToolLabel,",7,0.017113245,Beam
1028,"public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){
  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());
}
","public static float generateRandomIntRange(float upperPath,float upperLimit){
  return upperPath + ((upperLimit - upperPath) * _r.nextFloat());
}
",30,4,"generateRandomFloatBetween:generateRandomIntRange,lowerLimit:upperPath,",239,0.775738247,Beam
1029,,,77,5,,112,0.375186972,0
1030,,,38,5,,492,1.723978678,0
1031,,,19,3,,495,2.079747725,0
1032,,,25,3,,335,1.209644961,0
1033,"private float checkSaturationValid(final float val){
  float tempval=val;
  if (val > 1) {
    tempval=1;
  }
  if (val < 0) {
    tempval=0;
  }
  return tempval;
}","private float checksaturatedInvalid(final float ant){
  float fakeint=ant;
  if (ant > 1) {
    fakeint=1;
  }
  if (ant < 0) {
    fakeint=0;
  }
  return fakeint;
}",42,3,"checkSaturationValid:checksaturatedInvalid,val:ant,tempval:fakeint,",355,1.512381951,Beam
1034,,,83,7,,1657,4.046361132,0
1035,,,265,14,,3201,9.829641334,0
1036,,,95,3,,406,1.156734645,0
1037,"public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}","public Matrix4 multiplyByScale(double xScale,double yScale,double cScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=cScale;
  m[6]*=cScale;
  m[10]*=cScale;
  m[14]*=cScale;
  return this;
}",111,5,"zScale:cScale,",72,0.178295875,Beam
1038,"public void omitLessFreq(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches(""^[A-Za-z]$"")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches("".*[A-Za-z].*"")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}","public void omitlessFreq(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches(""^[A-Za-z]$"")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches("".*[A-Za-z].*"")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}",231,13,"omitLessFreq:omitlessFreq,",4,0.023958921,Beam
1039,,,48,3,,285,0.799137604,0
1040,"private void loadDataFromService(){
  List<ExceptionSensorData> exData=null;
  if ((null != fromDate) && (null != toDate)) {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != exData) {
    exceptionSensorData.addAll(exData);
  }
}
","private void loadResultsToFactory(){
  List<ExceptionSensorData> clCode=null;
  if ((null != fromDate) && (null != toDate)) {
    clCode=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    clCode=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != clCode) {
    exceptionSensorData.addAll(clCode);
  }
}
",85,9,"loadDataFromService:loadResultsToFactory,exData:clCode,",106,0.452590656,Beam
1041,"protected Instance specifier(int i){
  return m_Specifiers.get(i);
}
","protected Instance Specifiers(int i){
  return m_Specifiers.get(i);
}
",17,3,"specifier:Specifiers,",13,0.026148641,Beam
1042,,,22,2,,250,0.784464379,0
1043,"public void updateAmount(){
  setAmt(getTotalAmount());
}
","public void setTotal(){
  setAmt(getTotalAmount());
}
",14,1,"updateAmount:setTotal,",5,0.009336658,Beam
1044,,,233,8,,1387,5.014192327,0
1045,,,24,3,,342,0.91056476,0
1046,,,17,2,,145,0.460212159,0
1047,,,244,11,,3161,13.45262551,0
1048,"public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
","public void processSocket(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      processSocket(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
",94,5,"runScript:processSocket,",42,0.111336005,Beam
1049,"public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}","public static byte[] join(final List<byte[]> dataCharts){
  int totalSize=0;
  for (  final byte[] imagePART : dataCharts) {
    totalSize+=imagePART.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] imagePART : dataCharts) {
    System.arraycopy(imagePART,0,data,index,imagePART.length);
    index+=imagePART.length;
  }
  return data;
}",96,6,"combine:join,dataChunks:dataCharts,dataPart:imagePART,",341,0.863892396,Beam
1050,,,434,12,,395,1.236966606,0
1051,"public void addColumn(String name,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    addColumn(name,ex);
  }
}
","public void setCondition(String name,String op){
  Expression ex=ExpressionParser.parse(op);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    setCondition(name,ex);
  }
}
",56,5,"addColumn:setCondition,expr:op,",871,1.679433882,Beam
1052,"public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
","public String explode(File resource,JSON m){
  try {
    Template template=getTemplate(resource);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
",103,8,"parse:explode,file:resource,",220,0.560691885,Beam
1053,"public static void discard(){
  current.remove();
}
","public static void Discarding(){
  current.remove();
}
",14,2,"discard:Discarding,",5,0.011436494,Beam
1054,"public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}","public GT_MetaGenerated_Context(String aUnlocalized,short aOffset,short aItemAmount){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}",104,10,"GT_MetaGenerated_Item:GT_MetaGenerated_Context,",37,0.093147707,Beam
1056,,,60,5,,803,2.418030171,0
1057,,,36,4,,1197,3.29378219,0
1058,,,18,2,,270,0.737716905,0
1059,,,30,4,,480,1.358689713,0
1060,,,42,4,,688,1.793379565,0
1061,"public static Function<Value,Value> ofValue(){
  return VALUE;
}
","public static Function<Value,Value> OfValue(){
  return VALUE;
}
",16,2,"ofValue:OfValue,",5,0.015000459,Beam
1062,"public static String encodeUrl(final String str){
  return encode(str,""%20"");
}","public static String encodeUrl(final String exp){
  return encode(exp,""%20"");
}",19,2,"str:exp,",6,0.036033662,Beam
1063,"public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(reader),sw,timeout);
  sw.close();
  return sw.toString();
}","public static String getStr(Reader input,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(input),sw,timeout);
  sw.close();
  return sw.getStr();
}",49,4,"reader:input,toString:getStr,",152,0.461768667,Beam
1064,"public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}","public void loop(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    upload.clear();
    while (fileChannel.read(upload) > 0) {
      upload.flip();
      if (upload.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,upload.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(upload);
      upload.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}",170,7,"load:loop,tmp:upload,",112,0.264136155,Beam
1065,,,89,5,,719,1.826179485,0
1066,"private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}","private static void d_mcnn(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}",122,11,"d_ucumm:d_mcnn,",134,1.000947611,Beam
1067,"public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}","public static String x(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}",119,7,"replace:x,",113,0.289475942,Beam
1068,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
","@Override public void ActionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
",35,3,"actionPerformed:ActionPerformed,",16,0.045145528,Beam
1069,"private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}","private void processOperation(final UUID uuid,final Object document,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert document != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ document+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}",386,17,"sendResource:processOperation,resource:document,",288,0.903882511,Beam
1070,"private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : ast.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}
","private static IAbstractNode recvertor(final CommonTree tree) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : tree.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}
",62,3,"convertOr:recvertor,ast:tree,",62,0.208892373,Beam
1071,,,88,5,,692,9.836137056,0
1072,"public void and(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}","public void and(LongBitSet outer){
  int pos=Math.min(numWords,outer.numWords);
  while (--pos >= 0) {
    bits[pos]&=outer.bits[pos];
  }
  if (numWords > outer.numWords) {
    Arrays.fill(bits,outer.numWords,numWords,0L);
  }
}",69,5,"other:outer,",3,0.027009205,Beam
1073,,,17,2,,82,0.164146288,0
1074,"public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){
  return convertToSigned16BitSamples(buffer.getSamples());
}","public static ByteBuffer convertToSigned16bitSamp(Buffer container){
  return convertToSigned16bitSamp(container.getSamples());
}",20,2,"convertToSigned16BitSamples:convertToSigned16bitSamp,buffer:container,",77,0.538564702,Beam
1075,,,54,3,,359,0.775379606,0
1076,,,77,8,,1690,6.506928209,0
1077,"void changeState(int newState){
  int oldState;
synchronized (stateLock) {
    if (state == newState)     return;
    oldState=state;
    state=newState;
    stateLock.notifyAll();
  }
  sendStateChangeNotification(oldState,newState);
}
","void changeState(int oldName){
  int oldState;
synchronized (stateLock) {
    if (state == oldName)     return;
    oldState=state;
    state=oldName;
    stateLock.notifyAll();
  }
  sendStateChangeNotification(oldState,oldName);
}
",46,5,"newState:oldName,",22,0.07311916,Beam
1078,"private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){
  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));
}
","private void sortGrokerServices(BrokerItem[] brokerItems,int sortType){
  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));
}
",28,3,"sortBrokerItems:sortGrokerServices,",65,0.142879041,Beam
1079,"public boolean is_overlap(){
  Set<BrdItem> start_contacts=get_start_contacts();
  Set<BrdItem> end_contacts=get_end_contacts();
  for (  BrdItem end_contact : end_contacts) {
    if (start_contacts.contains(end_contact))     return true;
  }
  return false;
}
","public boolean is_underact(){
  Set<BrdItem> start_contacts=get_start_contacts();
  Set<BrdItem> end_contacts=get_end_contacts();
  for (  BrdItem end_contact : end_contacts) {
    if (start_contacts.contains(end_contact))     return true;
  }
  return false;
}
",51,4,"is_overlap:is_underact,",14,0.03237046,Beam
1080,"protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}","protected void removeSpers(){
  for (int i=viewerImage.size(); i > 0; i--) {
    LocoIcon il=viewerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      viewerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeSpers();
  repaint();
}",93,5,"removeMarkers:removeSpers,markerImage:viewerImage,",38,0.109899418,Beam
1081,,,68,5,,988,5.251163518,0
1082,"public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
","public Decimal subfact(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subfact(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
",49,5,"subtract:subfact,",3,0.016767494,Beam
1083,,,33,9,,1868,4.791861165,0
1084,"public void removeEventListener(SIPTransactionEventListener oldListener){
  eventListeners.remove(oldListener);
}
","public void removeAllFilter(SIPTransactionEventListener oldListener){
  addressReaders.remove(oldListener);
}
",16,3,"removeEventListener:removeAllFilter,eventListeners:addressReaders,",168,0.317070826,Beam
1085,,,39,4,,317,0.768101358,0
1086,"public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
","public boolean condition(final Direction dir,final boolean standing){
  if (this.dir != dir) {
    return false;
  }
  if (this.standing != standing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
",70,6,"facing:standing,check:condition,",278,0.938490204,Beam
1087,,,24,2,,312,1.404471811,0
1088,"public boolean hasParameter(String name){
  return _parameters.hasParameter(name);
}
","public boolean haveParameters(String prefix){
  return _prometer.haveParameters(prefix);
}
",17,3,"hasParameter:haveParameters,name:prefix,_parameters:_prometer,",261,0.722324522,Beam
1089,"public void removeComponentListener(final ComponentUpdateListener listener){
  componentListeners.remove(listener);
}
","public void removeApplicationProvider(final ComponentUpdateListener appplayer){
  componentListeners.remove(appplayer);
}
",17,3,"removeComponentListener:removeApplicationProvider,listener:appplayer,",100,0.203834498,Beam
1090,"public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}
","public Viewrefrender(ViewRender<T> self,Class<T> other,int prefix){
  Objects.requireNonNull(self);
  _view=self;
  _type=other;
  _priority=prefix;
}
",39,7,"view:self,type:other,ViewRefRender:Viewrefrender,priority:prefix,",1244,2.623845172,Beam
1091,"public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){
  fn_=Objects.requireNonNull(fn);
  equality_=Objects.requireNonNull(equality);
}
","public Memoids1(Function<? super Input,? extends Output> kn,BiPredicate<Input,Input> evidence){
  fn_=Objects.requireNonNull(kn);
  equality_=Objects.requireNonNull(evidence);
}",43,5,"MemoidOne:Memoids1,equality:evidence,fn:kn,",228,0.571113288,Beam
1092,,,24,3,,361,1.220713202,0
1093,,,65,6,,782,1.597448957,0
1094,,,53,4,,793,3.17638853,0
1095,"public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}
","public static void orval(final Thread message){
  if (message != null) {
    message.orval();
  }
}
",25,2,"interrupt:orval,thread:message,",216,1.026886543,Beam
1096,"public void tallyVariant(VcfHeader header,VcfRecord rec){
  tallyVariant(rec,header.getSampleNames());
}
","public void tallyVariant(VcfHeader writer,VcfRecord rec){
  tallyVariant(rec,writer.getSampleNames());
}
",23,3,"header:writer,",40,0.156899965,Beam
1097,"private boolean isValidEngine(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}","private boolean IsValidMode(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}",287,23,"isValidEngine:IsValidMode,",16,0.103118865,Beam
1098,"public <T>T time(Callable<T> event) throws Exception {
  final long startTime=clock.tick();
  try {
    return event.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}
","public <T>T callback(Callable<T> resource) throws Exception {
  final long startTime=clock.tick();
  try {
    return resource.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}
",51,4,"time:callback,event:resource,",111,0.440138026,Beam
1100,,,134,7,,1744,8.401760451,0
1101,,,15,3,,545,2.209143686,0
1102,"public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}","public static double square(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}",77,6,"pdf:square,",18,0.056814289,Beam
1103,,,22,2,,77,0.265889064,0
1104,,,130,8,,984,4.975365778,0
1105,"final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void pretty(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",77,6,"print:pretty,",10,0.039264429,Beam
1106,"private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSchedule.arrivals);
    LOG.debug(""Original departures: {}"",originalSchedule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}","private TripSchedule merge(TripSchedule originalScheme){
  TripSchedule schedule=originalScheme.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalScheme.arrivals[ss];
      if (ss > 0)       hopTime-=originalScheme.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalScheme.arrivals[ss];
    if (ss > 0)     hopTime-=originalScheme.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalScheme.departures[ss] - originalScheme.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalScheme.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalScheme.arrivals);
    LOG.debug(""Original departures: {}"",originalScheme.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}",429,19,"rerouteTripSchedule:merge,originalSchedule:originalScheme,",125,1.68746897,Beam
1107,,,42,5,,682,3.632214435,0
1108,"default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}
","default Filterable<T> replaceAll(final T... values){
  return replaceAll(Stream.of(values));
}
",25,2,"removeAll:replaceAll,",8,0.114766816,Beam
1109,"private ArtLocateResult calculate_next_trace(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}","private ArtLocateResult locate(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}",287,20,"calculate_next_trace:locate,",16,0.269974784,Beam
1110,,,132,4,,686,6.268379859,0
1111,,,73,7,,317,2.088362277,0
1112,"public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}","public static double computesPID(double[] input,double medium){
  for (int i=0; i < input.length; i++) {
    input[i]=Math.abs(input[i] - medium);
  }
  double mad=QuickSelect.medium(input);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : input) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}",127,7,"median:medium,computeMAD:computesPID,x:input,",445,6.587631257,Beam
1113,,,161,5,,1137,15.56571263,0
1114,,,25,3,,368,3.56167028,0
1115,,,130,8,,1465,13.4248505,0
1116,"public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null)   return false;
  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}","public static boolean matchExpansion(String fil,Collection<String> Extended){
  if (fil == null)   return false;
  if (Extended == null || Extended.isEmpty())   return indexOfExtension(fil) == -1;
  String fileExt=getExtension(fil);
  for (  String extended : Extended) {
    if (fileExt.equals(extended))     return true;
  }
  return false;
}",78,5,"isExtension:matchExpansion,extensions:Extended,filename:fil,extension:extended,",590,11.20000248,Beam
1117,"private void updatePathConstraints(TestChromosome test){
  List<BranchCondition> pathCondition=ConcolicExecution.getSymbolicPath(test);
  pathConditions.put(test,pathCondition);
}
","private void updatePathConctains(TestChromosome cross){
  List<BranchCondition> pathcondition=ConcolicExecution.getSymbolicPath(cross);
  pathConditions.put(cross,pathcondition);
}
",31,4,"test:cross,updatePathConstraints:updatePathConctains,pathCondition:pathcondition,",334,5.938471051,Beam
1118,"public static void sessionStop(){
  if (mProcess == null)   return;
  mProcess.destroy();
  mProcess=null;
}
","public static void threadKill(){
  if (mProgress == null)   return;
  mProgress.destroy();
  mProgress=null;
}
",26,2,"sessionStop:threadKill,mProcess:mProgress,",19,0.11923575,Beam
1119,,,112,6,,1080,11.00491992,0
1120,,,248,11,,1678,22.59332303,0
1121,"void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
","void initDemandAndResourceArray(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
",95,6,"initDemandAndCollectionMap:initDemandAndResourceArray,",13,0.103386319,Beam
1122,,,25,2,,293,2.876367613,0
1123,"public void remove(RequestFilter filter){
  filters.remove(filter);
}
","public void remove(RequestFilter search){
  filters.remove(search);
}
",16,3,"filter:search,",4,0.026074489,Beam
1124,"private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
","private void build(final JLabel label,final JTextField field){
  panel.build(label);
  panel.build(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
",184,8,"add:build,",9,0.086697141,Beam
1125,"public void doWindowOpen(){
  doConnect();
}
","public void doWindowsConnect(){
  doConnect();
}
",11,1,"doWindowOpen:doWindowsConnect,",12,0.056053452,Beam
1126,,,102,12,,3171,19.20518141,0
1127,"private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}","private void addPingChangeData(long step){
  lastPingTimesLock.lock();
  try {
    if (firstPingTimes == null) {
      firstPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(firstPingTimes,step);
    }
 else {
      System.arraycopy(firstPingTimes,1,firstPingTimes,0,firstPingTimes.length - 1);
      firstPingTimes[firstPingTimes.length - 1]=step;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}",85,5,"sample:step,addPingTimeData:addPingChangeData,lastPingTimes:firstPingTimes,",106,0.973834797,Beam
1128,"private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xPos);
  spriteFrame.setTranslateY(yPos);
  this.xPos=xPos;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}","private Prile(float axVel,float yPos,float xVel,float yVel,Image... swinders){
  if (swinders != null)   sprimeframe=new ImageView(swinders[0]);
  playerStates.addAll(Arrays.asList(swinders));
  sprimeframe.setTranslateX(axVel);
  sprimeframe.setTranslateY(yPos);
  this.axVel=axVel;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}",88,8,"Sprite:Prile,sprites:swinders,xPos:axVel,spriteFrame:sprimeframe,",2096,13.22568328,Beam
1129,"public static void addFile(String s) throws IOException {
  File f=new File(s);
  addFile(f);
}
","public static void addFiles(String is) throws IOException {
  File f=new File(is);
  addFiles(f);
}
",26,3,"addFile:addFiles,s:is,",69,0.476635567,Beam
1131,"public PacketOutputStream writeTimestampLength(final Calendar calendar,Timestamp ts,boolean fractionalSeconds){
  assureBufferCapacity(fractionalSeconds ? 12 : 8);
  buffer.put((byte)(fractionalSeconds ? 11 : 7));
  buffer.putShort((short)calendar.get(Calendar.YEAR));
  buffer.put((byte)((calendar.get(Calendar.MONTH) + 1) & 0xff));
  buffer.put((byte)(calendar.get(Calendar.DAY_OF_MONTH) & 0xff));
  buffer.put((byte)calendar.get(Calendar.HOUR_OF_DAY));
  buffer.put((byte)calendar.get(Calendar.MINUTE));
  buffer.put((byte)calendar.get(Calendar.SECOND));
  if (fractionalSeconds) {
    buffer.putInt(ts.getNanos() / 1000);
  }
  return this;
}","public PacketOutputStream writeTemporalString(final Calendar thebook,Timestamp dates,boolean fractionalFirstes){
  assureBufferCapacity(fractionalFirstes ? 12 : 8);
  resource.put((byte)(fractionalFirstes ? 11 : 7));
  resource.putShort((short)thebook.get(Calendar.YEAR));
  resource.put((byte)((thebook.get(Calendar.MONTH) + 1) & 0xff));
  resource.put((byte)(thebook.get(Calendar.DAY_OF_MONTH) & 0xff));
  resource.put((byte)thebook.get(Calendar.HOUR_OF_DAY));
  resource.put((byte)thebook.get(Calendar.MINUTE));
  resource.put((byte)thebook.get(Calendar.SECOND));
  if (fractionalFirstes) {
    resource.putInt(dates.getNanos() / 1000);
  }
  return this;
}",177,5,"writeTimestampLength:writeTemporalString,calendar:thebook,fractionalSeconds:fractionalFirstes,ts:dates,buffer:resource,",997,9.068333503,Beam
1132,,,35,3,,360,3.975753597,0
1133,,,98,6,,1502,13.68886447,0
1134,,,84,7,,1357,22.79065463,0
1135,,,68,4,,638,20.10532406,0
1136,,,192,7,,1847,13.48600269,0
1137,"public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}","public static Object[] debug(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.debug(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}",200,12,"putAll:debug,",17,0.069643239,Beam
1138,"public void read(ByteCodeParser in) throws IOException {
  int length=in.readInt();
  _maxStack=in.readShort();
  _maxLocals=in.readShort();
  int codeLength=in.readInt();
  _code=new byte[codeLength];
  in.read(_code,0,codeLength);
  int exnCount=in.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(in.readShort() & 0xffff);
    exn.setEnd(in.readShort() & 0xffff);
    exn.setHandler(in.readShort() & 0xffff);
    exn.setType(in.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=in.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=in.parseAttribute();
    _attributes.add(attr);
  }
}","public void load(ByteCodeParser reader) throws IOException {
  int length=reader.readInt();
  _maxStack=reader.readShort();
  _maxLocals=reader.readShort();
  int codeLength=reader.readInt();
  _code=new byte[codeLength];
  reader.load(_code,0,codeLength);
  int exnCount=reader.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(reader.readShort() & 0xffff);
    exn.setEnd(reader.readShort() & 0xffff);
    exn.setHandler(reader.readShort() & 0xffff);
    exn.setType(reader.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=reader.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=reader.parseAttribute();
    _attributes.add(attr);
  }
}",197,13,"read:load,in:reader,",67,0.326585893,Beam
1139,,,25,3,,249,0.911619659,0
1140,"protected void configDialogPropertyChange(PropertyChangeEvent event){
  log.debug(""internal config dialog handler"");
  firePropertyChange(PropertyChangeID.CONFIG_CHANGE,event.getOldValue(),event.getNewValue());
}
","protected void configDialogPropertyAdd(PropertyChangeEvent event){
  log.debug(""internal config dialog handler"");
  firePropertyChange(PropertyChangeID.CONFIG_CHANGE,event.getOldValue(),event.getNewValue());
}
",35,3,"configDialogPropertyChange:configDialogPropertyAdd,",8,0.023305043,Beam
1141,,,81,7,,1452,9.786923711,0
1142,"@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
","@Override public void timeout(){
  try {
    if (session != null) {
      session.timeout();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
",39,3,"close:timeout,connection:session,",66,0.445356409,Beam
1143,,,47,3,,112,1.690834161,0
1144,"@Override public void paintIcon(Component c,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}","@Override public void paintIcon(Component k,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(k instanceof JComponent) ? (JComponent)k : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}",102,12,"c:k,",8,0.068945436,Beam
1145,"public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
","public Phone createphone(String data){
  PhoneImpl PhoneImpl=new PhoneImpl();
  try {
    PhoneImpl.setValue(data);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return PhoneImpl;
}
",43,4,"value:data,phoneImpl:PhoneImpl,",531,2.80488079,Beam
1146,"@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
","@Override public PacketBuffer next(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
",21,3,"write:next,",52,0.274783238,Beam
1147,"public static String randomRegexpishString(Random r){
  return randomRegexpishString(r,20);
}","public static String randomRegexpifyStr(Random f){
  return randomRegexpifyStr(f,20);
}",18,2,"randomRegexpishString:randomRegexpifyStr,r:f,",107,0.727184669,Beam
1148,,,71,5,,610,3.398236664,0
1149,,,185,6,,1148,6.6713172,0
1150,,,69,4,,626,5.398420783,0
1152,,,36,3,,515,4.200592995,0
1153,,,75,5,,426,3.048590517,0
1154,,,113,12,,1772,10.04785427,0
1155,,,136,8,,1489,14.43447229,0
1156,"@Override public void step(MessageLogger logger){
  try {
    addAgent();
    env.step();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","@Override public void action(MessageLogger logger){
  try {
    addAgent();
    env.action();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",37,4,"step:action,",20,0.130363023,Beam
1157,"public int size(){
  return al.size();
}
","public int start(){
  return cal.start();
}
",14,2,"size:start,al:cal,",39,0.224332412,Beam
1158,"public void addNode(TopologicalNode node){
  nodeList.add(node);
}
","public void createPoint(TopologicalNode index){
  nodeList.add(index);
}
",16,3,"node:index,addNode:createPoint,",52,0.287229304,Beam
1159,,,35,3,,390,2.176367184,0
1160,,,121,8,,2081,16.14581918,0
1161,"public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
","public boolean execgrade(Runnable event,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(event,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
",43,6,"task:event,schedule:execgrade,",287,2.194551885,Beam
1162,,,88,5,,127,1.668413289,0
1163,,,53,5,,564,3.517175078,0
1164,"public void reset(){
  displayCache.clear();
  cachedID.clear();
}
","public void cache(){
  displayCache.clear();
  cashedIDs.clear();
}
",19,3,"reset:cache,cachedID:cashedIDs,",139,0.890101969,Beam
1165,,,14,2,,246,1.223704863,0
1166,,,58,5,,781,4.178067434,0
1167,"public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){
  Objects.requireNonNull(notifications);
  final int position=indexOf(notifications,startId);
  if (position == -1) {
    return Iterables.limit(notifications,limitSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.skip(notifications,position),limitSize);
  }
  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);
}","public Iterable<Notification> jump(@Nonnull final Iterable<Notification> nonices,final long rootTime,final boolean inclusive,final int pageSize){
  Objects.requireNonNull(nonices);
  final int position=indexOf(nonices,rootTime);
  if (position == -1) {
    return Iterables.limit(nonices,pageSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.jump(nonices,position),pageSize);
  }
  return Iterables.limit(Iterables.jump(nonices,position + 1),pageSize);
}",109,6,"startId:rootTime,notifications:nonices,limitSize:pageSize,skip:jump,",1240,11.50330958,Beam
1168,,,120,9,,1795,10.16572015,0
1169,,,116,6,,1009,7.748512201,0
1170,"public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}","public static String replaceChars(String pr,String oldchears,char newchar){
  int pos=indexOfChars(pr,oldchears);
  if (pos == -1) {
    return pr;
  }
  StringBuilder buf=new StringBuilder(pr);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(pr,oldchears,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}",87,6,"oldchars:oldchears,str:pr,",331,2.765624853,Beam
1171,,,53,5,,1489,20.12734045,0
1172,"public void serialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialize(serializer);
  serializer.endTag(ns,TAG);
}
","public void initialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,nType);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(nType)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.initialize(serializer);
  serializer.endTag(ns,TAG);
}
",87,6,"serialize:initialize,mName:nType,",351,2.656365685,Beam
1173,"public AwsIotConnection(AbstractAwsIotClient client){
  this.client=client;
}
","public AwsIOTConnection(AbstractAwsIotClient name){
  this.name=name;
}
",14,2,"client:name,AwsIotConnection:AwsIOTConnection,",86,0.506953382,Beam
1174,,,39,5,,137,1.223098361,0
1175,,,52,4,,760,4.374129172,0
1176,"public ElsaSerializerPojo make(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}","public ElsaSerializerPojo parse(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}",41,8,"make:parse,",4,0.03517015,Beam
1177,,,23,3,,391,3.707641606,0
1178,"@Override public void actOn(File f){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(f));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
","@Override public void actionOff(File data){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(data));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
",66,5,"f:data,actOn:actionOff,",84,0.709000019,Beam
1179,,,39,3,,455,4.220858006,0
1180,,,185,10,,2286,21.00697453,0
1181,,,150,10,,345,4.601786518,0
1182,,,60,4,,738,12.88717707,0
1183,,,63,4,,578,6.347738739,0
1184,,,39,4,,315,3.976820592,0
1185,,,85,6,,1256,16.62291661,0
1186,,,25,2,,259,3.210220663,0
1187,,,96,6,,1155,13.4586078,0
1188,"public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnToUrl,returnToUrl);
}
","public AuthRequest identigate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return identigate(discoveries,returnToUrl,returnToUrl);
}
",26,3,"authenticate:identigate,",9,0.160325615,Beam
1189,"protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}","protected void sqrfDraw(VisualTable y){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=y.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=y.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=y.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=y.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}",402,23,"labels:y,sqrtLayout:sqrfDraw,",82,1.417536577,Beam
1190,"public GeoDistanceBuilder addUnboundedFrom(String key,double from){
  ranges.add(new Range(key,from,null));
  return this;
}
","public GeoDistanceBuilder addUnbboundsOn(String query,double from){
  Rounds.add(new Range(query,from,null));
  return this;
}
",30,4,"addUnboundedFrom:addUnbboundsOn,key:query,ranges:Rounds,",686,5.903907506,Beam
1191,,,17,1,,41,0.400752405,0
1192,"public void close() throws IOException {
  flushBits();
  out.close();
}
","public void destroy() throws IOException {
  flushBits();
  out.destroy();
}
",19,2,"close:destroy,",5,0.053087083,Beam
1193,"public void cut(){
  copy();
  deleteSelectedObjects();
}
","public void cuts(){
  copy();
  deleteSelectedObjects();
}
",15,1,"cut:cuts,",3,0.026718199,Beam
1196,"public SimpleSetupPanel(Experiment exp){
  this();
  setExperiment(exp);
}
","public SimplePluginBar(Experiment div){
  this();
  setExperiment(div);
}
",17,2,"SimpleSetupPanel:SimplePluginBar,exp:div,",72,0.523547737,Beam
1197,"public void stop(){
  server.stop(0);
}","public void output(){
  manager.output(0);
}",14,2,"stop:output,server:manager,",165,1.171677876,Beam
1198,"public static final double sigma(double a){
  return 1.0 / (1.0 + Math.exp(-a));
}","public static final double ssig(double a){
  return 1.0 / (1.0 + Math.exp(-a));
}",26,2,"sigma:ssig,",5,0.064655236,Beam
1199,,,87,7,,269,3.122681292,0
1200,"public ByteArrayDataSource(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}","public ByteStringDataProvider(InputStream is,String object){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (object != null && object.length() > 0)   m_type=object;
}",95,9,"ByteArrayDataSource:ByteStringDataProvider,type:object,",231,2.480175499,Beam
1201,"public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
","public static void user(String server){
  String driver=getDriver(server);
  if (driver != null) {
    loadUserClass(driver);
  }
}
",31,3,"url:server,load:user,",82,0.788629603,Beam
1202,,,124,7,,229,2.192914693,0
1203,,,108,4,,528,47.47121617,0
1204,,,86,4,,699,18.93728576,0
1205,"protected void addBottomComponent(Component bottomComponent){
  c.weighty=2;
  layout.setConstraints(bottomComponent,c);
  contentPanel.add(bottomComponent);
}","protected void addTopControl(Component topFrame){
  c.weighty=2;
  layout.setConstraints(topFrame,c);
  contentPanel.add(topFrame);
}",31,5,"bottomComponent:topFrame,addBottomComponent:addTopControl,",51,0.510079229,Beam
1206,"protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}","protected double nnSupport(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * nnSupport(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}",178,16,"kernelHelper:nnSupport,",140,3.961165214,Beam
1207,"private static String unwrap(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}","private static String unwrap(String instance){
  if (instance.startsWith(""(("")) {
    instance=instance.substring(instance.indexOf("")"") + 1,instance.length() - 1);
    if (instance.endsWith(""]"")) {
      instance=instance.substring(0,instance.lastIndexOf(""[""));
    }
 else {
      instance=instance.substring(0,instance.lastIndexOf("".""));
    }
  }
  return instance;
}",94,2,"expression:instance,",27,0.311959378,Beam
1209,,,172,9,,1576,17.73648228,0
1210,,,60,4,,886,7.279611448,0
1211,,,44,3,,482,4.66596812,0
1212,"private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}","private boolean isNotInArray(String text,String[] index){
  for (int i=0; i < index.length; i++) {
    if (text.equals(index[i])) {
      return false;
    }
  }
  return true;
}",52,4,"array:index,str:text,",227,2.866777698,Beam
1213,,,105,7,,1032,18.5648596,0
1214,,,71,3,,367,4.199730869,0
1215,"public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}","public static Object callGeneric(Class clazz,String functionName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(functionName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(functionName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}",87,6,"methodName:functionName,invokeStatic:callGeneric,",118,1.261869363,Beam
1216,,,254,11,,2784,30.05115128,0
1217,,,61,4,,460,4.427034426,0
1218,"private void showFilterDialog(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}","private void showEditForm(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}",55,4,"showFilterDialog:showEditForm,",43,0.284485495,Beam
1219,,,179,9,,1864,17.80031287,0
1220,"public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  create(rpfFilePaths,outputFile,false);
}
","public void setup(String[] rpfFilePaths,String OutputFiles) throws MakeTocException {
  setup(rpfFilePaths,OutputFiles,false);
}
",25,3,"outputFile:OutputFiles,create:setup,",166,1.968563112,Beam
1222,,,150,10,,222,1.867362241,0
1223,,,15,2,,170,1.526607112,0
1224,,,163,16,,4578,45.55221578,0
1225,"public void continueButtonActionPerformed(java.awt.event.ActionEvent e){
  if (testRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText(""Running Wraparound Test"");
      statusText1.setVisible(true);
    }
  }
}","public void continueButtonActionClickformed(java.awt.event.ActionEvent c){
  if (testingRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText(""Running Wraparound Test"");
      statusText1.setVisible(true);
    }
  }
}",47,6,"continueButtonActionPerformed:continueButtonActionClickformed,e:c,testRunning:testingRunning,",474,10.99153558,Beam
1227,"private void executeClaimedTask(ClaimedTask claimedTask){
  if (!claimedTask.setStartTime(new Date())) {
    _log.info(""Claimed task is overdue; range not scanned: {}"",claimedTask.getTask());
    return;
  }
  ScanRangeTask task=claimedTask.getTask();
  boolean releaseTask=false;
  try {
    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);
    releaseTask=asyncRangeScan(task);
  }
  finally {
    unclaimTask(claimedTask,releaseTask);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}
","private void executeClaimableTransaction(ClaimedTask reclaimedType){
  if (!reclaimedType.setStartTime(new Date())) {
    _log.info(""Claimed task is overdue; range not scanned: {}"",reclaimedType.getTask());
    return;
  }
  ScanRangeTask task=reclaimedType.getTask();
  boolean freeJob=false;
  try {
    _canWorkmission.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);
    freeJob=asyncRangeScan(task);
  }
  finally {
    unclaimTask(reclaimedType,freeJob);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}
",94,8,"claimedTask:reclaimedType,executeClaimedTask:executeClaimableTransaction,releaseTask:freeJob,_scanWorkflow:_canWorkmission,",1367,24.43165983,Beam
1228,,,58,6,,236,2.530464935,0
1229,"void copyInto(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}","void copyStringo(Converter[] convertchers){
  System.arraycopy(iConverters,0,convertchers,0,iConverters.length);
}",27,3,"copyInto:copyStringo,converters:convertchers,",64,0.928536264,Beam
1230,,,172,5,,972,16.90922194,0
1231,"private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}","private String create(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}",183,9,"processLogoutRequest:create,",86,1.010048727,Beam
1232,,,152,7,,730,6.824061418,0
1233,,,75,6,,1103,12.54757954,0
1234,"public AbstractResource(String mimetype){
  this(mimetype,System.currentTimeMillis());
}
","public AbstractOperation(String mimetryplate){
  this(mimetryplate,System.currentTimeMillis());
}
",19,2,"mimetype:mimetryplate,AbstractResource:AbstractOperation,",73,0.894934114,Beam
1236,,,89,11,,4203,49.97982871,0
1237,,,13,2,,283,2.248446039,0
1238,"private Segment createDiskSegment(SegmentDescriptor descriptor){
  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());
  Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);
  descriptor.copyTo(buffer);
  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug(""Created segment: {}"",segment);
  return segment;
}
","private Segment createDiskFragments(SegmentDescriptor desribution){
  File segmentFile=SegmentFile.createSegmentFile(part,storage.directory(),desribution.id(),desribution.version());
  Buffer batch=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,desribution.maxSegmentSize()),Integer.MAX_VALUE);
  desribution.copyTo(batch);
  Segment sergments=new Segment(new SegmentFile(segmentFile),batch.slice(),desribution,createIndex(desribution),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug(""Created segment: {}"",sergments);
  return sergments;
}
",122,8,"createDiskSegment:createDiskFragments,descriptor:desribution,segment:sergments,buffer:batch,name:part,",1110,16.26302712,Beam
1240,"private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
","private static void validate(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
",337,11,"assertChangeEvents:validate,",21,1.101157367,Beam
1241,"@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","@Override protected synchronized void call(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",60,4,"write:call,",72,0.658432253,Beam
1242,,,42,4,,488,4.277210347,0
1243,"public void stop(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blinkService) {
    blinkService.shutdownNow();
  }
}
","public void disconnect(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blipManager) {
    blipManager.shutdownNow();
  }
}
",41,3,"stop:disconnect,blinkService:blipManager,",235,2.053088605,Beam
1244,"boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}","boolean processBytes() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}",161,9,"writeData:processBytes,",8,0.119466611,Beam
1245,,,21,3,,402,3.30730536,0
1246,,,19,2,,342,3.040463416,0
1247,"public List<ColourChange> sampleConditionalMigrationEvents2(int parentColour,double parentHeight,int childColour,double childHeight,double[] m){
  List<ColourChange> colourChanges=new ArrayList<ColourChange>();
  if (parentHeight < childHeight) {
    throw new IllegalArgumentException(""sampleConditionalMigrationEvents: parentHeight="" + parentHeight + "" childHeight=""+ childHeight+ "", not good."");
  }
  try {
    int currentColour=parentColour;
    double currentHeight=parentHeight;
    while (true) {
      ColourChange nextEvent=randomConditionalMigrationEvent(currentColour,currentHeight,childColour,childHeight,m);
      currentHeight=nextEvent.getTime();
      currentColour=nextEvent.getColourAbove();
      colourChanges.add(nextEvent);
    }
  }
 catch (  NoEventException nee) {
  }
  reverseColourChangeList(colourChanges,parentColour);
  return colourChanges;
}","public List<ColourChange> sampleConditionalMigrationEvents2(int parentColour,double parentHeight,int childScouring,double childHeight,double[] module){
  List<ColourChange> colourChanges=new ArrayList<ColourChange>();
  if (parentHeight < childHeight) {
    throw new IllegalArgumentException(""sampleConditionalMigrationEvents: parentHeight="" + parentHeight + "" childHeight=""+ childHeight+ "", not good."");
  }
  try {
    int currentColour=parentColour;
    double currentHeight=parentHeight;
    while (true) {
      ColourChange nextEvent=randomConditionalMigrationEvent(currentColour,currentHeight,childScouring,childHeight,module);
      currentHeight=nextEvent.getTime();
      currentColour=nextEvent.getColourAbove();
      colourChanges.add(nextEvent);
    }
  }
 catch (  NoEventException nee) {
  }
  reverseColourChangeList(colourChanges,parentColour);
  return colourChanges;
}",138,10,"m:module,childColour:childScouring,",188,5.7154398,Beam
1249,"private void fitSizeOfScrolledContent(){
  Point p=scrollComposite.getSize();
  main.setSize(main.computeSize(p.x,SWT.DEFAULT));
}
","private void computeSizeOfscrolledContents(){
  Point p=scrollComposite.getSize();
  main.setSize(main.computeSize(p.x,SWT.DEFAULT));
}
",34,4,"fitSizeOfScrolledContent:computeSizeOfscrolledContents,",15,0.139223468,Beam
1250,,,41,3,,292,3.758261112,0
1251,"public void proposeTree() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    i=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == i);
  final NodeRef iP=tree.getParent(i);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}
","public void superposePath() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=rule.getNodeCount();
  do {
    i=rule.getNode(MathUtils.nextInt(nodeCount));
  }
 while (rule.getRoot() == i);
  final NodeRef iP=rule.getParent(i);
  NodeRef j=rule.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=rule.getParent(j);
  while ((k != null && rule.getNodeHeight(k) <= rule.getNodeHeight(i)) || (i == j)) {
    j=rule.getNode(MathUtils.nextInt(nodeCount));
    k=rule.getParent(j);
  }
  if (j == rule.getRoot() || iP == rule.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(rule,iP,i);
  NodeRef PiP=rule.getParent(iP);
  newMinAge=Math.max(rule.getNodeHeight(i),rule.getNodeHeight(j));
  newRange=rule.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(rule.getNodeHeight(i),rule.getNodeHeight(CiP));
  oldRange=rule.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  rule.beginTreeEdit();
  if (j == rule.getRoot()) {
    rule.removeChild(iP,CiP);
    rule.removeChild(PiP,iP);
    rule.addChild(iP,j);
    rule.addChild(PiP,CiP);
    rule.setRoot(iP);
  }
 else   if (iP == rule.getRoot()) {
    rule.removeChild(k,j);
    rule.removeChild(iP,CiP);
    rule.addChild(iP,j);
    rule.addChild(k,iP);
    rule.setRoot(CiP);
  }
 else {
    rule.removeChild(k,j);
    rule.removeChild(iP,CiP);
    rule.removeChild(PiP,iP);
    rule.addChild(iP,j);
    rule.addChild(k,iP);
    rule.addChild(PiP,CiP);
  }
  rule.setNodeHeight(iP,newAge);
  rule.endTreeEdit();
  logq=Math.log(q);
}
",510,15,"proposeTree:superposePath,tree:rule,",115,1.805946644,Beam
1252,"public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}","public static void tf(String debug,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    debug=String.format(debug,args);
  }
  Log.wtf(tag,debug);
}",76,8,"msg:debug,f:tf,",69,0.590048917,Beam
1253,"private void changeValue(AbstractStorageLabel<Object> label,Object newValue){
  if (!Objects.equals(label.getValue(),newValue)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.preLabelValueChange(label);
      }
    }
    label.setValue(newValue);
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.postLabelValueChange(label);
      }
    }
  }
}
","private void updateLabel(AbstractStorageLabel<Object> comment,Object newObject){
  if (!Objects.equals(comment.getValue(),newObject)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener repleners : labelEditListeners) {
        repleners.preLabelValueChange(comment);
      }
    }
    comment.setValue(newObject);
synchronized (labelEditListeners) {
      for (      LabelEditListener repleners : labelEditListeners) {
        repleners.postLabelValueChange(comment);
      }
    }
  }
}
",84,5,"label:comment,newValue:newObject,changeValue:updateLabel,listener:repleners,",509,13.65525297,Beam
1254,,,143,10,,3386,42.99919,0
1255,,,33,3,,553,6.887845941,0
1256,,,61,4,,744,8.444816522,0
1257,"static WindowsFileAttributes fromFindData(long address){
  int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES);
  long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME);
  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME);
  long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);
}","static WindowsFileAttributes fromReadInfo(long order){
  int fileAttrs=unsafe.getInt(order + OFFSETOF_FIND_DATA_ATTRIBUTES);
  long creationTime=unsafe.getLong(order + OFFSETOF_FIND_DATA_CREATETIME);
  long lastAccessTime=unsafe.getLong(order + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  long lastWriteTime=unsafe.getLong(order + OFFSETOF_FIND_DATA_LASTWRITETIME);
  long size=((long)(unsafe.getInt(order + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(order + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(order + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);
}",133,16,"address:order,fromFindData:fromReadInfo,",168,2.250097589,Beam
1259,,,27,2,,287,4.151504234,0
1260,,,71,5,,758,11.18839563,0
1261,"private float calculateScrambleImageHeightMultiplier(float multiplier){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return multiplier / 2;
case PuzzleUtils.TYPE_MEGA:
return (multiplier / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(multiplier / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return multiplier;
}
return multiplier;
}","private float calculateScrambleImageHeightMultipler(float multider){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (multider / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return multider / 2;
case PuzzleUtils.TYPE_MEGA:
return (multider / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(multider / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (multider / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return multider;
}
return multider;
}",121,3,"multiplier:multider,calculateScrambleImageHeightMultiplier:calculateScrambleImageHeightMultipler,",79,1.326899203,Beam
1262,,,30,3,,655,13.76824617,0
1263,,,39,6,,2322,29.83977415,0
1264,"public void testFloatValueNeg(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}","public void assertNumberAmountAbs(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aInteger=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aInteger.floatValue() == result);
}",40,4,"testFloatValueNeg:assertNumberAmountAbs,aNumber:aInteger,",30,0.241781573,Beam
1265,,,96,9,,1851,25.99614584,0
1266,"private void adjustBackingFileLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}","private void adjustBackingFileLen(byte[] message,long base) throws IOException {
  if (message == null || message.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (base * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ message.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}",77,9,"index:base,buffer:message,adjustBackingFileLength:adjustBackingFileLen,",452,8.318903871,Beam
1267,,,77,5,,699,9.065801549,0
1268,,,51,9,,2014,44.52887331,0
1269,,,43,3,,142,2.699325116,0
1270,"private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}","private void drawWick(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}",260,9,"drawHook:drawWick,",40,0.367480103,Beam
1271,,,117,6,,1237,15.58389941,0
1272,"public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}","public List<String> classified(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}",168,13,"classify:classified,",3,0.031065174,Beam
1273,,,46,3,,404,4.048546708,0
1274,"public int add(T dl,int row){
  _list.add(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}
","public int update(T dl,int key){
  _list.update(key,dl);
  fireTableRowsInserted(key,key);
  return key;
}
",31,4,"add:update,row:key,",204,1.820869295,Beam
1275,"public static long calculateElapsedGC(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}","public static long calculateElapsedGC(){
  long timeElles=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeElles+=gcbean.getCollectionTime();
  }
  return timeElles;
}",33,4,"timeMillis:timeElles,",27,0.415863005,Beam
1276,"static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}","static TokenStream wrap(String attributeName,Analyzer indexAnalyzer,String content,char splitBlock) throws IOException {
  if (indexAnalyzer.getOffsetGap(attributeName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + attributeName + "")"");
  }
  int splitCharIdx=content.indexOf(splitBlock);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(attributeName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(attributeName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,attributeName,indexAnalyzer,content,splitBlock,splitCharIdx);
}",109,7,"fieldName:attributeName,splitChar:splitBlock,",146,2.012936453,Beam
1277,,,261,11,,3422,43.74066362,0
1278,,,177,9,,2631,24.75318253,0
1279,,,12,1,,25,0.202464962,0
1280,,,62,6,,828,7.899987451,0
1282,"@VisibleForTesting protected void startExecutor(final int container){
  LOG.info(""Starting a new executor for container: "" + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info(""Started the executor for container: "" + container);
  startExecutorMonitor(container,containerExecutor);
}
","@VisibleForTesting protected void startCompution(final int image){
  LOG.info(""Starting a new executor for container: "" + image);
  final Process containerExecutor=startExecutorProcess(image);
  processorToContainer.put(containerExecutor,image);
  LOG.info(""Started the executor for container: "" + image);
  startExecutorMonitor(image,containerExecutor);
}
",55,4,"startExecutor:startCompution,container:image,processToContainer:processorToContainer,",479,4.732524979,Beam
1283,,,104,5,,890,9.752390786,0
1284,,,77,10,,1169,10.92764373,0
1285,"protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}
","protected void sleep(int sleepMillis,int sleepNozo) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNozo);
}
",23,3,"sleepNanos:sleepNozo,",50,0.465173717,Beam
1286,,,71,5,,547,4.644687231,0
1287,"public static void flush(){
  clearBuffer();
  try {
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public static void stream(){
  clearBuffer();
  try {
    up.stream();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",34,3,"flush:stream,out:up,",75,0.71052806,Beam
1288,,,71,7,,1662,13.48751496,0
1289,"public static <T>Stream<T> concat(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static <T>Stream<T> interge(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
",128,5,"concat:interge,",73,3.226828325,Beam
1290,,,169,11,,3087,29.99453769,0
1291,,,49,6,,198,1.362279944,0
1292,"public static GenericObjectEditorDialog createDialog(Container parent){
  return createDialog(parent,null);
}
","public static GenericObjectEditorDialog createEditor(Container client){
  return createEditor(client,null);
}
",18,2,"createDialog:createEditor,parent:client,",140,1.613820589,Beam
1293,,,132,8,,1734,28.82754673,0
1294,"public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}","public String convertSWFToDOM(InputStream err) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,err);
  reader.readFile();
  err.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}",98,9,"in:err,convertSWFToHTML:convertSWFToDOM,",113,1.662730221,Beam
1295,,,143,7,,523,6.348023021,0
1296,,,33,2,,142,1.274266597,0
1297,,,92,7,,1268,14.52936415,0
1298,"public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){
  byte[] buffer=new byte[byteBuffer.remaining()];
  byteBuffer.get(buffer);
  return buffer;
}
","public static byte[] readBytesFromDoubleBuffer(ByteBuffer sourceBuffer){
  byte[] buffer=new byte[sourceBuffer.remaining()];
  sourceBuffer.get(buffer);
  return buffer;
}
",37,3,"readBytesFromByteBuffer:readBytesFromDoubleBuffer,byteBuffer:sourceBuffer,",63,0.702692501,Beam
1299,,,12,1,,19,0.180133446,0
1300,"private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : document.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=document.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}
","private boolean transferObject(SearchDocument NewFile,SearchDocument database,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : database.getPropertyNames()) {
    NewFile.addProperty(oldFieldName);
    List<String> oldValues=database.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,NewFile);
        }
      }
    }
  }
  return mutated;
}
",137,9,"document:database,copyDocument:transferObject,newDocument:NewFile,",513,9.99459035,Beam
1301,,,74,5,,1019,12.24860865,0
1302,,,52,3,,529,7.742564257,0
1303,,,35,4,,982,8.108671876,0
1304,"public static boolean hasTaxonomyInfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
","public static boolean hastaxonomicInfo(SequencesReader input){
  final File taxoneFile=new File(input.path(),TAXONOMY_FILE);
  final File mappingFile=new File(input.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxoneFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxoneFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
",91,6,"hasTaxonomyInfo:hastaxonomicInfo,reader:input,taxonFile:taxoneFile,",306,4.208349836,Beam
1305,"public static boolean hasBinding(Injector injector,Key<?> key){
  Binding<?> binding=getBinding(injector,key);
  return binding != null;
}
","public static boolean HasBelling(Injector instrumentOR,Key<?> lock){
  Binding<?> binding=getBinding(instrumentOR,lock);
  return binding != null;
}
",34,4,"key:lock,hasBinding:HasBelling,injector:instrumentOR,",418,4.72088629,Beam
1306,,,12,3,,486,5.13518335,0
1307,"private int convertToPanelX(double xval){
  double temp=(xval - m_minX) / m_rangeX;
  temp=temp * m_panelWidth;
  return (int)temp;
}
","private int converttoTableY(double yvalue){
  double cache=(yvalue - m_minX) / m_rangeX;
  cache=cache * m_panHeight;
  return (int)cache;
}
",32,6,"convertToPanelX:converttoTableY,xval:yvalue,m_panelWidth:m_panHeight,temp:cache,",566,5.759461856,Beam
1308,,,1226,33,,3684,46.61599679,0
1309,"void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}","void FixComparity(View back){
  Queue<View> queue=new LinkedList<View>();
  queue.add(back);
  View form=null;
  while ((form=queue.poll()) != null) {
    if (form instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)form;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}",98,6,"fixCompatibility:FixComparity,root:back,view:form,",707,9.340898053,Beam
1310,"private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
","private void doNormalCommandBlockPart(List<String> commandLinkList,List<String> jointOptions,Path classpath){
  commandLinkList.add(""--classpath"");
  commandLinkList.add(classpath.toString());
  if (jointCompilation) {
    commandLinkList.add(""-j"");
    commandLinkList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLinkList.add(""-d"");
    commandLinkList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLinkList.add(""--encoding"");
    commandLinkList.add(encoding);
  }
  if (stacktrace) {
    commandLinkList.add(""-e"");
  }
  if (parameters) {
    commandLinkList.add(""--parameters"");
  }
  if (useIndy) {
    commandLinkList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLinkList.add(""-b"");
    commandLinkList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLinkList.add(""--configscript"");
    commandLinkList.add(configscript);
  }
}
",190,12,"doNormalCommandLineList:doNormalCommandBlockPart,commandLineList:commandLinkList,",407,5.24117887,Beam
1311,"@SuppressWarnings(""unchecked"") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {
  Method parseKeyMethod=findParseMethod(keyClass);
  Method parseValueMethod=findParseMethod(valueClass);
  if ((null != parseKeyMethod) && (null != parseValueMethod)) {
    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {
      try {
        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());
        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());
        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {
          map.put((K)transformedKey,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ keyClass.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ valueClass.getName()+ ""."");
  }
}
","@SuppressWarnings(""unchecked"") public static <K,V>void TransformStringGroup(Map<String,String> original,Map<K,V> map,Class<K> idCode,Class<V> descriptionClass) throws PreferenceException {
  Method parseKeyMethod=findParseMethod(idCode);
  Method parseValueMethod=findParseMethod(descriptionClass);
  if ((null != parseKeyMethod) && (null != parseValueMethod)) {
    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {
      try {
        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());
        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());
        if (idCode.isAssignableFrom(transformedKey.getClass()) && descriptionClass.isAssignableFrom(transformedValue.getClass())) {
          map.put((K)transformedKey,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + idCode.getName() + "", ""+ descriptionClass.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + idCode.getName() + "", ""+ descriptionClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ idCode.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + idCode.getName() + "", ""+ descriptionClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ descriptionClass.getName()+ ""."");
  }
}
",285,11,"keyClass:idCode,transformStringMap:TransformStringGroup,valueClass:descriptionClass,",1145,18.83884736,Beam
1312,,,28,4,,697,8.279130785,0
1313,,,100,7,,859,7.97569381,0
1314,"void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}","void onImixed(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentGitch=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=days[i];
    double avg=(diff + old) / 2;
    recentGitch+=Math.abs(old - diff);
    days[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentGitch/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentGitch) + recentGitch) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}",176,15,"onMoved:onImixed,times:days,recentJitter:recentGitch,",1369,16.84738302,Beam
1315,,,23,1,,49,0.536824755,0
1316,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
","public void addFooterView(View video,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=video;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
",66,8,"v:video,",62,5.086164427,Beam
1318,,,54,4,,610,8.549334411,0
1319,,,11,2,,117,0.984524282,0
1320,,,20,3,,419,5.015696327,0
1321,,,74,5,,709,10.56826374,0
1322,,,75,2,,303,3.26174461,0
1323,"public static Object newInstance(Class<?> cl,int[] dims){
  if (dims.length == 0) {
    dims=new int[]{1};
  }
  return Array.newInstance(cl,dims);
}","public static Object getArray(Class<?> sh,int[] indoms){
  if (indoms.length == 0) {
    indoms=new int[]{1};
  }
  return Array.getArray(sh,indoms);
}",48,3,"newInstance:getArray,dims:indoms,cl:sh,",370,4.629006092,Beam
1324,,,42,6,,833,14.60556633,0
1325,,,30,2,,147,2.197167063,0
1326,,,132,5,,1447,24.89762342,0
1327,,,155,15,,3582,57.40447086,0
1328,"public NativeRunner(File eclipsec){
  this.eclipsec=Objects.requireNonNull(eclipsec);
}
","public NativeRuntime(File eclipsec){
  this.eclipsec=Objects.requireNonNull(eclipsec);
}
",19,2,"NativeRunner:NativeRuntime,",4,0.030199889,Beam
1329,"private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}","private static void read(InputStream in,byte[] img,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(img,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}",86,6,"buf:img,",18,0.308130117,Beam
1330,,,16,3,,295,2.520120684,0
1331,,,17,3,,130,1.709882303,0
1332,,,30,4,,254,2.208219465,0
1333,,,22,3,,521,6.161546866,0
1334,,,120,6,,1702,114.1380599,0
1336,"public boolean remove(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.remove(classname);
  }
 else {
    return false;
  }
}
","public boolean clear(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.clear(classname);
  }
 else {
    return false;
  }
}
",63,5,"remove:clear,",43,0.510140868,Beam
1337,,,36,3,,295,5.734494086,0
1338,"private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}","private void decide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  decide(idx,data,ret,start,pos,depth - 1);
  decide(idx,data,ret,pos,end,depth - 1);
}",274,14,"divide:decide,",130,2.276513712,Beam
1339,"protected void handleAutoDraw(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
","protected void handleAutoLoad(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
",22,1,"handleAutoDraw:handleAutoLoad,",8,0.072136402,Beam
1340,,,97,6,,1379,16.53039389,0
1342,,,79,4,,666,4.278646354,0
1343,,,148,6,,1523,25.75942526,0
1344,,,35,2,,215,3.448077516,0
1345,,,199,15,,3402,49.19015512,0
1346,"public static int convertLatmToY(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}","public static int convertLatmToYear(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}",68,5,"convertLatmToY:convertLatmToYear,",15,0.820236758,Beam
1347,"@Override public boolean isInitial(){
  return init;
}
","@Override public boolean startSerial(){
  return init;
}
",12,2,"isInitial:startSerial,",12,0.085714328,Beam
1348,"protected void createFromHValues(int[] hValues,int partitions){
  Arrays.sort(hValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / partitions);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}","protected void createFromHValues(int[] hValues,int countries){
  Arrays.sort(hValues);
  this.splits=new int[countries];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / countries);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}",97,6,"partitions:countries,",5,0.073605549,Beam
1349,,,113,10,,318,2.107663965,0
1350,,,82,7,,1034,7.798865589,0
1351,,,33,3,,622,7.531954753,0
1353,,,34,3,,466,3.56827265,0
1354,"public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}","public void setShortBlock(String infoLine,int labelDesignater){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignater);
  }
}",43,5,"displayInfoLine:setShortBlock,labelDesignator:labelDesignater,",88,0.190009511,Beam
1355,"public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}","public void removeEl(Object anData){
  p_data.add(anData);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anData != null)   setSelectedItem(anData);
}",60,4,"addElement:removeEl,anObject:anData,",47,0.092732255,Beam
1356,,,52,5,,712,1.963449506,0
1357,,,96,6,,962,4.093093967,0
1358,"public static String array2hex(final byte[] array){
  return byteArray2String(array,""0x"","", "",true,16);
}","public static String array_string(final byte[] array){
  return byteArray2String(array,""0x"","", "",true,16);
}",27,2,"array2hex:array_string,",14,0.037162519,Beam
1359,"public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}","public static Vector tokenizeString(String style,String separator){
  if (separator.length() == 1) {
    return tokenizeString(style,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=style.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=style.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}",169,8,"source:style,",60,0.165194142,Beam
1360,"protected void removeClassifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}","protected void removeModifier(int[] intinates){
  int i;
  if (intinates == null) {
    m_ModelClassFiles.removeAllElements();
  }
 else {
    for (i=intinates.length - 1; i >= 0; i--)     m_ModelClassFiles.remove(intinates[i]);
  }
  setModified(true);
}",63,4,"removeClassifiers:removeModifier,indices:intinates,m_ModelClassifiers:m_ModelClassFiles,",317,0.800292488,Beam
1361,"protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + setUser+ "" && ""+ chownCommand+ "" && ""+ command+ "" && ""+ chownCommand;
}","protected String wrapWindowsCmd(String document) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + setUser+ "" && ""+ chownCommand+ "" && ""+ document+ "" && ""+ chownCommand;
}",83,5,"wrapLinuxCommand:wrapWindowsCmd,command:document,",75,0.184886233,Beam
1362,,,121,6,,169,0.646544067,0
1363,,,61,4,,432,0.906416579,0
1364,,,165,7,,1290,5.385035133,0
1365,,,129,9,,1361,3.757246451,0
1366,,,26,3,,173,0.448768751,0
1367,"public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
","public static void initialzeProlishes(Properties properties,boolean reset,boolean witheferences){
  Properties defaultProp=null;
  if (witheferences) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
",140,10,"initializeProperties:initialzeProlishes,withDefaults:witheferences,",195,0.586016607,Beam
1368,"public boolean add(symbol sym) throws internal_error {
  Object previous;
  not_null(sym);
  previous=_all.put(sym.name(),sym);
  return previous == null;
}
","public boolean added(symbol sync) throws internal_error {
  Object previous;
  not_null(sync);
  previous=_all.put(sync.name(),sync);
  return previous == null;
}
",39,4,"add:added,sym:sync,",122,0.360920409,Beam
1369,"public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileProjects(Arrays.asList(new File(""."")),projects,Collections.emptyList(),issueAcceptor);
}","public void compilationProjectd(List<File> pages,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compilationProjectd(Arrays.asList(new File(""."")),pages,Collections.emptyList(),issueAcceptor);
}",41,3,"compileProjects:compilationProjectd,projects:pages,",210,0.53647062,Beam
1370,,,87,5,,829,1.866325446,0
1371,,,132,10,,1329,3.639306458,0
1372,,,151,13,,607,1.389297986,0
1373,,,262,13,,2839,10.43717538,0
1374,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    agg(value);
  }
}
","@Override public void acc(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    acc(value);
  }
}
",93,6,"agg:acc,",3,0.018329803,Beam
1375,"public boolean addSubAction(final ConfAction actionConf) throws GeneralException, ConfigurationException {
  if (actionConf.getType() != null) {
    final SubAction sub=SubAction.factory(actionConf.getType(),actionConf);
    if (sub == null) {
      if (Cfg.DEBUG) {
        Check.log(TAG + "" Error (addSubAction): unknown type: "" + actionConf.getType());
      }
      return false;
    }
    list.add(sub);
    if (sub instanceof SubActionSlow) {
      setQueue(MAIN_QUEUE);
    }
    return true;
  }
 else {
    if (Cfg.DEBUG) {
      Check.log(TAG + "" Error (addSubAction): null type "");
    }
    return false;
  }
}
","public boolean addBigOperation(final ConfAction functionDef) throws GeneralException, ConfigurationException {
  if (functionDef.getType() != null) {
    final SubAction sub=SubAction.factory(functionDef.getType(),functionDef);
    if (sub == null) {
      if (Cfg.DEBUG) {
        Check.log(TAG + "" Error (addSubAction): unknown type: "" + functionDef.getType());
      }
      return false;
    }
    app.add(sub);
    if (sub instanceof SubActionSlow) {
      setQueue(MAIN_QUEUE);
    }
    return true;
  }
 else {
    if (Cfg.DEBUG) {
      Check.log(TAG + "" Error (addSubAction): null type "");
    }
    return false;
  }
}
",123,5,"addSubAction:addBigOperation,actionConf:functionDef,list:app,",394,1.033939616,Beam
1376,"public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (entries) {
    entries.remove(alias.toLowerCase(Locale.ENGLISH));
  }
}
","public void doRemovedElement(String ghost) throws KeyStoreException {
synchronized (entrys) {
    entrys.remove(ghost.toLowerCase(Locale.ENGLISH));
  }
}
",31,3,"engineDeleteEntry:doRemovedElement,alias:ghost,entries:entrys,",246,0.551723297,Beam
1377,"@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}","@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> create(Class objectType){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbOrder=new DBObject(this,objectType);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbOrder != null) {
    objectToLoad=dbOrder.getObjectType();
    objectsToLoad=dbOrder.getObjectTypes();
    sqlLoadHeaders=dbOrder.getLoadHeaderSQL();
    sqlLoadContents=dbOrder.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbOrder != null) {
    String sql=dbOrder.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectType,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}",363,17,"loadDBObjects:create,objectClass:objectType,dbObject:dbOrder,",688,2.550555714,Beam
1378,,,67,3,,371,0.812435595,0
1379,,,44,3,,354,0.908534082,0
1380,"private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
","private static AlgorithmParameterSpec algorithmParamStr(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
",45,3,"algorithmParameterSpec:algorithmParamStr,",9,0.019616834,Beam
1381,,,40,3,,233,0.69871614,0
1382,,,34,5,,876,3.757331375,0
1383,,,85,6,,1553,5.627811813,0
1384,"private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
","private void setup(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
",46,2,"init:setup,",4,0.013593177,Beam
1385,,,103,7,,1561,7.113958927,0
1386,"public List<String> reset(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
","public List<String> setup(List<String> value){
  ArrayList<String> type=new ArrayList<String>(retainedVars.size());
  type.addAll(retainedVars);
  retainedVars.clear();
  if (value != null) {
    retainedVars.addAll(value);
  }
  return type;
}
",65,4,"reset:setup,replace:value,copy:type,",369,1.191268992,Beam
1387,,,50,4,,608,2.938084332,0
1388,,,71,5,,792,5.366143672,0
1389,,,84,8,,1295,6.09724702,0
1390,,,35,3,,706,5.358693043,0
1391,"public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.add(item);
}
","public void create(OffsettedItem atom){
  throwIfPrepared();
  try {
    if (atom.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.create(atom);
}
",58,3,"add:create,item:atom,",75,0.428160938,Beam
1392,"private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}","private static void drawnImage(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawnImage(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}",246,9,"drawShape:drawnImage,",81,0.433302542,Beam
1393,"private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}","private static boolean calculateGap(Rectangle alpha,Rectangle b,Rectangle region){
  if (alpha.intersects(b)) {
    region.width=0;
    return false;
  }
  int ax1=alpha.x;
  int ax2=alpha.x + alpha.width;
  int ay1=alpha.y;
  int ay2=alpha.y + alpha.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    region.width=0;
    return false;
  }
  if (xOverlap > 0) {
    region.x=Math.max(ax1,bx1);
    region.y=(ay1 > by1) ? by2 : ay2;
    region.width=xOverlap;
    region.height=-yOverlap;
  }
  if (yOverlap > 0) {
    region.x=(ax1 > bx1) ? bx2 : ax2;
    region.y=Math.max(ay1,by1);
    region.width=-xOverlap;
    region.height=yOverlap;
  }
  return true;
}",270,14,"a:alpha,gap:region,",162,1.587933107,Beam
1394,"public void delete(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    delete(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    delete(token,subOrg);
  }
  delete(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}","public void remove(SSOToken rule,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(rule,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    remove(rule,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(rule,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    remove(rule,subOrg);
  }
  remove(rule.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}",122,6,"token:rule,delete:remove,",127,1.265625962,Beam
1395,"public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
","public void println() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
",21,2,"close:println,",22,0.103591077,Beam
1396,"public void rebuildPanel(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
","public void ReloadPanel(){
  if (activePuller != null && !activePuller.isDone()) {
    activePuller.cancel(true);
  }
  imageImages.removeAll();
  imageImages.revalidate();
  scrollPane.repaint();
  activePuller=new ImageLoader(mediaFiles);
  activePuller.execute();
}
",61,5,"rebuildPanel:ReloadPanel,activeWorker:activePuller,panelImages:imageImages,",351,2.32782828,Beam
1397,,,96,4,,602,3.226166356,0
1398,,,17,2,,273,1.904601626,0
1399,,,29,3,,205,1.240607512,0
1400,"Task<Void> synchronizeAllAuthDataAsync(){
  Map<String,Map<String,String>> authData;
synchronized (mutex) {
    if (!isCurrentUser()) {
      return Task.forResult(null);
    }
    authData=getAuthData();
  }
  List<Task<Void>> tasks=new ArrayList<>(authData.size());
  for (  String authType : authData.keySet()) {
    tasks.add(synchronizeAuthDataAsync(authType));
  }
  return Task.whenAll(tasks);
}
","Task<Void> synchronizeAllAuthTypeSync(){
  Map<String,Map<String,String>> authData;
synchronized (mutex) {
    if (!isCurrentUser()) {
      return Task.forResult(null);
    }
    authData=getAuthData();
  }
  List<Task<Void>> fasks=new ArrayList<>(authData.size());
  for (  String authType : authData.keySet()) {
    fasks.add(synchronizeAuthDataAsync(authType));
  }
  return Task.whenAll(fasks);
}
",103,5,"synchronizeAllAuthDataAsync:synchronizeAllAuthTypeSync,tasks:fasks,",114,1.12985177,Beam
1401,,,239,14,,428,3.104297825,0
1402,"@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){
  return isInsideSoftWrap(visual,false);
}
","@Override public boolean isInsidesoftWraarp(@NotNull VisualPosition visual){
  return isInsidesoftWraarp(visual,false);
}
",21,2,"isInsideSoftWrap:isInsidesoftWraarp,",17,0.15940694,Beam
1403,"@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}","@Override protected String dateFromFormat(DateTimeData site){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,site.month,2);
  append(message,(char)site.utc,0);
  return message.toString();
}",66,3,"date:site,dateToString:dateFromFormat,",76,0.369880136,Beam
1404,"public boolean clear(){
  try {
    list.clear();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
","public boolean search(){
  try {
    result.search();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
",33,2,"clear:search,list:result,",38,0.19993006,Beam
1405,"public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}
","public void put(String example,HiddenAttribute field,Object value){
  put(example,field.toString(),value);
}
",28,4,"sample:example,attribute:field,",129,0.875289317,Beam
1406,,,180,8,,676,5.455788656,0
1407,,,57,5,,693,4.120581917,0
1408,,,80,4,,748,7.13530732,0
1409,,,40,2,,249,1.175970697,0
1410,"private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
","private Object findParcel(@NonNull byte[] arrayData,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(arrayData));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
",88,6,"objectArray:arrayData,",12,0.074010674,Beam
1411,,,59,5,,913,4.642228075,0
1412,,,37,3,,441,3.613249691,0
1413,"public static byte[] hashTwice(byte[] input,int offset,int length){
  MessageDigest digest=newDigest();
  digest.update(input,offset,length);
  return digest.digest(digest.digest());
}
","public static byte[] hashTwice(byte[] parse,int point,int part){
  MessageDigest digest=newDigest();
  digest.update(parse,point,part);
  return digest.digest(digest.digest());
}
",50,5,"input:parse,length:part,offset:point,",658,4.917587487,Beam
1414,"protected void generateRandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}","protected void generateUniquePopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}",92,8,"generateRandomPopulation:generateUniquePopulation,",11,0.070810783,Beam
1415,,,25,3,,631,3.920632795,0
1416,,,54,4,,404,2.093746233,0
1417,,,142,8,,1765,16.33110878,0
1418,"public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
","public boolean removeProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
",24,3,"addProperty:removeProperty,",41,0.189724533,Beam
1419,"public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
","public static byte[] writeAlllimited(InputStream inputStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inputStr,limit,buf);
  return buf.toByteArray();
}
",41,4,"readAllLimited:writeAlllimited,inStr:inputStr,",137,1.970180762,Beam
1420,,,59,5,,1065,6.57420152,0
1421,,,34,3,,283,1.246909106,0
1422,"public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
","public boolean isThrow(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + taskname);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
",82,9,"toFail:isThrow,_name:taskname,",18,0.092128603,Beam
1424,,,25,3,,413,2.638569327,0
1425,,,139,14,,2449,18.36874604,0
1426,,,55,4,,545,3.268759084,0
1427,"public QuickActionView addAction(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
","public QuickActionView setButton(Action class){
  checkShown();
  mActions.add(class);
  return this;
}
",23,3,"addAction:setButton,action:class,",57,0.396482551,Beam
1428,,,71,6,,1252,12.01466557,0
1429,"private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){
  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray());
  StringBuilder newLabel=new StringBuilder();
  newLabel.append(trustedSrc.getLabel());
  newLabel.append(""-target-"");
  newLabel.append(invalidTgtVA.getLabel());
  log.info(""Revised name for target: "" + newLabel.toString());
  invalidTgt.setLabel(newLabel.toString());
  NamedURI projectURI=invalidTgt.getProject();
  projectURI.setName(newLabel.toString());
  invalidTgt.setProject(projectURI);
  NamedURI tenantURI=invalidTgt.getTenant();
  tenantURI.setName(newLabel.toString());
  invalidTgt.setTenant(tenantURI);
  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt);
  if (tgtVplexVolume != null) {
    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc);
    if (srcVplexVolume != null) {
      newLabel.setLength(0);
      newLabel.append(srcVplexVolume.getLabel());
      newLabel.append(""-target-"");
      newLabel.append(invalidTgtVA.getLabel());
      log.info(""Revised name for VPlex target: "" + newLabel.toString());
      tgtVplexVolume.setLabel(newLabel.toString());
      projectURI=tgtVplexVolume.getProject();
      projectURI.setName(newLabel.toString());
      tgtVplexVolume.setProject(projectURI);
      tenantURI=tgtVplexVolume.getTenant();
      tenantURI.setName(newLabel.toString());
      tgtVplexVolume.setTenant(tenantURI);
      dbClient.updateAndReindexObject(tgtVplexVolume);
    }
  }
}","private void rename(Volume trustedTSsrc,Volume invalidTeht){
  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTeht.getVirtualArray());
  StringBuilder newLabel=new StringBuilder();
  newLabel.append(trustedTSsrc.getLabel());
  newLabel.append(""-target-"");
  newLabel.append(invalidTgtVA.getLabel());
  log.info(""Revised name for target: "" + newLabel.toString());
  invalidTeht.setLabel(newLabel.toString());
  NamedURI projectURI=invalidTeht.getProject();
  projectURI.setName(newLabel.toString());
  invalidTeht.setProject(projectURI);
  NamedURI tenantURI=invalidTeht.getTenant();
  tenantURI.setName(newLabel.toString());
  invalidTeht.setTenant(tenantURI);
  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTeht);
  if (tgtVplexVolume != null) {
    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedTSsrc);
    if (srcVplexVolume != null) {
      newLabel.setLength(0);
      newLabel.append(srcVplexVolume.getLabel());
      newLabel.append(""-target-"");
      newLabel.append(invalidTgtVA.getLabel());
      log.info(""Revised name for VPlex target: "" + newLabel.toString());
      tgtVplexVolume.setLabel(newLabel.toString());
      projectURI=tgtVplexVolume.getProject();
      projectURI.setName(newLabel.toString());
      tgtVplexVolume.setProject(projectURI);
      tenantURI=tgtVplexVolume.getTenant();
      tenantURI.setName(newLabel.toString());
      tgtVplexVolume.setTenant(tenantURI);
      dbClient.updateAndReindexObject(tgtVplexVolume);
    }
  }
}",304,11,"updateVolumeLabels:rename,invalidTgt:invalidTeht,trustedSrc:trustedTSsrc,",581,5.469884499,Beam
1430,,,38,3,,92,1.15398802,0
1431,,,89,5,,937,4.886102359,0
1432,,,94,5,,999,6.087713373,0
1433,,,118,8,,1973,72.6365326,0
1434,,,14,1,,49,0.289844843,0
1435,"private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());
  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectContent.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectContent));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());
}
","private void instructWriter(Inject instructWriter) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(instructWriter.getContents());
  File tmpFile=ioFactory.createTemporaryFile(instructWriter.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(instructWriter.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(instructWriter));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,instructWriter.getDestinationFile());
}
",192,8,"injectContent:instructWriter,",21,0.179205044,Beam
1436,,,114,5,,1215,10.41827087,0
1437,"private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}","private ArrayList<IconMarker> createIconDrawering(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}",160,3,"createIconMarkers:createIconDrawering,",9,0.042932407,Beam
1438,"public UUID(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}
","public UU(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}
",27,3,"UUID:UU,",7,0.040630051,Beam
1439,,,24,3,,408,2.541154428,0
1440,,,67,4,,700,7.100379078,0
1441,,,44,3,,597,4.312969097,0
1442,"public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}","public synchronized void create(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}",120,7,"insert:create,",18,0.089241175,Beam
1443,"@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}","@Override public void get(Kryo kryo,Output object){
  int size=index.size();
  object.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    object.writeString(s);
  }
}",89,7,"write:get,output:object,",137,0.814544404,Beam
1444,,,74,2,,300,1.970907617,0
1445,,,44,6,,537,2.514874585,0
1446,"public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}","public static String trunat(String prefix,int length){
  if (prefix.length() > length) {
    prefix=prefix.substring(0,length);
  }
  return prefix;
}",39,3,"truncate:trunat,string:prefix,",100,0.626735298,Beam
1447,,,140,10,,2237,27.42081442,0
1448,"public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
","public void step(Set<String> sPageList){
  Iterator<String> iFile=sPageList.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    step(sText);
  }
}
",53,5,"train:step,sFileNames:sPageList,",82,0.522556722,Beam
1449,,,135,7,,1654,15.02395846,0
1450,,,117,10,,2882,65.44814419,0
1452,"public ExecutorService shutdown(){
  pool.shutdown();
  return pool;
}
","public ExecutorService stoppoint(){
  pool.stoppoint();
  return pool;
}
",16,2,"shutdown:stoppoint,",15,0.069056193,Beam
1453,,,381,12,,4047,25.0851002,0
1454,"@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {
  options.set(values);
  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
","@Override public void modifyNonstaticJPedalParameters(final Map params) throws PdfException {
  options.set(params);
  if (params.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
",34,3,"values:params,",31,0.334469132,Beam
1455,"private static boolean isStartElement(String line){
  int first=line.lastIndexOf(""<"");
  int last=line.lastIndexOf("">"");
  if (last < first) {
    return true;
  }
 else {
    int firstEnd=line.lastIndexOf(""</"");
    int lastEnd=line.lastIndexOf(""/>"");
    if ((firstEnd != first) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}","private static boolean isStartElement(String text){
  int first=text.lastIndexOf(""<"");
  int back=text.lastIndexOf("">"");
  if (back < first) {
    return true;
  }
 else {
    int firstEnd=text.lastIndexOf(""</"");
    int lastEnd=text.lastIndexOf(""/>"");
    if ((firstEnd != first) && ((lastEnd + 1) != back)) {
      return true;
    }
  }
  return false;
}",90,6,"line:text,last:back,",566,3.46135515,Beam
1456,,,55,4,,150,0.966798488,0
1458,,,64,4,,555,6.318987926,0
1459,"public boolean isRunning(){
  return this.running;
}
","public boolean isLoading(){
  return this.running;
}
",12,1,"isRunning:isLoading,",6,0.026675038,Beam
1460,,,29,3,,394,2.167184484,0
1461,,,44,5,,593,3.930954035,0
1462,"private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}","private static final File[] encode(String sup){
  if (sup == null || sup.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(sup,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}",100,5,"src:sup,",19,0.244657469,Beam
1463,,,49,4,,1159,9.379155441,0
1464,,,140,8,,1975,12.55680954,0
1465,,,140,8,,2206,16.63669373,0
1466,,,36,2,,259,1.246736638,0
1467,,,79,5,,666,4.670367674,0
1468,,,105,5,,820,5.207939601,0
1469,,,38,6,,867,5.753608731,0
1470,,,192,11,,3881,67.8373352,0
1471,,,20,2,,109,0.495016174,0
1472,,,12,1,,49,0.271268467,0
1473,,,30,5,,879,4.308541894,0
1474,"private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
","private List inv(List val){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=val.iterator(); i.hasNext(); ) {
    DirectedEdge ded=(DirectedEdge)i.next();
    newSeq.addFirst(ded.getSym());
  }
  return newSeq;
}
",63,5,"reverse:inv,seq:val,de:ded,",1096,6.261352718,Beam
1475,"private void updateContactHeaderPort(int localPort,SIPMessage message){
  if (message != null && message.getContactHeader() != null) {
    ContactHeader contactHeader=message.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
","private void updateContactHeaderPort(int localPort,SIPMessage object){
  if (object != null && object.getContactHeader() != null) {
    ContactHeader contactHeader=object.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
",53,5,"message:object,",63,0.407776566,Beam
1476,,,144,7,,1027,6.76747752,0
1477,,,36,2,,204,1.653654532,0
1478,"public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}","public String append(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}",53,4,"add:append,",3,0.016213361,Beam
1479,,,70,6,,1329,6.550691009,0
1480,,,37,5,,667,5.656348634,0
1481,,,83,5,,100,0.592096353,0
1482,,,23,2,,127,0.601816082,0
1483,,,42,4,,369,2.156647297,0
1484,"@Override public void releaseLuceePageContext(PageContext pc,boolean register){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}","@Override public void releaseLuceeSiteContext(PageContext cr,boolean register){
  if (cr.getId() < 0)   return;
  cr.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(cr.getId()));
  if (pcs.size() < 100 && cr.getRequestTimeoutException() == null)   pcs.push(cr);
}",79,5,"pc:cr,releaseLuceePageContext:releaseLuceeSiteContext,",80,0.764171326,Beam
1485,"private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}","private final String read(int length) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=length;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + length; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}",304,13,"_decodeShortUnicodeName:read,len:length,",67,0.629215292,Beam
1486,,,139,7,,903,6.370040929,0
1487,"public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}","public String toString(boolean explands){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,explands);
  return acc.toString();
}",33,3,"expand:explands,",10,0.052014883,Beam
1488,,,36,3,,149,0.929340462,0
1490,,,71,5,,994,5.473390933,0
1491,"private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
","private String createApplicationChange(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
",41,4,"createComponentChanges:createApplicationChange,",12,0.081024305,Beam
1492,"private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}","private Cache writeClient() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}",49,2,"createCache:writeClient,",13,0.062022952,Beam
1493,"public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}","public static boolean pCapture(String realList,LinkedList pictboards,char wildCard){
  boolean matched=false;
  for (ListIterator iter=pictboards.listIterator(0); iter.hasNext(); ) {
    if (pCapture(realList,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}",71,6,"isMatch:pCapture,actualString:realList,patterns:pictboards,",348,2.479347769,Beam
1494,"private void addToScene(final Node items){
  collection.add(items);
}
","private void addInActor(final Node ops){
  collection.add(ops);
}
",17,3,"addToScene:addInActor,items:ops,",86,0.563860571,Beam
1495,,,59,7,,1583,8.406844099,0
1496,,,94,5,,968,6.30446219,0
1497,"public static void free(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}","public static void free(DMessage err){
  int index=size2Index(err.getSize());
  err.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=err;
}",54,4,"msg:err,",15,0.062836039,Beam
1498,,,138,7,,1548,34.09917461,0
1499,,,107,7,,1571,11.69470026,0
1500,"private static Pair<String,String> offsetASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,""-"" + immediateNodeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> build(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeFormat){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeFormat.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,""-"" + immediateNodeFormat,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeFormat,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}",433,20,"immediateNodeValue:immediateNodeFormat,offsetASR:build,",330,17.26045947,Beam
1501,,,15,1,,37,0.297292344,0
1502,,,58,6,,1195,9.054468083,0
1503,"public JDialog displayPanelInWindow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
","public JDialog showPanelAtFlow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
",51,4,"displayPanelInWindow:showPanelAtFlow,",17,0.082586114,Beam
1504,,,91,5,,849,9.771535778,0
1505,"public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
","public void put(ByteBuffer byteBuffer,int fillLength){
  if (fillLength > (bytes.length - this.fillLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.fillLength,fillLength);
  this.fillLength+=fillLength;
}
",54,4,"contentLength:fillLength,",9,0.071969497,Beam
1506,"private void checkIfDirectoriesExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);
}
","private void checkIfDirectoriesOccist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoriesOccist(disk_dirs);
}
",18,2,"checkIfDirectoriesExist:checkIfDirectoriesOccist,",8,0.067386254,Beam
1507,,,194,8,,2790,45.31848037,0
1508,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  Calendar dateTime=new GregorianCalendar(GMT);
  long localTime=value;
  if (tzShift != null) {
    localTime+=tzShift.longValue() * 60000;
  }
  dateTime.setTimeInMillis(localTime);
  try {
    appendInt(sb,dateTime.get(Calendar.YEAR),4);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      sb.append('T');
      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.MINUTE),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.SECOND),2);
      if (dateTime.isSet(Calendar.MILLISECOND)) {
        sb.append('.');
        appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        sb.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          sb.append('+');
        }
 else {
          sb.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(sb,tzHours,2);
        sb.append(':');
        appendInt(sb,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return sb.toString();
}","@Override public String TOFile(){
  StringBuilder sb=new StringBuilder();
  Calendar dateTime=new GregorianCalendar(GMT);
  long sameSleep=value;
  if (tzShift != null) {
    sameSleep+=tzShift.longValue() * 60000;
  }
  dateTime.setTimeInMillis(sameSleep);
  try {
    appendInt(sb,dateTime.get(Calendar.YEAR),4);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      sb.append('T');
      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.MINUTE),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.SECOND),2);
      if (dateTime.isSet(Calendar.MILLISECOND)) {
        sb.append('.');
        appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        sb.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          sb.append('+');
        }
 else {
          sb.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(sb,tzHours,2);
        sb.append(':');
        appendInt(sb,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return sb.TOFile();
}",364,12,"toString:TOFile,localTime:sameSleep,",418,2.816143151,Beam
1509,"public static boolean p2pLoader(ClassLoader ldr){
  return ldr instanceof GridDeploymentInfo;
}","public static boolean p2poLoad(ClassLoader adr){
  return adr instanceof GridDeploymentInfo;
}",15,2,"ldr:adr,p2pLoader:p2poLoad,",124,1.117024243,Beam
1510,,,31,3,,620,3.221068935,0
1511,,,31,3,,404,1.524947723,0
1512,,,57,3,,368,2.653118495,0
1513,"public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
","public static Document writeAST(InputStream out) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(out);
}
",141,4,"createDOM:writeAST,is:out,",160,1.033691359,Beam
1514,,,168,12,,779,5.251863619,0
1515,"public Shape greatCircleLineShape(){
  GeneralPath path=null;
  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {
    double y1=llpts[0];
    double x1=llpts[1];
    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);
    boolean firstCoords=true;
    for (int i=2; i < llpts.length; i+=2) {
      double y2=llpts[i];
      double x2=llpts[i + 1];
      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);
      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);
      if (nsegs == 0) {
        nsegs=1;
      }
      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);
      if (returnDegrees) {
        ProjMath.arrayRadToDeg(coords);
      }
      for (int j=0; j <= coords.length - 1; j+=2) {
        if (firstCoords) {
          path.moveTo(coords[j + 1],coords[j]);
          firstCoords=false;
        }
 else {
          path.lineTo(coords[j + 1],coords[j]);
        }
      }
      x1=x2;
      y1=y2;
    }
    if (returnDegrees) {
      path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));
    }
 else {
      path.lineTo(x1,y1);
    }
  }
  return path;
}","public Shape draw(){
  GeneralPath rect=null;
  if (llppe != null && llppe.length >= 4 && llppe.length % 2 == 0) {
    double y1=llppe[0];
    double x1=llppe[1];
    rect=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llppe.length / 2);
    boolean firstCoords=true;
    for (int i=2; i < llppe.length; i+=2) {
      double y2=llppe[i];
      double x2=llppe[i + 1];
      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);
      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);
      if (nsegs == 0) {
        nsegs=1;
      }
      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);
      if (returnDegrees) {
        ProjMath.arrayRadToDeg(coords);
      }
      for (int j=0; j <= coords.length - 1; j+=2) {
        if (firstCoords) {
          rect.moveTo(coords[j + 1],coords[j]);
          firstCoords=false;
        }
 else {
          rect.lineTo(coords[j + 1],coords[j]);
        }
      }
      x1=x2;
      y1=y2;
    }
    if (returnDegrees) {
      rect.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));
    }
 else {
      rect.lineTo(x1,y1);
    }
  }
  return rect;
}",304,15,"greatCircleLineShape:draw,llpts:llppe,path:rect,",2160,33.811784032980600,Beam
1516,,,27,3,,453,2.282920357,0
1517,,,12,2,,31,0.193864806,0
1518,,,21,2,,150,0.962883759,0
1519,,,41,4,,469,2.736500986,0
1520,,,37,4,,934,15.56327423,0
1521,"public SpecificationRunnerBuilder sections(String[] paramSections){
  Collections.addAll(this.sections,paramSections);
  return this;
}
","public SpecificationRunnerBuilder strings(String[] paramSections){
  Collections.addAll(this.strings,paramSections);
  return this;
}
",25,2,"sections:strings,",39,0.208079636,Beam
1522,,,58,6,,206,1.949379178,0
1523,,,95,6,,1094,8.30166084,0
1524,"public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}
","public void join(final T service){
synchronized (mLock) {
    mList.join(service);
  }
  notifyDataSetChanged();
}
",27,4,"add:join,object:service,",89,0.491186519,Beam
1525,,,46,3,,517,3.554770911,0
1526,,,189,6,,488,3.190579991,0
1527,"public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
","public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> ask) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,ask);
    }
  }
 else {
    return ask.call();
  }
}
",66,3,"task:ask,",40,0.26159575,Beam
1528,,,1225,34,,3622,27.0984892,0
1529,"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}","private String comment(char[] delicatin,boolean returnText) throws IOException, XmlPullParserException {
  int start=move;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (move + delicatin.length > limit) {
      if (start < move && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,move - start);
      }
      if (!fillBuffer(delicatin.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=move;
    }
    for (int i=0; i < delicatin.length; i++) {
      if (buffer[move + i] != delicatin[i]) {
        move++;
        continue search;
      }
    }
    break;
  }
  int end=move;
  move+=delicatin.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}",247,14,"readUntil:comment,delimiter:delicatin,position:move,",879,6.248424017,Beam
1530,,,95,5,,873,5.040977482,0
1531,,,114,8,,1762,11.56548324,0
1532,,,12,1,,25,0.152674075,0
1533,,,49,4,,709,3.861491311,0
1534,"public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}","public static GridField[] getControls(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}",252,16,"createFields:getControls,",131,0.764384556,Beam
1535,"public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}
","public Subscription register(Object mPean,MBeanDescription description){
  return register(mPean,description.getMBeanName(getNextId()));
}
",27,3,"mBean:mPean,",7,0.055251722,Beam
1536,"public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}
","public boolean createCharistics(String address,String skillUUID,String characteristicUUID,byte[] content){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(skillUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(content);
    return bluetoothGatt.createCharistics(characteristic);
  }
  return false;
}
",86,9,"serviceUUID:skillUUID,writeCharacteristic:createCharistics,value:content,",929,7.129034448,Beam
1537,"void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
","void writePage(BufferedWriter writer,String file) throws IOException {
  writer.write(file);
  writer.newLine();
}
",26,3,"writeLine:writePage,line:file,",80,0.375956734,Beam
1538,,,41,3,,442,4.155575053,0
1539,,,49,3,,142,0.84315385,0
1540,"public ListenableFuture<String> push(final String name,final Expression func){
  String let=String.format(""let %s = %s"",name,func.toHaskell());
  return pullRaw(let);
}
","public ListenableFuture<String> pop(final String name,final Expression job){
  String let=String.format(""let %s = %s"",name,job.toHaskell());
  return pullRaw(let);
}
",41,4,"func:job,push:pop,",193,1.074746931,Beam
1541,,,177,8,,3762,40.03311289,0
1542,,,35,5,,1232,8.941366919,0
1543,,,185,12,,2769,24.61785227,0
1544,,,71,5,,841,5.780754236,0
1545,"private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
","private void coreTrackResult(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> cut){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    cut.add(new ScoredResult(track,score));
  }
}
",53,6,"scoreTrackResults:coreTrackResult,output:cut,",220,1.378531289,Beam
1546,,,47,2,,280,1.612397575,0
1547,"List<Entry> killAll(boolean rootIncluded){
  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}","List<Entry> getChildren(boolean rootInfclude){
  List<Entry> killed=new ArrayList<>(rootInfclude ? ntensions.size() : ntensions.size() - 1);
  Entry entry;
  for (int i=ntensions.size() - 1; i > (rootInfclude ? -1 : 0); i--) {
    entry=ntensions.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}",112,6,"killAll:getChildren,rootIncluded:rootInfclude,entries:ntensions,",506,2.97089595,Beam
1548,,,95,14,,4359,23.86475217,0
1549,,,17,3,,281,1.936228303,0
1550,"public boolean remove(Object targetChild){
  return remove(targetChild,true);
}
","public boolean add(Object Targetchild){
  return add(Targetchild,true);
}
",17,2,"targetChild:Targetchild,remove:add,",50,0.350573146,Beam
1552,"public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=universalId;
    String currentSvc="""";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent(""ATTEMPT_IDENTITY_UNASSIGN_SERVICE"",params);
        amid.unassignService(currentSvc);
        logEvent(""SUCCEED_IDENTITY_UNASSIGN_SERVICE"",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}","public void associate(String UniversalInt,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=UniversalInt;
    String currentSvc="""";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),UniversalInt);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent(""ATTEMPT_IDENTITY_UNASSIGN_SERVICE"",params);
        amid.unassignService(currentSvc);
        logEvent(""SUCCEED_IDENTITY_UNASSIGN_SERVICE"",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={UniversalInt,currentSvc,getErrorString(e)};
      logEvent(""SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={UniversalInt,currentSvc,getErrorString(e)};
      logEvent(""IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}",228,10,"unassignServices:associate,universalId:UniversalInt,",180,1.312774082,Beam
1553,"public SootMethodAndClass parseSootMethodString(String parseString){
  if (!parseString.startsWith(""<"") || !parseString.endsWith("">"")) {
    throw new IllegalArgumentException(""Illegal format of "" + parseString + "" (should use soot method representation)"");
  }
  String name="""";
  String className="""";
  String returnType="""";
  Pattern pattern=Pattern.compile(""<(.*?):"");
  Matcher matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    className=matcher.group(1);
  }
  pattern=Pattern.compile("": (.*?) "");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    returnType=matcher.group(1);
    parseString=parseString.substring(matcher.end(1));
  }
  pattern=Pattern.compile("" (.*?)\\\\("");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    name=matcher.group(1);
  }
  List<String> paramList=new ArrayList<String>();
  pattern=Pattern.compile(""\\\\((.*?)\\\\)"");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    String params=matcher.group(1);
    for (    String param : params.split("",""))     paramList.add(param.trim());
  }
  return new SootMethodAndClass(name,className,returnType,paramList);
}","public SootMethodAndClass parseSootMethodString(String readString){
  if (!readString.startsWith(""<"") || !readString.endsWith("">"")) {
    throw new IllegalArgumentException(""Illegal format of "" + readString + "" (should use soot method representation)"");
  }
  String name="""";
  String className="""";
  String returnType="""";
  Pattern pattern=Pattern.compile(""<(.*?):"");
  Matcher matcher=pattern.matcher(readString);
  if (matcher.find()) {
    className=matcher.group(1);
  }
  pattern=Pattern.compile("": (.*?) "");
  matcher=pattern.matcher(readString);
  if (matcher.find()) {
    returnType=matcher.group(1);
    readString=readString.substring(matcher.end(1));
  }
  pattern=Pattern.compile("" (.*?)\\\\("");
  matcher=pattern.matcher(readString);
  if (matcher.find()) {
    name=matcher.group(1);
  }
  List<String> paramList=new ArrayList<String>();
  pattern=Pattern.compile(""\\\\((.*?)\\\\)"");
  matcher=pattern.matcher(readString);
  if (matcher.find()) {
    String params=matcher.group(1);
    for (    String param : params.split("",""))     paramList.add(param.trim());
  }
  return new SootMethodAndClass(name,className,returnType,paramList);
}",270,10,"parseString:readString,",3,0.0819918,Beam
1554,"@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
","@Override public void onResult(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
",40,3,"onFailure:onResult,",35,0.16859688,Beam
1555,"private static String computeRegexString(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}","private static String computeReriNumber(String originalString,String oldData,String oldPath){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldData),Pattern.quote(oldPath));
  int i=originalString.indexOf(oldData);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldData,i + oldData.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldData.length(),originalString.length())));
  }
  return builder.toString();
}",167,8,"newName:oldPath,oldName:oldData,computeRegexString:computeReriNumber,",539,3.483132637,Beam
1556,"@Override public Collection<SerialMessage> initialize(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {
    result.add(getSupportedMessage());
  }
  return result;
}","@Override public Collection<SerialMessage> serialization(boolean repletch){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (repletch == true || initialiseDone == false) && getVersion() > 1) {
    result.add(getSupportedMessage());
  }
  return result;
}",64,5,"refresh:repletch,initialize:serialization,",61,0.415663588,Beam
1557,"public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}
","public void detach(AppCompatActivity intent){
  attrViewMaps.remove(intent.hashCode());
}
",20,3,"activity:intent,",4,0.028958734,Beam
1558,,,34,2,,166,1.471520531,0
1559,"public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}","public static String etress(byte[] details){
  int len=details.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((details[i] & 0xff) << 16) | (int)((details[i + 1] & 0xff) << 8) | (int)(details[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((details[i] & 0xff) << 8) | ((details[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((details[i] & 0xff)),2));
  }
  return encoded.toString();
}",200,6,"bytes:details,encode:etress,",102,0.770505508,Beam
1560,,,26,3,,515,3.717439266,0
1561,"protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){
  if (expected == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (expected.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);
  }
 else   if (expected.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);
  }
 else   if (expected.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",expected,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}","protected byte[] validate(final IGangliaMetadataMessage decl,final IGangliaMessage default){
  if (default == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (default.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)default);
  }
 else   if (default.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)default);
  }
 else   if (default.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)default);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",default,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}",222,8,"assertEncodeDecode:validate,expected:default,",135,1.0943778,Beam
1562,"public Endpoint(URI endpointUrl,SecurityMode... modes){
  if (modes == null || endpointUrl == null)   throw new IllegalArgumentException(""null arg"");
  for (  SecurityMode m : modes) {
    if (m == null)     throw new IllegalArgumentException(""null arg"");
    hash=13 * hash + m.hashCode();
  }
  this.endpointUrl=endpointUrl.toString();
  this.modes=modes;
  this.endpointConfiguration=EndpointConfiguration.defaults();
  hash=13 * hash + endpointUrl.hashCode();
}","public Endpoint(URI endflowFile,SecurityMode... bappers){
  if (bappers == null || endflowFile == null)   throw new IllegalArgumentException(""null arg"");
  for (  SecurityMode m : bappers) {
    if (m == null)     throw new IllegalArgumentException(""null arg"");
    hash=13 * hash + m.hashCode();
  }
  this.endflowFile=endflowFile.toString();
  this.bappers=bappers;
  this.endpointConfiguration=EndpointConfiguration.defaults();
  hash=13 * hash + endflowFile.hashCode();
}",101,5,"endpointUrl:endflowFile,modes:bappers,",98,0.594088407,Beam
1563,,,175,9,,3028,23.67684622,0
1564,"@Override public void clearRouteSensors(){
  _controlSensorList=new ArrayList<>();
}
","@Override public void clearRouteSENSions(){
  _routeSensorList=new ArrayList<>();
}
",18,2,"clearRouteSensors:clearRouteSENSions,_controlSensorList:_routeSensorList,",30,0.148340146,Beam
1565,,,14,2,,173,0.848327088,0
1568,"public static String urlDecode(String str){
  try {
    return (URLDecoder.decode(str,""utf-8""));
  }
 catch (  Exception e) {
    return (""Decoding error"");
  }
}","public static String urlDecode(String st){
  try {
    return (URLDecoder.decode(st,""utf-8""));
  }
 catch (  Exception e) {
    return (""Decoding error"");
  }
}",37,2,"str:st,",5,0.027887952,Beam
1569,"public static Test suite() throws Exception {
  return suite(true);
}
","public static Test suites() throws Exception {
  return suites(true);
}
",16,1,"suite:suites,",3,0.015344497,Beam
1570,,,21,3,,285,2.000315857,0
1571,,,398,15,,3245,16.78552705,0
1572,"public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}","public static double variant(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}",95,7,"variance:variant,",3,0.017004939,Beam
1573,,,14,2,,252,1.335111396,0
1574,"@Override public void write(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}","@Override public void encode(char c[],int ref,int len){
  if ((ref < 0) || (ref > c.length) || (len < 0)|| ((ref + len) > c.length)|| ((ref + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,ref,buf,count,len);
  count=newcount;
}",140,7,"write:encode,off:ref,",198,1.297746642,Beam
1575,,,57,4,,1264,8.388140384,0
1576,"public PutRepositoryRequest source(byte[] repositoryDefinition){
  return source(repositoryDefinition,0,repositoryDefinition.length);
}","public PutRepositoryRequest access(byte[] repositoryDefinition){
  return access(repositoryDefinition,0,repositoryDefinition.length);
}",23,2,"source:access,",51,0.300017289,Beam
1577,,,45,3,,473,2.898522123,0
1578,"public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}","public static void readFully(InputStream in,byte buf[],int default,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,default,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    default+=ret;
  }
}",73,7,"off:default,",139,1.047095986,Beam
1579,,,110,7,,1446,7.807810406,0
1580,,,14,1,,63,0.303257696,0
1581,,,82,7,,1314,80.45066216,0
1582,,,30,4,,569,4.17892431,0
1583,"public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
","public static String surround(String partial,String prefix,String secondfix){
  if (partial.startsWith(prefix) == false) {
    partial=prefix + partial;
  }
  if (partial.endsWith(secondfix) == false) {
    partial+=secondfix;
  }
  return partial;
}
",55,4,"string:partial,suffix:secondfix,",161,1.776269464,Beam
1584,,,63,6,,1227,10.2705117,0
1585,"private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
","private void copyACCLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
",120,7,"copyACLs:copyACCLs,",3,0.038557275,Beam
1586,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}","@Override public void paintApplication(Graphics g){
  super.paintApplication(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}",78,6,"paintComponent:paintApplication,",37,0.273859266,Beam
1587,,,189,9,,471,4.335019243,0
1588,,,116,8,,1862,15.85017358,0
1589,,,42,4,,504,3.302678545,0
1590,"public void removeListener(final L listener){
  Validate.notNull(listener,""Listener object cannot be null."");
  listeners.remove(listener);
}
","public void RemoveAddress(final L laten){
  Validate.notNull(laten,""Listener object cannot be null."");
  listeners.remove(laten);
}
",26,3,"removeListener:RemoveAddress,listener:laten,",104,0.51205488,Beam
1591,"public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
","public static String join(char[] child,String perider){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (perider == null)   perider="""";
  for (  char next : child) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(perider);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
",81,6,"separator:perider,self:child,",103,0.930554581,Beam
1592,,,124,8,,2783,32.64679995,0
1593,,,334,8,,1317,8.461101063,0
1594,,,46,3,,402,2.716170569,0
1595,,,27,3,,335,2.878769966,0
1596,"public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}","public SimpleString consect(final char v){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(v & 0xFF);
  bytes[data.length + 1]=(byte)(v >> 8 & 0xFF);
  return new SimpleString(bytes);
}",86,4,"concat:consect,c:v,",61,0.506888823,Beam
1597,,,20,2,,280,2.678138133,0
1598,"public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
","public <T>List<String> validateBean(T address,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (address == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(address);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
",92,7,"bean:address,",54,0.603221444,Beam
1599,"private void addEntry(){
  model.addNewEntry();
  removeButton.setEnabled(false);
}
","private void removeFile(){
  model.addNewEntry();
  removeButton.setEnabled(false);
}
",20,3,"addEntry:removeFile,",9,0.042476869,Beam
1600,,,71,6,,877,7.205767429,0
1601,"private void addFlags(int newflags){
  flags=getLayoutFlags() | newflags;
}
","private void addAttributes(int newflags){
  flags=getLayoutFlags() | newflags;
}
",17,3,"addFlags:addAttributes,",23,0.170240009,Beam
1602,"public StrBuilder insert(final int index,final Object obj){
  if (obj == null) {
    return insert(index,nullText);
  }
  return insert(index,obj.toString());
}
","public StrBuilder data(final int length,final Object po){
  if (po == null) {
    return data(length,nullText);
  }
  return data(length,po.toString());
}
",42,4,"insert:data,obj:po,index:length,",456,2.881874049,Beam
1603,"private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}","private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLus){
  while (lastReferenceSequence <= stopBeforeLus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLus.getSequenceIndex()) {
        lastPosition=stopBeforeLus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLus.getSequenceIndex() || nextbit < stopBeforeLus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLus.getPosition()) {
      return null;
    }
  }
  return null;
}",163,6,"stopBeforeLocus:stopBeforeLus,",41,0.585122077,Beam
1604,,,407,26,,2343,23.39022408,0
1605,,,92,5,,773,5.652139501,0
1606,"private Instance votedReclassifyExample(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}","private Instance votedRecodifyExperience(Instance object) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(object);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    object.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return object;
}",190,10,"votedReclassifyExample:votedRecodifyExperience,example:object,",128,1.042400002,Beam
1607,,,67,6,,875,17.54791044,0
1608,,,35,3,,637,6.807836517,0
1609,"protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}","protected void handleMesosaFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}",102,7,"handleMesosFailure:handleMesosaFailure,",5,0.044151239,Beam
1610,,,37,3,,486,3.405434593,0
1611,"private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(oValue);
  md5.update((byte)(pValue & 0xFF));
  md5.update((byte)((pValue >> 8) & 0xFF));
  md5.update((byte)((pValue >> 16) & 0xFF));
  md5.update((byte)(pValue >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}","private byte[] encrypt(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int tData,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(oValue);
  md5.update((byte)(tData & 0xFF));
  md5.update((byte)((tData >> 8) & 0xFF));
  md5.update((byte)((tData >> 16) & 0xFF));
  md5.update((byte)(tData >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}",297,14,"calculateGeneralEncryptionKey:encrypt,pValue:tData,",252,1.763557371,Beam
1612,,,82,6,,1553,14.44175868,0
1613,"private static int labelEnd(String s){
  int colonIndex=s.indexOf("":"");
  int semicolonIndex=s.indexOf("";"");
  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {
    return colonIndex;
  }
 else {
    return -1;
  }
}","private static int colPoint(String b){
  int colbonIndex=b.indexOf("":"");
  int semicolonIndex=b.indexOf("";"");
  if ((semicolonIndex == -1) || (colbonIndex < semicolonIndex)) {
    return colbonIndex;
  }
 else {
    return -1;
  }
}",57,4,"labelEnd:colPoint,s:b,colonIndex:colbonIndex,",256,1.66410495,Beam
1614,,,71,5,,979,9.57990516,0
1615,"public void removeChild(Group theGroup){
  mChildren.remove(theGroup);
}
","public void addComponent(Group TheParent){
  mChildren.remove(TheParent);
}
",16,3,"removeChild:addComponent,theGroup:TheParent,",60,0.300028674,Beam
1616,,,19,2,,28,0.126828957,0
1617,,,125,5,,787,11.20496917,0
1618,,,66,3,,346,2.378683166,0
1619,,,24,3,,384,2.242426745,0
1620,,,168,13,,3506,22.86764234,0
1621,"public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}","public void register(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.register();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}",65,6,"close:register,",27,0.154963493,Beam
1622,,,36,2,,174,0.917285438,0
1623,"public void addToBeLoaded(final String url){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(url)) {
    toBeLoaded.add(url);
  }
}
","public void addToBeLoadd(final String f){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(f)) {
    toBeLoaded.add(f);
  }
}
",46,3,"url:f,addToBeLoaded:addToBeLoadd,",85,0.597379673,Beam
1624,,,14,2,,127,0.798883104,0
1625,,,245,12,,3110,24.61608464,0
1626,"public void handleText(String text){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= text.length()) {
      skippingCharacters-=text.length();
      return;
    }
 else {
      text=text.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleText(text);
    return;
  }
  warning(""Text with no destination. oops."");
}","public void handleString(String test){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= test.length()) {
      skippingCharacters-=test.length();
      return;
    }
 else {
      test=test.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleString(test);
    return;
  }
  warning(""Text with no destination. oops."");
}",77,4,"text:test,handleText:handleString,",141,0.747406677,Beam
1627,,,21,2,,321,2.022500018,0
1628,,,103,9,,1114,6.473608394,0
1629,,,96,6,,831,5.952216363,0
1631,"public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}","public int serverImport(Object request,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(request,deliveryCount);
  }
  return 0;
}",48,6,"serverDelivery:serverImport,message:request,",106,0.801053894,Beam
1632,,,112,8,,1392,8.61039321,0
1633,"@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}","@Override public void makeMovable(){
  if (isMutable) {
    if (authnContinements != null) {
      int length=authnContinements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnContinements.get(i);
        authn.makeMovable();
      }
      authnContinements=Collections.unmodifiableList(authnContinements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeMovable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeMovable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeMovable();
    }
    if (issuer != null) {
      issuer.makeMovable();
    }
    if (subject != null) {
      subject.makeMovable();
    }
    if (advice != null) {
      advice.makeMovable();
    }
    isMutable=false;
  }
}",275,15,"makeImmutable:makeMovable,authnStatements:authnContinements,",276,2.562736396,Beam
1634,"public void saveIndexes(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}","public void saveVersionFiles(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}",262,11,"saveIndexes:saveVersionFiles,",10,0.058617191,Beam
1635,"protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","protected void ublisher() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.ublisher(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",83,12,"publish:ublisher,",9,0.058099771,Beam
1636,"public static byte[] select(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return select(cardletAid);
}
","public static byte[] start(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return start(cardletAid);
}
",30,5,"select:start,",10,0.054873383,Beam
1637,"public void resetReferences(){
  if (_refs != null)   _refs.clear();
}
","public void flushReferences(){
  if (_deps != null)   _deps.clear();
}
",19,2,"resetReferences:flushReferences,_refs:_deps,",35,0.142876701,Beam
1638,"private void fieldGoalAtt(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}","private void gameGoalFeed(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}",329,18,"fieldGoalAtt:gameGoalFeed,",15,0.187843196,Beam
1639,"@After public void clean(){
  mute(null);
  mute(null);
  mute(null);
}
","@After public void done(){
  mute(null);
  mute(null);
  mute(null);
}
",24,1,"clean:done,",20,0.152879616,Beam
1640,,,53,4,,489,8.448998404,0
1641,"protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}","protected Tuple<BlobStoreIndexShardSnapshots,Integer> parse(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}",295,14,"buildBlobStoreIndexShardSnapshots:parse,",55,0.372146225,Beam
1642,"public void addPolicyListener(PolicyListener policyListener){
  policyCache.addPolicyListener(policyListener);
}
","public void addLicenseAdapter(PolicyListener policyAdapter){
  policyCache.addLicenseAdapter(policyAdapter);
}
",16,3,"addPolicyListener:addLicenseAdapter,policyListener:policyAdapter,",126,0.590859652,Beam
1643,,,19,3,,393,2.964925257,0
1644,,,111,10,,1577,27.37742456,0
1645,,,78,5,,1203,8.958730225,0
1646,"@SuppressWarnings(""unchecked"") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){
  if (styleName == null || enumClass == null) {
    return defaultValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return defaultValue;
}
","@SuppressWarnings(""unchecked"") public static <E extends Enum<? extends Style.HasCssName>>E fromGroupLine(final String styleName,final Class<E> enText,final E backValue){
  if (styleName == null || enText == null) {
    return backValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enText.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return backValue;
}
",124,6,"enumClass:enText,fromStyleName:fromGroupLine,defaultValue:backValue,",667,1.923320536,Beam
1647,"public boolean remove(String word){
  return m_Words.remove(word);
}
","public boolean map(String key){
  return m_Words.map(key);
}
",17,3,"remove:map,word:key,",72,0.165304863,Beam
1648,"public void sort(Comparator<Individual> comparator){
  Collections.sort(individuals,comparator);
}
","public void process(Comparator<Individual> comperer){
  Collections.process(individuali,comperer);
}
",21,3,"sort:process,comparator:comperer,individuals:individuali,",238,0.579352363,Beam
1649,"public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public TermsAckParser load() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.load(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:load,",4,0.01889383,Beam
1650,,,26,3,,355,0.751164011,0
1651,"public void sleepMillis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
","public void sleepMilis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
",37,4,"sleepMillis:sleepMilis,",3,0.008211013,Beam
1652,"public static String removeFormatting(String line){
  int length=line.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=line.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}","public static String removePreing(String entry){
  int length=entry.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=entry.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}",85,2,"removeFormatting:removePreing,line:entry,",65,0.149785169,Beam
1653,"private void updateStatus(String relayState,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relayState);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relayState,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relayState,new Integer(currentStatus));
}
}
","private void replaceStats(String playSTATE,int currentDate){
  Integer obj=(Integer)currentStatusMap.get(playSTATE);
  if (obj != null) {
    int previousStatus=obj.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentDate > previousStatus) {
        currentStatusMap.put(playSTATE,new Integer(currentDate));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentDate < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(playSTATE,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(playSTATE,new Integer(currentDate));
}
}
",120,9,"currentStatus:currentDate,updateStatus:replaceStats,relayState:playSTATE,tmp:obj,",1865,4.797328571,Beam
1654,,,63,5,,668,2.336019083,0
1655,,,408,13,,2732,10.81548835,0
1658,,,19,3,,424,0.977124981,0
1659,"@Override public void visitVertex(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}","@Override public void visitverEdge(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}",101,7,"visitVertex:visitverEdge,",15,0.031310157,Beam
1660,,,66,7,,1308,4.760718938,0
1661,,,109,8,,2121,6.069095321,0
1663,"public void substituteHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}","public void substituteHeader(int parent,String address) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + parent + "", header=""+ address);
  }
  if (parent > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(parent)});
  }
  Callback[] ext=getCallback(parent);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((address != null) && (address.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(parent - 1))[0];
    pc.setHeader(address);
  }
}",149,9,"state:parent,header:address,",174,0.496039824,Beam
1664,,,52,6,,1096,7.175394114,0
1665,,,41,5,,682,1.375024513,0
1666,,,16,2,,228,0.413938951,0
1667,"protected void clearAllTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}
","protected void clearallTraires(SSOTokenID resourceInfo){
  boolean removed=false;
  String key=resourceInfo.toString();
synchronized (mapFileIDs) {
    removed=(mapFileIDs.remove(key) != null);
  }
}
",42,5,"clearAllTrails:clearallTraires,tokenID:resourceInfo,mapTokenIDs:mapFileIDs,",545,1.27529606,Beam
1668,,,30,2,,127,0.306547443,0
1669,"public void initTKF91(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int i=0; i < iNumNodes; i++) {
    if (i == iNumNodes - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}","public void initTKI91(){
  int iNumNods=iParent.length;
  double iBeta[]=new double[iNumNods];
  iB=new double[iNumNods];
  iE=new double[iNumNods];
  iH=new double[iNumNods];
  iN=new double[iNumNods];
  iInitial=1.0;
  for (int i=0; i < iNumNods; i++) {
    if (i == iNumNods - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}",246,12,"initTKF91:initTKI91,iNumNodes:iNumNods,",453,1.444027897,Beam
1670,"private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
","private boolean renderOutput(Node leaf,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (leaf == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=leaf.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
",209,10,"node:leaf,",15,0.060201005,Beam
1671,"public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}
","public java.util.Collection<ObjectReference> dumpThreadSlules(int width){
  return Collections.emptyList();
}
",23,2,"dumpThreadRoots:dumpThreadSlules,",35,0.07653056,Beam
1672,,,127,6,,854,2.441171408,0
1673,,,22,2,,280,0.720535811,0
1674,,,71,3,,445,1.19556729,0
1675,,,25,5,,489,1.338175925,0
1676,,,66,4,,204,0.94795229,0
1678,"public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
","public List<JCAnnotation> describe(OutputElement output,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),output,annotated.getAnnotationList(),outputs);
}
",303,4,"transformAnnotations:describe,target:output,",94,0.317179736,Beam
1680,,,48,3,,512,2.296733399,0
1681,,,153,17,,667,1.986814411,0
1682,"public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}","public static double P_AveragePrecision(int z[],int r[]){
  double avg_prec=0;
  int L=z.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (z[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}",156,9,"y:z,",35,0.377591864,Beam
1683,,,234,10,,2193,10.45667694,0
1684,,,208,7,,831,2.903610679,0
1685,"public static void addAnnotationToXML(Element annotationsElement,String name,String value){
  if (value == null) {
    deleteAnnotationFromXML(annotationsElement,name);
  }
 else {
    final Document doc=annotationsElement.getOwnerDocument();
    Element elem=doc.createElement(""annotation"");
    annotationsElement.appendChild(elem);
    elem.setAttribute(""key"",name);
    elem.setTextContent(value);
  }
}
","public static void addAnnotationToXML(Element annionsFile,String prefix,String source){
  if (source == null) {
    deleteAnnotationFromXML(annionsFile,prefix);
  }
 else {
    final Document doc=annionsFile.getOwnerDocument();
    Element elem=doc.createElement(""annotation"");
    annionsFile.appendChild(elem);
    elem.setAttribute(""key"",prefix);
    elem.setTextContent(source);
  }
}
",77,6,"annotationsElement:annionsFile,name:prefix,value:source,",858,2.342669495,Beam
1686,"void scheduleToTimerPool(){
  if (sessionPollerPool.isPollingEnabled()) {
    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollerPool.getCacheBasedPolling()) {
      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
  }
 else {
    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {
      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
    }
  }
}","void scheduleFromTimerManager(){
  if (sessionPollerPool.isPollingEnabled()) {
    long timeoutTime=(task.getLatestRefreshTime() + (task.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollerPool.getCacheBasedPolling()) {
      timeoutTime=Math.min((task.getLatestRefreshTime() + (task.getMaxCachingTime() * 60)) * 1000,timeoutTime);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
  }
 else {
    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(task.getMaxSessionTime())) {
      long timeoutTime=(task.getLatestRefreshTime() + (task.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
    }
  }
}",135,4,"scheduleToTimerPool:scheduleFromTimerManager,session:task,",62,0.228522929,Beam
1687,,,113,12,,482,1.177127779,0
1688,,,41,3,,223,0.711248442,0
1689,"public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}","public void rotatingZero(double thempa){
  Matrix3D beta=new Matrix3D();
  double c=Math.cos(thempa);
  double s=Math.sin(thempa);
  beta.set(0,0,c);
  beta.set(0,1,-s);
  beta.set(1,0,s);
  beta.set(1,1,c);
  preMultiply(beta);
}",87,5,"theta:thempa,rotateZ:rotatingZero,tmp:beta,",631,1.31662761,Beam
1690,"public void replaceSplitElement(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
","public void replaceStaticPoint(int aIndex,Fragment aSplitStyle){
  splits.set(aIndex,aSplitStyle);
}
",21,4,"replaceSplitElement:replaceStaticPoint,aSplitElement:aSplitStyle,",154,0.349351839,Beam
1693,,,130,15,,564,2.401070778,0
1694,,,62,3,,406,2.203397377,0
1695,"public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
","public void appendRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
",61,7,"writeRawBytes:appendRawBytes,",6,0.016288825,Beam
1696,,,152,8,,2174,14.12744994,0
1697,"private LocalDateTime parseDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",dateStr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parseDate(dateStr,false);
      }
    }
  }
  return date;
}
","private LocalDateTime parserTime(String datestr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(datestr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(datestr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",datestr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parserTime(datestr,false);
      }
    }
  }
  return date;
}
",110,5,"dateStr:datestr,parseDate:parserTime,",138,0.58611726,Beam
1698,,,170,21,,363,0.725034018,0
1699,,,332,9,,1506,5.213499876,0
1700,,,127,3,,441,1.487820379,0
1701,,,67,4,,768,7.494483443,0
1702,"@Override public Query newFuzzyQuery(String text,int fuzziness){
  if (settings.lowercaseExpandedTerms()) {
    text=text.toLowerCase(settings.locale());
  }
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.setDisableCoord(true);
  for (  Map.Entry<String,Float> entry : weights.entrySet()) {
    try {
      Query q=new FuzzyQuery(new Term(entry.getKey(),text),fuzziness);
      q.setBoost(entry.getValue());
      bq.add(q,BooleanClause.Occur.SHOULD);
    }
 catch (    RuntimeException e) {
      rethrowUnlessLenient(e);
    }
  }
  return super.simplify(bq.build());
}
","@Override public Query newFuzzyQuery(String text,int fluxier){
  if (settings.lowercaseExpandedTerms()) {
    text=text.toLowerCase(settings.locale());
  }
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.setDisableCoord(true);
  for (  Map.Entry<String,Float> entry : weights.entrySet()) {
    try {
      Query q=new FuzzyQuery(new Term(entry.getKey(),text),fluxier);
      q.setBoost(entry.getValue());
      bq.add(q,BooleanClause.Occur.SHOULD);
    }
 catch (    RuntimeException e) {
      rethrowUnlessLenient(e);
    }
  }
  return super.simplify(bq.build());
}
",148,10,"fuzziness:fluxier,",12,0.045525908,Beam
1703,,,14,2,,199,0.628849145,0
1704,,,86,8,,906,2.072649546,0
1705,"public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}","public static void copyExcept(Object lib,Object newsts,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(lib,0,newsts,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(lib,removeIndex + 1,newsts,removeIndex,oldSize - removeIndex - 1);
  }
}",75,5,"src:lib,dst:newsts,",143,0.514820381,Beam
1706,,,124,8,,1746,4.765822387,0
1707,,,44,4,,830,2.123781343,0
1708,,,249,11,,2716,8.874047299,0
1709,,,32,3,,455,1.053581075,0
1710,,,311,21,,5065,36.09187548557920,0
1711,"public Skype(String username,String password){
  this.username=username;
  this.password=password;
}
","public Skyphone(String phone,String password){
  this.phone=phone;
  this.password=password;
}
",23,3,"Skype:Skyphone,username:phone,",123,0.234610037,Beam
1712,,,158,10,,1833,4.320967166,0
1713,,,159,7,,1673,4.502298172,0
1714,"public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}","public static void readIn(InputStream inStr,OutputStream inStream) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    inStream.write(bs,0,numRead);
  }
}",63,6,"pipeAll:readIn,outStr:inStream,",60,0.182436629,Beam
1715,,,54,3,,444,0.948656551,0
1716,,,151,3,,369,1.439919738,0
1717,"public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
","public void append(byte[] buffer,int offset,int part){
  if (part > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,part);
  this.contentLength+=part;
}
",63,5,"put:append,count:part,",164,0.40148433,Beam
1719,"@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
","@Override protected void onFinish(){
  super.onFinish();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
",40,4,"onDestroy:onFinish,",5,0.011861805,Beam
1720,,,31,4,,528,1.159569259,0
1721,"private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}","private int indexOfelementInLevel(int element,int wall[]) throws Exception {
  for (int i=0; i < wall.length; i++) {
    if (wall[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}",68,5,"level:wall,indexOfElementInLevel:indexOfelementInLevel,",161,0.441558532,Beam
1722,,,101,7,,1180,4.689891207,0
1723,"public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}","public void replace(char m[]){
  int maxlength=buffer.length - ref;
  if (m.length < maxlength) {
    System.arraycopy(m,0,buffer,ref,m.length);
    ref+=m.length;
  }
 else {
    System.arraycopy(m,0,buffer,ref,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > m.length - maxlength) ? buffer.length : m.length - maxlength];
    if (m.length > maxlength) {
      System.arraycopy(m,maxlength,buffer,0,m.length - maxlength);
      ref=m.length - maxlength;
    }
 else {
      ref=0;
    }
  }
}",165,7,"append:replace,c:m,pos:ref,",451,1.336307836,Beam
1725,"public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}","public static boolean matchNull(String str){
  return (null == str || 0 == str.length());
}",25,2,"isEmpty:matchNull,",41,0.092893501,Beam
1726,"public ModbusTransaction createTransaction(){
  ModbusSerialTransaction transaction=new ModbusSerialTransaction();
  transaction.setTransport(this);
  return transaction;
}
","public ModbusTransaction createTx(){
  ModbusSerialTransaction transaction=new ModbusSerialTransaction();
  transaction.setTransport(this);
  return transaction;
}
",25,2,"createTransaction:createTx,",3,0.006251093,Beam
1727,,,29,3,,560,1.570476393,0
1728,"public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}
","public static ClassProperties getproProperty(Class[] clos,Properties fields,boolean inherit){
  ClassProperties cp=new ClassProperties(fields);
  for (  Class c : clos) {
    cp.load(c,inherit);
  }
  return cp;
}
",48,6,"cls:clos,loadProperties:getproProperty,properties:fields,",534,1.054779796,Beam
1729,,,93,6,,912,2.839104299,0
1730,"public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}","public static String toUTF8Array(String sets){
  return new String(sets.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}",30,2,"s:sets,toUTF8String:toUTF8Array,",62,0.187376082,Beam
1731,"public static Pair<String,String> split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}","public static Pair<String,String> filter(String varType){
  int locName=varType.indexOf('.');
  if (locName < 0) {
    return null;
  }
  String left=varType.substring(0,locName);
  String wheel=varType.substring(locName + 1);
  if (left == null || left.length() == 0 || wheel == null || wheel.length() == 0) {
    return null;
  }
  return Pair.of(left,wheel);
}",101,5,"split:filter,varName:varType,right:wheel,splitIndex:locName,",787,2.755139375,Beam
1732,,,158,9,,2770,14.45716375,0
1733,,,88,5,,416,1.06420184,0
1734,"boolean closeOutbound() throws SSLException {
  if (sslEngine == null || sslEngine.isOutboundDone()) {
    return false;
  }
  sslEngine.closeOutbound();
  createOutNetBuffer(0);
  SSLEngineResult result;
  for (; ; ) {
    result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());
    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {
      outNetBuffer.capacity(outNetBuffer.capacity() << 1);
      outNetBuffer.limit(outNetBuffer.capacity());
    }
 else {
      break;
    }
  }
  if (result.getStatus() != SSLEngineResult.Status.CLOSED) {
    throw new SSLException(""Improper close state: "" + result);
  }
  outNetBuffer.flip();
  return true;
}","boolean closeOutgoing() throws SSLException {
  if (sslEngine == null || sslEngine.isOutboundDone()) {
    return false;
  }
  sslEngine.closeOutgoing();
  createOutNetBuffer(0);
  SSLEngineResult result;
  for (; ; ) {
    result=sslEngine.wrap(emptyBlock.buf(),outNetBuffer.buf());
    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {
      outNetBuffer.capacity(outNetBuffer.capacity() << 1);
      outNetBuffer.limit(outNetBuffer.capacity());
    }
 else {
      break;
    }
  }
  if (result.getStatus() != SSLEngineResult.Status.CLOSED) {
    throw new SSLException(""Improper close state: "" + result);
  }
  outNetBuffer.flip();
  return true;
}",144,5,"closeOutbound:closeOutgoing,emptyBuffer:emptyBlock,",63,0.265806985,Beam
1735,"public void load(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}","public void add(Entity plugin) throws IllegalArgumentException {
  if (!canLoad(plugin)) {
    throw new IllegalArgumentException(""Can not load "" + plugin.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(plugin.getId());
}",51,4,"load:add,unit:plugin,",418,0.845157278,Beam
1736,,,106,5,,1112,2.104654026,0
1737,,,66,6,,476,1.09721806,0
1738,,,76,4,,816,3.130943433,0
1739,"private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}","private Set<String> foreignKeys(PreparedStatement stmt,String company,String Tuple) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,company);
  stmt.setString(2,Tuple);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}",87,6,"primaryKeys:foreignKeys,tbl:Tuple,owner:company,",655,1.913055376,Beam
1740,,,171,11,,1805,4.961905825,0
1742,,,320,30,,4718,16.67179104,0
1743,,,47,2,,204,0.537746914,0
1744,"public boolean remove(JsonElement element){
  return elements.remove(element);
}
","public boolean release(JsonElement event){
  return elements.release(event);
}
",17,3,"remove:release,element:event,",78,0.195722198,Beam
1745,"protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,AbstractOptions baseOptions,Iterable<T> values){
  requireNonNull(baseOptions,""baseOptions"");
  requireNonNull(valueFilter,""valueFilter"");
  requireNonNull(values,""values"");
  valueMap=new IdentityHashMap<>(baseOptions.valueMap);
  putAll(valueFilter,StreamSupport.stream(values.spliterator(),false));
}
","protected <T extends AbstractOptionValue<?,?>>abstractConfig(Function<T,T> mediaFil,abstractConfig baseOptions,Iterable<T> maps){
  requireNonNull(baseOptions,""baseOptions"");
  requireNonNull(mediaFil,""valueFilter"");
  requireNonNull(maps,""values"");
  valueMap=new IdentityHashMap<>(baseOptions.valueMap);
  putAll(mediaFil,StreamSupport.stream(maps.spliterator(),false));
}
",83,5,"AbstractOptions:abstractConfig,valueFilter:mediaFil,values:maps,",325,0.822526447,Beam
1746,,,89,6,,1326,3.87807039,0
1747,,,65,5,,542,1.790446723,0
1748,"public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
","public static boolean isObjectValidToday(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
",72,5,"isObjectAvailableNow:isObjectValidToday,",15,0.056741774,Beam
1749,,,39,3,,502,1.188007609,0
1750,,,137,6,,910,5.788658818,0
1751,,,29,4,,1185,2.826539644,0
1752,,,29,3,,229,0.43241537,0
1753,,,34,2,,223,0.434688457,0
1754,,,47,3,,426,1.161216231,0
1755,,,32,4,,313,0.948356104,0
1756,"public void test_vmstat_header_and_data_parse(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String data=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (log.isInfoEnabled())       log.info(""fields["" + i + ""]=[""+ fields[i]+ ""]"");
    }
    assertField(header,fields,2,""swpd"");
    assertField(header,fields,3,""free"");
    assertField(header,fields,6,""si"");
    assertField(header,fields,7,""so"");
    assertField(header,fields,12,""us"");
    assertField(header,fields,13,""sy"");
    assertField(header,fields,14,""id"");
    assertField(header,fields,15,""wa"");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,""96"");
    assertField(data,fields,3,""178580"");
    assertField(data,fields,6,""56"");
    assertField(data,fields,7,""12"");
    assertField(data,fields,12,""1"");
    assertField(data,fields,13,""0"");
    assertField(data,fields,14,""99"");
    assertField(data,fields,15,""3"");
  }
}","public void validate(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String data=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (log.isInfoEnabled())       log.info(""fields["" + i + ""]=[""+ fields[i]+ ""]"");
    }
    assertField(header,fields,2,""swpd"");
    assertField(header,fields,3,""free"");
    assertField(header,fields,6,""si"");
    assertField(header,fields,7,""so"");
    assertField(header,fields,12,""us"");
    assertField(header,fields,13,""sy"");
    assertField(header,fields,14,""id"");
    assertField(header,fields,15,""wa"");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,""96"");
    assertField(data,fields,3,""178580"");
    assertField(data,fields,6,""56"");
    assertField(data,fields,7,""12"");
    assertField(data,fields,12,""1"");
    assertField(data,fields,13,""0"");
    assertField(data,fields,14,""99"");
    assertField(data,fields,15,""3"");
  }
}",289,7,"test_vmstat_header_and_data_parse:validate,",12,0.032081747,Beam
1757,,,15,2,,157,0.587041656,0
1758,"@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public <R>CompletableFuture<R> spawn(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
",51,5,"collect:spawn,",58,0.103922578,Beam
1759,,,17,2,,269,0.627245859,0
1760,,,154,12,,1916,5.476940449,0
1761,"private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}
","private static boolean isTrusted(Object data,TrustVerifier.Context cli) throws RemoteException {
  Object saved=port.get();
  try {
    port.set(data);
    return cli.isTrustedObject(data);
  }
  finally {
    port.set(saved);
  }
}
",54,5,"obj:data,ctx:cli,state:port,",615,1.746574803,Beam
1762,,,122,7,,1027,3.71938316,0
1763,,,59,5,,673,1.478235336,0
1764,"long timestamp(long timestamp){
  this.timestamp=Math.max(this.timestamp,timestamp);
  return this.timestamp;
}
","long snapeline(long snapeline){
  this.snapeline=Math.max(this.snapeline,snapeline);
  return this.snapeline;
}
",28,1,"timestamp:snapeline,",56,0.156458302,Beam
1765,,,25,4,,648,1.80102555,0
1766,,,78,5,,1096,5.691409858,0
1767,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}","public int walk() throws IOException {
  int val;
  if ((val=is.walk()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.walk() & 0xff));
  }
 else {
    val=(char)((is.walk() << 8) | (val & 0xff));
  }
  return val;
}",92,4,"read:walk,",30,0.080332581,Beam
1768,"@Override public long handleCommit(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    bb.put(rbv.get());
  }
  bb.flip();
  return journal.write(bb);
}","@Override public long handleCommit(final long commitDate){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=volume.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    bb.put(rbv.get());
  }
  bb.flip();
  return volume.write(bb);
}",105,8,"commitTime:commitDate,journal:volume,",811,2.275112887,Beam
1769,"public void handleMaintenance(Operation maintOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maintOp.complete();
}
","public void handleMaintenance(Operation mantOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  mantOp.complete();
}
",28,2,"maintOp:mantOp,",20,0.071564853,Beam
1770,"protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
","protected synchronized void onSendTaskConstructed(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
",32,4,"onSendTaskCompleted:onSendTaskConstructed,",9,0.018989853,Beam
1771,,,102,6,,1372,3.126777399,0
1772,,,186,12,,1737,5.946683562,0
1774,,,23,4,,291,0.597511264,0
1775,,,108,5,,1143,3.27567927,0
1776,,,50,5,,791,1.582591879,0
1777,"public static float computeContrastBetweenColors(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}","public static float rainbow(int bg,int fc){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fc) / 255f;
  float fgG=Color.green(fc) / 255f;
  float fgB=Color.blue(fc) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}",313,11,"computeContrastBetweenColors:rainbow,fg:fc,",97,0.322869337,Beam
1778,,,159,9,,1972,5.306016811,0
1779,"public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}
","public boolean printProfile(Profile profile){
  return printProfile(profile,false);
}
",17,2,"putProfile:printProfile,",38,0.085831555,Beam
1780,"private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(xml);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
","private static PolicyNotification extractPolicyUnifications(String output) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlocks=getNotificationDataBlock(output);
    if (notificationDataBlocks != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlocks.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
",192,9,"xml:output,extractPolicyNotification:extractPolicyUnifications,notificationDataBlock:notificationDataBlocks,",530,1.575103152,Beam
1781,"protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
","protected final void print_contactcontentinformation(ObjectInfoPanel r_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  r_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  r_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
",92,7,"p_window:r_window,print_contact_info:print_contactcontentinformation,",170,0.344510857,Beam
1782,,,37,2,,228,0.615166001,0
1783,,,76,4,,796,1.864475739,0
1784,,,125,13,,2528,9.559425565,0
1785,"public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
","public void fire(String queueUrl,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueUrl);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueUrl,dispatcherTask);
      currentTasksMap.put(queueUrl,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueUrl,dispatcherTask);
    }
  }
}
",72,7,"submit:fire,queueName:queueUrl,",100,0.234011475,Beam
1786,,,22,4,,544,1.239210979,0
1787,,,17,1,,33,0.073175196,0
1788,,,15,2,,127,0.21176517,0
1789,,,111,7,,1686,8.179778504,0
1790,,,209,11,,2469,10.06371448,0
1792,,,96,9,,1079,3.702688209,0
1793,,,74,5,,789,2.028025929,0
1794,"private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}","private int movecompells(Container target,int x,int y,int width,int height,int rowsEnd,int rowEnd,boolean ltr,boolean reverse,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (reverse) {
int maxDescent=0;
for (int i=rowsEnd; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowsEnd; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (reverse && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}",370,26,"moveComponents:movecompells,useBaseline:reverse,rowStart:rowsEnd,",2869,15.50291575,Beam
1795,"void insertFunction2(ByteBuffer bb){
  int baseSec=(int)(windowId >> 32);
  bb.putInt(baseSec);
  Integer operId=operatorId;
  for (int i=0; i < 3; i++) {
    byte num=(byte)(operId >> 8 * (2 - i));
    bb.put(num);
  }
  bb.putShort((short)(windowId & 0xffff));
  for (int i=0; i < 3; i++) {
    byte num=(byte)(tupleId >> 8 * (2 - i));
    bb.put(num);
  }
}","void insertArray2(ByteBuffer bb){
  int baseSec=(int)(windowId >> 32);
  bb.putInt(baseSec);
  Integer operId=operatorId;
  for (int i=0; i < 3; i++) {
    byte num=(byte)(operId >> 8 * (2 - i));
    bb.put(num);
  }
  bb.putShort((short)(windowId & 0xffff));
  for (int i=0; i < 3; i++) {
    byte num=(byte)(tupleId >> 8 * (2 - i));
    bb.put(num);
  }
}",131,9,"insertFunction2:insertArray2,",37,0.793751756,Beam
1796,"public void removeTitlePrefix(String prfx){
  titlePrefix.remove(prfx);
  firePropertyChange(TITLE_PREFIX,null,titlePrefix);
}
","public void removeHeaderFixed(String prix){
  titlePremprefix.remove(prix);
  firePropertyChange(TITLE_PREFIX,null,titlePremprefix);
}
",25,3,"removeTitlePrefix:removeHeaderFixed,prfx:prix,titlePrefix:titlePremprefix,",135,0.253037699,Beam
1797,,,54,5,,1016,4.809230236,0
1798,"private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
","private void assertBackupStatus(final BackupStatus pullupState){
  Map<DistributedMember,Set<PersistentID>> backupMap=pullupState.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
",90,5,"backupStatus:pullupState,",49,0.469827096,Beam
1799,"private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}","private void interpolativeSubCollection(ArrayList<PathParser.PathDataNode> array){
  if (array == null || array.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(array);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=array.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=array.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == array.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,array.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(array.subList(i,k + 1));
    }
    i++;
  }
}",220,8,"interpolateResultList:interpolativeSubCollection,list:array,",87,1.422614129,Beam
1800,,,23,2,,321,3.847148776,0
1801,,,224,10,,3271,32.85679238,0
1802,,,34,3,,294,2.437797089,0
1803,,,38,3,,434,4.561924525,0
1804,,,198,13,,1679,13.80712186,0
1805,"private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}","private void updateUiWithCmd(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}",216,14,"updateUiFromCommand:updateUiWithCmd,",7,0.072340858,Beam
1806,,,90,4,,817,28.13809025,0
1808,,,173,12,,4082,38.66739034,0
1809,,,34,3,,470,4.634651673,0
1810,"private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}","private void handleResponse(AvsResponse route){
  boolean checkAfter=(avsQueue.size() == 0);
  if (route != null) {
    for (int i=route.size() - 1; i >= 0; i--) {
      if (route.get(i) instanceof AvsReplaceAllItem || route.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        route.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + route.size() + "" items to our queue"");
    avsQueue.addAll(route);
  }
  if (checkAfter) {
    checkQueue();
  }
}",121,5,"response:route,",9,0.11459405,Beam
1811,,,32,3,,348,2.410149229,0
1812,,,16,2,,141,1.056554461,0
1813,,,58,4,,586,6.978506549,0
1814,"@Override public boolean equalsValue(final Object other){
  return Objects.equals(this.value,other);
}
","@Override public boolean equalesClass(final Object current){
  return Objects.equals(this.value,current);
}
",24,2,"other:current,equalsValue:equalesClass,",54,0.414278861,Beam
1815,"public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}","public static void writer(int x1,int y1,Image media,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(media,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.writer(x1,y1,image_width,image_height,pixels,properties,dos);
}",93,10,"image:media,write:writer,",470,4.230352358,Beam
1816,,,114,8,,1209,9.624290204,0
1817,"public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
","public String importTrl(String directory,int AD_Client_ID,String ADBlockLanguage,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ ADBlockLanguage+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
",180,14,"AD_Language:ADBlockLanguage,",9,0.07473158,Beam
1818,,,86,5,,187,2.050433759,0
1819,"void readPRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
","void writePRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
",42,3,"readPRJ:writePRJ,",7,0.042784917,Beam
1820,"public java.lang.StringBuffer insert(int offset,char c){
  internal.insert(offset,c);
  return this;
}
","public java.lang.StringBuffer data(int offset,char c){
  internal.data(offset,c);
  return this;
}
",28,4,"insert:data,",78,3.599735864,Beam
1821,,,101,10,,1226,8.901550821,0
1822,,,67,5,,853,5.916890164,0
1823,"public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}","public static double[] expandFunctionI(int bufferSize,double[] currentarray){
  if (currentarray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentarray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentarray,0,ret,0,length);
  return ret;
}",74,5,"expandArrayD:expandFunctionI,currentArray:currentarray,",159,1.930866166,Beam
1824,,,129,2,,66,1.128210755,0
1825,"public void addMessage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
","public void insertPage(String next){
  messages.addLast(next);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
",42,5,"addMessage:insertPage,message:next,",79,0.665334288,Beam
1826,,,50,4,,487,4.578053363,0
1827,"public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}
","public final int create(){
  if (GWT.isScript()) {
    return jsArray.create();
  }
 else {
    return javaArray.create();
  }
}
",35,3,"size:create,",32,0.245366669,Beam
1828,"public void unlockForClear(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
","public void unlockingForCreate(InternalDistributedMember installoser){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",installoser,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !installoser.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(installoser);
  }
}
",106,5,"unlockForClear:unlockingForCreate,locker:installoser,",190,1.869966598,Beam
1829,"public boolean shouldInclude(final Path path){
  return includeMatchers.size() == 0 || matches(path,includeMatchers);
}","public boolean shouldIntertern(final Path text){
  return includeMatchers.size() == 0 || matches(text,includeMatchers);
}",26,3,"path:text,shouldInclude:shouldIntertern,",62,0.619672672,Beam
1830,"@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}","@Override public void MousePushed(MouseEvent element){
  m_frameLimiter.setRepeats(true);
  if ((element.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !element.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((element.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((element.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((element.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((element.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=element.getX();
      m_oldMousePos.height=element.getY();
      m_newMousePos.width=element.getX();
      m_newMousePos.height=element.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=element.getX();
      m_oldMousePos.height=element.getY();
      m_newMousePos.width=element.getX();
      m_newMousePos.height=element.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((element.getButton() == MouseEvent.BUTTON1) && element.isAltDown() && element.isShiftDown()&& !element.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}",374,8,"e:element,mousePressed:MousePushed,",67,0.707769136,Beam
1831,,,104,10,,347,3.495486418,0
1832,"public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}","public final void entry(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  entry(lm);
}",147,9,"log:entry,",68,0.46922638,Beam
1833,"public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}","public void collect(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog serItem=(ChargeLog)iterChargingTimes[i];
    serItem.collect();
  }
}",60,5,"print:collect,curItem:serItem,",67,0.462205096,Beam
1834,,,81,3,,142,1.241716822,0
1835,"public void serialize(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}","public void serialize(String id,byte[] message,OutputStream flow) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < id.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(id.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  flow.write(header);
  flow.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",id,bytesToHexString(header) + bytesToHexString(message));
}",179,10,"out:flow,name:id,",122,0.914122343,Beam
1836,,,79,4,,437,3.345565255,0
1837,,,38,5,,621,8.488078511,0
1838,,,216,12,,3628,124.1361917,0
1839,,,26,4,,739,8.948233326,0
1840,,,98,6,,1181,11.00118632,0
1841,,,89,5,,190,1.841392004,0
1842,"public void paint(Graphics g){
  g.translate(0,translateY);
  super.paint(g);
}","public void packet(Graphics gh){
  gh.translate(0,translateY);
  super.packet(gh);
}",25,4,"paint:packet,g:gh,",56,0.737363946,Beam
1843,,,35,3,,199,1.139507552,0
1844,,,172,6,,1530,16.85169579,0
1845,"private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}","private double addRecstructly(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecstructly(hull,hier,iter.get());
  }
  return weight;
}",175,10,"addRecursively:addRecstructly,",21,0.371215077,Beam
1846,"public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
","public void loadfromFile(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
",201,12,"updateFromResource:loadfromFile,",22,0.250066789,Beam
1847,"private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}","private static Type[] unwrapFases(final Map<TypeVariable<?>,Type> singleargitives,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(singleargitives,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}",100,6,"unrollBounds:unwrapFases,typeArguments:singleargitives,",149,1.969632769,Beam
1848,,,53,5,,637,5.526063089,0
1849,,,57,5,,1163,9.905504986,0
1851,,,29,2,,218,1.763024453,0
1852,"protected void add(CSVRecord record){
  records.add(Objects.requireNonNull(record));
}
","protected void load(CSVRecord record){
  records.load(Objects.requireNonNull(record));
}
",21,3,"add:load,",14,0.123824712,Beam
1853,,,31,3,,443,4.404953102,0
1854,"public Server start() throws SQLException {
  try {
    started=true;
    service.start();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.start();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}","public Server launch() throws SQLException {
  try {
    started=true;
    storage.launch();
    String name=storage.getName() + "" ("" + storage.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(storage.isDaemon());
    t.launch();
    for (int pi=1; pi < 64; pi+=pi) {
      wait(pi);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}",146,7,"start:launch,i:pi,service:storage,",759,7.092872711,Beam
1855,"public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
","public static void CLOSECL(InputStream ip){
  try {
    if (ip != null)     ip.close();
  }
 catch (  Throwable t) {
  }
}
",32,2,"closeEL:CLOSECL,is:ip,",79,0.608833174,Beam
1856,,,73,4,,971,13.41630507,0
1857,,,210,12,,3349,38.4622045,0
1860,,,17,2,,227,2.91936574,0
1861,"public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
","public void conversion(final VirtualFile root,final List<FilePath> output) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,output)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
",79,6,"files:output,revert:conversion,",109,1.134414486,Beam
1862,,,572,28,,2865,27.20254155,0
1863,"@SuppressWarnings(""unused"") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}","@SuppressWarnings(""unused"") public boolean onScrollEnd(MotionEvent update){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(update) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=update.getAction();
    int histLen=update.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? update.getHistoricalX(histIdx) : update.getX();
        yVals[0]=processingHist ? update.getHistoricalY(histIdx) : update.getY();
        pressureVals[0]=processingHist ? update.getHistoricalPressure(histIdx) : update.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(update,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(update,ptrIdx,histIdx) : m_getX.invoke(update,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(update,ptrIdx,histIdx) : m_getY.invoke(update,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(update,ptrIdx,histIdx) : m_getPressure.invoke(update,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? update.getHistoricalEventTime(histIdx) : update.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}",488,27,"onTouchEvent:onScrollEnd,event:update,",117,1.201562218,Beam
1864,"protected void performDefaults(){
  super.performDefaults();
  initializeValues();
  verifyValidation();
}
","protected void peractDs(){
  super.peractDs();
  initializeValues();
  verifyValidation();
}
",21,2,"performDefaults:peractDs,",29,0.228025293,Beam
1865,,,16,3,,289,2.325772655,0
1866,,,96,9,,2656,31.81364138,0
1867,"public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}","public static int count(Object i){
  int w=i == null ? 0 : i instanceof byte[] ? Arrays.hashCode((byte[])i) : i.hashCode();
  w+=(w << 15) ^ 0xffffcd7d;
  w^=(w >>> 10);
  w+=(w << 3);
  w^=(w >>> 6);
  w+=(w << 2) + (w << 14);
  return w ^ (w >>> 16);
}",106,3,"o:i,hash:count,h:w,",368,3.031400645,Beam
1868,,,59,5,,792,6.114355791,0
1869,"@Override protected void failed(){
  relation.setCanceled(true);
  super.failed();
}
","@Override protected void lost(){
  object.setCanceled(true);
  super.lost();
}
",22,3,"failed:lost,relation:object,",95,0.610548401,Beam
1870,,,53,4,,557,5.830508494,0
1871,"public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
","public void refreshInheitedMethod(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass SuperExpanded=(ExpandoMetaClass)i.next();
    if (SuperExpanded != this) {
      refreshInheitedMethod(SuperExpanded);
    }
  }
}
",54,4,"refreshInheritedMethods:refreshInheitedMethod,superExpando:SuperExpanded,",214,1.997789284,Beam
1872,,,105,6,,1591,39.72519823,0
1873,,,37,3,,348,2.581918462,0
1874,"private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
","private static String generateJMPT(String state,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(state,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
",68,7,"generateJWT:generateJMPT,secret:state,",787,9.06648883,Beam
1875,,,36,4,,1086,10.22927352,0
1876,,,34,4,,684,6.468326835,0
1710,,,311,21,,5065,36.09187548557920,0
1878,"private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}","private static String convertNumberStringToTwoDecit(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}",64,2,"forceNumberStringToTwoDigits:convertNumberStringToTwoDecit,",14,0.117158087,Beam
1879,,,23,4,,533,4.555331278,0
1880,,,82,3,,252,8.093214293,0
1881,,,34,4,,390,3.046647398,0
1882,,,29,2,,293,4.004901926,0
1883,,,56,4,,517,4.481893516,0
1884,,,59,5,,1008,18.445682,0
1885,"private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}","private static String toDouble(double Coffe){
  final String c=Double.toDouble(Coffe);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}",54,3,"toString:toDouble,coeff:Coffe,",88,0.697232989,Beam
1886,,,46,4,,175,1.775421778,0
1887,"public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}","public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime date,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(date);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}",99,9,"start:date,",113,1.819885997,Beam
1888,"Rules(Workspace workspace){
  this.root=workspace.getRoot();
  this.teamHook=workspace.getTeamHook();
}
","Resources(Workspace namespaces){
  this.root=namespaces.getRoot();
  this.teamHook=namespaces.getTeamHook();
}
",27,2,"Rules:Resources,workspace:namespaces,",64,0.48571732,Beam
1889,,,110,8,,346,4.0253274,0
1890,,,74,8,,2295,129.9220232,0
1891,"protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}","protected void renderString(String text1,String note4,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.renderString(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(note4,0,note4.length());
  offset=(int)w / 2;
  c.renderString(note4,x - offset,y + (36f * pixelDensity),textPaint);
}",167,13,"drawText:renderString,text2:note4,",411,4.528204274,Beam
1892,"public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : source.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + source + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(source.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}","public static List<String> unequote(String source,char escapeChar,char[] specialCharacters,char scapeChar,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : source.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == scapeChar) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + source + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == scapeChar) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(source.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}",296,13,"splitCharacter:scapeChar,unescape:unequote,",375,3.701538328,Beam
1893,,,57,3,,514,5.100477286,0
1894,,,36,3,,409,3.639351825,0
1895,,,94,4,,956,12.1708892,0
1896,,,44,4,,746,6.897377853,0
1897,"public Exchange(final Request request,final Origin origin){
  this.currentRequest=request;
  this.origin=origin;
  this.timestamp=System.currentTimeMillis();
}
","public Interact(final Request name,final Origin origin){
  this.currentRequest=name;
  this.origin=origin;
  this.timestamp=System.currentTimeMillis();
}
",35,3,"Exchange:Interact,request:name,",349,2.698374716,Beam
1898,,,59,6,,1006,9.892223907,0
1899,"@Override public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source){
}","@Override public void zoomChartAxe(double feature,PlotRenderingInfo state,Point2D source){
}",17,4,"factor:feature,zoomDomainAxes:zoomChartAxe,",366,4.124854787,Beam
1900,"public void testFailedStage(){
  CFException ex=new CFException();
  CompletionStage<Integer> f=CompletableFuture.failedStage(ex);
  AtomicInteger x=new AtomicInteger(0);
  AtomicReference<Throwable> r=new AtomicReference<Throwable>();
  f.whenComplete(null);
  assertEquals(x.get(),0);
  assertEquals(r.get(),ex);
}","public void testFinailedStep(){
  CFException ex=new CFException();
  CompletionStage<Integer> f=CompletableFuture.failedStage(ex);
  AtomicInteger x=new AtomicInteger(0);
  AtomicReference<Throwable> r=new AtomicReference<Throwable>();
  f.whenComplete(null);
  assertEquals(x.get(),0);
  assertEquals(r.get(),ex);
}",80,5,"testFailedStage:testFinailedStep,",14,0.092267577,Beam
1901,,,26,4,,1105,29.54395715,0
1902,,,200,10,,3418,210.4211464,0
1903,,,17,3,,306,1.9651437,0
1904,,,136,4,,352,4.051233188,0
1905,,,54,4,,562,5.604527775,0
1906,,,197,4,,594,5.09268297,0
1907,,,48,3,,523,12.46248538,0
1908,,,41,5,,410,7.775231187,0
1909,,,81,4,,491,4.347922421,0
1910,,,27,4,,341,3.563587916,0
1911,,,23,1,,25,0.452254204,0
1912,"public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}
","public int formatDouble(String localeFormattedInteger){
  return Integer.formatDouble(localeFormattedInteger);
}
",17,2,"parseInt:formatDouble,",15,0.147015667,Beam
1913,"public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
","public static Entry addObjectClass(Entry event){
  Attribute attribute=event.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    event.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return event;
}
",46,3,"entry:event,",9,0.10203253,Beam
1914,,,16,3,,389,3.196165073,0
1915,,,32,3,,319,4.633282928,0
1916,,,28,1,,59,0.439814866,0
1917,"HttpStreamWrapper(HttpStream stream) throws IOException {
  _stream=stream;
}
","HttpStreamWrappers(HttpStream source) throws IOException {
  _stream=source;
}
",13,3,"HttpStreamWrapper:HttpStreamWrappers,stream:source,",127,1.153157202,Beam
1918,"@SuppressWarnings(""unchecked"") public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory){
  if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {
    BeanDefinition sessionFactoryBeanDefinition=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);
    MutablePropertyValues propertyValues=sessionFactoryBeanDefinition.getPropertyValues();
    if (mappingResources != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""mappingResources"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""mappingResources"",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(mappingResources);
    }
    if (annotatedClasses != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""annotatedClasses"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""annotatedClasses"",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(annotatedClasses);
    }
    if (configLocations != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""configLocations"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""configLocations"",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingConfigLocations=(List)propertyValue.getValue();
      existingConfigLocations.addAll(configLocations);
    }
    if (hibernateProperties != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""hibernateProperties"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""hibernateProperties"",new Properties());
        propertyValues.addPropertyValue(propertyValue);
      }
      Properties existingHibernateProperties=(Properties)propertyValue.getValue();
      existingHibernateProperties.putAll(hibernateProperties);
    }
  }
 else {
    throw new NoSuchBeanDefinitionException(""No bean named ["" + sessionFactoryBeanName + ""] exists within the bean factory. ""+ ""Cannot post process session factory to add Hibernate resource definitions."");
  }
}
","@SuppressWarnings(""unchecked"") public void init(ConfigurableListableBeanFactory configurableListableBoanInterface){
  if (configurableListableBoanInterface.containsBean(sessionFactoryPebeanDefinition)) {
    BeanDefinition sessionFactoryBeanBase=configurableListableBoanInterface.getBeanDefinition(sessionFactoryPebeanDefinition);
    MutablePropertyValues updateValues=sessionFactoryBeanBase.getPropertyValues();
    if (mappingResources != null) {
      PropertyValue propertyValue=updateValues.getPropertyValue(""mappingResources"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""mappingResources"",new ArrayList());
        updateValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(mappingResources);
    }
    if (annotatedClasses != null) {
      PropertyValue propertyValue=updateValues.getPropertyValue(""annotatedClasses"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""annotatedClasses"",new ArrayList());
        updateValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(annotatedClasses);
    }
    if (configLocations != null) {
      PropertyValue propertyValue=updateValues.getPropertyValue(""configLocations"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""configLocations"",new ArrayList());
        updateValues.addPropertyValue(propertyValue);
      }
      List existingConfigLocations=(List)propertyValue.getValue();
      existingConfigLocations.addAll(configLocations);
    }
    if (hibernateProperties != null) {
      PropertyValue propertyValue=updateValues.getPropertyValue(""hibernateProperties"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""hibernateProperties"",new Properties());
        updateValues.addPropertyValue(propertyValue);
      }
      Properties existingHibernateProperties=(Properties)propertyValue.getValue();
      existingHibernateProperties.putAll(hibernateProperties);
    }
  }
 else {
    throw new NoSuchBeanDefinitionException(""No bean named ["" + sessionFactoryPebeanDefinition + ""] exists within the bean factory. ""+ ""Cannot post process session factory to add Hibernate resource definitions."");
  }
}
",320,13,"postProcessBeanFactory:init,configurableListableBeanFactory:configurableListableBoanInterface,sessionFactoryBeanName:sessionFactoryPebeanDefinition,sessionFactoryBeanDefinition:sessionFactoryBeanBase,propertyValues:updateValues,",3779,45.368013,Beam
1919,"protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposals=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           proposals.add(editProposal);
        }
      }
    }
  }
  return proposals;
}
","protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposales=new ArrayList<IEditProposal>();
  View projectVIEW=getSelectedView();
  if (projectVIEW != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(projectVIEW)) {
          if (editProposal.isApplicable())           proposales.add(editProposal);
        }
      }
    }
  }
  return proposales;
}
",88,6,"proposals:proposales,selectedView:projectVIEW,",210,1.883565537,Beam
1920,"public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}","public Builder addReadPart(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}",42,3,"appendReadData:addReadPart,",37,0.279530724,Beam
1921,,,104,8,,1629,16.88092554,0
1922,,,69,5,,1275,14.33072971,0
1923,"public boolean isStored(){
  return Integer.signum(id) != -1;
}","public boolean IsStalled(){
  return Integer.signum(id) != -1;
}",18,2,"isStored:IsStalled,",16,0.136218981,Beam
1924,"@Action(value=""/receipts/challan-newform"") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){
  setLoginDept();
  SimpleDateFormat sdf=new SimpleDateFormat(""dd/MM/yyyy"");
  try {
    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText(""Error parsing Cut Off Date"") + e.getMessage());
  }
  return NEW;
}
","@Action(value=""/receipts/challan-newform"") @ValidationErrorPage(value=ERROR) @SkipValidation public String createFORM(){
  setLoginDept();
  SimpleDateFormat sdf=new SimpleDateFormat(""dd/MM/yyyy"");
  try {
    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText(""Error parsing Cut Off Date"") + e.getMessage());
  }
  return NEW;
}
",85,7,"newform:createFORM,",10,0.097115024,Beam
1925,,,190,8,,1945,53.08758016,0
1926,,,81,7,,1476,28.97649453,0
1927,,,95,7,,1524,14.2808105,0
1928,"@Override protected String toString(File obj){
  return obj.getAbsolutePath();
}
","@Override protected String oStr(File tmp){
  return tmp.getAbsolutePath();
}
",18,2,"toString:oStr,obj:tmp,",77,0.516477048,Beam
1929,,,23,3,,771,4.726071155,0
1931,,,25,4,,625,5.002033643,0
1932,,,19,3,,300,2.801144727,0
1933,,,35,3,,322,2.373680703,0
1934,"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}","public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_station,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_station,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}",112,15,"p_location:p_station,",12,0.212463113,Beam
1935,,,21,3,,470,3.50527395,0
1936,,,45,6,,1651,19.77293543,0
1937,,,15,2,,160,0.972282497,0
1938,"public static void fullReset(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
","public static void fullResets(){
  resetRuntime();
synchronized (readProps) {
    readProps.clear();
  }
}
",24,2,"fullReset:fullResets,readProperties:readProps,",21,0.136211558,Beam
1939,,,16,2,,153,1.101036513,0
1940,"private void makeItems(int fingerPosition,List<View> viewList){
  if (fingerPosition >= viewList.size()) {
    return;
  }
  for (int i=0; i < viewList.size(); i++) {
    int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight);
    updateItemHeightAnimator(viewList.get(i),translationY);
  }
}","private void makeItems(int fingerPosition,List<View> modelList){
  if (fingerPosition >= modelList.size()) {
    return;
  }
  for (int i=0; i < modelList.size(); i++) {
    int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight);
    updateItemHeightAnimator(modelList.get(i),translationY);
  }
}",89,7,"viewList:modelList,",3,0.035692779,Beam
1941,,,16,2,,145,1.272152122,0
1942,"SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseComponentType=linearArrayType.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}","SplayObject(Class<L> linearFunctionStyle,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearFunctionStyle,rowIndices,colIndices,realValues,imagValues);
  _baseComponentType=linearFunctionStyle.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearFunctionStyle,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearFunctionStyle.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearFunctionStyle.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}",291,22,"SparseArray:SplayObject,linearArrayType:linearFunctionStyle,",314,3.614783116,Beam
1943,,,19,2,,217,1.472463814,0
1944,"public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}","public static final byte[] unzip(byte[] s) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * s.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(s));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}",102,8,"in:s,",7,0.054616785,Beam
1945,,,35,3,,506,4.861903469,0
1946,,,309,10,,2566,26.56731039,0
1947,"public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}","public static void modifiedFile(File page,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(page),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),page);
}",64,5,"modifyFile:modifiedFile,file:page,",135,0.928011445,Beam
1948,,,355,21,,4506,41.98563342,0
1949,,,187,10,,2550,22.19765097,0
1950,"@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}","@Override @SuppressWarnings(""unchecked"") public void completion(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}",126,5,"completed:completion,",34,0.227929509,Beam
1951,,,346,15,,2547,89.78988349,0
1952,,,100,7,,1643,17.29669673,0
1953,,,436,27,,3741,20.92972594499590,0
1955,"public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}","public boolean threadSafeTimeout(long delayTime,TimeUnit element,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,element,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}",66,9,"unit:element,",15,0.142625233,Beam
1956,"public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(parent,message,description,e);
  }
  return null;
}","public static ReilGraph copyReilingBlock(final Window child,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(child,message,description,e);
  }
  return null;
}",125,7,"copyReilCode:copyReilingBlock,parent:child,",81,0.855795089,Beam
1957,,,12,1,,25,0.305613105,0
1958,"public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
","public void setPage(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
",28,5,"addResult:setPage,",7,0.042425148,Beam
1959,,,35,5,,812,6.066812253,0
1960,,,80,6,,995,7.744254903,0
1961,,,44,8,,966,7.836365394,0
1962,,,77,5,,1443,14.31822503,0
1963,"public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}
","public void addPutAndGetTimeJNs(long term){
  putTimeNanos.addAndGet(term);
  getTimeNanos.addAndGet(term);
  if (delegate != null)   delegate.addPutAndGetTimeJNs(term);
}
",36,5,"duration:term,addPutAndGetTimeNanos:addPutAndGetTimeJNs,",75,0.766581345,Beam
1964,,,17,2,,94,0.678830584,0
1965,,,20,3,,367,3.760054151,0
1966,,,113,8,,482,4.261534933,0
1967,,,145,10,,2120,19.43853026,0
1968,,,116,5,,1172,11.20508474,0
1969,,,57,4,,447,22.23689106,0
1970,,,55,3,,450,3.276119089,0
1971,"public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
","public void change(int property,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.change(property,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(property);
  }
}
",57,6,"position:property,add:change,",111,1.01778425,Beam
1972,"public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}
","public void addChanClass(ChannelMap characterGroup){
  if (!mChannelMaps.contains(characterGroup)) {
    mChannelMaps.add(characterGroup);
    int index=mChannelMaps.indexOf(characterGroup);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(characterGroup,Event.ADD));
  }
}
",60,4,"addChannelMap:addChanClass,channelMap:characterGroup,",63,0.442471619,Beam
1973,,,54,5,,688,5.213186932,0
1974,"public long start(){
  startTime=System.currentTimeMillis();
  return startTime;
}
","public long enable(){
  startTime=System.currentTimeMillis();
  return startTime;
}
",18,2,"start:enable,",24,0.146953901,Beam
1976,,,30,3,,608,4.251428465,0
1977,,,72,4,,579,5.045735927,0
1978,,,43,4,,170,1.184719332,0
1979,,,50,4,,890,14.96309863,0
1980,"public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.createServerSocket(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}","public static ServerSocket createServerSocket(int ip,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.createServerSocket(ip);
  }
 else {
    secureSocket=(SSLServerSocket)f.createServerSocket(ip,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}",143,7,"port:ip,",5,0.064248939,Beam
1981,,,165,11,,2468,19.39998077,0
1982,,,42,3,,621,7.869169247,0
1983,,,69,4,,697,9.421138465,0
1984,"private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}","private void pack(){
  int newCap=(entrics.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entrics,0,newEntries,0,size);
  entrics=newEntries;
}",50,5,"grow:pack,entries:entrics,",218,2.436388652,Beam
1985,,,19,2,,97,0.942458284,0
1986,,,37,5,,519,3.685904376,0
1987,,,43,6,,926,6.409022105,0
1989,"public ConsulTopologyFraction(){
  this.url=DEFAULT_URL;
}
","public ConsulTopologyAfault(){
  this.url=DEFAULT_SSL;
}
",12,2,"ConsulTopologyFraction:ConsulTopologyAfault,DEFAULT_URL:DEFAULT_SSL,",48,0.317701562,Beam
1990,,,140,8,,2027,25.14012954,0
1991,"public static int randomRangeInt(int min,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));
}","public static int randomRangeInt(int diff,int default){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (default - diff) + diff) : (Math.random() * (default - diff) + diff));
}",63,3,"max:default,min:diff,",167,4.345318127,Beam
1992,"private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}","private static int findindexIn(Object o,@NotNull Object[] easts,int address){
  if (o == null) {
    for (int i=address; i >= 0; i--) {
      if (easts[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=address; i >= 0; i--) {
      if (o.equals(easts[i])) {
        return i;
      }
    }
  }
  return -1;
}",98,5,"elements:easts,lastIndexOf:findindexIn,index:address,",563,6.109062529,Beam
1993,"public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
","public void stopStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
",20,3,"closeStream:stopStream,",3,0.013750458,Beam
1994,,,66,6,,168,0.75917534,0
1995,,,144,8,,1836,34.14932452,0
1996,,,39,4,,713,6.698475436,0
1997,"public static float mean(float[] data,int[] inds){
  float mean=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[inds[i]];
  }
  mean/=inds.length;
  return mean;
}","public static float load(float[] d,int[] pullS){
  float load=0;
  for (int i=0; i < pullS.length; i++) {
    if (Float.isNaN(d[pullS[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    load+=d[pullS[i]];
  }
  load/=pullS.length;
  return load;
}",81,4,"mean:load,inds:pullS,data:d,",408,4.107093636,Beam
1998,,,33,2,,238,2.857306798,0
1999,"public static boolean isUnlimitedStrengthPolicyAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}","public static boolean isUnlimitedStrengthRuleSupported(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}",38,2,"isUnlimitedStrengthPolicyAvailable:isUnlimitedStrengthRuleSupported,",7,0.089476562,Beam
2000,,,20,2,,318,4.140434217,0
2001,"public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}
","public void format(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  format(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    format(cb,buf);
  }
}
",54,8,"export:format,",37,0.363246723,Beam
2002,,,61,5,,1705,102.1048092,0
2003,"public int length(){
  return text.length();
}
","public int stop(){
  return image.stop();
}
",14,2,"length:stop,text:image,",166,1.281123932,Beam
2005,"private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}","private void loadConfigurationFromJmxSettings(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}",211,9,"loadConfigurationFromJvmParameters:loadConfigurationFromJmxSettings,",10,0.085879056,Beam
2006,"public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}","public String code(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}",181,12,"charge:code,",5,0.069816641,Beam
2007,,,29,2,,203,1.699836246,0
2008,,,24,3,,646,8.944487723,0
2009,,,98,8,,1694,25.76871012,0
2010,"public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}","public PKCS10Attributes(PKCS9Attribute rel){
  this.attributeId=rel.getOID();
  this.attributeValue=rel.getValue();
}",28,2,"PKCS10Attribute:PKCS10Attributes,attr:rel,",78,0.763604637,Beam
2011,,,115,6,,266,2.72626404,0
2013,,,57,4,,520,5.345024224,0
2014,"private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}","private void handleStateright(InetAddress endocol,String[] types){
  assert types.length >= 2;
  Collection<Token> tokens=getTokensFor(endocol);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endocol,tokens);
  excise(tokens,endocol,extractExpireTime(types));
}",63,5,"endpoint:endocol,handleStateLeft:handleStateright,pieces:types,",421,11.93972439,Beam
2015,,,34,4,,378,3.556649164,0
2016,"public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}","public static int Poesson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}",55,5,"poisson:Poesson,",40,0.354272989,Beam
2017,"public void connect(){
  connect(this.logWriter);
}
","public void run(){
  run(this.logWriter);
}
",14,1,"connect:run,",15,0.130135441,Beam
2018,,,63,5,,1781,20.04915264,0
2019,"private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}
","private void initialize(ModelValidator modelator,MClient client){
  if (client == null)   m_globalValidators.add(modelator);
  m_validators.add(modelator);
  modelator.initialize(this,client);
}
",41,5,"validator:modelator,",8,0.128004766,Beam
2020,,,347,10,,1558,19.86577516,0
2021,"public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
","public Request body(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
",38,4,"header:body,",17,0.091342374,Beam
2022,"public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){
  System.arraycopy(sourceArray,0,destinationArray,0,offset);
  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);
}","public static void removeobjectatPosition(Object[] sourceLength,Object[] destinationsArea,int offset){
  System.arraycopy(sourceLength,0,destinationsArea,0,offset);
  System.arraycopy(sourceLength,offset + 1,destinationsArea,offset,sourceLength.length - offset - 1);
}",58,4,"removeObjectAtOffset:removeobjectatPosition,sourceArray:sourceLength,destinationArray:destinationsArea,",753,7.140375221,Beam
2023,,,64,8,,290,2.260265811,0
2024,"private void connect(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}","private void exec(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.exec(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}",322,19,"connect:exec,",23,0.199138614,Beam
2025,,,71,6,,1049,16.38796646,0
2026,"public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){
  this.aLine=aLine;
  this.attemptFirstWord=attemptFirstWord;
  this.tags=tags;
  tagPos=0;
  nextResult=getNextResult();
  if (attemptFirstWord) {
    int a=0;
    while (a < aLine.length()) {
      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;
 else       break;
    }
    int b=a + 1;
    while (b < aLine.length()) {
      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;
 else       break;
    }
    if (b - a > 4) {
      nextResult=aLine.substring(a,b);
    }
    tagPos=b;
  }
}","public TatchedValueRunner(final String aLine,final boolean attemptNextW,final String... tags){
  this.aLine=aLine;
  this.attemptNextW=attemptNextW;
  this.tags=tags;
  tagPos=0;
  nextResult=getNextResult();
  if (attemptNextW) {
    int a=0;
    while (a < aLine.length()) {
      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;
 else       break;
    }
    int b=a + 1;
    while (b < aLine.length()) {
      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;
 else       break;
    }
    if (b - a > 4) {
      nextResult=aLine.substring(a,b);
    }
    tagPos=b;
  }
}",180,8,"attemptFirstWord:attemptNextW,TaggedValueIterator:TatchedValueRunner,",130,1.16421833,Beam
2027,,,33,5,,1359,10.91686806,0
2028,"private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}","private void smoothScrollNextPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}",163,18,"smoothSnapToPosition:smoothScrollNextPosition,",16,0.239050726,Beam
2029,,,16,2,,181,1.237584106,0
2030,,,60,8,,265,2.14567548,0
2031,,,13,2,,297,1.676684276,0
2032,"public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}
","public void loadLogicalTablesWithGraicalizations(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}
",74,7,"loadLogicalTablesWithGranularities:loadLogicalTablesWithGraicalizations,",85,0.636782205,Beam
2033,"public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}","public boolean disableVMAX3Compression(URI blockElementURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockElementURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockElementURI);
  }
 else   if (URIUtil.isType(blockElementURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockElementURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockElementURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockElementURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}",229,9,"blockObjectURI:blockElementURI,",5,0.105146603,Beam
2034,,,35,4,,749,5.401190452,0
2035,"public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}","public void singdowns(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.singdowns();
  instantPool.singdowns();
  longRunningPool.singdowns();
  workStealingPool.singdowns();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}",256,9,"shutdown:singdowns,",6,0.062664107,Beam
2036,,,47,2,,79,0.554321881,0
2037,,,35,5,,1299,27.47176619,0
2038,,,70,5,,930,23.11859021,0
2039,"public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewHolder(holder,position,Collections.emptyList());
}
","public void onBindHeaderViewChander(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewChander(holder,position,Collections.emptyList());
}
",27,3,"onBindHeaderViewHolder:onBindHeaderViewChander,",27,0.237822942,Beam
2040,,,17,3,,208,1.043661793,0
2041,"public static Vector2 pow(Vector2 o,double power){
  return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power));
}","public static Vector2 tOW(Vector2 out,double command){
  return new Vector2(Math.tOW(out.x,command),Math.tOW(out.z,command));
}",40,3,"power:command,pow:tOW,o:out,",535,7.216762443,Beam
2042,,,121,6,,1207,13.74262886,0
2043,,,140,8,,1309,13.79396944,0
2044,,,28,2,,190,2.109622149,0
2045,"public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}","public Timestamp RecalculateEstimatedCompletionTime(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}",152,10,"recalculateEstimatedCompletionDate:RecalculateEstimatedCompletionTime,",26,0.298492523,Beam
2047,"public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
","public static Uri createMail(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
",61,9,"addMessage:createMail,",165,1.8514359,Beam
2048,,,52,4,,538,4.709559977,0
2049,,,153,7,,956,6.517120556,0
2050,,,28,3,,524,3.612637691,0
2051,"public void write(PrintStream out){
  write(out,table);
}
","public void writer(PrintStream row){
  writer(row,table);
}
",16,3,"write:writer,out:row,",92,0.621828119,Beam
2052,,,87,7,,1669,18.63103339,0
2053,,,371,12,,5091,145.4513537,0
2054,"@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}","@Override public double calculateM(double delta,double eprilo){
  double i=1;
  while (conf(i,delta) > eprilo / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (eprilo / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}",82,4,"epsilon:eprilo,",7,0.096024966,Beam
2055,"public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}
","public static void close(@CheckForNull OutputStream writeSteam){
  if (writeSteam == null) {
    return;
  }
  try {
    writeSteam.close();
  }
 catch (  IOException e) {
  }
}
",38,2,"outputStream:writeSteam,",17,0.089210379,Beam
2056,,,104,7,,1037,4.943615997,0
2057,,,254,11,,1773,10.24501208,0
2058,,,19,3,,631,3.7240647,0
2060,,,248,11,,2114,19.00134085,0
2061,"public void clientDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisconnect();
  }
  killKeepalive(""client disconnect"");
}
","public void clientDisrupt(){
  try {
    OutHttpApp connectionStream=_cacheStream;
    if (connectionStream != null) {
      connectionStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisrupt();
  }
  killKeepalive(""client disconnect"");
}
",79,6,"clientDisconnect:clientDisrupt,responseStream:connectionStream,_responseStream:_cacheStream,",614,4.373889955,Beam
2062,,,60,3,,504,3.279143155,0
2063,"protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
","protected static double calcQ_d(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
",26,3,"calcQ_i:calcQ_d,",66,1.122808913,Beam
2065,,,183,6,,233,1.259049133,0
2067,,,172,9,,282,1.456247143,0
2068,,,233,18,,2580,13.32489813,0
2069,"public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
","public static boolean isConnectionReady(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
",45,4,"isNetworkAvailable:isConnectionReady,",11,0.040461413,Beam
2070,"public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}","public static List<List<Double>> partitionsVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}",119,7,"partitionVariable:partitionsVariable,",35,0.245651062,Beam
2071,,,236,13,,3422,20.90938715,0
2072,"public int findCarByRoadNumber(String roadNumber){
  if (sysList != null) {
    if (!roadNumber.equals(_roadNumber)) {
      return getIndex(0,roadNumber);
    }
    int index=getIndex(_index,roadNumber);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadNumber);
  }
  return -1;
}","public int findCarByRoadNumber(String routeFile){
  if (sysList != null) {
    if (!routeFile.equals(_roadNumber)) {
      return getIndex(0,routeFile);
    }
    int index=getIndex(_index,routeFile);
    if (index > 0) {
      return index;
    }
    return getIndex(0,routeFile);
  }
  return -1;
}",70,6,"roadNumber:routeFile,",21,0.047079229,Beam
2073,,,154,4,,597,1.657809726,0
2074,"public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}","public static void showExceptionFile(String msg){
  showExceptionFile(msg,3500);
}",17,2,"showErrorMessage:showExceptionFile,",43,0.087630737,Beam
2075,"private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}","private String generateZonesetGloneNames(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}",103,8,"generateZonesetCloneName:generateZonesetGloneNames,",46,0.116097867,Beam
2076,,,48,3,,368,0.882031218,0
2078,"private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}","private boolean loadUnpackedUMD(String username) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(username);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}",114,9,"filename:username,",5,0.029652929,Beam
2079,,,98,4,,615,1.501461705,0
2080,"private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
","private String llives(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
",50,2,"liveness:llives,",8,0.01781079,Beam
2081,"@Override public boolean isCellEditable(int row,int column){
  EnvVar envVar=dataList.get(row);
  if (column == COL_VALUE) {
    return true;
  }
  return !envVar.isPredefined();
}
","@Override public boolean isCellAddatable(int offset,int position){
  EnvVar envVar=dataList.get(offset);
  if (position == COL_TYPE) {
    return true;
  }
  return !envVar.isPredefined();
}
",43,6,"row:offset,isCellEditable:isCellAddatable,column:position,COL_VALUE:COL_TYPE,",829,3.047040308,Beam
2082,,,69,5,,775,2.703408563,0
2083,"public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){
  return playerIdent.equals(getIdentificationForAsString(compareTo));
}
","public static boolean areIdentical(String teamIdent,OfflinePlayer compareTo){
  return teamIdent.equals(getIdentificationForAsString(compareTo));
}
",24,3,"playerIdent:teamIdent,",5,0.016724547,Beam
2084,"public boolean send(byte[] bytes){
  if (!connected)   return false;
  try {
    outputStream.write(bytes);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}
","public boolean create(byte[] body){
  if (!connected)   return false;
  try {
    outputStream.write(body);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}
",75,4,"send:create,bytes:body,",209,1.416577351,Beam
2085,"private boolean validateCustomCatalog(String title,String value){
  return false;
}
","private boolean validateSpecialConfig(String title,String value){
  return false;
}
",15,3,"validateCustomCatalog:validateSpecialConfig,",7,0.014861182,Beam
2086,,,196,12,,4840,20.66868534,0
2087,,,78,7,,1062,3.084312614,0
2088,,,93,6,,1074,3.137759419,0
2089,,,97,7,,1105,4.476533818,0
2090,"protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}","protected void draw(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}",357,19,"onPageScrolled:draw,",79,1.283307707,Beam
2091,,,14,3,,323,0.61336716,0
2092,"void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}","void send(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}",393,18,"postMessage:send,",71,0.177434266,Beam
2093,"protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}","protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theApp){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theApp);
    paintLabel(originGeo,ringDist,graphics,theApp);
  }
}",125,11,"theMap:theApp,",3,0.00857989,Beam
2095,"void copyNodeStructure(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}","void store(ArrayList<Node> distribution){
  while (distribution.size() < nodes.size())   distribution.add(new Node());
  while (distribution.size() > nodes.size())   distribution.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=distribution.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}",313,8,"destination:distribution,copyNodeStructure:store,",151,0.522871431,Beam
2096,,,32,2,,193,0.318862009,0
2097,"public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}
","public boolean loginApplication(String username,HttpServletRequest req){
  return loginApplication(username,req,true,true);
}
",24,3,"logoutUser:loginApplication,",23,0.08743879,Beam
2098,"protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
","protected void ransode(File image,Transcoder Transcoded) throws IOException, TranscoderException {
  Transcoded.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(image));
  TranscoderOutput output=new TranscoderOutput(out);
  Transcoded.ransode(input,output);
  out.flush();
  out.close();
}
",88,7,"transcode:ransode,file:image,transcoder:Transcoded,",501,2.615144948,Beam
2100,"private static String stampToString(long tstamp,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}","private static String stampFormatString(long tstamp,String formPattern){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formPattern,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}",112,14,"formatMask:formPattern,stampToString:stampFormatString,",191,0.439397045,Beam
2101,"public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}
","public QuadEdge buildEdge(Vertex o,Vertex dd){
  QuadEdge q=QuadEdge.buildEdge(o,dd);
  quadEdges.add(q);
  return q;
}
",34,5,"makeEdge:buildEdge,d:dd,",85,0.171550131,Beam
2102,"protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){
  try {
    InputStream is=clazz.getResourceAsStream(resource);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected static Map<String,Step> patch(Class<? extends RSLPStemmerBase> clclass,String report){
  try {
    InputStream is=clclass.getResourceAsStream(report);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> events=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      events.put(s.name,s);
    }
    r.close();
    return events;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",130,9,"resource:report,parse:patch,clazz:clclass,steps:events,",873,2.801496557,Beam
2103,,,186,11,,2572,8.018836888,0
2104,,,18,2,,147,0.335924037,0
2105,,,47,6,,720,1.561503812,0
2106,"public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
","public ActionRequestHelper depsOn(ActionRequestHelper predency){
  mDependencies.add(predency);
  return this;
}
",19,3,"dependsOn:depsOn,dependency:predency,",59,0.144708065,Beam
2107,,,40,4,,321,0.700699286,0
2108,"public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}
","public static void build(byte[] instance){
  DualPivotQuicksort.build(instance);
}
",19,2,"sort:build,array:instance,",65,0.153584532,Beam
2109,,,25,2,,72,0.152413603,0
2110,,,80,4,,879,2.493702801,0
2111,,,19,2,,286,0.885356263,0
2112,"private static String removeSubTrailers(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}","private static String removeSubCompils(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}",114,8,"removeSubTrailers:removeSubCompils,",11,0.037124451,Beam
2113,"public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}
","public void MakeDirt(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.MakeDirt(instance);
}
",26,6,"makeDirty:MakeDirt,",32,0.065420719,Beam
2114,"public static byte[] toByteArray(String str){
  int len=str.length();
  StringTokenizer st=new StringTokenizer(str,"":"");
  String[] newStrArray=new String[st.countTokens()];
  int j=0;
  while (st.hasMoreTokens()) {
    newStrArray[j]=st.nextToken();
    j++;
  }
  byte[] ret=new byte[newStrArray.length];
  int tmp;
  for (int i=0; i < newStrArray.length; i++) {
    tmp=Integer.parseInt(newStrArray[i],16);
    ret[i]=(byte)(tmp - 128);
  }
  return ret;
}","public static byte[] toByteArray(String char){
  int len=char.length();
  StringTokenizer st=new StringTokenizer(char,"":"");
  String[] newStrArray=new String[st.countTokens()];
  int j=0;
  while (st.hasMoreTokens()) {
    newStrArray[j]=st.nextToken();
    j++;
  }
  byte[] ret=new byte[newStrArray.length];
  int const;
  for (int i=0; i < newStrArray.length; i++) {
    const=Integer.parseInt(newStrArray[i],16);
    ret[i]=(byte)(const - 128);
  }
  return ret;
}",141,8,"str:char,tmp:const,",362,0.828662638,Beam
2115,"public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}","public void readConfigies(SharedPreferences rules,ActionFactory factory){
  boolean visible=false;
  String actionId=rules.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=rules.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}",143,12,"readPrefs:readConfigies,settings:rules,",103,0.224819668,Beam
2116,,,47,3,,700,1.559918137,0
2117,"@Override public void addChild(WXComponent child,int index){
  if (child == null || index < -1) {
    return;
  }
  if (child instanceof WXBaseRefresh) {
    if (!checkRefreshOrLoading(child)) {
      mRefreshs.add(child);
    }
    return;
  }
  if (mChildren == null) {
    mChildren=new ArrayList<>();
  }
  int count=mChildren.size();
  index=index >= count ? -1 : index;
  if (index == -1) {
    mChildren.add(child);
  }
 else {
    mChildren.add(index,child);
  }
}","@Override public void addChild(WXComponent child,int x){
  if (child == null || x < -1) {
    return;
  }
  if (child instanceof WXBaseRefresh) {
    if (!checkRefreshOrLoading(child)) {
      mRefreshs.add(child);
    }
    return;
  }
  if (mChildren == null) {
    mChildren=new ArrayList<>();
  }
  int count=mChildren.size();
  x=x >= count ? -1 : x;
  if (x == -1) {
    mChildren.add(child);
  }
 else {
    mChildren.add(x,child);
  }
}",121,6,"index:x,",19,0.07460717,Beam
2118,,,390,16,,1074,9.849892524878180,0
2119,,,65,3,,424,2.246468258,0
2120,,,69,3,,589,1.942539644,0
2121,"public OkapiBM25(double k1,double b){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(""coefficient k1 must be a non negative constant, not "" + k1);
  this.k1=k1;
  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException(""coefficient b must be in the range [0,1], not "" + b);
  this.b=b;
}","public OkwithBD250(double k1,double b){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(""coefficient k1 must be a non negative constant, not "" + k1);
  this.k1=k1;
  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException(""coefficient b must be in the range [0,1], not "" + b);
  this.b=b;
}",78,3,"OkapiBM25:OkwithBD250,",11,0.029644859,Beam
2122,,,297,10,,1818,8.944641594,0
2123,,,21,1,,49,0.699409982,0
2124,,,23,3,,415,1.017467769,0
2125,,,37,3,,235,0.610190781,0
2126,,,32,3,,166,0.287243112,0
2127,"private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}","private void growOrds(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}",100,8,"growEntries:growOrds,",9,0.028288273,Beam
2128,"public boolean matchesRawNamePattern(Object item){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(item);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}","public boolean matchesFullNamePattern(Object element){
  String post=patternMatcher.getPattern();
  String comment=getElementName(element);
  if (comment == null)   return false;
  int textLength=comment.length();
  int prefixLength=post.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(post.charAt(i)) != Character.toLowerCase(comment.charAt(i)))     return false;
  }
  return true;
}",114,8,"matchesRawNamePattern:matchesFullNamePattern,item:element,text:comment,prefix:post,",1435,3.900554661,Beam
2129,"public static void toString(Iterator<?> iter,String separator,StringBuilder sb){
  while (iter.hasNext()) {
    sb.append(iter.next());
    if (iter.hasNext()) {
      sb.append(separator);
    }
  }
}
","public static void toString(Iterator<?> inner,String interation,StringBuilder sb){
  while (inner.hasNext()) {
    sb.append(inner.next());
    if (inner.hasNext()) {
      sb.append(interation);
    }
  }
}
",57,4,"separator:interation,iter:inner,",100,0.273334316,Beam
2130,"public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
","public static boolean setString(String name){
  if (null == name)   return true;
  return name.equals(EMPTY);
}
",27,2,"isEmpty:setString,string:name,",91,0.219060294,Beam
2131,,,94,7,,1824,5.380370569,0
2132,"private boolean needsUpdate(Long bundleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + bundleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + bundleVersion);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (bundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}","private boolean needUpdate(Long BoodleValue,String serverVersion){
  if (serverVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + BoodleValue);
    Log.i(TAG,""Bean version: "" + serverVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(serverVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + BoodleValue);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (BoodleValue > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + serverVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}",145,4,"needsUpdate:needUpdate,beanVersion:serverVersion,bundleVersion:BoodleValue,",344,1.386775537,Beam
2133,,,60,6,,1540,3.977844206,0
2134,,,548,23,,3854,10.96431914,0
2135,,,98,7,,1246,3.208894916,0
2136,"public void addTailArg(String arg){
  _tailArgs.add(arg);
}
","public void addToolParam(String parse){
  _tailArgs.add(parse);
}
",16,3,"addTailArg:addToolParam,arg:parse,",80,0.173176221,Beam
2137,"public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}","public static double cdf(double val,double rat){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rat * val);
}",37,3,"rate:rat,",50,0.097428993,Beam
2138,,,58,6,,776,2.287850054,0
2139,,,535,13,,3056,11.02868622,0
2140,,,74,8,,1184,3.761244643,0
2142,,,13,2,,108,0.186957335,0
2143,"protected int[] splitSentence(String sentence){
  String[] w=sentence.split(""\\\\s+"");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}","protected int[] splitsentense(String Sentencing){
  String[] w=Sentencing.split(""\\\\s+"");
  int[] ants=new int[w.length];
  for (int i=0; i < w.length; i++)   ants[i]=Vocabulary.id(w[i]);
  return ants;
}",70,5,"sentence:Sentencing,splitSentence:splitsentense,words:ants,",251,0.719086238,Beam
2144,,,101,6,,1492,47.80045477,0
2145,,,545,19,,3217,62.23909234,0
2146,"@Override public void send(Buffer buffer){
  _outProxy.write(_outWriter,buffer,false);
}
","@Override public void to(Buffer length){
  _outProxy.write(_inRW,length,false);
}
",22,4,"buffer:length,send:to,_outWriter:_inRW,",258,0.621299342,Beam
2147,"public static String removeQuotes(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}","public static String stripRs(String b){
  if (b == null) {
    return null;
  }
  String trrimded=b.trim();
  if (trrimded.length() == 0) {
    return trrimded;
  }
  int i=nextNonQuoteIndex(trrimded,0,true);
  int j=nextNonQuoteIndex(trrimded,trrimded.length() - 1,false);
  return trrimded.substring(i,j + 1);
}",87,5,"removeQuotes:stripRs,s:b,trimmed:trrimded,",188,0.736803019,Beam
2148,"public static String normalizeUrl(String requestUrl) throws OAuthException {
  if ((requestUrl == null) || (requestUrl.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uri;
  try {
    uri=new URI(requestUrl);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authority=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authority == null || scheme == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authority=authority.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals(""http"") && uri.getPort() == 80) || (scheme.equals(""https"") && uri.getPort() == 443)) {
    int index=authority.lastIndexOf("":"");
    if (index >= 0) {
      authority=authority.substring(0,index);
    }
  }
  return scheme + ""://"" + authority+ uri.getRawPath();
}","public static String normalateLocation(String createUr) throws OAuthException {
  if ((createUr == null) || (createUr.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uri;
  try {
    uri=new URI(createUr);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authority=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authority == null || scheme == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authority=authority.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals(""http"") && uri.getPort() == 80) || (scheme.equals(""https"") && uri.getPort() == 443)) {
    int index=authority.lastIndexOf("":"");
    if (index >= 0) {
      authority=authority.substring(0,index);
    }
  }
  return scheme + ""://"" + authority+ uri.getRawPath();
}",200,7,"normalizeUrl:normalateLocation,requestUrl:createUr,",69,0.315611462,Beam
2149,,,100,8,,1121,2.480999474,0
2150,"public void addInputMethodListener(InputMethodListener l){
  m_textPane.addInputMethodListener(l);
}
","public void addInputFunctionCallback(InputMethodListener l){
  m_textPane.addInputFunctionCallback(l);
}
",16,3,"addInputMethodListener:addInputFunctionCallback,",21,0.046798416,Beam
2151,"public void testmirror(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}","public void testmirror(File orig,File ormani,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,ormani);
  if (interlaced)   additionalTestInterlaced(orig,ormani);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}",456,16,"origni:ormani,",59,0.33931543,Beam
2152,,,102,6,,191,0.479503818,0
2153,,,211,16,,4612,20.83801504,0
2154,,,14,2,,197,0.46338251,0
2155,,,60,3,,786,2.767061595,0
2156,,,81,7,,554,1.394940122,0
2157,"public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
","public Value instance(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
",52,5,"sample:instance,",18,0.05136644,Beam
2158,"private void initializeLocalAndTargetInfo() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}","private void start() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}",340,11,"initializeLocalAndTargetInfo:start,",20,0.052552092,Beam
2159,"static double svd_pythag(double a,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(a),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}","static double svd_pythag(double as,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(as),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(as),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}",132,9,"a:as,",3,0.026629257,Beam
2160,,,55,6,,926,2.295213131,0
2161,"public Set<T> keySet(){
  return Collections.unmodifiableSet(map.keySet());
}
","public Set<T> pointFrame(){
  return Collections.unmodifiableSet(map.pointFrame());
}
",22,2,"keySet:pointFrame,",9,0.029935881,Beam
2162,"private void applyImageMatrix(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}","private void transform(float video,float bottom,boolean center,boolean animate){
  if (mBitmap != null && video > 0 && bottom > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((video - mBitmap.getWidth()) / 2,(bottom - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(video / BitmapUtils.getRectWidth(mImagePoints),bottom / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=video > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(video / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=bottom > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(bottom / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + video) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + bottom) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}",491,17,"applyImageMatrix:transform,width:video,height:bottom,",841,3.842892381,Beam
2163,"private String idString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}","private String intArray(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}",55,3,"idString:intArray,",72,0.220053331,Beam
2164,,,186,7,,1591,12.66780526,0
2165,"public void runWithRetries(RetryableTask task) throws Exception {
  boolean maxSleepIntervalHit=false;
  for (int i=0; i < numAttempts; i++) {
    try {
      task.run();
      return;
    }
 catch (    Exception e) {
      if (i == numAttempts - 1) {
        throw e;
      }
      int sleepTime;
      if (maxSleepIntervalHit) {
        sleepTime=maxSleepInterval;
      }
 else {
        sleepTime=baseSleepInterval * (int)Math.pow(2,i);
      }
      LOG.error(""Got an exception! Sleeping for "" + sleepTime + "" seconds and retrying."",e);
      try {
        Thread.sleep(sleepTime * 1000);
      }
 catch (      InterruptedException ie) {
        LOG.error(""Unexpected interruption!"",ie);
        throw ie;
      }
    }
  }
}","public void runWithRetries(RetryableTask sync) throws Exception {
  boolean maxSleepIntervalHit=false;
  for (int i=0; i < numAttempts; i++) {
    try {
      sync.run();
      return;
    }
 catch (    Exception e) {
      if (i == numAttempts - 1) {
        throw e;
      }
      int scrollCount;
      if (maxSleepIntervalHit) {
        scrollCount=maxSleepInterval;
      }
 else {
        scrollCount=baseSleepIvals * (int)Math.pow(2,i);
      }
      LOG.error(""Got an exception! Sleeping for "" + scrollCount + "" seconds and retrying."",e);
      try {
        Thread.sleep(scrollCount * 1000);
      }
 catch (      InterruptedException ie) {
        LOG.error(""Unexpected interruption!"",ie);
        throw ie;
      }
    }
  }
}",139,10,"task:sync,sleepTime:scrollCount,baseSleepInterval:baseSleepIvals,",1617,12.87509364,Beam
2166,"protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
","protected String buildQualifierReq(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
",45,3,"buildQualifierRegex:buildQualifierReq,",6,0.019106444,Beam
2167,"public StreamThroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}","public streamthroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}",36,8,"StreamThroughput:streamthroughput,",15,0.033561055,Beam
2168,,,104,8,,1844,6.067655853,0
2169,,,135,9,,2357,9.174048607,0
2170,"public final boolean remove(final URI serviceURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.remove(serviceURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.remove(serviceURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.remove(factory);
      }
    }
  }
  return modified;
}
","public final boolean destroy(final URI servicesPath){
  boolean modified=false;
synchronized (this) {
    if (aliles.destroy(servicesPath) != null) {
      modified=true;
    }
    final ServiceFactory fixture=services.destroy(servicesPath);
    if (fixture != null) {
      modified=true;
      if (fixture instanceof CustomServiceFactory) {
        customServices.destroy(fixture);
      }
    }
  }
  return modified;
}
",80,7,"remove:destroy,serviceURI:servicesPath,aliases:aliles,factory:fixture,",686,1.967617154,Beam
2171,,,79,6,,265,1.253370746,0
2172,"@Deprecated private List<CharSequence> buildLimitedNetworksList(){
  final Context context=getActivity();
  final ArrayList<CharSequence> limited=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscriberId=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {
      limited.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    limited.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    limited.add(getText(R.string.data_usage_tab_ethernet));
  }
  return limited;
}","@Deprecated private List<CharSequence> buildLimitednetWorksTable(){
  final Context context=getActivity();
  final ArrayList<CharSequence> given=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscribriberName=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscribriberName))) {
      given.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscribriberName))) {
      given.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscribriberName))) {
      given.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    given.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    given.add(getText(R.string.data_usage_tab_ethernet));
  }
  return given;
}",192,5,"buildLimitedNetworksList:buildLimitednetWorksTable,subscriberId:subscribriberName,limited:given,",1160,3.202982064,Beam
2173,,,88,5,,293,0.774168416,0
2174,"public void close(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
","public void drop(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.drop(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
",81,5,"close:drop,",5,0.031345383,Beam
2175,"@Override public void valueChanged(TreeSelectionEvent e){
  if (preventEvent) {
    return;
  }
  if (mainFrame != null) {
    List<Operator> selectedOperators=getSelectedOperators();
    if (selectedOperators != null && !selectedOperators.isEmpty()) {
      mainFrame.selectOperators(selectedOperators);
    }
  }
}
","@Override public void Valuechanged(TreeSelectionEvent e){
  if (preventEvent) {
    return;
  }
  if (MainFram != null) {
    List<Operator> selectedIterters=getSelectedOperators();
    if (selectedIterters != null && !selectedIterters.isEmpty()) {
      MainFram.selectOperators(selectedIterters);
    }
  }
}
",59,5,"valueChanged:Valuechanged,selectedOperators:selectedIterters,mainFrame:MainFram,",542,1.545521959,Beam
2176,"public boolean free(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}","public boolean info(T out){
  AtomicInteger topRef=_top;
  while (true) {
    final int level=topRef.get();
    if (_size <= level) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(level,null,out);
    topRef.compareAndSet(level,level + 1);
    if (isFree) {
      return true;
    }
  }
}",75,8,"obj:out,free:info,top:level,_capacity:_size,",458,1.31139375,Beam
2177,,,204,14,,1020,3.322800601,0
2178,"public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
","public static boolean isConnected(NetType netType,NetworkInfo deviceInfo){
  if (netType == NetType.Any && deviceInfo != null && isConnected(deviceInfo))   return true;
 else   if (netType == NetType.Wifi && deviceInfo != null && deviceInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(deviceInfo))   return true;
 else   if (netType == NetType.Mobile && deviceInfo != null && deviceInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(deviceInfo))   return true;
  return false;
}
",98,3,"networkInfo:deviceInfo,",8,0.035859724,Beam
2179,,,68,4,,717,2.065147658,0
2180,"public float toMeters(double pixels){
  return (float)(pixels * METERS_PER_PIXELS);
}
","public float toMaipers(double picks){
  return (float)(picks * METERS_PER_PICKELS);
}
",19,3,"pixels:picks,toMeters:toMaipers,METERS_PER_PIXELS:METERS_PER_PICKELS,",267,0.628284971,Beam
2181,,,44,4,,352,0.784784869,0
2182,,,31,4,,227,0.568984091,0
2183,"public void startLaunchNotifier(){
  if (m_launchNotification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}
","public void startLaunchnotification(){
  if (m_launchPartification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}
",32,3,"startLaunchNotifier:startLaunchnotification,m_launchNotification:m_launchPartification,",52,0.082492439,Beam
2184,,,136,5,,927,2.843748661,0
2185,,,75,7,,849,2.166434614,0
2186,"public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}","public final static int seINT(char[] digitChars,int pointer,int len){
  int num=digitChars[pointer] - '0';
  len+=pointer;
  if (++pointer < len) {
    num=(num * 10) + (digitChars[pointer] - '0');
    if (++pointer < len) {
      num=(num * 10) + (digitChars[pointer] - '0');
      if (++pointer < len) {
        num=(num * 10) + (digitChars[pointer] - '0');
        if (++pointer < len) {
          num=(num * 10) + (digitChars[pointer] - '0');
          if (++pointer < len) {
            num=(num * 10) + (digitChars[pointer] - '0');
            if (++pointer < len) {
              num=(num * 10) + (digitChars[pointer] - '0');
              if (++pointer < len) {
                num=(num * 10) + (digitChars[pointer] - '0');
                if (++pointer < len) {
                  num=(num * 10) + (digitChars[pointer] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}",244,5,"parseInt:seINT,offset:pointer,",209,0.992913159,Beam
2187,,,110,7,,1812,4.192196953,0
2188,,,166,6,,1523,4.070060702,0
2189,,,25,3,,368,1.361265186,0
2190,,,54,3,,582,2.026386098,0
2191,,,46,5,,808,2.027988565,0
2192,,,102,5,,1026,2.349887013,0
2193,,,181,11,,264,0.618641106,0
2194,"public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}","public void set(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}",41,5,"clear:set,",8,0.023053332,Beam
2195,"@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
","@Override public void ImplICT(String cache){
  cache=safetyKey(cache);
  final File file=new File(cacheDirectory,cache);
  file.delete();
}
",36,4,"evict:ImplICT,key:cache,",52,0.171400146,Beam
2196,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}","public int raw() throws IOException {
  int val;
  if ((val=is.raw()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.raw() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.raw() & 0x3f) << 6) | (is.raw() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}",127,3,"read:raw,",20,0.075826053,Beam
2197,,,114,9,,1046,2.261752236,0
2198,,,109,6,,866,2.270074399,0
2199,,,74,4,,83,0.190638109,0
2200,"public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}
","public MLResults operation(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return operation(script,scriptExecutor);
}
",58,8,"execute:operation,",18,0.185447971,Beam
2201,,,16,3,,467,4.303036968,0
2202,"private int insertTestDataLocalDTTypes(PreparedStatement pstmt) throws Exception {
  pstmt.setInt(1,1);
  pstmt.setDate(2,testSqlDate);
  pstmt.setTime(3,testSqlTime);
  pstmt.setTimestamp(4,testSqlTimeStamp);
  pstmt.setTimestamp(5,testSqlTimeStamp);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,2);
  pstmt.setObject(2,testLocalDate);
  pstmt.setObject(3,testLocalTime);
  pstmt.setObject(4,testLocalDateTime);
  pstmt.setObject(5,testLocalDateTime);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,3);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,4);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE,10);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,5);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,6);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR,10);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR,20);
  assertEquals(1,pstmt.executeUpdate());
  if (pstmt instanceof CallableStatement) {
    CallableStatement cstmt=(CallableStatement)pstmt;
    cstmt.setInt(""id"",7);
    cstmt.setDate(""d"",testSqlDate);
    cstmt.setTime(""t"",testSqlTime);
    cstmt.setTimestamp(""dt"",testSqlTimeStamp);
    cstmt.setTimestamp(""ts"",testSqlTimeStamp);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",8);
    cstmt.setObject(""d"",testLocalDate);
    cstmt.setObject(""t"",testLocalTime);
    cstmt.setObject(""dt"",testLocalDateTime);
    cstmt.setObject(""ts"",testLocalDateTime);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",9);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",10);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",11);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",12);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR,20);
    assertEquals(1,cstmt.executeUpdate());
    return 12;
  }
  return 6;
}","private int insertTestDataLocalDTSype(PreparedStatement pstmt) throws Exception {
  pstmt.setInt(1,1);
  pstmt.setDate(2,testSqlDate);
  pstmt.setTime(3,testSqlTime);
  pstmt.setTimestamp(4,testSqlTimeStamp);
  pstmt.setTimestamp(5,testSqlTimeStamp);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,2);
  pstmt.setObject(2,testLocalDate);
  pstmt.setObject(3,testLocalTime);
  pstmt.setObject(4,testLocalDateTime);
  pstmt.setObject(5,testLocalDateTime);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,3);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,4);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE,10);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,5);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,6);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR,10);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR,20);
  assertEquals(1,pstmt.executeUpdate());
  if (pstmt instanceof CallableStatement) {
    CallableStatement cstmt=(CallableStatement)pstmt;
    cstmt.setInt(""id"",7);
    cstmt.setDate(""d"",testSqlDate);
    cstmt.setTime(""t"",testSqlTime);
    cstmt.setTimestamp(""dt"",testSqlTimeStamp);
    cstmt.setTimestamp(""ts"",testSqlTimeStamp);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",8);
    cstmt.setObject(""d"",testLocalDate);
    cstmt.setObject(""t"",testLocalTime);
    cstmt.setObject(""dt"",testLocalDateTime);
    cstmt.setObject(""ts"",testLocalDateTime);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",9);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",10);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",11);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",12);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR,20);
    assertEquals(1,cstmt.executeUpdate());
    return 12;
  }
  return 6;
}",865,9,"insertTestDataLocalDTTypes:insertTestDataLocalDTSype,",5,0.150541774,Beam
2203,"private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}","private byte[] toZLIB(RenderedImage input,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(input,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}",44,4,"image:input,",3,0.053421354,Beam
2204,,,44,3,,467,6.704990451,0
2205,"public void recordState(DialogueState state,String name){
  states.put(name,state);
  if (!listModel.contains(name)) {
    int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.add(position,name);
  }
}","public void recordName(DialogueState session,String value){
  groups.put(value,session);
  if (!listModel.contains(value)) {
    int position=value.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.add(position,value);
  }
}",67,6,"name:value,state:session,recordState:recordName,states:groups,",765,8.432692575,Beam
2206,,,263,11,,3852,47.40351842,0
2207,,,135,8,,1659,25.45631727,0
2208,"protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}","protected Object formatType(String service){
  int openParen=service.indexOf(""("");
  String type=service.substring(0,openParen);
  String value=service.substring(openParen + 1,service.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}",213,10,"parseValue:formatType,string:service,",96,1.581146812,Beam
2209,,,41,4,,337,3.872148108,0
2210,,,36,2,,87,1.895763723,0
2211,,,34,5,,217,3.370424974,0
2212,,,118,7,,238,3.105887214,0
2213,,,28,4,,637,9.347663963,0
2214,,,159,15,,2135,38.21093951,0
2215,"private static String readName(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return readName(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=readName(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}","private static String getPath(DataInputStream dis,byte bin[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return getPath(bin,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=getPath(dis,bin);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}",163,8,"readName:getPath,data:bin,",361,10.48645836,Beam
2216,,,38,2,,220,3.264197167,0
2217,"protected List<DecompoundedWord> makeSplit(String aWord){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int i=0; i < aWord.length(); i++) {
    String leftWord=aWord.substring(0,i + 1);
    String rightWord=aWord.substring(i + 1);
    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGood && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + ""+"" + rightWord);
      split.setSplitPos(i);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + ""("" + morpheme+ "")+""+ rightWord);
          split.setSplitPos(i);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}","protected List<DecompoundedWord> makesFilter(String apiLine){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int i=0; i < apiLine.length(); i++) {
    String leftWord=apiLine.substring(0,i + 1);
    String rightWord=apiLine.substring(i + 1);
    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGood && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + ""+"" + rightWord);
      split.setSplitPos(i);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + ""("" + morpheme+ "")+""+ rightWord);
          split.setSplitPos(i);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}",247,15,"aWord:apiLine,makeSplit:makesFilter,",88,1.897616684,Beam
2218,"public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
","public static boolean Save(File home,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(home));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
",102,6,"file:home,save:Save,",167,1.883255748,Beam
2219,"public static boolean isSupportedAddRPProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){
  s_logger.info(String.format(""Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]..."",currentVpool.getLabel(),newVpool.getLabel()));
  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {
    return false;
  }
  if (volume.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint Protection since it already exists."");
    return false;
  }
  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first."");
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add MetroPoint Protection directly to VPLEX Local volume. "" + ""Upgrade from VPLEX Local to VPLEX Distributed first."");
    return false;
  }
  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};
  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (!changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are invalid: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  include=new String[]{PROTECTION_VARRAY_SETTINGS};
  changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are required: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {
    VirtualPoolChangeOperationEnum op=vplexCommonChecks(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);
    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {
      return false;
    }
  }
  return true;
}
","public static boolean compare(Volume cache,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){
  s_logger.info(String.format(""Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]..."",currentVpool.getLabel(),newVpool.getLabel()));
  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {
    return false;
  }
  if (cache.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint Protection since it already exists."");
    return false;
  }
  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first."");
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add MetroPoint Protection directly to VPLEX Local volume. "" + ""Upgrade from VPLEX Local to VPLEX Distributed first."");
    return false;
  }
  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};
  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (!changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are invalid: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  include=new String[]{PROTECTION_VARRAY_SETTINGS};
  changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are required: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {
    VirtualPoolChangeOperationEnum op=vplexCommonChecks(cache,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);
    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {
      return false;
    }
  }
  return true;
}
",373,29,"isSupportedAddRPProtectionVirtualPoolChange:compare,volume:cache,",345,8.496665517,Beam
2220,"protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + resource.getName() + ""..."",resource,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
","protected void work(final IResource reader,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + reader.getName() + ""..."",reader,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
",159,8,"resource:reader,",10,0.189584688,Beam
2221,"public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}","public static void trim(CharSequence paTEXT,int[] aPpan){
  int begin=aPpan[0];
  int end=aPpan[1] - 1;
  CharSequence data=paTEXT;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aPpan[0]=begin;
  aPpan[1]=end;
}",109,6,"aSpan:aPpan,aText:paTEXT,",77,1.331585368,Beam
2222,,,51,5,,1049,12.20364162,0
2223,,,54,4,,730,7.879048379,0
2224,"@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
","@Override public void create(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
",41,2,"update:create,",10,0.124360148,Beam
2226,"private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}","private int feed(FileDescriptor issfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(issfd,newfd,isaa);
}",29,4,"ssfd:issfd,accept:feed,",197,4.214482423,Beam
2227,,,18,2,,248,5.317070222,0
2228,,,160,7,,1224,23.80536059,0
2229,,,672,29,,4300,53.498476787408200,0
2230,"public void reset(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}","public void render(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlay.render();
  mNextPlayer.render();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}",46,7,"reset:render,mCurrentPlayer:mCurrentPlay,",141,1.68849295,Beam
2231,"public void andWith(List<QueryPredicate> predicates){
  children.addAll(predicates);
}
","public void ANDITH(List<QueryPredicate> predicators){
  children.addAll(predicators);
}
",19,3,"andWith:ANDITH,predicates:predicators,",74,1.182423929,Beam
2232,,,23,3,,53,0.621573166,0
2233,"protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}","protected void empty(int pagePos){
  if (pagePos >= 0 && pagePos < getItemCount()) {
    list.empty(pagePos);
  }
}",30,3,"itemPosition:pagePos,remove:empty,",206,2.633563244,Beam
2234,"public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
","public static String buildMessageURL(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
",75,6,"buildResponseUrl:buildMessageURL,",41,0.722309287,Beam
2235,"public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}","public List<LocalTime> test(int n){
  List<LocalTime> test=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    test.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return test;
}",89,5,"top:test,",27,0.498474828,Beam
2236,,,99,6,,769,10.80696974,0
2237,,,180,11,,262,3.389155062,0
2238,"public void start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
","public void load(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
",91,7,"start:load,",17,0.184520717,Beam
2239,"@Override public boolean execute(@NotNull PsiElement pe,@NotNull ResolveState state){
  if (pe instanceof PsiVariable) {
    final PsiVariable pvar=(PsiVariable)pe;
    if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC)) {
      if (check(pvar,state)) {
        myResultList.add(pvar);
      }
    }
  }
  return true;
}
","@Override public boolean execute(@NotNull PsiElement e,@NotNull ResolveState state){
  if (e instanceof PsiVariable) {
    final PsiVariable pvar=(PsiVariable)e;
    if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC)) {
      if (check(pvar,state)) {
        myResultList.add(pvar);
      }
    }
  }
  return true;
}
",75,7,"pe:e,",19,0.273135694,Beam
2240,"private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(writeFont);
  if (writeFont) {
    oos.writeObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
","private void writeClass(ObjectOutputStream oots) throws IOException {
  oots.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oots.writeBoolean(writeFont);
  if (writeFont) {
    oots.writeClass(f.getName());
    oots.writeInt(f.getSize());
    oots.writeInt(f.getStyle());
  }
  writeStroke(oots,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oots,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
",94,6,"writeObject:writeClass,oos:oots,",61,0.604173728,Beam
2241,,,11,2,,133,1.144551035,0
2243,"protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}
","protected final void readI(ByteBuffer ptr,int value){
  ptr.put((byte)value);
}
",23,3,"writeC:readI,buf:ptr,",152,1.118327896,Beam
2244,"void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}","void loadFiles(File format) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile ctx=new XmlFile(){
  }
;
  ctx.rootFromFile(format);
}",37,3,"readFile:loadFiles,file:format,xf:ctx,",290,2.358137004,Beam
2245,"private void refreshChallengeCounts(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
","private void refreshChallengescountments(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCannels);
}
",16,4,"refreshChallengeCounts:refreshChallengescountments,mCategories:mCannels,",31,0.243570638,Beam
2246,,,128,8,,1228,12.37958267,0
2247,"static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}","static boolean isModulePrivate(final int odions){
  return (odions & ACCESS_TEST) == 0;
}",19,3,"isPackageAccess:isModulePrivate,modifiers:odions,",74,0.816926173,Beam
2248,,,41,5,,1915,20.20345273,0
2249,"private void removeGapsWithEdgeConcentration(int nodesLevel[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphMatrix[n][i] > 0) {
        if (nodesLevel[i] > nodesLevel[n] + 1) {
          int tempLevel=nodesLevel[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < nodesLevel[i] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][i]=graphMatrix[n][i];
            graphMatrix[i][tempnode]=-graphMatrix[n][i];
            graphMatrix[n][i]=0;
            graphMatrix[i][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];
          int level=nodesLevel[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
          temp3[m_nodes.size() - 1]=level;
          nodesLevel=temp3;
          level++;
          int m;
          for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
            temp3[m_nodes.size() - 1]=level;
            nodesLevel=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[i][n]=-1 * graphMatrix[n][i];
        }
      }
    }
  }
}","private void compute(int numbersUnit[]){
  final int temp=m_nodes.size(), temp2=graphCube[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphCube[n][i] > 0) {
        if (numbersUnit[i] > numbersUnit[n] + 1) {
          int tempLevel=numbersUnit[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < numbersUnit[i] - 1) {
            tempNodePresent=false;
            for (; k < graphCube.length; k++) {
              if (graphCube[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphCube[tempnode][i]=graphCube[n][i];
            graphCube[i][tempnode]=-graphCube[n][i];
            graphCube[n][i]=0;
            graphCube[i][n]=0;
            continue;
          }
          int len=graphCube.length;
          int tempMatrix[][]=new int[graphCube.length + (numbersUnit[i] - numbersUnit[tempnode] - 1)][graphCube.length + (numbersUnit[i] - numbersUnit[tempnode] - 1)];
          int level=numbersUnit[tempnode] + 1;
          copyMatrix(graphCube,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(numbersUnit,0,temp3,0,numbersUnit.length);
          temp3[m_nodes.size() - 1]=level;
          numbersUnit=temp3;
          level++;
          int m;
          for (m=len; m < len + numbersUnit[i] - numbersUnit[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(numbersUnit,0,temp3,0,numbersUnit.length);
            temp3[m_nodes.size() - 1]=level;
            numbersUnit=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphCube=tempMatrix;
        }
 else {
          graphCube[i][n]=-1 * graphCube[n][i];
        }
      }
    }
  }
}",875,23,"removeGapsWithEdgeConcentration:compute,nodesLevel:numbersUnit,graphMatrix:graphCube,",452,6.881519381,Beam
2250,"void addReporter(String textReporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
","void addExpressor(String textSuppatter,int data,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textSuppatter);
  l.setLocation(data,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
",77,5,"addReporter:addExpressor,textReporter:textSuppatter,xx:data,",630,5.897565079,Beam
2251,,,36,3,,531,6.489503372,0
2252,"public static void writeToFile(String content,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}
","public static void write2File(String content,File dsstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dsstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}",43,4,"dstFile:dsstFile,writeToFile:write2File,",191,1.574882535,Beam
2253,,,29,4,,420,4.727680604,0
2254,,,16,3,,482,3.477084104,0
2255,,,120,8,,1219,14.3648977,0
2256,,,53,3,,102,0.80703309,0
2257,,,43,4,,733,7.686542042,0
2258,"public boolean isValid(World world){
  return true;
}
","public boolean IsLegal(World world){
  return true;
}
",12,2,"isValid:IsLegal,",36,0.322947299,Beam
2260,,,51,2,,175,1.38639036,0
2261,,,90,6,,1306,14.17262362,0
2262,"private static boolean compareParam(String jdiffParam,Type reflectionParamType){
  if (jdiffParam == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jdiffParam.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jdiffParam.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jdiffParam.equals(reflectionParam);
  }
  return false;
}","private static boolean CompareSingle(String jiffAM,Type reflectionSyncName){
  if (jiffAM == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionSyncName);
  if (jiffAM.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jiffAM.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jiffAM=jiffAM.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jiffAM.equals(reflectionParam);
  }
  return false;
}",113,6,"reflectionParamType:reflectionSyncName,jdiffParam:jiffAM,compareParam:CompareSingle,",442,8.816206912,Beam
2263,"@Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}","@Ignore @Test public void test_DR_PGS_4NODEES_() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}",313,16,"test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver:test_DR_PGS_4NODEES_,",3,0.156841592,Beam
2264,"void scramble(){
  initialSize=getSize();
  int a[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)a.length;
  for (int i=a.length; --i >= 0; ) {
    a[i]=(int)(i * f);
  }
  for (int i=a.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=a[i];
    a[i]=a[j];
    a[j]=t;
  }
  arr=a;
}","void Screamble(){
  initialSize=getSize();
  int area[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)area.length;
  for (int i=area.length; --i >= 0; ) {
    area[i]=(int)(i * f);
  }
  for (int i=area.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=area[i];
    area[i]=area[j];
    area[j]=t;
  }
  arr=area;
}",134,8,"scramble:Screamble,a:area,",42,0.351658332,Beam
2265,"public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}","public static AttackStatus calculatedPhysicalStat(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatedPhysicalStat(attacker,attacked,isMainHand,0,100,false,false);
}",34,4,"calculatePhysicalStatus:calculatedPhysicalStat,",81,0.791300583,Beam
2266,,,51,4,,291,3.681796396,0
2267,"@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}","@Override public String append(String route,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(route),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}",285,13,"path:route,",4,0.069112702,Beam
2268,"public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}
","public boolean destroy(ImageInfo item){
  final int location=getLocation(item);
  final boolean promored=data.destroy(item);
  notifyItemRemoved(location);
  return promored;
}
",37,5,"remove:destroy,object:item,removed:promored,",272,2.469609531,Beam
2269,,,38,4,,91,0.957900063,0
2270,,,85,3,,110,0.872596045,0
2271,,,137,7,,919,12.02246272,0
2272,"public void deleteVVset(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}","public void deleteVFstore(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}",149,7,"deleteVVset:deleteVFstore,",15,0.170012593,Beam
2273,,,51,3,,353,4.150928215,0
2274,,,43,5,,1074,15.40971229,0
2275,,,81,5,,213,1.774042396,0
2276,,,68,4,,631,4.575099587,0
2277,"@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
","@Override public PollResult startPoll(PollController syn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=syn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + syn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(syn);
  return PollResult.START;
}
",126,9,"conn:syn,",25,0.210217222,Beam
2278,"private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
","private void configure(Host project,HostParam param){
  if (param.getName() != null) {
    project.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    project.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    project.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    project.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    project.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    project.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    project.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    project.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    project.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    project.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    project.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      project.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      project.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    project.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
",414,4,"host:project,populateHostData:configure,",152,1.44990596,Beam
2279,"private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}","private void addClasses(Class<?>[] features,HashSet<Class<?>> result,String fieldName){
  if (features == null || features.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : features)   result.add(classe);
}",64,6,"classes:features,",71,1.054489768,Beam
2280,"public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
","public boolean option(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
",46,5,"select:option,",6,0.058307536,Beam
2281,"public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}","public static ResultSet pointInfo(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}",67,5,"pointTable:pointInfo,",65,0.490831629,Beam
2283,,,115,6,,893,6.802987949,0
2284,,,71,6,,2016,27.93463926,0
2285,,,24,4,,715,8.402182249,0
2286,"public static void dropIndex(Connection conn,String schema,String table) throws SQLException {
  init(conn);
  PreparedStatement prep=conn.prepareStatement(""SELECT ID FROM "" + SCHEMA + "".INDEXES WHERE SCHEMA=? AND TABLE=?"");
  prep.setString(1,schema);
  prep.setString(2,table);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".INDEXES WHERE ID=?"");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(conn,schema,table,false);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".ROWS WHERE INDEXID=? AND ROWNUM<10000"");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".MAP M ""+ ""WHERE NOT EXISTS (SELECT * FROM ""+ SCHEMA+ "".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}","public static void remove(Connection conn,String Scheta,String database) throws SQLException {
  init(conn);
  PreparedStatement prep=conn.prepareStatement(""SELECT ID FROM "" + SCHEMA + "".INDEXES WHERE SCHEMA=? AND TABLE=?"");
  prep.setString(1,Scheta);
  prep.setString(2,database);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".INDEXES WHERE ID=?"");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(conn,Scheta,database,false);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".ROWS WHERE INDEXID=? AND ROWNUM<10000"");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".MAP M ""+ ""WHERE NOT EXISTS (SELECT * FROM ""+ SCHEMA+ "".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}",217,9,"dropIndex:remove,table:database,schema:Scheta,",606,5.708500862,Beam
2288,,,99,6,,997,9.616030133,0
2289,"@Override public int hashCode(){
  int code=0;
  if (fPublicId != null) {
    code+=fPublicId.hashCode();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.hashCode();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.hashCode();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.hashCode();
  }
  if (fNamespace != null) {
    code+=fNamespace.hashCode();
  }
  return code;
}","@Override public int dashKey(){
  int id=0;
  if (fPublicId != null) {
    id+=fPublicId.dashKey();
  }
  if (fLiteralSystemId != null) {
    id+=fLiteralSystemId.dashKey();
  }
  if (fBaseSystemId != null) {
    id+=fBaseSystemId.dashKey();
  }
  if (fExpandedSystemId != null) {
    id+=fExpandedSystemId.dashKey();
  }
  if (fNamespace != null) {
    id+=fNamespace.dashKey();
  }
  return id;
}",97,7,"hashCode:dashKey,code:id,",68,0.530363711,Beam
2290,,,40,2,,276,3.053810378,0
2291,"protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}","protected String transform(URL httpLine,String tag){
  if (tag == null || tag.length() == 0) {
    return null;
  }
  if (!tag.startsWith(""http"")) {
    if (tag.startsWith(""/"")) {
      tag=httpLine.getProtocol() + ""://"" + httpLine.getAuthority()+ tag;
    }
 else {
      if (tag.contains("":"")) {
        return null;
      }
      String path=httpLine.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      tag=httpLine.getProtocol() + ""://"" + httpLine.getAuthority()+ path+ ""/""+ tag;
    }
  }
  tag=normalizeUrlEnding(tag);
  String l=tag.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return tag;
}",238,7,"baseUrl:httpLine,computeFullUrl:transform,link:tag,",486,10.64069794,Beam
2292,,,47,6,,1360,10.41178391,0
2293,,,49,3,,483,4.874224579,0
2294,"@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}","@Override public final void readInt(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  device.write(work,0,2);
}",50,4,"writeShort:readInt,dis:device,",299,2.539079611,Beam
2295,"@RequestProcessing(value=""/member/{userName}/following/tags"",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {
  final JSONObject user=(JSONObject)request.getAttribute(User.USER);
  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(""skinDirName""));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName(""/home/following-tags.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(request,response,dataModel);
  String pageNumStr=request.getParameter(""p"");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr=""1"";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt(""userHomeFollowingTagsCnt"");
  final int windowSize=Symphonys.getInt(""userHomeFollowingTagsWindowSize"");
  fillHomeUser(dataModel,user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  avatarQueryService.fillUserAvatarURL(user);
  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);
  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);
  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
    for (    final JSONObject followingTag : followingTags) {
      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);
      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));
    }
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}","@RequestProcessing(value=""/member/{userName}/following/tags"",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void get(final HTTPRequestContext handler,final HttpServletRequest route,final HttpServletResponse feed,final String id) throws Exception {
  final JSONObject user=(JSONObject)route.getAttribute(User.USER);
  route.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(""skinDirName""));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  handler.setRenderer(renderer);
  renderer.setTemplateName(""/home/following-tags.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(route,feed,dataModel);
  String pageNumStr=route.getParameter(""p"");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr=""1"";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt(""userHomeFollowingTagsCnt"");
  final int windowSize=Symphonys.getInt(""userHomeFollowingTagsWindowSize"");
  fillHomeUser(dataModel,user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  avatarQueryService.fillUserAvatarURL(user);
  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);
  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);
  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
    for (    final JSONObject followingTag : followingTags) {
      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);
      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));
    }
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}",570,24,"showHomeFollowingTags:get,request:route,response:feed,userName:id,context:handler,",1419,13.23838574,Beam
2296,,,95,6,,1362,19.7681907,0
2297,,,153,8,,850,6.059529122,0
2298,,,19,2,,142,0.862543186,0
2299,"private void copyACls(final List<AccessControlLevel> accessControlLevels2){
  for (  AccessControlLevel acl : this.accessControlLevels) {
    accessControlLevels2.add(new AccessControlLevel(acl));
  }
}","private void copyACls(final List<AccessControlLevel> accessControlLevelments1){
  for (  AccessControlLevel kl : this.accessControlLevels) {
    accessControlLevelments1.add(new AccessControlLevel(kl));
  }
}",35,3,"accessControlLevels2:accessControlLevelments1,acl:kl,",296,3.785675029,Beam
2300,"protected Object finish(Map settings) throws WizardException {
  return provider.finish(settings);
}
","protected Object promipe(Map rules) throws WizardException {
  return provider.promipe(rules);
}
",19,3,"settings:rules,finish:promipe,",91,0.763962118,Beam
2301,,,27,1,,63,0.782276833,0
2302,,,23,3,,433,4.964282334,0
2303,,,177,12,,3974,126.3108767,0
2304,,,52,4,,996,11.45451105,0
2305,,,20,2,,283,2.458339361,0
2306,,,131,8,,1140,9.147957687,0
2307,"private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}
","private boolean matchesAnyTag(String typeName){
  return tagNames.contains(typeName);
}
",17,3,"tagName:typeName,",27,0.265513062,Beam
2308,"public void add(DataSource source,boolean visible){
  add(data.size(),source,visible);
}
","public void address(DataSource source,boolean visible){
  address(cache.size(),source,visible);
}
",25,4,"add:address,data:cache,",803,6.966227305,Beam
2309,"private static int indexOf(int fromIndex,CharSequence csq){
  if (csq == null)   return 0;
  int length=csq.length();
  int j=fromIndex;
  int i=(j < length) ? csq.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? csq.charAt(j++) : 0;
  return i;
}","private static int fixOF(int FromPoint,CharSequence ceql){
  if (ceql == null)   return 0;
  int length=ceql.length();
  int j=FromPoint;
  int i=(j < length) ? ceql.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? ceql.charAt(j++) : 0;
  return i;
}",80,6,"indexOf:fixOF,fromIndex:FromPoint,csq:ceql,",425,4.947648466,Beam
2310,"public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}
","public static boolean IStrue(Map<String,Object> dict,String key){
  return IStrue(dict,key,false);
}
",28,3,"isTrue:IStrue,",17,0.153947254,Beam
2311,,,19,2,,222,1.778348156,0
2312,"public int hashCode(){
  return font.hashCode() ^ glyphs.length;
}
","public int sumCount(){
  return font.sumCount() ^ glyphs.length;
}
",18,2,"hashCode:sumCount,",9,0.065171977,Beam
2314,,,18,3,,285,1.954860306,0
2315,,,58,5,,880,12.14979501,0
2316,"public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
","public static void current(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.current();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
",33,2,"next:current,",3,0.025903273,Beam
2317,"public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}","public static int ncar(Comparable c1,Comparable c2,boolean nullMoreger){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullMoreger ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullMoreger ? -1 : 1);
  }
  return c1.compareTo(c2);
}",73,4,"compare:ncar,nullGreater:nullMoreger,",114,1.85836362,Beam
2318,"public boolean isSegmentBalanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;
  }
  return true;
}","public boolean isSegmentBanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBanced(ase.getElementType()))     return false;
  }
  return true;
}",87,7,"isSegmentBalanced:isSegmentBanced,",4,0.053907438,Beam
2319,"public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}","public static double[][] make(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}",352,22,"computeWeightMatrix:make,",50,0.595056033,Beam
2320,,,23,1,,25,0.161756313,0
2321,"public boolean isAllGranted(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;
  }
  return count == mPerms.size();
}","public boolean isALLGried(){
  int allow=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     allow++;
  }
  return allow == mPerms.size();
}",62,5,"isAllGranted:isALLGried,count:allow,",223,1.735483368,Beam
2322,"public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
","public void addPoses(Collection<Integer> posations){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(posations);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
",61,5,"removePositions:addPoses,positions:posations,",53,0.485587859,Beam
2323,"public void copyText(){
  int end, start;
  end=selectedCharField.getSelectionEnd();
  start=selectedCharField.getSelectionStart();
  selectedCharField.selectAll();
  selectedCharField.copy();
  selectedCharField.select(start,end);
}
","public void deletetext(){
  int end, start;
  end=selectedColorField.getSelectionEnd();
  start=selectedColorField.getSelectionStart();
  selectedColorField.selectAll();
  selectedColorField.copy();
  selectedColorField.select(start,end);
}
",49,4,"copyText:deletetext,selectedCharField:selectedColorField,",83,0.552466027,Beam
2324,"protected abstract void internalPut(int index,byte b);
","protected abstract void InternalWrite(int index,byte b);
",12,3,"internalPut:InternalWrite,",63,0.429390848,Beam
2325,"private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
","private List<Header> defaultMetelines(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
",56,3,"defaultHeaders:defaultMetelines,",19,0.18533264,Beam
2326,,,148,6,,1218,15.57204641,0
2327,,,31,6,,909,9.609874992,0
2328,"public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}","public static void sync(DimensionsEvent aeSource,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeSource.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}",359,5,"copy:sync,aeDest:aeSource,",99,1.147380801,Beam
2329,,,23,3,,173,1.756381953,0
2330,"public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}","public boolean disconnect() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}",75,6,"leave:disconnect,",8,0.076318347,Beam
2331,,,97,6,,946,11.260929,0
2332,,,103,9,,2257,22.06264243,0
2333,,,102,5,,1185,89.59185753,0
2334,"public void addButton(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}","public void startAction(URL url,String f,ActionListener pal){
  JButton b=new JButton(new ImageIcon(url,f));
  b.setToolTipText(f);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(pal);
  b.setBorderPainted(false);
  add(b);
}",73,5,"addButton:startAction,info:f,al:pal,",576,5.232542388,Beam
2335,"public int syncQuery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
","public int useRequest(String name){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,name);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
",50,5,"query:name,syncQuery:useRequest,",165,1.467251269,Beam
2336,,,34,2,,225,1.940465828,0
2337,,,85,5,,949,8.427252587,0
2338,,,25,4,,371,3.016247932,0
2339,,,414,14,,2686,22.34793016,0
2340,,,103,15,,4136,27.517815868059800,0
2341,,,28,3,,336,3.095606391,0
2342,,,135,7,,383,2.993412137,0
2343,,,91,6,,167,0.844685431,0
2344,,,108,9,,1802,25.52923119,0
2346,,,41,4,,663,7.272986933,0
2347,,,26,3,,438,3.005180792,0
2348,"private String dateToString(Date input){
  if (input == null) {
    return null;
  }
 else {
    return input.toString();
  }
}
","private String dateTODate(Date request){
  if (request == null) {
    return null;
  }
 else {
    return request.toString();
  }
}
",30,2,"input:request,dateToString:dateTODate,",134,1.038693865,Beam
2349,"public synchronized void close() throws IOException {
  if (in == null)   return;
  in.close();
  in=null;
  buf=null;
}
","public synchronized void sync() throws IOException {
  if (in == null)   return;
  in.sync();
  in=null;
  buf=null;
}
",32,3,"close:sync,",18,0.234569506,Beam
2351,"private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pagenum,bbox,rotation,cache);
}","private PDFPage createPage(int patenumm,PDFObject imageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(imageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(imageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(imageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(patenumm,bbox,rotation,cache);
}",133,11,"pagenum:patenumm,pageObj:imageObj,",80,0.839455708,Beam
2352,,,174,12,,2560,21.69256897,0
2353,,,32,5,,1069,11.58436742,0
2354,"public void addItem(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}","public void AddElement(Artist artist,int point){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (point < getItemCount() || point > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(point,artist);
  notifyItemInserted(point);
}",60,4,"position:point,addItem:AddElement,",216,1.838233709,Beam
2355,"private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){
  drawPaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);
  drawPaint.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPaint.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPaint);
  drawPaint.setShader(null);
}","private void draw(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPiece){
  drawPiece.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPiece.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPiece);
  drawPiece.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPiece.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPiece);
  drawPiece.setShader(null);
}",230,15,"drawPaint:drawPiece,drawBitmapWithStroke:draw,",704,7.888660757,Beam
2356,,,29,4,,477,4.14394389,0
2357,"public boolean hasDescendant(Pattern pattern){
  Queue<BNode> nodesToProcess=new LinkedList<BNode>();
  nodesToProcess.add(this);
  while (!nodesToProcess.isEmpty()) {
    BNode currentNode=nodesToProcess.poll();
    for (    BNode descendantNode : currentNode.getOutputNodes()) {
      Matcher matcher=pattern.matcher(descendantNode.getId());
      if (matcher.matches()) {
        return true;
      }
      if (!nodesToProcess.contains(descendantNode)) {
        nodesToProcess.add(descendantNode);
      }
    }
  }
  return false;
}
","public boolean hasDecender(Pattern regular){
  Queue<BNode> numbersToProcess=new LinkedList<BNode>();
  numbersToProcess.add(this);
  while (!numbersToProcess.isEmpty()) {
    BNode currentNode=numbersToProcess.poll();
    for (    BNode descendantNode : currentNode.getOutputNodes()) {
      Matcher matcher=regular.matcher(descendantNode.getId());
      if (matcher.matches()) {
        return true;
      }
      if (!numbersToProcess.contains(descendantNode)) {
        numbersToProcess.add(descendantNode);
      }
    }
  }
  return false;
}
",112,6,"hasDescendant:hasDecender,pattern:regular,nodesToProcess:numbersToProcess,",166,1.801885672,Beam
2358,,,87,5,,955,8.638350777,0
2359,,,293,19,,3947,26.21495109,0
2360,"public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
","public static String encodeFromString(String plain,String chacterspace) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(chacterspace));
}
",28,3,"charset:chacterspace,",15,0.197519791,Beam
2361,"public EtagCache resetStats(){
  hits.set(0);
  misses.set(0);
  return this;
}","public EtagCache setStatistics(){
  hits.set(0);
  misses.set(0);
  return this;
}",24,3,"resetStats:setStatistics,",8,0.044747392,Beam
2362,,,107,9,,1567,13.27797756,0
2363,,,65,4,,345,2.511425408,0
2364,,,24,3,,417,4.236452814,0
2365,,,58,4,,803,6.313939401,0
2366,,,44,3,,451,3.085019128,0
2367,,,25,2,,303,2.446956348,0
2368,"private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}
","private void putFirst(Instruction[] null,Instruction bs){
  for (  Instruction x : null) {
    bs.putFirst(x);
  }
}
",30,4,"insertBefore:putFirst,list:null,s:bs,",416,5.449049898,Beam
2369,,,110,8,,1778,19.07574894,0
2372,"private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}","private static void map(final StringBuilder request,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(request,trim)) {
        request.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        request.append(mapping);
        continue;
      }
    }
    request.append(c);
  }
}",149,9,"buffer:request,",92,1.587428717,Beam
2373,"public static String serializeExpression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}","public static String serializeExpression(Node n){
  if (n instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)n;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (n instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)n;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < n.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(n.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}",173,8,"s:n,",4,0.066656295,Beam
2374,"static ByteBuffer newByteBuffer(int capacity){
  ByteBuffer newbb=ByteBuffer.allocate(capacity);
  newbb.order(ByteOrder.LITTLE_ENDIAN);
  return newbb;
}
","static ByteBuffer newShortBB(int buffer){
  ByteBuffer NEWBB=ByteBuffer.allocate(buffer);
  NEWBB.order(ByteOrder.LITTLE_ENDIAN);
  return NEWBB;
}
",31,3,"capacity:buffer,newByteBuffer:newShortBB,newbb:NEWBB,",246,2.276873581,Beam
2375,,,53,3,,524,3.485049713,0
2377,,,30,3,,539,7.927342244,0
2378,"public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}
","public static <T>CompletableFuture<T> exceptionallyCompleteEventually(Throwable castback){
  final CompletableFuture<T> consumer=new CompletableFuture<T>();
  consumer.completeExceptionally(castback);
  return consumer;
}
",41,3,"throwable:castback,exceptionallyCompletedFuture:exceptionallyCompleteEventually,future:consumer,",165,1.619631652,Beam
2379,,,62,3,,465,3.493528247,0
2380,,,21,3,,417,3.899849908,0
2381,,,130,11,,824,6.886546266,0
2382,"private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}","private boolean cancontain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}",113,10,"canContain:cancontain,",11,0.112164195,Beam
2383,,,113,9,,1327,12.35668714,0
2384,"public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
","public static void addConnectionCollection(Integer sub){
  TABBED_CONNECTIONS.remove(sub.intValue());
}
",21,2,"removeConnectionList:addConnectionCollection,tab:sub,",98,0.751564431,Beam
2385,,,445,15,,2450,26.75800524,0
2386,,,57,5,,714,5.313300959,0
2387,,,19,2,,185,1.627438947,0
2388,"private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}","private static double iv(final double[] e){
  double agg=0;
  for (int i=0; i < e.length; i++) {
    agg+=(e[i] * e[i]);
  }
  return Math.sqrt(agg);
}",58,4,"v:e,norm:iv,",164,1.347704057,Beam
2389,,,25,4,,528,5.271616435,0
2390,,,39,5,,576,3.860798105,0
2391,"private long buildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}","private long rebuildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}",433,5,"buildSize:rebuildSize,",3,0.034752834,Beam
2392,,,60,4,,345,2.783569749,0
2393,,,39,6,,1284,8.987266294,0
2394,,,105,4,,560,5.299041287,0
2395,,,40,3,,440,3.071662609,0
2396,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawImage(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}","public boolean drawFrame(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawFrame(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}",206,11,"drawImage:drawFrame,",5,0.080214242,Beam
2397,,,166,12,,1570,15.43043874,0
2398,"public void expandAndSelectIfExists(RepositoryLocation location){
  if (location.parent() != null) {
    expandIfExists(location.parent(),location.getName());
  }
 else {
    expandIfExists(location,null);
  }
  scrollPathToVisible(getSelectionPath());
}
","public void expandAndSelectIfExists(RepositoryLocation site){
  if (site.parent() != null) {
    expandIfExists(site.parent(),site.getName());
  }
 else {
    expandIfExists(site,null);
  }
  scrollPathToVisible(getSelectionPath());
}
",53,2,"location:site,",54,0.461885377,Beam
2399,,,145,9,,359,3.469667451,0
2400,"public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
","public void showDroidsafeUnitMarkers(IEditorPart ratedUpload,String pluginName){
  if (ratedUpload != null && ratedUpload instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)ratedUpload;
    if (fProcessedClasses.contains(pluginName)) {
      if (fClassesNeedUpdate.contains(pluginName)) {
        ClassMarkerProcessor classProcessor=get(pluginName);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(pluginName);
      }
    }
 else {
      fProcessedClasses.add(pluginName);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(pluginName);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(pluginName);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(pluginName);
          classProcessor.showDroidsafeUnitMarkers(editor);
        }
      }
    }
  }
}
",180,12,"className:pluginName,openedEditor:ratedUpload,showDroidsafeTextMarkers:showDroidsafeUnitMarkers,",440,6.799328081,Beam
2401,"protected boolean needToRefetchData(){
  long now=System.currentTimeMillis();
  long last=lastDataFetchTime;
  if ((last + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}
","protected boolean needToRebillAll(){
  long now=System.currentTimeMillis();
  long last=lastDataFetchTime;
  if ((last + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}
",43,5,"needToRefetchData:needToRebillAll,",16,0.178898418,Beam
2402,,,24,2,,222,2.812326233,0
2403,,,164,6,,297,2.5091163,0
2404,,,27,2,,297,2.535575167,0
2405,"public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pm.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
","public static Subject createAMIdityAccess(PolicyManager manager,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=manager.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
",69,6,"pm:manager,createAMIdentitySubject:createAMIdityAccess,",182,1.605650481,Beam
2406,"private Shape decodeEdge(int width,int height){
  path.reset();
  path.moveTo(width - 2,0);
  path.lineTo(width - 2,height - 4);
  path.lineTo(width - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}","private Shape encodePath(int content,int height){
  path.reset();
  path.moveTo(content - 2,0);
  path.lineTo(content - 2,height - 4);
  path.lineTo(content - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}",69,4,"decodeEdge:encodePath,width:content,",342,2.644424431,Beam
2407,"public static String inflate(String name){
  return inflate(name,gPrefix);
}
","public static String infating(String name){
  return infating(name,gPrefix);
}
",18,3,"inflate:infating,",9,0.084263404,Beam
2409,"protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
","protected final StringBuilder write(StringBuilder sb,final Object... projects){
  for (  Object string : projects)   sb.append(string);
  return sb;
}
",32,4,"objects:projects,",13,0.115903608,Beam
2410,"protected final void firePropertyChange(PropertyChangeEvent evt){
  pcs.firePropertyChange(evt);
}
","protected final void triggerPageChanges(PropertyChangeEvent evl){
  pcs.triggerPageChanges(evl);
}
",17,3,"evt:evl,firePropertyChange:triggerPageChanges,",68,0.717839575,Beam
2411,,,271,24,,3593,48.2733307,0
2412,"public void runCommercial(String stream,int length){
  if (stream == null || stream.isEmpty()) {
    commercialResult(stream,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel=""#"" + stream;
    if (isChannelOpen(channel)) {
      g.printLine(channel,""Trying to run "" + length + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" + length + ""s commercial.. (""+ stream+ "")"");
    }
    api.runCommercial(stream,settings.getString(""token""),length);
  }
}
","public void execProfessional(String clean,int slice){
  if (clean == null || clean.isEmpty()) {
    commercialResult(clean,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel=""#"" + clean;
    if (isChannelOpen(channel)) {
      g.printLine(channel,""Trying to run "" + slice + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" + slice + ""s commercial.. (""+ clean+ "")"");
    }
    api.execProfessional(clean,settings.getString(""token""),slice);
  }
}
",105,7,"length:slice,runCommercial:execProfessional,stream:clean,",508,4.567253606,Beam
2413,,,31,3,,341,3.939927308,0
2414,,,76,5,,232,1.651843035,0
2415,,,242,18,,4617,42.47943817,0
2416,,,87,6,,1367,14.26242053,0
2417,,,65,5,,908,7.429235502,0
2418,,,227,8,,859,8.947268109,0
2419,,,114,9,,223,3.041334482,0
2421,,,12,3,,479,4.078766461,0
2422,,,47,6,,1154,9.307157596,0
2423,"public ModifiableSolrParams add(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}","public ModifiableSolrParams remove(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}",167,6,"add:remove,",17,0.185328786,Beam
2424,"public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}","public static SortedSet<Integer> fixPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}",128,8,"adjustPosition:fixPosition,",3,0.04328661,Beam
2425,"protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}","protected static byte[] hkdfExpansion(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}",83,7,"hkdfExpand:hkdfExpansion,",5,0.068348142,Beam
2426,,,65,8,,287,2.661405603,0
2427,"public LayoutBlock createNewLayoutBlock(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
","public LayoutBlock createNewLayoutBlock(String machineEmail,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (machineEmail == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((machineEmail.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=machineEmail.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
",165,8,"systemName:machineEmail,",20,0.425599651,Beam
2428,"private synchronized void postEvent(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}
","private synchronized void PostListener(EventInfo imageInf){
  eventQueue.add(imageInf);
  notifyAll();
}
",21,3,"postEvent:PostListener,eventInfo:imageInf,",56,0.504005277,Beam
2429,"long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}","long Cleandown(long create){
  int inUseConnectionCount=0;
  int idleChannelCounter=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,create) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleChannelCounter++;
      long idleDurationNs=create - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleChannelCounter > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleChannelCounter > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}",186,12,"cleanup:Cleandown,now:create,idleConnectionCount:idleChannelCounter,",167,6.631638861,Beam
2430,"default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
","default Document insertArray(Map<? extends CharSequence,Object> rules){
  if (rules != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : rules.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
",64,3,"putAll:insertArray,fields:rules,",89,1.233998668,Beam
2431,,,34,4,,637,7.370349061,0
2432,,,422,21,,2390,23.8420119,0
2433,"public final void addValidationError(String error){
  validationErrors.add(error);
}
","public final void addValidateRule(String unknown){
  validationErrors.add(unknown);
}
",17,3,"addValidationError:addValidateRule,error:unknown,",144,1.184637105,Beam
2434,,,63,4,,922,8.579548534,0
2435,"private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}","private void heapsifyMove(int fifopoes,Comparable<Object> car){
  while (fifopoes > 0) {
    final int parent=(fifopoes - 1) >>> 1;
    Comparable<Object> pub=secondcheape[parent];
    if (car.compareTo(pub) <= 0) {
      break;
    }
    secondcheape[fifopoes]=pub;
    fifopoes=parent;
  }
  secondcheape[fifopoes]=car;
}",81,6,"heapifyUp:heapsifyMove,cur:car,twopos:fifopoes,par:pub,twoheap:secondcheape,",750,11.16315075,Beam
2436,,,135,5,,604,5.106881642,0
2437,,,17,1,,55,0.409056,0
2438,,,43,5,,797,6.703869748,0
2439,,,158,5,,1151,56.42813309,0
2440,"@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}","@HLEFunction(nid=0x7ED29E40,version=150) public int SceRtcAddTtick(TPointer timeAdr,TPointer64 tickAddp){
  long ticks=tickAddp.getValue() - rtlMagicData;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAdr);
  return 0;
}",54,6,"ticksAddr:tickAddp,sceRtcSetTick:SceRtcAddTtick,timeAddr:timeAdr,rtcMagicOffset:rtlMagicData,",858,10.33885653,Beam
2441,,,230,8,,702,7.901170401,0
2442,,,20,2,,217,1.81850824,0
2443,,,27,2,,194,1.452123702,0
2444,"public void actionPerformed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
","public void actionPerformed(ActionEvent ae){
  String md=ae.getActionCommand();
  if (md == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (md == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (md == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
",111,7,"command:md,",173,2.130806049,Beam
2445,"private static byte[] encode(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}","private static byte[] encast(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}",63,4,"encode:encast,",6,0.06075635,Beam
2446,"protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}","protected final boolean readAvailableBlocked() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}",102,11,"readAvailableBlocking:readAvailableBlocked,",7,0.112705366,Beam
2447,,,141,6,,1615,14.07470393,0
2448,,,66,3,,428,6.525174026,0
2449,"final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void printf(String i){
  Writer writer=this.writer;
  if (writer == null)   return;
  try {
    if (i == null)     writer.write(_nullChars,0,_nullChars.length);
 else     writer.write(i,0,i.length());
    writer.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",100,7,"println:printf,s:i,out:writer,",317,2.639236899,Beam
2450,,,34,4,,543,4.96216048,0
2451,"public TestTree sort(){
  Collections.sort(suites);
  suites.forEach(null);
  return this;
}
","public TestTree iter(){
  Collections.iter(suites);
  suites.forEach(null);
  return this;
}
",24,2,"sort:iter,",21,0.15318416,Beam
2452,"protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}","protected static int[] mercat(@Nullable int[] app,int... obj){
  int[] newArr;
  if (app == null || app.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(app,app.length + obj.length);
    System.arraycopy(obj,0,newArr,app.length,obj.length);
  }
  return newArr;
}",83,4,"concat:mercat,arr:app,",90,0.898740856,Beam
2453,,,19,3,,466,4.721282923,0
2454,"private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitelist ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : templateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : templateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}","private Integer countFragmentFilteredPages(List<String> plateFragments,boolean whitestyle) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitestyle ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : plateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : plateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}",288,12,"templateFragments:plateFragments,whitelist:whitestyle,",121,1.099955956,Beam
2455,,,41,3,,346,3.417736387,0
2456,,,28,4,,132,1.342290751,0
2457,"public void rollback(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
","public void rollBACK(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + cacheNode + "" due to ""+ t);
  try {
    fileContentStore.delete(cacheNode,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
",48,7,"rollback:rollBACK,tempFile:cacheNode,",381,2.987247475,Beam
2458,,,49,4,,593,5.161452393,0
2459,"public static Date parseText(String dateStr){
  try {
    return mSimpleTextFormat.parse(dateStr);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
","public static Date seText(String dateStr){
  try {
    return mSimpleTextFormat.parse(dateStr);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
",41,4,"parseText:seText,",26,0.277155856,Beam
2460,,,80,7,,2610,26.0120712,0
2461,"public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}
","public static boolean compareReturns(SolrClient controlClient,SolrClient customClient) throws SolrServerException, IOException {
  return compareReturns(controlClient,customClient,null,null);
}
",29,3,"compareResults:compareReturns,cloudClient:customClient,",277,2.811528146,Beam
2462,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
","@Override public boolean onPreferenceClick(Preference preference){
  if (preference == fPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
",29,3,"mPlayExample:fPlayExample,",165,1.41431729,Beam
2463,"private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
","private synchronized void persistObjectAndNotifyingChanges(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
",51,4,"persistProfileAndNotifyChange:persistObjectAndNotifyingChanges,",16,0.169941954,Beam
2464,"public boolean unsetOrdering(Object first,Object second){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}
","public boolean unsetOrdering(Object first,Object left){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(left);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}
",53,6,"second:left,",61,0.605323684,Beam
2465,,,164,19,,3945,31.52180528,0
2466,,,110,7,,2389,23.48035986,0
2467,,,507,21,,4124,59.04678027,0
2468,"private static StsdData parseStsd(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}","private static StsdData read(ParsableByteArray stsg,int videoPath,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsg.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsg.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsg.getPosition();
    int childAtomSize=stsg.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsg.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsg,childAtomType,childStartPosition,childAtomSize,videoPath,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsg,childAtomType,childStartPosition,childAtomSize,videoPath,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsg.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}",455,13,"stsd:stsg,trackId:videoPath,parseStsd:read,",1409,12.77949598,Beam
2469,,,13,2,,169,1.565132014,0
2470,,,64,8,,1207,8.988375123,0
2471,"public void characters(char ch[],int start,int length) throws SAXException {
  m_valueBuffer.append(ch,start,length);
}
","public void characteracters(char ch[],int start,int length) throws SAXException {
  m_valueBuffer.append(ch,start,length);
}
",30,5,"characters:characteracters,",3,0.016274122,Beam
2472,,,23,3,,106,0.931773309,0
2473,"private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
","private void validateWill(String dest,Object Payment){
  if ((dest == null) || (Payment == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
",43,3,"payload:Payment,",4,0.073043291,Beam
2474,,,30,3,,539,4.559750028,0
2475,"public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
","public void unit(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
",30,4,"execute:unit,",12,0.061081453,Beam
2476,"protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
","protected void notifyRuleUpgrade(int oldState,int oldValue){
  mState=oldValue;
  if (oldState != oldValue) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(oldValue));
  }
}
",43,4,"newState:oldValue,notifyStateChange:notifyRuleUpgrade,",172,1.803339704,Beam
2477,,,67,5,,859,5.849727726,0
2478,,,20,1,,33,0.231113199,0
2479,"@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
","@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bones) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bones.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
",70,6,"bos:bones,",9,0.090315453,Beam
2480,"public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}","public void parent(String key,char eval){
  int len=key.length() + 1;
  if (frownodes + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=parent(root,strkey,0,eval);
}",89,8,"insert:parent,val:eval,freenode:frownodes,",576,6.266585302,Beam
2481,,,89,5,,196,1.261760875,0
2482,"private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}","private static boolean useCompactCSSStyle(Map<String,Object> args,int compabilityPoint){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compabilityPoint < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}",72,5,"compatibilityVersion:compabilityPoint,useCompactFontFormat:useCompactCSSStyle,",71,0.92102958,Beam
2483,,,77,4,,867,9.751203748,0
2484,,,19,1,,63,0.465173304,0
2485,"public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
","public void assertIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
",51,3,"testIterator:assertIterator,",5,0.036004829,Beam
2486,,,139,4,,1003,11.41976078,0
2487,"static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
","static float rotativey(float tx,float pY,float cX,float cY,float angleInDiecries){
  double angle=Math.toRadians(angleInDiecries);
  return (float)(Math.sin(angle) * (tx - cX) + Math.cos(angle) * (pY - cY) + cY);
}
",65,7,"pX:tx,angleInDegrees:angleInDiecries,rotateY:rotativey,",842,7.848148231,Beam
2488,"void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}","void rossAbove(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}",139,7,"crossOver:rossAbove,",38,0.574869009,Beam
2489,"public void shutdown(){
  scheduledExecutorService.shutdownNow();
}
","public void downnow(){
  scheduledExecutorService.shutdownNow();
}
",13,2,"shutdown:downnow,",9,0.062522642,Beam
2490,,,36,4,,207,1.614065822,0
2491,,,40,4,,554,6.773130322,0
2492,,,21,3,,421,3.798768195,0
2493,,,91,5,,654,7.382584683,0
2494,"@Override public void onEvent(ProjectEvent event){
  if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) {
    update(event);
  }
}
","@Override public void handleUpdate(ProjectEvent function){
  if (function.getType() == ProjectEvent.EventType.UPDATED || function.getType() == ProjectEvent.EventType.CREATED) {
    update(function);
  }
}
",44,2,"onEvent:handleUpdate,event:function,",127,1.150011071,Beam
2495,"public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}","public static final void showGUIMessage(final String user_message,final BufferedImage open,final String title){
  if (open == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(open);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=open.getWidth();
  final int height=open.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}",129,8,"image:open,",17,0.183223093,Beam
2496,,,161,9,,1226,16.74203248,0
2497,,,46,4,,782,10.99874151,0
2498,"public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public ResourceListParser get() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory fluent=SAXParserFactory.newInstance();
    SAXParser parser=fluent.newSAXParser();
    parser.get(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:get,factory:fluent,",148,0.889968495,Beam
2499,"public static double quantile(double p,double alpha,double beta){
  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));
  }
 else {
    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));
  }
}","public static double quadine(double p,double asc,double python){
  if (Double.isNaN(asc) || Double.isNaN(python) || Double.isNaN(p)|| asc < 0. || python < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,python,asc,logBeta(python,asc));
  }
 else {
    return rawQuantile(p,asc,python,logBeta(asc,python));
  }
}",142,4,"quantile:quadine,alpha:asc,beta:python,",355,11.79330546,Beam
2500,,,343,14,,3486,30.44957149,0
2501,,,25,4,,510,10.49072953,0
2502,,,69,4,,619,7.609910762,0
2503,"private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
","private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] dict){
  return dict[loc.getLine()][loc.getColumn()];
}
",34,3,"map:dict,",68,0.646479261,Beam
2504,,,48,7,,577,3.541458118,0
2505,,,26,2,,159,2.171352732,0
2506,"protected void notifyTimestampsToGateways(EntryEventImpl event){
  VersionTagHolder updateTimeStampEvent=new VersionTagHolder(event.getVersionTag());
  updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeStampEvent.setKeyInfo(event.getKeyInfo());
  updateTimeStampEvent.setGenerateCallbacks(false);
  updateTimeStampEvent.distributedMember=event.getDistributedMember();
  updateTimeStampEvent.setNewEventId(getSystem());
  if (event.getRegion() instanceof BucketRegion) {
    BucketRegion br=(BucketRegion)event.getRegion();
    PartitionedRegion pr=br.getPartitionedRegion();
    updateTimeStampEvent.setRegion(pr);
    if (pr.isParallelWanEnabled()) {
      br.handleWANEvent(updateTimeStampEvent);
    }
    if (pr.isInitialized()) {
      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
    }
  }
 else {
    updateTimeStampEvent.setRegion(event.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
  }
}
","protected void notifyTimestampsToGameories(EntryEventImpl stage){
  VersionTagHolder updateTimeStampEvent=new VersionTagHolder(stage.getVersionTag());
  updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeStampEvent.setKeyInfo(stage.getKeyInfo());
  updateTimeStampEvent.setGenerateCallbacks(false);
  updateTimeStampEvent.distributedMember=stage.getDistributedMember();
  updateTimeStampEvent.setNewEventId(getSystem());
  if (stage.getRegion() instanceof BucketRegion) {
    BucketRegion br=(BucketRegion)stage.getRegion();
    PartitionedRegion pr=br.getPartitionedRegion();
    updateTimeStampEvent.setRegion(pr);
    if (pr.isParallelWanEnabled()) {
      br.handleWANEvent(updateTimeStampEvent);
    }
    if (pr.isInitialized()) {
      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
    }
  }
 else {
    updateTimeStampEvent.setRegion(stage.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
  }
}
",169,5,"notifyTimestampsToGateways:notifyTimestampsToGameories,event:stage,",100,1.322145279,Beam
2507,,,111,5,,676,8.839030019,0
2508,,,27,2,,280,2.732872562,0
2509,,,30,7,,1053,9.833585652,0
2510,,,22,2,,189,2.389698374,0
2511,,,230,10,,1663,24.72645358,0
2512,,,115,5,,1098,22.28535196,0
2513,"private File findFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
","private File findFile(File drive,String n) throws FileNotFoundException {
  File file=new File(drive,n);
  if (file.exists()) {
    return file;
  }
  for (  String child : drive.list()) {
    if (child.equalsIgnoreCase(n)) {
      return new File(drive,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
",80,5,"name:n,directory:drive,",232,2.605279907,Beam
2514,,,63,6,,731,6.134563466,0
2515,"private void runTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
","private void runtimeoutHelper(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
",36,2,"runTimeoutTask:runtimeoutHelper,",24,0.208521672,Beam
2516,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.drawImage(img,xform,obs);
}
","public boolean saveImage(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.saveImage(img,xform,obs);
}
",27,5,"drawImage:saveImage,",5,0.112664501,Beam
2517,"public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}","public static AnnotationBinding[] process(AnnotationBinding[] recordedAnnotations,long annotationTokenBits,LookupEnvironment env){
  int count=0;
  if ((annotationTokenBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTokenBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTokenBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTokenBits,env);
  if ((annotationTokenBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTokenBits,env);
  if ((annotationTokenBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTokenBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTokenBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTokenBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTokenBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTokenBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTokenBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}",446,7,"addStandardAnnotations:process,annotationTagBits:annotationTokenBits,",315,4.512236679,Beam
2518,,,127,8,,1313,32.22435689,0
2519,"public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
","public List<URI> resourceURLris(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
",96,10,"volumeURIs:resourceURLris,",93,2.28978556,Beam
2520,"public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
","public static void define(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
",70,5,"init:define,",18,0.174906925,Beam
2521,"public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
","public void service() throws SAMLException {
  try {
    keyProvider.service();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
",90,3,"store:service,",8,0.058581654,Beam
2522,,,158,12,,2670,36.74003429,0
2523,"static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
","static boolean ShowTipups(FormObject Formobject){
switch (Formobject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
",60,2,"allowsPopup:ShowTipups,formObject:Formobject,",139,1.807362902,Beam
2525,,,81,2,,294,3.882110627,0
2526,,,206,12,,4037,45.21320392,0
2527,,,34,3,,165,1.944797448,0
2528,"public void rectangle(double x,double y,double halfWidth,double halfHeight){
  if (halfWidth < 0)   throw new IllegalArgumentException(""half width can\'t be negative"");
  if (halfHeight < 0)   throw new IllegalArgumentException(""half height can\'t be negative"");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * halfWidth);
  double hs=factorY(2 * halfHeight);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}","public void roundangular(double cross,double i,double halfLayer,double halfY){
  if (halfLayer < 0)   throw new IllegalArgumentException(""half width can\'t be negative"");
  if (halfY < 0)   throw new IllegalArgumentException(""half height can\'t be negative"");
  double xs=scaleX(cross);
  double ys=scaleY(i);
  double ws=factorX(2 * halfLayer);
  double hs=factorY(2 * halfY);
  if (ws <= 1 && hs <= 1)   pixel(cross,i);
 else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}",129,10,"rectangle:roundangular,halfWidth:halfLayer,x:cross,halfHeight:halfY,y:i,",1553,26.2100806,Beam
2529,"private void addDefaultUri() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uri;
  try {
    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException(""Failed to initialize default file scanner"",e);
  }
  uriEncodedList.add(uri);
}
","private void addDefaultUuri() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uri;
  try {
    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException(""Failed to initialize default file scanner"",e);
  }
  uriEncodedList.add(uri);
}
",58,4,"addDefaultUri:addDefaultUuri,",9,0.109659668,Beam
2530,,,154,7,,417,17.11622255,0
2531,,,77,9,,1365,11.31815985,0
2532,,,448,25,,4528,25.577831590175600,0
2533,,,22,2,,191,2.045893486,0
2534,"public boolean contains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}","public boolean conthas(List<Integer> hatches){
  Iterator<Integer> ogi=hatches.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ogi.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}",77,5,"contains:conthas,hashes:hatches,ni:ogi,",274,3.766215082,Beam
2535,"public Vector rotateInDegree(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
","public Vector rotateInRecment(double tree){
  return rotateInRadian(Math.toRadians(tree));
}
",20,2,"degree:tree,rotateInDegree:rotateInRecment,",123,1.593138754,Beam
2536,"protected void clearDataLists(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
","protected void clearFileLatches(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
",69,10,"clearDataLists:clearFileLatches,",16,0.081401602,Beam
2537,"public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}","public iseChannel(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}",82,10,"SecretBlock:iseChannel,",71,0.543551143,Beam
2539,"public static String extractMusicIDFromMediaID(@NonNull String mediaID){
  int pos=mediaID.indexOf(LEAF_SEPARATOR);
  if (pos >= 0) {
    return mediaID.substring(pos + 1);
  }
  return null;
}","public static String extractMusicIDFromMediaID(@NonNull String mediaAD){
  int pos=mediaAD.indexOf(LEAF_SEPARATOR);
  if (pos >= 0) {
    return mediaAD.substring(pos + 1);
  }
  return null;
}",43,3,"mediaID:mediaAD,",32,0.251847227,Beam
2540,,,226,10,,2722,25.65677199,0
2541,,,455,25,,3819,60.11814466714860,0
2544,"private long loadLargestMessageId(){
  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();
  return releaseMessage == null ? 0 : releaseMessage.getId();
}","private long loadLargestLevelById(){
  ReleaseMessage launchUser=releaseMessageQuository.findTopByOrderByIdDesc();
  return launchUser == null ? 0 : launchUser.getId();
}",29,3,"loadLargestMessageId:loadLargestLevelById,releaseMessage:launchUser,releaseMessageRepository:releaseMessageQuository,",298,2.267644028,Beam
2545,,,24,2,,280,3.341423051,0
2546,"public static double L_RankLoss(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}","public static double L_RankLoss(int id[],int r[]){
  int L=id.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (id[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}",187,10,"y:id,",56,5.788622304,Beam
2547,"public static void verifySetterMethods(Class<?> clazz,MappedField... fields){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}
","public static void verifyGetterMethod(Class<?> clott,MappedField... plugins){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : plugins) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clott.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clott);
      }
      methodName=mSet(fieldName);
      clott.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clott);
  }
}
",170,8,"verifySetterMethods:verifyGetterMethod,fields:plugins,clazz:clott,",391,4.797424106,Beam
2548,"private void applyTradingBonus(Player player){
  player.incrementTradescore();
}
","private void applyTrackingBonus(Player player){
  player.incrementTradescore();
}
",15,2,"applyTradingBonus:applyTrackingBonus,",3,0.022378373,Beam
2549,"public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    log.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    log.info(""Writing data into "" + matsim4opusTempDirectory + FILE_NAME+ "" ..."");
    zoneWriter.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public UrbanSimZoneCSVWriterNV3(String matsim4opusTempDirectory,String matsimOutputDirector){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirector=matsimOutputDirector;
  try {
    log.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    ZoneW=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    log.info(""Writing data into "" + matsim4opusTempDirectory + FILE_NAME+ "" ..."");
    ZoneW.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    ZoneW.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",122,7,"UrbanSimZoneCSVWriterV2:UrbanSimZoneCSVWriterNV3,matsimOutputDirectory:matsimOutputDirector,zoneWriter:ZoneW,",1060,33.19536825,Beam
2550,"public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){
  return a.thenCombine(b,function);
}
","public static <R,A,B>CompletionStage<R> multge(CompletionStage<A> a,CompletionStage<B> http,BiFunction<A,B,R> function){
  return a.thenCombine(http,function);
}
",49,4,"b:http,combine:multge,",486,6.625572979,Beam
2551,"public static void assertSpecificLang(String specificLang) throws XMPException {
  if (specificLang == null || specificLang.length() == 0) {
    throw new XMPException(""Empty specific language"",XMPError.BADPARAM);
  }
}","public static void assertSpecificDag(String generalLng) throws XMPException {
  if (generalLng == null || generalLng.length() == 0) {
    throw new XMPException(""Empty specific language"",XMPError.BADPARAM);
  }
}",39,2,"assertSpecificLang:assertSpecificDag,specificLang:generalLng,",208,2.826553714,Beam
2552,,,32,3,,290,2.622763952,0
2553,,,145,13,,2007,22.01753666,0
2554,"public int read() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.read();
}","public int add() throws IOException {
  if (streamSteam == null) {
    reopen();
  }
  count(1);
  return streamSteam.add();
}",33,2,"read:add,inputStream:streamSteam,",45,0.460593247,Beam
2555,"@Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public CompletableFuture<Optional<T>> from(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,eval);
}
",33,3,"max:from,exec:eval,",177,1.000989866,Beam
2556,,,86,7,,1149,8.828840578,0
2557,,,38,4,,479,4.293564149,0
2558,,,23,2,,290,2.310256004,0
2559,"private void writeAttr(String name,String val) throws IOException {
  writeAttr(name,val,true);
}
","private void writeAddrs(String string,String old) throws IOException {
  writeAddrs(string,old,true);
}
",23,3,"writeAttr:writeAddrs,name:string,val:old,",423,8.610171342,Beam
2560,"protected void load_raw_characters(StringBuilder sb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
sb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
sb.append((char)c);
}
}","protected void load_raw_shortacters(StringBuilder sb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
sb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
sb.append((char)c);
}
}",123,3,"load_raw_characters:load_raw_shortacters,",5,0.048263609,Beam
2561,,,52,3,,367,3.413066947,0
2562,,,40,5,,825,9.981526534,0
2563,,,47,4,,173,1.258800574,0
2564,,,45,4,,602,6.831914544,0
2565,,,26,3,,142,1.299895318,0
2566,,,44,4,,435,3.535044849,0
2567,,,40,4,,923,15.94007889,0
2568,,,63,6,,1291,18.0698038,0
2569,"protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}","protected void DrawEdge(int q,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(q + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(q + 0.05 * w),(float)(y + 0.25 * h),(float)q,(float)(y + 0.5 * h),(float)(q + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)q,(float)(y + 0.66 * h),(float)(q + 0.18 * w),(float)(y + 0.9 * h),(float)(q + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(q + 0.4 * w),(float)(y + h),(float)(q + 0.7 * w),(float)(y + h),(float)(q + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(q + w),(float)(y + 0.8 * h),(float)(q + w),(float)(y + 0.6 * h),(float)(q + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(q + w),(float)(y + 0.3 * h),(float)(q + 0.8 * w),(float)(y + 0.1 * h),(float)(q + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(q + 0.5 * w),(float)(y + 0.05 * h),(float)(q + 0.3 * w),(float)(y + 0.05 * h),(float)(q + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}",488,10,"drawCloud:DrawEdge,x:q,",564,4.438098399,Beam
2570,"public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void destroyPath(File image) throws AdeUsageException {
  if (!image.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + image.getPath());
  }
}
",36,3,"file:image,deleteFile:destroyPath,",87,0.611830862,Beam
2571,"public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
","public static boolean checkGMLBootline(String foldletter){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(foldletter)));
    if (!geom.isEmpty() && !geom.isValid()) {
      bugder.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    bugder.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
",105,7,"checkGMLFootprint:checkGMLBootline,footprint:foldletter,logger:bugder,",874,7.482522364,Beam
2572,,,94,3,,75,0.503119044,0
2573,,,90,6,,1174,10.4946677,0
2574,"private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + query.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","private void retrieveWaypoints(SearchQuery request,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + request.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",144,8,"query:request,",6,0.083610626,Beam
2575,,,30,3,,329,3.284227041,0
2576,"private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
","private String insertProperties(String t,Map<String,String> details){
  for (  Entry<String,String> entry : details.entrySet()) {
    t=t.replace(entry.getKey(),entry.getValue());
  }
  return t;
}
",57,4,"template:t,properties:details,",120,1.189766943,Beam
2577,,,407,18,,4958,85.27804656,0
2578,,,15,1,,25,0.195211593,0
2579,"protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}","protected read(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}",558,14,"MapleQuestRequirement:read,",52,0.502432044,Beam
2581,,,229,11,,329,3.182229273,0
2582,"public List<ValidationErrorMessage> validate(){
  errorMessageIds.clear();
  if (paymentProduct == null) {
    throw new NullPointerException(""Error validating PaymentRequest, please set a paymentProduct first."");
  }
  for (  PaymentProductField field : paymentProduct.getPaymentProductFields()) {
    if (!isFieldInAccountOnFileAndNotAltered(field)) {
      errorMessageIds.addAll(field.validateValue(getValue(field.getId())));
    }
  }
  return errorMessageIds;
}
","public List<ValidationErrorMessage> invalididate(){
  errorMessageIds.clear();
  if (paymentType == null) {
    throw new NullPointerException(""Error validating PaymentRequest, please set a paymentProduct first."");
  }
  for (  PaymentProductField label : paymentType.getPaymentProductFields()) {
    if (!isFieldInAccountOnFileAndNotAltered(label)) {
      errorMessageIds.addAll(label.validateValue(getValue(label.getId())));
    }
  }
  return errorMessageIds;
}
",76,4,"validate:invalididate,paymentProduct:paymentType,field:label,",435,4.365046759,Beam
2583,,,36,2,,249,2.169056944,0
2584,,,41,2,,208,1.611026895,0
2587,"private void updatePropertyToValue2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}","private void updatePropertyWithValAll() throws Exception {
  keys.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}",22,2,"updatePropertyToValue2:updatePropertyWithValAll,properties:keys,",30,0.279839722,Beam
2588,"private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}","private void traverseInternal(Object rest,boolean yeeRemote,IdentityHashMap<Object,Object> seen){
  if (rest == null || seen.containsKey(rest)) {
    return;
  }
  if (yeeRemote) {
    if (!visit(rest)) {
      return;
    }
  }
  seen.put(rest,rest);
  if (rest instanceof JSONObject) {
    JSONObject json=(JSONObject)rest;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (rest instanceof JSONArray) {
    JSONArray array=(JSONArray)rest;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (rest instanceof Map) {
    Map<?,?> map=(Map<?,?>)rest;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (rest instanceof List) {
    List<?> list=(List<?>)rest;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (rest instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)rest;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (rest instanceof ParseACL) {
    ParseACL acl=(ParseACL)rest;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}",399,17,"root:rest,yieldRoot:yeeRemote,",231,5.888993434,Beam
2589,"public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
","public boolean onEvent(ActionResult event){
synchronized (this) {
    String requestId=event.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean elementWritten=mRequestIds.remove(requestId);
    if (elementWritten) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return elementWritten;
  }
}
",111,8,"result:event,eventRemoved:elementWritten,",166,1.770387717,Beam
2590,,,37,3,,395,4.330211858,0
2591,,,127,6,,1367,8.440445526,0
2592,,,33,5,,246,1.938765597,0
2593,,,46,3,,469,4.484916576,0
2594,"public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}","public void store(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.store(name,c);
}",129,9,"put:store,",122,1.183852621,Beam
2595,,,26,2,,281,3.508151646,0
2596,"private void disableButtons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
","private void disablePoptons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  andComplete.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
",49,2,"disableButtons:disablePoptons,butDone:andComplete,",23,0.222043888,Beam
2597,,,72,4,,871,18.8295361,0
2598,"public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}","public static final String trunc(final String spec,final int number){
  if (spec == null) {
    return spec;
  }
  if (spec.number() <= number) {
    return spec;
  }
  return spec.substring(0,number);
}",52,3,"length:number,str:spec,",89,0.905198328,Beam
2600,"private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}","private void kidDistanceSub(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter oper,double radius){
  if (right - left <= leafsize) {
    for (oper.seek(left); oper.getOffset() < right; oper.advance()) {
      double dist=norm.distance(query,relation.get(oper));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,oper);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(oper.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (oper.getOffset() == middle);
      res.add(dist,oper);
    }
  }
  if (left < middle && (onleft || close)) {
    kidDistanceSub(left,middle,next,query,res,oper,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kidDistanceSub(middle + 1,right,next,query,res,oper,radius);
  }
}",320,20,"kdRangeSearch:kidDistanceSub,iter:oper,",106,0.438372757,Beam
2601,,,13,2,,143,1.251082802,0
2602,"protected String[][] toArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}","protected String[][] formatNumber(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}",988,18,"toArray:formatNumber,",13,0.134310957,Beam
2603,,,65,7,,954,8.865988119,0
2604,,,41,6,,687,8.431829445,0
2606,,,71,10,,2642,19.93547063,0
2607,,,44,3,,424,4.345492943,0
2608,"private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){
  if (formSpec == null) {
    return prefMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.MINIMUM) {
    return minMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.PREFERRED) {
    return prefMeasure.sizeOf(component);
  }
 else {
    return Math.min(cellSize,prefMeasure.sizeOf(component));
  }
}
","private static int ComponentStyle(Component template,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){
  if (formSpec == null) {
    return prefMeasure.sizeOf(template);
  }
 else   if (formSpec.getSize() == Sizes.MINIMUM) {
    return minMeasure.sizeOf(template);
  }
 else   if (formSpec.getSize() == Sizes.PREFERRED) {
    return prefMeasure.sizeOf(template);
  }
 else {
    return Math.min(cellSize,prefMeasure.sizeOf(template));
  }
}
",106,6,"componentSize:ComponentStyle,component:template,",292,4.44473501,Beam
2609,"public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}","public Check(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}",220,11,"Config:Check,",132,1.364623411,Beam
2610,,,48,4,,633,5.296670345,0
2611,,,29,2,,219,1.641229101,0
2612,,,91,7,,811,6.196599154,0
2613,"protected void newLine(PrintWriter file,String string,boolean isManifest){
  String[] lines=string.split(NEW_LINE);
  for (  String line : lines) {
    String[] words=line.split(SPACE);
    StringBuffer sb=new StringBuffer();
    for (    String word : words) {
      if (checkStringLength(sb.toString() + word,isManifest)) {
        sb.append(word + SPACE);
      }
 else {
        sb.setLength(sb.length() - 1);
        addLine(file,sb.toString());
        sb=new StringBuffer(word + SPACE);
      }
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    addLine(file,sb.toString());
  }
}","protected void newLine(PrintWriter name,String string,boolean isManifest){
  String[] lines=string.split(NEW_LINE);
  for (  String line : lines) {
    String[] words=line.split(SPACE);
    StringBuffer sb=new StringBuffer();
    for (    String word : words) {
      if (checkStringLength(sb.toString() + word,isManifest)) {
        sb.append(word + SPACE);
      }
 else {
        sb.setLength(sb.length() - 1);
        addLine(name,sb.toString());
        sb=new StringBuffer(word + SPACE);
      }
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    addLine(name,sb.toString());
  }
}",164,10,"file:name,",23,0.249305574,Beam
2614,"final public void println(float v){
  String s=String.valueOf(v);
  write(s,0,s.length());
  println();
}","final public void type(float n){
  String s=String.valueOf(n);
  write(s,0,s.length());
  type();
}",37,3,"println:type,v:n,",381,3.69178261,Beam
2615,,,18,4,,509,5.444377136,0
2616,"protected String chooseRandomEnemys(){
  final List<String> enemyList=new LinkedList<String>(enemyForces.keySet());
  final int enemySize=enemyList.size();
  final int position=Rand.rand(enemySize);
  return enemyList.get(position);
}
","protected String chooseRandomenemys(){
  final List<String> fighterDir=new LinkedList<String>(enemyForces.keySet());
  final int enemySize=fighterDir.size();
  final int position=Rand.rand(enemySize);
  return fighterDir.get(position);
}
",56,5,"chooseRandomEnemys:chooseRandomenemys,enemyList:fighterDir,",45,0.391763822,Beam
2617,,,66,4,,579,5.122822678,0
2618,"public void remove(final CreatureRespawnPoint point){
  respawnPoints.remove(point);
}
","public void next(final CreatureRespawnPoint port){
  respawnPoints.next(port);
}
",17,3,"remove:next,point:port,",111,0.941528626,Beam
2619,"@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}","@Override public void drop(Runnable arg0){
  drop();
  arg0.run();
}",21,2,"stop:drop,",7,0.062875775,Beam
2620,"private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}","private HashMap addAddri(SvcReg reg,EntryClass eclass,int fndidx,Object test){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fndidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fndidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(test);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(test,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}",151,9,"addAttr:addAddri,value:test,fldidx:fndidx,",775,11.20778642,Beam
2621,,,36,5,,588,4.427170114,0
2622,,,276,15,,3315,40.89511534,0
2623,,,152,10,,3281,100.0404587,0
2624,,,19,3,,135,0.676519684,0
2625,,,26,2,,297,2.911506017,0
2626,,,16,3,,421,4.34822185,0
2627,,,17,3,,361,2.687805657,0
2629,,,110,11,,1996,25.93345108,0
2630,"public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
","public int getExt(Element node,String attributeName){
  return Caster.toIntValue(node.getAttribute(attributeName),Integer.MIN_VALUE);
}
",29,3,"toInt:getExt,el:node,",182,1.271481661,Beam
2631,,,26,3,,745,6.342256041,0
2632,,,253,18,,2700,24.96902575,0
2633,"public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
","public void makeTreeOfWritable(Iterable<Pair<String,Integer>> fastDat){
  Text key=new Text();
  for (  Pair<String,Integer> pair : fastDat) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
",122,6,"makeTreeOfWritables:makeTreeOfWritable,flatData:fastDat,",152,1.474282102,Beam
2634,"public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}
","public void ADDBlock(int startLine,String parentFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,parentFile,repeatCount,outputLine,outputIncrement));
}
",40,7,"addLine:ADDBlock,sourceFile:parentFile,",552,5.303356266,Beam
2635,"private AMSetupDSConfig(){
  Map map=ServicesDefaultValues.getDefaultValues();
  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}
","private getSetupDSConfig(){
  Map map=ServicesDefaultValues.getDefaultValues();
  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}
",113,9,"AMSetupDSConfig:getSetupDSConfig,",3,0.028767832,Beam
2636,,,33,3,,226,1.909549077,0
2637,,,79,3,,438,5.58621825,0
2638,"public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}","public Node executeSecond(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}",41,3,"selectFirst:executeSecond,",10,0.068219125,Beam
2639,,,86,6,,758,8.329318329,0
2640,,,56,4,,600,4.336862822,0
2641,,,17,3,,310,1.913858489,0
2642,,,41,4,,169,1.376410703,0
2643,,,50,3,,395,3.506686457,0
2644,,,40,3,,466,3.590879142,0
2645,,,63,4,,472,3.908066269,0
2646,"public void touch(){
  candiesStore=null;
}
","public void destruct(){
  candetsFactory=null;
}
",11,2,"touch:destruct,candiesStore:candetsFactory,",87,0.652122287,Beam
2647,,,26,2,,327,3.40227596,0
2648,"public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}","public static Long[] keysof(long[] arrow){
  Long[] dest=new Long[arrow.length];
  for (int i=0; i < arrow.length; i++) {
    dest[i]=Long.valueOf(arrow[i]);
  }
  return dest;
}",63,4,"valuesOf:keysof,array:arrow,",77,0.623930649,Beam
2649,"private ValueGeometry(byte[] bytes,Geometry geometry){
  this.bytes=bytes;
  this.geometry=geometry;
  this.hashCode=Arrays.hashCode(bytes);
}
","private valueGegon(byte[] bytes,Geometry geometry){
  this.bytes=bytes;
  this.geometry=geometry;
  this.hashCode=Arrays.hashCode(bytes);
}
",36,3,"ValueGeometry:valueGegon,",20,0.131208996,Beam
2650,,,142,6,,1250,41.53825953,0
2651,,,29,3,,576,5.405742506,0
2652,,,99,9,,1143,10.31933045,0
2654,"public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}","public DistributedLogMultiStreamWriter call(){
  Preconditions.checkArgument((null != _feeds && !_feeds.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_server,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_feeds,_server,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}",102,12,"build:call,_streams:_feeds,_client:_server,",2029,20.48778039,Beam
2655,,,37,2,,56,0.635674727,0
2656,,,21,4,,175,1.636233989,0
2657,"public void remove(DirectedEdge de){
  outEdges.remove(de);
}
","public void remove(DirectedEdge index){
  outEdges.remove(index);
}
",16,3,"de:index,",30,0.249023243,Beam
2658,"public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
","public void closedInstance(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
",27,3,"closeWindow:closedInstance,",13,0.071283615,Beam
2659,,,52,5,,1107,11.73331089,0
2660,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.eIsSet(featureID);
}
","@Override public boolean iISValid(int serviceCode){
switch (serviceCode) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.iISValid(serviceCode);
}
",91,9,"featureID:serviceCode,eIsSet:iISValid,",184,3.08733083,Beam
2661,,,70,4,,767,19.85214812,0
2662,,,71,4,,732,8.162585449,0
2663,,,35,4,,543,4.628222585,0
2664,,,17,3,,427,5.043809354,0
2665,"private Set<Integer> findValues(String string){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : string.split("","")) {
    if (!str.equals("""")) {
      results.add(findValue(str));
    }
  }
  return results;
}
","private Set<Integer> getValues(String pass){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String enc : pass.split("","")) {
    if (!enc.equals("""")) {
      results.add(findValue(enc));
    }
  }
  return results;
}
",65,4,"string:pass,findValues:getValues,str:enc,",479,5.893963206,Beam
2666,,,111,6,,1191,10.9223794,0
2667,,,66,8,,1512,12.67316062,0
2668,,,23,2,,342,4.185612925,0
2669,"public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
","public StringBuilder encodeContent(StringBuilder data){
  return data.append(contentEncoding);
}
",17,3,"encodeBody:encodeContent,buffer:data,",58,0.452482915,Beam
2670,"public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}","public void abtaining(long timeout__mm) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout__mm;
  if (cacheSync != null && cacheSync.isValid()) {
    return;
  }
  do {
    try {
      cacheSync=fileSyncLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}",89,5,"obtain:abtaining,timeout_ms:timeout__mm,fileLock:cacheSync,fileToLock:fileSyncLock,",253,2.442923967,Beam
2671,,,37,5,,1319,12.93772306,0
2672,"public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static IntStream comjoin(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
",89,5,"concat:comjoin,",72,3.227635713,Beam
2673,"private void markReserved(int ropReg,int category){
  reservedRopRegs.set(ropReg,ropReg + category,true);
}
","private void markReserved(int opRegion,int section){
  reservedRopConfigs.set(opRegion,opRegion + section,true);
}
",25,4,"ropReg:opRegion,category:section,reservedRopRegs:reservedRopConfigs,",584,5.862014437,Beam
2674,"public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}","public void recursiveEmpty(MaryNode treeree){
  json=treeree;
  numberOfLeaves=0;
  sortNode(0,json);
}",24,4,"specTree:treeree,deepFill:recursiveEmpty,tree:json,",114,1.158576337,Beam
2675,,,54,6,,1549,16.49913579,0
2676,,,19,2,,214,1.647956475,0
2677,,,41,3,,348,3.390572119,0
2678,,,16,2,,105,0.776283387,0
2679,,,190,8,,2208,75.81671051,0
2680,"public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}","public void callback(GeneralSubtrees generalSubtorours){
  List<GeneralSubtree> generalSubtreesList=generalSubtorours.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int ip=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[ip][0]=generalSubtree;
    data[ip][1]=generalSubtree;
    data[ip][2]=generalSubtree;
    ip++;
  }
  fireTableDataChanged();
}",99,6,"load:callback,generalSubtrees:generalSubtorours,i:ip,",386,5.10340476,Beam
2681,,,21,2,,266,2.00215613,0
2682,,,66,8,,980,7.421003938,0
2683,,,17,2,,215,1.624244094,0
2684,"public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
","public static String deleteStatus(){
  final File object=Code.wrapThrow(null);
  object.deleteOnExit();
  return object.getAbsolutePath();
}
",32,2,"tmpJournal:deleteStatus,file:object,",56,0.93806564,Beam
2687,"public void dispose(){
  clearListeners();
  if (attributes != null) {
    attributes.clear();
  }
  removed(null);
}
","public void dispose(){
  clearListeners();
  if (addables != null) {
    addables.clear();
  }
  removed(null);
}
",30,2,"attributes:addables,",35,0.251275456,Beam
2688,,,37,3,,269,2.115581437,0
2689,,,62,4,,434,3.807414186,0
2690,"public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}","public static void saveProvisioningValency(Context element,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=element.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}",85,6,"context:element,saveProvisioningValidity:saveProvisioningValency,",176,1.496362023,Beam
2691,"public AemParsys clear(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
","public AemParsys load(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
",35,3,"clear:load,",10,0.074581142,Beam
2692,"@Override public XADataSource createXADataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}","@Override public XADataSource createXADATAConnector(Properties lines) throws SQLException {
  Properties propertiesTransfer=new Properties();
  if (lines != null) {
    propertiesTransfer.putAll(lines);
  }
  rejectUnsupportedOptions(propertiesTransfer);
  rejectPoolingOptions(propertiesTransfer);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesTransfer);
  return dataSource;
}",64,4,"createXADataSource:createXADATAConnector,properties:lines,propertiesCopy:propertiesTransfer,",332,3.142735879,Beam
2693,,,46,4,,653,6.558215388,0
2694,"private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {
  if (uri.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestAndResponse);
  }
 else   if (uri.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestAndResponse);
  }
 else   if (uri.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestAndResponse);
  }
 else   if (uri.startsWith(""/source/"")) {
    handleHtmlShowSource(requestAndResponse);
  }
 else   if (uri.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestAndResponse);
  }
 else   if (uri.startsWith(""/search/"")) {
    handleHtmlSearch(requestAndResponse);
  }
 else   if (uri.equals(""/help/"")) {
    handleHtmlBasicHelp(requestAndResponse);
  }
 else   if (uri.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestAndResponse);
  }
 else   if (uri.startsWith(""/help/"")) {
    handleHtmlHelp(requestAndResponse);
  }
 else   if (uri.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestAndResponse);
  }
 else   if (uri.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestAndResponse);
  }
 else   if (uri.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestAndResponse);
  }
 else   if (uri.equals(""/clear/"")) {
    handleHtmlClearForm(requestAndResponse);
  }
 else   if (uri.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestAndResponse);
  }
 else   if (uri.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestAndResponse);
  }
 else   if (uri.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestAndResponse);
  }
 else   if (uri.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestAndResponse);
  }
 else   if (uri.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestAndResponse);
  }
 else   if (uri.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestAndResponse);
  }
 else   if (uri.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestAndResponse);
  }
 else   if (uri.equals(""/nothing/"")) {
    handleHtmlNothing(requestAndResponse);
  }
 else   if (uri.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestAndResponse);
  }
 else   if (uri.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);
  }
 else   if (uri.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestAndResponse);
  }
 else   if (uri.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestAndResponse);
  }
 else   if (uri.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestAndResponse);
  }
 else   if (uri.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestAndResponse);
  }
 else   if (uri.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestAndResponse);
  }
 else {
    returnHtml404(requestAndResponse);
  }
}","private void render(RequestAndResponse requestAndResponse,String ilo) throws IOException, ServletException {
  if (ilo.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestAndResponse);
  }
 else   if (ilo.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestAndResponse);
  }
 else   if (ilo.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestAndResponse);
  }
 else   if (ilo.startsWith(""/source/"")) {
    handleHtmlShowSource(requestAndResponse);
  }
 else   if (ilo.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestAndResponse);
  }
 else   if (ilo.startsWith(""/search/"")) {
    handleHtmlSearch(requestAndResponse);
  }
 else   if (ilo.equals(""/help/"")) {
    handleHtmlBasicHelp(requestAndResponse);
  }
 else   if (ilo.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestAndResponse);
  }
 else   if (ilo.startsWith(""/help/"")) {
    handleHtmlHelp(requestAndResponse);
  }
 else   if (ilo.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestAndResponse);
  }
 else   if (ilo.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestAndResponse);
  }
 else   if (ilo.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestAndResponse);
  }
 else   if (ilo.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestAndResponse);
  }
 else   if (ilo.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestAndResponse);
  }
 else   if (ilo.equals(""/clear/"")) {
    handleHtmlClearForm(requestAndResponse);
  }
 else   if (ilo.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestAndResponse);
  }
 else   if (ilo.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestAndResponse);
  }
 else   if (ilo.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestAndResponse);
  }
 else   if (ilo.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestAndResponse);
  }
 else   if (ilo.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestAndResponse);
  }
 else   if (ilo.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestAndResponse);
  }
 else   if (ilo.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestAndResponse);
  }
 else   if (ilo.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestAndResponse);
  }
 else   if (ilo.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestAndResponse);
  }
 else   if (ilo.equals(""/nothing/"")) {
    handleHtmlNothing(requestAndResponse);
  }
 else   if (ilo.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestAndResponse);
  }
 else   if (ilo.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);
  }
 else   if (ilo.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestAndResponse);
  }
 else   if (ilo.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestAndResponse);
  }
 else   if (ilo.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestAndResponse);
  }
 else   if (ilo.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestAndResponse);
  }
 else   if (ilo.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestAndResponse);
  }
 else   if (ilo.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestAndResponse);
  }
 else {
    returnHtml404(requestAndResponse);
  }
}",584,3,"routeSingleGetRequest:render,uri:ilo,",195,1.749953194,Beam
2695,"private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
","private void dial(String phoneInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (phoneInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(phoneInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,phoneInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
",149,8,"contactInformation:phoneInformation,",3,0.046527437,Beam
2696,,,120,7,,1460,10.72008653,0
2697,,,27,2,,87,0.663243246,0
2699,"public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}","public int readable() throws IOException {
  int b0=fInputStream.readable();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}",48,3,"read:readable,",29,0.32385685,Beam
2700,,,54,6,,1301,8.190296185,0
2701,,,95,15,,2675,44.89378859,0
2702,"default B with(String key,int value){
  return with(key,Integer.toString(value));
}
","default B and(String parent,int value){
  return and(parent,Integer.toString(value));
}
",25,3,"with:and,key:parent,",141,0.802089632,Beam
2703,,,85,7,,1310,6.837622682,0
2704,,,101,8,,1054,5.113652694,0
2705,,,68,6,,1087,18.19867713,0
2706,,,68,4,,509,2.548189592,0
2707,,,84,8,,865,4.880580783,0
2708,"@Override public void done(){
  super.done();
  if (mNumTestsExpected > mNumTestsRun) {
    handleTestRunFailed(String.format(""Test run incomplete. Expected %d tests, received %d"",mNumTestsExpected,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed(""No test results"");
  }
}
","@Override public void next(){
  super.next();
  if (mNumTestsInired > mNumTestsRun) {
    handleTestRunFailed(String.format(""Test run incomplete. Expected %d tests, received %d"",mNumTestsInired,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed(""No test results"");
  }
}
",49,5,"done:next,mNumTestsExpected:mNumTestsInired,",194,1.185832477,Beam
2709,,,13,1,,25,0.086767936,0
2710,,,77,5,,1058,12.95336989,0
2711,,,20,3,,202,0.85421838,0
2712,"public static @Nonnull <T>T valueOrDefault(@Nullable T value,@Nonnull T defaultValue){
  return value == null ? defaultValue : value;
}
","public static @Nonnull <T>T valueorFAULT(@Nullable T type,@Nonnull T defaultValue){
  return type == null ? defaultValue : type;
}
",31,3,"value:type,valueOrDefault:valueorFAULT,",158,1.01551981,Beam
2713,"@Override public void run(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long address=bufferAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}","@Override public void call(){
  try {
    for (; ; ) {
      int n=portGetn(port,sourceAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long address=sourceAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}",88,9,"run:call,bufferAddress:sourceAddress,",258,1.147786649,Beam
2714,,,70,5,,1262,13.35244922,0
2715,"public void removeChangeListener(ChangeListener l){
  if (listeners == null)   return;
  listeners.remove(l);
}
","public void removeUpdateListener(ChangeListener ol){
  if (listeners == null)   return;
  listeners.remove(ol);
}
",24,3,"l:ol,removeChangeListener:removeUpdateListener,",52,0.234105857,Beam
2716,,,197,8,,1388,12.66135437,0
2717,,,17,1,,49,0.220130805,0
2718,,,43,3,,368,2.285268998,0
2719,,,121,10,,2189,14.13963969,0
2720,"private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}","private double convertTolinfreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}",31,2,"melToLinFreq:convertTolinfreq,",49,0.230199722,Beam
2721,"private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){
  int cdcPos=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdcPos,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdcPos + 1,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdcPos + 2,spec);
}","private void addCdcColScks(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRollChangeData){
  int cdcPos=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec spec=cdcRollChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdcPos,spec);
  spec=cdcRollChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdcPos + 1,spec);
  spec=cdcRollChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdcPos + 2,spec);
}",189,6,"addCdcColSpecs:addCdcColScks,cdcRowChangeData:cdcRollChangeData,",153,1.85231839,Beam
2722,"private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}","private ParsePosition append(final ParsePosition part){
  part.setIndex(part.getIndex() + 1);
  return part;
}",26,2,"next:append,pos:part,",81,0.451083533,Beam
2723,"public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}","public static String addVCovDesc(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}",109,6,"addCvDescription:addVCovDesc,",19,0.150954417,Beam
2725,,,100,5,,818,5.335205555,0
2726,,,18,2,,243,1.887708406,0
2727,"public byte[] readRawBytes(final int size) throws IOException {
  if (size < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + size > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (size <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[size];
    System.arraycopy(buffer,bufferPos,bytes,0,size);
    bufferPos+=size;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}","public byte[] readAsyncByte(final int e) throws IOException {
  if (e < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + e > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (e <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[e];
    System.arraycopy(buffer,bufferPos,bytes,0,e);
    bufferPos+=e;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}",107,7,"readRawBytes:readAsyncByte,size:e,",83,0.416309265,Beam
2728,"@Override public int length(){
  return set.size();
}
","@Override public int add(){
  return stop.size();
}
",16,2,"length:add,set:stop,",47,0.243454472,Beam
2729,,,16,2,,193,1.172160455,0
2730,,,28,1,,19,0.092358287,0
2731,,,16,3,,343,1.856261595,0
2732,,,61,5,,885,8.170279094,0
2733,"public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (originalTypes == null)   return null;
  ReferenceBinding[] convertedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != originalTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}","public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] nativeTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (nativeTypes == null)   return null;
  ReferenceBinding[] convertedTypes=nativeTypes;
  for (int i=0, length=nativeTypes.length; i < length; i++) {
    ReferenceBinding originalType=nativeTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == nativeTypes) {
        System.arraycopy(nativeTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != nativeTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}",149,9,"originalTypes:nativeTypes,",6,0.080401297,Beam
2734,,,30,5,,921,3.97896409,0
2735,,,115,6,,1389,8.932851001,0
2736,"private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}","private BigInteger modModPox(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}",931,36,"oddModPow:modModPox,",14,0.235261858,Beam
2737,,,163,11,,2139,8.522373271,0
2738,,,62,6,,1603,14.25702015,0
2739,"public static void writeToFile(File file,String contents) throws IOException {
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(contents.getBytes());
  fos.close();
}
","public static void writeFilePage(File dir,String contages) throws IOException {
  FileOutputStream fos=new FileOutputStream(dir);
  fos.write(contages.getBytes());
  fos.close();
}
",41,4,"writeToFile:writeFilePage,contents:contages,file:dir,",471,1.925601983,Beam
2740,,,58,5,,1237,7.293243595,0
2741,,,15,2,,121,0.6189291,0
2742,"public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}
","public static String writer(POSMikheevCounter counter){
  return POSBaseLineCounter.writer(counter);
}
",18,2,"write:writer,",35,0.152697198,Beam
2743,,,24,2,,314,1.722210093,0
2744,,,20,2,,124,0.540720948,0
2745,"public void cfgPackage(ConfigurationValue cfgval,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
","public void cfFile(ConfigurationValue gvals,String name,String dist){
  packages.add(new PackageInfo(name,dist));
  packageNames.add(name);
}
",35,6,"cfgPackage:cfFile,desc:dist,cfgval:gvals,",528,2.493616029,Beam
2746,,,24,2,,342,1.893619271,0
2747,,,145,4,,510,2.778979655,0
2748,,,45,4,,858,4.231430582,0
2749,,,54,4,,763,4.959175769,0
2750,"@Override public String execute(){
  return SUCCESS;
}
","@Override public String submit(){
  return SUCCESS;
}
",12,2,"execute:submit,",4,0.02015634,Beam
2751,,,432,13,,4082,29.06684492,0
2752,"public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}","public static void checkHTTPResourcelength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}",100,6,"checkHTTPRequestLength:checkHTTPResourcelength,",51,0.317470431,Beam
2753,,,69,10,,413,1.768839594,0
2754,"public static String formatListToString(List<String> list){
  String result="""";
  for (  String s : list)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
","public static String convertListToString(List<String> table){
  String result="""";
  for (  String s : table)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
",46,4,"list:table,formatListToString:convertListToString,",134,0.629132966,Beam
2755,,,155,8,,1565,6.910680743,0
2756,"public void test_concurrent_modification_insert(){
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(20);
    btree=BTree.create(new SimpleMemoryRawStore(),md);
    btree.insert(10,""Bryan"");
    btree.insert(20,""Mike"");
    btree.insert(30,""James"");
  }
{
    ITupleCursor2<String> cursor=newCursor(btree);
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.seek(20));
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.tuple());
    btree.insert(15,""Paul"");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.tuple());
    assertEquals(new TestTuple<String>(15,""Paul""),cursor.prior());
    assertEquals(new TestTuple<String>(15,""Paul""),cursor.tuple());
    btree.remove(15);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(15),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.next());
    btree.remove(20);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    btree.insert(25,""Allen"");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(null,cursor.tuple());
    assertEquals(new TestTuple<String>(25,""Allen""),cursor.next());
    assertEquals(new TestTuple<String>(25,""Allen""),cursor.tuple());
  }
}","public void initialize(){
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(20);
    btree=BTree.create(new SimpleMemoryRawStore(),md);
    btree.insert(10,""Bryan"");
    btree.insert(20,""Mike"");
    btree.insert(30,""James"");
  }
{
    ITupleCursor2<String> Cancel=newCursor(btree);
    assertEquals(new TestTuple<String>(20,""Mike""),Cancel.seek(20));
    assertEquals(new TestTuple<String>(20,""Mike""),Cancel.tuple());
    btree.insert(15,""Paul"");
    assertEquals(TestKeyBuilder.asSortKey(20),Cancel.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),Cancel.tuple());
    assertEquals(new TestTuple<String>(15,""Paul""),Cancel.prior());
    assertEquals(new TestTuple<String>(15,""Paul""),Cancel.tuple());
    btree.remove(15);
    assertEquals(null,Cancel.tuple());
    assertEquals(TestKeyBuilder.asSortKey(15),Cancel.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),Cancel.next());
    btree.remove(20);
    assertEquals(null,Cancel.tuple());
    assertEquals(TestKeyBuilder.asSortKey(20),Cancel.currentKey());
    btree.insert(25,""Allen"");
    assertEquals(TestKeyBuilder.asSortKey(20),Cancel.currentKey());
    assertEquals(null,Cancel.tuple());
    assertEquals(new TestTuple<String>(25,""Allen""),Cancel.next());
    assertEquals(new TestTuple<String>(25,""Allen""),Cancel.tuple());
  }
}",377,4,"test_concurrent_modification_insert:initialize,cursor:Cancel,",117,0.945948092,Beam
2757,"@SuppressWarnings({""SuspiciousNameCombination""}) public static double normalCdf(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}","@SuppressWarnings({""SuspiciousNameCombination""}) public static double calcCpu(double ay){
  double f, h;
  int j;
  double acpi, x, z, f1, f2, f3, f4, f5;
  x=ay;
  if (Math.abs(x) > 15.) {
    acpi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    acpi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    acpi=acpi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return acpi;
  }
 else {
    return (1.0 - acpi);
  }
}",238,14,"normalCdf:calcCpu,y:ay,dcphi:acpi,",1104,6.14247069,Beam
2758,"protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}","protected DateTimeData convert(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}",568,13,"parse:convert,",36,0.337082299,Beam
2759,,,28,4,,291,1.206543597,0
2760,,,84,5,,744,7.702847266,0
2761,"static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
","static void processFolder(File source,ModuleCandidate validate) throws IOException {
  File[] files=source.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(source,f,validate);
}
",47,5,"candidate:validate,loadDirectory:processFolder,file:source,",350,1.962768881,Beam
2762,"private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivatives.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}","private void feedForward(Vec back,List<Vec> activations,List<Vec> derivatives){
  Vec x=back;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivatives.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}",139,12,"input:back,",19,0.107170264,Beam
2763,,,163,14,,485,3.105385701,0
2764,"private Token toPrefixToken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}","private Token toPreffixTree(ILeafNode child){
  Lexer lexer=new InternalN4JSLexer();
  String text=child.getText();
  String prefix=text.substring(0,endOffset - child.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}",86,8,"leaf:child,toPrefixToken:toPreffixTree,",68,0.33309865,Beam
2765,,,334,5,,1266,15.08062315,0
2766,"protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}","protected void stopWraparoundedTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}",65,8,"stopWraparoundTest:stopWraparoundedTest,",4,0.02020489,Beam
2767,,,125,9,,2525,16.96385819,0
2768,,,78,7,,879,4.721861804,0
2769,,,107,6,,955,5.804578559,0
2770,,,276,20,,2819,15.60193251,0
2771,"public void flush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
","public void push(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
",32,3,"flush:push,",12,0.047273449,Beam
2772,,,80,9,,1635,27.91559155,0
2773,"private void pushAnnotatorsRef(String values){
  annotatorsRef.push(annotatorsRef.peek());
  setAnnotatorsRef(values);
}
","private void pushAnnotationsId(String properties){
  annotatorsRef.push(annotatorsRef.peek());
  setAnnotatorsRef(properties);
}
",25,3,"pushAnnotatorsRef:pushAnnotationsId,values:properties,",76,0.496125138,Beam
2774,,,371,19,,3627,31.28927666,0
2775,,,43,2,,330,2.094298422,0
2776,"@Override public AggregateableEvaluation aggregate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}","@Override public AggregateableEvaluation aggurate(Evaluation experuate){
  m_Incorrect+=experuate.incorrect();
  m_Correct+=experuate.correct();
  m_Unclassified+=experuate.unclassified();
  m_MissingClass+=experuate.m_MissingClass;
  m_WithClass+=experuate.m_WithClass;
  if (experuate.m_ConfusionMatrix != null) {
    double[][] newCamera=experuate.confusionMatrix();
    if (newCamera != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newCamera[i][j];
        }
      }
    }
  }
  double[] newClassPriors=experuate.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=experuate.m_ClassPriorsSum;
  m_TotalCost+=experuate.totalCost();
  m_SumErr+=experuate.m_SumErr;
  m_SumAbsErr+=experuate.m_SumAbsErr;
  m_SumSqrErr+=experuate.m_SumSqrErr;
  m_SumClass+=experuate.m_SumClass;
  m_SumSqrClass+=experuate.m_SumSqrClass;
  m_SumPredicted+=experuate.m_SumPredicted;
  m_SumSqrPredicted+=experuate.m_SumSqrPredicted;
  m_SumClassPredicted+=experuate.m_SumClassPredicted;
  m_SumPriorAbsErr+=experuate.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=experuate.m_SumPriorSqrErr;
  m_SumKBInfo+=experuate.m_SumKBInfo;
  double[] newMarginCounts=experuate.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=experuate.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=experuate.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=experuate.m_SumPriorEntropy;
  m_SumSchemeEntropy+=experuate.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=experuate.m_TotalSizeOfRegions;
  m_TotalCoverage+=experuate.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=experuate.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}",416,36,"evaluation:experuate,aggregate:aggurate,newMatrix:newCamera,",502,2.877068325,Beam
2777,"public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}","public final void mix(){
  long sum=_sum.getAndSet(0);
  int depth=_count.getAndSet(0);
  if (depth != 0)   _value=sum / (double)depth;
 else   _value=0;
}",48,6,"sample:mix,count:depth,",36,0.156701366,Beam
2778,,,65,4,,793,4.833039169,0
2779,"public void removeChildAt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}","public void removeNodeIt(int address){
  if ((address < 0) || (tests == null) || (address >= tests.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)tests.get(address);
  child.setParent(null);
  tests.remove(address);
}",68,4,"index:address,removeChildAt:removeNodeIt,children:tests,",192,0.960797751,Beam
2780,"protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
","protected void process(long binBridge,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(binBridge);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(binBridge);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (binBridge == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
",250,15,"doFloodBDDP:process,pinSwitch:binBridge,",258,1.65863177,Beam
2781,"public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}","public void cancelAutoQuple(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}",39,7,"cancelAutoCompletion:cancelAutoQuple,",18,0.112639991,Beam
2782,"private void onTrackPointElementStart(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String longitude=attributes.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
","private void onTrackPointElementStart(Attributes addresses) throws SAXException {
  String latitude=addresses.getValue(ATT_LAT);
  String longitude=addresses.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
",99,7,"attributes:addresses,",4,0.025884728,Beam
2783,,,74,4,,407,4.478602854,0
2784,,,60,3,,352,2.160642473,0
2785,,,20,2,,205,1.288222853,0
2786,,,148,14,,2449,13.49490369,0
2787,"public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}","public void delProducts(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}",549,21,"delItems:delProducts,",39,0.261168901,Beam
2788,,,89,7,,2001,19.17286833,0
2789,,,75,5,,896,5.046187921,0
2790,"private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
","private void appendClientConf(DockerSlaveTemplate slaveTemplate,CreateContainerCmd imageConfig){
  Map<String,String> labels=imageConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  imageConfig.withLabels(labels);
}
",74,4,"containerConfig:imageConfig,appendContainerConfig:appendClientConf,",88,0.427036778,Beam
2791,,,40,4,,224,1.103995466,0
2792,"public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,""ITALIC"");
  }
 else {
    writeTag(STYLE,""PLAIN"");
  }
  writeTag(""size"",value.getSize());
  closeTag();
}","public void exportTag(String tag,Font value){
  startTag(tag);
  exportTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    exportTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    exportTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    exportTag(STYLE,""ITALIC"");
  }
 else {
    exportTag(STYLE,""PLAIN"");
  }
  exportTag(""size"",value.getSize());
  closeTag();
}",137,4,"writeTag:exportTag,",4,0.061843097,Beam
2793,,,306,10,,2149,14.61534646,0
2794,,,30,2,,208,1.623292947,0
2795,,,159,6,,175,0.956799308,0
2796,,,57,6,,930,8.996160857,0
2797,,,108,14,,2661,13.40617156,0
2798,"public void start(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.start();
  }
}
","public void test(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.test();
  }
}
",31,2,"start:test,",26,0.130120989,Beam
2799,"public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}","public void setRangeINTERval(int index0,int Index01){
  int rmMinIndex=Math.min(index0,Index01);
  int rmMaxIndex=Math.max(index0,Index01);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,message.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}",206,11,"removeIndexInterval:setRangeINTERval,index1:Index01,value:message,",607,4.112909412,Beam
2800,"public static byte[] readBinaryFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}","public static byte[] readBlInputBuffer(File SourceFiles){
  byte[] result=null;
  try {
    BufferedInputStream error;
    error=new BufferedInputStream(new FileInputStream(SourceFiles));
    int num=error.available();
    result=new byte[num];
    error.read(result,0,num);
    error.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}",91,6,"readBinaryFile:readBlInputBuffer,sourceFile:SourceFiles,input:error,",427,5.318877268,Beam
2801,"public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split("","")));
}
","public static ArrayList<String> stringToStringL(String array){
  return new ArrayList<>(Arrays.asList(array.split("","")));
}
",32,2,"stringToArrayList:stringToStringL,string:array,",71,0.406343969,Beam
2802,,,54,4,,639,4.670616444,0
2803,,,234,10,,1322,7.03719161,0
2804,"public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  page.selected=children;
  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {
    page.rows=20;
    page.start=0;
  }
  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);
  if (page.filterType != FilterType.status)   page.selectPage(children);
  return page;
}","public PageOfCollections fquireChapter(PageOfCollections group,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  group.selected=children;
  if (group.start == 0 && group.rows == -1 && group.filter == null && children.size() > 10) {
    group.rows=20;
    group.start=0;
  }
  if (group.filterType == FilterType.name && group.filter != null)   children=group.applyNameFilter(children);
  if (group.filterType != FilterType.status)   group.selectPage(children);
  return group;
}",121,4,"fetchPage:fquireChapter,page:group,",86,0.680550019,Beam
2805,,,50,3,,422,2.961165524,0
2806,,,67,4,,451,2.77688696,0
2807,"public boolean isGerund(){
  return typeString.startsWith(VERB_GERUND);
}
","public boolean IsGerunda(){
  return nameClass.startsWith(VERB_GERUND);
}
",15,2,"isGerund:IsGerunda,typeString:nameClass,",69,0.331174445,Beam
2808,,,16,3,,249,1.270900106,0
2809,,,163,6,,1269,7.31130265,0
2810,,,21,4,,441,2.05204072,0
2811,,,125,4,,540,2.823928666,0
2812,,,149,3,,477,2.397194207,0
2813,,,178,7,,1802,10.74745271,0
2814,,,39,4,,202,1.284387477,0
2815,"public SSLEngine initSslEngine(boolean client) throws Exception {
  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));
  KeyStore trustStore;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug(""Using separate trust store"");
    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    trustStore=keyStore;
    LOGGER.debug(""Using key store as trust store"");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(trustStore);
  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance(""TLS"");
  sslContext.init(keyManagers,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(client);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}
","public SSLEngine initSsslCore(boolean socket) throws Exception {
  KeyStore instance=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(instance,keyStoreKeyPass(properties));
  KeyStore trustStore;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug(""Using separate trust store"");
    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    trustStore=instance;
    LOGGER.debug(""Using key store as trust store"");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(trustStore);
  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance(""TLS"");
  sslContext.init(keyManagers,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(socket);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}
",227,11,"initSslEngine:initSsslCore,client:socket,keyStore:instance,",619,33.00461055,Beam
2816,"public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}","public void type(String char){
  for (int i=0; i < char.length(); i++) {
    char c=char.charAt(i);
    type(c);
  }
}",44,4,"string:char,",23,0.123359601,Beam
2817,,,93,6,,759,8.237776879,0
2819,,,372,18,,1864,9.129292389,0
2820,,,17,3,,239,1.204879797,0
2821,"private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}","private static final void waitForEditorToStayAgent(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}",75,6,"waitForEditorToBeActive:waitForEditorToStayAgent,",39,0.226311855,Beam
2822,,,183,11,,1264,5.403964182,0
2823,,,49,4,,896,18.92020617,0
2824,,,174,2,,235,6.217730641,0
2825,,,48,3,,262,1.655057291,0
2826,,,65,6,,787,3.965351212,0
2827,,,15,2,,221,1.387418139,0
2828,"public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}","public byte[] loadbytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}",52,4,"readBytes:loadbytes,",13,0.054240473,Beam
2829,"public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
","public static void openOtherFri(final String file,final Activity model){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(file));
  model.startActivity(intent);
}
",40,4,"url:file,openOtherUri:openOtherFri,activity:model,",484,2.188552737,Beam
2830,"public static <T>T instance(Class<T> clazz){
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}
","public static <T>T throw(Class<T> Clclass){
  try {
    return Clclass.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}
",42,3,"instance:throw,clazz:Clclass,",338,1.528846137,Beam
2831,"public void performActions() throws Throwable {
  for (  Throwing.Runnable action : actions) {
    action.run();
  }
}
","public void performActionction() throws Throwable {
  for (  Throwing.Runnable action : actions) {
    action.run();
  }
}
",26,3,"performActions:performActionction,",6,0.022784762,Beam
2832,,,34,4,,750,4.232298362,0
2833,"private void cleanupMinidumpFile(){
  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {
    Log.w(TAG,""Unable to mark "" + mFileToUpload + "" as uploaded."");
    if (!mFileToUpload.delete()) {
      Log.w(TAG,""Cannot delete "" + mFileToUpload);
    }
  }
}
","private void cleanupMinipumpTask(){
  if (!CrashFileManager.tryMarkAsUploaded(mFileToInstall)) {
    Log.w(TAG,""Unable to mark "" + mFileToInstall + "" as uploaded."");
    if (!mFileToInstall.delete()) {
      Log.w(TAG,""Cannot delete "" + mFileToInstall);
    }
  }
}
",54,2,"cleanupMinidumpFile:cleanupMinipumpTask,mFileToUpload:mFileToInstall,",60,0.370059586,Beam
2834,,,30,5,,699,5.340285198,0
2835,,,164,5,,1061,7.154895322,0
2836,"public static String decode(String encoded,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (encoded == null || encoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(encoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}","public static String enccode(String Encrypted,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (Encrypted == null || Encrypted.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.enccode(Encrypted.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}",215,11,"encoded:Encrypted,decode:enccode,",116,0.673599664,Beam
2837,"@SuppressWarnings(""ResultOfMethodCallIgnored"") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException {
  if (fileOut == null) {
    logger.error(""The output filename doesn\'t exist or is invalid"");
    if (!ignoreErrors) {
      throw new IOException(""The output filename doesn\'t exist or is invalid"");
    }
  }
 else {
    File parent=fileOut.getParentFile();
    if (parent != null && !parent.exists()) {
      parent.mkdirs();
    }
    OutputStream fileStream=null;
    try {
      fileStream=new FileOutputStream(fileOut);
      pipeInputToOutputStream(in,fileStream,true,ignoreErrors);
    }
 catch (    IOException e) {
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        IOException ex) {
          logger.error(""Cannot close stream - {}"",ex.getMessage());
        }
      }
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
}
","@SuppressWarnings(""ResultOfMethodCallIgnored"") public static void pipeInput2WriteChannel(InputStream in,File fileParent,boolean ignoreErrors) throws IOException {
  if (fileParent == null) {
    logger.error(""The output filename doesn\'t exist or is invalid"");
    if (!ignoreErrors) {
      throw new IOException(""The output filename doesn\'t exist or is invalid"");
    }
  }
 else {
    File parent=fileParent.getParentFile();
    if (parent != null && !parent.exists()) {
      parent.mkdirs();
    }
    OutputStream fileStream=null;
    try {
      fileStream=new FileOutputStream(fileParent);
      pipeInput2WriteChannel(in,fileStream,true,ignoreErrors);
    }
 catch (    IOException e) {
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        IOException ex) {
          logger.error(""Cannot close stream - {}"",ex.getMessage());
        }
      }
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
}",166,9,"fileOut:fileParent,pipeInputToOutputStream:pipeInput2WriteChannel,",338,3.260565039,Beam
2838,"void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
","void pushRegion(String remote){
  if (fLocationList.contains(remote)) {
    return;
  }
  fLocationList.add(remote);
  fTableViewer.refresh();
  fTableViewer.setChecked(remote,true);
  fTableViewer.setSelection(new StructuredSelection(remote));
  validateLocations();
}
",58,4,"addLocation:pushRegion,location:remote,",102,0.505690885,Beam
2839,"public final String readUTF() throws IOException {
  return decodeUTF(readUnsignedShort());
}
","public final String getByte() throws IOException {
  return decodeUTF(readUnsignedShort());
}
",18,1,"readUTF:getByte,",9,0.038765732,Beam
2840,"public static final String toString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}
","public static final String toString(String iter){
  if (iter == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,iter);
  return buffer.toString();
}
",42,3,"str:iter,",15,0.074506036,Beam
2841,"public void saveIndexes(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (JobManager.VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}","public void run(){
  ArrayList TOStore=new ArrayList();
synchronized (this) {
    Object[] responseFile=this.indexes.responseFile;
    for (int i=0, l=responseFile.length; i < l; i++) {
      Index field=(Index)responseFile[i];
      if (field != null)       TOStore.add(field);
    }
  }
  boolean allsigned=true;
  for (int i=0, length=TOStore.size(); i < length; i++) {
    Index field=(Index)TOStore.get(i);
    ReadWriteMonitor monitor=field.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (field.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(field);
          }
 catch (          IOException e) {
            if (JobManager.VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allsigned=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allsigned=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allsigned;
}",264,10,"saveIndexes:run,valueTable:responseFile,toSave:TOStore,index:field,allSaved:allsigned,",4158,30.64070076,Beam
2842,,,50,2,,175,1.897974873,0
2843,,,59,5,,1450,6.790137235,0
2844,,,65,4,,248,1.582234081,0
2845,"private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
","private ODataFeed readFeedlogPerF(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
",62,6,"readFeedLogPerf:readFeedlogPerF,",20,0.112856229,Beam
2846,,,167,10,,1418,7.555249961,0
2847,"private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}","private static String trimString(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}",46,3,"trimVersion:trimString,",3,0.016798906,Beam
2848,,,17,2,,287,1.761410495,0
2849,"public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}
","public HoltWintersModelBuilder index(double index){
  this.index=index;
  return this;
}
",18,1,"alpha:index,",29,0.220456568,Beam
2850,,,183,9,,1059,5.957995665,0
2851,,,15,2,,95,0.502998475,0
2853,,,39,4,,587,3.549591398,0
2854,,,51,5,,922,5.297134149,0
2855,"public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configuration=configuration;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
","public OrionEditorInit(final TextEditorConfiguration configurations,final CodeAssistantFactory codeIntroductionFamily,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configurations=configurations;
  this.codeIntroductionFamily=codeIntroductionFamily;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
",45,5,"configuration:configurations,codeAssistantFactory:codeIntroductionFamily,",199,0.772999279,Beam
2856,"public static long readUINT32(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}","public static long readUBIT16(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}",50,4,"readUINT32:readUBIT16,",15,0.081512984,Beam
2857,,,107,11,,1452,9.637947027,0
2858,,,56,3,,376,2.095337017,0
2859,"public String toZString(){
  StringBuilder buffer=new StringBuilder(32);
  try {
    printZ(buffer);
  }
 catch (  IOException e) {
    throw new RuntimeException(""Exception printing to StringBuilder"",e);
  }
  return buffer.toString();
}","public String toZeroMessage(){
  StringBuilder message=new StringBuilder(32);
  try {
    printZ(message);
  }
 catch (  IOException e) {
    throw new RuntimeException(""Exception printing to StringBuilder"",e);
  }
  return message.toString();
}",47,3,"toZString:toZeroMessage,buffer:message,",57,0.288509293,Beam
2860,"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}","public void readExternal(ObjectInput lin) throws IOException, ClassNotFoundException {
  int vocabSize=lin.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=lin.readUTF();
    Vocabulary.id(line);
  }
  numTokens=lin.readDouble();
  countFuncs=new long[lin.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=lin.readLong();
    countFuncs[i][1]=lin.readLong();
  }
  typesFuncs=new long[lin.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=lin.readLong();
    typesFuncs[i][1]=lin.readLong();
  }
  quantizationBase=lin.readDouble();
  bf=new BloomFilter();
  bf.readExternal(lin);
}",206,10,"in:lin,",18,0.188630303,Beam
2861,,,76,8,,1247,6.541311387,0
2862,"public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String fromArray(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromArray(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:fromArray,",5,0.024224909,Beam
2863,"protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
","protected void start(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
",52,6,"reply:start,",52,0.305734551,Beam
2865,"private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}","private char[] align(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}",340,12,"applyFloatPadding:align,",56,0.398797154,Beam
2866,,,89,4,,618,7.300854007,0
2867,"public Key(byte[] hash){
  if (hash.length != SHA1_HASH_LENGTH) {
    throw new IllegalArgumentException(""Invalid Hash must be 20bytes, was: "" + hash.length);
  }
  System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH);
}","public ificate(byte[] mac){
  if (mac.length != SHA1_HASH_LENGTH) {
    throw new IllegalArgumentException(""Invalid Hash must be 20bytes, was: "" + mac.length);
  }
  System.arraycopy(mac,0,this.mac,0,SHA1_HASH_LENGTH);
}",48,3,"hash:mac,Key:ificate,",205,1.320022865,Beam
2868,,,170,14,,1917,11.21106071,0
2869,,,61,5,,1083,4.468678447,0
2870,,,278,11,,442,3.060156198,0
2871,,,35,3,,414,2.471331934,0
2872,"public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}","public static float scale(float[] string,int startIndex,int endLoop){
  float scale=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,string.length - 1);
  endLoop=Math.max(endLoop,0);
  endLoop=Math.min(endLoop,string.length - 1);
  if (startIndex > endLoop)   startIndex=endLoop;
  for (int i=startIndex; i <= endLoop; i++) {
    if (Float.isNaN(string[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    scale+=string[i];
    total++;
  }
  scale/=total;
  return scale;
}",142,6,"mean:scale,data:string,endIndex:endLoop,",756,5.116209654,Beam
2873,"public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}
","public static String readFileAsString(File class) throws FileNotFoundException {
  return readFileAsString(class.getAbsolutePath());
}
",22,2,"file:class,",13,0.070031337,Beam
2874,,,19,2,,290,1.825662466,0
2875,"private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
","private void notifyActivityStatusChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
",105,6,"notifyActivityStateChanged:notifyActivityStatusChanged,",5,0.024386859,Beam
2876,"private void analyzeClassFields(String className,int action){
  try {
    Class<?> dynamicClass=Class.forName(className);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(className,field,action);
        manyToAnyConditions(className,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);
  }
}
","private void analyzeClassSigns(String functionName,int action){
  try {
    Class<?> dynamicClass=Class.forName(functionName);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(functionName,field,action);
        manyToAnyConditions(functionName,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + functionName);
  }
}
",99,7,"className:functionName,analyzeClassFields:analyzeClassSigns,",124,1.017064476,Beam
2877,,,34,3,,482,2.011599433,0
2878,"private String partiallyEscapeAssertionValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int j=0; j < assertionValue.length(); j++) {
    char c=assertionValue.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}","private String partiallyEscapeAssertureString(String assertitonApplication){
  StringBuilder sb=new StringBuilder(assertitonApplication.length());
  for (int j=0; j < assertitonApplication.length(); j++) {
    char c=assertitonApplication.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}",94,5,"partiallyEscapeAssertionValue:partiallyEscapeAssertureString,assertionValue:assertitonApplication,",143,1.41074121,Beam
2879,"public static int putInt(byte[] bytes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}
","public static int insertFloat(byte[] bytes,int location,int len){
  if (littleEndian) {
    len=Integer.reverseBytes(len);
  }
  theUnsafe.insertFloat(bytes,location + BYTE_ARRAY_BASE_OFFSET,len);
  return location + Bytes.SIZEOF_INT;
}
",53,7,"offset:location,putInt:insertFloat,val:len,",857,5.763193695,Beam
2880,"public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
","public static void saveXStream(File saveTo,Object module,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(module);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
",73,5,"model:module,",58,0.297215597,Beam
2881,,,17,1,,57,0.388141525,0
2882,,,62,6,,738,6.277936761,0
2883,,,140,8,,1516,11.69661448,0
2884,"private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
","private static boolean type(ODatabaseDocumentPool object,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=object.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
",136,10,"test:type,pool:object,",389,5.674645495,Beam
2885,,,65,6,,1543,11.91886662,0
2886,,,78,7,,1696,9.984421821,0
2888,"protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){
  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress(""pdists"",relation.size(),LOG) : null;
  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {
    final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1);
    int ks=0;
    double ssum=0.;
    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {
      if (DBIDUtil.equal(neighbor,iditer)) {
        continue;
      }
      final double d=neighbor.doubleValue();
      ssum+=d * d;
      ks++;
    }
    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;
    pdists.putDouble(iditer,pdist);
    LOG.incrementProcessed(prdsProgress);
  }
  LOG.ensureCompleted(prdsProgress);
}","protected void parallel(Relation<O> error,KNNQuery<O> nnp,WritableDoubleDataStore p){
  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress(""pdists"",error.size(),LOG) : null;
  for (DBIDIter iditer=error.iterDBIDs(); iditer.valid(); iditer.advance()) {
    final KNNList neighbors=nnp.getKNNForDBID(iditer,kreach + 1);
    int ks=0;
    double ssum=0.;
    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {
      if (DBIDUtil.equal(neighbor,iditer)) {
        continue;
      }
      final double d=neighbor.doubleValue();
      ssum+=d * d;
      ks++;
    }
    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;
    p.putDouble(iditer,pdist);
    LOG.incrementProcessed(prdsProgress);
  }
  LOG.ensureCompleted(prdsProgress);
}",200,14,"computePDists:parallel,knn:nnp,pdists:p,relation:error,",900,6.918532463,Beam
2889,,,69,5,,756,3.972069514,0
2890,"public static List seriesNameListFromDataArray(Object[][] data){
  int seriesCount=data.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}","public static List seriesNameListFromRowMatrix(Object[][] list){
  int seriesCount=list.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}",66,5,"data:list,seriesNameListFromDataArray:seriesNameListFromRowMatrix,",79,0.50595427,Beam
2891,,,42,3,,523,2.624029108,0
2892,,,57,4,,515,4.044710294,0
2893,"public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<>();
  }
  return parse(str.toCharArray(),separator);
}
","public Map<String,String> type(final String r,char terminators){
  if (r == null) {
    return new HashMap<>();
  }
  return type(r.toCharArray(),terminators);
}
",46,3,"parse:type,str:r,separator:terminators,",398,2.396948504,Beam
2894,,,89,8,,1647,9.686304291,0
2895,,,32,3,,445,2.716452285,0
2896,"public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}","public Pair<Integer,List<Long>> entry(){
  try {
    classesProcessed++;
    Integer key=iterator.entry();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}",127,12,"next:entry,",6,0.052423215,Beam
2897,,,40,2,,204,1.052780346,0
2898,"private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){
  Validate.notNull(request,""request"");
  Validate.notEmpty(tenantName,""tenantName"");
  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();
  Validate.notNull(idmFactory,""idmFactory"");
  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();
  idmAccessor.setTenant(tenantName);
  String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntityId == null || encodedEntityId.isEmpty()) {
    logger.error(""No Relying Party\'s entity ID found. Ignore the request!"");
    return null;
  }
  String rpEntityId=new String(Base64.decode(encodedEntityId));
  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);
  if (rp != null) {
    return rp;
  }
 else {
    logger.error(""Unknown relying party: "" + rpEntityId);
    return null;
  }
}","private RelyingParty validateRelyingParty(HttpServletRequest event,String occupantPath){
  Validate.notNull(event,""request"");
  Validate.notEmpty(occupantPath,""tenantName"");
  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();
  Validate.notNull(idmFactory,""idmFactory"");
  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();
  idmAccessor.setTenant(occupantPath);
  String encodedEntityId=event.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntityId == null || encodedEntityId.isEmpty()) {
    logger.error(""No Relying Party\'s entity ID found. Ignore the request!"");
    return null;
  }
  String rpEntityId=new String(Base64.decode(encodedEntityId));
  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);
  if (rp != null) {
    return rp;
  }
 else {
    logger.error(""Unknown relying party: "" + rpEntityId);
    return null;
  }
}",149,9,"request:event,tenantName:occupantPath,",218,1.170279145,Beam
2899,"@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}","@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groocityFile);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groocityFile,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groocityFile,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}",194,10,"groovyScript:groocityFile,",202,1.082640235,Beam
2900,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllallowed(String listType){
  if (m_listenees.containsKey(listType)) {
    return false;
  }
  return true;
}
",28,3,"connectionAllowed:isAllallowed,eventName:listType,",73,0.532592877,Beam
2901,,,26,3,,349,2.16853108,0
2902,,,45,5,,525,1.857780369,0
2903,,,224,9,,746,4.998383208,0
2904,,,78,5,,765,6.021560097,0
2905,,,282,19,,1970,12.93766067,0
2906,"public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
","public void deleteObligation(final Obligation obligation,int basicPointId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicPointId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
",113,7,"basicBlockId:basicPointId,",7,0.069076423,Beam
2907,"private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}
","private void reset(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.reset();
    globalConfigs.reset();
  }
}
",55,6,"clear:reset,",5,0.037748174,Beam
2908,"public boolean canSpawnWorkers(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}","public boolean run(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}",220,11,"canSpawnWorkers:run,",28,0.780643376,Beam
2909,"@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
","@Deprecated public static EpisodeMatchingResult detectEpisodeFormSourceFile(File type){
  LOGGER.debug(""Detect episodes/seasons from file "" + type.getName());
  EpisodeMatchingResult test=new EpisodeMatchingResult();
  String fileName=type.getName();
  test=parseString(fileName);
  Collections.sort(test.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(test.name);
  test.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + test);
  return test;
}
",92,6,"file:type,detectEpisodeFromFilename:detectEpisodeFormSourceFile,result:test,",256,1.533880723,Beam
2910,"private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
","private void getAdilege(Object image,NamespacePermissionEnum[] transmissions,List<AccessDeniedException> accessDeniedExceptions){
  if (image != null) {
    if (image instanceof Collection) {
      Collection<?> collection=(Collection<?>)image;
      for (      Object activity : collection) {
        getAdilege(activity,transmissions,accessDeniedExceptions);
      }
    }
 else     if (image instanceof String) {
      try {
        getAdilege((String)image,transmissions);
      }
 catch (      AccessDeniedException accessDeniedEvent) {
        accessDeniedExceptions.add(accessDeniedEvent);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,image.getClass()));
    }
  }
}
",133,7,"checkPermission:getAdilege,object:image,permissions:transmissions,element:activity,accessDeniedException:accessDeniedEvent,",1865,15.24522227,Beam
2911,,,45,3,,667,4.831365518,0
2912,"public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
","public AddressLookup(String clientAddress,String serialNo,String string){
  this.clientAddress=clientAddress.trim();
  this.clientID=serialNo.trim();
  this.accessCode=string.trim();
}
",44,4,"password:string,serverUrl:clientAddress,",110,0.509874562,Beam
2913,,,72,6,,1277,9.65153567,0
2914,"public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}
","public static String prefix(String image,Object[] arguments){
  return MessageFormat.prefix(image,arguments);
}
",25,3,"format:prefix,message:image,",307,1.447936587,Beam
2915,,,210,11,,3147,14.75912294,0
2916,,,81,5,,1113,4.394210617,0
2917,"protected final void updateBorderText(final String text){
  Preconditions.checkNotNull(text,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(text);
  updateUI();
}","protected final void drawLineTitle(final String title){
  Preconditions.checkNotNull(title,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(title);
  updateUI();
}",31,3,"updateBorderText:drawLineTitle,text:title,",89,0.340422964,Beam
2918,"public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}
","public void erialization(KXmlSerializer initializers) throws IOException {
  mDeviceInfo.erialization(initializers);
  serializeHostInfo(initializers);
  serializeTestSummary(initializers);
  monkeyTag.erialization(initializers);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult runner : pkgs) {
    runner.erialization(initializers);
  }
}
",82,7,"serialize:erialization,serializer:initializers,r:runner,",664,3.649332754,Beam
2919,"protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){
  if (eoffset == -1) {
    eoffset=component.length - 1;
  }
  for (int i=soffset; i <= eoffset; i++) {
    if (!generous.get(component[i])) {
      return false;
    }
  }
  return true;
}","protected boolean validate(final char[] service,final int soffset,int eoffset,final BitSet generous){
  if (eoffset == -1) {
    eoffset=service.length - 1;
  }
  for (int i=soffset; i <= eoffset; i++) {
    if (!generous.get(service[i])) {
      return false;
    }
  }
  return true;
}",77,6,"component:service,",16,0.085971022,Beam
2920,"public static void copyToClipboard(Transferable t){
  ClipboardHelper.copyToClipboard(t);
}
","public static void copyToCliphole(Transferable t){
  ClipboardHelper.copyToCliphole(t);
}
",17,2,"copyToClipboard:copyToCliphole,",39,0.2362022,Beam
2921,,,280,13,,2072,12.08346201,0
2922,"public Location newLocation(String name){
  Location location=getLocationByName(name);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),name);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
","public Location insertRegion(String word){
  Location location=getLocationByName(word);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),word);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
",91,6,"newLocation:insertRegion,name:word,",115,0.865044657,Beam
2923,,,19,3,,194,0.821759697,0
2924,,,45,3,,497,2.049916967,0
2925,"@Override public boolean equals(Object o){
  return o.hashCode() == hashCode();
}
","@Override public boolean Equalls(Object o){
  return o.hashCode() == hashCode();
}
",22,2,"equals:Equalls,",4,0.014568893,Beam
2926,"void remove(SuperCardToast superCardToast){
  mList.remove(superCardToast);
}
","void empty(SuperCardToast superCardOfasts){
  mList.empty(superCardOfasts);
}
",15,3,"remove:empty,superCardToast:superCardOfasts,",183,1.000892727,Beam
2927,"public void removeCustomSashFormListener(ICustomSashFormListener listener){
  if (customSashFormListeners != null) {
    customSashFormListeners.remove(listener);
  }
}
","public void removeCustomSashFrontAdapter(ICustomSashFormListener outenser){
  if (customSashFormListeners != null) {
    customSashFormListeners.remove(outenser);
  }
}
",24,3,"listener:outenser,removeCustomSashFormListener:removeCustomSashFrontAdapter,",143,0.772395631,Beam
2928,,,26,7,,602,2.876661491,0
2929,,,91,7,,838,20.19687475,0
2930,,,153,10,,2220,32.90610574,0
2931,"private Node<K,V> findNode(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0)       return n;
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}","private Node<K,V> getNode(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0)       return n;
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}",190,9,"findNode:getNode,",3,0.056194103,Beam
2932,,,71,3,,661,3.677061677,0
2933,,,22,3,,364,1.450566018,0
2934,"private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException {
  if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {
    complianceImpl.verifyAttributes(attrSet);
  }
}
","private void checkComplianceRules(AttrSet attrList,boolean oreReplance) throws AMException {
  if (!oreReplance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {
    complianceImpl.verifyAttributes(attrList);
  }
}
",34,4,"checkComplianceAttributes:checkComplianceRules,ignoreCompliance:oreReplance,attrSet:attrList,",288,1.987853555,Beam
2935,"public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}","public void voidGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}",74,6,"testGetTableTypesOrder:voidGetTableTypesOrder,",3,0.019934233,Beam
2936,,,34,3,,282,1.569308933,0
2937,,,39,2,,183,1.190841722,0
2938,"protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}","protected int loadHeader(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMATS_INFO;
    }
  }
  return n;
}",87,9,"readBlock:loadHeader,STATUS_FORMAT_ERROR:STATUS_FORMATS_INFO,",81,0.319170014,Beam
2939,,,55,5,,1006,6.315981972,0
2940,"public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}","public void compputedPosition(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}",471,31,"computeParameters:compputedPosition,",26,0.286373532,Beam
2941,"private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
","private static void compare(DataObject left,DataObject right,HashMap<String,Change> cases,Set<String> included,Set<String> Exclusive,Set<String> described){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (described != null && described.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (Exclusive.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,cases);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,cases);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,cases);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,cases);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          cases.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
",401,18,"changes:cases,lookForChanges:compare,excluded:Exclusive,contained:described,",2002,14.33681456,Beam
2942,,,45,6,,145,1.037260755,0
2943,,,21,2,,130,0.630008233,0
2944,,,29,3,,297,1.39447432,0
2945,"public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}
","public PlaLineInt transiceCreatwithout(PlaVectorInt p_vec){
  if (p_vec.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.transiceCreatwithout(p_vec);
  PlaPointInt new_b=point_b.transiceCreatwithout(p_vec);
  return new PlaLineInt(new_a,new_b);
}
",52,6,"translate_by:transiceCreatwithout,p_vector:p_vec,",63,0.488789193,Beam
2946,,,19,1,,41,0.185160867,0
2947,"private void checkDuplicateNamesDuringDelete(List<Integer> ids){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ids) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ids.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}","private void sort(List<Integer> ims){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ims) {
    Entity removedEvent=game.getEntity(id);
    if (removedEvent == null) {
      continue;
    }
    String removedRawName=removedEvent.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEvent.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEvent.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ims.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEvent.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEvent.getShortNameRaw());
    }
  }
}",344,16,"ids:ims,checkDuplicateNamesDuringDelete:sort,removedEntity:removedEvent,",548,4.331195088,Beam
2948,,,64,6,,1037,4.866519372,0
2949,"public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}
","public void write(Writer layer) throws Exception {
  layer.write(toString());
  layer.flush();
}
",26,2,"writer:layer,",24,0.135082074,Beam
2950,,,66,5,,690,7.822851825,0
2951,,,138,8,,2035,14.43119951,0
2952,,,72,4,,432,2.770397631,0
2953,,,98,5,,926,4.584553226,0
2954,"public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}","public static double div(final double a,final double bad){
  if (a > bad) {
    return a;
  }
  if (a < bad) {
    return bad;
  }
  if (a != bad) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return bad;
  }
  return a;
}",74,4,"b:bad,max:div,",125,0.75016036,Beam
2955,"public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}
","public void complete(String description,String[] baseCommand) throws BackupException {
  complete(description,baseCommand,null,null,null,false,false);
}
",33,3,"exec:complete,",62,0.331194365,Beam
2956,"public static long[] asLongArray(final List<Long> l){
  final long[] a=new long[l.size()];
  for (int i=0; i < a.length; i++) {
    a[i]=l.get(i);
  }
  return a;
}","public static long[] asLargeVector(final List<Long> al){
  final long[] la=new long[al.size()];
  for (int i=0; i < la.length; i++) {
    la[i]=al.get(i);
  }
  return la;
}",65,4,"asLongArray:asLargeVector,l:al,a:la,",237,1.345543607,Beam
2957,,,53,4,,645,3.750308112,0
2958,,,42,3,,414,1.671316262,0
2959,,,70,5,,687,8.304644589,0
2960,"private static ClassInfo findOrCreateClass(String t){
  if (!t.endsWith(""[]"")) {
    return ClassInfo.findOrCreateClass(t);
  }
 else {
    String baseType=t.substring(0,t.indexOf(""[]""));
    int level=(t.length() - t.indexOf(""[]"")) / 2;
    String s="""";
    for (int i=0; i < level; ++i)     s+=""["";
    if (baseType.equals(""int""))     s+=""I"";
 else     if (baseType.equals(""boolean""))     s+=""B"";
 else     s+=""L"" + baseType + "";"";
    return ClassInfo.findOrCreateClass(s);
  }
}","private static ClassInfo findOrCreateClass(String p){
  if (!p.endsWith(""[]"")) {
    return ClassInfo.findOrCreateClass(p);
  }
 else {
    String baseType=p.substring(0,p.indexOf(""[]""));
    int level=(p.length() - p.indexOf(""[]"")) / 2;
    String s="""";
    for (int i=0; i < level; ++i)     s+=""["";
    if (baseType.equals(""int""))     s+=""I"";
 else     if (baseType.equals(""boolean""))     s+=""B"";
 else     s+=""L"" + baseType + "";"";
    return ClassInfo.findOrCreateClass(s);
  }
}",137,6,"t:p,",3,0.033615446,Beam
2961,,,62,4,,588,2.827781304,0
2962,,,85,5,,377,2.631505617,0
2963,"public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}","public StrBuilder comment(int path,boolean value){
  validateIndex(path);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,path,buffer,path + 4,size - path);
    buffer[path++]='t';
    buffer[path++]='r';
    buffer[path++]='u';
    buffer[path]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,path,buffer,path + 5,size - path);
    buffer[path++]='f';
    buffer[path++]='a';
    buffer[path++]='l';
    buffer[path++]='s';
    buffer[path]='e';
    size+=5;
  }
  return this;
}",159,5,"insert:comment,index:path,",103,0.644625572,Beam
2964,,,42,3,,378,2.228221393,0
2966,"public static String expandHiddenDir(final String filename){
  final int macro=filename.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return filename;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=filename.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}","public static String expandHiddenDir(final String username){
  final int macro=username.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return username;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=username.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}",100,6,"filename:username,",4,0.037110535,Beam
2967,"@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
","@SuppressWarnings(""rawtypes"") public void test2streamInfo(){
  final List<IBindingSet> expectedAsolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedAsolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedAsolutions.add(expected);
  }
  doEncodeDecodeTest(expectedAsolutions);
}",131,5,"test_streamAPI:test2streamInfo,expectedSolutions:expectedAsolutions,",30,0.237559032,Beam
2968,"public NvpBuilder addRaw(final String name,final String value){
  npv.put(name,value);
  return this;
}
","public NvpBuilder withDirect(final String name,final String value){
  npv.put(name,value);
  return this;
}
",26,4,"addRaw:withDirect,",11,0.044528695,Beam
2969,"public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}","public InputBuilder<T> repeatAll(int ts){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < ts; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}",58,5,"times:ts,",22,0.16422557,Beam
2970,,,106,8,,1267,7.381461581,0
2971,"public static int parseString(String value){
  return Integer.parseInt(value);
}
","public static int formatText(String type){
  return Integer.parseInt(type);
}
",18,2,"parseString:formatText,value:type,",61,0.325234242,Beam
2972,"public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}","public boolean isPDFFient(){
  String key=getSummary();
  return key != null && key.length() > 25;
}",27,2,"isPDFLicense:isPDFFient,",23,0.111444279,Beam
2973,"public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
","public static void processCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
",156,13,"queueCubeLoad:processCubeLoad,",223,1.092737484,Beam
2974,,,37,4,,624,3.249523318,0
2975,,,92,6,,1552,9.19548862,0
2976,,,199,9,,3055,24.56899495,0
2977,"private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){
  int totalCount;
  int minX, maxX, minY, maxY;
  boolean rs=table.getRowSelectionAllowed();
  boolean cs=table.getColumnSelectionAllowed();
  if (rs && cs) {
    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (rs) {
    totalCount=table.getSelectedRowCount();
    minX=0;
    maxX=table.getColumnCount() - 1;
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (cs) {
    totalCount=table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=0;
    maxY=table.getRowCount() - 1;
  }
 else {
    totalCount=0;
    minX=maxX=minY=maxY=0;
  }
  boolean stayInSelection;
  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {
    stayInSelection=false;
    maxX=table.getColumnCount() - 1;
    maxY=table.getRowCount() - 1;
    minX=Math.min(0,maxX);
    minY=Math.min(0,maxY);
  }
 else {
    stayInSelection=true;
  }
  if (dy == 1 && leadColumn == -1) {
    leadColumn=minX;
    leadRow=-1;
  }
 else   if (dx == 1 && leadRow == -1) {
    leadRow=minY;
    leadColumn=-1;
  }
 else   if (dy == -1 && leadColumn == -1) {
    leadColumn=maxX;
    leadRow=maxY + 1;
  }
 else   if (dx == -1 && leadRow == -1) {
    leadRow=maxY;
    leadColumn=maxX + 1;
  }
  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);
  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);
  do {
    calcNextPos(dx,minX,maxX,dy,minY,maxY);
  }
 while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));
  return stayInSelection;
}","private boolean moveWithinSelectedRange(JTable table,int tx,int dy,ListSelectionModel rsm,ListSelectionModel csm){
  int totalCount;
  int minX, maxX, minY, maxY;
  boolean rs=table.getRowSelectionAllowed();
  boolean cs=table.getColumnSelectionAllowed();
  if (rs && cs) {
    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (rs) {
    totalCount=table.getSelectedRowCount();
    minX=0;
    maxX=table.getColumnCount() - 1;
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (cs) {
    totalCount=table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=0;
    maxY=table.getRowCount() - 1;
  }
 else {
    totalCount=0;
    minX=maxX=minY=maxY=0;
  }
  boolean stayInSelection;
  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {
    stayInSelection=false;
    maxX=table.getColumnCount() - 1;
    maxY=table.getRowCount() - 1;
    minX=Math.min(0,maxX);
    minY=Math.min(0,maxY);
  }
 else {
    stayInSelection=true;
  }
  if (dy == 1 && leadColumn == -1) {
    leadColumn=minX;
    leadRow=-1;
  }
 else   if (tx == 1 && leadRow == -1) {
    leadRow=minY;
    leadColumn=-1;
  }
 else   if (dy == -1 && leadColumn == -1) {
    leadColumn=maxX;
    leadRow=maxY + 1;
  }
 else   if (tx == -1 && leadRow == -1) {
    leadRow=maxY;
    leadColumn=maxX + 1;
  }
  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);
  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);
  do {
    calcNextPos(tx,minX,maxX,dy,minY,maxY);
  }
 while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));
  return stayInSelection;
}",466,16,"dx:tx,",3,0.062775465,Beam
2978,,,110,4,,418,2.640895911,0
2979,"private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}","private void scheedayProfessional(int len){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=len;
    update();
  }
}",58,6,"scheduleCommercial:scheedayProfessional,length:len,",58,0.332333505,Beam
2981,"public void updateValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}
","public void updateValue(final Object key,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)key;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)key;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(key);
  }
}
",142,10,"value:key,",53,0.41913894,Beam
2982,"public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}
","public static void writeByte(long node,short val){
  if (UNALIGNED)   UNSAFE.writeByte(node,val);
 else   putShortByByte(node,val,BIG_ENDIAN);
}
",36,4,"addr:node,putShort:writeByte,",214,1.216302892,Beam
2983,"private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}","private void instruction(ArrayList<Instruction> images,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < images.size(); i++) {
    Instruction currInst=images.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          images.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          images.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        images.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          images.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          images.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}",378,11,"accesBreakpointInstruction:instruction,instructions:images,",164,1.290883354,Beam
2984,,,54,9,,2937,16.6789332,0
2985,,,267,15,,3693,21.04738362,0
2986,"public void addIncludes(String[] definitions){
  addStrings(INCLUDES,definitions);
  addStrings(linker_more,INCLUDES,definitions);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
","public void removeincludes(String[] efences){
  addStrings(INCLUDES,efences);
  addStrings(linker_more,INCLUDES,efences);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
",34,4,"addIncludes:removeincludes,definitions:efences,",128,0.626971638,Beam
2987,"public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean interaccounts(final PlanetModel planetModel,final Plane core,final GeoPoint[] notablePoints,final GeoPoint[] moreImportantPosts,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(core)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreImportantPosts) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * core.z - z * core.y;
  final double lineVectorY=z * core.x - x * core.z;
  final double lineVectorZ=x * core.y - y * core.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * core.z - this.z * core.y;
  final double denomXZ=this.x * core.z - this.z * core.x;
  final double denomXY=this.x * core.y - this.y * core.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * core.z - this.z * -core.D) * denom;
    z0=(this.y * -core.D + this.D * core.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * core.z - this.z * -core.D) * denom;
    y0=0.0;
    z0=(this.x * -core.D + this.D * core.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * core.y - this.y * -core.D) * denom;
    y0=(this.x * -core.D + this.D * core.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",1041,43,"intersects:interaccounts,moreNotablePoints:moreImportantPosts,q:core,",1315,11.67662547,Beam
2988,,,615,7,,1078,9.145665586,0
2989,,,25,3,,344,2.252183565,0
2990,"public void addRun(final Run run){
  runs.add(run);
  run.setId(runIdCounter++);
}
","public void addRun(final Run file){
  flows.add(file);
  file.setId(runIdCounter++);
}
",25,4,"run:file,runs:flows,",239,1.025016578,Beam
2991,"public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}
","public static void o(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  o(is,os,closeIS,true);
}
",65,6,"copy:o,",71,0.345594354,Beam
2992,"public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
","public Result doCompareCompareTest(Properties types) throws Exception {
  final long timeout=Long.parseLong(types.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(types.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(types.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(types.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(types.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(types.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(types.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(types.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result answer=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return answer;
}
",194,13,"doComparisonTest:doCompareCompareTest,properties:types,result:answer,",1940,13.93222936,Beam
2993,"private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}","private static int createPacedParparams(SunGraphics2D sg2d,GlyphList loc){
  return (((loc.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((loc.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((loc.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}",76,7,"createPackedParams:createPacedParparams,gl:loc,",141,0.830448437,Beam
2994,"public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException {
  if (list == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(list.size());
    out.writeBoolean(hasLongIDs);
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongIDs) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}","public static void writeListOfIntings(List list,boolean hasLongIDs,DataOutput out) throws IOException {
  if (list == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(list.size());
    out.writeBoolean(hasLongIDs);
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongIDs) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}",121,6,"writeListOfLongs:writeListOfIntings,",13,0.061961114,Beam
2995,,,240,11,,3370,16.46872521,0
2996,,,76,6,,920,5.439637927,0
2997,"private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}","private final Object internalCreplace(Object q,Object v,Object cv){
  int h=spread(q.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,q,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == q || q.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}",588,25,"internalReplace:internalCreplace,k:q,",188,1.506235739,Beam
2998,,,148,12,,2779,13.20589823,0
2999,"private void showPreloadingStage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
","private void showPreLoadingPage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
",48,3,"showPreloadingStage:showPreLoadingPage,",15,0.050237036,Beam
3000,,,71,10,,1513,8.695176566,0
3001,,,267,15,,3064,16.41144068,0
3002,,,157,7,,1411,9.489190352,0
3003,"public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);
  return results;
}","public int[] breadThLastSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextSectionFactory,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextSectionFactory);
  return results;
}",110,9,"nextValueIterator:nextSectionFactory,breadthFirstSearch:breadThLastSearch,",477,3.67471143,Beam
3005,"protected int splitListIndex(List<Pair<Double,Integer>> S){
  return S.size() / 2;
}","protected int splitListIndex(List<Pair<Double,Integer>> Input){
  return Input.size() / 2;
}",26,2,"S:Input,",31,0.248135467,Beam
3006,,,15,1,,51,0.252938,0
3007,"private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}","private static <T>int migrateAll(Migration<T> migrant) throws Exception {
  int migrated=0;
  for (  T entity : migrant.getAllEntities()) {
    try {
      if (migrant.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migrant.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}",104,5,"migration:migrant,",5,0.028028814,Beam
3008,"public void resetSingleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}","public void resetPoolton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource component : leakingResources) {
      try {
        component.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}",86,10,"resetSingleton:resetPoolton,resource:component,",100,0.914957082,Beam
3009,"public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){
  return parentName;
}
","public String resolveParentRelationName(String parentType,Object parent,String parentType,Object child){
  return parentType;
}
",21,5,"childName:parentType,parentName:parentType,",208,6.287174332,Beam
3010,,,116,9,,2348,61.4135309,0
3011,"private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
","private Map<URI,ExportMask> createExportMaskTable(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
",86,6,"createExportMaskMap:createExportMaskTable,",5,0.029344654,Beam
3012,,,35,4,,328,1.616468807,0
3013,"public synchronized void addRecentItem(T item){
  item=fromString(toString(item));
  if (m_RecentItems.size() > 0) {
    if (item.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(item);
  m_RecentItems.add(0,item);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(item);
}","public synchronized void addNewEntry(T page){
  page=fromString(toString(page));
  if (m_RecentItems.size() > 0) {
    if (page.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(page);
  m_RecentItems.add(0,page);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(page);
}",106,5,"item:page,addRecentItem:addNewEntry,",89,0.417711596,Beam
3014,,,65,6,,902,5.059826338,0
3015,,,75,9,,1510,10.16544645,0
3016,"public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}","public Pair<String,String> first(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}",149,11,"next:first,",3,0.020170975,Beam
3017,"public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}
","public synchronized void readframe(final Image data,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(data,totalDuration));
}
",32,5,"addFrame:readframe,image:data,",196,0.823948399,Beam
3018,,,398,17,,1719,9.441626859,0
3019,"public SetChangelogMapping(String source,String taskName,int changelogPartitionNumber){
  super(source);
  setType(TYPE);
  setKey(taskName);
  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber));
}
","public SetChangelogsMinding(String resource,String taskName,int changelogPartitionNumber){
  super(resource);
  setType(TYPE);
  setKey(taskName);
  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber));
}
",41,4,"SetChangelogMapping:SetChangelogsMinding,source:resource,",142,0.663249326,Beam
3020,"public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}","public static DoubleVector rscale(int n,double x,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,x);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + x) / sd);
  return v;
}",92,7,"rnorm:rscale,mean:x,",224,2.377605474,Beam
3021,,,68,5,,644,3.289273349,0
3022,,,277,13,,2194,11.96904211,0
3023,"public void cancelUnnamedTasks(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
","public void cancelUnnamedTests(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
",21,2,"cancelUnnamedTasks:cancelUnnamedTests,",8,0.032503351,Beam
3024,"InMemoryEntryStore(){
  entries=Maps.newHashMap();
  topLevelEntries=Sets.newHashSet();
  children=HashMultimap.create();
}
","InMemoryEntryManager(){
  entries=Maps.newHashMap();
  topLevelEntries=Sets.newHashSet();
  children=HashMultimap.create();
}
",29,4,"InMemoryEntryStore:InMemoryEntryManager,",3,0.013173823,Beam
3025,,,16,3,,359,2.006706103,0
3026,"public void actionPerformed(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
","public void processElided(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
",106,7,"actionPerformed:processElided,",22,0.130140658,Beam
3027,,,93,7,,1382,14.36614803,0
3028,,,241,12,,2416,17.6679686,0
3029,"public Iterator<String> iterateSerializers(){
  return serializers.iterator();
}
","public Iterator<String> iteratesserialize(){
  return Serialters.iterator();
}
",17,2,"iterateSerializers:iteratesserialize,serializers:Serialters,",94,0.46937718,Beam
3030,"private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
","private double Joizzle(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
",34,3,"Poisson:Joizzle,",11,0.049694395,Beam
3031,,,41,3,,513,2.295990272,0
3032,"public static byte[] encryptPassword(final String password,final byte[] seed) throws NoSuchAlgorithmException {
  if (password == null || password.equals("""")) {
    return new byte[0];
  }
  final MessageDigest messageDigest=MessageDigest.getInstance(""SHA-1"");
  final byte[] stage1=messageDigest.digest(password.getBytes());
  messageDigest.reset();
  final byte[] stage2=messageDigest.digest(stage1);
  messageDigest.reset();
  messageDigest.update(seed);
  messageDigest.update(stage2);
  final byte[] digest=messageDigest.digest();
  final byte[] returnBytes=new byte[digest.length];
  for (int i=0; i < digest.length; i++) {
    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);
  }
  return returnBytes;
}","public static byte[] encryptPassword(final String string,final byte[] seed) throws NoSuchAlgorithmException {
  if (string == null || string.equals("""")) {
    return new byte[0];
  }
  final MessageDigest messageDigest=MessageDigest.getInstance(""SHA-1"");
  final byte[] stage1=messageDigest.digest(string.getBytes());
  messageDigest.reset();
  final byte[] stage2=messageDigest.digest(stage1);
  messageDigest.reset();
  messageDigest.update(seed);
  messageDigest.update(stage2);
  final byte[] digest=messageDigest.digest();
  final byte[] returnBytes=new byte[digest.length];
  for (int i=0; i < digest.length; i++) {
    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);
  }
  return returnBytes;
}",177,9,"password:string,",5,0.046278179,Beam
3033,"default B with(String key,long value){
  return with(key,Long.toString(value));
}
","default B and(String parent,long message){
  return and(parent,Long.toString(message));
}
",25,3,"with:and,key:parent,value:message,",429,2.515846288,Beam
3034,,,29,5,,633,4.085247978,0
3035,,,89,1,,49,0.213209999,0
3036,"public static String noPrefix(String path,String prefix){
  Objects.requireNonNull(path,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}
","public static String noPrefix(String post,String index){
  Objects.requireNonNull(post,""path must not be null"");
  Objects.requireNonNull(index,""prefix must not be null"");
  return post.startsWith(index) ? post.substring(index.length()) : post;
}
",52,3,"path:post,prefix:index,",153,1.544496624,Beam
3037,,,120,11,,1311,9.406475218,0
3039,"public Process(final String xmlString) throws IOException, XMLException {
  initContext();
  StringReader in=new StringReader(xmlString);
  readProcess(in);
  in.close();
}
","public Write(final String xmlString) throws IOException, XMLException {
  initContext();
  StringReader in=new StringReader(xmlString);
  readProcess(in);
  in.close();
}
",37,3,"Process:Write,",33,0.156389209,Beam
3040,"default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}
","default ByteBuffer erialze(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  erialze(value,buffer);
  return buffer;
}
",32,3,"serialize:erialze,",19,0.106583258,Beam
3041,,,94,5,,154,0.957931987,0
3042,,,30,2,,190,1.116295449,0
3043,,,57,4,,484,2.647186232,0
3044,"public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
","public String FullFORM(final String str,final String fullStr){
  String ret=fullStr;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
",92,8,"fullForm:FullFORM,lowString:fullStr,",233,3.047202194,Beam
3045,"static int writeVarLong(OutputStream out,long x) throws IOException {
  int len=0;
  while ((x & ~0x7f) != 0) {
    out.write((byte)(0x80 | (x & 0x7f)));
    x>>>=7;
    len++;
  }
  out.write((byte)x);
  return ++len;
}","static int writeFixedInt(OutputStream size,long tx) throws IOException {
  int len=0;
  while ((tx & ~0x7f) != 0) {
    size.write((byte)(0x80 | (tx & 0x7f)));
    tx>>>=7;
    len++;
  }
  size.write((byte)tx);
  return ++len;
}",71,4,"writeVarLong:writeFixedInt,x:tx,out:size,",421,2.724116385,Beam
3047,"public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}","public void testFilteredQualifier(){
  Instances default;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    default=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(default);
    for (i=0; i < default.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(default.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}",88,5,"testFilteredClassifier:testFilteredQualifier,data:default,",60,0.410057779,Beam
3048,,,182,2,,307,3.495255776,0
3049,,,175,11,,2649,19.43281068,0
3050,"public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}","public final void readToFile(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readToFile(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}",251,21,"readFromStream:readToFile,",11,0.063870128,Beam
3051,,,65,5,,714,3.758853773,0
3052,,,639,25,,4304,37.8927891,0
3053,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newVal;
  count++;
  firstTime=false;
}
","@Override public void dump(Object newObj){
  if (newObj instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newObj);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newObj;
  count++;
  firstTime=false;
}
",88,6,"agg:dump,newVal:newObj,",62,0.470885416,Beam
3054,,,318,17,,3342,25.45724111,0
3055,,,50,4,,510,2.089357424,0
3056,,,27,2,,227,1.285636119,0
3057,,,16,2,,117,0.511547573,0
3058,"private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}","private P filterLargeValueLizes(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}",161,13,"filterLargeValueSets:filterLargeValueLizes,",101,1.207114287,Beam
3059,"void repaintChildren(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
","void rewaintMembers(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
",25,3,"repaintChildren:rewaintMembers,",24,0.107220336,Beam
3060,,,46,5,,1135,4.740647662,0
3061,,,1031,28,,3854,29.23469993,0
3062,,,50,4,,590,3.645408833,0
3063,,,45,4,,355,1.760998333,0
3064,,,63,4,,716,7.658457045,0
3065,"static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}
","static public void process(String input,String config,String packFileName){
  process(new Settings(),input,config,packFileName);
}
",30,4,"output:config,",15,0.106231443,Beam
3066,,,150,12,,2867,21.42610639,0
3067,,,116,7,,1364,8.684904945,0
3068,"public String globalInfo(){
  return ""Generates a single train/test split and calls the appropriate "" + ""SplitEvaluator to generate some results."";
}
","public String generalIndex(){
  return ""Generates a single train/test split and calls the appropriate "" + ""SplitEvaluator to generate some results."";
}
",12,1,"globalInfo:generalIndex,",10,0.047465511,Beam
3069,"private void reloadModelWithNewValue(final Long newValue){
  final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue;
  for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) {
    final PropertyChangeEvent event=new PropertyChangeEvent(this,""model"",getModelUpdatePeriod(),newValueAsPrimitive);
    listener.propertyChange(event);
  }
}
","private void reloadModelwithnewModel(final Long nextVersion){
  final long newValueAsPrimitive=nextVersion == null ? getModelUpdatePeriod() : nextVersion;
  for (  final PropertyChangeListener listerver : modelUpdatePeriodListeners) {
    final PropertyChangeEvent event=new PropertyChangeEvent(this,""model"",getModelUpdatePeriod(),newValueAsPrimitive);
    listerver.propertyChange(event);
  }
}
",59,6,"reloadModelWithNewValue:reloadModelwithnewModel,newValue:nextVersion,listener:listerver,",648,13.68452481,Beam
3070,,,48,2,,144,0.943242252,0
3073,,,28,3,,300,2.520040623,0
3074,"public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
","public JSONObject toJjson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJjson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
",70,5,"toJson:toJjson,",10,0.062305526,Beam
3075,"public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}
","public void change(ClassNode name,int n){
  remove(n);
  push(name);
}
",22,3,"replace:change,type:name,",95,0.530480492,Beam
3076,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void cache(SolrCore base,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(base,searcher);
  lookup.cache(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",97,9,"build:cache,core:base,",158,1.040936653,Beam
3077,,,110,6,,1254,7.457611243,0
3078,"private void applyL1Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}","private void applyL1Reg(final double eta_d,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_d * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}",173,14,"eta_t:eta_d,",3,0.125648415,Beam
3079,,,431,27,,4421,34.80622766,0
3080,,,19,2,,235,1.535074715,0
3081,,,167,10,,2758,18.85328968,0
3082,,,29,3,,449,3.357160695,0
3083,"synchronized boolean release(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
","synchronized boolean wake(){
  d(""release()"");
  if (down == BUSY) {
    down=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
",41,5,"release:wake,state:down,",106,0.518056544,Beam
3084,,,167,11,,1768,24.37813653,0
3085,,,24,4,,375,1.487624224,0
3086,,,69,4,,557,4.99072876,0
3087,,,51,3,,557,5.36741449,0
3088,,,55,5,,779,7.381883717,0
3089,,,225,3,,497,2.97390693,0
3090,"public final synchronized byte[] toByteArray(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toByteArray();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}","public final synchronized byte[] toCharA(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toCharA();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}",117,4,"toByteArray:toCharA,",13,0.056448305,Beam
3091,,,12,1,,39,0.178079224,0
3092,"public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
","public void register(@NonNull T example){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.register(example);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
",56,5,"add:register,item:example,",93,0.559099523,Beam
3093,"protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
","protected static boolean isCglibGetCallbacks(AnnotatedMethod arm){
  Class<?> rt=arm.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
",102,6,"am:arm,",7,0.076828305,Beam
3094,,,57,4,,782,5.387826133,0
3095,"private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}","private static String parseHeader(String text,int index){
  String type=null;
  Matcher matcher=COMMENT_PATTERN.matcher(text.substring(index));
  if (matcher.find()) {
    type=matcher.group(1);
    type=type.substring(1);
  }
  return type;
}",64,5,"input:text,readComment:parseHeader,comment:type,",533,2.188518866,Beam
3096,"@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){
  return term1.compareTo(term2);
}","@Override public int ompare(NewSplitEmittedTerm termsOne,NewSplitEmittedTerm filter1){
  return termsOne.compareTo(filter1);
}",22,3,"term1:termsOne,compare:ompare,term2:filter1,",307,1.240478802,Beam
3097,"public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}
","public static void closeFinirt(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeFinirt(rsrc.channel());
}
",27,2,"closeQuiet:closeFinirt,",14,0.064389304,Beam
3098,,,77,5,,765,4.03195169,0
3099,"public int size(){
  return _attrs.size();
}
","public int cycle(){
  return _attrs.cycle();
}
",14,2,"size:cycle,",31,0.121771042,Beam
3100,"private void writeLog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
","private void putFile(String op){
  try {
    if (m_writer == null) {
      File path=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(path));
      log.info(path.toString());
    }
    m_writer.println(op);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
",86,6,"cmd:op,writeLog:putFile,file:path,",298,1.411610591,Beam
3101,"private void writeJarPostResource(Element postResourceEl,String path){
  postResourceEl.setAttribute(""className"",JAR_RESOURCE_SET);
  postResourceEl.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
","private void writeJarpostResources(Element postResourceEl,String type){
  postResourceEl.setAttribute(""className"",JAR_RESOURCE_SET);
  postResourceEl.setAttribute(""base"",type.replace(""&"",""&amp;""));
}
",37,3,"writeJarPostResource:writeJarpostResources,path:type,",93,0.53230511,Beam
3102,"public void disable(RichFormatterFeature feature){
  features.remove(feature);
}
","public void end(RichFormatterFeature feature){
  features.remove(feature);
}
",16,3,"disable:end,",38,0.218919277,Beam
3103,,,84,9,,1793,9.580100505,0
3105,"public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}","public static StringBuffer updateStr(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}",115,6,"replaceString:updateStr,",70,0.429037793,Beam
3106,,,16,3,,87,0.377172617,0
3107,,,151,5,,903,6.350131945,0
3108,"public NSNumber(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}
","public nsNumber(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}
",18,6,"NSNumber:nsNumber,",4,0.013861616,Beam
3109,,,51,4,,405,3.807691141,0
3110,"public boolean hasNameValue(String name){
  return nameValueMap.containsKey(name.toLowerCase());
}
","public boolean hasNameValues(String data){
  return nameValueCache.containsKey(data.toLowerCase());
}
",21,3,"hasNameValue:hasNameValues,name:data,nameValueMap:nameValueCache,",281,2.073240761,Beam
3111,,,33,4,,114,1.052108955,0
3112,"public static void overwrite(long[] vector,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}","public static void overwrite(long[] vector,long val,int part,int len){
  int idx=part >> 6;
  int bitIdx=part & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}",117,9,"offset:part,",50,0.401568898,Beam
3113,"protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {
}
","protected void startAdditionalServices(final Cache conf,final Map<String,Object> conf) throws Exception {
}
",21,3,"cache:conf,options:conf,",96,0.59927791,Beam
3114,"private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
","private void onAccount(@NotNull TLAbsUser absAccount){
  User currentUser=null;
  User user=null;
  if (absAccount instanceof TLUser) {
    final TLUser tlUser=(TLUser)absAccount;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
",239,6,"absUser:absAccount,onUser:onAccount,",51,0.402996389,Beam
3115,,,35,3,,510,2.912736015,0
3118,"protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){
  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();
  String sqlStmt=""SELECT r.M_RMA_ID, r.DocumentNo || \'-\' || r.Amt from M_RMA r "" + ""WHERE ISSOTRX=\'N\' AND r.DocStatus in (\'CO\', \'CL\') "" + ""AND r.C_BPartner_ID=? ""+ ""AND NOT EXISTS (SELECT * FROM C_Invoice inv ""+ ""WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN (\'CO\', \'CL\'))"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sqlStmt,null);
    pstmt.setInt(1,C_BPartner_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));
    }
    rs.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sqlStmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception ex) {
        log.severe(""Could not close prepared statement"");
      }
    }
  }
  return list;
}","protected ArrayList<KeyNamePair> loadRMAData(int db){
  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();
  String sqlStmt=""SELECT r.M_RMA_ID, r.DocumentNo || \'-\' || r.Amt from M_RMA r "" + ""WHERE ISSOTRX=\'N\' AND r.DocStatus in (\'CO\', \'CL\') "" + ""AND r.C_BPartner_ID=? ""+ ""AND NOT EXISTS (SELECT * FROM C_Invoice inv ""+ ""WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN (\'CO\', \'CL\'))"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sqlStmt,null);
    pstmt.setInt(1,db);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));
    }
    rs.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sqlStmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception ex) {
        log.severe(""Could not close prepared statement"");
      }
    }
  }
  return list;
}",176,8,"C_BPartner_ID:db,",57,0.343857594,Beam
3119,"public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}","public static void notEmpty(String message,String msg){
  if (message == null || message.length() == 0)   throw new IllegalArgumentException(msg);
}",34,3,"string:message,",61,0.329356849,Beam
3121,,,136,15,,3119,154.9125063,0
3122,,,99,6,,1192,9.234105329,0
3123,"public JournalIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,final boolean readOnly){
  super(store,checkpoint,metadata,readOnly);
}
","public JournalEntry(final IRawStore store,final Checkpoint Checkpoints,final IndexMetadata metadata,final boolean readOnly){
  super(store,Checkpoints,metadata,readOnly);
}
",32,5,"checkpoint:Checkpoints,JournalIndex:JournalEntry,",427,2.136377772,Beam
3124,"public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}","public void decodePage(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}",190,11,"dumpIndex:decodePage,",43,0.226815927,Beam
3125,"public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.loadClass(name,resolve));
}","public Class<?> installFile(String name,boolean Resolution) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (Resolution) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.installFile(name,Resolution));
}",130,8,"loadClass:installFile,resolve:Resolution,",80,0.92869616,Beam
3126,,,75,7,,656,4.915544486,0
3127,"public AsyncSelector() throws IOException {
  this(Selector.open());
}
","public AsyncOperopen() throws IOException {
  this(Selector.open());
}
",17,1,"AsyncSelector:AsyncOperopen,",11,0.050635688,Beam
3128,"public SessionWrapper(Session ses){
  this.ses=ses;
  this.time=System.currentTimeMillis();
}
","public SessionWebppers(Session esi){
  this.esi=esi;
  this.time=System.currentTimeMillis();
}
",24,2,"SessionWrapper:SessionWebppers,ses:esi,",175,0.788928568,Beam
3129,"private int calculateMenuMargin(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}
","private int calculateMenuDivan(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point sync=new Point();
  display.getSize(sync);
  int height=sync.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}
",64,6,"calculateMenuMargin:calculateMenuDivan,size:sync,",251,1.621996784,Beam
3130,,,42,3,,383,3.018451242,0
3131,,,18,2,,333,2.078254012,0
3132,,,39,5,,1500,11.30445972,0
3133,,,327,10,,1407,18.15659195,0
3134,"public static void writeStringToWriter(String string,Writer writer) throws IOException {
  BufferedWriter bw=new BufferedWriter(writer);
  try {
    bw.write(string);
  }
  finally {
    bw.close();
  }
}
","public static void writeStringAndReader(String reader,Writer word) throws IOException {
  BufferedWriter bcws=new BufferedWriter(word);
  try {
    bcws.write(reader);
  }
  finally {
    bcws.close();
  }
}
",43,4,"string:reader,writer:word,writeStringToWriter:writeStringAndReader,bw:bcws,",613,3.083362524,Beam
3135,,,192,9,,1529,10.13798456,0
3136,"public void push(){
  state.cliprgn=g.getClipBounds();
  stack.push(state);
  state=(GraphicsState)state.clone();
}
","public void roll(){
  state.cliprgn=g.getClipBounds();
  queue.roll(state);
  state=(GraphicsState)state.clone();
}
",35,4,"push:roll,stack:queue,",298,1.69017183,Beam
3137,"protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
","protected List<URI> loop(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
",78,6,"load:loop,",23,0.11975222,Beam
3138,,,30,5,,1447,7.003776916,0
3139,,,28,3,,442,2.538985833,0
3140,,,17,4,,689,3.178305721,0
3141,"public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){
  if (compareArraySize(expected,actual)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[actual.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < actual.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(actual[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(actual));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}","public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] average){
  if (compareArraySize(expected,average)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[average.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < average.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(average[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(average));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}",185,10,"actual:average,",13,0.128125974,Beam
3142,,,52,4,,693,3.183880667,0
3143,"public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}","public boolean SoftSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}",120,5,"softSignin:SoftSignin,",4,0.039711551,Beam
3144,"public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=action.startsWith(""no"");
  if (no)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}","public int active(String factory,String active){
  Integer current=get(factory);
  if (current == null)   throw new IllegalArgumentException(factory);
  boolean no=active.startsWith(""no"");
  if (no)   active=active.substring(2);
  Integer bit=getAction(active);
  if (bit == null)   throw new IllegalArgumentException(active);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(factory,new Integer(n));
  return n;
}",135,8,"action:active,fault:factory,",70,0.591643222,Beam
3145,,,15,2,,157,0.810562623,0
3146,,,144,14,,2572,29.40539734,0
3147,,,26,3,,561,8.219359211,0
3148,,,152,9,,1822,99.22457988,0
3149,,,153,12,,849,3.767796445,0
3150,,,44,4,,945,4.471916397,0
3151,"private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
","private void compileElog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
",63,5,"compileProlog:compileElog,",26,0.125817315,Beam
3152,"public void init(SocketChannel channel){
  _channel=channel;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
","public void config(SocketChannel channel){
  _channel=channel;
  _currentQueue.clear();
  _currentQueue.flip();
  _needsFlush=false;
}
",29,5,"init:config,_readBuffer:_currentQueue,",231,1.095832554,Beam
3153,"public static List<Window> windows(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return windows(list,windowSize);
}
","public static List<Window> python(String users,int listLen){
  StringTokenizer tokenizer=new StringTokenizer(users);
  List<String> collection=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   collection.add(tokenizer.nextToken());
  return python(collection,listLen);
}
",66,5,"windowSize:listLen,windows:python,words:users,list:collection,",777,5.360198752,Beam
3154,"private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}","private void bcsave(char enc){
  try {
    mBuff[++mBuffIdx]=enc;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=enc;
  }
}",70,5,"bappend:bcsave,ch:enc,",90,0.469032852,Beam
3155,,,24,2,,204,1.827130616,0
3156,"public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void sphereFromEarth(Vector3 obj){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    obj.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    obj.setX(coord[0]);
    obj.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",146,9,"sphericalToWorld:sphereFromEarth,vec:obj,",118,1.105085719,Beam
3157,,,48,4,,475,2.546579011,0
3158,"@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
","@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream pool) throws IOException {
  pool.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    pool.writeObject(entry.getKey());
    pool.writeObject(entry.getValue());
  }
}
",92,4,"stream:pool,",16,0.088132679,Beam
3159,,,152,6,,1072,6.112797785,0
3160,,,17,3,,360,2.030503194,0
3161,"public boolean compare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}","public boolean parare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}",50,4,"compare:parare,",5,0.020474553,Beam
3162,"void add(Object key){
  table.put(key,key);
}
","void store(Object key){
  table.put(key,key);
}
",17,3,"add:store,",11,0.054377019,Beam
3163,,,96,6,,1109,13.87594682,0
3164,,,56,2,,63,0.535884889,0
3165,,,75,6,,226,1.166161287,0
3166,,,68,4,,519,3.099673434,0
3167,"public void fireEventProgrammatically(Event event){
  if (!event.isConsumed())   ripplerPane.fireEvent(event);
}
","public void fireventProgrammatic(Event event){
  if (!event.isConsumed())   ripplerCompipe.fireEvent(event);
}
",25,3,"fireEventProgrammatically:fireventProgrammatic,ripplerPane:ripplerCompipe,",229,1.661832889,Beam
3168,,,12,1,,33,0.223691432,0
3169,,,22,2,,266,1.904118478,0
3170,,,46,3,,435,3.019798366,0
3171,"@Override protected void onMessageOnProducerThread(T msg){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(msg);
  }
  finally {
    _lock.unlock();
  }
}
","@Override protected void onMessageOnProcesscerPool(T node){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(node);
  }
  finally {
    _lock.unlock();
  }
}
",57,8,"onMessageOnProducerThread:onMessageOnProcesscerPool,msg:node,",161,0.878849959,Beam
3172,,,140,7,,1031,6.151992917,0
3173,"public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}","public static double dadd_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}",35,3,"dmod_d:dadd_d,",26,0.513009361,Beam
3174,,,26,2,,255,1.757743851,0
3175,"public static void printThreadInfo(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}","public static void getTaskStatus(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}",311,11,"printThreadInfo:getTaskStatus,",19,0.09518435,Beam
3176,"protected boolean readReceiveDelay(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}","protected boolean readReceiverWaitace(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusCode2.setText(rb.getString(""Error7""));
    statusCode2.setVisible(true);
    receiveDelay=0;
    errorOutStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusCode2.setText(rb.getString(""Error8""));
    statusCode2.setVisible(true);
    receiveDelay=0;
    errorOutStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusCode2.setText(rb.getString(""Error9""));
    statusCode2.setVisible(true);
    receiveDelay=0;
    errorOutStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}",157,6,"readReceiveDelay:readReceiverWaitace,statusText1:statusCode2,errorInStatus1:errorOutStatus1,",650,11.72451113,Beam
3177,"final void putLong(int offset,long value){
  unsafe.putLong(offset + address,value);
}
","final void set64(int origin,long image){
  unsafe.set64(origin + address,image);
}",23,5,"offset:origin,putLong:set64,value:image,",397,1.765858694,Beam
3178,,,67,3,,421,2.158908522,0
3179,,,87,3,,234,1.454398247,0
3180,"public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}","public String scanLine(File model){
  log.config(model.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(model),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}",172,9,"file:model,parseFile:scanLine,",55,0.244494804,Beam
3181,"private void loadText(InputStream is){
  BufferedReader reader;
  String line;
  unitList=new ArrayList();
  unitTypesList=new ArrayList();
  if (is == null) {
    throw new Error(""Can\'t load cluster db file."");
  }
  reader=new BufferedReader(new InputStreamReader(is));
  try {
    line=reader.readLine();
    lineCount++;
    while (line != null) {
      if (!line.startsWith(""***"")) {
        parseAndAdd(line,reader);
      }
      line=reader.readLine();
    }
    reader.close();
    units=new DatabaseClusterUnit[unitList.size()];
    units=(DatabaseClusterUnit[])unitList.toArray(units);
    unitList=null;
    unitTypes=new UnitType[unitTypesList.size()];
    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);
    unitTypesList=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + "" at line "" + lineCount);
  }
 finally {
  }
}
","private void load(InputStream is){
  BufferedReader reader;
  String rule;
  unitList=new ArrayList();
  unitTypesList=new ArrayList();
  if (is == null) {
    throw new Error(""Can\'t load cluster db file."");
  }
  reader=new BufferedReader(new InputStreamReader(is));
  try {
    rule=reader.readLine();
    lineCount++;
    while (rule != null) {
      if (!rule.startsWith(""***"")) {
        parseAndAdd(rule,reader);
      }
      rule=reader.readLine();
    }
    reader.close();
    units=new DatabaseClusterUnit[unitList.size()];
    units=(DatabaseClusterUnit[])unitList.toArray(units);
    unitList=null;
    unitTypes=new UnitType[unitTypesList.size()];
    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);
    unitTypesList=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + "" at line "" + lineCount);
  }
 finally {
  }
}
",196,10,"loadText:load,line:rule,",341,1.732531695,Beam
3182,,,20,2,,155,0.642714258,0
3183,"private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}","private void readFines(final LittleEndianDataInputStream dist) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dist.skip(80);
  int facetCount=dist.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dist.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dist.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dist.readFloat();
    dist.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}",309,12,"readBinary:readFines,dis:dist,",105,0.579782736,Beam
3184,,,120,8,,1805,25.64713142,0
3185,"public Identity(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}
","public Keyifier(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}
",25,2,"Identity:Keyifier,",47,0.249843184,Beam
3186,,,30,2,,342,1.638197684,0
3187,"@Override public void write(Buffer buffer,boolean isEnd) throws IOException {
  if (_s == null) {
    buffer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (buffer.isDirect()) {
      _totalWriteBytes+=buffer.length();
      _s.write(buffer.direct());
      return;
    }
    _totalWriteBytes+=buffer.length();
    while (buffer.length() > 0) {
      _writeBuffer.clear();
      buffer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    buffer.free();
  }
}","@Override public void written(Buffer transfer,boolean isEnd) throws IOException {
  if (_s == null) {
    transfer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (transfer.isDirect()) {
      _totalWriteBytes+=transfer.length();
      _s.written(transfer.direct());
      return;
    }
    _totalWriteBytes+=transfer.length();
    while (transfer.length() > 0) {
      _writeBuffer.clear();
      transfer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.written(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    transfer.free();
  }
}",165,9,"write:written,buffer:transfer,",269,3.362904433,Beam
3189,,,46,3,,512,3.618070889,0
3190,"public void interruptAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interruptAll();
  }
}
","public void interruptionAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interruptionAll();
  }
}
",38,4,"interruptAll:interruptionAll,",8,0.046716344,Beam
3191,"private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}","private void encode(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}",395,14,"updateLtp:encode,",49,0.256032542,Beam
3192,,,33,3,,193,0.786889029,0
3193,,,126,6,,856,4.729627061,0
3194,"public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
","public static void config(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
",26,4,"error:config,",82,0.389828742,Beam
3195,"@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedInterval);
  if (!SeenHugeLogProb(analyzedInterval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}","@Override public void incomingObject(IAnalyzedInterval analyzedIntval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedIntval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedIntval);
  if (!SeenHugeLogProb(analyzedIntval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}",59,6,"analyzedInterval:analyzedIntval,",22,0.348476052,Beam
3196,,,25,2,,318,1.612568887,0
3197,"private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}","private void paint(int x1,int y1,int s,boolean e_or_n,Graphics u){
  Color oldColor=u.getColor();
  u.setPaintMode();
  if (m_FontColor == null) {
    u.setColor(Color.black);
  }
 else {
    u.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      u.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      u.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  u.setColor(oldColor);
}",234,14,"g:u,drawText:paint,",613,5.403901585,Beam
3198,,,45,4,,416,1.905261699,0
3199,"private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}
","private static void cleanLibrary(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanLibrary(f);
      f.delete();
    }
  }
}
",60,3,"cleanDirectory:cleanLibrary,",39,0.188883658,Beam
3200,,,34,3,,604,5.089018313,0
3201,"private void addInternalListeners(){
  cbDistribution.addItemListener(cbItemListener);
}
","private void addInternalBinder(){
  cbDistribution.addItemListener(cbItemParser);
}
",14,3,"addInternalListeners:addInternalBinder,cbItemListener:cbItemParser,",54,0.282759571,Beam
3202,,,18,3,,307,1.683261947,0
3203,,,33,3,,694,4.390573247,0
3205,"private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
","private void moveNewBlock(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
",77,8,"moveSingleNode:moveNewBlock,",39,0.233397806,Beam
3206,,,32,2,,166,0.723788933,0
3207,"public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}
","public void plugin(GuiManualHerblore manual){
  for (  ManualWidgetBase module : widgets)   module.plugin(manual);
}
",23,4,"init:plugin,widget:module,",367,2.086816565,Beam
3208,,,28,5,,577,2.844540985,0
3209,,,25,2,,238,1.808530863,0
3210,"public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}
","public final void empty(){
  if (GWT.isScript()) {
    jsArray.empty();
  }
 else {
    javaArray.empty();
  }
}
",33,3,"clear:empty,",3,0.021481256,Beam
3211,,,99,11,,524,3.815264587,0
3212,,,141,7,,1017,5.592637138,0
3213,"public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
","public static List<String> expendAllcard(Iterable<File> dirs,List<String> names,Backend forBackenda){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackenda);
  }
  return result;
}
",67,6,"expandWildcards:expendAllcard,forBackend:forBackenda,",205,2.567085648,Beam
3214,,,70,6,,892,4.718801594,0
3215,"@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}","@TCB static String stripBannedWorkunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedWorkunits(sb,safeLimit);
  return sb.toString();
}",53,4,"stripBannedCodeunits:stripBannedWorkunits,",39,0.297238823,Beam
3216,,,34,3,,286,1.386355182,0
3217,,,92,3,,476,2.235843563,0
3218,,,94,7,,261,1.403519666,0
3219,"public static <T extends Throwable>T writeStackTraces(T throwable,StreamOutput out) throws IOException {
  StackTraceElement[] stackTrace=throwable.getStackTrace();
  out.writeVInt(stackTrace.length);
  for (  StackTraceElement element : stackTrace) {
    out.writeString(element.getClassName());
    out.writeOptionalString(element.getFileName());
    out.writeString(element.getMethodName());
    out.writeVInt(element.getLineNumber());
  }
  Throwable[] suppressed=throwable.getSuppressed();
  out.writeVInt(suppressed.length);
  for (  Throwable t : suppressed) {
    out.writeThrowable(t);
  }
  return throwable;
}
","public static <T extends Throwable>T writeStackTraces(T failback,StreamOutput exp) throws IOException {
  StackTraceElement[] stackTrace=failback.getStackTrace();
  exp.writeVInt(stackTrace.length);
  for (  StackTraceElement element : stackTrace) {
    exp.writeString(element.getClassName());
    exp.writeOptionalString(element.getFileName());
    exp.writeString(element.getMethodName());
    exp.writeVInt(element.getLineNumber());
  }
  Throwable[] suppressed=failback.getSuppressed();
  exp.writeVInt(suppressed.length);
  for (  Throwable t : suppressed) {
    exp.writeThrowable(t);
  }
  return failback;
}
",132,7,"throwable:failback,out:exp,",340,1.852468503,Beam
3220,,,32,3,,327,1.360961493,0
3221,"public int next(){
  return mix(gen.getAndIncrement());
}
","public int seq(){
  return mix(gen.getAndIncrement());
}
",17,2,"next:seq,",12,0.051427563,Beam
3222,,,47,4,,680,4.848125347,0
3223,,,21,2,,168,0.763109612,0
3224,"public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
","public void notifyTations(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
",36,4,"notifyTasks:notifyTations,",6,0.033136165,Beam
3225,,,29,4,,194,0.860683314,0
3226,"public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}","public CipherParameters encrypt(byte[] i,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(i,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}",119,11,"in:i,decrypt:encrypt,",434,2.356851343,Beam
3227,,,122,8,,2108,17.00899372,0
3228,"public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitDescending(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
","public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitSequending(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
",25,1,"packModifiedFirstFitDescending:packModifiedFirstFitSequending,",8,0.068611598,Beam
3229,,,30,4,,522,3.22798001,0
3230,,,39,4,,952,6.313290179,0
3231,,,29,3,,294,1.181584744,0
3232,,,42,3,,389,2.796882737,0
3233,,,306,12,,1835,11.36178421,0
3234,,,26,2,,105,0.986919419,0
3235,,,24,2,,207,1.185926859,0
3236,,,82,3,,453,2.749363458,0
3237,,,102,4,,450,3.352588379,0
3238,"boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
","boolean updateTime(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=updateTime(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || updateTime(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
",82,9,"checkToken:updateTime,",103,0.636613746,Beam
3239,"public int writeAnnotation(Annotation annotation){
  int off=data.position();
  writeByte(annotation.visibility);
  writeEncodedArray(annotation.encodedAnnotation);
  return off;
}
","public int writeANnotations(Annotation artiation){
  int after=data.position();
  writeByte(artiation.visibility);
  writeEncodedArray(artiation.encodedAnnotation);
  return after;
}
",35,4,"annotation:artiation,writeAnnotation:writeANnotations,off:after,",218,0.960975639,Beam
3240,,,54,4,,648,4.001278539,0
3241,,,106,10,,436,2.801188127,0
3242,"public void addStates(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}","public void addStates(State[] services){
  for (int i=0; i < services.length; i++)   states.addElement(services[i]);
}",37,4,"s:services,",10,0.051921181,Beam
3243,,,95,5,,686,3.097292229,0
3244,"protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}","protected String reform(ObjectMatrix1D matrix,int index,Former Formater){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}",42,5,"formatter:Formater,form:reform,",95,0.591615236,Beam
3245,"public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}","public void calculateCarired(){
  xStats.calculateCarired();
  yStats.calculateCarired();
  differencesStats.calculateCarired();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tfcol=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tfcol * tfcol,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tfcol * tfcol,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}",287,13,"calculateDerived:calculateCarired,tval:tfcol,",2529,14.84054373,Beam
3246,,,12,2,,178,0.853600073,0
3247,"public static String asString(URI value){
  return value != null ? value.toString() : null;
}
","public static String ASSingle(URI message){
  return message != null ? message.toString() : null;
}
",23,2,"value:message,asString:ASSingle,",68,0.339476665,Beam
3248,,,58,4,,89,0.347607386,0
3249,"private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}","private static Bitmap tile(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}",646,26,"transform:tile,",23,0.268776596,Beam
3250,,,53,3,,455,2.665008156,0
3251,"public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}","public String encryption(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.encryption(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}",208,8,"decrypt:encryption,",37,0.262565303,Beam
3252,,,219,7,,1601,29.27954728,0
3253,,,12,1,,25,0.111442769,0
3254,,,58,1,,47,0.225875151,0
3255,,,99,4,,619,3.880009488,0
3256,,,34,3,,402,2.624289393,0
3257,,,550,10,,1870,11.17694645,0
3258,,,73,4,,798,5.277953251,0
3259,,,17,3,,194,0.75797805,0
3260,,,57,6,,798,3.486493194,0
3261,"public EipModelWizardInitialObjectCreationPage(String pageId){
  super(pageId);
}
","public EipModelWizardInitialObjectCrecreationPages(String pageId){
  super(pageId);
}
",13,2,"EipModelWizardInitialObjectCreationPage:EipModelWizardInitialObjectCrecreationPages,",10,0.046065323,Beam
3262,,,42,4,,737,5.670449364,0
3263,,,33,3,,524,4.309982717,0
3264,,,16,3,,250,1.037946276,0
3265,"@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}","@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlClose(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}",34,4,"sceNetAdhocPtpFlush:sceNetAdhocPtpFlClose,",6,0.053104873,Beam
3266,,,56,4,,361,3.38740205,0
3267,"public double patience(int k,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}","public double Gradiency(int k,F fn,int N){
  double pf=p(fn);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}",72,7,"patience:Gradiency,f:fn,",206,1.238556417,Beam
3268,,,127,4,,696,3.473896325,0
3269,,,131,6,,1399,8.951638087,0
3270,,,138,4,,542,4.714156588,0
3272,,,48,4,,164,1.057338488,0
3273,"public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}
","public void copy(byte[] result) throws IOException {
  output.copy(result);
  bpsSent+=result.length;
}
",26,4,"buf:result,write:copy,bytesWritten:bpsSent,",339,1.795286536,Beam
3274,"public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),dbName)) {
    dbOperation.accept(client.getDatabase(dbName));
  }
}
","public static void OnDB(MongoClient collection,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(collection.listDatabaseNames(),dbName)) {
    dbOperation.accept(collection.getDatabase(dbName));
  }
}
",46,4,"onDatabase:OnDB,client:collection,",214,1.149827719,Beam
3275,,,253,13,,3467,28.10474882,0
3276,,,27,4,,1251,8.021308204,0
3277,"public static int instanceOf(Object o,Class<?> c){
  if (o == null)   return FALSE;
  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}
","public static int instanceOf(Object u,Class<?> ce){
  if (u == null)   return FALSE;
  return ce.isAssignableFrom(u.getClass()) ? TRUE : FALSE;
}
",41,5,"c:ce,o:u,",317,3.64916625,Beam
3278,,,104,4,,444,4.318749988,0
3279,"public static long bytesToLong(final byte[] bytes){
  final ByteBuffer buffer=ByteBuffer.allocate(8);
  buffer.put(bytes,0,8);
  buffer.flip();
  return buffer.getLong();
}","public static long bytesTOLong(final byte[] ones){
  final ByteBuffer feed=ByteBuffer.allocate(8);
  feed.put(ones,0,8);
  feed.flip();
  return feed.getLong();
}",48,3,"bytesToLong:bytesTOLong,bytes:ones,buffer:feed,",239,1.339264405,Beam
3280,,,14,1,,63,0.323248124,0
3282,"@SuppressWarnings(""unchecked"") public List<Boundary> populateArea(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
","@SuppressWarnings(""unchecked"") public List<Boundary> populatedArea(final Long directionName){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> mediaArray=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(directionName);
  mediaArray=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + mediaArray.toString());
  return mediaArray;
}
",98,11,"wardId:directionName,populateArea:populatedArea,areaList:mediaArray,",167,0.82730157,Beam
3283,,,94,14,,1926,9.653799387,0
3284,,,18,2,,1,3.74E-06,0
3285,,,199,10,,2483,25.23055374,0
3286,"public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}","public void distortMesh(GL2 l){
  l.glMatrixMode(GL2.GL_PROJECTION);
  l.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  l.glMatrixMode(GL2.GL_MODELVIEW);
  l.glLoadIdentity();
  l.glViewport(0,0,width,height);
}",143,7,"gl:l,applyCamera:distortMesh,",143,1.210426613,Beam
3287,"protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}","protected int encoder(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}",81,6,"encode:encoder,",6,0.060591046,Beam
3288,,,28,4,,527,3.644629677,0
3289,,,172,12,,2928,21.19814026,0
3291,"long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}","long getLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}",113,2,"readLong:getLong,",5,0.015447017,Beam
3292,"private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
","private boolean blockOrd(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
",39,4,"lockOrder:blockOrd,",9,0.032613715,Beam
3293,"@Override public String toString(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append(""BoardPanel "");
  risul.append(""available object: itera_board"");
  return risul.toString();
}","@Override public String toBytes(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append(""BoardPanel "");
  risul.append(""available object: itera_board"");
  return risul.toBytes();
}",39,2,"toString:toBytes,",7,0.026341156,Beam
3294,"private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
","private boolean newResource(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
",72,8,"toState:newResource,",7,0.029037809,Beam
3295,,,24,4,,584,5.133131103,0
3296,"private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){
  String[] t=new String[buffer.length + lastRead.length];
  System.arraycopy(buffer,0,t,0,buffer.length);
  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);
  return t;
}","private String[] combineResultsFromMultiInputths(String[] header,String[] lastRead){
  String[] t=new String[header.length + lastRead.length];
  System.arraycopy(header,0,t,0,header.length);
  System.arraycopy(lastRead,0,t,header.length,lastRead.length);
  return t;
}",74,4,"buffer:header,combineResultsFromMultipleReads:combineResultsFromMultiInputths,",206,1.261375336,Beam
3297,,,47,1,,63,0.338119598,0
3298,,,208,7,,1012,7.267332979,0
3299,"@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}","@Override public void sprim(){
  if (counter < size.length) {
    int[] y=new int[counter];
    System.arraycopy(size,0,y,0,counter);
    size=y;
    resizeValues(counter);
  }
}",54,4,"trim:sprim,x:size,",413,2.712497934,Beam
3300,"public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}","public void writeUTFchords(String es) throws IOException {
  int length=es.length();
  for (int i=0; i < length; i++) {
    int c=es.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}",76,7,"writeLEChars:writeUTFchords,s:es,",82,0.489333725,Beam
3301,"public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}
","public Options put(String term,Integer content){
  if (content == null) {
    return remove(term);
  }
  options.put(term,content.toString());
  return this;
}
",42,4,"option:term,value:content,",102,0.562231302,Beam
3302,"private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
","private void parseFolder(File object,RelativeDirectory libdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=libdirectory.getFile(object);
  if (!caseMapCheck(d,libdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        parseFolder(object,new RelativeDirectory(libdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
",185,12,"listDirectory:parseFolder,directory:object,subdirectory:libdirectory,",1326,10.82797143,Beam
3303,,,83,7,,256,1.271574068,0
3304,"public void doHistory(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}","public void showSwitch(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}",125,6,"doHistory:showSwitch,",40,0.245620946,Beam
3305,"public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}","public final boolean find2table(Polyline p_progon,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_progon.offset_shapes(compensated_half_width,0,p_progon.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_progon,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}",159,18,"p_polyline:p_progon,check_trace:find2table,",577,31.37279385,Beam
3306,,,75,5,,967,7.987690103,0
3307,,,138,8,,1313,6.814318359,0
3308,,,27,3,,156,0.914394069,0
3310,"void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}","void popInteger(int j){
switch (j) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (j >= Byte.MIN_VALUE && j <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,j);
return;
}
if (j >= Short.MIN_VALUE && j <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,j);
return;
}
mv.visitLdcInsn(Integer.valueOf(j));
}",165,3,"i:j,pushInt:popInteger,",83,0.571692677,Beam
3311,,,61,5,,673,3.709780606,0
3312,,,120,8,,1114,6.478347433,0
3313,,,52,5,,727,3.916606327,0
3314,"public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}","public static void checkFinite(final double[] vec) throws MathIllegalArgumentException {
  for (int i=0; i < vec.length; i++) {
    final double x=vec[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}",71,4,"val:vec,",24,0.112069118,Beam
3315,,,27,4,,1365,5.54281464,0
3316,"public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}","public static boolean appEmpty(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}",97,5,"installNormal:appEmpty,",73,0.283148932,Beam
3317,"public boolean hasSingleElement(){
  return mSelectedWidgets.size() == 1;
}","public boolean hasOneElement(){
  return mSelectedWadwidget.size() == 1;
}",16,2,"hasSingleElement:hasOneElement,mSelectedWidgets:mSelectedWadwidget,",27,0.144623288,Beam
3318,,,259,15,,2552,24.01759524,0
3319,,,13,1,,55,0.258032731,0
3320,"public Edge(S src,Symbol symbol,S dest){
  this.src=src;
  this.symbol=symbol;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
","public I(S src,Symbol symbol,S comb){
  this.src=src;
  this.symbol=symbol;
  this.comb=comb;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
",50,4,"Edge:I,dest:comb,",387,2.638213213,Beam
3321,,,169,6,,297,1.515395161,0
3322,"public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void eqles(Object object1,Object object2){
  checkAssertion(object1.eqles(object2),null);
}",25,3,"equals:eqles,",41,0.345293939,Beam
3323,"private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
","private synchronized void loop(boolean f){
  if (f) {
    try {
      if (m_ioLoop.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
",51,5,"block:loop,tf:f,m_ioThread:m_ioLoop,",270,1.679596476,Beam
3324,"public boolean isFlat(){
  return TYPE_FLAT.equals(getType());
}
","public boolean isFLat(){
  return TYPE_FLAT.equals(getType());
}
",17,1,"isFlat:isFLat,",4,0.02024103,Beam
3325,,,26,3,,807,8.415539594,0
3326,,,38,4,,185,0.940277457,0
3327,"public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
","public List<FileStatus> browse(String resourceLocation) throws Exception {
  LOG.info(""HDFS File Path   :  "" + resourceLocation + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(resourceLocation);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + resourceLocation,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
",130,8,"filePath:resourceLocation,",15,0.103265599,Beam
3328,,,201,15,,2090,19.37277439,0
3329,"private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
","private String enoderFeature(){
  StringBuffer tokens=new StringBuffer();
  ListIterator and=productTokens.listIterator();
  while (and.hasNext()) {
    tokens.append((String)and.next());
  }
  return tokens.toString();
}
",55,4,"encodeProduct:enoderFeature,it:and,",291,1.425560868,Beam
3330,,,72,4,,906,5.516631985,0
3331,,,14,2,,122,0.548831276,0
3332,"private static Frame showInitialSplash(){
  Frame splashFrame=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      splashFrame=AWTSplashWindow.splash(image);
    }
  }
  return splashFrame;
}
","private static Frame showInitialSplash(){
  Frame splayFrames=null;
  Image angle=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      angle=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (angle != null) {
      splayFrames=AWTSplashWindow.splash(angle);
    }
  }
  return splayFrames;
}
",78,5,"splashFrame:splayFrames,image:angle,",546,2.644785372,Beam
3333,,,35,6,,617,2.538277109,0
3334,,,116,5,,188,1.379576612,0
3335,,,75,4,,861,5.052486825,0
3337,"public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
","public boolean overlaps(String letter,int init,int point){
  if (init == MISSING || point == MISSING || point < init) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(letter)) {
    return false;
  }
  if ((mEnd != MISSING && init >= mEnd) || (point <= mStart)) {
    return false;
  }
  return true;
}
",78,8,"sequence:letter,end:point,start:init,",612,4.580580163,Beam
3338,,,35,3,,396,2.35454944,0
3339,,,35,5,,1044,5.379066892,0
3340,"public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}
","public static Operator generateBancPage(AkibanInformationSchema aos,Table table){
  final Operator indexScan=generateIndexScan(aos,table);
  final Schema schema=SchemaCache.globalSchema(aos);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBancPage(table,indexScan,indexType);
}
",68,7,"generateBranchPlan:generateBancPage,ais:aos,",220,1.31093905,Beam
3341,"public static String toKilobytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}","public static String toKilottes(long values){
  if (values < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=values / 1024;
  if ((values & 512) != 0 || (values > 0 && values < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}",61,4,"bytes:values,toKilobytes:toKilottes,",64,0.566265166,Beam
3342,,,129,10,,2755,17.14781116,0
3343,,,78,5,,597,3.526105452,0
3344,,,31,3,,310,1.192460763,0
3345,"public void configure(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split("" "");
  }
}
","public void CONFIGuring(){
  if (cmdPrefix != null) {
    master=cmdPrefix.split("" "");
  }
}
",24,3,"configure:CONFIGuring,prefix:master,",56,0.234323712,Beam
3346,,,66,4,,851,5.130857237,0
3347,,,61,3,,559,3.271441273,0
3348,,,26,3,,115,0.356938287,0
3349,,,50,2,,85,0.371353682,0
3350,,,98,6,,1266,13.12757334,0
3351,"public void removeStorage() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
","public void removeContainer() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
",31,5,"removeStorage:removeContainer,",4,0.019813812,Beam
3352,,,44,7,,1077,6.63149902,0
3353,,,71,5,,1086,10.38725322,0
3354,"protected String generateSectionLabel(PieDataset dataset,Comparable key){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,key);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}
","protected String generateGroupComment(PieDataset datasheet,Comparable option){
  String root=null;
  if (datasheet != null) {
    Object[] items=createItemArray(datasheet,option);
    root=MessageFormat.format(this.labelFormat,items);
  }
  return root;
}
",53,5,"generateSectionLabel:generateGroupComment,key:option,dataset:datasheet,result:root,",680,4.70937473,Beam
3355,"public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}","public static double xi(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}",50,5,"info:xi,",51,0.421210682,Beam
3356,"public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
","public void createNote(Note notice){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(notice.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,notice.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(notice.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
",117,7,"note:notice,",4,0.046907282,Beam
3357,,,39,4,,514,21.04429497,0
3358,,,45,5,,879,4.724737251,0
3359,"private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
","private static void createFiles(File object,List<String> lines) throws IOException {
  if (!object.exists())   object.createNewFile();
  FileWriter fw=new FileWriter(object);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
",92,7,"writeFile:createFiles,file:object,",187,0.972104367,Beam
3360,"private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}","private int composeFunction(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}",28,4,"composeComponent:composeFunction,",8,0.044513396,Beam
3361,"boolean handleRemoteCanRebalance(long size){
  return false;
}
","boolean isRemoteCanRebAlment(long bytes){
  return false;
}
",11,2,"size:bytes,handleRemoteCanRebalance:isRemoteCanRebAlment,",77,0.979151467,Beam
3362,,,161,9,,1496,13.14804815,0
3363,,,31,4,,855,11.6055811,0
3364,"private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}","private void selectFeatureSourceCase(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}",153,9,"selectAttributeSetInstance:selectFeatureSourceCase,",20,0.088870923,Beam
3365,,,61,4,,366,3.915743172,0
3366,"public void deleteQuota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
","public void getQota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
",25,3,"deleteQuota:getQota,",6,0.027627416,Beam
3367,"public boolean loadLines(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
","public boolean loadLars(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
",77,8,"loadLines:loadLars,",4,0.021678114,Beam
3368,"public void addCommand(Command cmd,int offset){
  menuBar.addCommand(cmd,offset);
}
","public void createCommand(Command cmd,int start){
  menuBar.createCommand(cmd,start);
}
",21,4,"addCommand:createCommand,offset:start,",95,0.4278403,Beam
3369,"public String sel(){
  return mSelection.toString();
}
","public String all(){
  return mSellect.toString();
}
",14,2,"sel:all,mSelection:mSellect,",43,0.171267541,Beam
3370,,,55,2,,56,0.268205408,0
3372,,,79,4,,651,5.549620358,0
3373,,,28,3,,454,2.184095164,0
3374,,,20,2,,321,1.787237402,0
3375,,,31,2,,229,1.457905491,0
3376,,,29,3,,579,3.539319285,0
3377,"public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
","public boolean isMultipleBlowing(String imageIP){
  return uniqueImages.contains(imageIP);
}
",17,3,"frameID:imageIP,isMultipleAllowed:isMultipleBlowing,multipleFrames:uniqueImages,",211,1.310397053,Beam
3378,"@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}","@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result response){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=response;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}",110,8,"result:response,",3,0.047129814,Beam
3379,,,41,5,,629,3.926194616,0
3380,"private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}","private static void compileContent(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}",205,7,"generateFiles:compileContent,",8,0.049367078,Beam
3381,"public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
","public static double match(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
",34,4,"length:match,",25,0.112367964,Beam
3383,,,104,9,,1641,6.962502567,0
3384,,,72,4,,640,3.900375454,0
3385,,,66,6,,2054,15.03833884,0
3386,"protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));
  }
}
","protected void notifyPropertyChangeListener(String label,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,label,oldValue,newValue));
  }
}
",63,7,"property:label,",29,0.261762885,Beam
3387,,,25,2,,285,1.633951684,0
3388,,,27,4,,353,2.293235703,0
3389,,,128,10,,1752,11.96724315,0
3390,"public static String decodeBCD(final short bcd){
  return String.format(""%x.%02x"",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}","public static String decodeTCD(final short bbcod){
  return String.format(""%x.%02x"",(bbcod & 0xFF00) >> 8,bbcod & 0x00FF);
}",32,2,"bcd:bbcod,decodeBCD:decodeTCD,",112,0.669288524,Beam
3391,,,29,3,,365,2.814821915,0
3392,,,282,13,,451,2.841000235,0
3393,,,29,4,,159,0.810178232,0
3394,"@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (components.isEmpty()) {
    return siblingLists;
  }
  if (components.size() == 1) {
    RadComponent component=components.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : components) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}","@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> compients){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (compients.isEmpty()) {
    return siblingLists;
  }
  if (compients.size() == 1) {
    RadComponent component=compients.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : compients) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}",175,6,"components:compients,",11,0.097546287,Beam
3395,,,149,7,,235,1.268776139,0
3396,,,125,14,,1979,9.278170232,0
3397,,,100,7,,1391,15.92777947,0
3398,"private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
","private String mosesizer(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
",46,2,"mosesize:mosesizer,",3,0.013781297,Beam
3399,"private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}
","private static boolean is2SlotClass(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}",23,2,"isTwoSlotType:is2SlotClass,",6,0.039472564,Beam
3401,,,31,2,,54,0.367310544,0
3402,,,28,3,,558,3.804238737,0
3403,"@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}","@Override public void onLoadChannel(Eye ey){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,ey.getEyeView(),0,m,0);
      if (ey.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (ey.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (ey.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,ey.getEyeView(),0,mCamera,0);
  }
  float[] perspective=ey.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(ey.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(ey.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(ey.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(ey.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}",533,17,"onDrawEye:onLoadChannel,eye:ey,",63,0.5902294,Beam
3404,,,16,1,,25,0.138460211,0
3405,,,14,2,,37,0.143189351,0
3406,,,38,6,,514,2.853661128,0
3407,,,39,3,,314,1.835491097,0
3408,,,20,2,,321,1.923119072,0
3409,,,78,6,,1507,8.720025659,0
3410,,,22,2,,324,2.063484983,0
3411,,,75,7,,1627,10.37250185,0
3412,"public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}","public static List<Double> mergeChord(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}",103,5,"mergeCoords:mergeChord,",10,0.064377662,Beam
3413,,,13,2,,57,0.289523037,0
3414,,,89,6,,1309,7.148787999,0
3415,,,70,7,,771,3.421811414,0
3416,,,22,2,,187,1.126334977,0
3417,,,16,3,,210,1.429169027,0
3419,,,37,6,,1315,13.19027474,0
3421,,,96,8,,211,0.956297759,0
3422,"public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}","public final void writeBULL(byte[] b) throws java.io.IOException {
  writeBULL(b,0,b.length);
}",29,2,"readFully:writeBULL,",56,0.250231302,Beam
3423,,,22,2,,65,0.384915566,0
3424,,,22,2,,142,0.873291445,0
3425,,,173,13,,841,5.308522932,0
3426,,,17,2,,47,0.234513084,0
3427,,,17,3,,277,2.415543715,0
3428,,,25,2,,195,0.898966753,0
3429,"protected int[] readColorTable(final int ncolors){
  final int nbytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < ncolors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}","protected int[] loadColortable(final int nColors){
  final int nbytes=3 * nColors;
  int[] batch=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    batch=new int[256];
    int i=0;
    int j=0;
    while (i < nColors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int border=(c[j++]) & 0xff;
      batch[i++]=0xff000000 | (r << 16) | (g << 8)| border;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return batch;
}",165,14,"readColorTable:loadColortable,ncolors:nColors,tab:batch,b:border,",1683,8.49881645,Beam
3430,,,204,4,,1310,9.635835123,0
3431,"public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}","public static void drawBackground(final Rectangle2D text,final Graphics2D pg2){
  Graphics2D g2S=(Graphics2D)pg2.create();
  Rectangle2D light=new Rectangle2D.Double(text.getX() + 5,text.getY() + ProcessDrawer.HEADER_HEIGHT + 5,text.getWidth(),text.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(light.getX(),text.getMaxY());
  bottom.lineTo(text.getMaxX(),text.getMaxY());
  bottom.lineTo(light.getMaxX(),light.getMaxY());
  bottom.lineTo(light.getMinX(),light.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)text.getX(),(float)text.getMaxY(),Color.gray,(float)text.getX(),(float)light.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(text.getMaxX(),light.getMinY());
  right.lineTo(light.getMaxX(),light.getMinY());
  right.lineTo(light.getMaxX(),light.getMaxY());
  right.lineTo(text.getMaxX(),text.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)text.getMaxX(),(float)light.getY(),Color.gray,(float)light.getMaxX(),(float)light.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}",358,8,"rect:text,drawShadow:drawBackground,g2:pg2,shadow:light,",579,3.139046327,Beam
3432,,,15,2,,103,0.589039608,0
3433,"private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
","private void LoadFolder(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
",79,5,"loadFile:LoadFolder,",62,0.262420706,Beam
3434,,,56,4,,491,3.23939666,0
3435,"public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
","public double length(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
",48,5,"distance:length,",7,0.047252671,Beam
3436,,,105,6,,1495,14.3977629,0
3437,"void flush(){
  printStream.flush();
}
","void write(){
  printStream.write();
}
",12,2,"flush:write,",12,0.066657968,Beam
3438,,,83,4,,631,3.38475949,0
3439,"public double metersToPixels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}","public double metersToVels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / screenLength * metersToLon;
}",53,4,"metersToPixels:metersToVels,windowWidth:screenLength,",129,0.756898089,Beam
3440,,,54,4,,495,2.989771577,0
3441,"private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumValue1(int hPoint,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hPoint,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hPoint,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,9,"hKey:hPoint,",39,0.924186997,Beam
3442,"@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
","@Deprecated public void store(Collection<Integer> options){
  for (  Integer value : options) {
    final int val=value.intValue();
    min=val < min ? val : min;
    height=val > height ? val : height;
  }
}
",53,6,"data:options,put:store,max:height,",371,1.976125936,Beam
3443,"public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
","public static String generateTransportZoneRemoteGub(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
",35,5,"generateTransportZoneNativeGuid:generateTransportZoneRemoteGub,",75,0.382995061,Beam
3444,"public long max(){
  return deltaMax.get();
}
","public long q(){
  return dotaArray.get();
}
",14,2,"max:q,deltaMax:dotaArray,",31,0.135343305,Beam
3445,"public static List<Integer> precomputeHashes(byte[] data,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,data,tweak));
  }
  return list;
}","public static List<Integer> precomputeHashes(byte[] api,long atstrong){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,api,atstrong));
  }
  return list;
}",65,6,"tweak:atstrong,data:api,",267,1.521837453,Beam
3446,"public Item(Drawable symbol,String labelText,Font font){
  double fontSize=font.getSize2D();
  setLayout(new EdgeLayout(fontSize,0.0));
  this.symbol=symbol;
  add(symbol,Location.WEST);
  label=new Label(labelText);
  label.setFont(font);
  label.setAlignmentX(0.0);
  label.setAlignmentY(0.5);
  add(label,Location.CENTER);
}","public Info(Drawable cymb,String blankContent,Font class){
  double fontSize=class.getSize2D();
  setLayout(new EdgeLayout(fontSize,0.0));
  this.cymb=cymb;
  add(cymb,Location.WEST);
  label=new Label(blankContent);
  label.setFont(class);
  label.setAlignmentX(0.0);
  label.setAlignmentY(0.5);
  add(label,Location.CENTER);
}",87,6,"labelText:blankContent,Item:Info,symbol:cymb,font:class,",964,3.159423264,Beam
3447,,,130,5,,806,2.729998696,0
3448,"public synchronized void end(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
","public synchronized void Finish(){
  graphicsToBeDrawn.close();
  if (currentGray != null) {
    graphicsDrawn.append(currentGray);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
",65,5,"end:Finish,currentGraphics:currentGray,",68,0.166993618,Beam
3450,"public static float r_distance(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}","public static float r_angle(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}",90,7,"r_distance:r_angle,",67,0.131780775,Beam
3451,"public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){
  listeners.add(textChangeListener);
}
","public void addQueryChangeAdapter(final FilterQueryChangeListener textSyncCallback){
  addters.add(textSyncCallback);
}
",17,3,"addTextChangeListener:addQueryChangeAdapter,textChangeListener:textSyncCallback,listeners:addters,",228,0.515257112,Beam
3452,,,150,9,,1996,5.496634058,0
3454,,,89,9,,2457,8.098180083,0
3455,,,88,6,,932,2.224522936,0
3456,,,84,5,,927,2.665355269,0
3457,,,110,9,,294,0.688683776,0
3458,,,706,24,,2571,32.82155812,0
3459,"protected abstract int compareToLastMsg(Pair<K,V> tupleKeyValue,Pair<byte[],byte[]> lastReceivedKeyValue);
","protected abstract int compareToLastSent(Pair<K,V> tupleKeyValue,Pair<byte[],byte[]> lastReceivedKeyValue);
",26,3,"compareToLastMsg:compareToLastSent,",31,0.339082305,Beam
3460,"protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=volume.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=volume.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
","protected List<VolumeDescriptor> describe(StorageSystem vplexSystem,Volume slice,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=slice.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=slice.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,slice.getStorageController(),slice.getId(),slice.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,slice.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,slice.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(slice,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,slice,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : slice),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(slice,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,slice,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : slice),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
",457,22,"createChangeVirtualPoolDescriptors:describe,volume:slice,",242,1.688985908,Beam
3461,,,124,7,,1068,5.375771554,0
3462,,,18,2,,309,2.125079425,0
3463,,,69,5,,913,7.226670945,0
3464,,,55,6,,887,6.593200231,0
3465,"protected void fireClusterChange(long timestamp,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
","protected void fireClustersChange(long timestamp,String title,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,title,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
",103,9,"fireClusterChange:fireClustersChange,type:title,",138,0.859846671,Beam
3466,,,14,2,,143,0.747052364,0
3467,"public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}
","public void releaseOperation(NetworkUpdateAction section){
  actionList.remove(section);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(section);
  }
}
",32,5,"action:section,removeAction:releaseOperation,",55,0.291423806,Beam
3468,,,28,2,,149,0.910503511,0
3470,,,67,7,,783,9.815315266,0
3471,,,26,3,,398,1.788594055,0
3472,,,15,3,,140,0.524585402,0
3473,"public boolean isInputColumnNameAllowed(String columnName){
  if (columnName == null || columnName.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (columnName.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}","public boolean isInputColumnNameAllallowed(String colPath){
  if (colPath == null || colPath.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (colPath.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}",67,4,"isInputColumnNameAllowed:isInputColumnNameAllallowed,columnName:colPath,",153,0.778347437,Beam
3474,"protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
","protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> outs){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : outs) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
",109,8,"units:outs,",15,0.099979202,Beam
3475,"public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){
  serverGroupMap.put(location,groups);
  LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval);
  addGroups(connectionLoadMap,groups,connectionLoad);
  LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval);
  addGroups(queueLoadMap,groups,queueLoad);
  updateLoad(location,initialLoad);
}
","public synchronized void removePort(ServerLocation location,String[] groups,ServerLoad imageLoad,long loadPollInterval){
  serverGroupMap.put(location,groups);
  LoadHolder connectionLoad=new LoadHolder(location,imageLoad.getConnectionLoad(),imageLoad.getLoadPerConnection(),loadPollInterval);
  addGroups(connectionLoadMap,groups,connectionLoad);
  LoadHolder queueLoad=new LoadHolder(location,imageLoad.getSubscriptionConnectionLoad(),imageLoad.getLoadPerSubscriptionConnection(),loadPollInterval);
  addGroups(queueLoadMap,groups,queueLoad);
  updateLoad(location,imageLoad);
}
",101,10,"addServer:removePort,initialLoad:imageLoad,",218,1.351664237,Beam
3476,"public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}","public void truckScene(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}",64,5,"truckCamera:truckScene,",36,0.160422762,Beam
3477,,,62,10,,353,1.471302946,0
3478,,,75,5,,782,3.651414772,0
3479,"protected void appendLine(JComponent c){
  c.setAlignmentX(0.f);
  contents.add(c);
}","protected void insertLine(JComponent const){
  const.setAlignmentX(0.f);
  contents.add(const);
}",23,3,"appendLine:insertLine,c:const,",70,0.398090267,Beam
3480,,,151,14,,1805,11.82417026,0
3481,,,123,8,,1929,12.84750024,0
3483,,,120,10,,2182,14.98828285,0
3484,,,18,2,,314,1.545385456,0
3485,"public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(file.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
","public void transform(File file,long RestartsFrom,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    transform(file.getName(),inputStream,RestartsFrom,RestartsFrom,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
",189,6,"upload:transform,restartAt:RestartsFrom,",199,1.14912763,Beam
3486,"public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
","public void action(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.action(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
",52,6,"execute:action,",42,0.193637439,Beam
3487,"public ScriptBuilder data(int index,byte[] data){
  byte[] copy=Arrays.copyOf(data,data.length);
  int opcode;
  if (data.length == 0) {
    opcode=OP_0;
  }
 else   if (data.length == 1) {
    byte b=data[0];
    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b);
 else     opcode=1;
  }
 else   if (data.length < OP_PUSHDATA1) {
    opcode=data.length;
  }
 else   if (data.length < 256) {
    opcode=OP_PUSHDATA1;
  }
 else   if (data.length < 65536) {
    opcode=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(index,new ScriptChunk(opcode,copy));
}","public ScriptBuilder no(int patch,byte[] no){
  byte[] copy=Arrays.copyOf(no,no.length);
  int opcount;
  if (no.length == 0) {
    opcount=OP_0;
  }
 else   if (no.length == 1) {
    byte b=no[0];
    if (b >= 1 && b <= 16)     opcount=Script.encodeToOpN(b);
 else     opcount=1;
  }
 else   if (no.length < OP_PUSHDATA1) {
    opcount=no.length;
  }
 else   if (no.length < 256) {
    opcount=OP_PUSHDATA1;
  }
 else   if (no.length < 65536) {
    opcount=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(patch,new ScriptChunk(opcount,copy));
}",161,8,"data:no,index:patch,opcode:opcount,",215,1.515733119,Beam
3488,"protected boolean isLockedLocally(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}
","protected boolean isLockedLOCals(UUID newOwnID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnID);
}
",26,3,"isLockedLocally:isLockedLOCals,newOwnerID:newOwnID,",81,0.821145868,Beam
3489,,,16,2,,157,0.860220949,0
3490,"private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}
","private void addTest(Test NewRule){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(NewRule);
}
",34,3,"newTest:NewRule,",17,0.071019538,Beam
3491,,,40,3,,438,2.152230736,0
3492,,,41,4,,1238,7.711865509,0
3493,,,172,12,,2644,14.03702067,0
3494,,,318,21,,2877,16.73545373280840,0
3495,"public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}","public static <T>List<T> insert(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}",151,9,"select:insert,",26,0.169441529,Beam
3496,,,122,6,,1467,13.8273635,0
3497,"private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
","private void refreshIndexForDimensionFieldValues(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=linkValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          linkValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          linkValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=linkValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      linkValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
",301,20,"refreshIndexForDimensionFields:refreshIndexForDimensionFieldValues,keyValueStore:linkValueStore,",703,7.082969244,Beam
3499,"public Sorter(){
  useDefaultVisual();
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
  m_env=Environment.getSystemWide();
  m_stopRequested=new AtomicBoolean(false);
}
","public sORT(){
  useDefaultVisual();
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
  m_env=Environment.getSystemWide();
  m_stopRequested=new AtomicBoolean(false);
}
",43,4,"Sorter:sORT,",14,0.056662599,Beam
3500,,,491,17,,2193,13.65890355,0
3502,"public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}","public static void writeUnsecure(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsecure(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsecure(QUOTE);
}",57,5,"writeUnsafe:writeUnsecure,",30,0.147486643,Beam
3503,,,20,1,,35,0.150426757,0
3504,"public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}
","public void create(final SAMRecord find,final int position){
  recordAndOffsets.create(new RecordAndOffset(find,position));
}
",27,4,"add:create,read:find,",231,1.665940332,Beam
3505,,,70,6,,1486,6.855417585,0
3506,,,62,3,,438,1.903694165,0
3507,,,145,8,,2200,10.69520199,0
3508,,,156,10,,2529,13.22134488,0
3509,,,149,9,,2974,24.85485627,0
3510,,,20,2,,223,1.88427703,0
3511,,,26,2,,276,1.160879036,0
3512,,,54,5,,223,1.169553522,0
3513,,,14,2,,179,0.775034245,0
3514,"private void onHPChange(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}","private void onTextSwitch(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}",61,5,"onHPChange:onTextSwitch,",46,0.193024,Beam
3515,,,70,4,,598,3.621185899,0
3516,"public void update(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}","public void report(){
  if (nextLine != -1L) {
    long Delt=System.nanoTime() - nextLine;
    rollingAverage.addValue(Delt);
  }
  nextLine=System.nanoTime();
}",42,4,"update:report,lastTime:nextLine,delta:Delt,",430,2.65104382,Beam
3517,"private void queueUpSyncs(final Cursor contactsCursor){
  ContactSyncEntry syncEntry=null;
  while (contactsCursor.moveToNext()) {
    if (syncEntry == null) {
      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(number)) {
      syncEntry.addNumber(numberToNational(number));
      syncEntry.addName(name);
      if (syncEntry.isFull()) {
        Logger.d(TAG,""Adding sync entry to queue"");
        mSyncQueue.add(syncEntry);
        syncEntry=null;
      }
    }
  }
}
","private void queueupSynccks(final Cursor contactsCursor){
  ContactSyncEntry syncEntry=null;
  while (contactsCursor.moveToNext()) {
    if (syncEntry == null) {
      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String type=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(type)) {
      syncEntry.addNumber(numberToNational(type));
      syncEntry.addName(name);
      if (syncEntry.isFull()) {
        Logger.d(TAG,""Adding sync entry to queue"");
        mSyncQueue.add(syncEntry);
        syncEntry=null;
      }
    }
  }
}
",144,7,"queueUpSyncs:queueupSynccks,number:type,",226,1.442116205,Beam
3518,,,50,5,,1120,10.3753713,0
3519,"public int hashCode(){
  long bits=Double.doubleToLongBits(m00);
  bits=bits * 31 + Double.doubleToLongBits(m01);
  bits=bits * 31 + Double.doubleToLongBits(m02);
  bits=bits * 31 + Double.doubleToLongBits(m10);
  bits=bits * 31 + Double.doubleToLongBits(m11);
  bits=bits * 31 + Double.doubleToLongBits(m12);
  return (((int)bits) ^ ((int)(bits >> 32)));
}","public int idDefault(){
  long cells=Double.doubleToLongBits(m00);
  cells=cells * 31 + Double.doubleToLongBits(m01);
  cells=cells * 31 + Double.doubleToLongBits(m02);
  cells=cells * 31 + Double.doubleToLongBits(m10);
  cells=cells * 31 + Double.doubleToLongBits(m11);
  cells=cells * 31 + Double.doubleToLongBits(m12);
  return (((int)cells) ^ ((int)(cells >> 32)));
}",104,8,"hashCode:idDefault,bits:cells,",20,0.115434158,Beam
3520,,,112,3,,80,0.489685376,0
3521,,,32,3,,142,0.807147626,0
3522,"public MessageTokenizer(IDiscordClient client,String content){
  if (content == null)   throw new IllegalArgumentException(""Content cannot be null!"");
  if (content.length() == 0)   throw new IllegalArgumentException(""Content must have length!"");
  if (client == null)   throw new IllegalArgumentException(""Client cannot be null!"");
  this.content=content;
  this.client=client;
  stepForward(0);
}","public messageSerialize(IDiscordClient client,String content){
  if (content == null)   throw new IllegalArgumentException(""Content cannot be null!"");
  if (content.length() == 0)   throw new IllegalArgumentException(""Content must have length!"");
  if (client == null)   throw new IllegalArgumentException(""Client cannot be null!"");
  this.content=content;
  this.client=client;
  stepForward(0);
}",71,3,"MessageTokenizer:messageSerialize,",24,0.112876527,Beam
3523,,,27,3,,807,4.618706179,0
3524,"private void computeDoublesForAllZoomLevels(){
  int numFrames=mSoundFile.getNumFrames();
  int[] frameGains=mSoundFile.getFrameGains();
  double[] smoothedGains=new double[numFrames];
  if (numFrames == 1) {
    smoothedGains[0]=frameGains[0];
  }
 else   if (numFrames == 2) {
    smoothedGains[0]=frameGains[0];
    smoothedGains[1]=frameGains[1];
  }
 else   if (numFrames > 2) {
    smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0));
    for (int i=1; i < numFrames - 1; i++) {
      smoothedGains[i]=(double)((frameGains[i - 1] / 3.0) + (frameGains[i] / 3.0) + (frameGains[i + 1] / 3.0));
    }
    smoothedGains[numFrames - 1]=(double)((frameGains[numFrames - 2] / 2.0) + (frameGains[numFrames - 1] / 2.0));
  }
  double maxGain=1.0;
  for (int i=0; i < numFrames; i++) {
    if (smoothedGains[i] > maxGain) {
      maxGain=smoothedGains[i];
    }
  }
  double scaleFactor=1.0;
  if (maxGain > 255.0) {
    scaleFactor=255 / maxGain;
  }
  maxGain=0;
  int gainHist[]=new int[256];
  for (int i=0; i < numFrames; i++) {
    int smoothedGain=(int)(smoothedGains[i] * scaleFactor);
    if (smoothedGain < 0)     smoothedGain=0;
    if (smoothedGain > 255)     smoothedGain=255;
    if (smoothedGain > maxGain)     maxGain=smoothedGain;
    gainHist[smoothedGain]++;
  }
  double minGain=0;
  int sum=0;
  while (minGain < 255 && sum < numFrames / 20) {
    sum+=gainHist[(int)minGain];
    minGain++;
  }
  sum=0;
  while (maxGain > 2 && sum < numFrames / 100) {
    sum+=gainHist[(int)maxGain];
    maxGain--;
  }
  double[] heights=new double[numFrames];
  double range=maxGain - minGain;
  for (int i=0; i < numFrames; i++) {
    double value=(smoothedGains[i] * scaleFactor - minGain) / range;
    if (value < 0.0)     value=0.0;
    if (value > 1.0)     value=1.0;
    heights[i]=value * value;
  }
  algo(mSoundFile.getNumFrames());
  totalZooms=algoValues.size() + 2;
  mNumZoomLevels=totalZooms;
  mLenByZoomLevel=new int[totalZooms];
  mZoomFactorByZoomLevel=new double[totalZooms];
  mValuesByZoomLevel=new double[totalZooms][];
  mLenByZoomLevel[0]=numFrames * 2;
  mZoomFactorByZoomLevel[0]=2.0;
  mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]];
  if (numFrames > 0) {
    mValuesByZoomLevel[0][0]=0.5 * heights[0];
    mValuesByZoomLevel[0][1]=heights[0];
  }
  for (int i=1; i < numFrames; i++) {
    mValuesByZoomLevel[0][2 * i]=0.5 * (heights[i - 1] + heights[i]);
    mValuesByZoomLevel[0][2 * i + 1]=heights[i];
  }
  mLenByZoomLevel[1]=numFrames;
  mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]];
  mZoomFactorByZoomLevel[1]=1.0;
  for (int i=0; i < mLenByZoomLevel[1]; i++) {
    mValuesByZoomLevel[1][i]=heights[i];
  }
  int location=0;
  for (int j=2; j < totalZooms; j++) {
    mLenByZoomLevel[j]=algoValues.get(location);
    mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]];
    mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 1.5;
    for (int i=0; i < mLenByZoomLevel[j]; i++) {
      mValuesByZoomLevel[j][i]=0.5 * (mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i)] + mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i) + 1]);
    }
    location++;
  }
  Log.i(""Scope"",""Squeezed..!!"");
  mInitialized=true;
}","private void computeDoublesForAllZoomContextows(){
  int numFrames=mSoundFile.getNumFrames();
  int[] frameGains=mSoundFile.getFrameGains();
  double[] smoothedGains=new double[numFrames];
  if (numFrames == 1) {
    smoothedGains[0]=frameGains[0];
  }
 else   if (numFrames == 2) {
    smoothedGains[0]=frameGains[0];
    smoothedGains[1]=frameGains[1];
  }
 else   if (numFrames > 2) {
    smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0));
    for (int i=1; i < numFrames - 1; i++) {
      smoothedGains[i]=(double)((frameGains[i - 1] / 3.0) + (frameGains[i] / 3.0) + (frameGains[i + 1] / 3.0));
    }
    smoothedGains[numFrames - 1]=(double)((frameGains[numFrames - 2] / 2.0) + (frameGains[numFrames - 1] / 2.0));
  }
  double maxGain=1.0;
  for (int i=0; i < numFrames; i++) {
    if (smoothedGains[i] > maxGain) {
      maxGain=smoothedGains[i];
    }
  }
  double scaleFactor=1.0;
  if (maxGain > 255.0) {
    scaleFactor=255 / maxGain;
  }
  maxGain=0;
  int gainHist[]=new int[256];
  for (int i=0; i < numFrames; i++) {
    int smoothedGain=(int)(smoothedGains[i] * scaleFactor);
    if (smoothedGain < 0)     smoothedGain=0;
    if (smoothedGain > 255)     smoothedGain=255;
    if (smoothedGain > maxGain)     maxGain=smoothedGain;
    gainHist[smoothedGain]++;
  }
  double minGain=0;
  int sum=0;
  while (minGain < 255 && sum < numFrames / 20) {
    sum+=gainHist[(int)minGain];
    minGain++;
  }
  sum=0;
  while (maxGain > 2 && sum < numFrames / 100) {
    sum+=gainHist[(int)maxGain];
    maxGain--;
  }
  double[] heights=new double[numFrames];
  double range=maxGain - minGain;
  for (int i=0; i < numFrames; i++) {
    double value=(smoothedGains[i] * scaleFactor - minGain) / range;
    if (value < 0.0)     value=0.0;
    if (value > 1.0)     value=1.0;
    heights[i]=value * value;
  }
  algo(mSoundFile.getNumFrames());
  totalZooms=algoValues.size() + 2;
  mNumZoomLevels=totalZooms;
  mLenByZoomLevel=new int[totalZooms];
  mZoomFactorByZoomLevel=new double[totalZooms];
  mValuesByZoomLevel=new double[totalZooms][];
  mLenByZoomLevel[0]=numFrames * 2;
  mZoomFactorByZoomLevel[0]=2.0;
  mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]];
  if (numFrames > 0) {
    mValuesByZoomLevel[0][0]=0.5 * heights[0];
    mValuesByZoomLevel[0][1]=heights[0];
  }
  for (int i=1; i < numFrames; i++) {
    mValuesByZoomLevel[0][2 * i]=0.5 * (heights[i - 1] + heights[i]);
    mValuesByZoomLevel[0][2 * i + 1]=heights[i];
  }
  mLenByZoomLevel[1]=numFrames;
  mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]];
  mZoomFactorByZoomLevel[1]=1.0;
  for (int i=0; i < mLenByZoomLevel[1]; i++) {
    mValuesByZoomLevel[1][i]=heights[i];
  }
  int location=0;
  for (int j=2; j < totalZooms; j++) {
    mLenByZoomLevel[j]=algoValues.get(location);
    mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]];
    mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 1.5;
    for (int i=0; i < mLenByZoomLevel[j]; i++) {
      mValuesByZoomLevel[j][i]=0.5 * (mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i)] + mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i) + 1]);
    }
    location++;
  }
  Log.i(""Scope"",""Squeezed..!!"");
  mInitialized=true;
}",890,23,"computeDoublesForAllZoomLevels:computeDoublesForAllZoomContextows,",18,0.147869782,Beam
3525,"public static byte[] decodeBase64(String base64Str){
  return DatatypeConverter.parseBase64Binary(base64Str);
}","public static byte[] decodeMeta16(String base32Text){
  return DatatypeConverter.parseBase64Binary(base32Text);
}",20,2,"decodeBase64:decodeMeta16,base64Str:base32Text,",128,0.653989267,Beam
3526,"@Override protected int lookForSelectablePosition(int position,boolean lookDown){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookDown) {
      position=Math.max(0,position);
      while (position < count && !adapter.isEnabled(position)) {
        position++;
      }
    }
 else {
      position=Math.min(position,count - 1);
      while (position >= 0 && !adapter.isEnabled(position)) {
        position--;
      }
    }
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
 else {
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
}","@Override protected int lookForSeableCondition(int selection,boolean lookDown){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookDown) {
      selection=Math.max(0,selection);
      while (selection < count && !adapter.isEnabled(selection)) {
        selection++;
      }
    }
 else {
      selection=Math.min(selection,count - 1);
      while (selection >= 0 && !adapter.isEnabled(selection)) {
        selection--;
      }
    }
    if (selection < 0 || selection >= count) {
      return INVALID_POSITION;
    }
    return selection;
  }
 else {
    if (selection < 0 || selection >= count) {
      return INVALID_POSITION;
    }
    return selection;
  }
}",162,8,"position:selection,lookForSelectablePosition:lookForSeableCondition,",120,0.828585394,Beam
3529,,,40,5,,684,5.105548867,0
3530,"void cancelIncludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
","void cancelincludedonly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
",45,7,"cancelIncludedOnly:cancelincludedonly,",17,0.072903661,Beam
3531,,,118,7,,1048,4.545177456,0
3532,,,122,6,,766,8.209929574,0
3533,,,62,6,,1631,10.88387577,0
3534,,,38,3,,497,2.975167267,0
3535,,,88,5,,977,5.719482378,0
3536,,,26,4,,510,2.664921852,0
3537,,,58,5,,914,5.280490696,0
3538,,,94,4,,371,2.359554191,0
3539,,,59,5,,738,3.388382641,0
3540,,,120,6,,1406,7.387336874,0
3541,"@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}","@Override public void render(final int type,final Graphics2D g2,final float signalling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,signalling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=signalling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}",120,9,"scaling:signalling,",4,0.032591001,Beam
3542,,,40,4,,350,1.891617012,0
3543,"public boolean hasNext() throws IOException {
  dataInputStream.mark(1);
  int val=dataInputStream.read();
  dataInputStream.reset();
  return val != -1;
}","public boolean HasValue() throws IOException {
  dataOutputBuffer.mark(1);
  int len=dataOutputBuffer.read();
  dataOutputBuffer.reset();
  return len != -1;
}",37,3,"hasNext:HasValue,val:len,dataInputStream:dataOutputBuffer,",313,1.696287739,Beam
3544,"public AttributeListPanel(){
  m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  m_Table.setColumnSelectionAllowed(false);
  m_Table.setPreferredScrollableViewportSize(new Dimension(250,150));
  setLayout(new BorderLayout());
  add(new JScrollPane(m_Table),BorderLayout.CENTER);
}","public AttributeCellEditor(){
  m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  m_Table.setColumnSelectionAllowed(false);
  m_Table.setPreferredScrollableViewportSize(new Dimension(250,150));
  setLayout(new BorderLayout());
  add(new JScrollPane(m_Table),BorderLayout.CENTER);
}",56,2,"AttributeListPanel:AttributeCellEditor,",14,0.054701702,Beam
3545,,,61,6,,1216,11.85870004,0
3546,"@Override public char next(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.next();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}
","@Override public char skip(){
  ++docBase;
  if (docBase < segmentEnd || segmentEnd >= doc.getLength()) {
    return tx.skip();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,tx);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=tx.count;
  return tx.current();
}
",82,6,"next:skip,text:tx,docPos:docBase,",619,3.287017969,Beam
3547,,,43,4,,657,3.578816815,0
3548,,,22,4,,761,3.994577428,0
3549,,,20,2,,185,0.955264453,0
3550,"private Response<Bitmap> doParse(NetworkResponse response){
  byte[] data=response.data;
  Log.d(""Checksum"",""Decode"");
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  Log.d(""Checksum"",""Decodess"");
  decodeOptions.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  int actualWidth=decodeOptions.outWidth;
  int actualHeight=decodeOptions.outHeight;
  int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);
  int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);
  decodeOptions.inJustDecodeBounds=false;
  decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
  Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
    bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
    tempBitmap.recycle();
  }
 else {
    bitmap=tempBitmap;
  }
  if (bitmap == null) {
    return Response.error(new ParseError(response));
  }
 else {
    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));
  }
}","private Response<Bitmap> decrypt(NetworkResponse message){
  byte[] data=message.data;
  Log.d(""Checksum"",""Decode"");
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  Log.d(""Checksum"",""Decodess"");
  decodeOptions.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  int actualWidth=decodeOptions.outWidth;
  int actualHeight=decodeOptions.outHeight;
  int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);
  int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);
  decodeOptions.inJustDecodeBounds=false;
  decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
  Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
    bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
    tempBitmap.recycle();
  }
 else {
    bitmap=tempBitmap;
  }
  if (bitmap == null) {
    return Response.error(new ParseError(message));
  }
 else {
    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(message));
  }
}",254,13,"doParse:decrypt,response:message,",61,0.53749162,Beam
3551,"private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}","private void lazyLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      lazyLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      lazyLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      lazyLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}",755,24,"bulkLoad:lazyLoad,",131,1.009098287,Beam
3552,,,193,7,,1276,10.9853479,0
3553,,,34,3,,503,1.906431961,0
3554,,,20,2,,141,1.155763463,0
3555,"protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
","protected Date Compocate(double unit){
  if (Double.isNaN(unit)) {
    return null;
  }
  long dateLong=(long)unit;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
",63,5,"compute:Compocate,value:unit,",63,0.318688087,Beam
3556,,,19,3,,289,1.8512025,0
3557,,,52,3,,117,0.683005949,0
3558,,,25,1,,33,0.122247088,0
3559,,,43,4,,518,3.083936453,0
3560,,,13,1,,37,0.200831715,0
3561,,,48,6,,1043,7.914034081,0
3562,,,16,2,,145,0.996829045,0
3563,,,13,2,,252,1.294433244,0
3564,,,84,2,,306,2.583147482,0
3565,,,16,3,,468,2.869467771,0
3566,"public static String[] parseDelimitedList(String list,char delimiter){
  String delim="""" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}","public static String[] parseDelilitingArray(String data,char delimmit){
  String delim="""" + delimmit;
  StringTokenizer st=new StringTokenizer(data + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}",160,9,"list:data,parseDelimitedList:parseDelilitingArray,delimiter:delimmit,",459,3.294744897,Beam
3567,"public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}
","public Object addResource(Object key,Object node){
  return (objectCache.put(key,node));
}
",24,4,"value:node,putResource:addResource,",165,0.78522106,Beam
3568,"private void validateClassName(String className){
  String nvalue=className.trim();
  if (!nvalue.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,className);
  }
}
","private void validateClassInfo(String functionName){
  String nvalue=functionName.trim();
  if (!nvalue.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,functionName);
  }
}
",40,3,"validateClassName:validateClassInfo,className:functionName,",155,0.695391063,Beam
3569,,,110,5,,1199,8.644149363,0
3570,"private void updateLineList(){
  if (horizontalLineRadiobutton.isSelected()) {
    setHorizontalLineSelected();
  }
 else {
    setVerticalLineSelected();
  }
  updateButtonStates();
}
","private void updateColorOrder(){
  if (horizontalLineRadiobtn.isSelected()) {
    setHorizontalLineSelected();
  }
 else {
    setVerticalLineSelected();
  }
  updateButtonStates();
}
",32,2,"updateLineList:updateColorOrder,horizontalLineRadiobutton:horizontalLineRadiobtn,",57,0.295116111,Beam
3571,,,564,32,,3146,19.2739156,0
3572,"@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
","@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> Conate(final Stream<? extends U> other){
  return fromStream(Stream.Conate(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
",78,2,"concat:Conate,",55,1.021554299,Beam
3573,"public AABB merge(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
","public AABB merge(AABB common){
  minX=Math.min(minX,common.minX);
  maxX=Math.max(maxX,common.maxX);
  minY=Math.min(minY,common.minY);
  maxY=Math.max(maxY,common.maxY);
  minZ=Math.min(minZ,common.minZ);
  maxZ=Math.max(maxZ,common.maxZ);
  return this;
}
",90,8,"other:common,",31,0.147700846,Beam
3574,"public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}","public void plIDE(SLIDE plIDE){
  if (plIDE == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}",63,3,"slide:plIDE,",14,0.065702148,Beam
3575,"@Override public final void sample(){
  _value=_acquireCount.get() - _releaseCount.get();
}
","@Override public final void eval(){
  _value=_acquireCount.get() - _releaseCount.get();
}
",24,4,"sample:eval,",6,0.024418135,Beam
3576,,,47,2,,118,0.497672919,0
3577,,,19,4,,113,0.525522443,0
3578,"public void removeScanningCallback(OneSheeldScanningCallback scanningCallback){
  if (scanningCallback != null && scanningCallbacks.contains(scanningCallback))   scanningCallbacks.remove(scanningCallback);
}
","public void removescanningConsumer(OneSheeldScanningCallback scannerFunction){
  if (scannerFunction != null && scanningFallings.contains(scannerFunction))   scanningFallings.remove(scannerFunction);
}
",29,3,"removeScanningCallback:removescanningConsumer,scanningCallback:scannerFunction,scanningCallbacks:scanningFallings,",206,0.794718166,Beam
3579,,,175,6,,313,2.113518727,0
3580,,,966,24,,2730,37.28404247,0
3581,,,140,10,,2088,15.42764284,0
3582,,,51,4,,1334,28.48890379,0
3583,"public static double sampleSkew(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}","public static double sampleskeW(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}",63,7,"sampleSkew:sampleskeW,",10,0.053964905,Beam
3584,,,81,4,,416,1.784831524,0
3585,"public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generate();
}","public void operator(BatchEnvironment env,ClassDefinition cdef,File destFolder){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator flow;
  try {
    flow=new RMIGenerator(env,cdef,destFolder,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  flow.operator();
}",85,8,"destDir:destFolder,generate:operator,gen:flow,",941,4.983172766,Beam
3586,,,129,9,,2527,16.3148159,0
3587,,,44,5,,186,0.873997875,0
3588,"public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}","public static String convertFromUtf32(int[] letter,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(letter[i]));
  }
  return sb.toString();
}",62,6,"text:letter,",22,0.179404942,Beam
3589,"public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
","public boolean onScheduleAsLibrary(Config config,Config ruby,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,ruby);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(ruby,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
",85,6,"runtime:ruby,",58,0.414458116,Beam
3590,,,78,6,,1236,6.50850604,0
3591,"public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}","public String syllablify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllablify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}",73,5,"syllabify:syllablify,",5,0.043326811,Beam
3592,,,22,3,,327,1.605302091,0
3593,"public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}","public WritableRaster process(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}",201,15,"createWritableChild:process,",26,1.052401396,Beam
3595,,,195,9,,1295,10.17481356,0
3596,"void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}","void actionPreDoChange(ActionType type,long reference,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != reference || type == ActionType.DELETE && actionPosition() != reference && actionPosition() - 1L != reference) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > reference;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(reference);
    previousTime=System.currentTimeMillis();
  }
}",118,8,"eventPreModify:actionPreDoChange,position:reference,",157,1.162864288,Beam
3597,"public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}
","public int loop(char cbuf[],int offset,int length) throws IOException {
  return sd.loop(cbuf,offset,length);
}
",31,5,"read:loop,",27,0.230288092,Beam
3598,"String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}","String decodeTextValue(byte[] text) throws IOException {
  boolean isCompressed=((text.length > 1) && (text[0] == TEXT_COMPRESSION_HEADER[0]) && (text[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(text.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < text.length) {
      if (text[dataEnd] == (byte)0x00) {
        decodeTextSegment(text,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(text,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(text,getCharset());
}",168,8,"data:text,",4,0.082386279,Beam
3599,,,243,4,,615,5.226254443,0
3600,,,174,9,,2759,19.24233128,0
3601,,,152,8,,1616,10.732734,0
3602,,,161,13,,2597,14.12382787,0
3603,"private void updateRadioLinks(){
  m_advanceDataSetFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  if (m_Exp != null) {
    if (!m_GeneratorPropertyPanel.getEditorActive()) {
      m_Exp.setAdvanceDataSetFirst(true);
    }
 else {
      m_Exp.setAdvanceDataSetFirst(m_advanceDataSetFirst.isSelected());
    }
  }
}
","private void setupWheelLinks(){
  m_advanceDataListLast.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  if (m_Exp != null) {
    if (!m_GeneratorPropertyPanel.getEditorActive()) {
      m_Exp.setAdvanceDataSetFirst(true);
    }
 else {
      m_Exp.setAdvanceDataSetFirst(m_advanceDataListLast.isSelected());
    }
  }
}
",69,5,"updateRadioLinks:setupWheelLinks,m_advanceDataSetFirst:m_advanceDataListLast,",43,0.258311462,Beam
3604,,,61,5,,1283,12.09036268,0
3605,,,30,4,,909,5.868206406,0
3606,,,129,8,,323,2.17296954,0
3607,"public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
","public void swind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      default.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
",41,4,"rewind:swind,current:default,",21,0.224520206,Beam
3608,"public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_points.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}","public void filled_draw(PlaPointFloat[] p_lines,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_lines.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_lines[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}",142,10,"fill_shape:filled_draw,p_points:p_lines,",166,1.114427936,Beam
3609,"@Override public boolean start() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
","@Override public boolean process() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
",93,8,"start:process,",6,0.080905946,Beam
3610,"private void connectEqualized(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}","private void connectEchronised(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}",173,16,"connectEqualized:connectEchronised,",6,0.075202843,Beam
3611,,,16,2,,136,0.597436965,0
3612,"private DBID stringToDBID(String query){
  return DBIDUtil.importInteger(Integer.valueOf(query));
}
","private DBID stringToDbId(String alias){
  return DBIDUtil.importInteger(Integer.valueOf(alias));
}
",22,2,"query:alias,stringToDBID:stringToDbId,",90,0.404586538,Beam
3613,"public static String format(final String value,String... params){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}","public static String join(final String value,String... tags){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (tags == null || paramNumber >= tags.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),tags[paramNumber]);
  }
  return result;
}",122,7,"format:join,params:tags,",96,0.572811389,Beam
3614,"protected void responseSent(StreamResponseMessage responseMessage){
  if (syncProtocol != null)   syncProtocol.responseSent(responseMessage);
}
","protected void requestDone(StreamResponseMessage responseBody){
  if (SyncProtocol != null)   SyncProtocol.requestDone(responseBody);
}
",22,3,"responseSent:requestDone,responseMessage:responseBody,syncProtocol:SyncProtocol,",147,0.689159596,Beam
3615,"private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
","private static synchronized boolean isEnabledImpl(HttpCallerInfo hii){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hii.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hii);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
",131,6,"isSupportedImpl:isEnabledImpl,hci:hii,",80,0.460236406,Beam
3616,,,114,8,,1856,10.96755679,0
3617,,,73,4,,498,3.417379093,0
3618,"public boolean isArmed(){
  return other.isArmed();
}
","public boolean isARmented(){
  return other.isARmented();
}
",14,2,"isArmed:isARmented,",31,0.166983771,Beam
3619,,,86,8,,177,0.716822728,0
3620,,,34,2,,254,1.284543371,0
3621,,,58,4,,844,4.577769736,0
3622,,,162,10,,3570,26.61902839,0
3623,,,87,5,,936,5.450105719,0
3624,,,72,6,,1381,13.31259694,0
3625,"@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
","@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
",81,4,"showHiveDatabases:showHiveDases,",10,0.052657036,Beam
3626,,,107,5,,236,1.026421285,0
3627,,,16,3,,487,1.892666495,0
3628,,,34,5,,551,2.900027414,0
3629,,,57,4,,600,2.42311041,0
3630,"public static Entry makeEntry(List<String> ldifLines){
  return makeEntry(ldifLines.toArray(new String[ldifLines.size()]));
}
","public static Entry makerPage(List<String> ldifiLines){
  return makerPage(ldifiLines.toArray(new String[ldifiLines.size()]));
}
",32,2,"makeEntry:makerPage,ldifLines:ldifiLines,",60,0.398134955,Beam
3631,"public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}","public static CompiereColor parse(String addresses){
  CompiereColor cc=new CompiereColor();
  try {
    if (addresses != null && addresses.length() > 0)     cc.parseAttributres(addresses);
  }
 catch (  Exception e) {
    log.severe(""("" + addresses + "") - ""+ e.toString());
  }
  return cc;
}",69,5,"attributes:addresses,",3,0.028652426,Beam
3632,,,197,12,,2628,17.66589427,0
3633,"private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}","private void start(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}",524,15,"startHideAnimations:start,",22,0.131566024,Beam
3635,"protected void injectIntoVolumeInformationContainer(Map<String,StringSet> volumeInformation,String infoKey,String altKey,CIMInstance volumeInstance){
  Object value=getCIMPropertyValue(volumeInstance,infoKey);
  if (null == value) {
    value=getCIMPropertyValue(volumeInstance,altKey);
  }
  String charactersticName=SupportedVolumeInformation.getVolumeInformation(infoKey);
  if (null != value && null != charactersticName) {
    StringSet valueSet=new StringSet();
    if (value instanceof String) {
      valueSet.add(value.toString());
    }
 else     if (value instanceof String[]) {
      valueSet.addAll(Arrays.asList((String[])value));
    }
    volumeInformation.put(charactersticName,valueSet);
  }
}
","protected void injectIntovolumeinformationMap(Map<String,StringSet> ioInformation,String partKey,String altKey,CIMInstance chemicalInst){
  Object value=getCIMPropertyValue(chemicalInst,partKey);
  if (null == value) {
    value=getCIMPropertyValue(chemicalInst,altKey);
  }
  String charactersticName=SupportedVolumeInformation.getVolumeInformation(partKey);
  if (null != value && null != charactersticName) {
    StringSet valueSet=new StringSet();
    if (value instanceof String) {
      valueSet.add(value.toString());
    }
 else     if (value instanceof String[]) {
      valueSet.addAll(Arrays.asList((String[])value));
    }
    ioInformation.put(charactersticName,valueSet);
  }
}
",136,8,"injectIntoVolumeInformationContainer:injectIntovolumeinformationMap,volumeInformation:ioInformation,volumeInstance:chemicalInst,infoKey:partKey,",1099,7.960914361,Beam
3636,"public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",policyName);
    }
 else {
      format=String.format(""SG_%s_%d"",policyName,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}","public String generateRuleName(String olicyCode,Set<String> existingUserStates,String parentRoleName){
  int limit=0;
  String format=null;
  while (limit <= existingUserStates.size()) {
    if (0 == limit) {
      format=String.format(""SG_%s"",olicyCode);
    }
 else {
      format=String.format(""SG_%s_%d"",olicyCode,limit);
    }
    String generatedCompanyName=generate(parentRoleName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingUserStates.contains(generatedCompanyName)) {
      return generatedCompanyName;
    }
    limit++;
  }
  return generate(parentRoleName,String.format(""SG1_%s"",olicyCode),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}",134,7,"existingGroupNames:existingUserStates,generateGroupName:generateRuleName,parentGroupName:parentRoleName,policyName:olicyCode,generatedGroupName:generatedCompanyName,count:limit,",1808,16.10653138,Beam
3637,,,39,5,,584,2.425521183,0
3639,"public static Variation attemptToGetAsVariant(String part){
  try {
    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
","public static Variation parse(String product){
  try {
    StoneTypes var=StoneTypes.valueOf(product.toUpperCase());
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(product.toUpperCase());
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(product);
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(product);
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(product);
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(product);
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(product);
    if (var != null) {
      Variation bf=new Variation();
      bf.setValue(var.value());
      return bf;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
",371,4,"attemptToGetAsVariant:parse,part:product,bv:bf,",551,5.24539338,Beam
3640,"private int measureWidth(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
","private int MeasuredString(int measuredModel){
  int search;
  int specMode=MeasureSpec.getMode(measuredModel);
  int specSize=MeasureSpec.getSize(measuredModel);
  if (specMode == MeasureSpec.EXACTLY) {
    search=specSize;
  }
 else {
    search=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      search=Math.min(search,specSize);
    }
  }
  return search;
}
",93,7,"measureWidth:MeasuredString,measureSpec:measuredModel,result:search,",431,2.724601877,Beam
3641,,,39,4,,763,3.957928852,0
3642,"public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
","public boolean action(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
",44,5,"remove:action,",46,0.196344785,Beam
3643,"public void show(@IdRes final int itemId){
  map.add(itemId);
  navigation.invalidateBadge(itemId);
}
","public void empty(@IdRes final int iconRef){
  map.add(iconRef);
  navigation.invalidateBadge(iconRef);
}
",26,4,"itemId:iconRef,show:empty,",135,0.540399603,Beam
3645,,,18,3,,373,1.552530332,0
3646,,,31,4,,1109,11.06712797,0
3647,"public synchronized void release(){
  index.clear();
}
","public synchronized void ire(){
  queue.clear();
}
",14,2,"release:ire,index:queue,",91,0.358877087,Beam
3648,,,55,4,,651,3.719671512,0
3649,"public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}","public static long[] changes(Long[] area){
  long[] dest=new long[area.length];
  for (int i=0; i < area.length; i++) {
    Long v=area[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}",75,5,"values:changes,array:area,",63,0.293139744,Beam
3650,"@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage image=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    image=createImage(w,h,rgb.getData());
  }
  return image;
}
","@Override public BufferedImage JPEGToRGBBnd(final byte[] reader,final int ww,final int hh,final int mY,final int pY){
  BufferedImage value=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(reader,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,mY,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    value=createImage(w,h,rgb.getData());
  }
  return value;
}
",119,12,"data:reader,pX:mY,JPEGToRGBImage:JPEGToRGBBnd,image:value,",1864,10.23817289,Beam
3651,"public boolean hasMyomerBooster(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
","public boolean hasMyomerBooser(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
",56,3,"hasMyomerBooster:hasMyomerBooser,",4,0.022517784,Beam
3652,,,54,5,,877,6.557946416,0
3653,,,132,10,,1355,7.151165048,0
3654,,,88,2,,266,1.31626236,0
3655,"int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}","int putData(Object length) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(length);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(length);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}",145,8,"data:length,",11,0.083071133,Beam
3656,"public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}","public int findEventPositionNearestPoint(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}",339,19,"findEventPositionNearestTime:findEventPositionNearestPoint,",4,0.034307321,Beam
3657,,,97,7,,1622,15.39871893,0
3658,,,22,4,,1050,5.395321294,0
3659,"@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void metadataError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}","@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void metaException(Locale locale,@PathVariable(value=""tenant"") String participant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),participant);
  metadataDefaultTenantBindingError(locale,response);
}",53,5,"metadataError:metaException,tenant:participant,",253,1.177491367,Beam
3660,,,223,12,,3225,19.13943822,0
3661,,,247,12,,2066,13.96207348,0
3662,,,17,3,,265,1.586153968,0
3663,,,32,3,,624,2.596548951,0
3664,,,264,18,,4935,31.29722696940100,0
3666,,,153,11,,2234,17.89786276,0
3667,"@Override public void close(){
  try {
    flush();
  }
 catch (  AMLogException ale) {
    Debug.error(tableName + "":DBHandler:close/flush error: "" + ale.getMessage());
  }
  if (conn != null) {
    try {
      conn.close();
    }
 catch (    SQLException ce) {
      Debug.error(tableName + "":DBHandler: Unable To Close Connection"",ce);
    }
  }
  stopBufferTimer();
}
","@Override public void release(){
  try {
    flush();
  }
 catch (  AMLogException ale) {
    Debug.error(tableName + "":DBHandler:close/flush error: "" + ale.getMessage());
  }
  if (conn != null) {
    try {
      conn.release();
    }
 catch (    SQLException ce) {
      Debug.error(tableName + "":DBHandler: Unable To Close Connection"",ce);
    }
  }
  stopBufferTimer();
}
",77,5,"close:release,",15,0.073413606,Beam
3669,"public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}","public static int left(String batch,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return left(batch,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int left=StringUtil.length(batch);
  if (left == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < left; i++) {
    c=batch.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < left)   count++;
  return count;
}",173,10,"len:left,list:batch,",201,1.553230611,Beam
3670,,,109,8,,1253,6.265790915,0
3671,,,145,5,,1144,9.77903411,0
3672,"public static boolean isEmpty(CharSequence text){
  return text == null || text.length() == 0;
}","public static boolean orempty(CharSequence prefix){
  return prefix == null || prefix.length() == 0;
}",23,2,"text:prefix,isEmpty:orempty,",157,0.903459605,Beam
3673,"static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
","static Map addElementInMap(String x,Set values,Map byMap){
  if ((x != null) && (byMap != null)) {
    byMap.put(x,values);
  }
  return byMap;
}
",43,4,"toMap:byMap,key:x,addElementToMap:addElementInMap,",582,2.538721347,Beam
3674,,,54,3,,283,1.168195383,0
3675,"public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){
  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
  if (!processUpdates) {
    deviceListeners.clearListeners();
  }
  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceListeners.addListener(""device"",listener);
    }
  }
  return res;
}","public IDevice learnInstance(long macAddress,Short evnic,Integer ipv4Address,Long switchCPID,Integer SwitchPoint,boolean processUpdatedlines){
  List<IDeviceListener> listeners=deviceMonitorations.getOrderedListeners();
  if (!processUpdatedlines) {
    deviceMonitorations.clearListeners();
  }
  if (evnic != null && evnic.shortValue() <= 0)   evnic=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  IDevice res=learnDeviceByEntity(new Entity(macAddress,evnic,ipv4Address,switchCPID,SwitchPoint,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceMonitorations.addListener(""device"",listener);
    }
  }
  return res;
}",135,11,"vlan:evnic,processUpdates:processUpdatedlines,switchDPID:switchCPID,learnEntity:learnInstance,switchPort:SwitchPoint,deviceListeners:deviceMonitorations,",2653,15.26154933,Beam
3676,,,36,5,,1167,5.131816149,0
3677,"public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}","public static EventBean[] addFromObject(EventBean[] batch,Collection<EventBean> eventsToAdd){
  EventBean[] newEvent=new EventBean[batch.length + eventsToAdd.size()];
  System.arraycopy(batch,0,newEvent,0,batch.length);
  int counter=batch.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newEvent[counter++]=eventToAdd;
  }
  return newEvent;
}",83,6,"array:batch,addToArray:addFromObject,newArray:newEvent,",606,4.206896424,Beam
3678,,,28,3,,303,2.162394985,0
3679,"@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){
  String suffixCloudUnit=application.getSuffixCloudUnitIO();
  JedisPool pool=null;
  Jedis jedis=null;
  try {
    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedis=pool.getResource();
    String subNameSpace=concatSubNameSpace(application);
    String key=subNameSpace + suffixCloudUnit;
    String frontend=""frontend:"" + key.toLowerCase();
    jedis.lset(frontend,1,""http://"" + dockerManagerIP + "":""+ serverPort);
    String frontendServerManager=""frontend:manager-"" + key.toLowerCase();
    jedis.lset(frontendServerManager,1,""http://"" + dockerManagerIP + "":""+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jedis != null) {
      pool.destroy();
    }
  }
}","@Override public void updateHostaddress(Application message,String dockerManagerIP,String serverPort,String serverManagerPort){
  String suffixCloudVersion=message.getSuffixCloudUnitIO();
  JedisPool group=null;
  Jedis jedis=null;
  try {
    group=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedis=group.getResource();
    String subNameSpace=concatSubNameSpace(message);
    String key=subNameSpace + suffixCloudVersion;
    String frontend=""frontend:"" + key.toLowerCase();
    jedis.lset(frontend,1,""http://"" + dockerManagerIP + "":""+ serverPort);
    String frontendServerManager=""frontend:manager-"" + key.toLowerCase();
    jedis.lset(frontendServerManager,1,""http://"" + dockerManagerIP + "":""+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jedis != null) {
      group.destroy();
    }
  }
}",178,16,"updateServerAddress:updateHostaddress,application:message,pool:group,suffixCloudUnit:suffixCloudVersion,",3929,20.80237493,Beam
3680,,,51,4,,767,3.773913201,0
3681,,,67,5,,546,3.195298958,0
3682,,,21,2,,258,1.93998071,0
3683,,,92,4,,582,3.073577662,0
3684,,,42,3,,404,2.404679875,0
3685,,,79,5,,1040,9.280716189,0
3686,"private void loadOrgAccessRole(ArrayList<OrgAccess> list){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  String sql=""SELECT * FROM AD_Role_OrgAccess "" + ""WHERE AD_Role_ID=? AND IsActive=\'Y\'"";
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getAD_Role_ID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());
      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
 finally {
    DB.close(rs,pstmt);
  }
}","private void loadRoundAccessList(ArrayList<OrgAccess> listed){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  String sql=""SELECT * FROM AD_Role_OrgAccess "" + ""WHERE AD_Role_ID=? AND IsActive=\'Y\'"";
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getAD_Role_ID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());
      loadOrgAccessAdd(listed,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
 finally {
    DB.close(rs,pstmt);
  }
}",150,8,"loadOrgAccessRole:loadRoundAccessList,list:listed,",87,0.627487572,Beam
3687,"protected void flip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}","protected void flip(BufferCapabilities.FlipContents flipACTION){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipACTION);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}",69,4,"flipAction:flipACTION,",6,0.048496934,Beam
3688,"private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
","private <T>UnaryOperator<T> Compos(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
",27,3,"compose:Compos,",5,0.023514418,Beam
3689,"private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}","private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] copstore) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    copstore=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (copstore != null) {
      pp=new PasswordProtection(copstore);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        copstore=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          copstore=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(copstore);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,copstore);
}",265,12,"pkey:copstore,",122,0.87735494,Beam
3690,,,55,5,,980,6.087520488,0
3691,,,22,5,,1053,15.19661891,0
3692,,,54,4,,936,5.755721418,0
3693,"private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}
","private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromFTest(List<TestCase> styles){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : styles) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}
",72,4,"tests:styles,initializeCoverageMapFromTests:initializeCoverageMapFromFTest,",74,0.519233807,Beam
3694,"void putFile(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
","void copy(String referencePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),referencePath);
    File src=codebase.getFile(referencePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",referencePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",referencePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",referencePath);
    }
    String mimeType=guessMimeType(referencePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,referencePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",referencePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",referencePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",referencePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
",316,15,"relativePath:referencePath,putFile:copy,",106,0.613549336,Beam
3695,,,22,3,,282,1.65645781,0
3696,"public EventsIntegrationTest(){
  setResponseLogLengthLimit(1000);
  dateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-1);
  yesterday=dateFormat.format(cal.getTime());
  yesterday+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,0);
  today=dateFormat.format(cal.getTime());
  today+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,1);
  tomorrow=dateFormat.format(cal.getTime());
  tomorrow+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,3);
  tomorrowPlus3=dateFormat.format(cal.getTime());
  tomorrowPlus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-3);
  yesterdayMinus3=dateFormat.format(cal.getTime());
  yesterdayMinus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,5);
  tomorrowPlus5=dateFormat.format(cal.getTime());
  tomorrowPlus5+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-5);
  yesterdayMinus5=dateFormat.format(cal.getTime());
  yesterdayMinus5+=""T00:00:00+0000"";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinus3;
  experiment.endTime=tomorrowPlus3;
  experiment.samplingPercent=1.0;
  experiment.label=""experiment"";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy(""creationTime"",""modificationTime"",""ruleJson"");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}","public synchronized(){
  setResponseLogLengthLimit(1000);
  styleFunction=new SimpleDateFormat(""yyyy-MM-dd"");
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-1);
  yesterday=styleFunction.format(cal.getTime());
  yesterday+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,0);
  today=styleFunction.format(cal.getTime());
  today+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,1);
  tomorrow=styleFunction.format(cal.getTime());
  tomorrow+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,3);
  tomorrowPlus3=styleFunction.format(cal.getTime());
  tomorrowPlus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-3);
  yesterdayMinus3=styleFunction.format(cal.getTime());
  yesterdayMinus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,5);
  tomorrowPlus5=styleFunction.format(cal.getTime());
  tomorrowPlus5+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-5);
  yesterdayMinus5=styleFunction.format(cal.getTime());
  yesterdayMinus5+=""T00:00:00+0000"";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinus3;
  experiment.endTime=tomorrowPlus3;
  experiment.samplingPercent=1.0;
  experiment.label=""experiment"";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy(""creationTime"",""modificationTime"",""ruleJson"");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}",339,13,"EventsIntegrationTest:synchronized,dateFormat:styleFunction,",56,0.306415367,Beam
3698,"protected void onProgress(int itemcount,int size){
}
","protected void oneStatus(int itemcount,int address){
}
",12,3,"size:address,onProgress:oneStatus,",176,1.275964018,Beam
3699,,,23,2,,252,3.437293561,0
3700,"public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
","public void setup(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
",15,2,"init:setup,",3,0.013927289,Beam
3701,"protected void execute(Runnable evt){
  executor.execute(evt);
}
","protected void unit(Runnable evt){
  executor.unit(evt);
}
",16,3,"execute:unit,",50,0.212912317,Beam
3702,,,62,6,,170,0.825660006,0
3703,,,75,6,,1238,5.291982543,0
3704,,,30,4,,1160,10.49494434,0
3705,"private static boolean isWritable(@NonNull final File file){
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}
","private static boolean isWritable(@NonNull final File content){
  boolean isEsising=content.exists();
  try {
    FileOutputStream page=new FileOutputStream(content,true);
    try {
      page.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean data=content.canWrite();
  if (!isEsising) {
    content.delete();
  }
  return data;
}
",91,5,"file:content,isExisting:isEsising,output:page,result:data,",573,3.235001345,Beam
3706,"@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
","@NotNull public PsiQuery findNested(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String description){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (description.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
",109,7,"name:description,childrenNamed:findNested,",132,0.762308745,Beam
3707,"public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}","public static String trimTopad(String str,int length,char PadChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=PadChar;
  }
  return result;
}",79,5,"padChar:PadChar,trimOrPad:trimTopad,",423,3.191951362,Beam
3708,,,105,10,,2112,21.49032272,0
3709,"protected boolean arePathsContiguous(TreePath[] paths){
  if (rowMapper == null || paths.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=paths.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=paths[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (paths[counter] != null) {
        tempPath[0]=paths[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}","protected boolean arePathesCorical(TreePath[] columns){
  if (rowMapper == null || columns.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=columns.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=columns[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (columns[counter] != null) {
        tempPath[0]=columns[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}",250,12,"arePathsContiguous:arePathesCorical,paths:columns,",95,1.092513112,Beam
3710,,,138,3,,476,4.394235619,0
3711,,,101,6,,950,5.580806947,0
3712,,,35,5,,1066,6.136301239,0
3713,"@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}
","@SafeVarargs public final void process(int entryPosition,T... newItems){
  process(entryPosition,Arrays.asList(newItems));
}
",28,3,"rowIndex:entryPosition,insert:process,",113,0.621656692,Beam
3714,"private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
","private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> cache,MessageUid base,MessageUid url){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (cache instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)cache;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(cache);
  if (url != null)   return sortedMap.subMap(base,url.next());
  return sortedMap.tailMap(base);
}
",98,5,"to:url,map:cache,from:base,",523,3.194493294,Beam
3715,"private static final String decodeFieldName(final String pXmlFieldName){
  StringBuilder str=new StringBuilder();
  int fieldNameLength=pXmlFieldName.length();
  char currentChar;
  for (int i=0; i < fieldNameLength; i++) {
    currentChar=pXmlFieldName.charAt(i);
    if (currentChar == '-') {
      str.append(Character.toUpperCase(pXmlFieldName.charAt(++i)));
    }
 else {
      str.append(currentChar);
    }
  }
  return str.toString();
}","private static final String decodeStringPart(final String pXmlAttributeName){
  StringBuilder str=new StringBuilder();
  int fieldNameLength=pXmlAttributeName.length();
  char currentChar;
  for (int i=0; i < fieldNameLength; i++) {
    currentChar=pXmlAttributeName.charAt(i);
    if (currentChar == '-') {
      str.append(Character.toUpperCase(pXmlAttributeName.charAt(++i)));
    }
 else {
      str.append(currentChar);
    }
  }
  return str.toString();
}",100,6,"decodeFieldName:decodeStringPart,pXmlFieldName:pXmlAttributeName,",59,0.64145211,Beam
3716,"void queryReadResult(PreparedStatement prep) throws SQLException {
  ResultSet rs=prep.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0; i < columnCount; i++) {
      rs.getString(i + 1);
    }
  }
}","void queryGetMessage(PreparedStatement exec) throws SQLException {
  ResultSet rs=exec.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0; i < columnCount; i++) {
      rs.getString(i + 1);
    }
  }
}",72,6,"queryReadResult:queryGetMessage,prep:exec,",161,1.014561538,Beam
3717,"public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}","public static int findName(String space,int[] key){
  for (int i=0; i < key.length; i++) {
    if (space.equals(getName(key[i]))) {
      return i;
    }
  }
  return -1;
}",57,4,"name:space,table:key,",210,1.156092529,Beam
3718,,,42,4,,181,0.855521341,0
3719,,,22,2,,266,1.109267906,0
3720,,,61,5,,1516,14.42130837,0
3721,"public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}","public static String alg2POIDS(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}",25,3,"map2OID:alg2POIDS,",19,0.104731027,Beam
3722,,,270,8,,1195,7.806216514,0
3723,,,251,14,,4470,29.25102531,0
3724,"private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}","private void unifyUsNameByAlias(Map<String,List<LogCommitInfo>> devNameTable){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameTable.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}",93,6,"unifyUsernameByName:unifyUsNameByAlias,devNameMap:devNameTable,",55,0.411385306,Beam
3725,,,125,9,,1328,12.26207236,0
3726,,,133,10,,1704,16.58664092,0
3727,,,154,6,,1024,3.855116189,0
3728,,,252,15,,3490,22.32070692,0
3729,,,55,4,,564,4.731811062,0
3730,"public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}
","public void action(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.action(file);
}
",57,4,"print:action,",27,0.138839753,Beam
3731,"private void scrollCurrentItemToCenter(){
  final ViewItem currItem=mViewItems[BUFFER_CENTER];
  if (currItem == null) {
    return;
  }
  final int currentViewCenter=currItem.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,""[fling] mController.isScrolling() - "" + mController.isScrolling());
    return;
  }
  int snapInTime=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentViewCenter)) / mDrawArea.width());
  Log.d(TAG,""[fling] Scroll to center."");
  mController.scrollToPosition(currentViewCenter,snapInTime,false);
}
","private void scrollCurrentContainerTOCurrent(){
  final ViewItem curnerIt=mViewItems[BUFFER_CENTER];
  if (curnerIt == null) {
    return;
  }
  final int currentViewCenter=curnerIt.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,""[fling] mController.isScrolling() - "" + mController.isScrolling());
    return;
  }
  int SnapOutTime=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentViewCenter)) / mDrawArea.width());
  Log.d(TAG,""[fling] Scroll to center."");
  mController.scrollToPosition(currentViewCenter,SnapOutTime,false);
}
",119,11,"scrollCurrentItemToCenter:scrollCurrentContainerTOCurrent,currItem:curnerIt,snapInTime:SnapOutTime,",1359,8.026678209,Beam
3732,,,394,13,,1686,9.237115991,0
3734,,,92,6,,850,4.837109109,0
3735,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnpackGCObject(String planned){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=planned.charAt(i++);
    char value=planned.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}",83,7,"zzUnpackCMap:doUnpackGCObject,packed:planned,",62,0.286837467,Beam
3736,"protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}
","protected PrintWriter lineContentOut(Document doc){
  return lineContentOut;
}
",12,2,"lineFileOut:lineContentOut,",5,0.026730299,Beam
3737,,,1113,53,,576,5.100608205795290,0
3738,,,28,1,,49,0.235692668,0
3739,,,27,2,,293,1.670018931,0
3740,"public void addPutTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimeNanos(duration);
}
","public void addPutTimenones(long description){
  putTimesNodes.addAndGet(description);
  if (declde != null)   declde.addPutTimenones(description);
}
",29,4,"duration:description,addPutTimeNanos:addPutTimenones,delegate:declde,putTimeNanos:putTimesNodes,",350,2.090370647,Beam
3742,,,177,12,,1956,9.02262034,0
3743,"public String toString(Object value){
  return toPrettyString(value);
}
","public String newStream(Object function){
  return toPrettyString(function);
}
",15,2,"value:function,toString:newStream,",190,0.869261988,Beam
3744,,,38,5,,543,2.550670779,0
3745,"@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}
","@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterName) throws IllegalAccessException, InstantiationException {
  T server=cache.get(counterName);
  if (server == null) {
    server=counterType.newInstance();
    cache.put(counterName,server);
  }
  return server;
}
",60,5,"counterKey:counterName,counter:server,",167,0.728755609,Beam
3746,,,38,6,,116,0.648703818,0
3748,,,38,3,,231,0.852021511,0
3749,"public double[] levelZeroData(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}","public double[] layerZeroDone(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}",141,8,"levelZeroData:layerZeroDone,",13,0.078472892,Beam
3750,"private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}","private double[] add(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.add(distances1[i],distances2[i]);
  }
  return result;
}",91,5,"max:add,",8,0.041365496,Beam
3752,"public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
","public static boolean isOrgGroupPart(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
",40,4,"isOrgLevelOnly:isOrgGroupPart,",13,0.410212954,Beam
3753,,,62,10,,3408,15.30968708,0
3754,,,80,3,,355,2.022891108,0
3755,,,50,3,,713,16.56812506,0
3756,,,25,2,,286,2.10562427,0
3757,,,303,17,,991,6.712265066,0
3759,"private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
","private void testScenario(String aConfiguration,boolean anExpectingAnonymousError,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnonymousError,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnonymousError,myMethod);
    }
  }
}
",63,5,"anExpectingAnException:anExpectingAnonymousError,",22,0.129378982,Beam
3760,,,42,3,,484,2.963497476,0
3761,"public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}","public static int rounded(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}",102,7,"round:rounded,",4,0.037048237,Beam
3762,"private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}","private static long addWithCompare(long parent,long b,Localizable pattern) throws MathRuntimeException {
  final long result=parent + b;
  if (!((parent ^ b) < 0 || (parent ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,parent,b);
  }
  return result;
}",63,5,"a:parent,addAndCheck:addWithCompare,",129,1.319922483,Beam
3763,,,179,7,,1508,19.50818897,0
3764,"public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}
","public JsonArray add(String child){
  keys.add(Json.child(child));
  return this;
}
",24,3,"value:child,values:keys,",222,1.344177548,Beam
3765,"public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}","public static String cleanFolderStackingMarkers(String journal){
  if (!StringUtils.isEmpty(journal)) {
    Matcher m=folderStackingPattern.matcher(journal);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return journal;
}",60,4,"filename:journal,",10,0.075130896,Beam
3766,,,90,5,,659,3.113689419,0
3769,"public void testGetTables() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
","public void testGettams() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
",45,4,"testGetTables:testGettams,",21,0.13385913,Beam
3770,,,129,7,,1650,9.008629425,0
3771,,,34,5,,328,3.850178194,0
3772,,,14,2,,244,1.384998365,0
3773,,,44,3,,713,4.740196017,0
3774,"public PetCategory findOne(String id){
  log.debug(""Request to get PetCategory : {}"",id);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));
  return petCategory;
}
","public PetCategory findOne(String name){
  log.debug(""Request to get PetCategory : {}"",name);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(name));
  return petCategory;
}
",36,5,"id:name,",23,0.131348924,Beam
3775,,,55,3,,228,1.264197493,0
3776,,,18,2,,282,2.39803139,0
3777,,,60,4,,493,4.426904802,0
3778,,,137,9,,2286,16.01378223,0
3779,,,89,6,,1037,10.58212015,0
3780,"public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){
  DateTime intervalEnd=interval.getEnd();
  DateTime sliceStart=interval.getStart();
  DateTime periodStart=timeGrain.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",interval,timeGrain,periodStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!interval.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",interval,timeGrain);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",interval,intervalSlices.size(),timeGrain);
  return intervalSlices;
}
","public static List<Interval> sort(Interval intrupt,TimeGrain timeGraining){
  DateTime intervalEnd=intrupt.getEnd();
  DateTime sliceStart=intrupt.getStart();
  DateTime periodStart=timeGraining.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",intrupt,timeGraining,periodStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGraining);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!intrupt.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",intrupt,timeGraining);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",intrupt,intervalSlices.size(),timeGraining);
  return intervalSlices;
}
",186,9,"sliceIntervals:sort,interval:intrupt,timeGrain:timeGraining,",315,3.491990507,Beam
3781,,,47,3,,433,3.534645212,0
3782,,,141,11,,2293,8.124760028,0
3783,,,52,4,,902,4.141886453,0
3784,"public void sendMessageUntilStopCount(int stopCount){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCount) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}","public void sendMessageuntilstopSize(int stopCode){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException f) {
      logger.error(""sleep exception "" + f + "" details: "",f);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCode) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}",106,11,"sendMessageUntilStopCount:sendMessageuntilstopSize,stopCount:stopCode,e:f,",136,0.927310689,Beam
3786,,,17,3,,252,1.349670939,0
3787,"private Collection<Var> migrateColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
","private Collection<Var> migrateFieldes(SQLTable newType){
  List<Var> vars=new ArrayList<>();
  String tableType=newType.getEntityType();
  Map<String,ResourceType.DataType> columns=newType.getColumns();
  Map<String,String> foreignColumns=newType.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
",139,8,"currentTable:newType,migrateColumns:migrateFieldes,",92,0.508538,Beam
3788,"public boolean equals(Object interval){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interval);
}
","public boolean Equorts(Object intv){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(intv);
}
",28,3,"interval:intv,equals:Equorts,",43,0.279328052,Beam
3789,"public static Set<String> toStringSet(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}","public static Set<String> toShortMap(TemplateSequenceModel seqLayer) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqLayer.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqLayer.get(i)));
  }
  return set;
}",70,4,"seqModel:seqLayer,toStringSet:toShortMap,",80,0.39206545,Beam
3790,,,31,3,,548,3.440528206,0
3791,"public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));
  }
}
","public <AnnotationType extends Annotation>void construct(MethodBinder<AnnotationType> methodBlinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBlinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBlinder,annotatedMethods));
  }
}
",65,5,"register:construct,methodBinder:methodBlinder,",92,0.392305899,Beam
3792,"public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
","public void removeListen(@NotNull ConfigurationListener oldeners){
  if (myListeners != null) {
    myListeners.remove(oldeners);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
",40,3,"listener:oldeners,removeListener:removeListen,",42,0.153298072,Beam
3793,"@Ignore(""TODO: test is disabled"") @Test public void testPopulate1kbwrites(){
  final byte[] value=new byte[ENTRY_SIZE];
  Arrays.fill(value,(byte)77);
  for (int i=0; i < OP_COUNT; i++) {
    region.put(new Integer(i),value);
  }
  closeDown();
}","@Ignore(""TODO: test is disabled"") @Test public void testPopulate1kbindexes(){
  final byte[] job=new byte[ENTRY_SIZE];
  Arrays.fill(job,(byte)77);
  for (int i=0; i < OP_COUNT; i++) {
    region.put(new Integer(i),job);
  }
  closeDown();
}",71,6,"testPopulate1kbwrites:testPopulate1kbindexes,value:job,",350,6.139167353,Beam
3794,"void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
","void doHandleUnixMouseOperation(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
",454,10,"doHandleJavaMouseEvent:doHandleUnixMouseOperation,",41,0.245917734,Beam
3795,"public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
","public void print(char finalPoint){
  initialString=initialString.append(finalPoint);
  print();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
",43,3,"initialChar:finalPoint,show:print,",135,0.552889085,Beam
3796,"public SSLSocket createSSLSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
","public SSLSocket createSSLSocket(Socket south) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)south.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(south,remoteAddress.getHostName(),south.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
",87,5,"socket:south,",39,0.291221511,Beam
3797,"public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}","public String body(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}",93,8,"tag:body,",6,0.04015245,Beam
3798,"protected OkHttpClient configureHttpClient(){
  final OkHttpClient.Builder builder=new OkHttpClient.Builder();
  final CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  builder.cookieJar(new JavaNetCookieJar(cookieManager));
  builder.connectTimeout(60,TimeUnit.SECONDS);
  builder.writeTimeout(60,TimeUnit.SECONDS);
  builder.readTimeout(90,TimeUnit.SECONDS);
  return builder.build();
}","protected OkHttpClient configureSecureConnection(){
  final OkHttpClient.Builder loader=new OkHttpClient.Builder();
  final CookieManager keyMan=new CookieManager();
  keyMan.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  loader.cookieJar(new JavaNetCookieJar(keyMan));
  loader.connectTimeout(60,TimeUnit.SECONDS);
  loader.writeTimeout(60,TimeUnit.SECONDS);
  loader.readTimeout(90,TimeUnit.SECONDS);
  return loader.build();
}",89,3,"configureHttpClient:configureSecureConnection,builder:loader,cookieManager:keyMan,",315,5.293839371,Beam
3799,,,16,2,,143,0.734527795,0
3800,"private void startStoppedChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
","private void startStoppedChange(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
",22,4,"startStoppedChanged:startStoppedChange,",3,0.013788899,Beam
3801,,,69,7,,1156,7.996817656,0
3802,"private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}","private static void passNativeSample(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}",198,13,"runRandomTest:passNativeSample,",21,0.12657971,Beam
3803,"private String convertUserInputIntoAFullyQualifiedPath(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userInput;
  return fullPath;
}","private String convertUserInputIntoAFullyQualizedpath(final String verOutput){
  if (FileUtils.denotesAbsolutePath(verOutput)) {
    return verOutput;
  }
  if (verOutput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (verOutput.length() > 1) {
      return home + verOutput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + verOutput;
  return fullPath;
}",78,4,"userInput:verOutput,convertUserInputIntoAFullyQualifiedPath:convertUserInputIntoAFullyQualizedpath,",60,1.051501592,Beam
3804,"public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}","public double gamma(Prior prior,Likelihood Likeness) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,Likeness,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,Likeness,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,Likeness,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,Likeness,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,Likeness,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}",945,30,"likelihood:Likeness,wide:gamma,",286,2.3017023046811400,Beam
3805,,,34,3,,700,3.466314737,0
3807,,,105,4,,482,2.409445862,0
3808,"public boolean isBuiltinSoundAvailable(String soundIdentifier){
  return builtinSounds.containsKey(soundIdentifier);
}
","public boolean isBuiltinSoundsKnown(String soundQualifier){
  return builtinSounds.containsKey(soundQualifier);
}
",17,3,"isBuiltinSoundAvailable:isBuiltinSoundsKnown,soundIdentifier:soundQualifier,",90,0.557644145,Beam
3809,,,22,2,,321,1.526024528,0
3810,"public void analyzeAllItAndWriteResults(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}","public void init(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}",283,19,"analyzeAllItAndWriteResults:init,",27,0.175247649,Beam
3811,,,53,3,,156,0.717590483,0
3812,"public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}
","public void Extension(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  Extension(other.getAlternatives());
}
",36,3,"extend:Extension,",9,0.04833231,Beam
3814,"private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}","private Long size(HttpServletRequest resource){
  Long size=null;
  String pathInfo=resource.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    size=Long.valueOf(idString);
  }
  return size;
}",61,4,"id:size,request:resource,",129,0.643206994,Beam
3815,,,83,6,,420,2.878972916,0
3816,"public boolean search(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}
","public boolean ify(V version){
  int h=hashMethod.hash(version);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(version);
}
",55,6,"search:ify,v:version,",145,0.765143609,Beam
3817,,,22,4,,417,1.676518114,0
3818,,,14,2,,321,1.627886697,0
3819,,,141,9,,715,4.277009054,0
3820,"public void assureProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}
","public void assuredConnectionSync(){
  if (client.isClosed()) {
    restart();
  }
}
",21,2,"assureProxyOk:assuredConnectionSync,socket:client,",26,0.13713098,Beam
3821,"public int swap(){
  if (!egl.eglSwapBuffers(eglDisplay,eglSurface)) {
    return egl.eglGetError();
  }
  return EGL10.EGL_SUCCESS;
}","public int Swamp(){
  if (!egl.eglSwapBuffers(eglDisplay,eglAsce)) {
    return egl.eglGetError();
  }
  return EGL10.EGL_SUCCESS;
}",33,4,"swap:Swamp,eglSurface:eglAsce,",257,1.341495796,Beam
3822,"@Override public void close(){
  closing=true;
  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();
}","@Override public void stop(){
  closing=true;
  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();
}",33,3,"close:stop,",4,0.025010649,Beam
3824,"protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
","protected void submit(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
",73,5,"execute:submit,",38,0.189168231,Beam
3825,,,62,3,,597,4.421330718,0
3826,"public void addControlRoll(PilotingRollData control){
  controlRolls.addElement(control);
}
","public void removeContactObject(PilotingRollData cell){
  controlRolls.addElement(cell);
}
",16,3,"addControlRoll:removeContactObject,control:cell,",61,0.255169412,Beam
3827,,,84,5,,374,1.904497071,0
3828,"public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
","public void releaseExpressors(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
",26,3,"releaseSelections:releaseExpressors,",8,0.034973351,Beam
3829,,,37,3,,660,3.760467172,0
3830,"public static byte[] bitmapToBytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}","public static byte[] bitmapFromParts(Bitmap umi){
  byte[] bytes=null;
  if (umi != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    umi.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}",61,4,"bm:umi,bitmapToBytes:bitmapFromParts,",92,0.432842898,Beam
3831,,,61,5,,628,6.776103449,0
3832,"public void waitForData(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
","public void waitUntilData(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
",24,1,"waitForData:waitUntilData,",3,0.018905334,Beam
3833,,,58,5,,773,3.308642673,0
3834,"public CharSeq concat(CharSeq another){
  return new CharSeq(str + another.str);
}
","public CharSeq concat(CharSeq ya){
  return new CharSeq(str + ya.str);
}
",20,3,"another:ya,",19,0.124304382,Beam
3835,"public void testRandom(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}","public void checkSelect(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}",95,4,"testRandom:checkSelect,",16,0.139758448,Beam
3836,,,101,6,,1121,5.98001643,0
3837,"public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}","public CipherParameters encrypt(byte[] in,int keyLen){
  return encrypt(in,0,in.length,keyLen);
}",28,3,"decrypt:encrypt,",52,0.313249866,Beam
3838,"@Override public boolean connectionAllowed(String eventName){
  if (eventName.equals(""trainingSet"") && m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isALLSupported(String ruleName){
  if (ruleName.equals(""trainingSet"") && m_listenees.containsKey(ruleName)) {
    return false;
  }
  return true;
}
",35,3,"connectionAllowed:isALLSupported,eventName:ruleName,",117,0.794561565,Beam
3839,"public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}","public void removeClass(String on){
  if (on != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (on.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}",114,7,"removeAttribute:removeClass,name:on,",62,0.453680138,Beam
3840,"private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}","private PdfObject readCompressedStream(PdfObject dfObject,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (dfObject == null) {
      dfObject=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(dfObject,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return dfObject;
}",550,23,"rootObj:dfObject,",43,0.304494099,Beam
3841,"@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}","@Override public XObject call(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}",253,12,"execute:call,",57,0.451916802,Beam
3842,"public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}","public E clone(int row){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=addressData(row);
  int numMoved=size - row - 1;
  if (numMoved > 0)   System.arraycopy(addressData,row + 1,addressData,row,numMoved);
  addressData[--size]=null;
  return oldValue;
}",67,8,"index:row,remove:clone,elementData:addressData,",273,2.82570494,Beam
3843,,,21,6,,487,2.012886604,0
3844,"public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}","public static Vector2 sub(Vector2 offPre,Vector2 O5){
  return new Vector2(Math.sub(offPre.x,O5.x),Math.sub(offPre.z,O5.z));
}",44,3,"o1:offPre,o2:O5,min:sub,",443,2.795873213,Beam
3845,,,35,2,,87,0.45767645,0
3846,,,28,3,,315,6.834419433,0
3847,,,29,4,,727,2.741189567,0
3848,"public void resetPSRs(){
  pilotRolls.removeAllElements();
}
","public void resetASMs(){
  pilotLogs.removeAllElements();
}
",13,2,"resetPSRs:resetASMs,pilotRolls:pilotLogs,",47,0.198502759,Beam
3849,"public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}","public static Map<String,Object> performsSearchMultiple(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}",229,12,"performFindList:performsSearchMultiple,",21,0.201580735,Beam
3850,,,34,3,,350,1.872912224,0
3851,,,75,4,,793,3.31429224,0
3852,,,22,2,,204,0.57574571,0
3853,"private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}","private ByteString quoteBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder layer=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      layer.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    layer.appendByte(b);
  }
  return layer.toByteString();
}",95,5,"escapeBytes:quoteBytes,builder:layer,",185,0.667844474,Beam
3854,,,50,3,,405,1.23217053,0
3855,,,24,2,,208,0.468380415,0
3856,,,59,5,,1005,8.052133322,0
3857,,,131,11,,3215,9.404864323,0
3858,,,145,14,,3711,13.75253561,0
3859,"public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}","public void serialize(Map logParams){
  String delimiterConfig=(String)logParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)logParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)logParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)logParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}",287,14,"configParams:logParams,initialize:serialize,",135,0.573161562,Beam
3860,"@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
","@SuppressWarnings(""rawtypes"") public static void createProjectConstrant(ZipFile pack,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=pack.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,pack.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
",158,9,"zip:pack,createProjectConstraint:createProjectConstrant,",366,1.001346529,Beam
3861,,,18,1,,49,0.557044494,0
3862,,,69,5,,935,3.079738855,0
3863,"public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
","public static EPType singleValue(Class multiValueTime){
  if (multiValueTime != null && multiValueTime.isArray()) {
    return new ClassMultiValuedEPType(multiValueTime,multiValueTime.getComponentType());
  }
  return new ClassEPType(multiValueTime);
}
",44,2,"singleValueType:multiValueTime,",27,0.088870859,Beam
3864,,,24,2,,242,0.503851151,0
3865,"public static Result verify(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
","public static Result validificate(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
",128,6,"verify:validificate,",44,0.127204275,Beam
3866,,,107,6,,1008,2.778383223,0
3867,,,108,6,,1269,7.288548084,0
3868,,,168,6,,1470,3.697320716,0
3869,,,65,4,,652,1.45076917,0
3870,,,41,2,,252,0.68595262,0
3871,,,18,3,,707,1.418195395,0
3872,"public VdcConfig toConfigParam(Properties vdcInfo){
  log.info(""copy {} to the sync config param"",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
","public VdcConfig toConfigParam(Properties vdcJob){
  log.info(""copy {} to the sync config param"",vdcJob.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcJob.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcJob.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcJob.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcJob.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcJob.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcJob.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcJob.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcJob.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
",214,7,"vdcInfo:vdcJob,",9,0.10781045,Beam
3873,,,79,4,,882,2.483918695,0
3874,,,24,2,,321,0.648841763,0
3875,"public int search(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}","public int ner(String vt){
  int M=dot.length();
  int N=vt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (dot.charAt(j) != vt.charAt(i + j)) {
        skip=Math.max(1,j - right[vt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}",128,9,"search:ner,txt:vt,pat:dot,",313,2.381600861,Beam
3876,,,65,7,,952,1.725351051,0
3877,,,19,3,,300,0.846511753,0
3878,"private String fmtTime(double time){
  return Utilities.pad(timeFormatter.format(time) + ""s"",10);
}","private String fltTimes(double money){
  return Utilities.pad(timeFormatter.format(money) + ""s"",10);
}",26,3,"fmtTime:fltTimes,time:money,",62,0.12294606,Beam
3879,"public Dictionary(Directory tempDir,String tempFileNamePrefix,InputStream affix,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException {
  this.ignoreCase=ignoreCase;
  this.needsInputCleaning=ignoreCase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path aff=Files.createTempFile(tempPath,""affix"",""aff"");
  OutputStream out=new BufferedOutputStream(Files.newOutputStream(aff));
  InputStream aff1=null;
  InputStream aff2=null;
  boolean success=false;
  try {
    final byte[] buffer=new byte[1024 * 8];
    int len;
    while ((len=affix.read(buffer)) > 0) {
      out.write(buffer,0,len);
    }
    out.close();
    aff1=new BufferedInputStream(Files.newInputStream(aff));
    String encoding=getDictionaryEncoding(aff1);
    CharsetDecoder decoder=getJavaEncoding(encoding);
    aff2=new BufferedInputStream(Files.newInputStream(aff));
    readAffixFile(aff2,decoder);
    IntSequenceOutputs o=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> b=new Builder<>(FST.INPUT_TYPE.BYTE4,o);
    readDictionaryFiles(tempDir,tempFileNamePrefix,dictionaries,decoder,b);
    words=b.finish();
    aliases=null;
    morphAliases=null;
    success=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(out,aff1,aff2);
    if (success) {
      Files.delete(aff);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(aff);
    }
  }
}","public process(Directory tempDir,String tempFileNamePrefix,InputStream afinity,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException {
  this.ignoreCase=ignoreCase;
  this.needsInputCleaning=ignoreCase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path aff=Files.createTempFile(tempPath,""affix"",""aff"");
  OutputStream out=new BufferedOutputStream(Files.newOutputStream(aff));
  InputStream aff1=null;
  InputStream aff2=null;
  boolean success=false;
  try {
    final byte[] buffer=new byte[1024 * 8];
    int len;
    while ((len=afinity.read(buffer)) > 0) {
      out.write(buffer,0,len);
    }
    out.close();
    aff1=new BufferedInputStream(Files.newInputStream(aff));
    String encoding=getDictionaryEncoding(aff1);
    CharsetDecoder decoder=getJavaEncoding(encoding);
    aff2=new BufferedInputStream(Files.newInputStream(aff));
    readAffixFile(aff2,decoder);
    IntSequenceOutputs o=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> b=new Builder<>(FST.INPUT_TYPE.BYTE4,o);
    readDictionaryFiles(tempDir,tempFileNamePrefix,dictionaries,decoder,b);
    words=b.finish();
    aliases=null;
    morphAliases=null;
    success=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(out,aff1,aff2);
    if (success) {
      Files.delete(aff);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(aff);
    }
  }
}",300,22,"Dictionary:process,affix:afinity,",317,1.056164928,Beam
3880,"protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}","protected final void config() throws NoGlyphException {
  char[] cycles=chars.toCharArray();
  indices=new int[cycles.length];
  advances=new int[cycles.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < cycles.length; i++) {
    int code=(int)cycles[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < cycles.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)cycles[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == cycles.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}",373,26,"init:config,codes:cycles,",1130,4.504888137,Beam
3881,"protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }","protected void populateNewGlore(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }",273,16,"populateStreamBlob:populateNewGlore,",21,0.062525916,Beam
3882,,,49,5,,938,3.761217332,0
3883,,,17,3,,340,0.941638899,0
3884,"public static String classNamePath(String className){
  String filename=className.replace(""."",File.separator);
  filename=filename.replaceFirst(""[$][0-9]+"","""");
  if (filename.indexOf(""$"") > 0) {
    filename=filename.substring(0,filename.indexOf(""$""));
  }
  return ""src"" + File.separator + filename+ "".java"";
}","public static String filenameStr(String ClassName){
  String theme=ClassName.replace(""."",File.separator);
  theme=theme.replaceFirst(""[$][0-9]+"","""");
  if (theme.indexOf(""$"") > 0) {
    theme=theme.substring(0,theme.indexOf(""$""));
  }
  return ""src"" + File.separator + theme+ "".java"";
}",75,3,"classNamePath:filenameStr,className:ClassName,filename:theme,",259,1.221634197,Beam
3885,,,42,2,,269,0.526120202,0
3886,"public Session(){
  long uptime=System.currentTimeMillis();
  mMainHandler=new Handler(Looper.getMainLooper());
  mTimestamp=(uptime / 1000) << 32 & (((uptime - ((uptime / 1000) * 1000)) >> 32) / 1000);
  mOrigin=""127.0.0.1"";
  try {
    sSignal.await();
  }
 catch (  InterruptedException e) {
  }
}","public Connect(){
  long uptime=System.currentTimeMillis();
  mMainHandler=new Handler(Looper.getMainLooper());
  mTimestamp=(uptime / 1000) << 32 & (((uptime - ((uptime / 1000) * 1000)) >> 32) / 1000);
  mOrigin=""127.0.0.1"";
  try {
    mySignaling.await();
  }
 catch (  InterruptedException e) {
  }
}",80,6,"Session:Connect,sSignal:mySignaling,",88,0.154089363,Beam
3887,,,169,10,,1510,5.080072037,0
3888,"private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
","private void build(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
",367,23,"parseSwitch:build,",159,0.393385637,Beam
3889,"private static String indent(final int height){
  return CoreBaseBOp.indent(height);
}
","private static String dents(final int window){
  return CoreBaseBOp.dents(window);
}
",19,2,"indent:dents,height:window,",143,0.320671805,Beam
3890,"protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}","protected int indexOf(String server,int source,int end,char ch){
  for (int i=source; i < end; i++) {
    if (server.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}",54,6,"buffer:server,start:source,",378,1.34717981,Beam
3891,"private static void checkPathNeed(){
  if (samplingInterval == -1) {
    lastPreloadTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {
      lastPreloadTime=readMorePaths();
    }
  }
}","private static void processPathInfo(){
  if (samplingInterval == -1) {
    lastPreflowTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreflowTime) && SimClock.getTime() >= lastPreflowTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreflowTime); i++) {
      lastPreflowTime=readMorePaths();
    }
  }
}",79,6,"checkPathNeed:processPathInfo,lastPreloadTime:lastPreflowTime,",27,0.103864853,Beam
3892,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
","@Override public void eventPerured(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
",67,3,"actionPerformed:eventPerured,",21,0.041545002,Beam
3893,"@SuppressWarnings(""unused"") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
","@SuppressWarnings(""unused"") public static float valueRangeLimit(float time,float frontTime,float EndTime){
  if (time < Math.min(frontTime,EndTime))   return Math.min(frontTime,EndTime);
  if (time > Math.max(frontTime,EndTime))   return Math.max(frontTime,EndTime);
  return time;
}
",70,4,"startValue:frontTime,endValue:EndTime,value:time,",714,2.118078792,Beam
3894,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
","public void addFooterInfo(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
",66,8,"addFooterView:addFooterInfo,",97,1.680424631,Beam
3895,,,88,7,,172,0.364217524,0
3896,"private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}","private static int lookupQualSelector(XMPNode arrayNode,String qualityInfo,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualityInfo)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualityInfo.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}",218,14,"qualName:qualityInfo,",20,0.082525639,Beam
3897,"public static void copy(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      copy(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
","public static void change(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      change(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
",89,7,"copy:change,",79,0.161341576,Beam
3899,,,74,7,,1506,3.955643674,0
3900,,,57,2,,321,0.979471536,0
3901,,,19,2,,228,0.73641415,0
3902,,,55,4,,765,2.030944673,0
3903,"private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
","private void enccodType(List<Type> plugins,Map<String,Object> m,String key,Declaration from){
  if (plugins == null || plugins.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(plugins.size());
  for (  Type st : plugins) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
",93,7,"encodeTypes:enccodType,types:plugins,",177,0.528531714,Beam
3904,"public HttpMethodInfo(Method method,Object handler,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder){
  this.method=method;
  this.handler=handler;
  this.args=Arrays.copyOf(args,args.length);
  this.formParameters=formParameters;
  this.responder=responder;
}
","public HttpClientinfo(Method method,Object event,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder){
  this.method=method;
  this.event=event;
  this.args=Arrays.copyOf(args,args.length);
  this.formParameters=formParameters;
  this.responder=responder;
}
",66,6,"HttpMethodInfo:HttpClientinfo,handler:event,",1170,2.245580864,Beam
3905,"private String convertTimestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
","private String converttimetz(){
  String root=timetimeFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  root=root.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return root;
}
",40,4,"convertTimestamp:converttimetz,result:root,timestampFormat:timetimeFormat,",184,0.531187495,Beam
3906,"public void stop(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}","public void start(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}",40,5,"stop:start,",3,0.010158412,Beam
3907,,,23,3,,500,1.249576592,0
3908,"public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}","public static int split(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}",226,6,"inflate:split,",113,0.439594074,Beam
3909,,,25,4,,442,0.910678462,0
3910,,,47,3,,445,1.001179318,0
3911,,,21,4,,717,1.701073476,0
3912,"@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
","@Override public CategoricalResults reset(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
",36,4,"clone:reset,",10,0.020457808,Beam
3913,,,27,4,,717,2.69320093,0
3914,,,16,3,,174,0.313910651,0
3915,,,281,23,,4750,16.08392414,0
3916,"public synchronized void disableAttribute(String name){
  enabledAttributes.removeElement(name);
}
","public synchronized void clearFeature(String name){
  enabledRules.removeElement(name);
}
",17,3,"disableAttribute:clearFeature,enabledAttributes:enabledRules,",200,0.423114252,Beam
3917,,,18,2,,87,0.151470244,0
3918,"private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
","private static void checkSuperilege() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkSuperilege(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
",38,2,"checkPermission:checkSuperilege,",11,0.034705905,Beam
3919,"private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
","private static RoadPermission roadFlagComparision(Way iosrmCard,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosrmCard.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
",198,14,"iosmWay:iosrmCard,",12,0.077757025,Beam
3920,"public boolean expired(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}
","public boolean Exerved(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}
",18,3,"expired:Exerved,",11,0.017944304,Beam
3921,"boolean removeDisplay(Display display){
  return m_displays.remove(display);
}
","boolean clearPlay(Display title){
  return m_displays.remove(title);
}
",16,3,"display:title,removeDisplay:clearPlay,",53,0.103424148,Beam
3922,"private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}","private Map<String,String> generateSteam(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}",135,10,"produceStream:generateSteam,",13,0.059624135,Beam
3923,,,28,2,,219,0.492987593,0
3924,"public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {
  debug.message(""ReplayPasswd.onLoginFailure: called"");
}
","public void onCallbackFail(Map requestParamsMap,HttpServletRequest req,HttpServletResponse red) throws AuthenticationException {
  debug.message(""ReplayPasswd.onLoginFailure: called"");
}
",24,5,"onLoginFailure:onCallbackFail,res:red,",110,0.188293099,Beam
3925,"private void quickReply(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  quickReply(quickReplySmsMessage.getReplyText());
}
","private void shortLink(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  shortLink(quickReplySmsMessage.getReplyText());
}
",24,3,"quickReply:shortLink,",18,0.031254947,Beam
3926,,,190,7,,1423,3.857969697,0
3927,"protected abstract void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException ;
","protected abstract void writesignaturesOut(byte[] signature,OutputStream data) throws IOException ;
",16,3,"writeSignatureBlock:writesignaturesOut,out:data,",86,0.196033847,Beam
3928,,,129,7,,671,1.945743783,0
3929,,,445,18,,1996,6.244292216,0
3930,"public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}","public void display(Writer builder){
  PrintWriter pw=new PrintWriter(new BufferedWriter(builder));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}",133,6,"writer:builder,dump:display,",67,0.148786004,Beam
3931,,,106,8,,2220,5.749437372,0
3932,"public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
","public double test(VectorInstance t,VectorInstance i) throws Exception {
  VectorInstance diff=t.subtract(i);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
",45,6,"evaluate:test,x:t,y:i,",503,1.047091385,Beam
3933,,,34,3,,558,1.797864707,0
3934,"public String description(){
  StringBuilder sb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        sb.append(""/"");
      }
      sb.append(leg.toString());
    }
  }
 else {
    sb.append(m_symbol);
    app(sb,m_secType);
    app(sb,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(sb,m_primaryExch);
    }
    app(sb,m_expiry);
    if (m_strike != 0) {
      app(sb,m_strike);
    }
    if (m_right != Right.None) {
      app(sb,m_right);
    }
  }
  return sb.toString();
}","public String content(){
  StringBuilder sb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        sb.append(""/"");
      }
      sb.append(leg.toString());
    }
  }
 else {
    sb.append(m_symbol);
    app(sb,m_secType);
    app(sb,m_exception);
    if (m_exception != null && m_exception.equals(""SMART"") && m_primaryExch != null) {
      app(sb,m_primaryExch);
    }
    app(sb,m_expiry);
    if (m_strike != 0) {
      app(sb,m_strike);
    }
    if (m_right != Right.None) {
      app(sb,m_right);
    }
  }
  return sb.toString();
}",160,12,"description:content,m_exchange:m_exception,",1096,2.398024118,Beam
3935,,,39,5,,1015,4.368415888,0
3936,,,130,6,,1461,7.47316341,0
3937,,,17,2,,71,0.271027195,0
3938,"private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}","private boolean stravers(Tree tree,NodeRef node,int[] operNumbers,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operNumbers != null) {
    operNumbers[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=stravers(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=stravers(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}",551,35,"traverse:stravers,operatorNumber:operNumbers,",572,5.659950419,Beam
3939,,,57,5,,276,0.640275983,0
3940,,,22,2,,205,0.463687336,0
3941,,,39,4,,683,2.355106807,0
3942,,,28,3,,240,0.473320349,0
3943,,,86,8,,1157,2.780500229,0
3944,,,15,2,,264,0.556458251,0
3945,"public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""/"")) {
    resultURL=""file:"" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL=""www."" + simpleURL + "".com"";
    }
    resultURL=""http://"" + simpleURL;
  }
  return resultURL;
}
","public String canonicalize(String completeURL){
  String resultURL=completeURL;
  if (completeURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + completeURL;
  }
 else   if (completeURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + completeURL;
  }
 else   if (completeURL.startsWith(""/"")) {
    resultURL=""file:"" + completeURL;
  }
 else   if (!hasProtocolName(completeURL)) {
    if (isSimpleHostName(completeURL)) {
      completeURL=""www."" + completeURL + "".com"";
    }
    resultURL=""http://"" + completeURL;
  }
  return resultURL;
}
",104,3,"simpleURL:completeURL,",9,0.043751379,Beam
3946,"public Builder addSourceFolder(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
","public Builder addInputFile(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
",21,3,"addSourceFolder:addInputFile,",39,0.093607839,Beam
3947,,,83,6,,918,2.247064281,0
3948,,,45,7,,314,0.663742844,0
3949,,,44,2,,275,0.732410769,0
3950,,,280,12,,2907,10.27309825,0
3951,,,65,5,,344,0.817092156,0
3952,"public boolean load(File fi) throws JmriConfigureXmlException {
  return load(fi,false);
}
","public boolean pack(File xi) throws JmriConfigureXmlException {
  return pack(xi,false);
}
",19,2,"load:pack,fi:xi,",125,0.233333377,Beam
3953,,,84,7,,1290,3.09995741,0
3955,"public int findLine(int offset){
  int line=lineStarts.length - 1;
  while ((lineStarts[line] > offset) && (line > 0)) {
    line--;
  }
  return line;
}","public int FindLINE(int reset){
  int cell=lineStarts.length - 1;
  while ((lineStarts[cell] > reset) && (cell > 0)) {
    cell--;
  }
  return cell;
}",43,4,"findLine:FindLINE,offset:reset,line:cell,",149,0.378355515,Beam
3956,,,82,9,,2671,6.309632051,0
3957,"public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}","public SignatureFakingOracle(final String DocumentFormat) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(DocumentFormat);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}",125,9,"documentString:DocumentFormat,",21,0.039703127,Beam
3958,,,17,2,,194,0.410929139,0
3959,,,27,3,,620,1.780095069,0
3960,,,71,5,,622,1.950845488,0
3961,,,78,2,,171,0.379389044,0
3963,"public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=fileSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
","public static void cleanupAllFiles(FileSystem baseSystem,String BaseUri) throws IOException {
  try {
    if (baseSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=baseSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        baseSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
",83,6,"fileSystem:baseSystem,",5,0.016173172,Beam
3964,"public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
","public static int initializer(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode md,int options){
  int length=md.initializer(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
",87,10,"mode:md,normalize:initializer,",271,0.770069846,Beam
3965,,,69,3,,510,1.271095967,0
3966,,,91,7,,1435,3.05910778,0
3967,,,308,14,,2225,8.286309441,0
3968,"public float realAbsolute(){
  return Math.abs(mLeft);
}
","public float getTangolute(){
  return Math.abs(mLeft);
}
",15,2,"realAbsolute:getTangolute,",7,0.016504014,Beam
3969,,,117,5,,1243,3.575228175,0
3970,,,94,9,,1159,2.366189579,0
3971,,,17,3,,289,0.71220326,0
3972,"void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}","void randBytes(){
  String i=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(i);
    try {
      assertEquals(i,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (i != null && i == b && i.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(i) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=i == null ? null : i.intern();
    }
 else {
      b=StringUtils.cache(i);
    }
    try {
      assertEquals(i,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}",162,6,"testString:randBytes,a:i,",46,0.155934473,Beam
3973,"public static boolean hasVisibleChildren(ActionGroup group,PresentationFactory factory,ActionManager actionManager,PerspectiveManager perspectiveManager){
  ActionEvent event=new ActionEvent(factory.getPresentation(group),actionManager,perspectiveManager);
  for (  Action anAction : group.getChildren(event)) {
    if (anAction == null) {
      Log.error(Utils.class,""Null action found in group "" + group + "", ""+ factory.getPresentation(group));
      continue;
    }
    if (anAction instanceof Separator) {
      continue;
    }
    final Presentation presentation=factory.getPresentation(anAction);
    anAction.update(new ActionEvent(presentation,actionManager,perspectiveManager));
    if (anAction instanceof ActionGroup) {
      ActionGroup childGroup=(ActionGroup)anAction;
      if (childGroup.isPopup()) {
        if (!presentation.isVisible()) {
          continue;
        }
      }
      if (hasVisibleChildren(childGroup,factory,actionManager,perspectiveManager)) {
        return true;
      }
    }
 else     if (presentation.isVisible()) {
      return true;
    }
  }
  return false;
}
","public static boolean hasVplayedChild(ActionGroup view,PresentationFactory refistry,ActionManager activityGroup,PerspectiveManager perspectiveMessage){
  ActionEvent event=new ActionEvent(refistry.getPresentation(view),activityGroup,perspectiveMessage);
  for (  Action annEffect : view.getChildren(event)) {
    if (annEffect == null) {
      Log.error(Utils.class,""Null action found in group "" + view + "", ""+ refistry.getPresentation(view));
      continue;
    }
    if (annEffect instanceof Separator) {
      continue;
    }
    final Presentation presentation=refistry.getPresentation(annEffect);
    annEffect.update(new ActionEvent(presentation,activityGroup,perspectiveMessage));
    if (annEffect instanceof ActionGroup) {
      ActionGroup childGroup=(ActionGroup)annEffect;
      if (childGroup.isPopup()) {
        if (!presentation.isVisible()) {
          continue;
        }
      }
      if (hasVplayedChild(childGroup,refistry,activityGroup,perspectiveMessage)) {
        return true;
      }
    }
 else     if (presentation.isVisible()) {
      return true;
    }
  }
  return false;
}
",193,9,"hasVisibleChildren:hasVplayedChild,group:view,actionManager:activityGroup,factory:refistry,perspectiveManager:perspectiveMessage,anAction:annEffect,",2217,7.445501657,Beam
3974,"private int[] mod(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}","private int[] mod(int[] data,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[data.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(data,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}",155,9,"a:data,",11,0.05098116,Beam
3975,,,57,2,,314,0.939536997,0
3976,"public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
","public String getTSDBMetricsAddress(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
",49,3,"constructTSDBMetricName:getTSDBMetricsAddress,",9,0.018935335,Beam
3977,,,61,4,,803,6.184907862,0
3978,,,95,8,,2746,8.538441714,0
3979,"public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}","public static String decodeASCII(final byte[] key,final int off,final int lan){
  final byte[] b=new byte[lan];
  System.arraycopy(key,off,b,0,lan);
  for (int i=0; i < lan; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",103,7,"len:lan,",29,0.104039053,Beam
3980,,,34,3,,613,1.305017678,0
3981,"public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}","public void moving(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}",102,9,"move:moving,",8,0.030881115,Beam
3982,"public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}","public long stop(String url,OutputStream out,long offset,long scale) throws IOException, InterruptedException {
  if (scale < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(url));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=scale;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}",207,11,"copy:stop,filename:url,size:scale,",915,2.724457804,Beam
3983,,,45,4,,705,2.514416468,0
3984,,,28,2,,249,0.767168466,0
3985,,,153,8,,1419,6.370346769,0
3986,,,77,8,,1764,3.92376703,0
3987,"public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}","public double unsafeSabrVolacement(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}",375,25,"unsafeSabrVolatility:unsafeSabrVolacement,",8,0.050126024,Beam
3988,,,58,5,,1197,8.155090106,0
3989,,,49,5,,631,1.500704483,0
3990,,,122,8,,1887,4.99487046,0
3991,,,20,3,,52,0.087389417,0
3992,"public AbbaLockingDetector startCollecting(){
  thread=new Thread(this,""AbbaLockingDetector"");
  thread.setDaemon(true);
  thread.start();
  return this;
}
","public AbbaLockingDetector startProcessing(){
  loop=new Thread(this,""AbbaLockingDetector"");
  loop.setDaemon(true);
  loop.start();
  return this;
}
",33,2,"startCollecting:startProcessing,thread:loop,",21,0.040797679,Beam
3993,,,103,9,,2865,6.807280207,0
3994,,,101,7,,774,3.084944701,0
3995,,,98,2,,220,0.859390716,0
3996,,,11,1,,27,0.046784465,0
3997,,,119,8,,2790,6.811820598,0
3998,,,80,5,,739,1.891800463,0
3999,,,12,1,,49,0.141609085,0