Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,21,2,,426,1.8992475827535000,0
1,,,64,1,,239,0.8946764707565310,0
3,"public void writeSI32(int value) throws IOException {
  flushBits();
  out.write(value & 0xff);
  out.write(value >> 8);
  out.write(value >> 16);
  out.write(value >> 24);
  bytesWritten+=4;
}","public void writeI64(int values) throws IOException {
  flushBits();
  out.write(values & 0xff);
  out.write(values >> 8);
  out.write(values >> 16);
  out.write(values >> 24);
  cyclesWritten+=4;
}",58,3,"writeSI32:writeI64,bytesWritten:cyclesWritten,value:values,",76,0.47,ALERT
4,,,135,7,,942,10.79489684899650,0
5,,,33,3,,491,5.165520087877910,0
7,"public static double lnGamma(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}","public static double  logCala(double p){
  double x=p, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}",119,5,"alpha:p,lnGamma: logCala,",85,1.1,ALERT
8,"public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}
","public boolean validate(String element,String rule){
  return (element.equalsIgnoreCase(rule));
}
",22,3,"value:element,",37,0.37,ALERT
9,,,24,2,,412,6.545714334646860,0
10,,,97,3,,361,3.8269987384478300,0
12,"private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}","private void checkHeadingsFierology(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution viewResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element uri=iter.next();
  int indexOfReference=getHeaderIndex(uri);
  int CurrentElement;
  int previousIndex=indexOfReference;
  Element elementOfReference=uri;
  Element previousElement=uri;
  while (iter.hasNext()) {
    uri=iter.next();
    CurrentElement=getHeaderIndex(uri);
    if (CurrentElement != -1) {
      if (CurrentElement - previousIndex >= 2) {
        viewResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,uri,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (CurrentElement < indexOfReference) {
        viewResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,uri,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=CurrentElement;
      previousElement=uri;
    }
  }
  testSolutionHandler.addTestSolution(viewResult);
}",213,11,"element:uri,currentIndex:CurrentElement,checkResult:viewResult,checkHeadingsHierarchy:checkHeadingsFierology,",369,7.64,ALERT
13,"public static String byteArrayToHexString(byte[] block,int offset,int length){
  StringBuffer buf=new StringBuffer();
  int len=block.length;
  length=length + offset;
  if ((len < length)) {
    length=len;
  }
  for (int i=0 + offset; i < length; i++) {
    byte2hex(block[i],buf);
    if (i < length - 1) {
      buf.append(':');
    }
  }
  return buf.toString();
}","public static String byteArrayToHexString(byte[] block,int offset,int type){
  StringBuffer buf=new StringBuffer();
  int len=block.type;
  type=type + offset;
  if ((len < type)) {
    type=len;
  }
  for (int i=0 + offset; i < type; i++) {
    byte2hex(block[i],buf);
    if (i < type - 1) {
      buf.append(':');
    }
  }
  return buf.toString();
}",105,7,"length:type,",59,0.64,ALERT
14,,,36,2,,425,4.506916836897530,0
15,"private static int compareLocales(Locale primary,Locale other){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(other.getLanguage())) {
    return 0;
  }
  final String country=primary.getCountry();
  if ((country == null) || !country.equals(other.getCountry())) {
    return 1;
  }
  final String variant=primary.getVariant();
  if ((variant == null) || !variant.equals(other.getVariant())) {
    return 2;
  }
  return 3;
}","private static int compareLocalites(Locale latest,Locale item){
  final Stringtranslationg=latest.getLanguage();
  if (translationg == null) || translationg.equals(item.getLanguage())) {
    return 0;
  }
  final StringCountryy=latest.getCountry();
  if (Countryy == null) || Countryy.equals(item.getCountry())) {
    return 1;
  }
  final Stringopermentt=latest.getVariant();
  if (opermentt == null) || opermentt.equals(item.getVariant())) {
    return 2;
  }
  return 3;
}",121,6,"compareLocales:compareLocalites,primary:latest,other:item,lang:translation,country:Country,variant:operment,",355,4.3,ALERT
16,,,106,4,,588,8.118103233973190,0
17,"private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}","private ResponsePacket executecount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}",186,8,"executeCount:executecount,",36,0.36,ALERT
18,"public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eCoord=e.getCoordinates();
    if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e;
    if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;
  }
  return null;
}","public Edge findEdgeInDifferentPartension(Coordinate p0,Coordinate  p4){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eeConld=e.getCoordinates();
    if (matchInSameDirection(p0, p4,eeConld[0],eeConld[1]))     return e;
    if (matchInSameDirection(p0, p4,eeConld[eeConld.length - 1],eeConld[eeConld.length - 2]))     return e;
  }
  return null;
}",111,6,"findEdgeInSameDirection:findEdgeInDifferentPartension,p1: p4,eCoord:eeConld,",279,6.93,ALERT
19,"@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}
","@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse addApplication(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.addApplication(applicationName,containerId,path);
  return new HttpOk();
}
",101,4,"createDirectory:addApplication,",34,0.35,ALERT
20,,,14,1,,226,2.012309757868450,0
21,"public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}","public void  divide(double total){
  setValue(Math.max(0,getValue() - total));
}",25,2,"damage: divide,value:total,",112,1.3,ALERT
22,"void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}","void set(MemberDefinition field,int or,int left,int lang){
  if (left >= lang) {
    return;
  }
  for (int k=0; k < len; k++) {
    if ((locals[k].field == field) && (locals[k].or == or) && (left <= locals[k].lang)&& (lang >= locals[k].left)) {
      locals[k].left=Math.min(locals[k].left,left);
      locals[k].lang=Math.max(locals[k].lang,lang);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,or,left,lang);
}",195,9,"define:set,slot:or,from:left,to:lang,i:k,",201,4.42,ALERT
23,,,16,2,,429,5.5900552352269500,0
24,,,71,3,,609,11.411902634302800,0
25,"@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
","@Override public boolean addSecondVector(String sistorname,int state){
  OutputSensor outputSensor=new OutputSensor(sistorname);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
",48,4,"sensorName:sistorname,addOutputSensor:addSecondVector,",56,0.7,ALERT
26,"public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
","public IVariable[] extractRobotGlobalVariables(final int stackTrraceID,final Map<String,Object> newvariams){
  final RobotDebugVariablesContext ccurrentParantsContextfindCurrentVariablesContext(stackTrraceID);
  Map<String,IVariablepreviousVariarsAppap=initPreviousVariablesState(currentParantsContext);
  final Map<String,IVariable> nonGlobalVariableantsMap=new LinkedHashMap<>();
  if (previousVariarsApp == null) {
    initNewNonGlobalVariables(newvariams,nonGlobalVariableantsMap);
  }
 else {
    initVariablesComparingWithPreviousState(newvariams,previousVariarsApp,nonGlobalVariableantsMap);
  }
  final LinkedList<IVariable> curcurrentVariablesListeateCurrentVariablesList(nonGlobalVariableantsMap);
  saveCurrentVariablesState(stackTrraceID,currentParantsContext,nonGlobalVariableantsMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
",123,7,"extractRobotDebugVariables:extractRobotGlobalVariables,stackTraceId:stackTrraceID,newVariables:newvariams,currentVariablesContext:currentParantsContext,previousVariablesMap:previousVariarsApp,nonGlobalVariablesMap:nonGlobalVariableantsMap,",347,5.79,ALERT
27,,,156,5,,887,18.96585332552590,0
28,,,79,4,,671,9.768286601702370,0
29,,,53,6,,1155,12.23547701438270,0
30,"public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
","public void delResourcesDir(String clusterName,ResourceType filetype,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,filetype));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
",73,6,"deleteResourceConfig:delResourcesDir,resourceType:filetype,",86,0.85,ALERT
31,"public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}
","public static String formatstring(final URI database,final Charset encocol) throws IOException {
  return IOUtils.formatstring(database.toURL(),Charsets.toCharset(encocol));
}
",36,3,"toString:formatstring,uri:database,encoding:encocol,",91,1.15,ALERT
32,,,21,2,,229,3.802648131052650,0
33,,,16,2,,409,5.154042009512580,0
36,"public static String decode(AbstractMessage msg,Boolean ext,int header){
  if (ext == false) {
    return decode(msg);
  }
  return ""Bootloader Message Type: "" + header;
}
","public static String DECodes(AbstractMessage html,Boolean exp,int token){
  if (exp == false) {
    return DECodes(html);
  }
  return ""Bootloader Message Type: "" + token;
}
",35,4,"decode:DECodes,msg:html,ext:exp,header:token,",211,3.15,ALERT
37,,,53,5,,870,13.008631141980500,0
38,,,42,2,,415,5.367660582065580,0
39,,,34,3,,622,8.906572643915810,0
40,,,73,5,,728,31.44563822746280,0
41,"protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}
","protected void processClickCommand(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processClickCommand(e);
}
",51,2,"processMouseEvent:processClickCommand,",38,0.33,ALERT
42,,,37,3,,561,11.024067910512300,0
43,,,64,5,,762,8.19175640741984,0
44,,,31,3,,623,11.664729642868000,0
45,"private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
","private void onTrackpointEnd(Attributes atrs){
  latitude=atrs.getValue(ATTRIBUTE_Llongitudinaltitude=atrs.getValue(ATTRIBUTE_LAT);
  longitude=atrs.getValue(ATTRIBUTE_Llatitudgitude=atrs.getValue(ATTRIBUTE_LON);
  longitudes=null;
  port=null;
}
",35,6,"onTrackPointStart:onTrackpointEnd,attributes:atrs,latitude:longitudinal,longitude:latitud,altitude:longitudes,time:port,",248,2.9,ALERT
46,"void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
","void  releases(){
  imageLoader.cancelPendingRequests();
  testing=new boolean[noxItems.size()];
}
",24,2,"loading:testing,release: releases,",54,0.64,ALERT
48,,,45,2,,265,2.5987749179204300,0
49,"private void destinationTypeChanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}","private void destinationPathchanged(){
  if (m_Exp == null)   return;
  String fr="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    fr=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int dist=m_destignmentFolder.lastIndexOf("".csv"");
      if (dist > -1) {
        mm_destignmentFoldermm_destignmentFoldersubstring(0,dist) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int dist=m_destignmentFolder.lastIndexOf("".arff"");
      if (dist > -1) {
        mm_destignmentFoldermm_destignmentFoldersubstring(0,dist) + "".csv"";
      }
    }
    fr=m_destignmentFolder;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      intdistd=fr.lastIndexOf("".csv"");
      if (dist > -1) {
        fr=fr.substring(0,dist) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      intdistd=fr.lastIndexOf("".arff"");
      if (dist > -1) {
        fr=fr.substring(0,dist) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destignmentFolder.equals("""")) {
        irl.setOutputFile(new File(m_destignmentFolder));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destignmentFolder.equals("""")) {
        crl.setOutputFile(new File(m_destignmentFolder));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(fr);
  m_Support.firePropertyChange("""",null,null);
}",437,5,"destinationTypeChanged:destinationPathchanged,str:fr,ind:dist,m_destinationFilename:m_destignmentFolder,",288,3.58,ALERT
50,"public Builder addEmail(Email email){
  emails.add(email);
  return this;
}
","public Builder addEmail(Email model){
  emails.add(model);
  return this;
}
",19,2,"email:model,",49,0.41,ALERT
51,,,129,9,,1539,38.61668408711750,0
52,,,117,6,,985,15.289531377951300,0
53,"public void resetCount(){
  msgCnt.set(0);
}","public void updateSum(){
  msgCnt.set(0);
}",14,1,"resetCount:updateSum,",17,0.29,ALERT
54,"public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}","public static int encodeCustomAttributes(Collection<GridClientCacheFlag>  flagset){
  int bits=0;
  if ( flagset.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}",36,3,"flagSet: flagset,encodeCacheFlags:encodeCustomAttributes,",57,0.63,ALERT
55,,,89,4,,743,11.502754998207100,0
56,"public synchronized void schedulePeriodicTask(TimerTask task,long period){
  try {
    m_timer.scheduleAtFixedRate(task,0,period);
  }
 catch (  IllegalStateException ie) {
    m_timer=new Timer();
    m_timer.scheduleAtFixedRate(task,0,period);
  }
}","public synchronized void schedulePerperiodicalTime(TimerTask unit,long page){
  try {
  m_loaderer.scheduleAtFixedRate(unit,0,page);
  }
 catch (  IllegalStateException ie) {
    m_loader=new Timer();
  m_loaderer.scheduleAtFixedRate(unit,0,page);
  }
}",52,4,"schedulePeriodicTask:schedulePerperiodicalTime,task:unit,period:page,m_timer:m_loader,",225,2.77,ALERT
57,"public static long firstFieldOffset(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}","public static long objectObjectName(Class CLazz){
  long MinTime=roundUpTo8(headerSize(CLazz));
  while (CLazz != Object.class) {
    for (    Field s : CLazz.getDeclaredFields()) {
      if ((s.getModifiers() & Modifier.STATIC) == 0) {
        long layout=unsafe.objectFieldOffset(s);
        if (layout < MinTime) {
          MinTime=layout;
        }
      }
    }
    CLazz=CLazz.getSuperclass();
  }
  return MinTime;
}",95,5,"firstFieldOffset:objectObjectName,clazz:CLazz,minSize:MinTime,f:s,offset:layout,",317,6.68,ALERT
58,"private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
","private void orderItems(final JCriteriumTreeNode fileChannel){
  final List<JCriteriumTreeNode> opations=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditionitionally=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> things=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> ccontentfileChannel.content();
  while (content.hasMoreElements()) {
    final JCriteriumTreeNodeyeard=(JCriteriumTreeNode)content.nextElement();
    final ICriteriumTYPEe=year.getCriterium();
    if (TYPE instanceof CConditionCriterium) {
      conditionitionally.add(year);
    }
 else {
      opations.add(year);
    }
  }
  fileChannel.removeAllChildren();
  for (  final JCriteriumTreeNodeyeard : opations) {
    fileChannel.add(year);
    cyearsetParent(fileChannel);
  }
  for (  final JCriteriumTreeNode child : yeartionitionally) {
    fileChannel.add(year);
    cyearsetParent(fileChannel);
  }
  for (  final JCriteriumTreeNode cyear: things) {
    fileChannel.add(year);
    cyearsetParent(fileChannel);
  }
}
",204,8,"sortChildren:orderItems,parentNode:fileChannel,operators:opations,conditions:conditionitionally,minus:things,children:content,child:year,type:TYPE,",411,6.21,ALERT
59,,,17,1,,239,3.26526628335317,0
60,"private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){
  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {
    LSTNode node=(LSTNode)e.nextElement();
    BasicBlock header=node.getHeader();
    BitVector loop=node.getLoop();
    if (loop == null)     continue;
    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {
      BasicBlock bb=in.nextElement();
      if (loop.get(bb.getNumber()))       continue;
      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);
      for (      Register r : liveRegisters) {
        if (r.isSymbolic()) {
          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);
          s.add(r);
        }
      }
    }
    for (int i=0; i < loop.length(); i++) {
      if (loop.get(i)) {
        BasicBlock bb=ir.getBasicBlock(i);
        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (loop.get(dest.getNumber()))           continue;
          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);
          for (          Register r : liveRegisters) {
            if (r.isSymbolic()) {
              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);
              s.add(r);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(ir,live,result);
  return result;
}","private static HashMap<BasicBlockPair,HashSet<Register>> findsplitParts(IR ire,LiveAnalysis val,LSTGraph lsc){
  HashMap<BasicBlockPair,HashSet<Register>> ge=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> ente=lsc.enumerateNodes(); ente.hasMoreElements(); ) {
    LSTNode nodcoreSTNode)ente.nextElement();
    BasicBlock liner=core.getHeader();
    BitVector section=core.getLoop();
    if (section == null)     continue;
    for (Enumeration<BasicBlock>includen=liner.getIn(); include.hasMoreElements(); ) {
      BasicBlock bb=inddude.nextElement();
      if (section.get(dd.getNumber()))       continue;
      HashSet<RegisterliveResnotationsrs=val.getLiveRegistersOnEdgeddb,liner);
      for (      Register r :rgliveResnotations) {
        if (rg.isSymbolic()) {
          HashSet<Regisconfer> s=findOrCreateSplitSet(geddb,liner);
          sconfadd(rg);
        }
      }
    }
    for (int i=0ji i <jisection.length(); ji++) {
      if (section.get(ji)) {
        BasicBlock bddire.getBasicBlock(ji);
        for (Enumeration<BasicBlock> out=dd.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (section.get(dest.getNumber()))           continue;
          HashSet<Register>liveResnotationss=val.getLiveRegistersOnEdge(dd,dest);
          for (          Register r :rgliveResnotations) {
            if (rg.isSymbolic()) {
              HashSet<Registconfr> s=findOrCreateSplitSet(ge,dd,dest);
              sconfadd(rg);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(ire,val,ge);
  return ge;
}",369,17,"findSplitPoints:findsplitParts,ir:ire,live:val,lst:lsc,result:ge,e:ente,node:core,header:liner,loop:section,in:include,bb:dd,liveRegisters:liveResnotations,r:rg,s:conf,i:ji,",1284,84.79,ALERT
61,,,22,1,,240,3.1999385595321700,0
62,"public GTSEncoder(long baseTimestamp){
  this.baseTimestamp=baseTimestamp;
  this.stream=new ByteArrayOutputStream();
  this.wrappingKey=null;
}
","public GTSEncoder(long baseTimestamp){
  this.baseTimestamp=baseTimestamp;
  this.feed=new ByteArrayOutputStream();
  this.wrappingKey=null;
}
",29,3,"stream:feed,",35,0.43,ALERT
64,,,26,2,,418,4.93161571820577,0
65,"public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
","public static void o(Zdiagmat AD){
  o(AD,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
",23,2,"D:AD,",36,0.27,ALERT
66,"public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}","public void insertOrRefresh(final KBucketEntry  newEntity){
  if ( newEntity == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals( newEntity)) {
      existing.mergeInTimestamps( newEntity);
      return;
    }
    if (existing.matchIPorID( newEntity)) {
      DHT.logInfo(""new node "" +  newEntity + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if ( newEntity.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null, newEntity);
      return;
    }
    if (replaceBadEntry( newEntity))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() >  newEntity.getCreationTime() ||  newEntity.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest, newEntity);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket( newEntity);
}",190,5,"newEntry: newEntity,",174,5.1,ALERT
67,,,62,3,,623,8.374965564409890,0
68,"public String requestStatistics(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}","public String  encodeStatus(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}",26,1,"requestStatistics: encodeStatus,",19,0.26,ALERT
69,,,14,1,,228,2.1032874743143700,0
70,"@Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){
  if (!initIfNecessary()) {
    return null;
  }
  File avdFolder;
  try {
    if (currentInfo != null) {
      avdFolder=new File(currentInfo.getDataFolderPath());
    }
 else {
      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error(""Could not create AVD "" + avdName,e);
    return null;
  }
  Dimension resolution=device.getScreenSize(orientation);
  assert resolution != null;
  String skinName=null;
  if (skinFolder == null && isCircular) {
    skinFolder=getRoundSkin(systemImageDescription);
  }
  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {
    skinFolder=null;
  }
  if (skinFolder == null) {
    skinName=String.format(""%dx%d"",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));
  }
  if (orientation == ScreenOrientation.LANDSCAPE) {
    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (currentInfo != null && !avdName.equals(currentInfo.getName())) {
    boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG);
}
","@Nullable public AvdInfo createOrupdateAvad(@Nullable AvdInfo currentlyOrder,@NotNull String avedInfo,@NotNull Device device,@NotNull SystemImageDescription systemMediadescription,@NotNull ScreenOrientation rotation,boolean isAnguous,@Nullable String wdPhoto,@Nullable File kinDir,@NotNull Map<String,String> hardtenanceProperties,boolean createPicShot){
  if (!initIfNecessary()) {
    return null;
  }
  File avrFolder;
  try {
    if (currentlyOrder != null) {
      avdavrFolderw File(currentlyOrder.getDataFolderPath());
    }
 else {
      aavrFolderAvdInfo.getDefaultAvdFolder(myAvdManager,avedInfo,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error(""Could not create AVD "" + avedInfo,e);
    return null;
  }
  Dimensiioion=device.getScreenSize(rotation);
  assert io != null;
  String  skinInfo=null;
  if kinDirr == null && isAnguous) {
    kinDir=getRoundSkin(systemMediadescription);
  }
  if (FileUtil.filesEqual(kinDir,AvdWizardUtils.NO_SKIN)) {
    kinDir=null;
  }
  if (kinDir == null) {
    skinName=String.format(""%dx%d"",Math.round(io.getWidth()),Math.round(io.ge skinInfo)));
  }
  if (rotation == ScreenOrientation.LANDSCAPE) {
    hardtenanceProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (currentlyOrder != null && !avdavedInfouals(currentlyOrder.getName())) {
    boolean success=myAvdManager.moveAvd(currentlyOrder,avdavedInforrentlyOrder.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdavrFolderdavedInfossystemMediadescriptiontSystemImage(),skinkinDirnNa skinInfoPhotorhardtenancePropertiesvdevicetBootProps(),crecreatePicShotlse,currentlyOrder != null,SDK_LOG);
}
",357,15,"createOrUpdateAvd:createOrupdateAvad,currentInfo:currentlyOrder,avdName:avedInfo,systemImageDescription:systemMediadescription,orientation:rotation,isCircular:isAnguous,sdCard:wdPhoto,skinFolder:kinDir,hardwareProperties:hardtenanceProperties,createSnapshot:createPicShot,avdFolder:avrFolder,resolution:io,skinName: skinInfo,",1625,33.82,ALERT
71,"public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}","public static int info(String sql,Object[] args){
  Connection c=null;
  PreparedStatement op=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    op=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(op,order++,o);
      }
    }
    return op.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(op,c);
  }
  return 0;
}",151,7,"update:info,p:op,",111,1.12,ALERT
73,,,44,5,,967,7.895805553595230,0
74,"public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
","public File[]  selectImportNames(final String connection,boolean multiSellection,FileNameExtensionFilter[] fileNameExtensionsFilFilter){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog imporfileDirectoryDialogs.get(connection);
    if (fileDirectory == null) {
      imporfileDirectoryFileDialog(this,connection,FileDialog.LOAD);
      fileDialogs.put(connection,fileDirectory);
    }
    fileDirectory.setVisible(true);
    if (fileDirectory.getFile() != null) {
      return new File[]{new File(fileDirectory.getDirectory(),fileDirectory.getFile())};
    }
  }
 else {
    JFileChooser imporimportClinerChoosers.get(connection);
    if (importCliner == null) {
      importCliner=new JFileChooser(Utils.getCWD());
    importClinerer.setMultiSelectionEnabled(multiSellection);
      for (      FileNameExtensionFilter filfileNameExtentionHandlerfileNameExtensionsFilFilter) {
        importCliner.setFileFilter(fileNameExtentionHandler);
      }
      imporimportClinerialogTitle(connection);
      fileChoosers.put(connection,importCliner);
    }
    intloadVALl=importCliner.showOpenDialog(this);
    if (loadVAL == JFileChooser.APPROVE_OPTION) {
      if (importCliner.isMultiSelectionEnabled()) {
        return importCliner.getSelectedFiles();
      }
 else {
        return new File[]{importCliner.getSelectedFile()};
      }
    }
  }
  return null;
}
",258,8,"selectImportFiles: selectImportNames,title:connection,multipleSelection:multiSellection,fileNameExtensionFilters:fileNameExtensionsFilFilter,importDialog:fileDirectory,importChooser:importCliner,fileNameExtensionFilter:fileNameExtentionHandler,returnVal:loadVAL,",678,9.22,ALERT
75,,,122,4,,592,6.033864823977150,0
76,,,35,2,,430,3.4513256192207300,0
77,"private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}","private void setArea(final Graphics2D G02D,final int n,final int my,final int w,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle syncvoid=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circircleHeightnt)((syncvoid.height - 2) / SQRT2);
  circircleHeightth.max(circircleHeightncvoid.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    G02D.setColor(RING_COLOR_ORANGE);
    G02D.drawOvsyncvoidect.n -syncvoidect.msyncvoidrheightight -circleHeightncvoidrect.w,circleHeight);
    G02D.drawOvsyncvoidectsyncvoidect.msyncvoidrheightight -circleHeightncvoidrect.w,circleHeight);
    G02D.drawOvsyncvoidect.n +syncvoidect.msyncvoidrheightight -circleHeightncvoidrect.w,circleHeight);
    drawShadedOval(G0syncvoidect.n +syncvoidect.msyncvoidrheightight -circleHeightt syncvoidrect.w - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    G02D.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(G0syncvoidect.n -syncvoidect.msyncvoidrheightight -circleHeightt syncvoidrect.w + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      G02D.drawOvsyncvoidect.n -syncvoidect.msyncvoidrheightight -circleHeightncvoidrect.w,circleHeight);
      G02D.drawOvsyncvoidectsyncvoidect.msyncvoidrheightight -circleHeightncvoidrect.w,circleHeight);
      G02D.drawOvsyncvoidect.n +syncvoidect.msyncvoidrheightight -circleHeightncvoidrect.w,circleHeight);
      drawShadedOval(G0syncvoidect.n +syncvoidect.msyncvoidrheightight -circleHeightt syncvoidrect.w - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(G0syncvoidect.n -syncvoidect.msyncvoidrheightight -circleHeightt syncvoidrect.w + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(G0syncvoidect.n -syncvoidect.msyncvoidrheightight -circleHeightt syncvoidrect.w + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(G0syncvoidect.n -syncvoidect.msyncvoidrheightight -circleHeightt syncvoidrect.w + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(G02D,n,my,w,height);
  if (entity.isDefending()) {
    final intsyncvoidrect.syncvoidrect.w - ICON_OFFSET;
    final int sy=my + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(G02D,sx,sy);
    break;
case MISSED:
  missedSprite.draw(G02D,sx,sy);
break;
case HIT:
hitSprite.draw(G02D,sx,sy);
break;
default :
}
}
}",773,10,"drawCombat:setArea,g2d:G02D,x:n,y:my,width:w,srect:syncvoid,",487,4.64,ALERT
78,,,18,1,,208,2.0004489620526600,0
79,,,113,8,,1447,22.016256495316800,0
80,"private double[] parseVector(String s){
  String[] entries=WHITESPACE_PATTERN.split(s);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}","private double[] scanVector(String parts){
  String[] entrsententsTESPACE_PATTERN.split(parts);
  double[] ddictnew double[sentents.length];
  for (int iui0; iui< sentents.length; ui++) {
    try {
      ddictiui=ParseUtil.parseDouble(sentents[ui]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return dict;
}",89,5,"parseVector:scanVector,s:parts,entries:sentents,d:dict,i:ui,",206,2.1,ALERT
81,,,31,3,,647,6.430513302485150,0
82,"@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public int bytes(char obj[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > obj.length) || (len < 0)|| ((off + len) > obj.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,obj,off,len);
  pos+=len;
  return len;
}",150,5,"b:obj,read:bytes,",84,1.19,ALERT
83,"private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String label=request.getParameter(""start"");
  String detail=request.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
","private void start(HttpServletRequest route,HttpServletResponse response) throws IOException {
  String label=route.getParameter(""start"");
  String detail=route.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
",71,7,"request:route,",48,0.48,ALERT
84,,,80,6,,1087,12.514296241601300,0
85,,,57,3,,479,5.2082237839698800,0
86,,,111,10,,1855,30.728955078125,0
87,,,78,5,,1009,25.013949926694200,0
89,"protected String format(Object o){
  return o.toString();
}
","protected String format(Object ó){
  return ó.toString();
}
",16,2,"o:ó,",36,0.27,ALERT
90,"public void addAll(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addAll(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}","public void AddData(Collection<? extends T> queue){
  if (mEventDelegate != null)   mEventDelegate.addData(queue == null ? 0 : queue.size());
  if (queue != null && queue.size() != 0) {
synchronized (mLock) {
      mObjects.AddData(queue);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}",74,2,"addAll:AddData,collection:queue,",93,1.16,ALERT
91,,,22,2,,388,3.548336315155030,0
92,,,33,2,,396,5.816359269618990,0
93,"private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
","private JsonObject constructMessage(Map<String,Object> options,String i,HttpMethod subject,JsonObject payflow){
  JsonObject input=new JsonObject();
  JsonArray  jsonHosts=new JsonArray();
  options.forEach(null);
  input.put(""headers"", jsonHosts);
inputst.put(""uri"",i);
  rinputput(""method"",subject.toString());
  input.put(""payload"",payflow);
  return input;
}
",89,7,"createRequest:constructMessage,headers:options,uri:i,method:subject,payload:payflow,request:input,jsonHeaders: jsonHosts,",469,4.53,ALERT
94,,,24,2,,408,3.7187668919563300,0
95,,,186,9,,1446,18.49760759671530,0
96,,,21,2,,436,4.77459868590037,0
97,"public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
","public void removeField(Column c){
  if (c != null) {
    columns.remove(c);
  }
}
",24,2,"removeColumn:removeField,column:c,",129,1.07,ALERT
98,"public void playMedia(boolean showPlayerWindow){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerWindow(showPlayerWindow);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}","public void loadVideo(boolean  showPlayerWin){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator. showPlayerWin( showPlayerWin);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}",70,4,"showPlayerWindow: showPlayerWin,playMedia:loadVideo,",56,0.4,ALERT
100,"public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
","public boolean isSlave(Object dn){
  Node n=(Node)dn;
  return !n.hasChildNodes();
}
",25,3,"isLeaf:isSlave,nd:dn,node:n,",252,3.07,ALERT
101,,,14,1,,218,2.248066449165340,0
102,"public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){
  join(async.getThread(),timeoutMilliseconds);
}
","public static void pull(final AsyncInvocation<?> asAsync,final long timeoutMilecons){
  pull(asAsync.getThread(),timeoutMilecons);
}
",29,3,"join:pull,async:asAsync,timeoutMilliseconds:timeoutMilecons,",189,2.07,ALERT
103,,,22,3,,620,9.859921193122860,0
104,"public void printBytes(byte[] data,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}","public void addParts(byte[] DATA,int end,int tail) throws IOException {
  int I;
  for (; tail >= 3; tail-=3) {
    int chunk=(((DATA[end] & 0xff) << 16) + ((DATA[end + 1] & 0xff) << 8) + (DATA[end + 2] & 0xff))chartunkint chunk=(((DATA[end] & 0xff) << 16) + ((DATA[end + 1] & 0xff) << 8) + (DATA[end + 2] & 0xff));
    os.write(base64encode(chartunk >> 18));
    os.write(base64encode(chartunk >> 12));
    os.write(base64encode(chartunk >> 6));
    os.write(base64encode(chartunk));
    end+=3;
  }
  if (tail == 2) {
  chartunk chunk=((DATA[end] & 0xff) << 8) + (DATA[end + 1] & 0xff);
    os.write(base64encode(chartunk >> 12));
    os.write(base64encode(chartunk >> 6));
    os.write(base64encode(chartunk));
    os.write('=');
  }
 else   if (tail == 1) {
    ichartunkunk=DATA[end] & 0xff;
    os.write(base64encode(chartunk >> 6));
    os.write(base64encode(chartunk));
    os.write('=');
    os.write('=');
  }
}",266,6,"printBytes:addParts,data:DATA,offset:end,length:tail,i:I,chunk:chartunk,",362,6.34,ALERT
105,,,29,1,,208,3.421699257691700,0
106,,,35,3,,457,6.606881324450180,0
107,,,61,3,,586,13.21390282313030,0
108,,,104,10,,1662,21.20582759777710,0
109,"@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
","@Override public void loadRelations(Task request,Iterable<ObjectId> projectIds,String FieldKey){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(request,FieldKey) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(request,FieldKey);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(request,FieldKey,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(request);
}
",168,8,"fieldName:FieldKey,task:request,addRelations:loadRelations,",96,1.63,ALERT
110,,,16,2,,421,4.436947373549140,0
111,"public static double[] HPDInterval(double proportion,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}","public static double[] HPDInterval(double Progression,double[] x,int[] vertxes){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int ddiff(int)Math.round(Progression * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[vertxes[i]];
    final double actVal=x[vertxes[i + diff - 1]];
    final doublrangege=Math.abs(actVal - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[vertxes[hpdIndex]],x[vertxes[hpdIndex + diff - 1]]};
}",161,11,"proportion:Progression,indices:vertxes,maxValue:actVal,",373,6.13,ALERT
112,,,39,3,,465,4.655553956826530,0
113,,,220,6,,1212,11.714392451445300,0
114,"public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}","public static boolean containIP(int cidRProtixed,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidRProtixed=cidRProtixed >> bitsToShift;
    ip=ip >> bitsToShift;
    cidRProtixed=cidRProtixed << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidRProtixed != ip) {
    matched=false;
  }
  return matched;
}",77,6,"cidrPrefix:cidRProtixed,",56,0.99,ALERT
115,"public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
","public final void defineTransaction(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
",19,2,"delayTask:defineTransaction,",21,0.21,ALERT
116,"private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      viewMap.remove(name);
    }
    contextMap.clear();
  }
}
","private void destroyLoan(Map<String,Object>  viewSet,Map<String,ViewScopeContextObject> viewList){
  ArrayList<String> removalNamesString=new ArrayList<>();
  if (viewList != null) {
    for (    Map.Entry<String,ViewScopeContextObjectnerry : viewList.entrySet()) {
      StrinpassivationPassableKeyId=ner.getKey();
      Contextual coContextUALeanManager.getPassivationCapableBean(passivationPassableKey);
      ViewScopeContextObjecconfigObjectct=ner.getValue();
      CreationalContext creanticObject=beanManager.createCreationalContext(ContextUAL);
      cContextUALdestroy( viewSet.get(configObject.getName()),creanticObject);
      removalNamesString.add(configObject.getName());
    }
    Iterator<String> remremovableNamesmovalNamesString.iterator();
    while (removableNames.hasNext()) {
      String naactionemovableNames.next();
       viewSet.remove(action);
    }
    viewList.clear();
  }
}
",174,11,"destroyBeans:destroyLoan,viewMap: viewSet,contextMap:viewList,removalNameList:removalNamesString,entry:ner,passivationCapableId:passivationPassableKey,contextual:ContextUAL,contextObject:configObject,creationalContext:creanticObject,removalNames:removableNames,name:action,",851,10.05,ALERT
117,,,103,6,,1092,16.477808888753300,0
118,"public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}","public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceNameVersion,String portNetworkId){
  String[] splitedString=sourceInstanceNameVersion.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}",47,4,"sourceInstanceSystemName:sourceInstanceNameVersion,",40,0.66,ALERT
119,"private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}","private void LOADBbinary(DataInputStream form) throws IOException {
  if (form.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (form.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  cocontinuityWeightorm.readInt();
  opoptimalCouplingorm.readInt();
  exextendColesorm.readInt();
  jojoinedModeorm.readInt();
  jojoiningWeightMaskorm.readInt();
  int we weightCountorm.readInt();
  joinweigh=new int[ weightCount];
  for (ini i=0i i < joinweigh.length; i++) {
    jojoinweigh]iform.readInt();
  }
  int ununitsLenorm.readInt();
  units=new DatabaseClusterUnit[unitsLen]housesits=new DatabaseClusterUnit[unitsLen];
  for (int i=0; i < houses.length; i++) {
    unhouses]inew DatabaseClusterUnit(form);
  }
  int ununitMethodsCountorm.readInt();
  uunitTypesnew UnitType[unitMethodsCount];
  for (int i=0; i < unitTypes.length; i++) {
    ununitTypes]inew UnitType(form);
  }
  ststsew SampleSet(form);
  mcmgepcew SampleSet(form);
  int nu numCartersorm.readInt();
  carMap=new HashMap();
  for (int i=0; i <  numCarters; i++) {
    String name=Utilities.getString(form);
    CART cart=CARTImpl.LOADBbinary(form);
    carMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}",316,21,"loadBinary:LOADBbinary,is:form,extendSelections:extendColes,joinMethod:joinedMode,joinWeightShift:joiningWeightMask,weightLength: weightCount,joinWeights:joinweigh,unitsLength:unitsLen,units:houses,unitTypesLength:unitMethodsCount,mcep:mgepc,numCarts: numCarters,cartMap:carMap,",954,8.58,ALERT
120,"public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}
","public void controld(SwtPlatform... columnings){
  controld(Arrays.asList(columnings));
}
",20,2,"platforms:columnings,configs:controld,",55,0.53,ALERT
121,,,38,4,,765,8.053882320721950,0
122,,,22,1,,250,3.530377749602,0
123,,,67,3,,632,5.206557575861610,0
124,,,92,7,,959,16.831201259295100,0
125,"public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}","public static String[] sync(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}",139,7,"split:sync,",59,0.67,ALERT
127,,,148,7,,1197,22.96788459221520,0
128,,,87,3,,517,11.52683136065800,0
129,"public GetBufferedRandomAccessSource(IRandomAccessSource source){
  this.source=source;
  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}","public GetBufferedRandomAccessSource(IRandomAccessSource instance){
  this.instance=instance;
  this.geputLimitew byte[(int)Math.min(Math.max(instance.length() / 4,1),4096)];
  this.GetBufferPart=-1;
  this.GetBufferStop=-1;
}",61,4,"source:instance,getBuffer:putLimit,getBufferStart:GetBufferPart,getBufferEnd:GetBufferStop,",335,4.1,ALERT
130,"public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
","public static byte[] RandomByte(int data){
  byte[] array=new byte[data];
  seededRandom.nextBytes(array);
  return array;
}
",33,3,"randomBytes:RandomByte,size:data,bytes:array,",145,1.53,ALERT
131,"String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException {
  Date source=null;
  if (obj instanceof Date) {
    source=(Date)obj;
  }
 else   if (obj instanceof String) {
    try {
      source=parse((String)obj);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((obj == null) ? ""null"" : obj.toString());
  }
  return format(source,toAppendTo);
}
","String println(Object clone,StringBuffer toAddEndTo) throws IllegalArgumentException {
  Date source=null;
  if (clone instanceof Date) {
    sosourceDate)clone;
  }
 else   if (clone instanceof String) {
    try {
      sosourcearse((String)clone);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((clone == null) ? ""null"" : clone.toString());
  }
  return println(source,toAddEndTo);
}
",108,4,"format:println,obj:clone,toAppendTo:toAddEndTo,",165,8.56,ALERT
132,,,32,2,,215,3.1440227031707800,0
133,,,73,4,,807,13.190689710776000,0
134,,,40,3,,603,7.565757958094280,0
135,"@Override public void processNewLines(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}","@Override public void processNewlocations(String[] posts){
  for (  String line : posts) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}",202,9,"processNewLines:processNewlocations,lines:posts,",143,1.5,ALERT
136,"private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
","private static void addValuesTolist(int StartPosition,int endedPoint){
  for (int i=StartPosition; i < endedPoint; i++) {
    values.add(new Integer(i));
  }
}
",40,4,"startIndex:StartPosition,endIndex:endedPoint,addItemsToList:addValuesTolist,",112,1.02,ALERT
137,"public static String toRegex(String glob,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegex(glob,separator.charAt(0));
}","public static String oReggex(String  globe,String elcer){
  checkNotNull(elcer,""separator must be non-null"");
  checkArgument(elcer.length() == 1,""separator must be a single character: %s"",elcer);
  return oReggex( globe,elcer.charAt(0));
}",48,3,"glob: globe,separator:elcer,toRegex:oReggex,",98,1.39,ALERT
138,,,32,3,,476,4.719341822465260,0
139,,,45,5,,861,8.867475493748980,0
141,,,13,1,,245,3.5025829553604100,0
142,,,15,1,,225,4.351914481321970,0
144,,,68,8,,1562,21.620599512259200,0
145,"public boolean initDialog(){
  log.config("""");
  gbc.anchor=GridBagConstraints.NORTHWEST;
  gbc.weightx=0;
  gbc.weighty=0;
  gbc.gridy=m_line++;
  gbc.gridx=0;
  gbc.gridwidth=1;
  gbc.insets=nullInset;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  centerPanel.add(Box.createVerticalStrut(10),gbc);
  MClient client=MClient.get(Env.getCtx());
  String ASPFilter="""";
  if (client.isUseASP())   ASPFilter=""   AND (   p.AD_Process_Para_ID IN ( "" + ""              SELECT pp.AD_Process_Para_ID "" + ""                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl ""+ ""               WHERE p.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND cl.AD_Client_ID = "" + client.getAD_Client_ID() + ""                 AND cl.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND pp.ASP_Process_ID = p.ASP_Process_ID ""+ ""                 AND pp.IsActive = \'Y\' ""+ ""                 AND p.IsActive = \'Y\' ""+ ""                 AND l.IsActive = \'Y\' ""+ ""                 AND cl.IsActive = \'Y\' ""+ ""                 AND pp.ASP_Status = \'S\') ""+ ""        OR p.AD_Process_Para_ID IN ( ""+ ""              SELECT AD_Process_Para_ID ""+ ""                FROM ASP_ClientException ce ""+ ""               WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""                 AND ce.IsActive = \'Y\' ""+ ""                 AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""                 AND ce.AD_Tab_ID IS NULL ""+ ""                 AND ce.AD_Field_ID IS NULL ""+ ""                 AND ce.ASP_Status = \'S\') ""+ ""       ) ""+ ""   AND p.AD_Process_Para_ID NOT IN ( ""+ ""          SELECT AD_Process_Para_ID ""+ ""            FROM ASP_ClientException ce ""+ ""           WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""             AND ce.IsActive = \'Y\' ""+ ""             AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""             AND ce.AD_Tab_ID IS NULL ""+ ""             AND ce.AD_Field_ID IS NULL ""+ ""             AND ce.ASP_Status = \'H\')"";
  String sql=null;
  if (Env.isBaseLanguage(Env.getCtx(),""AD_Process_Para""))   sql=""SELECT p.Name, p.Description, p.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND p.IsActive=\'Y\' "" + ASPFilter + "" ORDER BY SeqNo"";
 else   sql=""SELECT t.Name, t.Description, t.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND t.AD_Language=\'"" + Env.getAD_Language(Env.getCtx()) + ""\'""+ "" AND p.IsActive=\'Y\' ""+ ASPFilter+ "" ORDER BY SeqNo"";
  boolean hasFields=false;
  try {
    PreparedStatement pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,m_processInfo.getAD_Process_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      hasFields=true;
      createField(rs);
    }
    rs.close();
    pstmt.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
  }
  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,""View & Model vector size is different"");
  if (hasFields) {
    gbc.gridy=m_line++;
    centerPanel.add(Box.createVerticalStrut(10),gbc);
    gbc.gridx=3;
    centerPanel.add(Box.createHorizontalStrut(12),gbc);
    AEnv.positionCenterWindow(m_frame,this);
  }
 else   dispose();
  return hasFields;
}","public boolean initDialog(){
  log.config("""");
  gcf.anchor=GridBagConstraints.NORTHWEST;
  gcf.weightx=0;
  gcf.weighty=0;
  gcf.gridy=m_line++;
  gcf.gridx=0;
  gcf.gridwidth=1;
  gcf.insets=nullInset;
  gcf.fill=GridBagConstraints.HORIZONTAL;
  centerPanel.add(Box.createVerticalStrut(10),gcf);
  MClient client=MClient.get(Env.getCtx());
  String ASPFilter="""";
  if (client.isUseASP())   ASPFilter=""   AND (   p.AD_Process_Para_ID IN ( "" + ""              SELECT pp.AD_Process_Para_ID "" + ""                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl ""+ ""               WHERE p.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND cl.AD_Client_ID = "" + client.getAD_Client_ID() + ""                 AND cl.ASP_Level_ID = l.ASP_Level_ID ""+ ""                 AND pp.ASP_Process_ID = p.ASP_Process_ID ""+ ""                 AND pp.IsActive = \'Y\' ""+ ""                 AND p.IsActive = \'Y\' ""+ ""                 AND l.IsActive = \'Y\' ""+ ""                 AND cl.IsActive = \'Y\' ""+ ""                 AND pp.ASP_Status = \'S\') ""+ ""        OR p.AD_Process_Para_ID IN ( ""+ ""              SELECT AD_Process_Para_ID ""+ ""                FROM ASP_ClientException ce ""+ ""               WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""                 AND ce.IsActive = \'Y\' ""+ ""                 AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""                 AND ce.AD_Tab_ID IS NULL ""+ ""                 AND ce.AD_Field_ID IS NULL ""+ ""                 AND ce.ASP_Status = \'S\') ""+ ""       ) ""+ ""   AND p.AD_Process_Para_ID NOT IN ( ""+ ""          SELECT AD_Process_Para_ID ""+ ""            FROM ASP_ClientException ce ""+ ""           WHERE ce.AD_Client_ID = ""+ client.getAD_Client_ID()+ ""             AND ce.IsActive = \'Y\' ""+ ""             AND ce.AD_Process_Para_ID IS NOT NULL ""+ ""             AND ce.AD_Tab_ID IS NULL ""+ ""             AND ce.AD_Field_ID IS NULL ""+ ""             AND ce.ASP_Status = \'H\')"";
  String sql=null;
  if (Env.isBaseLanguage(Env.getCtx(),""AD_Process_Para""))   sql=""SELECT p.Name, p.Description, p.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND p.IsActive=\'Y\' "" + ASPFilter + "" ORDER BY SeqNo"";
 else   sql=""SELECT t.Name, t.Description, t.Help, "" + ""p.AD_Reference_ID, p.AD_Process_Para_ID, "" + ""p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, ""+ ""p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, ""+ ""p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode ""+ ""FROM AD_Process_Para p""+ "" INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)""+ "" LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) ""+ ""WHERE p.AD_Process_ID=?""+ "" AND t.AD_Language=\'"" + Env.getAD_Language(Env.getCtx()) + ""\'""+ "" AND p.IsActive=\'Y\' ""+ ASPFilter+ "" ORDER BY SeqNo"";
  boolean hasFields=false;
  try {
    PreparedStatement pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,m_processInfo.getAD_Process_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      hasFields=true;
      createField(rs);
    }
    rs.close();
    pstmt.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
  }
  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,""View & Model vector size is different"");
  if (hasFields) {
    gcf.gridy=m_line++;
    centerPanel.add(Box.createVerticalStrut(10),gcf);
    gcf.gridx=3;
    centerPanel.add(Box.createHorizontalStrut(12),gcf);
    AEnv.positionCenterWindow(m_frame,this);
  }
 else   dispose();
  return hasFields;
}",482,13,"gbc:gcf,",67,0.65,ALERT
146,,,112,6,,1006,12.756415836016300,0
147,"public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}","public static boolean aqualf(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.aqualf(field1,field2);
  }
}",55,3,"equals:aqualf,",40,0.68,ALERT
148,"final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void println(char conv){
  Writer path=this.path;
  if (path == null)   return;
  try {
    path.write(conv);
    path.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",72,3,"out:path,v:conv,",70,0.64,ALERT
149,"protected void cutSelectedBean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
","protected void cutSelectedMean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    selectedBeean=new ByteArrayOutputStream();
    ObjectOutputStream oots=new ObjectOutputStream(selectedBeean);
    oots.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
",165,4,"serBean:selectedBeean,oos:oots,cutSelectedBean:cutSelectedMean,",91,1.47,ALERT
150,"public boolean isLeaf(){
  return children == null || children.isEmpty();
}
","public boolean isBlave(){
  return children == null || children.isEmpty();
}
",18,1,"isLeaf:isBlave,",25,0.3,ALERT
151,,,25,2,,443,4.360702296098070,0
152,"public boolean isNumericalRun(String pin){
  final int len=pin.length();
  int prevDigit=Character.digit(pin.charAt(0),10);
  int prevDiff=Integer.MAX_VALUE;
  boolean isRun=true;
  for (int i=1; isRun && i < len; i++) {
    final int digit=Character.digit(pin.charAt(i),10);
    final int diff=digit - prevDigit;
    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {
      isRun=false;
    }
    prevDiff=diff;
    prevDigit=digit;
  }
  return isRun;
}","public boolean isNumeristicRunning(String isin){
  final int lLenisin.length();
  int pviousDigdigitCharacter.didentisin.charAt(0),10);
  int PrevDist=Integer.MAX_VALUE;
  boolean isoRunning=true;
  for (int count=1; isRun &&isoRunningt < Len; count++) {
    final int digitidentacter.digitident.charAt(count),10);
    final int diffinciidentiousDigdigit;
    if (PrevDist != Integer.MAX_VALUE && inc != PrevDist) {
      isoRunning=false;
    }
    PrevDist=inc;
    viousDigdigit=ident;
  }
  return isoRunning;
}",121,9,"isNumericalRun:isNumeristicRunning,pin:isin,len:Len,prevDigit:viousDigdigit,prevDiff:PrevDist,i:count,isRun:isoRunning,digit:ident,diff:inc,",869,11.68,ALERT
153,"public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}","public final ArrayList<Move> removeNonMinimize(Position  position,ArrayList<Move> Movelist){
  ArrayList<Move> optimalMotions=new ArrayList<Move>();
  ArrayList<Move> illegalPoved=new ArrayList<Move>();
  final int MCE0=100000;
  int BestStyle=-1000000;
  UndoInfo  su=new UndoInfo();
  for (  Move k : Movelist) {
     position.makeMove(mk su);
    int pliesTpliesTODrawmax(100 -  position.halfMoveClock,1);
    GtbProbeResult res=gtverobe( position);
     position.unMakeMove(mk su);
    if (ver.result == GtbProbeResult.UNKNOWN) {
      illegalPoved.add(k);
    }
 else {
      int wColor;
      if (ver.result == GtbProbeResult.WMATE) {
        if vers.pliesToMate <=pliesTODraww)        wColore=MCE0 - ver.pliesToMate;
 else         wColor=1;
      }
 else       if (ver.result == GtbProbeResult.BMATE) {
        if vers.pliesToMate <=pliesTODraww)        wColore=-(MCE0 - ver.pliesToMate);
 else         wColor=-1;
      }
 else {
        wColor=0;
      }
      int score=ranktion.whiteMove ? wColor : -wColor;
      if (rank > BestStyle) {
        optimalMotions.clear();
        optimalMotions.add(k);
        BestStyle=rank;
      }
 else       if (rank == BestStyle) {
        optimalMotions.add(k);
      }
 else {
      }
    }
  }
  for (  Move m k unillegalPoved  optimalMotions.add(k);
  return (optimalMotions.size() < Movelist.size()) ? optimalMotions : null;
}",310,13,"removeNonOptimal:removeNonMinimize,pos: position,moveList:Movelist,optimalMoves:optimalMotions,unknownMoves:illegalPoved,MATE0:MCE0,bestScore:BestStyle,ui: su,m:k,pliesToDraw:pliesTODraw,res:ver,wScore:wColor,score:rank,",990,16.98,ALERT
154,,,23,2,,436,4.464170948664350,0
157,"public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}","public static void drawVerticalMarginSignicators(Graphics2D g,String font,int loc,int y3,int dy4){
  if (y3 > dy4) {
    int temp=y3;
    y3=dy4;
    dy4=temp;
  }
  if (font == null) {
    g.drawLine(loc,y3,loc,dy4);
    g.drawLine(loc,y3,loc - CONNECTION_ARROW_SIZE,y3 + CONNECTION_ARROW_SIZE);
    g.drawLine(loc,y3,loc + CONNECTION_ARROW_SIZE,y3 + CONNECTION_ARROW_SIZE);
    g.drawLine(loc,dy4,loc - CONNECTION_ARROW_SIZE,dy4 - CONNECTION_ARROW_SIZE);
    g.drawLine(loc,dy4,loc + CONNECTION_ARROW_SIZE,dy4 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(font,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((dy4 - y3) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(loc,y3,loc,dy4);
    g.drawString(font,(int)(loc - bounds.getWidth() / 2) + offset,dy4 - h - padding);
    g.drawLine(loc - CONNECTION_ARROW_SIZE,y3,loc + CONNECTION_ARROW_SIZE,y3);
    g.drawLine(loc - CONNECTION_ARROW_SIZE,dy4,loc + CONNECTION_ARROW_SIZE,dy4);
  }
 else {
    g.drawLine(loc,y3,loc,y3 + h);
    g.drawLine(loc,dy4 - h,loc,dy4);
    g.drawString(font,(int)(loc - bounds.getWidth() / 2),dy4 - h - padding);
    g.drawLine(loc,y3,loc - CONNECTION_ARROW_SIZE,y3 + CONNECTION_ARROW_SIZE);
    g.drawLine(loc,y3,loc + CONNECTION_ARROW_SIZE,y3 + CONNECTION_ARROW_SIZE);
    g.drawLine(loc,dy4,loc - CONNECTION_ARROW_SIZE,dy4 - CONNECTION_ARROW_SIZE);
    g.drawLine(loc,dy4,loc + CONNECTION_ARROW_SIZE,dy4 - CONNECTION_ARROW_SIZE);
  }
}",430,14,"x:loc,y2:dy4,y1:y3,text:font,drawVerticalMarginIndicator:drawVerticalMarginSignicators,",538,8.29,ALERT
158,"public void start(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug(""Starting Task: "" + toString());
    startTime=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}
","public void art(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug(""Starting Task: "" + toString());
    startTime=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}
",77,2,"start:art,",32,0.27,ALERT
159,,,17,1,,234,2.7888617753982500,0
160,"@Override public void readExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}
","@Override public void handleIntern(ObjectInput session) throws IOException {
  path=IgfsUtils.readPath(session);
  blockSize=session.readInt();
  grpBlockSize=session.readLong();
  len=session.readLong();
  props=U.readStringMap(session);
  accessTime=session.readLong();
  modificationTime=session.readLong();
  flags=session.readByte();
}
",79,10,"in:session,readExternal:handleIntern,",64,1.37,ALERT
161,,,20,1,,215,2.6012632528940800,0
162,,,131,8,,1522,15.299214736620600,0
163,,,73,8,,1411,17.330719101429000,0
164,,,15,1,,231,2.564090863863630,0
165,,,45,7,,1294,17.755876406033800,0
166,,,31,2,,266,3.9575106143951400,0
167,,,163,6,,1195,12.526888843377400,0
168,"protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
","protected void readVersion(String bElement){
  try {
    value=Byte.parseByte(bElement.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
",36,3,"sValue:bElement,loadValue:readVersion,",42,0.33,ALERT
170,"public void add(int index,int element){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=element;
  size++;
}","public void add(int eight,int key){
  checkRangeIncludingEndpoint(eight);
  ensureCapacity(speed + 1);
  int numtomove=speed - eight;
  System.arraycopy(function,eight,function,eight + 1,numtomove);
  function[eight]=key;
  speed++;
}",58,6,"index:eight,array:function,size:speed,element:key,",140,2.1,ALERT
171,,,149,7,,859,9.256458957990010,0
172,,,50,4,,385,15.331089715162900,0
173,,,161,7,,1225,20.282939847310400,0
174,"public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
","public static String toWorkpl(final Config  toconvert,Boolean prettyHsl) throws JAXBException, IOException {
  String replyEl="""";
  try (StringWriter writer=new StringWriter()){
    toWorkpl( toconvert,writer,prettyHsl);
    replyEl=writer.toString();
    return replyEl;
  }
 }
",55,4,"toXml:toWorkpl,retVal:replyEl,prettyXml:prettyHsl,toConvert: toconvert,",123,1.22,ALERT
175,"@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);
}
","@Override public boolean restagto(Selector objects,Selector DestObj,int posts) throws UiObjectNotFoundException, NotImplementedException {
  return restagto(device.findObject(objects.toUiSelector()),DestObj,posts);
}
",40,4,"dragTo:restagto,obj:objects,destObj:DestObj,steps:posts,",375,4.46,ALERT
176,"QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
","QName toqWord(Class<?>  outputPackage){
  String internalPART;
  String namespaceCRI;
  if ( outputPackage.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement ann annationutputPackage.getAnnotation(XmlRootElement.class);
    internalPART= annation.name();
    namespaceCRI= annation.namespace();
  }
 else   if ( outputPackage.isAnnotationPresent(XmlType.class)) {
    XmlType ann annationutputPackage.getAnnotation(XmlType.class);
    internalPART= annation.name();
    namespaceCRI= annation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" +  outputPackage + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(internalPART)) {
    locinternalPARTassUtils.getShortNameAsProperty( outputPackage);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceCRI)) {
    Package outoutputclassSourceutputPackage.getPackage();
    if (outputclassSource != null && outputclassSource.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema  annation=outputclassSource.getAnnotation(XmlSchema.class);
      namespaceCRI= annation.namespace();
    }
 else {
      namespaceCRI=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namnamespaceCRIternalPART);
}
",211,6,"toQName:toqWord,outputClass: outputPackage,localPart:internalPART,namespaceUri:namespaceCRI,annotation: annation,outputClassPackage:outputclassSource,",820,9.36,ALERT
177,,,74,1,,241,2.5874863227208500,0
178,,,412,17,,3082,32.587320097287500,0
179,,,64,3,,585,6.33196945587794,0
181,,,17,2,,438,4.280352584520980,0
182,,,134,8,,1497,15.872087307771000,0
183,,,18,2,,238,2.766744148731230,0
184,,,34,2,,364,3.331041920185090,0
185,"public void testEmptyOrNullBlob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}","public void  insertEmptyOrNullBLore() throws Exception {
  try {
    PreparedStatement  stor=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
       stor.setInt(1,3);
       stor.setBytes(2,new byte[0]);
      int iInsertedNumber stor.executeUpdate();
      assertTrue(""Should insert one row."",InsertedNumber == 1);
       stor.setInt(1,4);
       stor.setNull(2,Types.BINARY);
      iInsertedNumber stor.executeUpdate();
      assertTrue(""Should insert one row."",InsertedNumber == 1);
    }
  finally {
       stor.close();
    }
     stor=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
     stor.setInt(1,3);
    try {
      ResultSet rts stor.executeQuery();
      assertTrue(""Should select at least one row."",ts.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(ts.getBytes(1),new byte[0]));
      ts.close();
       stor.setInt(1,4);
      rts stor.executeQuery();
      assertTrue(""Should select at least one row."",ts.next());
      assertTrue(""Result should byte[0]"",ts.getObject(1) == null);
      ts.close();
    }
  finally {
       stor.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}",254,4,"testEmptyOrNullBlob: insertEmptyOrNullBLore,stmt: stor,insertedCount:InsertedNumber,rs:ts,",317,3.14,ALERT
186,"protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}","protected double computeStpMax(Instance ctx,Matrix k) throws Exception {
  doubleijkarmaa=m_kernel.eval(-1,-1,ctx) + m_deltaSquared;
  double f=0;
  int net=m_L.length;
  for (int i=e; i e net; e++) {
    double tmp=0;
    for (int j=m; j m net; m++) {
      tmp-=k.get(m,0) * (e > m ? m_L[e][m] : m_L[m][e]);
    }
    f+=tmp * k.get(e,0);
  }
  double ssma=m_delta;
  if (ijkarma > f) {
    sissmaath.sqrt(ijkarma - f);
  }
  return ssma;
}",154,10,"computeStdDev:computeStpMax,inst:ctx,kappa:ijkarma,s:f,n:net,i:e,t:tmp,j:m,sigma:ssma,",537,4.98,ALERT
187,"protected static void postProcessFlood(IHex[] hexSet,int modifier){
  int n;
  IHex field;
  ITerrainFactory f=Terrains.getTerrainFactory();
  for (n=0; n < hexSet.length; n++) {
    field=hexSet[n];
    int elev=field.getLevel() - modifier;
    if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) {
      field.addTerrain(f.createTerrain(Terrains.SWAMP,1));
    }
 else     if (elev < 0) {
      if (elev < -4) {
        elev=-4;
      }
      field.removeAllTerrains();
      field.addTerrain(f.createTerrain(Terrains.WATER,-elev));
      field.setLevel(modifier);
    }
  }
}","protected static void postProcessFlood(IHex[] hexSet,int modifier){
  int n;
  IHex source;
  ITerrainFactory f=Terrains.getTerrainFactory();
  for (n=0; n < hexSet.length; n++) {
    source=hexSet[n];
    int elev=source.getLevel() - modifier;
    if ((elev == 0) && !(source.containsTerrain(Terrains.WATER)) && !(source.containsTerrain(Terrains.PAVEMENT))) {
      source.addTerrain(f.createTerrain(Terrains.SWAMP,1));
    }
 else     if (elev < 0) {
      if (elev < -4) {
        elev=-4;
      }
      source.removeAllTerrains();
      source.addTerrain(f.createTerrain(Terrains.WATER,-elev));
      source.setLevel(modifier);
    }
  }
}",168,7,"field:source,",62,0.83,ALERT
188,,,49,4,,811,5.576628716786700,0
189,"public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}","public void o(InputStream get,OutputStream oos,SerializerFactory serializerInterface) throws Exception {
  boolean  isDEBUG=false;
  if (isDebugInvoke()) {
     isDEBUG=true;
    PrintWriter dfge=createDebugPrintWriter();
    HessianDebugInputStream dIdIsew HessianDebugInputStream(get,dfge);
    dIs.startTop2();
    get=dIs;
    HessianDebugOutputStream dODOsew HessianDebugOutputStream(oos,dfge);
    DOs.startTop2();
    oos=DOs;
  }
  HessianInputFactory.HeaderType hheader_inputFactory.readHeader(get);
  AbstractHessianInput pc;
  AbstractHessianOutput data;
switch (header) {
case CALL_1_REPLY_1:
    ipc_hessianFactory.createHessianInput(get);
  odata_hessianFactory.createHessianOutput(oos);
break;
case CALL_1_REPLY_2:
ipc_hessianFactory.createHessianInput(get);
odata_hessianFactory.createHessian2Output(oos);
break;
case HESSIAN_2:
ipc_hessianFactory.createHessian2Input(get);
pc.readCall();
odata_hessianFactory.createHessian2Output(oos);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerInterface != null) {
inpcetSerializerFactory(serializerInterface);
oudataetSerializerFactory(serializerInterface);
}
try {
o(_service,pc,data);
}
  finally {
pc.close();
data.close();
if (i isDEBUG oos.close();
}
}",252,11,"invoke:o,is:get,os:oos,serializerFactory:serializerInterface,dbg:dfge,dOs:DOs,in:pc,out:data,isDebug: isDEBUG,",706,8.77,ALERT
190,"@NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){
  if (isAssignable(target,source))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target);
  if (directConversion.isPresent())   return directConversion;
  Optional<TypeConversion> arrayConversion=findArrayConversion(source,target);
  if (arrayConversion.isPresent())   return arrayConversion;
  Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target);
  if (optionalConversion.isPresent())   return optionalConversion;
  Optional<TypeConversion> enumConversion=findEnumConversion(target);
  if (enumConversion.isPresent())   return enumConversion;
  return Optional.empty();
}
","@NotNull private Optional<TypeConversion> findConversionFormDbValues(@NotNull Type use,@NotNull Type range){
  if (isAssignabrangeget,use))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversiodirectCvertion=typeConversionRegistry.findConversionFormDbValues(use,range);
  if (directCvert.isPresent())   return directCvert;
  Optional<TypeConversiarrayAcptionsion=findArrayConversion(use,range);
  if (arrayAcption.isPresent())   return arrayAcption;
  Optional<TypeConversioptionalCoptionsion=findOptionalConversion(use,range);
  if (optionalCoption.isPresent())   return optionalCoption;
  Optional<TypeConversion>enumConversionn=findEnumConversion(range);
  if (enumConversion.isPresent())   return enumConversion;
  return Optional.empty();
}
",145,7,"findConversionFromDbValue:findConversionFormDbValues,source:use,target:range,directConversion:directCvert,arrayConversion:arrayAcption,optionalConversion:optionalCoption,",381,5.41,ALERT
191,,,26,3,,452,4.261313410600030,0
192,,,28,2,,217,2.40120237270991,0
193,,,84,3,,590,7.256288246313730,0
194,,,23,2,,209,2.550979725519820,0
195,,,70,1,,216,1.908116602897640,0
196,"public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}","public void optimize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.optimize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.optimize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.optimize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.optimize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.optimize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.optimize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}",438,17,"initialize:optimize,",129,1.21,ALERT
197,,,91,6,,739,10.698280270894400,0
199,"public static String parseDiskString(String input){
  String delims=""[ ]+"";
  String[] tokens=input.split(delims);
  return tokens[0];
}","public static String parseTempBytes(String list){
  String elps=""[ ]+"";
  StringTaketsens=list.split(elps);
  return Takets[0];
}",33,4,"parseDiskString:parseTempBytes,input:list,delims:elps,tokens:Takets,",204,2.94,ALERT
200,"public void append(String string){
  for (int i=0; i < string.length(); i++)   append(string.charAt(i));
}","public void post(String uri){
  for (int i=0; i < uri.length(); i++)   post(uri.charAt(i));
}",37,3,"append:post,string:uri,",71,0.72,ALERT
201,,,18,2,,431,6.204763110478720,0
202,,,37,2,,428,3.158035882314050,0
203,"public void recordBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordBeginning(mModuleName,mRunId);
}
","public void replaceBeginning(){
  final String doc=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(doc);
  Diagnostic.developerLog(doc);
  mClient.replaceBeginning(mModuleName,mRunId);
}
",42,2,"recordBeginning:replaceBeginning,msg:doc,",282,3.01,ALERT
204,"public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String addArray(ByteArrayTag attr){
  StringBuilder driver=new StringBuilder();
  driver.append(ARRAY_START);
  boolean start=true;
  for (  byte value : attr.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      driver.append(ELEMENT_SEPERATOR);
    }
    driver.append(addArray(b));
  }
  driver.append(ARRAY_END);
  return driver.toString();
}
",96,6,"tag:attr,builder:driver,fromTag:addArray,",196,1.66,ALERT
205,"public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}","public String get(Object roman,Object  ommax){
  int mpoFunctionHandler.getInt(roman);
  int macaunctionHandler.getInt( ommax);
  if cax > po) {
    return Integer.toString(rnd.nextIncaax - po) + po);
  }
  return ""0"";
}",60,5,"random:get,omin:roman,omax: ommax,min:po,max:ca,",274,2.37,ALERT
206,"public void add(String methodName,List<Expression> parameters){
  chain.add(new DotExpressionItem(methodName,parameters,false));
}
","public void empty(String functionname,List<Expression> paramparams){
  chain.empty(new DotExpressionItem(functionname,paramparams,false));
}
",30,3,"add:empty,methodName:functionname,parameters:paramparams,",141,1.38,ALERT
207,,,38,2,,226,3.5181777636210100,0
208,"public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}","public boolean equALSElse(){
  return (Double.doubleToLongBits(value) == 0);
}",19,1,"equalsDefault:equALSElse,",17,0.18,ALERT
209,"@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
","@Override public List<String> listKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
",78,4,"allKeys:listKeys,",28,0.26,ALERT
210,"@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
","@Override public void do_after_propomations(){
  for (  HeapInsIntervalManager vim : new_pkgs.values()) {
    vim.flush();
  }
  new_pkgs=new HashMap<AllocNode,HeapInsIntervalManager>();
}
",40,3,"do_after_propagation:do_after_propomations,im:vim,new_pts:new_pkgs,",249,2.23,ALERT
211,"public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
","public ResourcesPoet newFloat(String filename,String values){
  Element bill=document.createElement(""integer"");
  boolbillAttribute(""name"",filename);
  bbillappendChild(document.createTextNode(String.valueOf(values)));
  resourceElement.appendChild(bill);
  return this;
}
",58,4,"addInteger:newFloat,name:filename,value:values,bool:bill,",144,0.95,ALERT
212,,,97,5,,996,6.417069542407990,0
213,"public void remove(IAdaptable a){
  children.remove(a);
}
","public void br(IAdaptable a){
  children.br(a);
}
",16,2,"remove:br,",36,0.35,ALERT
214,,,223,6,,1051,10.535910177230800,0
215,"public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
","public static void upgradeClientConfig(SSOToken spoToken,String containerType,String  instanceInfo,Map<String,String> upsdatedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig scmsgetServerConfig(spoToken,containerType);
  if (cms != null) {
    Map mblockcms.getAttributes();
    block.remove(ATTR_PARENT_SITE_ID);
    Set NewMap=getPropertiesSet(upsdatedValues);
    block.put(ATTR_SERVER_CONFIG,NewMap);
    cms.setAttributes(block);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
",102,8,"upgradeServerInstance:upgradeClientConfig,ssoToken:spoToken,instanceName:containerType,instanceId: instanceInfo,upgradedValues:upsdatedValues,sc:cms,map:block,newSet:NewMap,",625,6.55,ALERT
216,"protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
","protected void deleteInstanceVertifier(AtlasVertex instanceverite,DataTypes.TypeCategory  typecategory,boolean support) throws AtlasException {
switch ( typecategory) {
case STRUCT:
case TRAIT:
    deleteInstanceVertifier(instanceverite,support);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceverite));
break;
default :
throw new IllegalStateException(""Type category "" +  typecategory + "" not handled"");
}
}
",68,4,"deleteTypeVertex:deleteInstanceVertifier,instanceVertex:instanceverite,typeCategory: typecategory,force:support,",389,3.67,ALERT
217,"private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> postIndexizedLLR(final long Offset,final ITranslationEnvironment fleet,final List<ReilInstruction> injectutions,final String registerEdgeName3,final String registerFileValuesB,final String immediateNodeInfo){
  final Sstringddress=fleet.getNextVariableString();
  final S tmpBar1mpVar1=fleet.getNextVariableString();
  final StmpVar4mpVar2=fleet.getNextVariableString();
  final Sfind index=fleet.getNextVariableString();
  long formOffset=Offset;
  injectutions.add(ReilHelpers.createStformOffsetet++,dw,registerEdgeName3,dw,string));
  injectutions.add(ReilHelpers.createBsh(bformOffset+,dw,registerFileValuesB,dw,""-"" + immediateNodeInfo,qw, tmpBar1));
  injectutions.add(ReilHelpers.createAnd(formOffset++,qw, tmpBar1,dw,dWordBitMask,dw,find));
  injectutions.add(ReilHelpers.createAdformOffsetet++,dw,registerEdgeName3,dw,find,dw,tmpVar4));
  injectutions.add(ReilHelpers.createAndformOffsett++,dwtmpVar42,dw,dWordBitMask,dw,registerEdgeName3));
  return new Pair<String,String>strings,registerEdgeName3);
}",221,12,"postIndexedLSR:postIndexizedLLR,offset:Offset,environment:fleet,instructions:injectutions,registerNodeValue1:registerEdgeName3,registerNodeValue2:registerFileValuesB,immediateNodeValue:immediateNodeInfo,address:string,tmpVar1: tmpBar1,tmpVar2:tmpVar4,index:find,baseOffset:formOffset,",1349,70.8,ALERT
218,,,21,1,,209,2.132046365737920,0
219,"public void forward(HttpServerRequest request){
  forward(request,null);
}
","public void wards(HttpServerRequest xml){
  wards(xml,null);
}
",16,2,"forward:wards,request:xml,",246,2.97,ALERT
220,"protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
","protected boolean matchesFilter(final String input,final String[] route){
  for (  final String match : route) {
    if (!input.contains(match))     return false;
  }
  return true;
}
",42,4,"filter:route,",39,0.4,ALERT
221,"public CompletableFuture<NewFile> run(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}","public CompletableFuture<NewFile> boot(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",keys.size());
  CompletableFuture<NewFile> FileCreoration=new CompletableFuture<>();
  final List<TSData> Fjpfiles=this.keys;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(FileCreoration);
  }
  this.keys=new LinkedList<>();
  return FileCreoration;
}",85,4,"run:boot,fileCreation:FileCreoration,fjpFiles:Fjpfiles,files:keys,",327,3.29,ALERT
222,"final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void echo(double k){
  Writer n=this.n;
  if (n == null)   return;
  print(k);
  try {
    n.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,3,"println:echo,v:k,out:n,",322,2.64,ALERT
223,,,42,4,,657,7.045336544513700,0
224,"protected boolean isServerTransaction(){
  return this instanceof SIPServerTransaction;
}
","protected boolean ISClientConnection(){
  return this instanceof SIPServerTransaction;
}
",12,1,"isServerTransaction:ISClientConnection,",26,0.21,ALERT
225,,,16,2,,399,4.467730442682900,0
226,"public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){
  this(streamOne);
  add(streamTwo);
  outerJoinQualifiers.add(outerJoinQualifier);
}
","public FromClause(Stream stream1,OuterJoinQualifier outerJoinedQuantification,Stream StreamOne){
  this(stream1);
  add(StreamOne);
  outerJoinQualifiers.add(outerJoinedQuantification);
}",31,3,"streamOne:stream1,outerJoinQualifier:outerJoinedQuantification,streamTwo:StreamOne,",230,4.14,ALERT
227,,,113,3,,494,7.94025073448817,0
228,,,42,2,,387,3.554515016078950,0
229,,,291,16,,2945,79.87835521698000,0
230,,,45,3,,608,8.275334735711420,0
231,,,31,3,,485,6.834832104047140,0
232,,,20,1,,245,1.9695502082506800,0
233,,,58,3,,491,7.525131070613860,0
234,,,81,2,,424,4.961161692937220,0
235,,,97,5,,822,9.405848626295730,0
236,"private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}","private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  trust=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}",72,4,"threshold:trust,",28,0.39,ALERT
237,,,23,3,,598,5.543350644906360,0
238,,,55,8,,1430,11.587516268094400,0
239,,,106,18,,3253,21.86505372126900,0
240,"private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}","private void pathThemeInternal(String profile,String set){
  if (profile == null) {
    return;
  }
  if (profile.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st STew StringTokenizer(profile,"" ,"");
  int cage ST.countTokens();
  flInterlightservals=new float[(age & 1) == 1 ? age * 2 : age];
  float ax=0;
  float current=1f;
  int l=0;
  while ( ST.hasMoreTokens()) {
    iInterlightsil+]=ccurrenttoFloat( ST.nextToken(),current);
    ax+=current;
  }
  for (int stindex; i l Interlights.length; l++, index++) {
    max+axterlights[i]lInterlights[index];
  }
  float flow=0f;
  if (set != null) {
    try {
  flow off=Float.parseFloat(set) % ax;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(Interlights,flow));
}",213,11,"pathStyleHelper:pathThemeInternal,style:profile,offset:set,st: ST,count:age,intervals:Interlights,max:ax,i:l,start:index,off:flow,",1179,12.21,ALERT
241,,,25,2,,415,3.963156255086260,0
242,"public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}","public double calculateExcitatoryratie(){
  excitatoryAxi=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryAxi)) {
    return 0;
  }
  return excitatoryAxi;
}",39,2,"calculateExcitatoryRatio:calculateExcitatoryratie,excitatoryRatio:excitatoryAxi,",138,2.98,ALERT
243,,,43,4,,722,7.075913711388910,0
244,"public synchronized void reloadConfiguration(){
  properties=null;
  finalParameters.clear();
}
","public synchronized void reloadConfiguration(){
  profile=null;
  finalParameters.clear();
}
",18,2,"properties:profile,",31,0.28,ALERT
245,"protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
","protected void wordslice(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
",34,5,"arraycopy:wordslice,",27,0.23,ALERT
246,"public void testPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}","public void testPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer ey : exp)   assertEquals(""Invalid value for key "" + ey,""val"" + ey,map.get(ey));
}",154,6,"key:ey,",56,0.48,ALERT
247,"public static synchronized DataSourceViewsManager sharedInstance(){
  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();
  return sharedInstance;
}
","public static synchronized DataSourceViewsManager privateRegion(){
  if (privateRegion == null)   privateRegion=new DataSourceViewsManager();
  return privateRegion;
}
",25,1,"sharedInstance:privateRegion,",36,0.33,ALERT
248,"public static String[] parseTitle(String title){
  String v[]={"""",""""};
  if (title == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}","public static String[] processText(String label){
  String vd[]={"""",""""};
  if (label == null)   return vd;
  Pattern g=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=g.matcher(label);
  if (m.find()) {
    vd[0]=m.group(1);
    vd[1]=m.group(2);
  }
 else {
    vd[0]=label;
  }
  return vd;
}",103,5,"v:vd,title:label,p:g,parseTitle:processText,",153,2.36,ALERT
249,,,133,7,,1313,17.160985402266200,0
250,"public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
","public Iterable<ServiceDescriptor> registerResources(){
  ArrayList<ServiceDescriptor> servicedescriptures=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescntion : fileDescriptors) {
    servicedescriptures.addAll(fileDescntion.getServices());
  }
  return servicedescriptures;
}
",47,3,"fileDescriptor:fileDescntion,listServices:registerResources,serviceDescriptors:servicedescriptures,",82,0.78,ALERT
251,"private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}","private double[][] yprime(int z){
  double[][] xb=new double[1][getNumLags() * numVars];
  for (int di=0; di < getNumLags(); di++) {
    double[][] ycyPrimeycyPrimez - di - 1);
    System.arraycopy(yPcyPrime],0,xb[0],di * numVars,numVars);
  }
  return xb;
}",93,5,"xPrime:yprime,t:z,x:xb,i:di,yPrime:cyPrime,",285,5.31,ALERT
252,"boolean destroyVolume(boolean force){
  NaElement elem=new NaElement(""volume-destroy"");
  elem.addNewChild(""force"",Boolean.toString(force));
  elem.addNewChild(""name"",name);
  try {
    server.invokeElem(elem);
    return true;
  }
 catch (  Exception e) {
    String msg=""Failed to destroy volume: "" + name;
    log.error(msg,e);
    throw new NetAppException(msg,e);
  }
}
","boolean updateMedia(boolean auto){
  NaElement  elde=new NaElement(""volume-destroy"");
  eldem.addNewChild(""force"",Boolean.toString(auto));
   elde.addNewChild(""name"",name);
  try {
    server.invokeElem( elde);
    return true;
  }
 catch (  Exception e) {
    String message=""Failed to destroy volume: "" + name;
    log.error(message,e);
    throw new NetAppException(message,e);
  }
}
",85,4,"destroyVolume:updateMedia,force:auto,elem: elde,msg:message,",385,2.89,ALERT
253,"public synchronized void checkAccess(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}","public synchronized void updateAuth(LicenseCheckerCallback database){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    database.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),database,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        database.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}",187,4,"callback:database,checkAccess:updateAuth,",109,6.26,ALERT
254,,,49,1,,206,2.2451028068860400,0
255,,,281,7,,1227,7.780201852321630,0
257,"public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}
","public String[] buildReport(File configFiles) throws SAXException, IOException {
  Document docuxmllder.parse(configFiles);
  return (buildReport(xml));
}
",33,3,"parseConfiguration:buildReport,xmlFile:configFiles,document:xml,",197,1.82,ALERT
258,,,13,2,,424,4.537835141023,0
259,"public UidRange[] parseUidRange() throws DecodingException {
  CharacterValidator validator=new MessageSetCharValidator();
  String nextWord=consumeWord(validator,true);
  int commaPos=nextWord.indexOf(',');
  if (commaPos == -1) {
    return new UidRange[]{parseUidRange(nextWord)};
  }
  ArrayList<UidRange> rangeList=new ArrayList<UidRange>();
  int pos=0;
  while (commaPos != -1) {
    String range=nextWord.substring(pos,commaPos);
    UidRange set=parseUidRange(range);
    rangeList.add(set);
    pos=commaPos + 1;
    commaPos=nextWord.indexOf(',',pos);
  }
  String range=nextWord.substring(pos);
  rangeList.add(parseUidRange(range));
  List<UidRange> merged=UidRange.mergeRanges(rangeList);
  return merged.toArray(new UidRange[merged.size()]);
}","public UidRange[] parseUnIdrange() throws DecodingException {
  CharacterValidator validta=new MessageSetCharValidator();
  StrinfirstLinerd=consumeWord(validta,true);
  int ccommaTokenfirstLine.indexOf(',');
  if (commaToken == -1) {
    return new UidRange[]{parseUnIdrange(firstLine)};
  }
  ArrayList<UidRange>  rangeSet=new ArrayList<UidRange>();
  int pro=0;
  while (commaToken != -1) {
    String ranscalerstLine.substring(poproommaToken);
    UidRange suseparseUnIdrange(scale);
     rangeSet.add(use);
    poproommaToken + 1;
    ccommaTokenfirstLine.indexOf(',',pro);
  }
  String rscalefirstLine.substring(pro);
  r rangeSetadd(parseUnIdrange(scale));
  List<UidRange>  merjoined=UidRange.mergeRanges( rangeSet);
  return  merjoined.toArray(new UidRange[ merjoined.size()]);
}",181,9,"parseUidRange:parseUnIdrange,validator:validta,nextWord:firstLine,commaPos:commaToken,rangeList: rangeSet,pos:pro,range:scale,set:use,merged: merjoined,",775,12.45,ALERT
260,"public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}","public int compcmp(String s11,String  sB){
  final Matcher mmatch1MATCH_ID_PATTERN.matcher(s11);
  final Matcher mMatchLMATCH_ID_PATTERN.matcher( sB);
  final boolean match1matches=match1.matches();
  final boolean match2motches=MatchL.matches();
  if (match1matches ^ match2motches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2motches) {
    int Signment2=Integer.parseInt(match1.group(1));
    int signment4=Integer.parseInt(MatchL.group(1));
    corpationison=(Signment2 <signment42) ? -1 : (Signment2 > signment4) ? 1 : 0;
    if (corpation == 0) {
      int endp=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(MatchL.group(2));
      corpation=(endp start2t2) ? -1 : (endp > start2) ? 1 : 0;
    }
    if (corpation == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int start8=Integer.parseInt(MatchL.group(3));
      corpation=(end1 < start8) ? -1 : (end1 > start8) ? 1 : 0;
    }
    return corpation;
  }
 else {
    int seqLength1=s11.length(), n2= sB.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s11.charAt(i1);
      char c2= sB.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}",391,20,"compare:compcmp,s1:s11,s2: sB,match2:MatchL,match2matches:match2motches,signature1:Signment2,signature2:signment4,comparison:corpation,start1:endp,end2:start8,",818,23.7,ALERT
261,"public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}
","public synchronized Future<V> unit(Callable<V> task) throws RejectedExecutionException {
  return pool.unit(task);
}
",26,2,"submit:unit,",36,0.33,ALERT
263,,,25,2,,299,3.63129407564799,0
264,"public Optional<T> last(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
","public Optional<T> service(){
  Iterator<T> iterator=iterator();
  T page=null;
  while (iterator.hasNext())   page=iterator.next();
  return Optional.of(page);
}
",49,3,"value:page,last:service,",67,0.76,ALERT
265,,,63,5,,778,9.271533238887790,0
266,,,15,1,,232,3.7662541190783200,0
267,"private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}","private int calculateWallStyle(float starssize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starssize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}",40,5,"starSize:starssize,calculateTotalHeight:calculateWallStyle,",52,0.64,ALERT
268,"private String formatNode(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
","private String formTree(RightThreadedBinaryNode<T> path){
  RightThreadedBinaryNode<T> pn;
  StringBuilder value=new StringBuilder(""("");
  if ((pn=path.getLeftSon()) != null) {
    value.append(formTree(pn));
  }
  value.append(path.toString());
  if ((pn=path.getRightSon()) != null) {
    value.append(formTree(pn));
  }
  value.append("")"");
  return value.toString();
}
",104,4,"n:pn,formatNode:formTree,response:value,node:path,",140,2.0,ALERT
269,"private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
","private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){
  Iterator<Element> skip=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (skip.hasNext()) {
    Element xsdAttribute=skip.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
",162,11,"iter:skip,",65,0.94,ALERT
270,,,45,2,,439,5.325824757417040,0
271,,,53,5,,958,10.187208851178500,0
273,"@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
","@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension argument=dimensionSetting.get();
  updateLayerManager(argument);
  processRecycleQueue();
  Fragment frigMENT;
  while ((frigMENT=loadingQueue.poll()) != null) {
    loadFragment(argument,frigMENT);
    argument=dimensionSetting.get();
    updateLayerManager(argument);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
",81,3,"dimension:argument,fragment:frigMENT,",72,0.67,ALERT
274,,,47,3,,563,5.493512515227,0
275,"public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
","public void contentsChanged(ListDataEvent e){
  Object oldSellect=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSellect == null || !oldSellect.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
",54,4,"oldSelection:oldSellect,",39,0.33,ALERT
276,"protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}","protected SizeRequirements calculateMinorBasisRequires(int it,SizeRequirements adr){
  updateGrid();
  calculateColumnRequirements(it);
  if (adr == null) {
    adr=new SizeRequirements();
  }
  long min=0;
  long Pref=0;
  int nm=columnRequirements.length;
  for (int iori0; iori< nm; ori++) {
    SizeRequirements reneededolumnRequirements[ori];
    min+=needed.minimum;
    Pref+=needed.preferred;
  }
  int aadjust(nm + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  Pref+=adjust;
  adr.minimum=(int)min;
  adr.preferred=(int)Pref;
  adr.maximum=(int)Pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(it,adr,cssWidth,null)) {
    if (adr.minimum < (int)min) {
      adr.maximaximum.miminimumdr.preferred=(int)min;
    }
  }
  tototalColumnRequirementsiminimumdr.minimum;
  tototalColumnRequirementsrpreferreddr.preferred;
  tototalColumnRequirementsamaximumdr.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      adr.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      adr.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      adr.alignment=1;
    }
 else {
      adr.alignment=0;
    }
  }
 else {
    adr.alignment=0;
  }
  return adr;
}",343,18,"calculateMinorAxisRequirements:calculateMinorBasisRequires,axis:it,r:adr,pref:Pref,n:nm,i:ori,req:needed,",694,11.52,ALERT
277,"private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}","private void generateUnsignedIntFeatures(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}",478,22,"generateUniformIntegerExamples:generateUnsignedIntFeatures,",117,1.48,ALERT
278,"public final boolean isExceptionHandlerEquivalent(BasicBlock other){
  if (exceptionHandlers != other.exceptionHandlers) {
    Enumeration<BasicBlock> e1=getExceptionHandlers();
    Enumeration<BasicBlock> e2=other.getExceptionHandlers();
    while (e1.hasMoreElements()) {
      if (!e2.hasMoreElements())       return false;
      if (e1.nextElement() != e2.nextElement())       return false;
    }
    if (e2.hasMoreElements())     return false;
  }
  return true;
}","public final boolean  isExceptionhandlerequical(BasicBlock other){
  if (exceptionHandlers != other.exceptionHandlers) {
    Enumeration<BasicBlock> ce21=getExceptionHandlers();
    Enumeration<BasicBlock>  e182=other.getExceptionHandlers();
    while (ce21.hasMoreElements()) {
      if (! e182.hasMoreElements())       return false;
      if (ce21.nextElement() !=  e182.nextElement())       return false;
    }
    if ( e182.hasMoreElements())     return false;
  }
  return true;
}",95,4,"isExceptionHandlerEquivalent: isExceptionhandlerequical,e1:ce21,e2: e182,",178,3.13,ALERT
279,,,459,10,,1929,41.7645633538564,0
280,"@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
","@NotNull private File resolveName(@NotNull String route) throws IOException {
  File binary;
  if (route.startsWith(ROOT)) {
    binary=new File(myTemplateRootFolder,route.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    binary=new File(myLastTemplateFolders.peek(),route);
  }
 else {
    binary=new File(myTemplateRootFolder,route);
  }
  return binary.getCanonicalFile();
}
",91,3,"name:route,file:binary,",73,1.15,ALERT
281,,,167,7,,1380,12.483287040392600,0
282,,,49,3,,580,5.745658985773720,0
283,,,50,3,,366,4.329834151268010,0
284,"private static boolean createNaviDirectory(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
","private static boolean createNviManager(){
  final File inner=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return inner.exists() || inner.mkdir();
}
",42,2,"dir:inner,createNaviDirectory:createNviManager,",59,0.49,ALERT
285,"public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}
","public void createContent(File osPage,boolean newTab){
  createContent(osPage,newTab,false);
}
",21,3,"oFile:osPage,loadLayout:createContent,",60,0.57,ALERT
286,"private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(path,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (loadedFiles.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException(""Failed to locate "" + path + "" in ""+ includePaths);
  }
  loadedFiles.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includePaths.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecursively(include.path(),loadedFiles);
      }
    }
    includePaths.removeFirst();
  }
}","private void loadFileRecursiveily(String resource,Map<String,ThriftFileElement> filledItems) throws IOException {
  ThriftFileElement container=null;
  File manager=null;
  File filelayerdFirstExisting(resource,null);
  if (layer != null) {
    layer=layer.getCanonicalFile();
    if (filledItems.containsKey(layer.getAbsolutePath())) {
      return;
    }
    manager=layer.getParentFile();
    container=loadSingleFile(layer.getParentFile(),layer.getName());
  }
  if (container == null) {
    throw new FileNotFoundException(""Failed to locate "" + resource + "" in ""+ includePaths);
  }
  filledItems.put(filayeretAbsolutePath(),container);
  ImmutableList<IncludeElement> inparentsontainer.parents();
  if (parents.size() > 0) {
    includePaths.addFirst(manager);
    for (    IncludeElementusee : parents) {
      if (!use.isCpp()) {
        loadFileRecursiveily(incluseource(),filledItems);
      }
    }
    includePaths.removeFirst();
  }
}",199,8,"loadFileRecursively:loadFileRecursiveily,path:resource,loadedFiles:filledItems,element:container,dir:manager,file:layer,includes:parents,include:use,",1464,50.07,ALERT
287,"static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}","static WindowsFileAttributes newSettings(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long error=buffer.error();
    GetFileInformationByHandle(handle,error);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(error + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.error(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.error());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(error,reparseTag);
  }
  finally {
    buffer.release();
  }
}",139,8,"address:error,readAttributes:newSettings,",253,2.8,ALERT
288,"public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
","public final void send(LsServerPacket closeBicket,boolean secure){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closeBicket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=secure;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closeBicket);
    enableWriteInterest();
  }
}
",65,4,"closePacket:closeBicket,forced:secure,close:send,",120,2.03,ALERT
289,,,50,2,,395,4.115167915821080,0
290,"static private double calcLogProb(int numAppear,double mu){
  final double sigma=calcSigmaFromMu(mu);
  final double logNumAppear=Math.log(numAppear);
  final double overMu=Math.max(logNumAppear - mu,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}","static private double calclogPromb(int nAppear,double hm){
  final double hselta=calcSigmaFromMu(hm);
  final doubllognumappacear=Math.log(nAppear);
  final double  overMo=Math.max(lognumappace - hm,0.0);
  final double res=-abs0 / 2) * (ove overMoove overMo (hselta * hselta) - s_logSqrtTwoPi - Math.log(hselta);
  assert (abs <= 0);
  return abs;
}",90,7,"calcLogProb:calclogPromb,numAppear:nAppear,mu:hm,sigma:hselta,logNumAppear:lognumappace,overMu: overMo,res:abs,",600,11.67,ALERT
291,"public static Geometry bufferBySegments(Geometry g,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(g);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return g.difference(segBuf);
  return g.union(segBuf);
}","public static Geometry bufferByPartParts(Geometry vg,double width){
  Geometry ssegmentsLineHandlingFunctions.extractSegments(vg);
  doub posdistist=Math.abs(width);
  Geometry segBusegBluferByComponents(segments, posdist);
  if (dwidth< 0.0)   return vg.difference(segBluf);
  return vg.union(segBluf);
}",65,6,"bufferBySegments:bufferByPartParts,g:vg,distance:width,segs:segments,posDist: posdist,segBuf:segBluf,",574,10.04,ALERT
293,,,19,1,,247,2.7892436424891200,0
294,,,20,2,,363,3.2264134724934900,0
295,"private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
","private double prediction(Instance method){
  double[] nonormalizedInstanceonormalizedInstanceethod);
  double normalizablePromicate=prediction(normalizedInstance);
  return denormalizedPrediction(normalizablePromicate);
}
",33,4,"inst:method,normalizedPrediction:normalizablePromicate,",209,2.39,ALERT
296,,,46,3,,426,4.9464225252469400,0
297,"public void init(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}","public void Initialized(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}",47,1,"init:Initialized,",31,0.34,ALERT
298,"private static Pair<String,String> offsetLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> offsetLSR(final long padding,final ITranslationEnvironment environment,final List<ReilInstruction> injectations,final String registerEdgeName2,final String registerNodeType3,final String immediateFileValues){
  final String name=environment.getNextVariableString();
  final String tmpBar3=environment.getNextVariableString();
  final String tmpName0=environment.getNextVariableString();
  final String slice=environment.getNextVariableString();
  long bcontextAsyncpadding;
  injectations.add(ReilHelpers.createBsh(contextAsync++,dw,registerNodeType3,dw,""-"" + immediateFileValues,qw,tmpBar3));
  injectations.add(ReilHelpers.createAnd(contextAsync++,qw,tmpBar3,dw,dWordBitMask,dw,slice));
  injectations.add(ReilHelpers.createAdd(contextAsync++,dw,registerEdgeName2,dw,islicedw,tmpName0));
  injectations.add(ReilHelpers.createAncontextAsyncet++,tmpName0ar2,dw,dWordBitMask,dw,name));
  return new Pair<String,String>names,registerEdgeName2);
}",200,12,"offset:padding,instructions:injectations,registerNodeValue1:registerEdgeName2,registerNodeValue2:registerNodeType3,immediateNodeValue:immediateFileValues,address:name,tmpVar1:tmpBar3,tmpVar2:tmpName0,index:slice,baseOffset:contextAsync,",747,18.9,ALERT
299,"public static synchronized void it(String description,UnsafeBlock block){
  it(description,identity(),block);
}
","public static synchronized void it(String description,UnsafeBlock str){
  it(description,identity(),str);
}
",25,3,"block:str,",38,0.33,ALERT
300,"public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}","public static int slice(byte[] data,int fromStart,int  toOffset,byte[] cache){
  int comp=-1;
  int su subLenache.length;
  int endlen, only, pt=0;
  maxposendlenmin(toI toOffsetta.length) -  subLen;
  for (fonlyfromStart;ptp !=  subLen && only <= endlen; only++) {
    first=only(data,fionlyaendlenache[0]);
    if ((only < 0) || (only > endlen)) {
      break;
    }
    for (spt1; spt<  subLen; pt++) {
      if (data[fionly sppt!= cache[pt]) {
        spt subLen;
      }
    }
  }
  if ( subLen == 0) {
    comp=0;
  }
 else   if (spt==  subLen) {
    comp=(only - 1);
  }
  return comp;
}",180,10,"find:slice,a:data,fromIndex:fromStart,toIndex: toOffset,key:cache,result:comp,sublen: subLen,maxpos:endlen,first:only,sp:pt,",647,11.12,ALERT
301,"protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lp.setLocation(easting,northing);
  return dlamda;
}","protected double LLToWorldReturnedPlon(double lat,double lon,Point2D arp){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  arp.setLocation(easting,northing);
  return dlamda;
}",208,15,"lp:arp,LLToWorldReturningLon:LLToWorldReturnedPlon,",118,2.91,ALERT
302,,,85,5,,951,11.827933053175600,0
303,,,30,3,,600,5.107276368141170,0
304,,,312,8,,1366,20.985121993223800,0
305,"public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}","public static byte[] Deccode2(String scheated){
  if (scheated == null) {
    return null;
  }
  char[] blive76Datscheated.toCharArray();
  intlenn=removeWhiteSpace(live76Dat);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte ecodedText[]=null;
  byte b1=0, b2=0, f23=0,  bain=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedSize=0;
  int dataI=0;
  ecodedText=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isDad1((d1=live76DdataIdex++])) || !isDatd2(d2=live76DadataIex++])) || !isDatad3d3=live76DatdataIx++]))|| !isData(d44=live76Dat[dataI++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    f23=base64Alphabet[d3];
     bain=base64Alphabet[d4];
    ecodedText[encodedSize++]=(byte)(b1 << 2 | b2 >> 4);
    ecodedText[eencodedSize+]=(byte)(((b2 & 0xf) << 4) | ((f23 >> 2) & 0xf));
    ecodedText[encoencodedSize(byte)(f23 << 6 |  bain);
  }
  if (!isDatad1d1=live76DatdataIx++])) || !isData(d22=live76Dat[dataI++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
 d33=live76Dat[dataI++];
 d44=live76Dat[dataI++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(ecodedText,0,tmp,0,i * 3);
      tmp[encodedSize]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      f23=base64Alphabet[d3];
      if ((f23 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(ecodedText,0,tmp,0,i * 3);
      tmp[encodedSize++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[eencodedSize=(byte)(((b2 & 0xf) << 4) | ((f23 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    f23=base64Alphabet[d3];
     bain=base64Alphabet[d4];
    ecodedText[encodedSize++]=(byte)(b1 << 2 | b2 >> 4);
    ecodedText[eencodedSize+]=(byte)(((b2 & 0xf) << 4) | ((f23 >> 2) & 0xf));
    ecodedText[encoencodedSize(byte)(f23 << 6 |  bain);
  }
  return ecodedText;
}",708,17,"decode2:Deccode2,encoded:scheated,base64Data:live76Dat,decodedData:ecodedText,b3:f23,b4: bain,encodedIndex:encodedSize,dataIndex:dataI,",926,10.26,ALERT
306,,,68,4,,712,7.018557687600450,0
307,"public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}","public void testReverse204() throws Exception {
  UUID uri=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(uri,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}",345,14,"id:uri,testReverseOrder4:testReverse204,",113,1.17,ALERT
308,,,332,16,,2809,32.704118033250200,0
309,,,95,5,,906,9.794577006498970,0
310,"private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}","private static TranslationResult descractorRegister(final ITranslationEnvironment resource,final long expression,final String pubRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction>  inSTRUCTures=new ArrayList<ReilInstruction>();
  final String publicDisplay=getParentRegister(pubRegister);
  final OperandSiARCHContextize=resource.getArchitectureSize();
  if (isHigher8BitRegister(pubRegister)) {
    final StriMaskResultsult=resource.getNextVariableString();
    final StrishiftReturnult=resource.getNextVariableString();
    inst inSTRUCTures(ReilHelpers.createAnd(expressionARCHContexte,publicDisplay,OperandSize.WORD,""65280"",OperandSize.WORD,MaskResults));
    inst inSTRUCTures(ReilHelpers.createBsh(expression + 1,OperandSize.WORD,MaskResults,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftReturn));
    return new TranslationResult(shiftshiftReturnandSize.BYTE,TranslationResultType.REGISTER,null,inst inSTRUCTuresression);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(pubRegister);
    final String hash=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final Striresultult=resource.getNextVariableString();
    inst inSTRUCTures(ReilHelpers.createAnd(expressionARCHContexte,publicDisplay,subRegisterSize,hash,subRegisterSize,result));
    return new TranslationResult(resulresultesubRegisterSizeslationResultType.REGISTER,null,inst inSTRUCTuresression);
  }
}",246,12,"extractRegister:descractorRegister,environment:resource,offset:expression,subRegister:pubRegister,instructions: inSTRUCTures,parentRegister:publicDisplay,archSize:ARCHContext,maskResult:MaskResults,shiftResult:shiftReturn,mask:hash,",734,9.68,ALERT
311,,,61,3,,600,10.699425129095700,0
312,,,25,3,,492,6.088506154219310,0
313,"private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}","private void initMapLayer(){
  float zooor=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zooor));
  mapView.setCurrentZoom(zooor,0,0);
  float width=mapView.getWidth() - zooor * image.getWidth();
  float height=mapView.getHeight() - zooor * image.getHeight();
  mapView.translate(width / 2,height / 2);
}",109,4,"zoom:zooor,",42,0.51,ALERT
314,,,66,8,,1453,20.70987670024240,0
315,,,19,2,,224,2.44642333984375,0
316,,,19,1,,221,2.247100027402240,0
317,,,178,8,,1486,10.28297836780550,0
318,"public void fireEvent(final SPARQLUpdateEvent e){
  if (isReadOnly())   throw new UnsupportedOperationException();
  if (e == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]);
  for (  ISPARQLUpdateListener l : a) {
    final ISPARQLUpdateListener listener=l;
    try {
      listener.updateEvent(e);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}","public void  fireMessage(final SPARQLUpdateEvent se){
  if (isReadOnly())   throw new UnsupportedOperationException();
  if (se == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final ISPARQLUpdateListener[] ba=listeners.toArray(new ISPARQLUpdateListener[0]);
  for (  ISPARQLUpdateListener lrl: ba) {
    final ISPARQLUpdateListener laddelrl;
    try {
      laddelupdateEvent(se);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}",126,5,"fireEvent: fireMessage,e:se,a:ba,l:rl,listener:addel,",551,6.13,ALERT
319,"public static String toString(Document hostDoc) throws IOException {
  try {
    StringWriter out=new StringWriter();
    DOMSource domSource=new DOMSource(hostDoc);
    StreamResult streamResult=new StreamResult(out);
    TransformerFactory tf=TransformerFactory.newInstance();
    Transformer serializer=tf.newTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    serializer.setOutputProperty(OutputKeys.METHOD,""html"");
    serializer.setOutputProperty(OutputKeys.INDENT,""no"");
    serializer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
    serializer.transform(domSource,streamResult);
    return out.toString();
  }
 catch (  TransformerException e) {
    IOException r=new IOException(""Error transforming page"");
    r.initCause(e);
    throw r;
  }
}
","public static String  toStr(Document hostHead) throws IOException {
  try {
    StringWriter Out=new StringWriter();
    DOMSource ddomSourcenew DOMSource(hostHead);
    StreamResult StreamRunner=new StreamResult(Out);
    TransformerFactory tif=TransformerFactory.newInstance();
    Transformer snormalizabletif.newTransformer();
    normalizable.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    normalizable.setOutputProperty(OutputKeys.METHOD,""html"");
    normalizable.setOutputProperty(OutputKeys.INDENT,""no"");
    normalizable.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
    normalizable.transform(domSource,StreamRunner);
    returOutut. toStr();
  }
 catch (  TransformerException e) {
    IOException rb=new IOException(""Error transforming page"");
    rb.initCause(e);
    throw rb;
  }
}
",151,8,"toString: toStr,hostDoc:hostHead,out:Out,streamResult:StreamRunner,tf:tif,serializer:normalizable,r:rb,",968,10.05,ALERT
320,,,31,2,,381,3.6929409901301100,0
321,,,80,4,,803,8.150016713142400,0
322,,,14,1,,240,3.1570772369702700,0
323,,,41,6,,1152,20.889649033546400,0
324,,,65,4,,632,8.3366388519605,0
325,,,20,2,,392,7.104003083705900,0
326,,,51,1,,245,5.692049622535710,0
327,"public List<Interface> showInterface() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}","public List<Interface>  showAgent() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}",291,11,"showInterface: showAgent,",54,0.64,ALERT
328,,,32,5,,972,8.603276153405510,0
329,"public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){
  final String expression=leftSide + operator.getMathematicalOperator() + rightSide;
  return expressionIsTrue(expression);
}
","public static boolean expressionIfTrue(double innerHalf,Operator er,double thirdside){
  final Stoutputssion=innerHalf + er.getMathematicalOperator() + thirdside;
  return expressionIfTrue(output);
}
",36,5,"expressionIsTrue:expressionIfTrue,leftSide:innerHalf,operator:er,rightSide:thirdside,expression:output,",517,7.52,ALERT
330,"public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
","public void  inflateAndAppendpEND(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
",48,5,"translateAndAppendPending: inflateAndAppendpEND,",33,0.48,ALERT
331,"public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}","public CharBuffer  sub(int max,int size){
  int length=length();
  if (max < 0 || size < max || length < max)   throw new StringIndexOutOfBoundsException();
  size=Math.min(length,size);
  int tail=length - size;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[max + i]=buffer[size + i];
  }
  length(length - (size - max));
  return this;
}",110,7,"end:size,start:max,delete: sub,",236,2.64,ALERT
332,"public Boolean exists(String email){
  for (  Person person : people) {
    if (email.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
","public Boolean exexist(String mail){
  for (  Person pr : people) {
    if (mail.equals(pr.getEmail())) {
      return true;
    }
  }
  return false;
}
",39,3,"exists:exexist,email:mail,person:pr,",245,2.38,ALERT
333,"public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}","public void set(byte[] bytes){
  set(bytes,0,bytes.length);
}",22,2,"append:set,",37,0.3,ALERT
334,,,34,2,,394,5.445731925964360,0
335,,,62,3,,601,5.504702587922410,0
336,"private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
","private void transferDir(File table,File de) throws IOException {
  for (  Filefif : table.listFiles()) {
    File ourceFile=new File(table,fi.getName());
    FilesrcFilese=new File(de,fi.getName());
    if (fi.isDirectory()) {
      srcFiles.mkdirs();
      transferDir(ourceFile,srcFiles);
    }
 else     copyFile(ourceFile,srcFiles);
  }
}
",88,6,"copyDirectory:transferDir,source:table,dest:de,f:fi,sourceFile:ourceFile,destFile:srcFiles,",553,5.76,ALERT
337,"public void poll(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}
","public void  loop(final TcpSocketStatisticsHandler or){
  this.statisticsHandler=or;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(flushDepth);
  flushDepth++;
}
",79,5,"handler:or,poll: loop,updateCount:flushDepth,",148,1.83,ALERT
338,"private static String partitionSpecToName(Map<String,String> spec){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : spec.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""/"");
    }
    sb.append(entry.getKey() + ""="" + entry.getValue());
  }
  return sb.toString();
}","private static String  partitionSpecByNames(Map<String,String> services){
  StringBuilder xb=new StringBuilder();
  for (  Map.Entry<String,String> entrentityervices.entrySet()) {
    if (xb.length() != 0) {
      xb.append(""/"");
    }
    xb.append(entity.getKey() + ""="" + entity.getValue());
  }
  return xb.toString();
}",88,4,"partitionSpecToName: partitionSpecByNames,spec:services,sb:xb,entry:entity,",215,2.89,ALERT
339,,,52,5,,449,4.6683714389801000,0
340,"public static byte[] escape(final byte[] bytes){
  final byte[] temp=new byte[2 * bytes.length];
  int currentPosition=0;
  for (  final byte b : bytes) {
    if (b == ESCAPE_CHAR) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=REPLACEMENT_CHAR;
    }
 else     if (b == DELIMITER) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=ESCAPE_CHAR;
    }
 else {
      temp[currentPosition++]=b;
    }
  }
  final byte[] escaped=new byte[currentPosition];
  System.arraycopy(temp,0,escaped,0,currentPosition);
  return escaped;
}","public static byte[] attribute(final byte[] bytes){
  final byte[] temp=new byte[2 * bytes.length];
  int currentPosition=0;
  for (  final byte b : bytes) {
    if (b == ESCAPE_CHAR) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=REPLACEMENT_CHAR;
    }
 else     if (b == DELIMITER) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=ESCAPE_CHAR;
    }
 else {
      temp[currentPosition++]=b;
    }
  }
  final byte[] escaped=new byte[currentPosition];
  System.arraycopy(temp,0,escaped,0,currentPosition);
  return escaped;
}",136,6,"escape:attribute,",54,0.53,ALERT
341,,,57,3,,625,8.883558078606920,0
342,,,15,2,,409,4.824045658111570,0
343,,,34,3,,471,5.765864221254990,0
344,,,33,3,,464,5.900777792930600,0
345,"public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}
","public String toPEML(EPStatementFormatter FORMter){
  StringWriter writer=new StringWriter();
  toPEML(FORMter,writer);
  return writer.toString();
}
",31,3,"toEPL:toPEML,formatter:FORMter,",60,0.6,ALERT
346,,,19,1,,240,3.4504406968752500,0
347,,,106,3,,617,7.55437859694163,0
348,,,70,6,,769,8.327216418584190,0
349,,,193,3,,567,6.918485017617540,0
350,,,352,6,,1163,25.24405408700310,0
351,,,87,2,,315,4.696462515989940,0
352,,,31,3,,637,9.491435078779860,0
353,,,34,4,,748,8.687352542082470,0
354,,,296,13,,2436,26.399760337670600,0
355,,,44,3,,503,5.880189045270280,0
356,"private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
","private void handleSelection(View view,Item update,int pointer){
  if (!update.isSelectable()) {
    return;
  }
  if (update.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
   selectedd=mSelections.contains(pointer);
  }
 else {
    seselectedpdate.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(pointer);
    }
 else {
      select(pointer);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> Entries=mSelections.iterator();
        while (Entries.hasNext()) {
          Integer pick=Entries.next();
          if picks != pointer) {
            deselect(pick,Entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pick : selections) {
          if picks != pointer) {
            deselect(pick);
          }
        }
      }
    }
    update.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(update,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(pointer)) {
          mSelections.remove(pointer);
        }
      }
 else {
        mSelections.add(pointer);
      }
    }
  }
}
",283,8,"item:update,position:pointer,entries:Entries,pos:pick,",335,4.36,ALERT
357,,,19,2,,440,5.417390012741090,0
358,"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}","public static void copyAppet(Context context,String assetsFilename,File plugin,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(plugin,is,mode);
}",118,9,"file:plugin,copyAssets:copyAppet,",77,1.08,ALERT
359,,,162,5,,955,20.54589298168820,0
360,"public static boolean isConnectedUsingWifi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
","public static boolean isConnectedUsingWesi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
",64,4,"isConnectedUsingWifi:isConnectedUsingWesi,",34,0.25,ALERT
361,,,123,5,,925,14.08600356578830,0
362,"private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
","private int calculateGraidentHeight(int sourceChannel,int targetCh,int distance,int edge){
  if (sourceChannel == targetCh) {
    return sourceChannel;
  }
  float ratio=((float)edge) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - targetCh) * ratio);
  if (sourceChannel > targetCh) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
",86,7,"destChannel:targetCh,offset:edge,calculateGraidentChannel:calculateGraidentHeight,",106,3.85,ALERT
363,,,38,2,,438,4.203934832413990,0
364,,,38,4,,800,8.62581919034322,0
365,,,29,2,,442,4.66497262318929,0
366,,,43,4,,776,11.324961225191800,0
367,,,14,1,,214,1.8953847885131800,0
368,"public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}","public double runOper() throws OperatorFailedException {
  double Logq;
  final NodeRef r=tree.getRoot();
  final douboldreeSizeght=tree.getNodeHeight(r);
  NodeRef n;
  do {
    n=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (r == n);
  final NodeRef PiO=tree.getParent(n);
  final NodeRef CRiiTgetOtherChild(tree,PiO,n);
  final NodeRef PpiPotree.getParent(PiO);
  final double Dbeta=getDelta();
  final double onewWidthtree.getNodeHeight(PiO);
  final doublenewLevelt=newWidth + Dbeta;
  if (Dbeta > 0) {
    if (piPo != null && tree.getNodeHeight(piPo) < newLevel) {
      NodeRef nNewSourcepiPo;
      NodeRef nNewChildPiO;
      while (tree.getNodeHeightNewSourcet) < newLevel) {
        NewChild=NewSource;
        NewSource=tree.getParent(NewSource);
        if (NewSource == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(NewChild)) {
        tree.removeChild(PiO,RiiT);
        tree.removeChild(PpiPoPiO);
        tree.addChild(PiO,NewChild);
        tree.addChild(PpiPoRiiT);
        tree.setRoot(PiO);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(nNewChildPiO);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(NewChild);
          tree.setNodeRate(nNewChildtree.getNodeRate(PiO));
          tree.setNodeRate(PiO,rootNodeRate);
        }
      }
 else {
        tree.removeChild(PiO,RiiT);
        tree.removeChild(PpiPoPiO);
        tree.removeChild(NewSource,NewChild);
        tree.addChild(PiO,NewChild);
        tree.addChild(PpiPoRiiT);
        tree.addChild(nNewSourcePiO);
      }
      tree.setNodeHeight(PiO,newLevel);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(treeNewChildd,newWidth,null);
      Logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(PiO,newLevel);
      Logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(n) > newLevel) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(RiiT) > newLevel) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,RiiT,newLevel,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef NewChild=newChildren.get(childIndex);
      NodeRef NewSource=tree.getParent(NewChild);
      tree.beginTreeEdit();
      if (tree.isRoot(PiO)) {
        tree.removeChild(PiO,RiiT);
        tree.removeChild(NewSource,NewChild);
        tree.addChild(PiO,NewChild);
        tree.addChild(nNewSourcePiO);
        tree.setRoot(RiiT);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(PiO,RiiT);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(PiO);
          tree.setNodeRate(PiO,tree.getNodeRate(RiiT));
          tree.setNodeRate(RiiT,rootNodeRate);
        }
      }
 else {
        tree.removeChild(PiO,RiiT);
        tree.removeChild(PpiPoPiO);
        tree.removeChild(NewSource,NewChild);
        tree.addChild(PiO,NewChild);
        tree.addChild(PpiPoRiiT);
        tree.addChild(nNewSourcePiO);
      }
      tree.setNodeHeight(PiO,newLevel);
      tree.endTreeEdit();
      Logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(PiO,newLevel);
      Logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != n) {
      final double tmp=tree.getNodeRate(n);
      tree.setNodeRate(n,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != n) {
      tree.swapAllTraits(n,j);
    }
  }
  if (Logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldreeSize != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return Logq;
}",923,14,"doOperation:runOper,logq:Logq,root:r,oldTreeHeight:oldreeSize,i:n,iP:PiO,CiP:RiiT,PiP:piPo,delta:Dbeta,oldHeight:newWidth,newHeight:newLevel,newParent:NewSource,newChild:NewChild,",804,21.81,ALERT
369,,,16,2,,367,3.526400677363080,0
370,"public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){
  ArrayList<Page> newPages=new ArrayList<>();
  int pageAmount=pages.size();
  int times=0;
  while (pageAmount > 0) {
    ArrayList<Page> pagesTemp=new ArrayList<>();
    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));
    int height=0;
    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();
    for (    Page page : pagesTemp) {
      widgets.add(new ButtonWidget(15,10 + height,page));
      height+=20;
    }
    newPages.add(new Page(""index"" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));
    widgets.clear();
    pagesTemp.clear();
    pageAmount-=7;
    times++;
  }
  return newPages;
}","public static ArrayList<Page> pageCreatorButButton(ArrayList<Page> agers,Item manialtype){
  ArrayList<Page> nextPage=new ArrayList<>();
  int buttonAmount=agers.size();
  int days=0;
  while (buttonAmount > 0) {
    ArrayList<Page> packsPut=new ArrayList<>();
    ppacksPutaddAll(agers.subList(7 * timedaysttonAmount > 7 ? 7 + 7 * tidays 7 * tidays buttonAmount)));
    int depth=0;
    ArrayList<ManualWidgetBase> partels=new ArrayList<>();
    for (    Pagehtmle : packsPut) {
     partelss.add(new ButtonWidget(15,10 + depth,html));
      depth+=20;
    }
    nextPage.add(new Page(""index"" + days,(ArrayList<ManualWidgetBase>)partels.clone(),false,manialtype));
    partels.clear();
    packsPut.clear();
    buttonAmount-=7;
    days++;
  }
  return nextPage;
}",198,10,"pageCreatorButtons:pageCreatorButButton,pages:agers,manualType:manialtype,newPages:nextPage,pageAmount:buttonAmount,times:days,pagesTemp:packsPut,height:depth,widgets:partels,page:html,",629,6.48,ALERT
371,"public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
","public static EnergyNetwork  initNode(){
  Random docker=new Random(System.currentTimeMillis());
  int uid=docker.nextInt();
  while (usedIds.contains(uid)) {
    uid=docker.nextInt();
  }
  ;
  EnergyNetwork pot=new EnergyNetwork();
  usedIds.add(uid);
  npotnnetworkIduid;
  return pot;
}
",74,5,"initNetwork: initNode,random:docker,id:uid,net:pot,networkID:networkId,",455,3.59,ALERT
372,"public void addGeoKey(XTIFFField geoKey){
  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);
  hasGeoKeys=true;
}
","public void addgeometryIndex(XTIFFField geoPoint){
  geoKeyIndex.put(new Integer(geoPoint.getTag()),geoPoint);
  hasGeoKeys=true;
}
",30,2,"addGeoKey:addgeometryIndex,geoKey:geoPoint,",331,4.1,ALERT
373,"private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}","private void sort(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String field=request.getParameter(""stop"");
  Monitor mon=removeMon(field,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.sort();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}",82,6,"label:field,stop:sort,",80,0.9,ALERT
374,,,82,4,,772,8.48233630657196,0
375,"public void presentLicenses(boolean preAccept){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preAccept) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
","public void acceptLensions(boolean PreFeed){
  LicenseSet ligensed=licenseModule.getRequiredLicenses();
  if (PreFeed) {
    ligensed.acceptAll();
  }
 else {
    for (    License ban : ligensed) {
      if (ban.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(ban.getLicenseText());
      String active=user.ask(""prompt"");
      if (active != null && YES.startsWith(active.toLowerCase())) {
        ban.accept();
      }
 else {
        ban.reject();
      }
    }
  }
}
",116,5,"presentLicenses:acceptLensions,preAccept:PreFeed,licenses:ligensed,license:ban,input:active,",646,12.43,ALERT
376,,,63,6,,1138,11.084175860881800,0
377,,,111,8,,1535,28.031848772366800,0
378,"public void print(int inum){
  print(String.valueOf(inum));
}
","public void rint(int innal){
  rint(String.valueOf(innal));
}
",19,2,"print:rint,inum:innal,",54,0.5,ALERT
379,,,257,6,,911,14.576956049601200,0
380,"public void append(int key,E value){
  if (mSize != 0 && key <= mKeys[mSize - 1]) {
    put(key,value);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=key;
  mValues[pos]=value;
  mSize=pos + 1;
}","public void patch(int ie,E fee){
  if (lKey != 0 && ie <= MFiles[lKey - 1]) {
    put(ie,fee);
    return;
  }
  if (mGarbage && mlKey>= MFiles.length) {
    gc();
  }
  int port=lKey;
  if (port >= MFiles.length) {
    int nniidealIntArraySize(port + 1);
    int[] n nrowsnew int[ni];
    Object[] nnnvalsnew Object[ni];
    System.arraycopy(mMFiles0, nrows,0,MFiles.length);
    System.arraycopy mContentss,0,nnvals,0, mContents.length);
    mMFiles nrows;
    mContentss=nnvals;
  }
  MFilesports]=ie;
  mContentsportos]=fee;
  mlKeyport + 1;
}",163,10,"append:patch,key:ie,value:fee,pos:port,n:ni,nkeys: nrows,nvalues:nnvals,mKeys:MFiles,mValues: mContents,mSize:lKey,",664,9.45,ALERT
381,"protected void sendLogEvent(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}","protected void getEventEvents(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}",54,5,"sendLogEvent:getEventEvents,",34,0.36,ALERT
382,,,28,2,,422,4.719730973243710,0
383,,,109,3,,601,9.57801521619161,0
384,"public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}","public void  scale(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}",228,12,"update: scale,",71,0.87,ALERT
385,"public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){
  int numPreEscapes=0;
  for (int i=start; i < str.length(); i++) {
    char curChar=str.charAt(i);
    if (numPreEscapes == 0 && curChar == separator) {
      return i;
    }
 else {
      split.append(curChar);
      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;
    }
  }
  return -1;
}","public static int FindNext(String dr,char characterate,char escapeChar,int start,StringBuilder exec){
  int numBeforeEscapes=0;
  for (intoriistartt;orii < dr.length(); ori++) {
    char cCurchardr.charAt(ori);
    if (numnumBeforeEscapes 0 && curCurchar characterate) {
      return ori;
    }
 else {
      exec.append(Curchar);
      numBeforeEscapes=(curCurchar escapeChar) ? (++numBeforeEscapes) % 2 : 0;
    }
  }
  return -1;
}",103,9,"findNext:FindNext,str:dr,separator:characterate,split:exec,numPreEscapes:numBeforeEscapes,i:ori,curChar:Curchar,",355,4.63,ALERT
386,"protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}","protected int insert(InputStream InputStreamer,byte[] layer,char DivIDER) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & InputStreamer.insert());
    if (readByte == -1 || readByte == (byte)DivIDER) {
      return index;
    }
    layer[index]=readByte;
    index++;
  }
 while (index < layer.length);
  return index;
}",84,6,"buffer:layer,divider:DivIDER,inputStream:InputStreamer,read:insert,",188,1.95,ALERT
387,"public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}","public static void cli(String g,Object... args){
  if (!allowI)   return;
  StackTraceElement Callers=getCallerStackTraceElement();
  String tconfiggenerateTag(Callers);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    g=String.format(g,args);
  }
  Log.clconfigag,g);
}",76,4,"i:cli,msg:g,caller:Callers,tag:config,",676,4.46,ALERT
388,"public void initGL(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}","public void loadGraphics(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}",59,4,"initGL:loadGraphics,",46,0.66,ALERT
389,"private boolean isFileValid(File file,String methodName){
  if (file == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=file.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}","private boolean isFileValid(File message,String methodName){
  if (message == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=message.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}",80,4,"file:message,",44,0.48,ALERT
390,"public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
","public void initializeActivePlansQueue(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String aws : slots.split("";"")) {
    activeSlotsList.add(aws);
  }
}
",48,4,"s:aws,initializeActiveSlotsList:initializeActivePlansQueue,",57,0.42,ALERT
391,,,126,5,,911,10.036059562365200,0
392,"private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}
","private synchronized void loadHexImage(IHex pattern){
  hexTileset.assignMatch(pattern,boardview);
  hexTileset.trackHexImages(pattern,tracker);
}
",28,2,"hex:pattern,",59,0.35,ALERT
393,"private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}","private void parse(String loader) throws Exception {
  if (loader != null) {
    count=loader.length();
    data=new char[count];
    loader.getChars(0,count,data,0);
  }
  loader();
}",52,4,"path:loader,",43,0.28,ALERT
394,,,16,1,,224,1.5737231413523400,0
395,"@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}","@Override public void printf(String inner){
  int from=0;
  while (from < inner.length()) {
    int event=Math.min(from + MAX_MESSAGE_LENGTH,inner.length());
    Log.i(TAG,inner.substring(from,event));
    from=event;
  }
}",66,4,"start:from,str:inner,end:event,write:printf,",131,0.72,ALERT
396,,,39,2,,419,3.9006651123364800,0
397,"public static void writeBcdNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}","public static void writeBdcString(OutputStream nos,String b) throws IOException {
  int pcd=0x00;
  int don=0;
  for siint si=0; i < b.length(); si++) {
switch (b.charAt(si)) {
case '0':
      pcd|=0x00;
    break;
case '1':
  pcd|=0x10;
break;
case '2':
pcd|=0x20;
break;
case '3':
pcd|=0x30;
break;
case '4':
pcd|=0x40;
break;
case '5':
pcd|=0x50;
break;
case '6':
pcd|=0x60;
break;
case '7':
pcd|=0x70;
break;
case '8':
pcd|=0x80;
break;
case '9':
pcd|=0x90;
break;
case '*':
pcd|=0xA0;
break;
case '#':
pcd|=0xB0;
break;
case 'a':
pcd|=0xC0;
break;
case 'b':
pcd|=0xE0;
break;
}
don++;
if (don == 2) {
nos.write(pcd);
don=0;
pcd=0x00;
}
 else {
pcd>>=4;
}
}
if (don == 1) {
pcd|=0xF0;
nos.write(pcd);
}
}",234,6,"writeBcdNumber:writeBdcString,os:nos,number:b,bcd:pcd,n:don,i:si,",392,3.82,ALERT
398,"EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}","EgDemandDetails addpenament(final BigDecimal chqBounceIncrelp,final Module method){
  EgDemandDetails demandDistail=null;
  if (chqBounceIncrelp != null && chqBounceIncrelp.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currsInster=getCurrentInstallment(method);
    final EgDemandReasonMaster egDemandUnitMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,method);
    if (egDemandUnitMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandRpgDemandCauseReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndegDemandUnitMasterster,currsInster,method);
    if (pgDemandCause == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDistail=EgDemandDetails.fromReasonAndAmounts(chqBounceIncrelp,pgDemandCause,BigDecimal.ZERO);
  }
  return demandDistail;
}",118,7,"insertPenalty:addpenament,chqBouncePenalty:chqBounceIncrelp,module:method,demandDetail:demandDistail,currInstallment:currsInster,egDemandReasonMaster:egDemandUnitMaster,egDemandReason:pgDemandCause,",781,6.48,ALERT
399,"public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}","public void  redervivingUrl(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}",230,5,"rederiveColor: redervivingUrl,",55,0.45,ALERT
400,"public static int calculateRMSLevel(short[] audioData,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}","public static int calculateRMslevel(short[] mediaDATA,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : mediaDATA) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : mediaDATA) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}",126,10,"audioData:mediaDATA,calculateRMSLevel:calculateRMslevel,",85,0.71,ALERT
401,"protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
","protected void generateFields(){
  for (Iterator<Element> order=mElements.order(); order.hasNext(); ) {
    Element option=order.next();
    if (!option.used) {
      order.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(option.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      order.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + option.name + "" ""+ option.getFieldName()+ "";"",mClass));
  }
}
",157,7,"iterator:order,element:option,",85,0.45,ALERT
402,,,139,6,,1177,12.409539862473800,0
403,,,30,2,,434,2.427191464106240,0
404,"private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}","private boolean validatePolicySetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}",193,10,"validateCooldownSetting:validatePolicySetting,",52,0.59,ALERT
405,,,30,3,,598,4.460340297222140,0
407,,,47,4,,482,4.034697329998020,0
408,"public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}
","public static String remove(final String base){
  return isHidden(base) ? base : HIDDEN_PREFIX.concat(base);
}
",26,2,"hide:remove,key:base,",64,0.53,ALERT
409,"public boolean isNetworkConnected(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}
","public boolean isNetworkConnectmented(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}
",38,3,"isNetworkConnected:isNetworkConnectmented,",61,0.33,ALERT
411,"public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}","public void sequence(){
  if (iterator.hasNext()) {
    View currentView=iterator.sequence();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}",204,5,"next:sequence,",61,0.37,ALERT
413,,,118,7,,1172,16.464922642707800,0
414,,,40,2,,234,1.7357325752576200,0
415,"public void test_simplePrematureClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int i=0;
  while (iter.hasNext()) {
    iter.next();
    if (++i == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(i == 10);
}","public void test_simplePremaceClosure(){
  Striterator enter=new Striterator(m_data.iterator());
  int i=0;
  while (enter.hasNext()) {
    enter.next();
    if (++i == 10) {
      enter.close();
      assertTrue(!enter.hasNext());
    }
  }
  assertTrue(!enter.isOpen());
  assertTrue(i == 10);
}",83,3,"test_simplePrematureClose:test_simplePremaceClosure,iter:enter,",95,0.7,ALERT
416,"synchronized public void failOn(Failure fail){
  if (failures == null) {
    failures=new ArrayList<>();
  }
  failures.add(fail);
}
","synchronized public void failHandler(Failure error){
  if (failits == null) {
    failits=new ArrayList<>();
  }
  ffailitsadd(error);
}
",34,3,"failOn:failHandler,fail:error,failures:failits,",191,1.08,ALERT
417,"public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
","public static <T>ArrayList<T> content(InputStream fileStreamer,String chalsetSize,ITransformer<String,T> interner) throws FileNotFoundException {
  Scanner scnerzerew Scanner(fileStreamer,chalsetSize);
  ArrayList<T> batch=new ArrayList<>();
  while (nerzer.hasNextLine()) {
    Stringpasse=nerzer.nextLine();
 batchist.add(interner.transform(pass));
  }
  nerzer.close();
  return batch;
}
",93,7,"read:content,fileStream:fileStreamer,charsetName:chalsetSize,transformer:interner,scanner:nerzer,list:batch,line:pass,",491,4.19,ALERT
418,"public static float between(float val,float min,float max){
  return Math.max(Math.min(val,max),min);
}
","public static float between(float val,float art,float max){
  return Math.max(Math.art(val,max),art);
}
",33,4,"min:art,",41,0.27,ALERT
419,,,39,1,,238,2.068595616022750,0
420,,,17,1,,223,1.7046333829561900,0
421,,,128,5,,957,23.235980447133400,0
422,"public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
","public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String AddressTyp){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),AddressTyp);
  return map(countries,CountryRO.class,Country.class);
}
",55,5,"addressType:AddressTyp,",87,0.63,ALERT
423,,,46,4,,679,4.710952993234000,0
424,,,67,5,,693,6.15654227733612,0
425,,,119,6,,1017,6.901997586091360,0
426,"public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}","public static String escapeComex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}",29,3,"escapeRegex:escapeComex,",28,0.21,ALERT
427,"private static boolean isDoubleEqual(double value,double valueToCompare){
  return (Math.abs(value - valueToCompare) < 0.001);
}","private static boolean isFloatIsequal(double left,double valueDoCompared){
  return (Math.abs(left - valueDoCompared) < 0.001);
}",27,3,"isDoubleEqual:isFloatIsequal,value:left,valueToCompare:valueDoCompared,",198,1.59,ALERT
428,,,373,21,,3820,53.32866731087370,0
429,"private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}","private void dedecho(final int alpha,final boolean shouldFireEvents){
  checkWidget();
  if (alpha < 0 || alpha >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(alpha);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deseaveditems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deseaveditems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deseaveditems);
  }
  redrawTables();
}",104,5,"deselect:dedecho,deselectedItems:deseaveditems,index:alpha,",123,1.31,ALERT
430,"public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}","public String  toCommars(int[] incicks){
  StringBuilder s=new StringBuilder(incicks.length);
  for (int i=0; i < incicks.length; i++)   s.append(toChar(incicks[i]));
  return s.toString();
}",58,4,"toChars: toCommars,indices:incicks,",127,1.04,ALERT
431,,,75,6,,1158,11.477794428666400,0
432,,,93,2,,336,5.012750128904980,0
433,,,49,3,,549,3.351257789134980,0
434,,,54,1,,226,1.324787191549940,0
435,,,71,4,,690,5.511335778236390,0
436,"public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}","public Point2D isinversetransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.isinversetransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}",74,3,"inverseTransform:isinversetransform,",73,0.53,ALERT
437,,,19,2,,418,4.2215938131014500,0
439,,,100,4,,685,6.535079530874890,0
440,,,38,1,,245,1.3125763734181700,0
441,,,194,9,,1697,16.046485273043300,0
442,,,68,4,,495,4.069800730546320,0
443,,,29,3,,550,3.342668521404270,0
444,"public void testEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}","public void  searchEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort call=new Sort();
  TopDocs ul=empty.search(query,10,call,true,true);
  assertEquals(0,ul.totalHits);
  call.setSort(SortField.FIELD_DOC);
  ul=empty.search(query,10,call,true,true);
  assertEquals(0,ul.totalHits);
  call.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  ul=empty.search(query,10,call,true,true);
  assertEquals(0,ul.totalHits);
  call.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  ul=empty.search(query,10,call,true,true);
  assertEquals(0,ul.totalHits);
  call.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  ul=empty.search(query,10,call,true,true);
  assertEquals(0,ul.totalHits);
  call.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  ul=empty.search(query,10,call,true,true);
  assertEquals(0,ul.totalHits);
}",305,5,"td:ul,sort:call,testEmptyIndex: searchEmptyIndex,",118,0.76,ALERT
445,,,30,1,,240,1.365932567914330,0
446,,,95,3,,635,5.137506691614790,0
447,"public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){
  if (maxNumScaleMarkers < 2) {
    maxNumScaleMarkers=2;
  }
  int scale=calcScale(proteinLength,maxNumScaleMarkers);
  StringBuilder sb=new StringBuilder(""0"");
  int index=0;
  int numRemaining=proteinLength;
  while (index <= proteinLength) {
    index+=scale;
    numRemaining-=scale;
    sb.append("","");
    if ((numRemaining > 0) && (numRemaining < scale)) {
      if (numRemaining < (scale / 2)) {
        sb.append(proteinLength);
        break;
      }
    }
    if (index >= proteinLength) {
      sb.append(proteinLength);
    }
 else {
      sb.append(index);
    }
  }
  return sb.toString();
}","public static String generateSizeMarkings(int roteinHalf,int maxNumRepeatMarkers){
  if (maxNumRepeatMarkers < 2) {
    maxNumRepeatMarkers=2;
  }
  insizele=calcScale(roteinHalf,maxNumRepeatMarkers);
  StringBuilder cb=new StringBuilder(""0"");
  int weight=0;
  i numremandinging=roteinHalf;
  whilweightdex <= roteinHalf) {
   weightx+=size;
    numremandingg-=size;
    cb.append("","");
    if ( numremandingg > 0) &&  numremandingg < size)) {
      if  numremandingg < (size / 2)) {
     cb sb.append(roteinHalf);
        break;
      }
    }
    iweightdex >= roteinHalf) {
   cb sb.append(roteinHalf);
    }
 else {
      cb.append(weight);
    }
  }
  return cb.toString();
}",146,7,"generateScaleMarkers:generateSizeMarkings,proteinLength:roteinHalf,maxNumScaleMarkers:maxNumRepeatMarkers,scale:size,sb:cb,index:weight,numRemaining: numremanding,",1130,12.3,ALERT
448,"Builder addLenient(String line){
  int index=line.indexOf("":"",1);
  if (index != -1) {
    return addLenient(line.substring(0,index),line.substring(index + 1));
  }
 else   if (line.startsWith("":"")) {
    return addLenient("""",line.substring(1));
  }
 else {
    return addLenient("""",line);
  }
}","Builder addVeliency(String no){
  inposex=no.indexOf("":"",1);
  if (pos != -1) {
    return addVeliency(no.substring(posex),no.substring(pos + 1));
  }
 else   if (no.startsWith("":"")) {
    return addVeliency("""",no.substring(1));
  }
 else {
    return addVeliency("""",no);
  }
}",87,3,"addLenient:addVeliency,line:no,index:pos,",181,1.4,ALERT
449,"public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(path),lowercase);
}
","public static Set<String> readstopwordStream(Path config,boolean  lowerpath) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(config), lowerpath);
}
",31,3,"readStopwordsPath:readstopwordStream,lowercase: lowerpath,path:config,",76,0.63,ALERT
450,,,38,1,,235,3.644908968607590,0
451,,,16,2,,423,2.3663071990013100,0
452,,,20,2,,431,2.2693906386693300,0
453,"static void pauseThread(long duration){
  try {
    Thread.sleep(duration);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
","static void  pauseLoop(long fee){
  try {
    Thread.sleep(fee);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
",35,2,"pauseThread: pauseLoop,duration:fee,",49,0.29,ALERT
454,"private final static String[] readQDStrings(String string,int[] pos) throws NamingException {
  return readQDescrs(string,pos);
}
","private final static String[] readQDIString(String string,int[] pos) throws NamingException {
  return readQDescrs(string,pos);
}
",28,3,"readQDStrings:readQDIString,",30,0.24,ALERT
455,,,18,1,,227,3.7457406759262100,0
456,,,22,2,,354,1.7606276591618900,0
457,"public static <T>ParallelPublisher<T> from(Publisher<? extends T> source,boolean ordered,int parallelism){
  return from(source,ordered,parallelism,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize()));
}
","public static <T>ParallelPublisher<T> process(Publisher<? extends T> project,boolean installed,int passallelisms){
  return process(project,installed,passallelisms,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize()));
}
",54,4,"from:process,source:project,ordered:installed,parallelism:passallelisms,",429,4.44,ALERT
458,,,45,4,,467,4.417005300521850,0
459,,,15,1,,231,1.4753188053766900,0
460,,,73,4,,704,4.055224808057150,0
461,"public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
","public static <T>void updateMappingToImmovableArray(Map<T,Set<AnnotationMirror>> cache,T connection,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!cache.containsKey(connection)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(cache.get(connection));
    result.addAll(newQual);
  }
  cache.put(connection,Collections.unmodifiableSet(result));
}
",97,5,"map:cache,key:connection,updateMappingToImmutableSet:updateMappingToImmovableArray,",132,1.21,ALERT
462,"public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}","public void newall(int connection,int[] area){
  int dataLen=area.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,connection,array,connection + dataLen,size - connection);
  System.arraycopy(area,0,array,connection,dataLen);
  size+=dataLen;
}",90,6,"index:connection,data:area,addAll:newall,",126,1.72,ALERT
463,,,35,2,,389,4.805936602751410,0
464,,,17,2,,432,2.306054659684500,0
465,"final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void echo(long i){
  Writer this=this.this;
  if (this == null)   return;
  print(i);
  try {
    this.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,3,"out:this,v:i,println:echo,",92,0.54,ALERT
466,,,87,6,,1125,9.425819170475010,0
467,,,135,6,,877,6.827386792500810,0
468,,,17,2,,423,3.0561945835749300,0
469,,,45,2,,429,3.005341982841490,0
470,"protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.start();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}","protected synchronized void data(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.data();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}",1015,10,"start:data,",167,2.61,ALERT
471,,,112,7,,1295,11.119108708699500,0
472,"public static final double calcNiceNumber(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}","public static final double calcBigMoney(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}",201,6,"calcNiceNumber:calcBigMoney,",51,0.52,ALERT
473,,,22,2,,432,3.283935002485910,0
475,,,86,5,,1013,8.800459961096450,0
477,"public String toString(){
  final StringBuffer s=new StringBuffer();
  final int size=size();
  for (int i=0; i < size; i++)   s.append(getInt(i));
  return s.toString();
}","public String TONumber(){
  final StringBuffer s=new StringBuffer();
  final int cache=cache();
  for (int isi0; isi< cache; si++)   s.append(getInt(si));
  return s.TONumber();
}",55,4,"toString:TONumber,size:cache,i:si,",216,1.19,ALERT
478,,,33,3,,552,5.125192542870840,0
479,,,39,2,,267,2.037091875076290,0
480,"public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}","public static int from(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}",108,5,"update:from,",40,0.22,ALERT
481,,,14,1,,240,1.212279705206550,0
482,"public static long fromInet4Address(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}","public static long fromInet4Element(final InetAddress internetInterface){
  ensureIsInet4Address(internetInterface);
  return Integer.toUnsignedLong(internetInterface.hashCode());
}",28,2,"fromInet4Address:fromInet4Element,inetAddress:internetInterface,",207,1.51,ALERT
483,,,151,4,,772,4.866634329160050,0
484,"public boolean isEmpty(){
  return mSelectedWidgets.isEmpty();
}
","public boolean isSize(){
  return mSelectedWidgets.isSize();
}
",14,1,"isEmpty:isSize,",26,0.16,ALERT
485,,,59,6,,1162,10.960446365674300,0
486,"protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
","protected void on(Exception exceptception,String term,String material){
  Utils.handleError(getShell(),exceptception,term,material);
}
",30,4,"exception:exceptception,title:term,message:material,handle:on,",125,0.92,ALERT
487,,,84,3,,471,4.246549387772880,0
488,,,50,2,,431,2.6135021805763200,0
489,"public PlaPointFloat change_size(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}","public PlaPointFloat Change_scale(double p_old_strength){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double direction=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(rawNewx p_old_strength) / direction;
  double new_y=( new_ny p_old_strength) / direction;
  return new PlaPointFloat(rawNewx, new_ny);
}",71,5,"change_size:Change_scale,p_new_size:p_old_strength,length:direction,new_x:rawNewx,new_y: new_ny,",301,2.74,ALERT
491,,,47,2,,411,5.7900170167287200,0
492,,,71,5,,843,5.7616984963417100,0
493,,,556,13,,1684,10.329915750026700,0
494,,,172,9,,1664,16.03499926328660,0
495,"@Override public boolean open(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}
","@Override public boolean start(String esc){
  if (esc.equals(""r"")) {
    try {
      xiSteam=new FileImageInputStream(new File(filePath));
      processor=new LabelParser();
      metadata=processor.parseHeader(xiSteam);
      xiSteam.close();
      xiSteam=null;
    }
 catch (    IOException e) {
      try {
        xiSteam.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.start(esc));
}
",101,5,"open:start,parser:processor,access:esc,iStream:xiSteam,",163,2.78,ALERT
496,,,33,2,,426,4.25337301492691,0
497,"public String generateMinimalMATSimConfig(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}
","public String generateMinimalMAT3config(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}",106,5,"generateMinimalMATSimConfig:generateMinimalMAT3config,",68,0.51,ALERT
498,"public boolean isValidTemplate(){
  return isValidTemplate(template);
}
","public boolean isLegalHTML(){
  return isLegalHTML(template);
}
",13,1,"isValidTemplate:isLegalHTML,",34,0.23,ALERT
499,,,65,5,,967,7.104313536485040,0
500,,,58,1,,218,1.1182713627815200,0
501,,,133,7,,1368,12.239780493577300,0
502,,,53,3,,628,6.145061202843980,0
503,"@Override protected void tearDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
","@Override protected void  tearingdown() throws NamingException, Jmsception {
  NamingEnumeration<Binding> page=context.listBindings("""");
  while (page.hasMore()) {
    Binding connection=page.next();
    Object conconnFactorynnection.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
",62,5,"tearDown: tearingdown,JMSException:Jmsception,iter:page,binding:connection,",233,4.18,ALERT
504,,,34,2,,419,3.0144851207733200,0
505,,,203,9,,1699,12.268559118111900,0
506,"public static Calendar reduceCalendar(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}","public static Calendar reduceOperenda(Calendar yearbook){
  yearbook.set(Calendar.MILLISECOND,0);
  yearbook.set(Calendar.SECOND,0);
  yearbook.set(Calendar.MINUTE,0);
  yearbook.set(Calendar.HOUR,0);
  yearbook.set(Calendar.HOUR_OF_DAY,0);
  return yearbook;
}",68,2,"reduceCalendar:reduceOperenda,calendar:yearbook,",328,2.48,ALERT
507,,,49,2,,202,1.5525489767392500,0
508,"public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains("".mappingTable."")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}","public HubLinkMapping(String FileLoc,int numberOfHubi,Network net){
  this.numberOfHubi=numberOfHubi;
  if (FileLoc.contains("".mappingTable."")) {
    readMappingTable(FileLoc);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReaderhrr=new FileReader(FileLoc);
    BufferedReader pr=new BufferedReader(hr);
    String look;
    StringTokenizer  tokenize;
    String project;
    int linkType;
    look=pr.readLine();
    while (look != null) {
       tokenize=new StringTokenizer(look);
      for (int e=0; e < this.numberOfHubi; e++) {
        project= tokenize.nextToken();
        lilinkTypeint)Double.parseDouble(project);
        linkHubMapping.put(Integer.toString(linkType),e);
      }
      if ( tokenize.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      look=pr.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(net);
}",216,10,"fileName:FileLoc,numberOfHubs:numberOfHubi,network:net,fr:hr,br:pr,line:look,tokenizer: tokenize,token:project,linkId:linkType,i:e,",1074,7.56,ALERT
509,,,81,5,,744,5.536875549952190,0
511,,,181,8,,1052,6.004849354426070,0
512,"@Override public StateConnection onCloseRead(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCloseRead();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
","@Override public StateConnection onCompleteReader(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCompleteReader();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
",108,2,"onCloseRead:onCompleteReader,",38,0.21,ALERT
513,,,16,1,,240,2.7329137444496200,0
514,,,29,3,,463,2.601886026064560,0
515,,,17,1,,232,1.044794007142390,0
516,,,21,4,,774,5.560336116949720,0
517,,,26,2,,437,2.038377837340040,0
518,,,65,5,,844,7.100467562675480,0
519,"protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}","protected final void writtenR(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int lt=text.length();
    for (int i=0; i < lt; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}",76,5,"len:lt,writeS:writtenR,",91,0.56,ALERT
520,"public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException {
  MathUtils.checkNotNull(v1);
  MathUtils.checkNotNull(v2);
  field=v1.getField();
  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();
  data=MathArrays.buildArray(field,v1Data.length + v2.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(v2,0,data,v1Data.length,v2.length);
}","public ArrayFieldVector(FieldVector<T> valOne,T[]  v5) throws NullArgumentException {
  MathUtils.checkNotNull(valOne);
  MathUtils.checkNotNull( v5);
  fielbackOne.getField();
  final T[] v1Data=(valOv1Dattanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)valOne).dataimagealOne.toArray();
 imagea=MathArrays.buildArray(fbackvv1Datlength +  v5.length);
  System.arraycopy(v1Dat,0imagea,0,v1Dat.length);
  System.arraycopy( v5,0,image,vv1Datlength, v5.length);
}",123,5,"v1:valOne,v2: v5,field:back,v1Data:v1Dat,data:image,",269,1.91,ALERT
521,,,30,3,,618,3.963758337497710,0
522,,,30,2,,422,3.0749268929163600,0
523,"@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
","@Override public void callback(String domain,String key,XMLParseException lexException) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(lexException);
    try {
      fErrorHandler.callback(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
",71,5,"exception:lexException,error:callback,",67,0.48,ALERT
524,"public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}","public void  checkThenAcceptBoth_exceptualExecution() throws Throwable {
  for (  ExecutionMode mode : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean passFirst : new boolean[]{true,false})   for (  Integer V1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> gr=new CompletableFuture<>();
    final CFException ap=new CFException();
    final SubtractAction r1=r1w SubtractAction(mode);
    final SubtractAction r2=r2w SubtractAction(mode);
    final SubtractAction r3=r23w SubtractAction(mode);
    final CompletableFuture<Integer> ffstfFirst ? f : gr;
    final CompletableFuture<Integer> sSgn!fFirst ? f : gr;
    final Callable<Boolean> complete1=passFirst ? null : null;
    final Callable<Boolean> formTwo=passFirst ? null : null;
    final CompletableFuture<Void> h1=mh1e.thenAcceptBoth(f,gr,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=mh2e.thenAcceptBoth(f,gr,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(formTwo.call());
    final CompletableFuture<Void> h3=mo h15.thenAcceptBoth(f,gr,r23);
    checkCompletedWithWrappedException(h1,ap);
    checkCompletedWithWrappedException(h2,ap);
    checkCompletedWithWrappedException( h15,ap);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r23.assertNotInvoked();
    checkCompletedNormally(passFirst ? Sgn : fst,V1);
    checkCompletedExceptionally(passFirst ? fst : Sgn,ap);
  }
}",330,18,"testThenAcceptBoth_exceptionalCompletion: checkThenAcceptBoth_exceptualExecution,m:mode,failFirst:passFirst,v1:V1,g:gr,ex:ap,r3:r23,snd:Sgn,complete2:formTwo,h3: h15,",973,7.57,ALERT
525,"private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}","private int[] createEpochMonks(int yparchD,int MinMonth,int axyear,Map<Integer,int[]> dates){
  int numMinth=(maxyear- MinMonth + 1) * 12 + 1;
  int epochNight=0;
  int[]epimationMonthss=new int[numMinth];
  minDayLen=Integer.MAX_VALUE;
   maxDaylength=Integer.MIN_VALUE;
  for (int period=MinMonth;periodr <= axyear; period++) {
    int[] moimagesates.get(period);
    for (int module=0; module < 12; module++) {
      int lwordimages[module];
     epimationMonthssepochNighth++]=yparchD;
      if (word < 29 || word > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + MinMonth);
      }
      yparchD+=word;
      minDayLen=Math.min(minDayLen,word);
       maxDaylength=Math.max( maxDaylength,word);
    }
  }
 epimationMonthssepochNighth++]=yparchD;
  if (epochNight != epimationMonths.word) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochNight + "" should be ""+ epimationMonths.word);
  }
  return epimationMonths;
}",213,14,"createEpochMonths:createEpochMonks,epochDay:yparchD,minYear:MinMonth,maxYear:axyear,years:dates,numMonths:numMinth,epochMonth:epochNight,epochMonths:epimationMonths,minMonthLength:minDayLen,maxMonthLength: maxDaylength,year:period,months:images,month:module,length:word,",1125,12.87,ALERT
526,,,173,7,,1332,10.619588418801600,0
527,,,40,5,,849,8.303570755322770,0
528,"private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
","private int Write(FileSystem utils,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(utils.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
",106,8,"fs:utils,append:Write,",79,0.58,ALERT
529,"public void writeGolomb(int divisor,int value){
  int q=value / divisor;
  for (int i=0; i < q; i++) {
    writeBit(1);
  }
  writeBit(0);
  int r=value - q * divisor;
  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);
  if (r < ((2 << bit) - divisor)) {
    bit--;
  }
 else {
    r+=(2 << bit) - divisor;
  }
  for (; bit >= 0; bit--) {
    writeBit((r >>> bit) & 1);
  }
}","public void writeGolinob(int divitsored,int min){
  int qdvalmindivitsored;
  for (int id=0; id < d; id++) {
    writeBit(1);
  }
  writeBit(0);
  int rerrvalminq *ddivitsored;
  int bitR - Integer.numberOfLeadingZeros(divitsored - 1);
  if (r <err((2 << bitR divitsored)) {
    R--;
  }
 else {
    r+=err2 << bitR divitsored;
  }
  for (; R >= 0; R--) {
    writeBit((err >>> R) & 1);
  }
}",125,7,"writeGolomb:writeGolinob,divisor:divitsored,value:min,q:d,i:id,r:err,bit:R,",1123,9.18,ALERT
530,,,470,13,,2297,11.304323319594100,0
531,,,29,1,,225,1.5518886605898500,0
532,"private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){
  byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){
  byte[] length=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
  if (length != null) {
    return length;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return length;
      }
      sleepTime*=2;
      length=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
      if (length != null) {
        return length;
      }
    }
  }
  return length;
}",116,7,"result:length,",56,2.43,ALERT
534,,,17,1,,223,2.4585148135821000,0
535,,,79,5,,976,8.930731348196670,0
536,"private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}","private void  putASTUse(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}",25,1,"storeLastUsed: putASTUse,",26,0.17,ALERT
537,,,316,10,,1789,10.369148508707700,0
538,,,58,7,,1217,7.775194629033410,0
539,,,50,4,,696,5.994987495740260,0
540,,,106,5,,946,5.494247305393220,0
541,"public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}","public static String[] deccodeAll(String encodedArray){
  String[] articles=encodedArray.split(""_\\\\."");
  ArrayList<String> loop=new ArrayList<String>();
  for (int i=0ai i <aiarticles.length; ai++) {
    String itemcontenticles[ai];
    content=gsub(""__"",""_"",content);
    if (!content.equals("""")) {
      loop.add(content);
    }
  }
  return loop.toArray(new String[loop.size()]);
}",110,6,"decodeArray:deccodeAll,items:articles,list:loop,i:ai,item:content,",315,3.04,ALERT
543,,,14,1,,253,1.5749985218048100,0
544,,,14,1,,210,1.7071351329485600,0
545,,,50,3,,475,3.49914733171463,0
546,"public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}","public static void renderFlattenedAnnotation(final PdfObject font,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(font);
  if (image != null) {
    final GraphicsState groups=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=font.getFloatArray(PdfDictionary.Rect);
    if (font.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      font.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      groups.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    groups.x=rect[0];
  groups.y=rect[3] - iconHeight;
groups.CTM[2][0]=rect[0];
groups.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
groups.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
groups.x=rect[0] + iconHeight;
groups.y=rect[3];
groups.CTM[2][0]=rect[0] + iconHeight;
groups.CTM[2][1]=rect[3];
break;
case 180:
groups.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
groups.x=rect[0];
groups.y=rect[3] + iconHeight;
groups.CTM[2][0]=rect[0];
groups.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
groups.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
groups.x=rect[0] - iconHeight;
groups.y=rect[3];
groups.CTM[2][0]=rect[0] - iconHeight;
groups.CTM[2][1]=rect[3];
break;
}
if (font.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,groups.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,groups.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,groups,false,font.getObjectRefAsString(),-1);
if (font.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,groups.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,groups.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}",666,13,"gs:groups,form:font,",264,1.6,ALERT
547,,,48,4,,659,5.016043543815610,0
548,,,73,5,,648,7.345520790417990,0
549,"static long checkPreambleSize(Memory mem){
  final long cap=mem.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=mem.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return pre0;
}","static long checkPreamlsize(Memory alloc){
  final long caclloc.getCapacity();
  if (c < 8) {
    throwNotBigEnough(c,8);
  }
  final long prcond0lloc.getLong(0);
  final int ppreLs(int)(cond0 & 0X3FL);
  final iminred=Math.max(preLs << 3,8);
  if (c < min) {
    throwNotBigEnough(c,min);
  }
  return cond0;
}",91,6,"checkPreambleSize:checkPreamlsize,mem:alloc,cap:c,pre0:cond0,preLongs:preLs,required:min,",514,5.62,ALERT
550,"public Object pack(){
  if (collection) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}
","public Object  save(){
  if (collection) {
    List ml=(List)value;
    if (Types.isArray(type)) {
      Object[] ooid(Object[])Array.newInstance(itemType,ml.size());
      ml.toArray(oid);
      return oid;
    }
  }
  return value;
}
",68,3,"pack: save,l:ml,o:oid,",494,7.16,ALERT
551,,,56,4,,822,8.008223474025730,0
552,,,11,2,,348,5.944412914911910,0
553,"public static double max(double[] data){
  double max=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(max) || data[i] > max)     max=data[i];
  }
  return max;
}","public static double from(double[] partial){
  double from=Double.NaN;
  for (int i=0b i <bpartial.length; b++) {
    if (Double.isNaN(partial[b]))     continue;
    if (Double.isNaN(from) || dapartial] > brom)     from=partial[b];
  }
  return from;
}",77,3,"max:from,data:partial,i:b,",385,3.15,ALERT
554,,,154,5,,914,6.232183607419330,0
555,"private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}
","private void  onCopy(LinkedList<Integer> l,int i){
  l.add(i);
}
",22,3,"myAdd: onCopy,",18,0.12,ALERT
556,"static double computeDesiredEllipsoidMagnitude(final PlanetModel planetModel,final double x,final double y,final double z){
  return 1.0 / Math.sqrt(x * x * planetModel.inverseAbSquared + y * y * planetModel.inverseAbSquared + z * z * planetModel.inverseCSquared);
}","static double computeDesiredEllipsoidMillest(final PlanetModel  PlanetModule,final double e,final double oy,final double az){
  return 1.0 / Math.sqrt(x * x e  PeanetModule.inverseAbSquared + y * oy * oyPlanetModule.inverseAbSquared + z az z az  PlanetModule.inverseCSquared);
}",54,5,"computeDesiredEllipsoidMagnitude:computeDesiredEllipsoidMillest,planetModel: PlanetModule,x:e,y:oy,z:az,",330,2.93,ALERT
557,"private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
","private String replaceSuffix(String value,String willReject,String changeTo){
  String vvalue;
  if ((value == null) || (willReject == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,willReject);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
",74,5,"toReplace:willReject,",49,0.32,ALERT
558,,,122,8,,1503,16.351281372706100,0
559,,,90,5,,958,10.539413698514300,0
560,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void report(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.report(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",101,5,"build:report,",44,0.29,ALERT
561,,,30,2,,413,4.040099048614500,0
563,"public Class<?> loadClass(String name) throws ClassNotFoundException {
  return Class.forName(name);
}
","public Class<?>  loadFunction(String data) throws ClassNotFoundException {
  return Class.forName(data);
}
",22,2,"loadClass: loadFunction,name:data,",211,2.09,ALERT
564,"final public void println(String v){
  try {
    _out.println(v);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void throw(String message){
  try {
    _out.throw(message);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",44,2,"println:throw,v:message,",66,0.39,ALERT
565,,,33,3,,559,6.157573429743450,0
566,"public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){
  Rectangle bounds=c.getBounds();
  check(bounds);
  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);
}
","public void pprintButton(Graphics gd,JComponent lc,int x,int v,int w,int h){
  Rectangle bboundslc.getBounds();
  check(bounds);
  gd.drawImage(m_backImage,xxyvxx+ wwhh+ yvxxyvxx+ wwyv+ hhlc);
}
",71,8,"paintRect:pprintButton,g:gd,c:lc,y:v,",399,3.37,ALERT
567,,,18,2,,274,1.626503018538160,0
568,"public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}","public static TestResult execJavac(String Tocompute,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javacl=new Javac();
  Path path=new Path(p,dir.toString());
  javacl.setProject(p);
  javacl.setSrcdir(path);
  javacl.setDestdir(dir);
  javacl.setTarget(javaVersion);
  javacl.setSource(javaVersion);
  javacl.setSourcepath(new Path(p,""""));
  javacl.setIncludes(Tocompute);
  Path classPath=javacl.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javacl.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}",220,10,"javac:javacl,toCompile:Tocompute,",310,3.33,ALERT
569,"protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","protected synchronized void exec(long padding,byte[] binary) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)padding);
    byteBuffer.put(binary);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",58,3,"offset:padding,b:binary,write:exec,",95,0.58,ALERT
570,,,57,2,,240,1.417697580655420,0
571,,,18,1,,237,1.5652755737304700,0
572,,,102,4,,405,2.1410972078641300,0
573,"protected void writeLocation(String loc) throws IOException {
  hadAnnotations|=(loc != null);
  locOut.writeObject(loc);
}
","protected void sendObject(String iter) throws IOException {
  hadAnnotations|=(iter != null);
  locOut.writeObject(iter);
}
",26,3,"loc:iter,writeLocation:sendObject,",51,0.4,ALERT
574,"public static void resetContext(){
  contexts.set(null);
}
","public static void clearCache(){
  contexts.set(null);
}
",15,1,"resetContext:clearCache,",18,0.11,ALERT
575,,,84,5,,951,5.855535856882730,0
576,"public void clear(){
  m_Model.clear();
  setButtons(null);
}
","public void create(){
  m_Model.create();
  setButtons(null);
}
",18,1,"clear:create,",34,0.2,ALERT
577,,,44,2,,436,3.329711679617560,0
578,"protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
","protected void addOverrideNametranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
",95,7,"addFieldNameTranslation:addOverrideNametranslation,",75,1.1,ALERT
579,,,87,1,,235,1.814954396088920,0
580,"public void deletePoint(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}","public void deletePoint(int mount){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (mount <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(mount == Integer.MAX_VALUE ? ll.length : mount * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        mount=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        mount=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (mount >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      mount=currentLength - 1;
    }
 else     if (mount <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      mount=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,mount);
      System.arraycopy(poly.xs,mount + 1,newxs,mount,currentLength - mount - 1);
      System.arraycopy(poly.ys,0,newys,0,mount);
      System.arraycopy(poly.ys,mount + 1,newys,mount,currentLength - mount - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(mount);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}",590,11,"position:mount,",86,0.65,ALERT
581,,,50,2,,419,2.6464865167935700,0
582,"@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}
","@Nullable private static Bitmap extributeImage(Bitmap source,int width,int height){
  return extributeImage(source,width,height,OPTIONS_NONE);
}
",30,4,"extractThumbnail:extributeImage,",40,0.41,ALERT
583,,,20,2,,438,1.9822395006815600,0
584,,,112,7,,1351,11.387280611197200,0
585,,,41,3,,325,3.1940211772918700,0
586,,,48,3,,632,4.595378565788270,0
587,,,17,2,,431,2.19016197125117,0
588,,,58,1,,229,2.757752899328870,0
589,"protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}","protected Expression findOponent(String base){
  if (base != null && base.length() > 0) {
    base=base.trim();
    if (base.length() == 0) {
      return null;
    }
    StrinrightClosede=base;
    String rightSource=null;
    Connector opsetindOp(rightClose);
    if (set != null) {
      rirightSourcepsetetRightSide(rightClose);
      rightClose=rightClose.substring(0,set.sourceLoc);
      ExpressionrightExressorn=findOponent(rightClose);
      ExpressionrightExpressorn=findOponent(rightSource);
      if (rightExressor != null) {
        set.addExpr(rightExressor);
      }
      if (rightExpressor != null) {
        set.addExpr(rightExpressor);
      }
      return set;
    }
    opsetindMiniOp(rightClose);
    if (set != null) {
      rirightSourcepsetetRightSide(rightClose);
      rightClose=rightClose.substring(0,set.sourceLoc);
      ExpressionrightExressorn=findOponent(rightClose);
      ExpressionrightExpressorn=findOponent(rightSource);
      if (rightExressor != null) {
        set.addExpr(rightExressor);
      }
      if (rightExpressor != null) {
        set.addExpr(rightExpressor);
      }
      return set;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + base);
    }
    return findMathOp(base);
  }
  return null;
}",262,7,"findExpression:findOponent,source:base,leftSide:rightClose,rightSide:rightSource,op:set,leftExpression:rightExressor,rightExpression:rightExpressor,",356,4.74,ALERT
591,"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}","@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocaStyle(DccThrottle type,Block flk,float score){
  if (flk ==  refrittenced && score == desiredSpeedStep) {
    return;
  }
  float blockLength=flk.getLengthMm();
  if (flk ==  refrittenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
     refrittenced=flk;
  }
  changeLocaStyle(type,blockLength,score);
}",130,7,"blk:flk,speed:score,referenced: refrittenced,t:type,changeLocoSpeed:changeLocaStyle,",234,1.58,ALERT
592,,,110,3,,441,4.333178730805720,0
593,,,206,6,,1110,10.63026061852770,0
594,"private <T>BindingAmp<T> findObjectBinding(Key<T> key){
  Objects.requireNonNull(key);
  if (key.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0]));
}","private <T>BindingAmp<T> findObjectBatching(Key<T> sign){
  Objects.requireNonNull(sign);
  if (sign.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,sign.qualifiers()[0]));
}",70,2,"findObjectBinding:findObjectBatching,key:sign,",84,0.76,ALERT
595,"public List<Map<String,String>> list(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
","public List<Map<String,String>> batch(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
",156,6,"list:batch,",48,0.46,ALERT
596,,,33,1,,252,2.089949687321980,0
597,,,78,4,,805,6.052136806646980,0
598,,,24,2,,413,2.7265291730562800,0
599,,,141,7,,1311,7.8019890507062300,0
600,,,18,2,,429,3.8400641401608800,0
601,,,33,1,,212,1.4963318904240900,0
602,,,20,1,,230,1.3454928278923000,0
603,,,42,3,,509,3.646933650970460,0
604,"public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
","public void  connect(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
",37,3,"CONT: connect,",36,0.21,ALERT
606,,,251,10,,1695,13.022154100736000,0
607,,,17,1,,236,1.4075026512146000,0
608,,,73,6,,754,4.608932979901630,0
609,"public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}","public boolean controlRunModel(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int newOrder=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
newOrder=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(newOrder),Integer.valueOf(idx));
}
return ret;
}",325,8,"controlRunTrain:controlRunModel,oldIndex:newOrder,",85,0.68,ALERT
610,"private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
","private void release(ByteArray stringBuffer){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(stringBuffer)) {
      availableByteArrays.add(stringBuffer);
    }
  }
}
",48,2,"byteArray:stringBuffer,",36,0.36,ALERT
611,"public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){
  StorageEntity storageEntity=new StorageEntity();
  storageEntity.setName(storageName);
  storageEntity.setStoragePlatform(storagePlatformEntity);
  if (!CollectionUtils.isEmpty(attributes)) {
    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();
    storageEntity.setAttributes(attributeEntities);
    for (    Attribute attribute : attributes) {
      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();
      attributeEntities.add(attributeEntity);
      attributeEntity.setStorage(storageEntity);
      attributeEntity.setName(attribute.getName());
      attributeEntity.setValue(attribute.getValue());
    }
  }
  return storageDao.saveAndRefresh(storageEntity);
}
","public StorageEntity getMediaApplication(String storagePath,StoragePlatformEntity storageplatformentity,List<Attribute> attrs){
  StorageEntity storageInstance=new StorageEntity();
  storageInstance.setName(storagePath);
  storageInstance.setStoragePlatform(storageplatformentity);
  if (!CollectionUtils.isEmpty(attrs)) {
    List<StorageAttributeEntity> attrentities=new ArrayList<>();
    storageInstance.setAttributes(attrentities);
    for (    Attri argumentibute : attrs) {
      StorageAttributeEntity ributeImpl=new StorageAttributeEntity();
      attrentities.add(ributeImpl);
      atributeImpletStorage(storageInstance);
      ributeImpl.setName( argument.getName());
      ributeImpl.setValue( argument.getValue());
    }
  }
  return storageDao.saveAndRefresh(storageInstance);
}
",133,8,"createStorageEntity:getMediaApplication,storageName:storagePath,storagePlatformEntity:storageplatformentity,attributes:attrs,storageEntity:storageInstance,attributeEntities:attrentities,attribute: argument,attributeEntity:ributeImpl,",1033,6.99,ALERT
613,"public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){
  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {
    return false;
  }
  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);
  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);
  resp.setDateHeader(""Last-Modified"",lastMod);
  resp.setHeader(""ETag"",etag);
  if (checkETagValidators(req,resp,reqMethod,etag)) {
    return true;
  }
  if (checkLastModValidators(req,resp,lastMod)) {
    return true;
  }
  return false;
}
","public static boolean doCacheHeaderValidation(final SolrQueryRequest solrSereq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse page){
  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {
    return false;
  }
  final long firstmod=HttpCacheHeaderUtil.calcLastModified(solrSereq);
  final String etag=HttpCacheHeaderUtil.calcEtag(solrSereq);
  page.setDateHeader(""Last-Modified"",firstmod);
  page.setHeader(""ETag"",etag);
  if (checkETagValidators(req,page,reqMethod,etag)) {
    return true;
  }
  if (checkLastModValidators(req,page,firstmod)) {
    return true;
  }
  return false;
}
",119,7,"lastMod:firstmod,solrReq:solrSereq,resp:page,",209,2.17,ALERT
614,,,24,2,,418,2.67808522383372,0
615,"public byte[] encode1(final String s){
  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());
  final int nwritten=uc.encode(s,tmp);
  final int npack=LongPacker.getByteLength(nwritten);
  final byte[] a=new byte[npack + nwritten];
  final DataOutputBuffer dob=new DataOutputBuffer(0,a);
  try {
    dob.packLong(nwritten);
    dob.append(tmp.array(),0,tmp.pos());
    return a;
  }
  finally {
    try {
      dob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","public byte[] enprocessOne(final String sections){
  final ByteArrayBuffer tmp=newsupteArrayBuffer(sections.length());
  final int nwritte nwriteode(sections,sup);
  final intnpackk=LongPacker.getByteLength( nwrite);
  final byte[]pa=new bytenpackk +  nwrite];
  final DataOutputBuffer gob=new DataOutputBuffer(0,p);
  try {
   gobb.packLong( nwrite);
    gob.append(sup.array(),0,sup.pos());
    return p;
  }
  finally {
    try {
      gob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",134,7,"encode1:enprocessOne,s:sections,tmp:sup,nwritten: nwrite,a:p,dob:gob,",298,2.78,ALERT
616,,,34,2,,422,2.9055278460184700,0
617,,,106,6,,1114,15.07864071528120,0
618,,,137,8,,1510,8.010575564702350,0
619,,,77,5,,977,10.456155880292300,0
620,"@SuppressLint(""NewApi"") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}","@SuppressLint(""NewApi"") @Nullable public static Drawable inslation(boolean forceSystemHandlingwhenpossibly,@NonNull Resources flows,@DrawableRes int  data){
  boolean systemHandlerlying=isSystemHandling(forceSystemHandlingwhenpossibly);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString( data),systemHandlerlying));
  if (systemHandlerlying) {
    return flows.getDrawable( data,null);
  }
  try {
    return VectorDrawable.create(flows, data);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}",99,5,"inflate:inslation,forceSystemHandlingWhenPossible:forceSystemHandlingwhenpossibly,resources:flows,id: data,systemHandling:systemHandlerlying,",837,7.56,ALERT
621,,,60,5,,976,8.07657738129298,0
622,,,116,6,,1035,13.934459670384700,0
625,,,44,4,,767,4.9275906682014500,0
626,"public void addToDictionary(String s){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(s.trim());
}
","public void addFromdet(String ws){
  if (!getAutoComplete())   return;
  if (state == null) {
    setUp();
    this.state=createDefaultDictionary();
  }
  dstateaddEntry(ws.trim());
}
",49,3,"addToDictionary:addFromdet,s:ws,dict:state,",176,1.69,ALERT
627,"private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}","private static Key CreatedesKey(byte[] classes,int length){
  byte[]  keyPages=new byte[7];
  System.arraycopy(classes,length, keyPages,0,7);
  byte[] document=new byte[8];
  mdocument0]= keyPages[0];
  madocument]=(byte)( keyPages[0] << 7 | ( keyPages[1] & 0xff) >>> 1);
  madocument]=(byte)( keyPages[1] << 6 | ( keyPages[2] & 0xff) >>> 2);
  madocument]=(byte)( keyPages[2] << 5 | ( keyPages[3] & 0xff) >>> 3);
  madocument]=(byte)( keyPages[3] << 4 | ( keyPages[4] & 0xff) >>> 4);
  madocument]=(byte)( keyPages[4] << 3 | ( keyPages[5] & 0xff) >>> 5);
  madocument]=(byte)( keyPages[5] << 2 | ( keyPages[6] & 0xff) >>> 6);
  mdocument7]=(byte)( keyPages[6] << 1);
  oddParity(document);
  return new SecretKeySpec(document,""DES"");
}",273,5,"createDESKey:CreatedesKey,bytes:classes,offset:length,keyBytes: keyPages,material:document,",795,8.23,ALERT
628,,,48,3,,455,3.4201213399569200,0
629,,,60,4,,822,6.456676161289220,0
630,"public void drawRenderedImage(RenderedImage img,AffineTransform xform){
  if (img == null) {
    return;
  }
  mPrintMetrics.drawImage(this,img);
  mDrawingArea.addInfinite();
}
","public void drawRaggedMedia(RenderedImage Image,AffineTransform xform){
  if (Image == null) {
    return;
  }
  mPrintMetrics.drawImage(this,Image);
  mDrawingArea.addInfinite();
}
",37,3,"img:Image,drawRenderedImage:drawRaggedMedia,",60,1.65,ALERT
631,"public int compareTo(CharBuffer otherBuffer){
  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();
  int thisPos=position;
  int otherPos=otherBuffer.position;
  char thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte=get(thisPos);
    otherByte=otherBuffer.get(otherPos);
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return remaining() - otherBuffer.remaining();
}","public int compCompareto(CharBuffer anotherQueue){
  int cocomparingRamainremaining() < anotherQueue.remaining()) ? remaining() : anotherQueue.remaining();
  int thesePosition=position;
  int oanotherPostanotherQueue.position;
  char anotherByte, thisbyte;
  while (comparingRamain > 0) {
    thisByanotherBytehesePosition);
    othethisbytetherQueue.get(anotherPost);
    if (anotherByte != thisbyte) {
      return anotherByte < thisbyte ? -1 : 1;
    }
    thesePosition++;
    anotherPost++;
    comparingRamain--;
  }
  return remaining() - anotherQueue.remaining();
}",113,7,"compareTo:compCompareto,otherBuffer:anotherQueue,compareRemaining:comparingRamain,thisPos:thesePosition,otherPos:anotherPost,thisByte:anotherByte,otherByte:thisbyte,",967,16.15,ALERT
632,"private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
","private Element addEndPoints(String this,String adrWinding,String adrlocation,String attrResultPath) throws DOMException {
  if (this == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (adrWinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (adrlocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element  endPtz=doc.createElement(this);
  endPtzt.setAttribute(SAMLNames.BINDING,adrWinding);
  endPtzt.setAttribute(SAMLNames.LOCATION,adrlocation);
  if (attrResultPath != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResultPath endPtz endPt.setAttribute(SAMLNames.RESPLOC,attrResultPath);
  }
  return  endPtz;
}
",119,6,"createEndPoint:addEndPoints,name:this,attrBinding:adrWinding,attrLocation:adrlocation,attrResponseLocation:attrResultPath,endPt: endPtz,",505,3.8,ALERT
633,,,31,3,,485,2.934614149729410,0
634,"public void registerSensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}","public void  RegisterSensor(Sensor l,int ii){
  if ((ii < 0) || (ii > ((numInputCards() * bitsPerCard) - 1)) || (ii > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(ii + 1));
    return;
  }
  hasActiveSensors=true;
  if (ssenderFunctionii] == null) {
    ssenderFunctionii]=l;
    if (llastCreatedService< ii) {
      llastCreatedServiceii;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + ii + 1));
  }
}",125,5,"registerSensor: RegisterSensor,s:l,i:ii,sensorArray:senderFunction,lastUsedSensor:lastCreatedService,",278,4.95,ALERT
635,,,37,1,,251,2.3021804809570300,0
636,"private static ClassNode makeType(ClassNode cn,boolean usingClass){
  if (usingClass) {
    ClassNode clazzType=CLASS_Type.getPlainNodeReference();
    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)});
    return clazzType;
  }
 else {
    return cn;
  }
}
","private static ClassNode parseClass(ClassNode css,boolean Usingclass){
  if (Usingclass) {
    ClassNode clanceInfo=CLASS_Type.getPlainNodeReference();
    cclanceInfosetGenericsTypes(new GenericsType[]{new GenericsType(css)});
    return clanceInfo;
  }
 else {
    return css;
  }
}
",54,4,"makeType:parseClass,cn:css,usingClass:Usingclass,clazzType:clanceInfo,",211,2.04,ALERT
637,"public static InputStream streamFromString(String location) throws IOException {
  InputStream is=null;
  URL url=urlFromString(location,null,false);
  if (url != null) {
    is=url.openStream();
  }
 else {
    File f=new File(location);
    if (f.exists())     is=new FileInputStream(f);
  }
  if (is == null) {
    return null;
  }
 else   if (isGZipFile(location)) {
    return new GZIPInputStream(is);
  }
 else {
    return is;
  }
}
","public static InputStream streamFromString(String region) throws IOException {
  InputStream is=null;
  URL url=urlFromString(region,null,false);
  if (url != null) {
    is=url.openStream();
  }
 else {
    File f=new File(region);
    if (f.exists())     is=new FileInputStream(f);
  }
  if (is == null) {
    return null;
  }
 else   if (isGZipFile(region)) {
    return new GZIPInputStream(is);
  }
 else {
    return is;
  }
}
",107,5,"location:region,",49,0.31,ALERT
638,,,37,2,,264,2.1148576855659500,0
639,,,37,3,,538,5.880099050203960,0
640,,,89,3,,455,6.271560609340670,0
641,,,113,4,,783,9.295385114351910,0
642,,,31,2,,410,4.161148365338640,0
643,"public static Byte[] valuesOf(byte[] array){
  Byte[] dest=new Byte[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Byte.valueOf(array[i]);
  }
  return dest;
}","public static Byte[] typesOf(byte[] null){
  Byte[]routet=new Byte[null.length];
  for (intparti=0;parti < null.length; part++) {
   routetparti]=Byte.valueOf(null[part]);
  }
  return route;
}",63,4,"valuesOf:typesOf,array:null,dest:route,i:part,",319,2.77,ALERT
644,,,47,4,,692,5.519483331839240,0
645,,,37,2,,417,4.067624302705130,0
646,"private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
","private boolean Announcing(String[] users){
  if (dataPadatapackagesll || firstLocManagerr.equals(myLocator) || !Arrays.equalslastGrlementss,users)) {
    List<DatagramPacket> Packets=new ArrayList<DatagramPacket>();
    Discovery adiscovery;
    try {
      adiscovery=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator eiadinecoveryo.encodeMulticastAnnouncement(new MulticastAnnouncementannouncementSeqNoo++,myLocator.getHost(),myLocator.getPort(),users,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ine.hasNext()) {
      try {
        Packets.addAll(Arrays.asList(ine.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    firstLocManager=myLocator;
   lastGrlementss=users;
    datapackages=Packets.toArray(new DatagramPacket[Packets.size()]);
  }
  try {
    send(datapackages);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
",233,9,"announce:Announcing,groups:users,packets:Packets,disco:adiscovery,ei:ine,lastLocator:firstLocManager,lastGroups:lastGrlements,dataPackets:datapackages,",415,3.42,ALERT
647,"public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
","public ArrayList<ConstraintWidget> findWides(WidgetContainer folder,int i,int ay,int gender,int crop){
  ArrayList<ConstraintWidget>  Found=new ArrayList<>();
  Rectangle circle=new Rectangle(i,ay,gender,crop);
  for (  ConstraintWidgwlget : folder.getChildren()) {
    WidgetCompanCompanionnion=(WidgetCompanion)wl.getCompanionWidget();
    WidgetDecorator decurators=Companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decurators.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(wl.getDrawX(),wl.getDrawY(),wl.getWidth(),wl.getHeight()pasesRectangle bounds=new Rectangle(wl.getDrawX(),wl.getDrawY(),wl.getWidth(),wl.getHeight());
    if (circle.intersects(pases)) {
       Found.add(wl);
    }
  }
  return  Found;
}
",154,12,"findWidgets:findWides,container:folder,x:i,y:ay,width:gender,height:crop,found: Found,area:circle,widget:wl,companion:Companion,decorator:decurators,bounds:pases,",753,5.15,ALERT
648,"public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}","public void register(IResource[] resources,String source,boolean keepSlocking,IProgressMonitor widget) throws TeamException {
  if (widget == null) {
    widget=new NullProgressMonitor();
  }
  Map db=getProviderMapping(resources);
  S keyGroupSet=db. keyGroup();
  widget.beginTask("""", keyGroup.size() * 1000);
  widget.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iteieeyGroup.ie();
  while (ie.hasNext()) {
    IProgressMonitortransMonitorr=new SubProgressMonitor(widget,1000);
    SVNTeamProproviderovider=(SVNTeamProvider)ie.next();
    Licontist=(List)db.get(provider);
    IResource[] providerResources=(IResource[])cont.toArray(new IResource[cont.size()]);
    provproviderckin(provproviderResourcesrce,keepSlocking,IResource.DEPTH_INFINITE,transMonitor);
  }
}",178,12,"commit:register,comment:source,keepLocks:keepSlocking,monitor:widget,table:db,keySet: keyGroup,iterator:ie,subMonitor:transMonitor,list:cont,",677,5.36,ALERT
649,"public static PlainText plain(short text){
  return plain(Integer.toString(text));
}
","public static PlainText cache(short attribute){
  return cache(Integer.toString(attribute));
}
",21,2,"plain:cache,text:attribute,",66,0.39,ALERT
650,"public double adjustedPow10(double val){
  boolean negFlag=(val < 0.0);
  if (negFlag) {
    val=-val;
  }
  double res;
  if (val < 1.0) {
    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,val);
  }
  return negFlag ? (-res) : res;
}","public double  doublePows90(double al){
  boolean negFlags=(al < 0.0);
  if (negFlags) {
    al=-al;
  }
  double res;
  if (al < 1.0) {
    res=(Math.pow(10,al + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,al);
  }
  return negFlags ? (-res) : res;
}",83,4,"val:al,negFlag:negFlags,adjustedPow10: doublePows90,",124,1.76,ALERT
651,"private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}","private TransportNetwork loadScaching(String zoneID){
  try {
    String filename=zoneID + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,zoneID + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}",252,8,"checkCached:loadScaching,networkId:zoneID,",261,1.37,ALERT
652,,,22,2,,443,2.502591292063400,0
653,,,68,5,,892,5.183643551667530,0
654,,,48,4,,691,4.643780303001400,0
655,"private void createMissingValues(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}","private void createmissingMaps(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}",165,5,"createMissingValues:createmissingMaps,",158,1.1,ALERT
656,"public long inactiveTimeMillis(){
  return System.currentTimeMillis() - lastTimeMillis;
}
","public long inactiveTimeCenti(){
  return System.currentTimeMillis() - lastTimeMillis;
}
",16,1,"inactiveTimeMillis:inactiveTimeCenti,",26,0.23,ALERT
658,,,36,2,,346,3.9519763549168900,0
659,"public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}","public String Subsubject(String subject,int start,int set){
  if (set == -1 || set >= subject.length()) {
    return subject.Subsubject(start);
  }
  return subject.Subsubject(start,set);
}",50,4,"stop:set,substring:Subsubject,",72,0.62,ALERT
660,"private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}","private void addLimitedMitrejoin(LineSegment etZero,LineSegment offset1,double path,double mitreDir){
  Coordinate baseTt=seg0.p1;
  double ang0=Angle.angle(baseTt,seg0.p0);
  double ANG01=Angle.angle(baseTt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,baseTt,seg1.p1);
  double  angDiffDiff=angDiff / 2;
  double mmidAxAngle.normalize(ang0 +  angDiffDiff);
  doublemitreHalfMing=Angle.normalize(midAx + Math.PI);
  dmitrexDirreDmitreDirimit * path;
  double bbevelDistmmitrexDir* Math.abs(Math.sin( angDiffDiff));
  dobeviousHalfLengthlfLen=path - bevelDist;
  double bbevelSandKbaseTt.x + mmitrexDir* Math.cos(mitreHalfMin);
  double bbeployMiddleybaseTt.y + mmitrexDir* Math.sin(mitreHalfMin);
  Coordinate bevelbevelMidPtnCoordinate(bevelSandK,beployMiddley);
  LineSegment mmitrexMidlinenew LineSegment(baseTt,bevelMidPtn);
  Coordinate bevelEbevelEndLeftmitrexMidlinetAlongOffset(1.0,beviousHalfLength);
  Coordinate bevelEbevelEndRightmitrexMidlinetAlongOffset(1.0,-beviousHalfLength);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}",255,21,"addLimitedMitreJoin:addLimitedMitrejoin,offset0:etZero,distance:path,mitreLimit:mitreDir,basePt:baseTt,ang1:ANG01,angDiffHalf: angDiffDiff,midAng:midAx,mitreMidAng:mitreHalfMin,mitreDist:mitrexDir,bevelDelta:bevelDist,bevelHalfLen:beviousHalfLength,bevelMidX:bevelSandK,bevelMidY:beployMiddley,bevelMidPt:bevelMidPtn,mitreMidLine:mitrexMidline,",794,13.98,ALERT
661,,,39,2,,431,3.4881163279215500,0
662,"protected int drawNextEventTimeDiff(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}","protected int  getNextEventEventOffset(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}",45,2,"drawNextEventTimeDiff: getNextEventEventOffset,",25,0.17,ALERT
663,,,17,2,,377,2.36065886815389,0
664,"protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}","protected boolean iscompetitive(Taxa taxa,List<Taxon>  availableTaxes){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (! availableTaxes.contains(taxon)) {
      return false;
    }
  }
  return true;
}",63,5,"isCompatible:iscompetitive,availableTaxa: availableTaxes,",66,0.68,ALERT
665,"public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){
  final String alias2=SqlValidatorUtil.getAlias(node,-1);
  final String alias3=alias2 != null ? alias2 : ""t"";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;
  return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));
}","public Result reverse(SqlNode parser,Collection<Clause> Clacuse,RelNode role){
  final String alalpha4qlValidatorUtil.getAlias(parser,-1);
  final String  alias03=alpha4 != null ? alpha4 : ""t"";
  final String alias42qlValidatorUtil.uniquify( alias03,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final Strinname6s5=alpha4 == null || !alpha4.equals(ias42) ? ias42 : null;
  return new Result(parser,Clacuse,name6,Collections.singletonList(Pair.of(aias42role.getRowType())));
}",110,8,"result:reverse,node:parser,clauses:Clacuse,rel:role,alias2:alpha4,alias3: alias03,alias4:ias42,alias5:name6,",730,7.51,ALERT
666,,,24,2,,365,2.299914813041690,0
667,"public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void performingLoadPlace(String schemaPrefixFilesName,String celFilepath,ContainerConfig ContainerDesign){
  try {
    File ffileWithdefaultConfigurationcreateContainerSchemaFile(schemaPrefixFilesName,celFilepath);
    updateFile(cContainerDesignffileWithdefaultConfigurationgetPath(),schemaPrefixFilesName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",55,5,"performSaveAs:performingLoadPlace,schemaPrefixFileName:schemaPrefixFilesName,selFilePath:celFilepath,containerConfig:ContainerDesign,fileWithDefaultConfiguration:fileWithdefaultConfiguration,",288,2.11,ALERT
668,,,60,2,,268,5.114081275463100,0
669,"@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}
","@Override public SelectableChannel selectableConnection(){
  return socketChannel;
}
",12,1,"selectableChannel:selectableConnection,",25,0.14,ALERT
670,,,88,2,,376,2.9526235659917200,0
671,,,170,7,,1284,11.389282643795000,0
672,,,160,5,,910,6.348454797267910,0
674,"private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
","private void closeandOpen(boolean replace){
  content.setEnabled(false);
  if (duration != null) {
    duration.cancel();
    duration=null;
  }
  if (timerNextSyn != null) {
    timerNextSyn.cancel();
    timerNextSyn=null;
  }
  if (replace) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent info=new Intent();
  info.setAction(Intent.ACTION_VIEW);
  info.putExtra(PARAM_NOTE,note);
  info.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,info);
  finish();
}
",130,5,"saveAndClose:closeandOpen,save:replace,timer:duration,timerNextSync:timerNextSyn,data:info,",252,1.5,ALERT
675,"private void warning(String msg,Throwable th){
  warning(msg);
  th.printStackTrace();
}
","private void checking(String log,Throwable path){
  checking(log);
  path.printStackTrace();
}
",23,3,"warning:checking,msg:log,th:path,",252,1.72,ALERT
676,"private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
","private void captureSameStr(String oldString,String oldstring,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? oldstring != null : !oldString.equals(oldstring)) {
    map.put(appName,oldstring);
  }
}
",66,5,"captureDifferentString:captureSameStr,newString:oldstring,",92,1.11,ALERT
677,"public void collapseTree(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}","public void  collapsedIndex(){
  for (int name=1; name < tree.getRowCount(); ++name) {
    tree.collapseRow(name);
  }
}",34,2,"collapseTree: collapsedIndex,i:name,",444,2.18,ALERT
678,"void wakeOut(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(msg);
  }
 }
","void workout(){
  OnAvailable inRef=_outFlow;
  if (inRef == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe  stateold;
  StateOutPipe StateOld;
  do {
     stateold=_stateOutRef.get();
    if (! stateold.isFull()) {
      return;
    }
    sStateOld stateold.toWake();
  }
 while (!_stateOutRef.compareAndSet( stateold,StateOld));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<Tregsg=new PipeWakeOutMessage<>(outbox,_outRef,this,inRef);
    outbox.offer(reg);
  }
 }
",138,5,"wakeOut:workout,outFlow:inRef,stateOld: stateold,stateNew:StateOld,msg:reg,",380,2.71,ALERT
679,,,72,1,,231,1.5660325010617600,0
680,"private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
","private Object createInformer(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String email=completeXform(convertUuidsToIds(post));
    File ile=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(email,ile.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter decounter=guessEncounterFromXformSubmission(post);
  if (decounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(decounter,returnJson);
  return returnJson;
}
",142,7,"file:ile,xml:email,createInner:createInformer,encounter:decounter,",158,1.59,ALERT
681,,,51,4,,822,6.463422588507330,0
682,"public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}","public OsmElement asteHome(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}",213,6,"pasteFrom:asteHome,",43,0.66,ALERT
683,,,26,3,,620,4.9505416790644300,0
684,"private static native boolean renderFrame(int[] pixels,long gifFileInPtr,int[] metaData);
","private static native boolean transformMedia(int[] npixel,long gifFileInPtr,int[] metaData);
",20,4,"pixels:npixel,renderFrame:transformMedia,",49,0.41,ALERT
685,"protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
","protected HttpURLConnection configureRequest(final HttpURLConnection hello){
  if (credentials != null)   hello.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  hello.setRequestProperty(HEADER_USER_AGENT,userAgent);
  hello.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return hello;
}
",48,2,"request:hello,",38,0.29,ALERT
686,"public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {
  try {
    T result=action.call(self);
    Closeable temp=self;
    self=null;
    temp.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(self);
  }
}
","public static <T,PUT extends Closeable>T wiWithOpenabilityUT manager,@ClosureParams(value=FirstParam.class) Closure<T> view) throws IOException {
  try {
    T rfuncactviewll(manager);
    Closeable temtempnager;
    manager=null;
    temp.close();
    return func;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(manager);
  }
}
",75,6,"U:PUT,withCloseable:WithOpenability,self:manager,action:view,result:func,",269,3.34,ALERT
688,"public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static String  Enode(Serializable ops){
  ByteArrayOutputStream boot=new ByteArrayOutputStream();
  try {
    ObjectOutputStream pins=new ObjectOutputStream(boot);
    try {
      pins.writeObject(ops);
      pins.flush();
    }
  finally {
      pins.close();
    }
    return Base64.encodeBytes(boot.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",81,4,"oos:pins,bos:boot,o:ops,encode: Enode,",116,0.7,ALERT
689,,,19,2,,379,2.680894951025650,0
690,"public void send(XTraceReport report){
  outgoing.offer(report);
}
","public void process(XTraceReport report){
  outgoing.offer(report);
}
",16,2,"send:process,",31,0.21,ALERT
691,"public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}
","public default void addSourceFile(final ContentProvider contentManager,final String fileType,final EntryInformation  entryInfo) throws IOException {
  addSourceFile(contentManager,fileType, entryInfo,Optional.empty());
}
",36,4,"addFile:addSourceFile,contentProvider:contentManager,fileName:fileType,entryInformation: entryInfo,",180,1.26,ALERT
692,"public void shutdown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
","public void killDown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread nic : networkThreads) {
      nic.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
",50,3,"n:nic,shutdown:killDown,",52,0.22,ALERT
693,"private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){
  List<ProgressThread> toRemove=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread pg : queuedThreads) {
      if (!pg.isBlockedByDependencies()) {
        if (!pg.isWaiting()) {
          toRemove.add(pg);
          EXECUTOR.execute(pg.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThread pg : toRemove) {
synchronized (LOCK) {
      queuedThreads.remove(pg);
    }
  }
}
","private static final void checkQueueForDependenciesAndExecuteunblocking(){
  List<ProgressThread> toRemove=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread rg : queuedThreads) {
      if (!rg.isBlockedByDependencies()) {
        if (!rg.isWaiting()) {
          toRemove.add(rg);
          EXECUTOR.execute(rg.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThread rg : toRemove) {
synchronized (LOCK) {
      queuedThreads.remove(rg);
    }
  }
}
",99,3,"pg:rg,checkQueueForDependenciesAndExecuteUnblockedTasks:checkQueueForDependenciesAndExecuteunblocking,",88,0.82,ALERT
694,,,46,3,,627,3.2701016823450700,0
695,,,30,1,,245,1.46377698580424,0
696,,,159,8,,1415,11.033162152767200,0
697,"public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}
","public void registerImage(PhotoEntity picture){
  photos.remove(picture);
}
",16,2,"removePhoto:registerImage,photo:picture,",49,0.27,ALERT
698,,,65,3,,467,3.1662004391352300,0
699,"public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}","public static double expp(double z,double mad,double space){
  if (!(z > 0) || z == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=ivz - mad) / mad;
  return iv < Double.MAX_VALUE ? 0.5 * Math.log(space / (MathUtil.TWOPI * z * z* z)) - space * iv * iv / (2. * z) : Double.NEGATIVE_INFINITY;
}",94,5,"logpdf:expp,x:z,mu:mad,shape:space,v:iv,",313,1.75,ALERT
701,"public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
","public String  getToFile(){
  final StringBuilder BB=new StringBuilder();
  BB.append(amount);
  BB.append("" "");
  BB.append(itemName);
  BB.append("" on "");
  BB.append(target);
  return BB.toString();
}
",58,2,"betToString: getToFile,sb:BB,",61,0.41,ALERT
702,,,27,2,,434,2.596377936999000,0
703,"public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}","public double[] pcopy(double x_[]){
  return popY(new double[][]{x_})[0];
}",30,2,"popy:pcopy,",20,0.18,ALERT
704,"private static String normalisePath(String path){
  return path.replace('\\\\','/');
}
","private static String normalizePath(String walk){
  return walk.replace('\\\\','/');
}
",20,2,"normalisePath:normalizePath,path:walk,",235,3.12,ALERT
705,"private String trimUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}","private String trimUrl(String iri){
  if (iri == null)   return """";
  if (iri.endsWith(""/""))   iri=iri.substring(0,iri.length() - 1);
  return iri;
}",47,2,"uri:iri,",40,0.32,ALERT
706,"private void ensureSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}","private void enssureSIZE(){
  if (assets == EMPTY_CHILDREN) {
    assets=new FPNode[1];
    return;
  }
  newsmallsize=assets.length == 1 ? INITIAL_SIZE : (assets.length << 1);
  assets=Arrays.copyOf(assets,newsmall);
}",55,3,"ensureSize:enssureSIZE,children:assets,newsize:newsmall,",194,2.27,ALERT
707,"private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}","private static void insertCommentsInNode(Node node,List<Comment> comments2Component){
  if (comments2Component.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : comments2Component) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    comments2Component.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributionComments=new LinkedList<Comment>();
  for (  Comment comment : comments2Component) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributionComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributionComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(comments2Component);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributionComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  comments2Component.removeAll(attributionComments);
  for (  Comment c : comments2Component) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}",370,12,"attributedComments:attributionComments,commentsToAttribute:comments2Component,",126,1.23,ALERT
708,,,118,5,,939,11.20017698208490,0
709,"private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      cache.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}","private void waitForIteratorsCleared(IgniteCache<String,Integer> pool,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      pool.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}",106,5,"cache:pool,",45,0.28,ALERT
710,,,78,5,,998,7.434955247243250,0
711,,,82,4,,679,5.6754258672396300,0
712,"public void showScores(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
","public void  ShowScategories(boolean flag){
  mShowStores=flag;
  SwingUtilities.invokeLater(null);
}
",20,3,"showScores: ShowScategories,mShowScores:mShowStores,",82,0.56,ALERT
714,,,20,2,,292,1.7255644877751700,0
715,,,30,3,,502,2.7423213601112400,0
716,"public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}
","public boolean  registeruser(String ume,String account,String URI) throws DataAccessException {
  if (checkUsernameExists(ume)) {
    return false;
  }
  storeUser(ume,account,URI);
  return true;
}
",41,4,"registerUser: registeruser,username:ume,password:account,uri:URI,",214,1.18,ALERT
717,,,69,5,,857,6.990797889232640,0
718,,,14,1,,214,1.10225799481074,0
719,,,101,7,,1287,10.095554411411300,0
720,"public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}","public String[] ShowProduct() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] locks=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] rules=new String[2];
  for (  String in : locks) {
    int index=match(in,regex,rules);
switch (index) {
case 0:
      returnVal[1]=rules[0];
    break;
case 1:
  returnVal[0]=rules[0];
break;
case 2:
returnVal[0]=rules[0];
break;
}
}
return returnVal;
}",188,10,"groups:rules,lines:locks,line:in,showVersion:ShowProduct,",243,1.61,ALERT
721,"public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}","public void  copyfromChanged(Change resourceSwitch){
  if (resourceSwitch.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(resourceSwitch.revision());
  }
  if (resourceSwitch.timestamp() != null) {
    Date version=resourceSwitch.timestamp();
    Calendar coll=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    coll.setTime(version);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(coll),XMLSchema.DATETIME);
  }
}",101,6,"sourceChange:resourceSwitch,c:coll,date:version,importFromChange: copyfromChanged,",124,1.21,ALERT
722,,,28,3,,450,4.133789034684500,0
723,,,76,3,,641,5.710811150074010,0
724,,,219,9,,1682,13.061811820666000,0
725,,,16,2,,404,2.469577598571780,0
726,"public static void restorePreviousOutAndErrStream(){
  if (!alreadyMuted) {
    return;
  }
  System.setOut(latestOut);
  System.setErr(latestErr);
  alreadyMuted=false;
}
","public static void restorePreviousOutAndTrrstream(){
  if (!alreadyMuted) {
    return;
  }
  System.setOut(latestOut);
  System.setErr(latestErr);
  alreadyMuted=false;
}
",35,1,"restorePreviousOutAndErrStream:restorePreviousOutAndTrrstream,",20,0.33,ALERT
727,"protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){
  if (points.size() > 1) {
    float previousPointX=points.get(0);
    float previousPointY=points.get(1);
    for (int k=0; k < points.size(); k+=2) {
      if (k == 2) {
        if (Math.abs(points.get(2) - points.get(0)) > renderer.getDisplayChartValuesDistance() || Math.abs(points.get(3) - points.get(1)) > renderer.getDisplayChartValuesDistance()) {
          drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex)),points.get(0),points.get(1) - renderer.getChartValuesSpacing(),paint,0);
          drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + 1)),points.get(2),points.get(3) - renderer.getChartValuesSpacing(),paint,0);
          previousPointX=points.get(2);
          previousPointY=points.get(3);
        }
      }
 else       if (k > 2) {
        if (Math.abs(points.get(k) - previousPointX) > renderer.getDisplayChartValuesDistance() || Math.abs(points.get(k + 1) - previousPointY) > renderer.getDisplayChartValuesDistance()) {
          drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + k / 2)),points.get(k),points.get(k + 1) - renderer.getChartValuesSpacing(),paint,0);
          previousPointX=points.get(k);
          previousPointY=points.get(k + 1);
        }
      }
    }
  }
 else {
    for (int k=0; k < points.size(); k+=2) {
      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + k / 2)),points.get(k),points.get(k + 1) - renderer.getChartValuesSpacing(),paint,0);
    }
  }
}","protected void drawChartVersionsFont(Canvas  Canvas,XYSeries stats,XYSeriesRenderer rougherer,Paint payredict,List<Float> bands,int seriesWidth,int  startHeight){
  if (bands.size() > 1) {
    floatpreviouspointXPX=bands.get(0);
    floatpreviousFeatureyY=bands.get(1);
    for (intklk=0;klk < bands.size(); kl+=2) {
      if (kl == 2) {
        if (Math.abs(pobandset(2) - pobandset(0)) > rougherer.getDisplayChartValuesDistance() || Math.abs(pbandsget(3) - pbandsget(1)) > rougherer.getDisplayChartValuesDistance()) {
          drawText( Canvas,getLabelroughererr.getChartValuesFormat(),stats.getY(sta startHeightpointbands0),pointbands1) - rougherer.getChartValuesSpacing(),payredict,0);
          drawText( Canvas,getLabelroughererr.getChartValuesFormat(),stats.getY(sta startHeight1)),pointbands2),pointbands3) - rougherer.getChartValuesSpacing(),payredict,0);
         previouspointXPX=bands.get(2);
         previousFeatureyY=bands.get(3);
        }
      }
 else       if (kl > 2) {
        if (Math.abs(pobandset(k) -klppreviouspointXP > rougherer.getDisplayChartValuesDistance() || Math.abs(pbandsget(k +kl1) - ppreviousFeaturey > rougherer.getDisplayChartValuesDistance()) {
          drawText( Canvas,getLabelroughererr.getChartValuesFormat(),stats.getY(sta startHeightk /kl2)),pointbandsk),pklintbandsk + 1kl - rougherer.getChartValuesSpacing(),payredict,0);
         previouspointXPX=bands.get(kl);
         previousFeatureyY=bands.get(kl + 1);
        }
      }
    }
  }
 else {
    for (intklk=0;klk < bands.size(); kl+=2) {
      drawText( Canvas,getLabelroughererr.getChartValuesFormat(),stats.getY(sta startHeightk /kl2)),pointbandsk),pklintbandsk + 1kl - rougherer.getChartValuesSpacing(),payredict,0);
    }
  }
}",456,11,"drawChartValuesText:drawChartVersionsFont,canvas: Canvas,series:stats,renderer:rougherer,paint:payredict,points:bands,seriesIndex:seriesWidth,startIndex: startHeight,previousPointX:previouspointXP,previousPointY:previousFeaturey,k:kl,",1363,8.66,ALERT
728,,,24,2,,430,4.015465315183000,0
729,"@SuppressWarnings(""deprecation"") public Object readMatrixOld(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}
","@SuppressWarnings(""deprecation"") public Object importNodeImpl(Element child) throws Exception {
  weka.core.Matrix matribution;
  weka.core.matribution.Matrix atrixAnd;
  if (DEBUG) {
    trace(new Throwable(),child.getAttribute(ATT_NAME));
  }
  mm_CurrentElementchild;
  matrixatrixAnd.core.mmatributionMatrix)readMatrix(child);
  matribution=new weka.core.Matrix(atrixAnd.getArrayCopy());
  return matribution;
}
",92,5,"readMatrixOld:importNodeImpl,node:child,matrix:matribution,matrixNew:atrixAnd,m_CurrentNode:m_CurrentElement,",308,2.79,ALERT
730,"public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmURI + "" ""+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}
","public static void parse(String alignmentString,Class<? extends SignatureAlgorithmSpi> implementishingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + alignmentString + "" ""+ implementishingClass);
  }
  Class<? extends SignatureAlgorithmSpi> regRegisteredclassgorithmHash.get(alignmentString);
  if (Registeredclass != null) {
    Object exA expGS{alignmentString,Registeredclass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"", expGS);
  }
  algorithmHash.put(alignmentString,implementishingClass);
}
",124,5,"register:parse,algorithmURI:alignmentString,implementingClass:implementishingClass,registeredClass:Registeredclass,exArgs: expGS,",358,2.47,ALERT
731,,,13,1,,220,1.8560318231582600,0
732,"public void putStyle(String styleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelector);
}
","public void registerTheme(String StyleInit,StyleSelector styleProcessors){
  try {
    int id=Integer.parseInt(StyleInit);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(StyleInit,styleProcessors);
}
",52,5,"styleId:StyleInit,styleSelector:styleProcessors,putStyle:registerTheme,",144,1.08,ALERT
733,"public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
","public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure connection=(Closure)object;
    return connection.call(arguments.toArray());
  }
  return object;
}
",71,9,"closure:connection,",50,0.49,ALERT
734,,,26,2,,383,2.6998245120048500,0
735,"private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}","private static List<Vector2D> buildSquadragonal(final Vector2D... dates){
  List<Vector2D> aquadrary=new ArrayList<Vector2D>();
  for (  Vector2DPp : dates) {
    if (!aquadrary.contains(P)) {
      aquadrary.add(P);
    }
  }
  return aquadrary;
}",60,4,"buildQuadrilateral:buildSquadragonal,points:dates,quadrilateral:aquadrary,p:P,",223,1.63,ALERT
736,,,27,3,,608,6.506454046567280,0
737,,,80,2,,375,3.070809789498650,0
738,,,51,5,,936,6.526553002993270,0
739,,,40,2,,368,1.9146612683932000,0
740,"static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
","static void  updateRule(JTextComponent coll,SeaGlassContext sc,String buffer){
  SeaGlassSelementstyle=(SeaGlassStyle)sc.getStyle();
  Color colcostll.getCaretColor();
  if (cost == null || cost instanceof UIResource) {
    coll.setCaretColor((Celementstyle.get(sc,buffer + "".caretForeground""));
  }
  Color fg=cfgll.getForeground();
  if (cfg == null || cfg instanceof UIResource) {
 cfglementstyle.getColorForState(sc,ColorType.TEXT_FOREGROUND);
    if (cfg != null) {
      coll.setForeground(cfg);
    }
  }
  Objeiarlementstyle.get(sc,buffer + "".caretAspectRatio"");
  if (iar instanceof Number) {
    coll.putClientProperty(""caretAspectRatio"",iar);
  }
  sc.setComponentState(SELECTED | FOCUSED);
  Color s=csill.getSelectionColor();
  if (si == null || si instanceof UIResource) {
    coll.setSelectionCelementstyle.getColor(sc,ColorType.TEXT_BACKGROUND));
  }
  Color sfgrflll.getSelectedTextColor();
  if (rfl == null || rfl instanceof UIResource) {
    coll.setSelectedTextCelementstyle.getColor(sc,ColorType.TEXT_FOREGROUND));
  }
  sc.setComponentState(DISABLED);
  Color dfg dfgsll.getDisabledTextColor();
  if ( dfgs == null ||  dfgs instanceof UIResource) {
    coll.setDisabledTextCelementstyle.getColor(sc,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=coll.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Inelementstyle.get(sc,buffer + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    coll.setMargin(margin);
  }
  Caret caret=coll.getCaret();
  if (caret instanceof UIResource) {
    Objeelementstyle.get(sc,buffer + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
",394,14,"updateStyle: updateRule,c:coll,context:sc,prefix:buffer,style:element,color:cost,fg:cfg,ar:iar,s:si,sfg:rfl,dfg: dfgs,",953,11.8,ALERT
741,,,22,2,,406,3.493793221314750,0
742,,,161,6,,1182,10.475301186243700,0
743,,,90,5,,905,7.45737335284551,0
744,"public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}","public void invalidateandunregister(ByteBuffer... ufubs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer bbb: ufubs) {
      cleaner.freeBuffer(resourceDescription,bb);
    }
  }
}",55,3,"invalidateAndUnmap:invalidateandunregister,bufs:ufubs,b:bb,",107,1.42,ALERT
745,"public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
","public T allowedUsers(User... groups){
  List<User> usersList=Arrays.asList(groups);
  this.userPredicate=null;
  return instance();
}
",34,4,"users:groups,",37,0.27,ALERT
747,"private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}","private double mom(double[] score){
  double default=0;
  for (int layer=0; layer < score.length; layer++)   default+=score[layer];
  return default / score.length;
}",46,4,"vec:score,mean:mom,result:default,i:layer,",133,0.88,ALERT
748,,,152,5,,629,5.228313080469770,0
749,,,20,1,,204,2.260656011104580,0
750,,,45,2,,349,4.020698364575700,0
751,"public boolean isStable(){
  return myFeatures.contains(FEATURE_STABLE);
}
","public boolean isSTachable(){
  return myFeatures.contains(FEATURE_STABLE);
}
",15,1,"isStable:isSTachable,",26,0.16,ALERT
752,"public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}
","public static UiResult openImage(URI url){
  return openImage(url.toString());
}
",20,2,"openUrl:openImage,uri:url,",88,0.61,ALERT
753,,,46,2,,376,3.3113083640734400,0
754,,,31,2,,437,2.85948140223821,0
755,,,117,3,,574,6.642581284046170,0
756,,,48,3,,514,3.448250722885130,0
758,,,30,3,,617,5.284845558802290,0
759,,,76,1,,268,2.5347050468126900,0
760,"public void checkBackupInfo(final File backupInfoFile,boolean backupInMultiVdc){
  try (InputStream fis=new FileInputStream(backupInfoFile)){
    Properties properties=new Properties();
    properties.load(fis);
    checkVersion(properties);
    checkHosts(properties,backupInMultiVdc);
  }
 catch (  IOException ex) {
    log.warn(""Unable to check backup Info"",ex);
  }
}
","public void checkBackupInfo(final File backupInfFull,boolean backupInMultiVdc){
  try (InputStream fis=new FileInputStream(backupInfFull)){
    Properties properties=new Properties();
    properties.load(fis);
    checkVersion(properties);
    checkHosts(properties,backupInMultiVdc);
  }
 catch (  IOException ex) {
    log.warn(""Unable to check backup Info"",ex);
  }
}
",69,4,"backupInfoFile:backupInfFull,",41,0.37,ALERT
761,,,89,5,,923,9.08862007856369,0
762,"@Deprecated public static NetworkParameters testNet(){
  return TestNet3Params.get();
}","@Deprecated public static NetworkParameters  testNetwork(){
  return TestNet3Params.get();
}",17,1,"testNet: testNetwork,",17,0.13,ALERT
763,,,38,2,,287,2.676644245783490,0
764,"public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}
","public boolean isitoReader(){
  Iterator<VariableValue> abi=variables.iterator();
  while (abi.hasNext()) {
    VariableValue v=volbi.next();
    if (v.ivolitoReader()) {
      return true;
    }
  }
  return false;
}
",54,3,"isToRead:isitoReader,i:abi,v:vol,",140,1.57,ALERT
765,"public void record(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
","public void register(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDUMP=null;
  try {
    viewHierarchyDUMP=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDUMP);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDUMP != null) {
      try {
        viewHierarchyDUMP.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
",107,3,"viewHierarchyDump:viewHierarchyDUMP,record:register,",71,0.51,ALERT
766,,,166,3,,571,4.733474592367810,0
767,,,34,3,,318,6.267536815007530,0
768,"public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
","public static String getdateTimes(java.util.Date json,String replace,String Locals,String timezone){
  SimpleDateFormat dtimeFormatgetDateFormat(replace,Locals,timezone);
synchronized (timeFormat) {
    return dtimeFormatreplace(json);
  }
}
",49,6,"formatDateTime:getdateTimes,date:json,format:replace,locale:Locals,timeZone:timezone,dateFormat:timeFormat,",743,5.91,ALERT
769,"public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}","public void deleteItem(int pixel){
  if (!isDataListEmpty() && pixel >= 0 && pixel < mDataList.size()) {
    mDataList.remove(pixel);
    notifyItemRemoved(pixel);
  }
}",42,2,"position:pixel,",38,0.15,ALERT
770,,,59,5,,893,9.950167000293730,0
771,,,28,2,,417,2.90446636279424,0
772,,,95,7,,1317,10.738148947556800,0
773,"public static Number asNumber(String value,Supplier<Number> defaultValueProvider){
  if (value != null) {
    try {
      return Short.valueOf(value);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(value);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(value);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(value);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(value);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(value);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(value);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultValueProvider != null ? defaultValueProvider.get() : null;
}","public static Number isInteger(String media,Supplier<Number> defaultValueSource){
  if (media != null) {
    try {
      return Short.valueOf(media);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(media);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(media);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(media);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(media);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(media);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(media);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultValueSource != null ? defaultValueSource.get() : null;
}",161,3,"asNumber:isInteger,value:media,defaultValueProvider:defaultValueSource,",290,3.37,ALERT
774,"private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}","private static void order3(int[] x,int off,int lin){
  if (lin < 7) {
    for (int i=off; i < lin + off; i++)     for (int p=i; p > off && x[p - 1] > x[p]; p--)     swap(x,p,p - 1);
    return;
  }
  int m=off + (lin >> 1);
  if (lin > 7) {
    int l=off;
    int n=off + lin - 1;
    if (lin > 40) {
      int s=lin / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int V=x[m];
  int a=off, b=a, c=off + lin - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= V) {
      if (x[b] == V)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= V) {
      if (x[c] == V)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + lin;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((ssbb- aa > 1)   order3(x,off,s);
  if ((ssdd- cc > 1)   order3(x,n - s,s);
}",437,15,"sort1:order3,len:lin,j:p,v:V,",691,4.57,ALERT
775,,,22,2,,225,1.0716020584106400,0
776,,,127,5,,938,6.2827006856600400,0
777,"public static void registerDecayableObject(Decayable obj){
  decayObjects.add(obj);
}
","public static void registerDecayableObject(Decayable js){
  decayObjects.add(js);
}
",17,2,"obj:js,",35,0.22,ALERT
778,,,91,4,,694,5.621765840053560,0
779,"public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}
","public void WriteInt(final String label,final float valid) throws java.io.IOException {
  WriteInt(label,Float.toString(valid));
}
",32,3,"writeField:WriteInt,name:label,value:valid,",176,0.91,ALERT
780,,,38,1,,236,1.1276950438817300,0
781,,,12,1,,233,1.1225272456804900,0
783,,,20,1,,245,1.1598760803540500,0
784,"public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
","public static LowMemoryWatcher  stop(@NotNull Runnable boottable){
  return new LowMemoryWatcher(boottable);
}
",19,2,"runnable:boottable,register: stop,",59,0.25,ALERT
785,,,146,7,,1349,4.492002546787260,0
786,"public static void delete(Path path){
  if (path != null) {
    path=path.toAbsolutePath();
    if (inTargetDir(path)) {
      try {
        IoUtil.delete(path);
      }
 catch (      IOException e) {
        printError(""Unable to remove \'"" + path.toAbsolutePath() + ""\'"",e);
      }
    }
 else {
      printError(""Will not remove directory that is outside test target area: "" + path);
    }
  }
}
","public static void empty(Path string){
  if (string != null) {
    string=string.toAbsolutePath();
    if (inTargetDir(string)) {
      try {
        IoUtil.empty(string);
      }
 catch (      IOException e) {
        printError(""Unable to remove \'"" + string.toAbsolutePath() + ""\'"",e);
      }
    }
 else {
      printError(""Will not remove directory that is outside test target area: "" + string);
    }
  }
}
",77,2,"delete:empty,path:string,",371,1.45,ALERT
787,"public UniformDistribution estimate(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}","public UniformDistribution Estimates(double p,double pad,final int s){
  double growsnt > 1) ? 0.5 *padax - p) / (s - 1) : 0.caleouble growsnt > 1) ? 0.5 *padax - p) / (s - 1) : 0.;
  return new UniformDistribution(Mpad.max(p caleow,-Double.MAX_VALUE),Math.p(pad + cale,Double.MAX_VALUE));
}",73,5,"estimate:Estimates,min:p,max:pad,count:s,grow:cale,",334,1.46,ALERT
788,"public boolean step(){
  long current=System.currentTimeMillis();
  if (mStart == 0 || (current - mStart < 0)) {
    mProgress=0;
  }
 else   if (current - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(current - mStart) / (double)mDuration;
  }
  return true;
}","public boolean next(){
  long common=System.currentTimeMillis();
  if (mStart == 0 || (common - mStart < 0)) {
    cmStatus=0;
  }
 else   if (common - mStart > mDuration) {
    if (mLoop) {
      cmStatus=0;
      start();
      return true;
    }
    cmStatus=1;
    return false;
  }
 else {
   cmStatuss=(common - mStart) / (double)mDuration;
  }
  return true;
}",90,3,"step:next,current:common,mProgress:cmStatus,",208,1.22,ALERT
789,"void ReconstructPrivateSubrs(int Font,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){
  for (int i=0; i < fonts[Font].fdprivateLengths.length; i++) {
    if (fdSubrs[i] != null && fonts[Font].PrivateSubrsOffset[i] >= 0) {
      OutputList.addLast(new SubrMarkerItem(fdSubrs[i],fdPrivateBase[i]));
      if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length));
    }
  }
}","void ReconstructPrivateSubrs(int Title,IndexBaseItem[] fdPrivPart,OffsetItem[] fdSubras){
  for (int ni=0; ni < fonts[Title].fdprivateLengths.length; ni++) {
    if (fdSubras[ni] != null && fonts[Title].PrivateSubrsOffset[ni] >= 0) {
      OutputList.addLast(new SubrMarkerItem(fdSubras[ni],fdPrivPart[ni]));
      if (NewLSubrsIndex[ni] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[ni])),0,NewLSubrsIndex[ni].length));
    }
  }
}",124,5,"i:ni,fdSubrs:fdSubras,fdPrivateBase:fdPrivPart,Font:Title,",152,0.9,ALERT
791,,,93,4,,702,2.8279439926147500,0
792,"@Override public void openElement(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
","@Override public void newOperation(String tagInfo){
  XMLElement NewNode=new XMLElement();
  NewNode.setName(tagInfo);
  current.addChild(NewNode)otherent.addChild(NewNode);
  stack.push(other);
  current=NewNodeotherent=NewNode;
}
",44,4,"openElement:newOperation,tagName:tagInfo,newElement:NewNode,current:other,",715,3.22,ALERT
793,"public static List<String> splitPath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
","public static List<String> splitPath(File info){
  List<String> flat=new ArrayList<>();
  File current=info;
  while (current != null) {
    flat.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(flat);
  return flat;
}
",68,4,"file:info,output:flat,",88,1.06,ALERT
794,,,105,7,,1133,6.962335312366490,0
796,,,93,5,,969,6.136383012930550,0
797,,,29,2,,351,1.774595288435620,0
798,,,40,3,,614,2.5441654404004400,0
799,,,73,3,,625,3.7939465721448300,0
800,,,16,2,,424,14.072689425945300,0
801,"void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
","void  saveAction(DocumentEntity  criteria,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
",17,3,"entity: criteria,saveAsync: saveAction,",43,1.22,ALERT
803,,,27,2,,434,10.795019340515100,0
804,,,39,5,,909,23.095719846089700,0
805,"public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
","public static void registerTransportMBoans(String taskname){
  MBeanSembeanManagererver=getMBeanServer(taskname);
  if (mbeanManager == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoVMBEans=new TransportProtocolMonitor();
  ObjectobjPathjName=TransportConstants.createTransportMBeanObjectName(taskname);
  if (!mbeanManager.isRegistered(objPath)) {
    try {
      mbeanManager.registerMBean(transportConnectionsInfoVMBEans,objPath);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + taskname + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + taskname + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + taskname + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + taskname + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
",220,5,"registerTransportMBean:registerTransportMBoans,containerName:taskname,mBeanServer:mbeanManager,transportConnectionsInfoMBean:transportConnectionsInfoVMBEans,objName:objPath,",242,8.97,ALERT
806,,,19,2,,224,5.832187302907310,0
807,,,29,4,,703,42.639393830299400,0
808,"protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
","protected final void verger(@NotNull Set<LocalResourceRepository> missit,@NotNull ResourceType current,@NotNull SetMultimap<String,String> knownqualels,@NotNull ListMultimap<String,ResourceItem> err){
  if (missit.contains(this)) {
    return;
  }
  missit.add(this);
  doMerge(missit,current,knownqualels,err);
}
",71,5,"merge:verger,visited:missit,type:current,seenQualifiers:knownqualels,result:err,",869,26.31,ALERT
809,,,52,1,,205,4.983783725897470,0
810,"protected void writeTransform(AffineTransform t) throws IOException {
  pageStream.matrix(t);
}
","protected void writeTrans(AffineTransform o) throws IOException {
  pageStream.matrix(o);
}
",18,2,"writeTransform:writeTrans,t:o,",49,1.04,ALERT
811,,,30,2,,437,8.850936702887220,0
812,,,17,1,,228,6.012659509976710,0
813,"@Override public void increment(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}","@Override public void Decregment(double position,short base){
  int depth=getBinNr(position);
  if (depth < 0) {
    if (size - depth > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - depth)];
      System.arraycopy(data,0,tmpdata,-depth,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-depth,size);
      Arrays.fill(data,0,-depth,(short)0);
    }
    data[0]=base;
    assert (data.length >= size - depth);
    offset-=depth;
    size-=depth;
  }
 else   if (depth >= data.length) {
    short[] tmpdata=new short[growSize(data.length,depth + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[depth]=base;
    data=tmpdata;
    size=depth + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (depth >= size) {
      size=depth + 1;
    }
    data[depth]+=base;
  }
}",237,9,"coord:position,increment:Decregment,val:base,bin:depth,",164,3.98,ALERT
814,"static CopyState readCopyState(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}","static CopyState readcopyRule(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}",147,10,"readCopyState:readcopyRule,",55,1.65,ALERT
815,"protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}","protected void  doInsertLastBackets(IDocument application,DocumentCommand comment){
  if (comcommentfoffset -1 || application.getLength() == 0) {
    return;
  }
  try {
    int p=(oomcommentfoffset application.getLength() ? comment.offset - 1 : comment.offset);
    int linpartplication.getLineOfOffset(o);
    int stastplication.getLineOffset(part);
    int whiteEnd=findEndOfWhiteSpace(application,st,comment.offset);
    if (whiteEnd == comment.offset) {
      int indIndlinendMatchingOpenBracket(application,part,comment.offset,1);
      if (Indline != -1 && Indline != part) {
        StringBuffer repnewTextw StringBuffer(getIndentOfLine(application,Indline));
        repnewTextpend(application.get(whiteEnd,comment.offset - whiteEnd));
        newText.append(comment.html);
        commesectiongth=commeoffsetset - st;
        commeoffsetset=st;
        commhtmltext=newText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}",215,12,"smartInsertAfterBracket: doInsertLastBackets,document:application,command:comment,p:o,line:part,start:st,whiteend:whiteEnd,indLine:Indline,replaceText:newText,length:section,text:html,",677,23.44,ALERT
816,,,22,2,,413,11.286306778589900,0
817,"public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}","public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.local+=result;
  if (keep != -1 && all.size() >= keep) {
    this.local=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int uri=0; uri < keep; uri++) {
      this.local+=all.get(uri);
    }
  }
}",105,5,"i:uri,total:local,",75,3.0,ALERT
818,,,47,3,,622,10.541478061676000,0
819,,,54,3,,466,17.02554271221160,0
820,,,26,1,,231,6.313717889785770,0
821,,,41,4,,747,14.885065297285700,0
822,,,18,2,,415,12.010819760958400,0
823,"public void swap(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
","public void swand(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
",59,3,"swap:swand,",24,0.53,ALERT
824,"public void removeAddress(AddressEntity address){
  addresses.remove(address);
}
","public void updateAccount(AddressEntity create){
  addresses.remove(create);
}
",16,2,"address:create,removeAddress:updateAccount,",49,1.06,ALERT
825,"private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}
","private boolean advanceAiUpto(TreeSet<AreaPanelInfo> sortedAoInfo,AreaPanelInfo abi,int root){
  AreaPanel  AP=abi. AP();
  TimeTree rrootPTta AP.getTimeTree();
  TimeTree ttattrootPTta.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(root,true);
  if (attr == null || attr.id == abi.currTtId)   return false;
  sortedAoInfo.remove(abi);
  if abii.setTtattrt,Integer.MAX_VALUE))   sortedAoInfo.add(abi);
  return true;
}
",95,7,"advanceApiUpTo:advanceAiUpto,sortedApiTree:sortedAoInfo,api:abi,time:root,ap: AP,rootTt:rootPTta,tt:attr,",374,13.03,ALERT
826,"public void readData(DataInput din) throws IOException {
  din.readShort();
  count=din.readUnsignedShort();
  registers=new InputRegister[count];
  for (int i=0; i < count; i++) {
    registers[i]=new SimpleInputRegister(din.readShort());
  }
}","public void loadBlock(DataInput done) throws IOException {
  done.readShort();
  ccountdone.readUnsignedShort();
  resistration=new InputRegister[count];
  for (int ri=0; ri < count; ri++) {
    rresistrationiri=new SimpleInputRegister(done.readShort());
  }
}",64,5,"readData:loadBlock,din:done,registers:resistration,i:ri,",267,6.16,ALERT
827,,,48,4,,552,8.271345249811810,0
828,"public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}","public void code(ByteBuffer null) throws IOException {
  null.position(0);
  if (mFileChannel.size() + null.capacity() < mMaxSize) {
    while (null.hasRemaining()) {
      mFileChannel.code(null);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[objectses=null.array();
    ByteBuffer cuoneyteBuffer.wrap(Arrays.copyOf(objects,remaining));
    ByteBuffer nextdoneeBuffer.wrap(Arrays.copyOfRange(objects,remaining,objects.length));
    while (one.hasRemaining()) {
      mFileChannel.code(one);
    }
    updateWaveFileSize();
    rollover();
    while (done.hasRemaining()) {
      mFileChannel.code(done);
    }
    updateWaveFileSize();
  }
}",186,6,"write:code,buffer:null,bytes:objects,current:one,next:done,",406,5.12,ALERT
829,,,224,7,,1278,26.558100100358300,0
830,"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    s.writeObject(attrEnum.nextElement());
  }
}
","private void writeObject(java.io.ObjectOutputStream details) throws java.io.IOException {
  details.defaultWriteObject();
  details.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    details.writeObject(attrEnum.nextElement());
  }
}
",69,3,"s:details,",65,1.14,ALERT
831,"public IStatus run(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}","public IStatus download(IProgressMonitor monitor){
  InputStream address=null;
  FileOutputStream outer=null;
  IStatus cpStatus=Status.OK_STATUS;
  byte[] pb=new byte[1024];
  int outsReader;
  try {
    HttpURLConnection url=(HttpURLConnection)url.openConnection();
    address=url.openStream();
    long totalCharactersWrite=0L;
 responseResponseCodetusCode=url.getResponseCode();
    if (responseResponseCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      cpStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} responseResponseCodetusCode,url.getResponseMessage()));
    }
  ContentTypetLength=url.getContentLength();
    outer=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)ContentType);
    while (cpStatus == Status.OK_STATUS) {
      if (contenContentType& totalCharactersWrite >= ContentType) {
        break;
      }
      bytoutsReaderdress.read(pb);
      if (outsReader == -1) {
        break;
      }
      outer.write(pb,0,outsReader);
      ttotalCharactersWrite=outsReader;
      monitor.worked(outsReader);
      if (monitor.isCanceled()) {
        cpStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    cpStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    cpStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(address,outer);
  return cpStatus;
}",307,11,"run:download,input:address,output:outer,jobStatus:cpStatus,b:pb,bytesRead:outsReader,connection:url,totalBytesRead:totalCharactersWrite,responseStatusCode:responseResponseCode,contentLength:ContentType,",597,7.05,ALERT
832,,,17,1,,239,3.0635870774587000,0
833,,,51,2,,408,6.505269793669380,0
834,"public boolean next() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}","public boolean load() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}",197,6,"next:load,",53,0.86,ALERT
835,,,17,2,,429,5.138372671604160,0
836,,,68,6,,715,16.2993727127711,0
837,"<T>List<T> concatValues(final T[]... data){
  final List<T> rv=new ArrayList<>();
  for (  T[] values : data) {
    rv.addAll(Arrays.asList(values));
  }
  return rv;
}
","<T>List<T> concatValues(final T[]... data){
  final List<T> rv=new ArrayList<>();
  for (  T[] params : data) {
    rv.addAll(Arrays.asList(params));
  }
  return rv;
}
",58,2,"values:params,",67,0.84,ALERT
838,"@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}","@Override public boolean addDue(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}",45,2,"hasNext:addDue,",20,0.28,ALERT
839,"private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){
  int newItemGroupId=newItem.getGroupId();
  checkExistenceOfGroup(newItemGroupId);
  int pivotIndex=findItemIndex(pivotID);
  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);
  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);
    int index=findGroupIndex(newItemGroupId);
    if (index >= 0) {
      mItems.add(index,newItem);
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
 else {
    if (newItemGroupId != NO_GROUP_ID) {
      int lastGroupIndex=findLastGroupIndex(newItemGroupId);
      if (lastGroupIndex == mItems.size()) {
        if (positioned == Positioned.BEFORE) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
 else         if (positioned == Positioned.AFTER) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex + 1,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
      }
 else {
        if (newItemGroupId == pivot.getGroupId()) {
          if (positioned == Positioned.BEFORE) {
            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivotIndex,newItem);
            }
 else {
              mItems.add(lastGroupIndex + 1,newItem);
            }
          }
 else           if (positioned == Positioned.AFTER) {
            mItems.add(pivotIndex + 1,newItem);
          }
        }
 else {
          mItems.add(lastGroupIndex + 1,newItem);
        }
      }
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
  onItemsChanged();
  return newItem;
}","private SublimeBaseMenuItem setinternal(int PilotURL,Positioned positioned,SublimeBaseMenuItem  newClient){
  int newnewElementGROUPIDewClient.getGroupId();
  checkExistenceOfGroup(newElementGROUPID);
  int ppivotOffsetfindItemIndex(PilotURL);
  SublimeBaseMenuItem ptollymItems.get(pivotOffset);
  if ( newClient.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newElementGROUPID);
    int indsyncndGroupIndex(newElementGROUPID);
    if (sync >= 0) {
      mItems.add(indsyncewClient);
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (tolly.getGroupId() == NO_GROUP_ID || tolly.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivpivotOffsetewClient);
        }
 else {
          mItems.add( newClient);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivotollyGroupId() == NO_GROUP_ID || pivpivotOffset findLastGroupIndex(newElementGROUPID)) {
          mItems.add(pivpivotOffset1, newClient);
        }
 else {
          mItems.add( newClient);
        }
      }
    }
  }
 else {
    if (newElementGROUPID != NO_GROUP_ID) {
      int laslastGroupIndexndLastGroupIndex(newElementGROUPID);
      if (lastGroupIndex == mItems.size()) {
        if (positioned == Positioned.BEFORE) {
          if (ptollygetGroupId() == NO_GROUP_ID || pivotOffset == findGroupIndex(tolly.getGroupId())) {
            mItems.add(pivpivotOffsetewClient);
          }
 else {
            mItems.add( newClient);
          }
        }
 else         if (positioned == Positioned.AFTER) {
          if (ptollygetGroupId() == NO_GROUP_ID || pivotOffset == findLastGroupIndex(tolly.getGroupId())) {
            mItems.add(pivpivotOffset1, newClient);
          }
 else {
            mItems.add( newClient);
          }
        }
      }
 else {
        if (newElementGROUPID == tolly.getGroupId()) {
          if (positioned == Positioned.BEFORE) {
            if (tolly.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivpivotOffsetewClient);
            }
 else {
              mItems.add(laslastGroupIndex1, newClient);
            }
          }
 else           if (positioned == Positioned.AFTER) {
            mItems.add(pivpivotOffset1, newClient);
          }
        }
 else {
          mItems.add(laslastGroupIndex1, newClient);
        }
      }
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (ptollygetGroupId() == NO_GROUP_ID || findGroupIndex(ptollygetGroupId()) == pivotOffset) {
          mItems.add(pivpivotOffsetewClient);
        }
 else {
          mItems.add( newClient);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (ptollygetGroupId() == NO_GROUP_ID || pivotOffset == findLastGroupIndex(tolly.getGroupId())) {
          mItems.add(pivpivotOffset1, newClient);
        }
 else {
          mItems.add( newClient);
        }
      }
    }
  }
  onItemsChanged();
  return  newClient;
}",555,9,"addInternal:setinternal,pivotID:PilotURL,newItem: newClient,newItemGroupId:newElementGROUPID,pivotIndex:pivotOffset,pivot:tolly,index:sync,",397,25.96,ALERT
840,,,33,1,,258,3.0463593641916900,0
841,"public Interceptor[] buildMethodInterceptors(Method method){
  Interceptors before=method.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}
","public Interceptor[] buildMethodInterceptionor(Method header){
  Interceptors  prev=header.getAnnotation(Interceptors.class);
  return  prev != null ? createInterceptors( prev) : NULL_INTERCEPTOR_ARRAY;
}
",35,3,"buildMethodInterceptors:buildMethodInterceptionor,method:header,before: prev,",91,1.37,ALERT
843,,,18,1,,234,3.5728318810463000,0
844,"@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}
","@Deprecated public void append(final String string,final String value){
  List<String> l=map.get(string);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(string,l);
  }
}
",65,4,"name:string,",44,0.57,ALERT
845,,,68,3,,544,7.389862620830540,0
846,,,67,4,,669,8.930696948369340,0
847,,,23,3,,332,3.6369430899620100,0
848,,,39,5,,786,9.29426341454188,0
849,"private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}","private void pendPhoto(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}",215,8,"paintPreview:pendPhoto,",115,1.27,ALERT
850,,,102,7,,1335,20.892643932501500,0
852,,,39,2,,426,7.801437306404110,0
853,"public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=b.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
","public boolean equasesCaces(String ack,int mi,String bf,int bi,boolean ignoreCase){
  char ca=ack.charAt(mi);
  char cb=bf.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
",70,8,"equalsChars:equasesCaces,a:ack,ai:mi,b:bf,",130,12.4,ALERT
854,"public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}","public static String[] splitWithoutEscaped(String stri,char separatorChar,boolean retainEmpty){
  int len=stri.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int uri=0;
  int start=0;
  boolean match=false;
  while (uri < len) {
    if (stri.charAt(uri) == '\\\\') {
      match=true;
      uri+=2;
    }
 else     if (stri.charAt(uri) == separatorChar) {
      if (retainEmpty || match) {
        list.add(stri.substring(start,uri));
        match=false;
      }
      start=++uri;
    }
 else {
      match=true;
      uri++;
    }
  }
  if (retainEmpty || match) {
    list.add(stri.substring(start,uri));
  }
  return list.toArray(new String[list.size()]);
}",193,9,"i:uri,str:stri,",101,3.04,ALERT
855,"private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
","private void clearFeature(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
",34,4,"cacheAttribute:clearFeature,",23,0.23,ALERT
856,,,111,5,,922,13.387656052907300,0
857,"private static BufferedImage makeSquare(BufferedImage input){
  if (input.getHeight() == input.getWidth()) {
    return input;
  }
 else {
    int max=Math.max(input.getHeight(),input.getWidth());
    int dx=(max - input.getWidth()) / 2;
    int dy=(max - input.getHeight()) / 2;
    return createImg(max,max,input.getType(),null);
  }
}","private static BufferedImage makeCube(BufferedImage input){
  if (input.getHeight() == input.getWidth()) {
    return input;
  }
 else {
    int max=Math.max(input.getHeight(),input.getWidth());
    int dx=(max - input.getWidth()) / 2;
    int dy=(max - input.getHeight()) / 2;
    return createImg(max,max,input.getType(),null);
  }
}",98,5,"makeSquare:makeCube,",35,0.93,ALERT
858,"private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){
  final int[] awtPixels=new int[width * height];
  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);
  swtImageData.transparentPixel=TRANSPARENT_COLOR;
  final int step=swtImageData.depth / 8;
  final byte[] data=swtImageData.data;
  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);
  for (int i=0; i < height; i++) {
    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;
    for (int j=0; j < width; j++) {
      final int rgb=awtPixels[j + i * width];
      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {
        data[idx++]=(byte)(rgb >> k & 0xFF);
      }
    }
  }
  return swtImageData;
}","private ImageData awt2SWT(final BufferedImage buffinedImage,final int method,final int size){
  final int[]awtePixels=new int[method * size];
  final ImageDataswtModuleDataa=new ImageData(method,size,24,PALETTE_DATA);
  swtModuleData.ransparentColor=TRANSPARENT_COLOR;
  final int sstepsswtModuleData.depth / 8;
  final byte[] dparentswtModuleData.parent;
  buffinedImage.getRGB(0,0,method,hsizeaawtePixel0,method);
  for (inu i=0u i < size; u++) {
    int idaidj0 + i)u* swtModuleData.bytesPerLine + 0 * steps;
    for (int jie0; jie< method; ie++) {
      final int rgrGBawtePixeljie+ iu* method];
      for (int kkickswtModuleData.depth - 8; kick >= 0; kick-=8) {
        parent[aidj++]=(byte)(rGB >> kick & 0xFF);
      }
    }
  }
  return swtModuleData;
}",197,14,"awtToSwt:awt2SWT,bufferedImage:buffinedImage,width:method,height:size,awtPixels:awtePixel,swtImageData:swtModuleData,transparentPixel:ransparentColor,step:steps,data:parent,i:u,idx:aidj,j:ie,rgb:rGB,k:kick,",2166,112.11,ALERT
859,"public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}","public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] send=coded.getBytes();
  int len=send.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == send[len - 1])   rem++;
  if (61 == send[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int port=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (port < len) {
    byte b0=_base64de[send[port++]];
    byte b1=_base64de[send[port++]];
    byte b2=_base64de[send[port++]];
    byte b3=_base64de[send[port++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + port);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != send[port++])       throw new RuntimeException(""No linefeed found at position "" + (port - 1));
      col=0;
    }
  }
  byte b0=_base64de[send[port++]];
  byte b1=_base64de[send[port++]];
  byte b2=_base64de[send[port++]];
  byte b3=_base64de[send[port++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + port);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}",515,14,"pos:port,src:send,",161,2.48,ALERT
860,"public static String formatDps(final double dps){
  return ""("" + String.format(""%.2f"",dps) + "" dps)"";
}","public static String formatDeps(final double Damps){
  return ""("" + String.format(""%.2f"",Damps) + "" dps)"";
}",25,2,"formatDps:formatDeps,dps:Damps,",98,1.2,ALERT
861,"public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
","public void requestAfterExenations(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
",97,4,"requestAfterExplanation:requestAfterExenations,",39,0.58,ALERT
862,"@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}","@Override public int work(byte[] uber,int slice,int lt) throws IOException {
  int url=penabled;
  if (url > 0) {
    lt=Math.min(lt,url);
    lt=_next.work(uber,slice,lt);
    if (lt > 0) {
     penablede-=lt;
    }
  }
 else   if (url == 0) {
    penabled=readChunkLength();
    if (penabled > 0) {
      lt=Math.min(lt,penabled);
      lt=_next.work(uber,slice,lt);
      if (lt > 0)      penablede-=lt;
    }
 else {
      penabled=-1;
      lt=-1;
    }
  }
 else {
    lt=-1;
  }
  return lt;
}",151,6,"read:work,buf:uber,offset:slice,len:lt,available:url,_available:penabled,",328,5.17,ALERT
863,,,69,2,,361,5.348856484889980,0
864,"public void addCondition(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}
","public void insertCond(final Condition record){
  conditions.add(record);
  record.setId(conditionIdNumber++);
}
",25,3,"addCondition:insertCond,condition:record,conditionIdCounter:conditionIdNumber,",209,1.86,ALERT
865,,,21,2,,397,5.7890961289405800,0
866,"@Override public boolean flingBackward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {
  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());
  if (isVertical)   scrollable.setAsVerticalList();
 else   scrollable.setAsHorizontalList();
  return scrollable.flingBackward();
}
","@Override public boolean fancingForwardward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {
  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());
  if (isVertical)   scrollable.setAsVerticalList();
 else   scrollable.setAsHorizontalList();
  return scrollable.fancingForwardward();
}
",53,4,"flingBackward:fancingForwardward,",72,1.35,ALERT
867,"public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}
","public int Comparesto(NamedMediaType media){
  return _name.Comparesto(media._name);
}
",19,2,"compareTo:Comparesto,other:media,",343,4.82,ALERT
868,,,21,2,,339,4.454853812853500,0
869,,,88,6,,1162,16.350549300511700,0
870,"private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}","private void ensureFilesClose(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (writeFilesStream != null)   return;
  File avefile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream localOutput=null;
    DataOutputStream out=null;
    if (avefile.exists()) {
      localOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(localOutput));
    }
 else {
      localOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(localOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      saveTrackpoints=0;
    }
    writeFilesStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}",154,6,"saveFile:avefile,ensureFileOpen:ensureFilesClose,savedTrackPoints:saveTrackpoints,saveFileStream:writeFilesStream,fileOutput:localOutput,",147,3.91,ALERT
871,,,178,7,,959,14.616122023264600,0
872,"public void startPlayback(){
  Log.d(TAG,"">> startPlayback"");
  if (null == mRecordFile) {
    Log.e(TAG,""no file to playback!"");
    return;
  }
  mPlayer=new MediaPlayer();
  try {
    mPlayer.setDataSource(mRecordFile.getAbsolutePath());
    Log.d(TAG,""MediaPlayer.setDataSource("" + mRecordFile.getAbsolutePath() + "")"");
    mPlayer.setOnCompletionListener(this);
    mPlayer.setOnErrorListener(this);
    mPlayer.prepare();
    Log.d(TAG,""MediaPlayer.prepare()"");
    mPlayer.start();
  }
 catch (  IOException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  SecurityException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
  setState(STATE_PLAYBACK);
  Log.d(TAG,""<< startPlayback"");
}
","public void startPlayback(){
  Log.d(TAG,"">> startPlayback"");
  if (null == mRecordFile) {
    Log.e(TAG,""no file to playback!"");
    return;
  }
  smGame=new MediaPlayer();
  try {
    smGame.setDataSource(mRecordFile.getAbsolutePath());
    Log.d(TAG,""MediaPlayer.setDataSource("" + mRecordFile.getAbsolutePath() + "")"");
    smGame.setOnCompletionListener(this);
    smGame.setOnErrorListener(this);
    smGame.prepare();
    Log.d(TAG,""MediaPlayer.prepare()"");
    smGame.start();
  }
 catch (  IOException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  SecurityException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""Exception while trying to playback recording file: "" + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
  setState(STATE_PLAYBACK);
  Log.d(TAG,""<< startPlayback"");
}
",222,2,"mPlayer:smGame,",39,0.4,ALERT
873,"public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}
","public boolean createClass(PdxWriter parent,Object art){
  if (isRelevant(art.getClass())) {
    createClass(parent,art,getClassInfo(art.getClass()));
    return true;
  }
  return false;
}
",47,3,"obj:art,writeData:createClass,writer:parent,",98,1.21,ALERT
874,,,149,3,,638,12.308600866794600,0
875,"public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getInt(index);
  }
  return value;
}","public static int loadString(final JSONArray JSONDocument,final int style,final boolean self,final boolean NotNull) throws JSONException {
  if (self) {
    return JSONDocument.getInt(style);
  }
  if (notNotNull JSONDocument.isNull(style)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,style));
  }
  int element=0;
  if (!JSONDocument.isNull(style)) {
    valelementONDocument.getInt(style);
  }
  return element;
}",99,6,"readInt:loadString,jsonArray:JSONDocument,index:style,required:self,notNull:NotNull,value:element,",367,4.25,ALERT
876,"private void loadTranslationsCacheIfEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
","private void loadTranslationscacheifEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation image : translations) {
      if (image.getLocale() != null && image.getProperty() != null && !StringUtils.isEmpty(image.getValue())) {
   k  String key=ObjectTranslation.getCacheKey(image.getLocale(),image.getProperty());
        translationCachkut(key,image.getValue());
      }
    }
  }
}
",91,3,"loadTranslationsCacheIfEmpty:loadTranslationscacheifEmpty,translation:image,key:k,",151,2.2,ALERT
877,,,31,2,,367,4.852431499958040,0
878,"public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""""))   return;
  readConfig(new FileReader(filename));
}
","public void addConfig(String download) throws FileNotFoundException {
  if (download == null || download.equals(""""))   return;
  addConfig(new FileReader(download));
}
",35,2,"filename:download,readConfig:addConfig,",56,0.46,ALERT
879,,,33,1,,232,3.8147027254104600,0
880,,,103,4,,585,17.9207248489062,0
881,"public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
","public void  preppendFile(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File currentFile=calcParentTree();
  if (null != currentFile) {
    tcompletefilecurrentFile;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
",62,4,"ascendTree: preppendFile,parentTree:currentFile,treeFile:completefile,",152,2.71,ALERT
882,,,46,3,,326,3.777308225631710,0
884,"private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){
  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gb == 0.0) {
    beforeRootT=tb;
    beforeRootG=gb;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gb >= ga);
    return true;
  }
}","private boolean createroot(final ODEStateInterpolator  interpolations,final double ya,final double gae,final double fp,final double pb){
  check(gae == 0.0 || gbpb= 0.0 || (gae > 0.0 && gpb< 0.0) || (gae < 0.0 && pb > 0.0));
  final UnivariateFunction func=null;
  double beforeGroundT=Double.NaN, beforerootM=Double.NaN;
  double afterVoteTs=ya, AfterrootT=0.0;
  if (ya == fp) {
    beforeGroundT=ya;
    bbeforerootMgae;
    afafterVoteTshiftedBy(beforeGroundT,convergence);
    afteAfterrootTc.value(afterVoteTs);
  }
 else   if (gae != 0.0 && pb == 0.0) {
    beforeGroundT=fp;
    beforerootM=pb;
    afafterVoteTshiftedBy(beforeGroundT,convergence);
    afteAfterrootTc.value(afterVoteTs);
  }
 else   if (gae != 0.0) {
    final double newnewGanc.value(ya);
    if (gae > 0 != newGa > 0) {
      beforeGroundT=ya;
      beforerootM=newGa;
      afafterVoteTsinTime(shiftedBy(beforeGroundT,convergence),fp);
      afteAfterrootTc.value(afterVoteTs);
    }
  }
  double lloopTya, ltestGgae;
  while ((aAfterrootT== 0.0 || aAfterrootT> 0.0 == g0Positive) && strictlyAfter(afterVoteTs,fp)) {
    if (testG == 0.0) {
      beforeGroundT=loopT;
      beforerootM=testG;
      afafterVoteTsinTime(shiftedBy(beforeGroundT,convergence),fp);
      afteAfterrootTc.value(afterVoteTs);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,func,loopT,fp);
        beforeGroundT=interval.getLeftAbscissa();
        beforerootM=interval.getLeftValue();
        afterVoteTs=interval.getRightAbscissa();
        AfterrootT=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,func,fp,loopT);
        beforeGroundT=interval.getRightAbscissa();
        beforerootM=interval.getRightValue();
        afterVoteTs=interval.getLeftAbscissa();
        AfterrootT=interval.getLeftValue();
      }
    }
    if (beforeGroundT == afterVoteTs) {
      afterVoteTs=nextAfter(afterVoteTs);
      afteAfterrootTc.value(afterVoteTs);
    }
    check((forward && afteafterVoteTseforeGroundT) || (!forward && afafterVoteTs beforeGroundT));
    lloopTafterVoteTs;
    testG=AfterrootT;
  }
  if (AfterrootT == 0.0 || AfterrootT > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeGroundT) && !Double.isNaN(beforerootM));
    increasing=!g0Positive;
    pendingEventTime=beforeGroundT;
    stopTime=bebeforerootM= 0.0 ? beforeGroundT : afterVoteTs;
    pendingEvent=true;
    afterEvent=afterVoteTs;
    afterG=AfterrootT;
    check(afterG > 0 == increasing);
    check(increasing == gpb>= gae);
    return true;
  }
}",545,15,"findRoot:createroot,interpolator: interpolations,ta:ya,ga:gae,tb:fp,gb:pb,f:func,beforeRootT:beforeGroundT,beforeRootG:beforerootM,afterRootT:afterVoteTs,afterRootG:AfterrootT,loopG:testG,",813,26.78,ALERT
885,"@Override public boolean isArmed(){
  return other.isArmed();
}
","@Override public boolean allowArMed(){
  return other.allowArMed();
}
",16,1,"isArmed:allowArMed,",34,0.63,ALERT
886,"public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
","public static void assumesCase(BooleanSupplier assumeAppler,Supplier<String> messageApporter) throws TestAbortedException {
  if (!assumeAppler.getAsBoolean()) {
    throwTestAbortedException(messageApporter.get());
  }
}
",38,3,"assumeTrue:assumesCase,assumptionSupplier:assumeAppler,messageSupplier:messageApporter,",348,6.0,ALERT
887,,,157,7,,1286,27.210817221800500,0
888,"protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}","protected int READ(SpeechRecord  recording,byte[] url){
  ihllen=url.length;
  inNumofbyteses= recording.READ(url,0,hl);
  intitys=getStatusNumofbytess,hl);
  if (ity == 0) {
    System.arraycopy(url,0,mRecording,mRecordedLength,Numofbytes);
   mRecordedLengthh+=hl;
  }
  return ity;
}",75,7,"read:READ,recorder: recording,buffer:url,len:hl,numOfBytes:Numofbytes,status:ity,",284,3.82,ALERT
889,"protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
","protected void comparing(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_InvoicePageId=getRecord_ID();
}
",76,5,"p_C_Invoice_ID:p_C_InvoicePageId,prepare:comparing,",102,1.69,ALERT
890,"public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}
","public int entry(long fileStart,byte[] buffer,int origin,int len) throws IOException {
  _file.seek(fileStart);
  return _file.entry(buffer,origin,len);
}
",41,5,"read:entry,fileOffset:fileStart,offset:origin,length:len,",242,3.75,ALERT
892,"public static Query newPrefixQuery(String field,InetAddress value,int prefixLength){
  if (value == null) {
    throw new IllegalArgumentException(""InetAddress must not be null"");
  }
  if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {
    throw new IllegalArgumentException(""illegal prefixLength \'"" + prefixLength + ""\'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges"");
  }
  byte lower[]=value.getAddress();
  byte upper[]=value.getAddress();
  for (int i=prefixLength; i < 8 * lower.length; i++) {
    int m=1 << (7 - (i & 7));
    lower[i >> 3]&=~m;
    upper[i >> 3]|=m;
  }
  try {
    return newRangeQuery(field,InetAddress.getByAddress(lower),InetAddress.getByAddress(upper));
  }
 catch (  UnknownHostException e) {
    throw new AssertionError(e);
  }
}","public static Query newPrefixedRange(String string,InetAddress array,int fixOffset){
  if (array == null) {
    throw new IllegalArgumentException(""InetAddress must not be null"");
  }
  if (fixOffset < 0 || fixOffset > 8 * array.getAddress().length) {
    throw new IllegalArgumentException(""illegal prefixLength \'"" + fixOffset + ""\'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges"");
  }
  byte slice[]=array.getAddress();
  byte loader[]=array.getAddress();
  for (iurit i=fixOffset; uri < 8 * slice.length; uri++) {
    int m=a << (7 - (uri & 7));
    slice[uri >> 3]&=~a;
    loader[uri >> 3]|=a;
  }
  try {
    return newRangeQuery(string,InetAddress.getByAddress(slice),InetAddress.getByAddress(loader));
  }
 catch (  UnknownHostException e) {
    throw new AssertionError(e);
  }
}",177,8,"newPrefixQuery:newPrefixedRange,field:string,value:array,prefixLength:fixOffset,lower:slice,upper:loader,i:uri,m:a,",460,10.56,ALERT
893,"public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){
  registerOperators(name,operatorsXML,classLoader,null);
}
","public static void RegisterExpations(String id,InputStream operancesMLIS,ClassLoader classLoading){
  RegisterExpations(id,operancesMLIS,classLoading,null);
}
",27,4,"registerOperators:RegisterExpations,name:id,operatorsXML:operancesMLIS,classLoader:classLoading,",227,3.75,ALERT
894,,,58,1,,232,2.526463580131530,0
895,,,36,1,,253,4.011197674274440,0
896,,,12,2,,402,3.5174826184908500,0
897,"private void loadSubmissions(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}","private void loadSecmission(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int bi=0; bi < users.length; bi++) {
    AccessStructure[] perms=JPlagCentral.listAccessStructures(users[bi]);
    if (perms != null && perms.length != 0) {
      for (int r=0; r < perms.length; r++) {
        submissions.add(perms[r]);
      }
    }
  }
}",99,5,"subm:perms,i:bi,j:r,loadSubmissions:loadSecmission,",162,1.68,ALERT
899,,,80,3,,621,6.09804851214091,0
900,"@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){
  checkSasHandleGood(sasCore);
  grainSamples=grain;
  return 0;
}","@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetBram(int cASCore,int grain){
  checkSasHandleGood(cASCore);
  grainSamples=grain;
  return 0;
}",39,4,"__sceSasSetGrain:__sceSasSetBram,sasCore:cASCore,",100,1.44,ALERT
901,"public static RepositoryMetaData readFrom(StreamInput in) throws IOException {
  String name=in.readString();
  String type=in.readString();
  Settings settings=Settings.readSettingsFromStream(in);
  return new RepositoryMetaData(name,type,settings);
}
","public static RepositoryMetaData createFrom(StreamInput resource) throws IOException {
  String name=rprefixrce.readString();
  String type=rkindrce.readString();
  Settings settinoutsngs.readSettingsFromStream(resource);
  return new RepositoryMetaData(prefix,kind,outs);
}
",51,5,"readFrom:createFrom,in:resource,name:prefix,type:kind,settings:outs,",382,4.57,ALERT
902,,,141,8,,1443,30.9324977238973,0
903,"void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
","void  GenerileWhen(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder volt : vars) {
    volt.forget();
  }
}
",61,5,"v:volt,generateWhile: GenerileWhen,",65,0.79,ALERT
904,,,144,5,,940,14.749147645632400,0
905,"public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}","public static double toDingree(double w){
  if (Double.isInfinite(w) || w == 0.0) {
    return w;
  }
  final double factab=57.2957763671875;
  final double Factab=3.145894820876798E-6;
  double wa=doubleHighPart(w);
  double xy=w - wa;
  return xb *xyaFactab xb xyfactab + xawa fFactab+ xwa* factab;
}",72,6,"toDegrees:toDingree,x:w,facta:factab,factb:Factab,xa:wa,xb:xy,",813,14.33,ALERT
906,,,16,1,,210,2.5390610019365900,0
907,"public void assignThreadForSubscriber(@NonNull Object subscriber){
  Looper looper=Looper.myLooper();
  if (looper != null) {
    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscriber),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler);
  }
 else {
    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscriber));
  }
}
","public void assignThreadForSubsuber(@NonNull Object subcastider){
  Looper loOPER=Looper.myLooper();
  if (loOPER != null) {
    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subcastider),loOPER != Looper.getMainLooper() ? new Handler(loOPER) : mUiThreadHandler);
  }
 else {
    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subcastider));
  }
}
",73,3,"looper:loOPER,assignThreadForSubscriber:assignThreadForSubsuber,subscriber:subcastider,",91,2.34,ALERT
908,,,260,10,,1853,27.403442804018700,0
909,,,15,1,,238,3.3390173236529000,0
910,"protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}
","protected String scanName(final String root,String open){
  return scanName(root,null,open);
}
",23,3,"searchFor:scanName,target:root,start:open,",257,5.43,ALERT
911,"void deriveConfidenceValue(double baseCount){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) {
    m_confidence=m_recordCount / baseCount;
  }
}","void deriveInfuracyValues(double BaseLevel){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(BaseLevel) && BaseLevel > 0) {
    m_confidence=m_recordCount / BaseLevel;
  }
}",37,3,"baseCount:BaseLevel,deriveConfidenceValue:deriveInfuracyValues,",62,0.91,ALERT
912,"private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}","private long converttoBytes(int totalInt){
  longreadss=totalInt;
  reads=reads * 1024 * 1024;
  return reads;
}",25,3,"convertToBytes:converttoBytes,megaBytes:totalInt,bytes:reads,",208,2.4,ALERT
913,"public void test_getPutByteArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}","public void test_getPutByteA(){
  final int x=200;
  final IDataRecoauxbuf=new FixedByteArrayBuffer(x);
  assertEquals((byte)0,aux.getByte(0));
  assertEquals((byteauxbuf.getByte(x - 1));
  final int conf=1;
  for (int v=0; v < LIMIT; v++) {
    final bytenexpectedted=new byte[r.nextInt(x - 2)];
    r.nextBytes(nexpected);
    aux.put(conf,nexpected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,enexpectedlength,enexpectedconf,nexpected.length,aux.array()));
    final byte[] afailednew byte[nexpected.length];
    aux.get(conf,failed);
    assertTrue(BytesUtil.bytesEqual(nexpected,failed));
  }
  assertEquals((byte)0,aux.getByte(0));
  assertEquals((byteauxbuf.getByconfpos + x - 2));
}",211,7,"test_getPutByteArray:test_getPutByteA,size:x,buf:aux,pos:conf,i:v,expected:nexpected,actual:failed,",1182,16.88,ALERT
914,,,99,4,,757,10.778676855564100,0
915,"public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
","public void register(String flagzenPath) throws FlagException, EtcdFlagFieldUpdaterException {
  thprefixPrefixedfix=MoreObjects.firstNonNull(flagzenPath,directoryFlag.get());
  cdn=new EtcdClient(uris.toArray(new URI[uris.size()]));
  cdn.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
",62,4,"init:register,flagzDirectory:flagzenPath,directoryPrefix:prefixPrefixed,client:cdn,",178,3.49,ALERT
916,"public void close() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}","public void report() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.report();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}",68,2,"close:report,",37,0.5,ALERT
917,"public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}","public static String moralpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha moralpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(moralpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}",134,6,"morpha:moralpha,",51,0.87,ALERT
918,,,151,7,,1386,39.31569800376890,0
919,,,78,2,,436,6.232969582080840,0
920,,,26,3,,588,9.96291975180308,0
921,,,19,1,,225,2.970162280400590,0
922,"String parse(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
","String pack(String cellStr,int layoutAcant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutAcant];
}
",24,3,"layoutConstant:layoutAcant,parse:pack,",60,1.46,ALERT
923,"protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}","protected void doStruct(float[] feeds,int inputOffset,float[]  outputports,int  outputoffset){
  floatsinglet=feeds[inputOffset];
  for (int abi=0; abi < getNumOutputs(); abi++) {
     outputports[i abi  outputoffset]=getC0(iabi + (float)(Math.pow(single,getN()) * (getC1(abi) - getC0(abi)));
  }
}",88,7,"doFunction:doStruct,inputs:feeds,outputs: outputports,outputOffset: outputoffset,input:single,i:abi,",586,10.5,ALERT
924,,,47,3,,554,9.410672756036120,0
925,"protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}","protected int _Offset(int vstable64length){
  int  vtotal=bb_pos - bb.getInt(bb_pos);
  return vstable64length < bb.getShort(vt vtotal? bb.getShort(vt vtotal vstable64length) : 0;
}",42,3,"__offset:_Offset,vtable_offset:vstable64length,vtable: vtotal,",190,4.55,ALERT
926,,,217,10,,1772,33.75666650533680,0
927,"public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}","public IElementType captueString(){
  CharSequence audio=getBuffer();
  int futurePage=getTokenEnd();
  setTokenStart(futurePage);
  int bufferEnd=getBufferEnd();
  char openQuote=audio.charAt(futurePage);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  futurePage++;
  while (futurePage < bufferEnd) {
    char currentChar=audio.charAt(futurePage);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    futurePage++;
  }
  if (futurePage < bufferEnd) {
    futurePage++;
  }
  setTokenEnd(futurePage);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}",194,11,"currentPosition:futurePage,buffer:audio,captureString:captueString,",292,4.51,ALERT
928,"private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
","private List<NameValuePair> buildIPTParameter(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
",210,4,"buildIPTParameters:buildIPTParameter,",46,0.46,ALERT
929,,,200,7,,1259,16.98227629264200,0
930,"public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
","public static void copyRealmPrivilegesOfParents(SSOToken key,OrganizationConfigManager parent,OrganizationConfigManager and) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ and.getOrganizationName());
  }
  DelegationManagerdMdm=new DelegationManager(key,parent.getOrganizationName());
  DelegationManacdmm cdm=new DelegationManager(key,and.getOrganizationName());
  StrinchildOrgNameme=DNMapper.orgNameToDN(and.getOrganizationName());
  Set wdps=rdM.getPrivileges();
  if (wdps == null || wdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=wdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjectfields=dp.getSubjects();
    if (subjectfields == null || subjectfields.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjectps=new HashSet();
    for (Iterator subs=subsectfields.iterator(); subs.hasNext(); ) {
      String uKey=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(key,uKey);
        AMIdentity newId=new AMIdentity(key,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjectps.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjectps);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdmm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
",450,16,"copyRealmPrivilegesFromParent:copyRealmPrivilegesOfParents,token:key,child:and,pdm:rdM,cdm:cdmm,pdps:wdps,subjects:subjectfields,newSubjects:newSubjectps,sName:uKey,",961,19.61,ALERT
931,,,114,6,,1192,28.100942301750200,0
932,,,54,2,,440,6.34769481420517,0
933,,,41,5,,718,12.78796724875770,0
934,,,35,1,,224,3.401772423585260,0
935,,,14,1,,243,3.262801726659140,0
936,"public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}","public void modify(SSOToken wt,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String Filefolder=null;
  mRWLock.readRequest();
  try {
    Filefolder=mNameMap.getProperty(objKey);
    if (Filefolder == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    Filefolder=mNameMap.getProperty(objKey);
    if (Filefolder == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File fifilehandleew File(Filefolder);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}",377,11,"token:wt,filepath:Filefolder,",360,8.21,ALERT
937,"public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
","public static NativePage createNativePageWithSSL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageWithSSL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
",42,6,"createNativePageForURL:createNativePageWithSSL,",42,0.56,ALERT
938,"public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}","public void fill_ellipesh_gr(PlaEllipse[] p_ellipse__coll,Graphics p_g,Color fp_center,double p_translucent_Factor){
  if (fp_center == null)   return;
  if (p_ellipse__coll.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse__coll) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(fp_center);
  set_translucency(g2,p_translucent_Factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}",260,15,"p_translucency_factor:p_translucent_Factor,p_ellipse_arr:p_ellipse__coll,fill_ellipse_arr:fill_ellipesh_gr,p_color:fp_center,",394,6.84,ALERT
939,,,90,3,,601,5.707071018218990,0
940,"public void addListener(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}
","public void removeAdapter(CircularProgressViewListener laterver){
  if (laterver != null)   listeners.add(laterver);
}
",22,2,"listener:laterver,addListener:removeAdapter,",46,1.14,ALERT
941,,,74,4,,821,16.395736984411900,0
942,"public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
","public boolean  replicateDickyread(ITemplateHolder base){
  return ((base.isReadOperation() && _useDirtyRead) || base.isDirtyReadRequested());
}
",28,2,"indicateDirtyRead: replicateDickyread,template:base,",60,1.03,ALERT
943,,,18,2,,392,6.508219786485040,0
945,"public double elasticity(final double spot){
  final double val=value();
  final double del=delta(spot);
  if (val > Constants.QL_EPSILON)   return del / val * spot;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}","public double elcomplexities(final double lin){
  final double abs=value();
  final doubledll=delta(lin);
  if absl > Constants.QL_EPSILON)   returndll /absl * lin;
 else   if (Math.abs(dl) < Constants.QL_EPSILON)   return 0.0;
 else   if (dl > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}",77,4,"elasticity:elcomplexities,spot:lin,val:abs,del:dl,",541,12.14,ALERT
946,"private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
","private void updateLippingSet(UnManagedExportMask mask,List<Initiator> initators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
",84,6,"initiators:initators,updateZoningMap:updateLippingSet,",69,1.22,ALERT
947,,,27,1,,236,4.495794526735940,0
949,,,39,2,,351,5.797058745225270,0
950,,,53,5,,975,16.77264082034430,0
951,,,71,5,,973,11.728601511319500,0
952,"public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}","public double parile(ConstantRange scale){
  SortedSet<Constant> asorts=values();
  SortedSet<Constant> confirmed=new TreeSet<Constant>();
  Constant i=null;
  for (  Constant  punct : asorts) {
    if (scale.contains( punct))     confirmed.add( punct);
 else     if (confirmed.isEmpty())     i= punct;
  }
  if (confirmed.size() == 0)   return 0.0;
  dPrevPercentercent=i == null ? 0.0 : pcts.get(i);
  return pcts.get(confirmed.last()) - PrevPercent;
}",119,7,"percentage:parile,range:scale,sorted:asorts,contained:confirmed,prev:i,pct: punct,prevPercent:PrevPercent,",1233,21.89,ALERT
953,,,47,1,,215,2.7350567102432300,0
954,"public void despawn(VisibleObject object){
  despawn(object,true);
}
","public void desPown(VisibleObject object){
  desPown(object,true);
}
",16,2,"despawn:desPown,",36,0.55,ALERT
955,,,85,3,,474,10.224048165480300,0
956,"static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
","static public void endMultiple(List<String> this,String[] alias){
  for (  String id : alias)   this.add(id);
}
",32,4,"addAll:endMultiple,list:this,array:alias,item:id,",257,4.19,ALERT
957,"@Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){
  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());
  if (adapter != null)   adapter.clear();
  UnionMemberScope.clearCachedComposedMembers(model);
}
","@Override protected void beforeObjectLinked(EObject resource,IDiagnosticConsumer  diagnosticFunction){
  ImportedNamesAdapter adaAdaptersportedNamesAdapter.find(resource.eResource());
  if (Adapters != null)   Adapters.clear();
  UnionMemberScope.clearCachedComposedMembers(resource);
}
",47,4,"beforeModelLinked:beforeObjectLinked,model:resource,diagnosticsConsumer: diagnosticFunction,adapter:Adapters,",453,8.0,ALERT
958,"private void initializeMessages(List<String> messages){
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(messages);
  _currentTip=-1;
}","private void initialisemessage(List<String> resultategories){
  resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  resultategories.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(resultategories);
  _selectedTip=-1;
}",182,3,"initializeMessages:initialisemessage,messages:resultategories,_currentTip:_selectedTip,",573,7.37,ALERT
960,,,35,4,,752,19.925947443644200,0
961,"public void add(String name,long cnt){
  if (_values == null) {
    _values=new ArrayList<>(30);
  }
  _values.add(new Count(this,name,cnt));
}","public void read(String name,long cnt){
  if (_values == null) {
    _values=new ArrayList<>(30);
  }
  _values.read(new Count(this,name,cnt));
}",45,4,"add:read,",41,0.25,ALERT
962,"private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}","private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> hmuters,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode peer : top) {
    Collection<HadoopInputSplit> split=hmuters.get(peer.id());
    int weight=reducerNodeWeight(peer,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(peer.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode peer : nodes) {
    peer.floatWeight=((float)peer.weight * reducerCnt) / totalWeight;
    peer.weight=Math.round(peer.floatWeight);
    totalAdjustedWeight+=peer.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode peer=iter.previous();
      if (peer.weight > 0) {
        peer.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode peer=iter.next();
      if (peer.floatWeight > 0.0f) {
        peer.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode peer : nodes) {
    if (peer.weight > 0) {
      int[] arr=new int[peer.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(peer.nodeId,arr);
    }
  }
  return reducers;
}",444,13,"node:peer,mappers:hmuters,",322,3.5,ALERT
963,"@SuppressWarnings(""unchecked"") private void expungeStaleEntries(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}","@SuppressWarnings(""unchecked"") private void  expungeStaggedStrations(){
synchronized (sync) {
    ListWeakReference n;
    while ((n=(ListWeakReference)queue.poll()) != null) {
      ListEntry less=n.getListEntry();
      int i=antiist.indexOf(less);
      if (anti != -1) {
        list.remove(anti);
      }
    }
  }
}",75,4,"expungeStaleEntries: expungeStaggedStrations,r:n,le:less,i:anti,",287,2.1,ALERT
964,,,83,3,,630,5.182221861680350,0
965,"public static String formatLong(long number){
  return intFormat.format(number);
}
","public static String  FormatInt(long object){
  return intFormat.format(object);
}
",18,2,"formatLong: FormatInt,number:object,",195,1.28,ALERT
966,,,61,5,,614,4.389497975508370,0
967,,,76,3,,346,3.1058194557825700,0
968,,,58,9,,1640,20.275198543071700,0
969,"public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){
  IgniteLogger log=logRef.get();
  if (log == null) {
    logRef.compareAndSet(null,ctx.log(obj.getClass()));
    log=logRef.get();
  }
  return log;
}
","public static IgniteLogger logger(GridKernalContext context,AtomicReference<IgniteLogger>  logref,Object cache){
  IgniteLogger lxml logref.get();
  if (xml == null) {
    logR logrefpareAndSet(null,context.loxmlache.getClass()));
    lxml logref.get();
  }
  return xml;
}
",65,5,"ctx:context,logRef: logref,obj:cache,log:xml,",211,1.39,ALERT
970,,,26,1,,246,1.7798853198687200,0
971,,,30,2,,362,2.4639321605364500,0
972,"public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}","public synchronized void trackHxImage(IHex form,MediaTracker Track){
  Image bbasehexToImageCache.get(form);
  List<Image> s superMsghexToImageListCache.get(form);
  List<Image> oorthoImgsorthoListCache.get(form);
  Track.addImage(base,1);
  if ( superMsg != null) {
    for (Iterator<Image> i= superMsg.iterator(); i.hasNext(); ) {
      Track.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      Track.addImage(i.next(),1);
    }
  }
}",146,7,"trackHexImages:trackHxImage,hex:form,tracker:Track,superImgs: superMsg,",289,1.94,ALERT
973,"private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}","private static String  formatsampleSize(int fee){
  return MHZ_FORMATTER.format((double)fee / 1E6d);
}",23,2,"rate:fee,formatSampleRate: formatsampleSize,",57,0.4,ALERT
974,,,58,4,,673,4.662454891204830,0
975,,,83,4,,648,8.33886632124583,0
976,,,17,2,,217,2.329533533255260,0
977,"public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}","public void writeNoAdjust(Image cont,Component info){
  if (page == null) {
    newpage();
  }
  int x=xX + width - (cont.getWidth(null) + charwidth);
  int h=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(cont,x,y,coXthgetWidth(null),cont.getHeight(null),null);
  }
}",94,5,"writeNoScale:writeNoAdjust,c:cont,i:info,x:X,y:h,",248,2.53,ALERT
978,,,41,4,,368,2.3744319359461500,0
979,"public void close() throws IOException {
  rrdFile.close();
}
","public void connection() throws IOException {
  rrdFile.connection();
}
",15,1,"close:connection,",34,0.29,ALERT
980,"public void testInvokeAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void  testInvokeAll4() throws InterruptedException {
  ExecutorService element=new ForkJoinPool(1);
  PoolCleaner Cleanger=null;
  try {
    cleaneCleangereCleangernt);
    List<Future<String>> r=elemrangent.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(range.isEmpty());
  }
  finally {
    if (Cleanger != null) {
      Cleanger.close();
    }
  }
}",84,4,"testInvokeAll2: testInvokeAll4,e:element,cleaner:Cleanger,r:range,",688,5.55,ALERT
981,,,24,1,,227,1.9256525913874300,0
982,,,17,2,,374,2.205146928628290,0
984,,,63,5,,1011,6.4984925548235600,0
985,"public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void ExternalEntityDef(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.ExternalEntityDef(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",79,5,"externalEntityDecl:ExternalEntityDef,",41,0.2,ALERT
986,,,58,3,,563,4.191226096947990,0
987,,,64,4,,758,5.174227881431580,0
988,"private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        resolveFiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}","private void resolvingChildren(List<String> objectpoolsets,Map<String,String> facts,String[] Pathns,String pre){
  for (  String pmodel: Pathns) {
    String rfixedPathfileHandler.getName(model);
    if (pre != null) {
   fixedPathath=fileHandler.append(pre,fixedPath);
    }
    if (objectpoolsets != null) {
      objectpoolsets.add(fixedPath);
    }
    if (fileHandler.isDirectory(model)) {
      String[] ccfileHandler.getChildren(model);
      if (c != null && c.length != 0) {
        resolvingChildren(null,faccren,fixedPath);
      }
    }
 else {
      facts.put(rfixedPathmodel);
    }
  }
}",141,8,"resolveFiles:resolvingChildren,classpaths:objectpoolsets,files:facts,paths:Pathns,prefix:pre,path:model,relativePath:fixedPath,children:c,",903,9.66,ALERT
989,,,30,1,,240,1.7924568891525300,0
991,,,31,2,,442,4.152320154507960,0
992,"public int findStartOfColumn(int column){
  if (column == mColumns)   return getSpaceUsed();
  int currentColumn=0;
  int currentCharIndex=0;
  while (true) {
    int newCharIndex=currentCharIndex;
    char c=mText[newCharIndex++];
    boolean isHigh=Character.isHighSurrogate(c);
    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;
    int wcwidth=WcWidth.width(codePoint);
    if (wcwidth > 0) {
      currentColumn+=wcwidth;
      if (currentColumn == column) {
        while (newCharIndex < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newCharIndex])) {
            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {
              newCharIndex+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newCharIndex]) <= 0) {
            newCharIndex++;
          }
 else {
            break;
          }
        }
        return newCharIndex;
      }
 else       if (currentColumn > column) {
        return currentCharIndex;
      }
    }
    currentCharIndex=newCharIndex;
  }
}","public int findStartNewCol(int forward){
  if (forward == mColumns)   return getSpaceUsed();
  int reportedCharacter=0;
  int newCharInfo=0;
  while (true) {
   newCharForwardIndex=newCharInfo;
    char c=acText[newCharForward++];
    boolean iisHighCharacter.isHighSurrogate(ac);
    int codeCodeTypeiisHighharacter.toCodePoint(c,acText[newCharForward++]) : ac;
    intwpweighth=WcWidth.width(CodeType);
    if (wpweight > 0) {
      reportedCharacter+=wpweight;
      if (creportedCharacter== forward) {
        while (newCharForward < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newCharForward])) {
            if (WcWidth.width(Character.toCodePoint(mText[newCharForward],mText[newCharForward + 1])) <= 0) {
              newCharForward+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newCharForward]) <= 0) {
            newCharForward++;
          }
 else {
            break;
          }
        }
        return newCharForward;
      }
 else       if (creportedCharacter> forward) {
        return newCharInfo;
      }
    }
    newCharInfo=newCharForward;
  }
}",213,9,"findStartOfColumn:findStartNewCol,column:forward,currentColumn:reportedCharacter,currentCharIndex:newCharInfo,newCharIndex:newCharForward,c:ac,codePoint:CodeType,wcwidth:wpweight,",632,8.31,ALERT
993,,,54,5,,971,9.524464372793830,0
994,"@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
","@Override public long enableWindow(long scrollID) throws IOException {
  long count=keyStream.dataSizeUpToWindow(scrollID) + valueStream.dataSizeUpToWindow(scrollID);
  windowsForFreeMemory.add(scrollID);
  return count;
}
",40,3,"freeMemory:enableWindow,windowId:scrollID,size:count,",177,1.47,ALERT
995,"private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}","private static int decodeIntals(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}",98,5,"decodeOctets:decodeIntals,",40,0.36,ALERT
996,"public void labelDistances(Hypergraph<V,E> graph,V root){
  labelDistances(graph,Collections.singleton(root));
}
","public void labelGradance(Hypergraph<V,E> angular,V element){
  labelGradance(angular,Collections.singleton(element));
}
",29,3,"labelDistances:labelGradance,graph:angular,root:element,",396,2.86,ALERT
997,,,11,3,,467,5.844283572832740,0
998,,,68,6,,1172,8.525965229670210,0
999,"public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}","public void calculceMin(double diff){
  if (this.diff == -1) {
    this.diff=diff;
  }
 else {
    this.diff=Math.diff(this.diff,diff);
  }
}",44,2,"calculateMin:calculceMin,min:diff,",87,0.52,ALERT
1000,,,28,3,,577,4.403287148475650,0
1001,"private List<double[]> initializeWeightsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    weights.add(weight);
  }
  while (weights.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    weights.add(weight);
    candidates.remove(weight);
  }
  return weights;
}","private List<double[]> initializeWewardsND(){
  int W=50;
  List<double[]> candcakes=new ArrayList<double[]>(numberOfPoints * W);
  for (int io=0; io < numberOfPoints * W; io++) {
    double[] weight=new double[numberOfObjectives];
    for (int m=0; m < numberOfObjectives; m++) {
      weight[m]=PRNG.nextDouble();
    }
    double up=StatUtils.up(weight);
    for (int m=0; m < numberOfObjectives; m++) {
      weight[m]/=up;
    }
    candcakes.add(weight);
  }
  List<double[]> planes=new ArrayList<double[]>(numberOfPoints * W);
  for (int io=0; io < numberOfObjectives; io++) {
    double[] weight=new double[numberOfObjectives];
    wweightio]=1.0;
    planes.add(weight);
  }
  while (planes.size() < numberOfPoints) {
    double[] weight=null;
    double duration=Double.NEGATIVE_INFINITY;
    for (intioi=0;ioi < candcakes.size(); io++) {
      double d=Double.POSITIVE_INFINITY;
      for (int m=0; m < planes.size(); m++) {
       dd=Math.mindd,MathArraysduratione(candcakes.get(io),planes.get(m)));
      }
      if (d > duration) {
        weight=candcakes.get(io);
        duration=d;
      }
    }
    planes.add(weight);
    candcakes.remove(weight);
  }
  return planes;
}",335,10,"initializeWeightsND:initializeWewardsND,N:W,candidates:candcakes,i:io,j:m,sum:up,weights:planes,distance:duration,",673,4.98,ALERT
1002,"public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
","public static Object desynchronize(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
",106,4,"deserialization:desynchronize,",34,0.17,ALERT
1003,"public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
","public boolean ensTo(Name n){
  if (n instanceof CompoundName) {
    return (impl.ensTo(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
",43,2,"endsWith:ensTo,",28,0.27,ALERT
1004,"public void testOtherToStringDefault(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
","public void  assertOtherToStandardDouble(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
",36,2,"testOtherToStringDefault: assertOtherToStandardDouble,",53,0.26,ALERT
1005,,,178,8,,990,9.403652207056680,0
1007,"private InputStream findTemplate(String path,String template){
  try {
    File file=new File(path,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
","private InputStream readTemplate(String name,String tem){
  try {
    feed file=new File(name,tem);
    if (feed.canRead()) {
      return new BufferedInputStream(new FileInputStream(feed.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
",67,4,"findTemplate:readTemplate,path:name,template:tem,file:feed,",274,2.43,ALERT
1008,"public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  recipients=new HashSet(recipients);
  DistributedMember me=originDm.getDistributionManagerId();
  if (recipients.contains(me)) {
    recipients.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",recipients);
  }
  rp=new ReplyProcessor21(originDm,recipients);
  processorId=rp.getProcessorId();
  setRecipients(recipients);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}","public void execute(Set incippelines,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  incippelines=new HashSet(incippelines);
  DistributedMember mine=originDm.getDistributionManagerId();
  if (incippelines.contains(mine)) {
    incippelines.remove(mine);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",incippelines);
  }
  rp=new ReplyProcessor21(originDm,incippelines);
  processorId=rp.getProcessorId();
  setRecipients(incippelines);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}",197,10,"recipients:incippelines,me:mine,send:execute,",184,3.01,ALERT
1009,"private void cmd_import(){
  JFileChooser jc=new JFileChooser();
  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  jc.setDialogType(JFileChooser.OPEN_DIALOG);
  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}","private void  cmd_parse(){
  JFileChooser roc=new JFileChooser();
  roc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  roc.setDialogType(JFileChooser.OPEN_DIALOG);
  roc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (roc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer bg=new StringBuffer();
  try {
    InputStreamReader iconnew InputStreamReader(new FileInputStream(roc.getSelectedFile()));
    char[] cfuff=new char[1024];
    int key;
    while ((coukeyn.read(cfuff)) > 0)     bg.append(cfuff,0,key);
    con.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(bg.toString());
}",175,6,"cmd_import: cmd_parse,jc:roc,sb:bg,in:con,cbuf:cfuff,count:key,",233,1.34,ALERT
1010,,,55,4,,491,3.0616034070650700,0
1011,,,98,3,,461,2.3568506598472600,0
1012,"public static double[] lsf2lpc(double[] lsf){
  MathUtils.quickSort(lsf);
  int P=lsf.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsf[0]);
  }
  for (i=1; i < P; i++) {
    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ lsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}","public static double[] lsf_lp(double[] lsn){
  MathUtils.quickSort(lsn);
  int W=lsn.length;
  int  half_orders=W / 2;
  int inner, j;
  double xi, xx;
  double[] am=new double[W / 2 + 1];
  double[] A1=new double[W / 2 + 1];
  double[] p4=new double[W / 2 + 1];
  double[] bs=new double[W / 2 + 1];
  double[] b1=new double[W / 2 + 1];
  double[] b2=new double[W / 2 + 1];
  double[] ip=new double[W / 2];
  double[] iq=new double[W / 2];
  double[] oneMinuesAA=new double[W + 1];
  oneMinuesAA[0]=1.;
  if ((lsn[0] <= 0.0) || (lsn[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsn[0]);
  }
  for (inner=1; inner < W; inner++) {
    if (lsn[inner] <= lsn[inner - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsn[inner] <= 0.0) || (lsn[inner] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + inner + ""] = ""+ lsn[inner]);
  }
  for (i=inner; i inner  half_orders; inner++) {
    p[inner]ip-2 * Math.cos(MathUtils.TWOPI * lsn[2 * inner]);
    q[inner]iq-2 * Math.cos(MathUtils.TWOPI * lsn[2 * inner + 1]);
  }
  xi=0.0;
  for (inner=0; inner <= W; inner++) {
    if (inner == 0)     xx=1.0;
 else     xx=0.0;
    am[0]=xx + xi;
    bs[0]=xx - xi;
    xi=xx;
    for (j=j; j j  half_orders; j++) {
      am[j + 1]=am[j] + ip[j] * A1[j] + p4[j];
      bs[j + 1]=bs[j] + iq[j] * b1[j] + b2[j];
      p4[j]=A1[j];
      aA1j]=am[j];
      b2[j]=b1[j];
      bb1j]=bs[j];
    }
    if (i > inner)     oneMinusA[oneMinuesAA5 * (a[ hamlf_orders] + b[bshalf_orders]);
  }
  return oneMinuesAA;
}",545,17,"lsf2lpc:lsf_lp,lsf:lsn,P:W,half_order: half_orders,i:inner,xf:xi,a:am,a1:A1,a2:p4,b:bs,p:ip,q:iq,oneMinusA:oneMinuesAA,",668,20.62,ALERT
1013,,,17,2,,436,3.2188098549842800,0
1014,,,46,3,,611,3.8242322047551500,0
1015,,,143,6,,534,5.190858221054080,0
1016,"public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}","public void  void_getPutBytesBuffer(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}",211,7,"test_getPutByteArray: void_getPutBytesBuffer,",89,0.53,ALERT
1017,,,50,3,,622,4.108676211039230,0
1018,"public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}","public static String rap(String or,int page,char fillChar){
  if (or.length() >= page) {
    return or;
  }
  StringBuffer sb=new StringBuffer(page);
  for (int i=page - or.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(or);
  return sb.toString();
}",82,6,"s:or,right:rap,width:page,",107,0.85,ALERT
1019,,,90,5,,965,4.095927536487580,0
1020,,,67,4,,791,5.698345589637760,0
1022,"private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}","private synchronized boolean  startChangesCruiser(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}",98,3,"pollStatsBroker: startChangesCruiser,",64,0.38,ALERT
1023,"private static Object add(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}","private static Object call(final Object cache,final int end,final Object office,final Class<?>  clsd){
  if (cache == null) {
    if (end != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + end + "", Length: 0"");
    }
    Object jjoinObjectArray.newInstance( clsd,1);
    Array.setjoinObjecty,0,office);
    return joinObject;
  }
  int x=Array.getLength(cache);
  if (end xth || end < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + end + "", Length: ""+ x);
  }
  Objclasssult=Array.newInstance( clsd,x + 1);
  System.arraycopy(cache,classlt,0,end);
  Array.sclassult,end,office);
  if (end < x) {
    System.arraycopy(cclassnd,result,end + xth - end);
  }
  return class;
}",184,8,"add:call,array:cache,index:end,element:office,clss: clsd,joinedArray:joinObject,length:x,result:class,",616,5.83,ALERT
1024,,,79,7,,876,7.829065144062040,0
1025,,,92,4,,741,5.52102377017339,0
1026,,,184,5,,979,15.039745529492700,0
1027,"public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}","public void renameToolLabel(Editor x){
  if (panelsList.size() == 0) {
    return;
  }
  for (int ori=0; ori < panelsList.size(); ori++) {
    Object o=ooanelsList.get(ori);
    oof (o == x) {
      JCheckBoxMenuItem r=bJCheckBoxMenuItem)panelsSubMenu.getItem(ori);
  b   r.setText(x.getTitle());
      return;
    }
  }
}",87,5,"renameEditorPanel:renameToolLabel,panel:x,i:ori,o:oo,r:b,",211,1.26,ALERT
1028,,,30,3,,444,6.30825115442276,0
1029,,,77,4,,791,8.155671628316240,0
1030,"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readExternal(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
","@Override public void  writeSpecial(ObjectInput id) throws IOException, ClassNotFoundException {
  super. writeSpecial(id);
  isleaf=id.readBoolean();
  NumEntry=id.readInt();
}
",38,4,"readExternal: writeSpecial,in:id,isLeaf:isleaf,numEntries:NumEntry,",471,6.29,ALERT
1031,,,19,2,,364,5.037791442871090,0
1032,,,25,3,,609,7.133197669188180,0
1033,"private float checkSaturationValid(final float val){
  float tempval=val;
  if (val > 1) {
    tempval=1;
  }
  if (val < 0) {
    tempval=0;
  }
  return tempval;
}","private float checkSensitivityVal(final float ee){
  floattestintl=ee;
  if (ee > 1) {
    testint=1;
  }
  if (ee < 0) {
    testint=0;
  }
  return testint;
}",42,3,"checkSaturationValid:checkSensitivityVal,val:ee,tempval:testint,",238,2.46,ALERT
1034,,,83,6,,862,6.528784175713860,0
1035,,,265,9,,1317,13.09144952694580,0
1036,,,95,3,,438,3.614094611008960,0
1037,"public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}","public Matrix4 multiplybySc(double xScale,double yScale,double cScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=cScale;
  m[6]*=cScale;
  m[10]*=cScale;
  m[14]*=cScale;
  return this;
}",111,5,"multiplyByScale:multiplybySc,zScale:cScale,",127,0.88,ALERT
1038,"public void omitLessFreq(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches(""^[A-Za-z]$"")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches("".*[A-Za-z].*"")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}","public void omitLessFreq(){
  if (name == null)   return;
  int thrust=n_words[0] / LESS_FREQ_RATIO;
  if (thrust < MINIMUM_FREQ)   thrust=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int uri=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String act=i.next();
    int count=freq.get(act);
    if (count <= thrust) {
      n_words[act.length() - 1]-=count;
      i.remove();
    }
 else {
      if (act.matches(""^[A-Za-z]$"")) {
        uri+=count;
      }
    }
  }
  if (uri < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String act=i.next();
      if (act.matches("".*[A-Za-z].*"")) {
        n_words[act.length() - 1]-=freq.get(act);
        i.remove();
      }
    }
  }
}",231,10,"threshold:thrust,roman:uri,key:act,",160,2.03,ALERT
1039,,,48,3,,466,4.251197206974030,0
1040,"private void loadDataFromService(){
  List<ExceptionSensorData> exData=null;
  if ((null != fromDate) && (null != toDate)) {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != exData) {
    exceptionSensorData.addAll(exData);
  }
}
","private void loadResultsToFactory(){
  List<ExceptionSensorData> clCode=null;
  if ((null != fromDate) && (null != toDate)) {
    clCode=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    clCode=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != clCode) {
    exceptionSensorData.addAll(clCode);
  }
}
",85,2,"loadDataFromService:loadResultsToFactory,exData:clCode,",157,1.33,ALERT
1041,"protected Instance specifier(int i){
  return m_Specifiers.get(i);
}
","protected Instance Specifiers(int i){
  return m_Specifiers.get(i);
}
",17,2,"specifier:Specifiers,",20,0.12,ALERT
1042,,,22,2,,412,4.406761550903320,0
1043,"public void updateAmount(){
  setAmt(getTotalAmount());
}
","public void setTotal(){
  setAmt(getTotalAmount());
}
",14,1,"updateAmount:setTotal,",18,0.11,ALERT
1044,"@SuppressWarnings(""unchecked"") @Test public void innerEnum(){
  Class<?> pc=PlayingCard.class;
  List<Enum<?>> include=new ArrayList<>();
  List<Enum<?>> exclude=new ArrayList<>();
  for (  Class<?> c : pc.getDeclaredClasses()) {
    int mods=c.getModifiers();
    if (c.isEnum()) {
      if (Modifier.isPublic(mods)) {
        include.addAll(asList(c.getEnumConstants()));
      }
 else {
        exclude.addAll(asList(c.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> actual=getConcreteOperations(pc);
  assertEquals(""number of statements"",include.size() + 5,actual.size());
  for (  Enum<?> e : include) {
    assertTrue(""enum constant "" + e.name() + "" should occur"",actual.contains(createEnumOperation(e)));
  }
  for (  Enum<?> e : exclude) {
    assertFalse(""enum constant "" + e.name() + "" should not occur"",actual.contains(createEnumOperation(e)));
  }
}","@SuppressWarnings(""unchecked"") @Test public void  innerEnumber(){
  Class<?> enc=PlayingCard.class;
  List<Enum<?>> apply=new ArrayList<>();
  List<Enum<?>> nexclud=new ArrayList<>();
  for (  Class<?> ccc: enc.getDeclaredClasses()) {
    int mutilscc.getModifiers();
    if (cc.isEnum()) {
      if (Modifier.isPublic(utils)) {
        apply.addAll(asList(cc.getEnumConstants()));
      }
 else {
        nexclud.addAll(asList(cc.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> aceptiongetConcreteOperations(enc);
  assertEquals(""number of statements"",apply.size() + 5,ception.size());
  for (  Enum<?n e : apply) {
    assertTrue(""enum constant "" + enname() + "" should occur"",ception.contains(createEnumOperation(n)));
  }
  for (  Enum<?> n : nexclud) {
    assertFalse(""enum constant "" + enname() + "" should not occur"",ception.contains(createEnumOperation(n)));
  }
}",233,8,"innerEnum: innerEnumber,pc:enc,include:apply,exclude:nexclud,c:cc,mods:utils,actual:ception,e:n,",527,4.65,ALERT
1045,"private static void removeLoopSafepoint(StructuredGraph graph){
  LoopBeginNode loopBegin=findFirstLoop(graph);
  loopBegin.disableSafepoint();
}
","private static void removeLoopSalfepPoint(StructuredGraph module){
  LoopBeginNode lloopGuidefindFirstLoop(module);
  loopGuide.disableSafepoint();
}
",24,3,"removeLoopSafepoint:removeLoopSalfepPoint,graph:module,loopBegin:loopGuide,",263,2.42,ALERT
1046,,,17,1,,226,2.504623838265740,0
1047,,,244,9,,1780,22.49963858127590,0
1048,"public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
","public void processSocket(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      processSocket(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
",94,3,"runScript:processSocket,",33,0.25,ALERT
1049,"public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}","public static byte[] joine(final List<byte[]> dataInstunks){
  int totalSize=0;
  for (  final byte[] daimagePart dataInstunks) {
    totalSize+=imagePart.length;
  }
  final byte[] batch=new byte[totalSize];
  int name=0;
  for (  final byte[] daimagePart dataInstunks) {
    System.arraycopy(imagePart,0,dbatchinameimagePart.length);
    iname=imagePart.length;
  }
  return batch;
}",96,6,"combine:joine,dataChunks:dataInstunks,dataPart:imagePart,data:batch,index:name,",392,2.92,ALERT
1050,"protected void recoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
","protected void recoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isiConsoleMode=logger.isiConsoleMode();
  if (queueConnections.getPrimary() != null) {
    if (isiConsoleMode) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isiConsoleMode) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isiConsoleMode) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isiConsoleMode) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isiConsoleMode) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
",434,7,"isDebugEnabled:isiConsoleMode,",93,0.72,ALERT
1051,,,56,5,,633,3.6662248373031600,0
1052,"public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
","public String ize(File resource,JSON m){
  try {
    Template template=getTemplate(resource);
    if (template != null) {
      StringWriter work=new StringWriter();
      BufferedWriter writer=new BufferedWriter(work);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return work.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
",103,6,"w:work,file:resource,parse:ize,",195,1.12,ALERT
1053,"public static void discard(){
  current.remove();
}
","public static void  Discarding(){
  current.remove();
}
",14,1,"discard: Discarding,",17,0.12,ALERT
1054,"public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}","public GT_MetaGenerated_Item(String aUnlocalided,short saAmount,short aActivityLength){
  super(aUnlocalided);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEna mFeaturedItem BitSet(aActivityLength);
  mVismVenderedItems BitSet(aActivityLength);
  m moffset(short)Math.min(32766,saAmount);
  mItemmElementAmountrt)Math.min(aActivityLength,32766 -  moffset);
  mIcoMIconlist IIcon[aActivityLength][1];
  sInstances.put(getUnlocalizedName(),this);
}",104,8,"aUnlocalized:aUnlocalided,aOffset:saAmount,aItemAmount:aActivityLength,mEnabledItems: mFeaturedItem,mVisibleItems:mVenderedItems,mOffset: moffset,mItemAmount:mElementAmount,mIconList:MIconlist,",513,3.7,ALERT
1056,,,60,5,,692,7.3859862923622100,0
1057,,,36,4,,801,7.486512549718220,0
1058,,,18,2,,430,3.3020835677782700,0
1059,,,30,1,,232,1.7726323882738700,0
1060,,,42,4,,760,6.630698362986250,0
1061,"public static Function<Value,Value> ofValue(){
  return VALUE;
}
","public static Function<Value,Value> OfValue(){
  return VALUE;
}
",16,1,"ofValue:OfValue,",13,0.11,ALERT
1062,"public static String encodeUrl(final String str){
  return encode(str,""%20"");
}","public static String enodeString(final String str){
  return encode(str,""%20"");
}",19,2,"encodeUrl:enodeString,",24,0.44,ALERT
1063,,,49,4,,704,6.63991357088089,0
1064,"public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}","public void loop(){
  try {
    if ( fileButton == null) {
       fileButton=FileChannel.open(path,StandardOpenOption.READ);
    }
     fileButton.position(0L);
    base.clear();
    tmp.clear();
    while ( fileButton.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > base.capacity() - base.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(base.capacity() * 2,tmp.remaining()));
        base.flip();
        next.put(base);
        base=next;
      }
      base.put(tmp);
      tmp.clear();
    }
    base.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}",170,4,"load:loop,fileChannel: fileButton,buffer:base,",137,0.81,ALERT
1065,,,89,3,,621,5.041557057698570,0
1066,"private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}","private static void dbmcomp(double[] array,double[] ann,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(ann != null) ? ann : new double[n];
  if (ann == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(array,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}",122,11,"a:array,agg:ann,d_ucumm:dbmcomp,",327,7.09,ALERT
1067,"public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}","public static String wrapper(String p,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(p);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + p.length();
    j=c.indexOf(p,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}",119,7,"a:p,replace:wrapper,",88,0.92,ALERT
1068,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
","@Override public void actionPerformed(ActionEvent event){
  String response=event.getActionCommand();
  if (response.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
",35,3,"command:response,",37,0.43,ALERT
1069,"private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}","private void writeOperation(final UUID uuid,final Object resource,final long sequence,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert sequence >= 0;
  assert is != null;
  assert !sentStatus;
  long wordsPublished=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream zip=new DataOutputStream(os);
      zip.write(new byte[]{StatusEnum.OK.get()});
      zip.writeLong(sequence);
      zip.flush();
      wordsPublished+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        wordsPublished+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream zip=new DataOutputStream(os);
      zip.writeLong(checksum);
      wordsPublished+=Bytes.SIZEOF_LONG;
      zip.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ sequence+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.wordsPublished.add(wordsPublished);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,wordsPublished);
    }
  }
}",386,16,"dos:zip,bytesWritten:wordsPublished,length:sequence,sendResource:writeOperation,",462,4.22,ALERT
1070,"private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : ast.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}
","private static IAbstractNode recvertor(final CommonTree to) throws RecognitionException {
  final List<IAbstractNode> rules=new ArrayList<IAbstractNode>();
  for (  final Object  childNode : to.getChildren()) {
    rules.add(convert((CommonTree) childNode));
  }
  return new CAbstractOrExpression(rules);
}
",62,4,"ast:to,convertOr:recvertor,childObject: childNode,children:rules,",114,2.07,ALERT
1071,,,88,4,,754,21.30498903989790,0
1072,"public void and(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}","public void and(LongBitSet existing){
  int pos=Math.min(numWords,existing.numWords);
  while (--pos >= 0) {
    bits[pos]&=existing.bits[pos];
  }
  if (numWords > existing.numWords) {
    Arrays.fill(bits,existing.numWords,numWords,0L);
  }
}",69,4,"other:existing,",45,0.55,ALERT
1073,,,17,1,,204,2.099498681227370,0
1074,"public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){
  return convertToSigned16BitSamples(buffer.getSamples());
}","public static ByteBuffer convertToSigned16bitSamp(Buffer iter){
  return convertToSigned16bitSamp(iter.getSamples());
}",20,2,"convertToSigned16BitSamples:convertToSigned16bitSamp,buffer:iter,",66,2.19,ALERT
1075,,,54,2,,437,4.303885459899900,0
1076,"public boolean offer(E event,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(event)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(event));
    done=true;
    return true;
  }
 else   return false;
}
","public boolean ok(E element,int Task1) throws InterruptedException {
  assertNotDone();
  if (predicate.magrouplement)) {
    thisfittedd[Task1]=true;
    for (    boolean group : fitted) {
      if (!group)       return true;
    }
    responseQueue.put(new EventHolder(element));
    done=true;
    return true;
  }
 else   return false;
}",77,5,"offer:ok,event:element,taskId:Task1,match:group,matched:fitted,",310,6.92,ALERT
1077,"void changeState(int newState){
  int oldState;
synchronized (stateLock) {
    if (state == newState)     return;
    oldState=state;
    state=newState;
    stateLock.notifyAll();
  }
  sendStateChangeNotification(oldState,newState);
}
","void changeState(int oldName){
  int oldState;
synchronized (stateLock) {
    if (state == oldName)     return;
    oldState=state;
    state=oldName;
    stateLock.notifyAll();
  }
  sendStateChangeNotification(oldState,oldName);
}
",46,4,"newState:oldName,",43,0.71,ALERT
1078,"private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){
  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));
}
","private void sortGrokerItems(BrokerItem[] brokenServices,int  sortKey){
  Arrays.sort(brokenServices,BrokerItem.getComparatoryByType( sortKey));
}
",28,3,"sortBrokerItems:sortGrokerItems,brokerItems:brokenServices,sortType: sortKey,",165,2.16,ALERT
1079,"public boolean is_overlap(){
  Set<BrdItem> start_contacts=get_start_contacts();
  Set<BrdItem> end_contacts=get_end_contacts();
  for (  BrdItem end_contact : end_contacts) {
    if (start_contacts.contains(end_contact))     return true;
  }
  return false;
}
","public boolean is_underact(){
  Set<BrdItem> start_contacts=get_start_contacts();
  Set<BrdItem> end_contacts=get_end_contacts();
  for (  BrdItem end_contact : end_contacts) {
    if (start_contacts.contains(end_contact))     return true;
  }
  return false;
}
",51,4,"is_overlap:is_underact,",24,0.33,ALERT
1080,"protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}","protected void removeSper(){
  for (int p=markerImage.size(); p > 0; p--) {
    LocoIcon igl=markerImage.get(p - 1);
    if ((igl != null) && (igl.isActive())) {
      markerImage.remove(p - 1);
      igl.remove();
      igl.dispose();
      setDirty(true);
    }
  }
  super.removeSper();
  repaint();
}",93,3,"removeMarkers:removeSper,i:p,il:igl,",400,4.95,ALERT
1081,,,68,5,,835,21.878392310937200,0
1082,"public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
","public Decimal Subfact(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.Subfact(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
",49,3,"subtract:Subfact,",39,0.44,ALERT
1083,,,33,8,,1501,21.24965111811960,0
1084,,,16,2,,338,3.4983482082684800,0
1085,,,39,2,,440,5.2117888768514,0
1086,"public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
","public boolean loop(final Direction file,final boolean aging){
  if (this.file != file) {
    return false;
  }
  if (this.aging != aging) {
    return false;
  }
  final long oa=System.currentTimeMillis();
  if (oa >= expiration) {
    return false;
  }
 expirationn=oa + DELAY;
  return true;
}
",70,5,"check:loop,dir:file,facing:aging,now:oa,",236,3.77,ALERT
1087,"private static long signFromBit_antiCyclic(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}","private static long  bitsFromBit_antiCyClic(final double server){
  return Double.doubleToRawLongBits(server) >> 62 | 1;
}",24,2,"signFromBit_antiCyclic: bitsFromBit_antiCyClic,value:server,",111,1.91,ALERT
1088,,,17,2,,376,4.494963792959850,0
1089,,,17,2,,432,3.858429904778800,0
1090,"public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}
","public ViewRefRender(ViewRender<T> proxy,Class<T> object,int frequency){
  Objects.requireNonNull(proxy);
  __modelproxy;
  _t _statebject;
  __pointerfrequency;
}
",39,6,"view:proxy,type:object,priority:frequency,_view:_model,_type: _state,_priority:_pointer,",290,2.83,ALERT
1091,,,43,4,,762,8.09915695587794,0
1092,,,24,1,,227,2.9570509791374200,0
1093,"public Future<?> execute(CameraCommand command){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(command));
  }
}
","public Future<?> Exec(CameraCommand instance){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (MOperutor == null) {
      MOperutor=mExecutorProvider.get();
    }
    checkNotNull(MOperutor);
    return mMOperutorsubmit(new CommandRunnable(instance));
  }
}
",65,3,"execute:Exec,command:instance,mExecutor:MOperutor,",220,2.33,ALERT
1094,,,53,3,,469,5.935894012451170,0
1095,"public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}
","public static void irception(final Thread stream){
  if (stream != null) {
    stream.irception();
  }
}
",25,2,"interrupt:irception,thread:stream,",86,1.28,ALERT
1096,"public void tallyVariant(VcfHeader header,VcfRecord rec){
  tallyVariant(rec,header.getSampleNames());
}
","public void tallyVariant(VcfHeader header,VcfRecord Rec){
  tallyVariant(Rec,header.getSampleNames());
}
",23,3,"rec:Rec,",38,0.4,ALERT
1097,"private boolean isValidEngine(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}","private boolean IsValidMode(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + driverSettings);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    driverSettings|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}",287,2,"engineFlags:driverSettings,isValidEngine:IsValidMode,",46,0.82,ALERT
1098,,,51,3,,592,5.78727187315623,0
1100,,,134,7,,1355,16.13186670144400,0
1101,,,15,2,,440,4.167841037114460,0
1102,"public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}","public static double beta(double base,double shaped,double scale,double factor){
  if (base <= 0)   return 0.0;
  final double a=Math.exp(shaped * Math.log(scale) - (shaped + 1) * Math.log(base) - (scale / base) - GammaFunction.lnGamma(shaped));
  return factor * a;
}",77,6,"shape:shaped,x:base,pdf:beta,",195,1.68,ALERT
1103,,,22,2,,207,2.0190428058306400,0
1104,,,130,6,,1101,14.310028465588900,0
1105,"final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void  pretty(double iv){
  Writer again=this.again;
  if (again == null)   return;
  try {
    String s=String.valueOf(iv);
    again.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",77,4,"v:iv,out:again,print: pretty,",128,1.29,ALERT
1106,"private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSchedule.arrivals);
    LOG.debug(""Original departures: {}"",originalSchedule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}","private TripSchedule  rearrouteTripChesemble(TripSchedule actualSeverse){
  TripSchedule schedule=actualSeverse.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDepruptured=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hapType=actualSeverse.arrivals[ss];
      if (ss > 0)       hapType-=actualSeverse.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDepruptured + hapType;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDepruptured=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDepruptured + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDepruptured=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hapType=actualSeverse.arrivals[ss];
    if (ss > 0)     hapType-=actualSeverse.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDepruptured + hapType;
    int dwellTime=actualSeverse.departures[ss] - actualSeverse.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDepruptured=schedule.departures[ts];
  }
  int timeShift=actualSeverse.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",actualSeverse.arrivals);
    LOG.debug(""Original departures: {}"",actualSeverse.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}",429,14,"rerouteTripSchedule: rearrouteTripChesemble,hopTime:hapType,prevOutputDeparture:prevOutputDepruptured,originalSchedule:actualSeverse,",408,24.44,ALERT
1107,,,42,3,,455,3.5386918425560000,0
1108,"default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}
","default Filterable<T> replaceAll(final T... values){
  return replaceAll(Stream.of(values));
}
",25,2,"removeAll:replaceAll,",30,0.59,ALERT
1109,,,287,17,,3178,215.3707740108170,0
1110,"public static int findURISplitIndex(String uri){
  int uriLength=uri.length();
  int idx=uriLength - 1;
  for (; idx >= 0; idx--) {
    if (!TurtleUtil.isNameChar(uri.charAt(idx))) {
      break;
    }
  }
  idx++;
  for (; idx < uriLength; idx++) {
    if (TurtleUtil.isNameStartChar(uri.charAt(idx))) {
      break;
    }
  }
  if (!TurtleUtil.isNameEndChar(uri.charAt(uriLength - 1))) {
    return -1;
  }
  if (idx > 0 && idx < uriLength) {
    return idx;
  }
  return -1;
}","public static int  findURISplatindex(String google){
  int uriuiLengthogle.length();
  intideexx=uiLength - 1;
  for (; ideex >= 0; ideex--) {
    if (!TurtleUtil.isNameChar(google.charAt(ideex))) {
      break;
    }
  }
  ideex++;
  for (;ideexx < uiLength; ideex++) {
    if (TurtleUtil.isNameStartChar(google.charAt(ideex))) {
      break;
    }
  }
  if (!TurtleUtil.isNameEndChar(google.charAt(uiLength - 1))) {
    return -1;
  }
  if ideexx > 0 &&ideexx < uiLength) {
    return ideex;
  }
  return -1;
}",132,4,"findURISplitIndex: findURISplatindex,uri:google,uriLength:uiLength,idx:ideex,",376,6.54,ALERT
1111,"protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}
","protected void addSourcecodeBlain(TestSolution testSolution,Element xml,String messageCode,EvidenceElement researchEl){
  if (researchEl != null) {
    Collection<EvidenceElement> evidenceRuleLIST=new ArrayList<>();
    evidenceElementList.add(researchEl)evidenceRuleLISTtList.add(researchEl);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,xml,messageCode,evidenceRuleLIST);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,xml,messageCode);
  }
}
",73,6,"addSourceCodeRemark:addSourcecodeBlain,element:xml,evidenceElement:researchEl,evidenceElementList:evidenceRuleLIST,",279,3.33,ALERT
1112,,,127,7,,1231,33.461976039409600,0
1113,,,161,5,,935,15.478815853595700,0
1114,,,25,1,,228,2.759852413336440,0
1115,,,130,6,,1006,14.594838853677100,0
1116,"public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null)   return false;
  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}","public static boolean matchExtansion(String metadata,Collection<String>  extants){
  if (metadata == null)   return false;
  if ( extants == null ||  extants.isEmpty())   return indexOfExtension(metadata) == -1;
  String loadExp=getExtension(metadata);
  for (  StrinExtensionon :  extants) {
    if (loadExp.equals(Extension))     return true;
  }
  return false;
}",78,5,"isExtension:matchExtansion,filename:metadata,extensions: extants,fileExt:loadExp,extension:Extension,",273,8.99,ALERT
1117,,,31,3,,495,6.189659694830580,0
1118,"public static void sessionStop(){
  if (mProcess == null)   return;
  mProcess.destroy();
  mProcess=null;
}
","public static void threadStop(){
  if (MContent == null)   return;
  MContent.destroy();
  MContent=null;
}
",26,2,"sessionStop:threadStop,mProcess:MContent,",78,0.81,ALERT
1119,,,112,6,,1046,16.502519810199700,0
1120,"private void addExprToTLA(TLAExpr expr){
  Vector sv=expr.toStringVector();
  Vector exprMapping=expr.toMappingVector();
  int indent=tlacodeNextLine.length();
  int nextLine=0;
  if (indent != 0) {
    MappingObject.shiftMappingVector(exprMapping,indent);
    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));
    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));
    nextLine=1;
    if (sv.size() > 1) {
      endCurrentLineOfTLA();
    }
  }
  if (sv.size() > 1) {
    String spaces=NSpaces(indent);
    while (nextLine < sv.size() - 1) {
      tlacode.addElement(spaces + ((String)sv.elementAt(nextLine)));
      mappingVector.addElement((Vector)exprMapping.elementAt(nextLine));
      nextLine++;
    }
    tlacodeNextLine=spaces + ((String)sv.elementAt(nextLine));
    mappingVectorNextLine=(Vector)exprMapping.elementAt(nextLine);
  }
 else   if (indent == 0) {
    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));
    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));
  }
}","private void addExprToNLP(TLAExpr x){
  Vectds sv=x.toStringVector();
  VectexprBappinging=x.toMappingVector();
  int indenting=tlacodeNextLINE.length();
  int currentline=0;
  if (indenting != 0) {
    MappingObject.shiftMappingVector(exprBapping,indenting);
    tlacodeNextLINE=tlacodeNextLINE + ((String)ds.elementAt(0));
    mappingVectorPreviousLin.addAll((Vector)exprBapping.elementAt(0));
    currentline=1;
    if (ds.size() > 1) {
      endCurrentLineOfTLA();
    }
  }
  if (ds.size() > 1) {
    String spaspapspaces(indenting);
    while (currentline < ds.size() - 1) {
      tlacode.addElement(spaspaps((String)ds.elementAt(currentline)));
      mappingVector.addElement((Vector)exprBapping.elementAt(currentline));
      currentline++;
    }
    tlatlacodeNextLINEaspaps((String)ds.elementAt(currentline));
    mapmappingVectorPreviousLinector)exprBapping.elementAt(currentline);
  }
 else   if (indenting == 0) {
    tlacodeNextLINE=tlacodeNextLINE + ((String)ds.elementAt(0));
    mappingVectorPreviousLin.addAll((Vector)exprBapping.elementAt(0));
  }
}",248,9,"addExprToTLA:addExprToNLP,expr:x,sv:ds,exprMapping:exprBapping,indent:indenting,nextLine:currentline,tlacodeNextLine:tlacodeNextLINE,spaces:spaps,mappingVectorNextLine:mappingVectorPreviousLin,",1445,46.15,ALERT
1121,"void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
","void initDemandAndConstructionCache(final List<String> preparesFieldName,final Map<String,BigDecimal> house,final Map<String,BigDecimal> box,final Map<String,BigDecimal> burases){
  if (preparesFieldName != null && !preparesFieldName.isEmpty())   for (  final String Fieldname : preparesFieldName) {
    house.put(Fieldname,BigDecimal.ZERO);
    box.put(Fieldname,BigDecimal.ZERO);
    burases.put(Fieldname,BigDecimal.ZERO);
  }
}
",95,6,"initDemandAndCollectionMap:initDemandAndConstructionCache,prepareFieldNames:preparesFieldName,demand:house,collection:box,rebates:burases,fieldName:Fieldname,",298,3.91,ALERT
1122,,,25,2,,365,5.754294876257580,0
1123,"public void remove(RequestFilter filter){
  filters.remove(filter);
}
","public void clean(RequestFilter filter){
  filters.clean(filter);
}
",16,2,"remove:clean,",36,0.31,ALERT
1124,"private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
","private void list(final JLabel label,final JTextField field){
  panel.list(label);
  panel.list(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
",184,4,"add:list,",51,0.58,ALERT
1125,"public void doWindowOpen(){
  doConnect();
}
","public void doWindowsConnect(){
  doConnect();
}
",11,1,"doWindowOpen:doWindowsConnect,",25,0.18,ALERT
1126,,,102,10,,1888,17.448504217465700,0
1127,"private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}","private void addPingChangeData(long load){
  lastPingTimesLock.lock();
  try {
    if ( lastReadingHours == null) {
       lastReadingHours=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill( lastReadingHours,load);
    }
 else {
      System.arraycopy( lastReadingHours,1, lastReadingHours,0, lastReadingHours.length - 1);
       lastReadingHours[ lastReadingHours.length - 1]=load;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}",85,4,"lastPingTimes: lastReadingHours,sample:load,addPingTimeData:addPingChangeData,",117,1.32,ALERT
1128,,,88,6,,1053,11.666249263286600,0
1129,"public static void addFile(String s) throws IOException {
  File f=new File(s);
  addFile(f);
}
","public static void  addFiles(String is) throws IOException {
  File ffrnew File(is);
   addFiles(fr);
}
",26,3,"addFile: addFiles,s:is,f:fr,",601,6.71,ALERT
1131,,,177,4,,790,7.470838570594790,0
1132,,,35,3,,590,9.628472328186040,0
1133,,,98,6,,853,12.470702489217100,0
1134,,,84,7,,693,11.652553602059700,0
1135,,,68,4,,665,9.987285097440080,0
1136,,,192,7,,1301,26.482963558038100,0
1137,"public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}","public static Object[]  putALL(){
  Region zone=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(zone);
  try {
    Map rule=new LinkedHashMap();
    rule.put(PUTALL_KEY1,PUTALL_VALUE1);
    rule.put(PUTALL_KEY2,PUTALL_VALUE2);
    rule.put(PUTALL_KEY3,PUTALL_VALUE3);
    rule.put(PUTALL_KEY4,PUTALL_VALUE4);
    rule.put(PUTALL_KEY5,PUTALL_VALUE5);
    rzone putALL(rule,""putAllCallbackArg"");
    EventID[]  events=new EventID[5];
     events[0]=putAlleventId1;
     events[1]=putAlleventId2;
     events[2]=putAlleventId3;
     events[3]=putAlleventId4;
     events[4]=putAlleventId5;
    assertNotNull( events[0]);
    assertNotNull( events[1]);
    assertNotNull( events[2]);
    assertNotNull( events[3]);
    assertNotNull( events[4]);
    return  events;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}",200,4,"putAll: putALL,region:zone,map:rule,evids: events,",428,5.27,ALERT
1138,"public void read(ByteCodeParser in) throws IOException {
  int length=in.readInt();
  _maxStack=in.readShort();
  _maxLocals=in.readShort();
  int codeLength=in.readInt();
  _code=new byte[codeLength];
  in.read(_code,0,codeLength);
  int exnCount=in.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(in.readShort() & 0xffff);
    exn.setEnd(in.readShort() & 0xffff);
    exn.setHandler(in.readShort() & 0xffff);
    exn.setType(in.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=in.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=in.parseAttribute();
    _attributes.add(attr);
  }
}","public void READ(ByteCodeParser s) throws IOException {
  int length=s.readInt();
  _maxStack=s.readShort();
  _maxLocals=s.readShort();
  int codeLength=s.readInt();
  _code=new byte[codeLength];
  s.READ(_code,0,codeLength);
  int exnCount=s.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(s.readShort() & 0xffff);
    exn.setEnd(s.readShort() & 0xffff);
    exn.setHandler(s.readShort() & 0xffff);
    exn.setType(s.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=s.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=s.parseAttribute();
    _attributes.add(attr);
  }
}",197,12,"read:READ,in:s,",133,1.38,ALERT
1139,,,25,2,,390,4.676002558072410,0
1140,"protected void configDialogPropertyChange(PropertyChangeEvent event){
  log.debug(""internal config dialog handler"");
  firePropertyChange(PropertyChangeID.CONFIG_CHANGE,event.getOldValue(),event.getNewValue());
}
","protected void configWidgetPropertyChanging(PropertyChangeEvent object){
  log.debug(""internal config dialog handler"");
  firePropertyChange(PropertyChangeID.CONFIG_CHANGE,object.getOldValue(),object.getNewValue());
}
",35,2,"event:object,configDialogPropertyChange:configWidgetPropertyChanging,",59,0.52,ALERT
1141,,,81,2,,419,5.205732750892640,0
1142,,,39,1,,231,2.2094103058179200,0
1143,,,47,3,,382,9.728098007043200,0
1144,"@Override public void paintIcon(Component c,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}","@Override public void paintIcon(Component k,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(k instanceof JComponent) ? (JComponent)k : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}",102,8,"c:k,",53,0.55,ALERT
1145,"public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
","public Phone getPhones(String server){
  PhoneField serviceUl=new PhoneField();
  try {
    pserviceUlsetValue(server);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return serviceUl;
}
",43,3,"createPhone:getPhones,value:server,phoneImpl:serviceUl,",139,1.44,ALERT
1146,"@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
","@Override public PacketBuffer read(PacketBuffer port){
  values.forEach(null);
  return port;
}
",21,2,"buf:port,write:read,",63,0.76,ALERT
1147,,,18,2,,364,5.601286582152050,0
1148,,,71,3,,553,6.701779131094610,0
1149,,,185,3,,462,4.93506098985672,0
1150,,,69,4,,779,13.106996440887500,0
1152,,,36,2,,236,4.637137285868330,0
1153,,,75,5,,954,12.185410420099900,0
1154,"protected void drawRhombus(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  int halfWidth=w / 2;
  int halfHeight=h / 2;
  Polygon rhombus=new Polygon();
  rhombus.addPoint(x + halfWidth,y);
  rhombus.addPoint(x + w,y + halfHeight);
  rhombus.addPoint(x + halfWidth,y + h);
  rhombus.addPoint(x,y + halfHeight);
  drawPolygon(rhombus,fillColor,fillPaint,penColor,shadow);
}","protected void drawCrombu(int dx,int v,int d,int ph,Color penWhite,Paint fillPaint,Color keTextColor,boolean dark){
  int halfSize=d / 2;
  int hfullWidthph / 2;
  Polygon phombu=new Polygon();
  phombu.addPoint(dx + halfSize,v);
  phombu.addPoint(dx + d,v + fullWidth);
  rphombuaddPoint(dx + hhalfSizev + ph);
  phombu.addPoint(dx,v + fullWidth);
  drawPolygon(phombu,penWhite,fillPaint,keTextColor,dark);
}",113,12,"drawRhombus:drawCrombu,x:dx,y:v,w:d,h:ph,fillColor:penWhite,penColor:keTextColor,shadow:dark,halfWidth:halfSize,halfHeight:fullWidth,rhombus:phombu,",1900,23.11,ALERT
1155,,,136,8,,1556,42.25463202794390,0
1156,"@Override public void step(MessageLogger logger){
  try {
    addAgent();
    env.step();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","@Override public void action(MessageLogger logger){
  try {
    addAgent();
    env.action();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",37,2,"step:action,",35,0.38,ALERT
1157,,,14,1,,234,2.2706386844317100,0
1158,"public void addNode(TopologicalNode node){
  nodeList.add(node);
}
","public void createElement(TopologicalNode object){
  nodeList.add(object);
}
",16,2,"addNode:createElement,node:object,",49,0.51,ALERT
1159,,,35,3,,608,6.686314511299130,0
1160,,,121,7,,1345,21.259655221303300,0
1161,"public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
","public boolean decride(Runnable result,ClassLoader loader){
  boolean isSemity=false;
  boolean isQueue=true;
  boolean isCaked=true;
  return scheduleImpl(result,loader,MAX_EXPIRE,isSemity,isQueue,isCaked);
}
",43,6,"isPriority:isSemity,isWake:isCaked,schedule:decride,task:result,",139,1.49,ALERT
1162,,,88,3,,647,13.630217103163400,0
1163,,,53,3,,606,7.305512662728630,0
1164,,,19,1,,221,2.898083217938740,0
1165,,,14,1,,242,2.486163624127710,0
1166,,,58,4,,626,6.606572691599530,0
1167,"public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){
  Objects.requireNonNull(notifications);
  final int position=indexOf(notifications,startId);
  if (position == -1) {
    return Iterables.limit(notifications,limitSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.skip(notifications,position),limitSize);
  }
  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);
}","public Iterable<Notification> step(@Nonnull final Iterable<Notification> NOTifiers,final long  startID,final boolean oinclusive,final int ignoreCode){
  Objects.requireNonNull(NOTifiers);
  final ilayoution=indexOf(NOTifiers, startID);
  if (layout == -1) {
    return Iterables.limit(NOTifiers,ignoreCode);
  }
  if (oinclusive) {
    return Iterables.limit(Iterables.step(NOTifiers,playout,ignoreCode);
  }
  return Iterables.limit(Iterables.step(NOTifiers,playout+ 1),ignoreCode);
}",109,6,"skip:step,notifications:NOTifiers,startId: startID,inclusive:oinclusive,limitSize:ignoreCode,position:layout,",469,8.28,ALERT
1168,,,120,8,,1341,13.363021604220100,0
1169,,,116,5,,836,11.522437357902500,0
1170,"public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}","public static String replaceChars(String br,String oldcheats,char nextChar){
  int pos=indexOfChars(br,oldcheats);
  if (pos == -1) {
    return br;
  }
  StringBuilder buf=new StringBuilder(br);
  do {
    buf.setCharAt(pos,nextChar);
    pos=indexOfChars(br,oldcheats,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}",87,6,"str:br,oldchars:oldcheats,newchar:nextChar,",122,1.93,ALERT
1171,"public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){
  List<File> dirs=new ArrayList<File>();
  dirs.add(dir);
  return expandSpecWildcards(dirs,modules,forBackend);
}
","public static List<ModuleSpec> expandSpecStringCard(File class,List<ModuleSpec> names,Backend forBackward){
  List<File>  dires=new ArrayList<File>();
  di diresdd(class);
  return expandSpecStringCard diress,names,forBackward);
}
",53,5,"expandSpecWildcards:expandSpecStringCard,dir:class,modules:names,forBackend:forBackward,dirs: dires,",875,29.02,ALERT
1172,,,87,2,,432,5.0473121444384300,0
1173,,,14,1,,230,2.5564013799031600,0
1174,,,39,2,,416,7.333684368928270,0
1175,,,52,2,,428,4.8525111079216,0
1176,"public ElsaSerializerPojo make(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}","public ElsaSerializerPojo  parse(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}",41,1,"make: parse,",30,0.33,ALERT
1177,,,23,2,,439,8.060682062307990,0
1178,"@Override public void actOn(File f){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(f));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
","@Override public void actionOff(File j){
  BufferedReader io=null;
  try {
    io=new BufferedReader(new FileReader(j));
    announceSeedsFromReader(io);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(io);
  }
}
",66,3,"actOn:actionOff,f:j,reader:io,",544,13.42,ALERT
1179,,,39,2,,267,4.896488579114280,0
1180,,,185,5,,894,20.594235543410000,0
1181,,,150,7,,1420,18.847638857364700,0
1182,,,60,4,,668,13.853694375356000,0
1183,,,63,2,,431,5.077816061178840,0
1184,,,39,2,,433,6.3966457883516900,0
1185,,,85,2,,393,6.0127039114634200,0
1186,,,25,2,,391,6.333037348588310,0
1187,"private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}","private Collection<ExtractedItemsCollection> filterItemsForlevel(Player players,List<ExtractedItemsCollection> itemsFlors){
  int p playerVersionplayers.getLevel();
  Collection<ExtractedItemsCollection> df=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsColle objectection : itemsFlors) {
    if (col objecttMinLevel() >  playerVersion) {
      continue;
    }
    if (col objecttMaxLevel() > 0 && col objecttMaxLevel() <  playerVersion) {
      continue;
    }
    df.add( object);
  }
  return df;
}",96,6,"filterItemsByLevel:filterItemsForlevel,player:players,itemsCollections:itemsFlors,playerLevel: playerVersion,result:df,collection: object,",639,8.86,ALERT
1188,"public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnToUrl,returnToUrl);
}
","public AuthRequest authenticate(List discoveries,String returnTOEmail) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnTOEmail,returnTOEmail);
}
",26,3,"returnToUrl:returnTOEmail,",39,0.48,ALERT
1189,"protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}","protected void sqrintLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double plim=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double  sago=MathLib.safeSqrt(m_lo);
  double sspspolathLib.safeSqrt(m_hi) -  sago;
  Iterator err=labels.tuples();
  while (err.hasNext()) {
    VisualItemoriginalm=(VisualItem)err.next();
    reset(original);
    double v=orevginal.getDouble(VALUE);
    double x=sXan == 0 ? 0 : ((MathLib.safeSqrt(v)ev-  sago) / pspol) * breadth;
    set(original,X,b);
  }
  Index search=labels.search(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int R;
  for (double x, vXvplim; ev <= m_hi; ev+=step) {
    x=(XMathLib.safeSqrt(v)ev-  sago) / pspol) * breadth;
    if (X < -0.5) {
      continue;
    }
 else     if ((r=Rsearchget(ev)) >= 0) {
      VisualItem original=labels.getItem(R);
      original.setVisible(true);
      original.setEndVisible(true);
    }
 else {
      VisualItem original=labels.addItem();
      original.set(LABEL,m_nf.format(ev));
      original.setDouble(VALUE,ev);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(ev) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        original.setStartVisible(true);
      }
      set(original,f * breadth,b);
      set(original,X,b);
    }
  }
}",402,18,"sqrtLayout:sqrintLayout,vlo:plim,slo: sago,sspan:pspol,iter:err,item:original,v:ev,x:X,index:search,r:R,",736,18.38,ALERT
1190,,,30,3,,553,6.569570446014410,0
1191,,,17,1,,225,3.4742863535881000,0
1192,"public void close() throws IOException {
  flushBits();
  out.close();
}
","public void clean() throws IOException {
  flushBits();
  out.clean();
}
",19,1,"close:clean,",34,0.39,ALERT
1193,"public void cut(){
  copy();
  deleteSelectedObjects();
}
","public void delete(){
  copy();
  deleteSelectedObjects();
}
",15,1,"cut:delete,",31,0.31,ALERT
1196,,,17,1,,253,2.636489152908330,0
1197,,,14,1,,222,1.9536366740862500,0
1198,"public static final double sigma(double a){
  return 1.0 / (1.0 + Math.exp(-a));
}","public static final double sigma(double p){
  return 1.0 / (1.0 + Math.exp(-p));
}",26,2,"a:p,",35,0.51,ALERT
1199,,,87,7,,1163,16.056105856100700,0
1200,"public ByteArrayDataSource(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}","public ByteArrayDataSource(InputStream Is,String method){
  try {
    ByteArrayOutputStream oa=new ByteArrayOutputStream();
    int cor;
    while ((cor=Is.read()) != -1) {
      oa.write(cor);
    }
     m_base=oa.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (method != null && method.length() > 0)   m_m_typesethod;
}",95,6,"is:Is,type:method,os:oa,ch:cor,m_data: m_base,m_type:m_types,",298,3.34,ALERT
1201,"public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
","public static void user(String server){
  String driver=getDriver(server);
  if (driver != null) {
    loadUserClass(driver);
  }
}
",31,3,"url:server,load:user,",64,0.69,ALERT
1202,,,124,4,,825,10.282666126887000,0
1203,,,108,3,,509,25.94257470369340,0
1204,,,86,6,,1178,19.70261010726290,0
1205,,,31,4,,787,6.652833207448320,0
1206,"protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}","protected double nnHandle(int n,char[] set,int endPointL,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endPointL + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int director=0;
  if (m_useRecursionCache) {
    director=m_multX * n + m_multY * endPointL + m_multZ * endIndexT;
    if (cachekhK[director % maxCache] == director + 1) {
      return cachekh[director % maxCache];
    }
  }
  double result=0;
  result=m_lambda * nnHandle(n,set,endPointL - 1,t,endIndexT) + kernelHelper2(n,set,endPointL,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[director % maxCache]=director + 1;
    cachekh[director % maxCache]=result;
  }
  return result;
}",178,11,"adr:director,endIndexS:endPointL,s:set,kernelHelper:nnHandle,",278,19.22,ALERT
1207,"private static String unwrap(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}","private static String unwrap(String wrapper){
  if (wrapper.startsWith(""(("")) {
    wrapper=wrapper.substring(wrapper.indexOf("")"") + 1,wrapper.length() - 1);
    if (wrapper.endsWith(""]"")) {
      wrapper=wrapper.substring(0,wrapper.lastIndexOf(""[""));
    }
 else {
      wrapper=wrapper.substring(0,wrapper.lastIndexOf("".""));
    }
  }
  return wrapper;
}",94,2,"expression:wrapper,",47,0.32,ALERT
1209,,,172,8,,1446,11.428052107493100,0
1210,,,60,4,,686,5.516565171877540,0
1211,"public Vector<Option> enumToVector(Enumeration<Option> enu){
  Vector<Option> options=new Vector<Option>();
  options.addAll(Collections.list(enu));
  return options;
}
","public Vector<Option> enum2Point(Enumeration<Option> ennu){
  Vector<Option> json=new Vector<Option>();
  json.addAll(Collections.list(ennu));
  return json;
}",44,3,"options:json,enu:ennu,enumToVector:enum2Point,",86,0.76,ALERT
1212,"private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}","private boolean isNotInsideRange(String data,String[] v){
  for (int i=0; i < v.length; i++) {
    if (data.equals(v[i])) {
      return false;
    }
  }
  return true;
}",52,4,"str:data,isNotInArray:isNotInsideRange,array:v,",87,0.99,ALERT
1213,"void addAttributeValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
","void setAttributeValue(String attName,Set versions) throws SMSException {
  if (attName != null && versions != null && !versions.isEmpty()) {
    Map acributes=getAttributes();
    Set ori originalRequiresetacributess.get(attName);
    Set neoldResultsew HashSet(versions);
    if ( originalRequires != null && ! originalRequires.isEmpty()) {
      newValuoldResults( originalRequires);
    }
    Map newCurrs=new HashMap();
    newCurrs.put(attName,oldResults);
    setAttributes(newCurrs);
  }
}
",105,7,"addAttributeValues:setAttributeValue,attrName:attName,values:versions,attrs:acributes,origValues: originalRequires,newValues:oldResults,newAttrs:newCurrs,",346,4.39,ALERT
1214,,,71,2,,223,2.103895092010500,0
1215,"public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}","public static Object okestatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object message=method.invoke(null,new Object[0]);
    return message;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}",87,5,"invokeStatic:okestatic,result:message,",107,0.98,ALERT
1216,,,254,10,,1895,16.123192942142500,0
1217,,,61,3,,505,3.419456088542940,0
1218,,,55,3,,579,3.518320922056830,0
1219,,,179,7,,1142,8.628972180684410,0
1220,"public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  create(rpfFilePaths,outputFile,false);
}
","public void get(String[] rpfFileIdes,String OutputFile) throws MakeTocException {
  get(rpfFileIdes,OutputFile,false);
}
",25,3,"create:get,rpfFilePaths:rpfFileIdes,outputFile:OutputFile,",368,4.06,ALERT
1222,,,150,9,,1607,9.823621837298080,0
1223,,,15,1,,215,1.4565427581469200,0
1224,,,163,10,,1911,14.166630331675200,0
1225,,,47,2,,389,3.688273628552760,0
1227,,,94,4,,813,9.352365032831830,0
1228,"private void loadMap(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
","private void readArray(String  extensions,String mileName){
  if (!mimeTypeToExtensionMap.containsKey(mileName)) {
    mimeTypeToExtensionMap.put(mimileNameextensions);
  }
  extensionToMimeTypeMap.put( extensions,mileName);
  if (isImageType(mileName)) {
    imageMimeTypeSet.add(mileName);
  }
}
",58,3,"loadMap:readArray,extension: extensions,mimeType:mileName,",140,1.17,ALERT
1229,,,27,2,,259,2.5864598989486700,0
1230,,,172,5,,840,11.460851379235600,0
1231,"private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}","private String processLoginrequest(LogoutState type,LogoutRequest logdownRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> ssessionListlogdownRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex  sessionName : sessionList) {
    Validate.notNull( sessionName);
    String participantingSecret= sessionName.getSessionIndex();
    Validate.notNull(participantingSecret,""participantSession"");
    Session sespaceessionManager.getByParticipant(participantingSecret);
    if (space == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!sesspacentainsSessionParticipantUrl(type.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=space.getId();
    }
 else {
      if (!sessionId.equals(space.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}",183,9,"processLogoutRequest:processLoginrequest,t:type,logoutRequest:logdownRequest,sessionIndex: sessionName,participantSession:participantingSecret,session:space,",433,3.2,ALERT
1232,"private static a createImageLink(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){
  a img=new a(""#"",createImage(AD_Language,name));
  if (!pressed || !enabled)   img.setID(""imgButtonLink"");
 else   img.setID(""imgButtonPressedLink"");
  if (js_command == null)   js_command=""\'Submit\'"";
  if (js_command.length() > 0 && enabled) {
    if (js_command.startsWith(""startPopup""))     img.setOnClick(js_command);
 else     img.setOnClick(""SubmitForm(\'"" + name + ""\', ""+ js_command+ "",\'toolbar\');return false;"");
  }
  img.setClass(""ToolbarButton"");
  img.setOnMouseOver(""window.status=\'"" + name + ""\';return true;"");
  img.setOnMouseOut(""window.status=\'\';return true;"");
  img.setOnBlur(""this.hideFocus=false"");
  return img;
}","private static a createButtonUrl(String adJWord,String alias,String js_command,boolean enabled,boolean verified){
 implimg=new a(""#"",createImage(adJWord,alias));
  if (!verified || !enabled)   impl.setID(""imgButtonLink"");
 else   impl.setID(""imgButtonPressedLink"");
  if (js_command == null)   js_command=""\'Submit\'"";
  if (js_command.length() > 0 && enabled) {
    if (js_command.startsWith(""startPopup""))     impl.setOnClick(js_command);
 else     iimplsetOnClick(""SubmitForm(\'"" + alias + ""\', ""+ js_command+ "",\'toolbar\');return false;"");
  }
  impl.setClass(""ToolbarButton"");
  iimplsetOnMouseOver(""window.status=\'"" + alias + ""\';return true;"");
  impl.setOnMouseOut(""window.status=\'\';return true;"");
  impl.setOnBlur(""this.hideFocus=false"");
  return impl;
}",152,7,"createImageLink:createButtonUrl,AD_Language:adJWord,name:alias,pressed:verified,img:impl,",395,2.48,ALERT
1233,,,75,4,,803,8.708505551020300,0
1234,,,19,1,,250,2.1123156507810000,0
1236,,,89,10,,1843,15.21085582971570,0
1237,,,13,1,,220,1.5996152997016900,0
1238,,,122,5,,790,7.196302107969920,0
1240,,,337,11,,2049,52.976267723242400,0
1241,"@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","@Override protected synchronized void replace(long o,byte[] fb) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)o);
    byteBuffer.put(fb);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",60,3,"write:replace,offset:o,b:fb,",156,1.18,ALERT
1242,,,42,3,,568,4.206576883792880,0
1243,,,41,1,,251,1.7846338828404700,0
1244,"boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}","boolean processBytes() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}",161,5,"writeData:processBytes,",40,0.54,ALERT
1245,,,21,2,,411,3.085941223303480,0
1246,,,19,2,,452,3.4500325043996200,0
1247,"public List<ColourChange> sampleConditionalMigrationEvents2(int parentColour,double parentHeight,int childColour,double childHeight,double[] m){
  List<ColourChange> colourChanges=new ArrayList<ColourChange>();
  if (parentHeight < childHeight) {
    throw new IllegalArgumentException(""sampleConditionalMigrationEvents: parentHeight="" + parentHeight + "" childHeight=""+ childHeight+ "", not good."");
  }
  try {
    int currentColour=parentColour;
    double currentHeight=parentHeight;
    while (true) {
      ColourChange nextEvent=randomConditionalMigrationEvent(currentColour,currentHeight,childColour,childHeight,m);
      currentHeight=nextEvent.getTime();
      currentColour=nextEvent.getColourAbove();
      colourChanges.add(nextEvent);
    }
  }
 catch (  NoEventException nee) {
  }
  reverseColourChangeList(colourChanges,parentColour);
  return colourChanges;
}","public List<ColourChange> sampleConditionalMigrateEvent3(int parentColour,double parentHeight,int childColour,double childHeight,double[] m){
  List<ColourChange> colourChanges=new ArrayList<ColourChange>();
  if (parentHeight < childHeight) {
    throw new IllegalArgumentException(""sampleConditionalMigrationEvents: parentHeight="" + parentHeight + "" childHeight=""+ childHeight+ "", not good."");
  }
  try {
    int currentCoore=parentColour;
    double currentHeight=parentHeight;
    while (true) {
      ColourChangenextChanget=randomConditionalMigrationEvent(currentCoore,currentHeight,childColour,childHeight,m);
      currentHeight=nextChange.getTime();
      currentCoore=nextChange.getColourAbove();
      colourChanges.add(nextChange);
    }
  }
 catch (  NoEventException nee) {
  }
  reverseColourChangeList(colourChanges,parentColour);
  return colourChanges;
}",138,10,"sampleConditionalMigrationEvents2:sampleConditionalMigrateEvent3,currentColour:currentCoore,nextEvent:nextChange,",382,9.85,ALERT
1249,"private void fitSizeOfScrolledContent(){
  Point p=scrollComposite.getSize();
  main.setSize(main.computeSize(p.x,SWT.DEFAULT));
}
","private void  computeSizeOfScrollingContents(){
  Point p=scrollComposite.getSize();
  main.setSize(main.computeSize(p.x,SWT.DEFAULT));
}
",34,2,"fitSizeOfScrolledContent: computeSizeOfScrollingContents,",30,0.3,ALERT
1250,,,41,2,,352,4.31562549273173,0
1251,"public void proposeTree() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    i=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == i);
  final NodeRef iP=tree.getParent(i);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}
","public void superposeTree() throws OperatorFailedException {
  NodeRef c;
  double oldMaxStyle, oldMinAverage, NEWShare, oldResource, nextRange, qu;
  final int nodeCounter=tree.getNodeCount();
  do {
    c=tree.getNode(MathUtils.nextInt(nodeCounter));
  }
 while (tree.getRoot() == c);
  final NodeRef siPO=tree.getParent(c);
  NodeRef j=jree.getNode(MathUtils.nextInt(nodeCounter));
  NodeRef ki=tree.getParent(j);
  while ((ki != null && tree.getNodeHeight(ki) <= tree.getNodeHeight(c)) || (c == j)) {
    j=jree.getNode(MathUtils.nextInt(nodeCounter));
    ki=tree.getParent(j);
  }
  if (j j= tree.getRoot() || siPO == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k ==kisiPO || j j= siPO || ki == c)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiCpiPointetOtherChild(tree,siPO,c);
  NodeRef PiPiUree.getParent(siPO);
  oldMinAverage=Math.max(tree.getNodeHeight(c),tree.getNodeHeight(j));
  newRNEWSharee.getNodeHeight(k) -kioldMinAverage;
  newAnextRangeMinAverage + (MathUtils.nextDouble() * NEWShare);
  oldMaxStyle=Math.max(tree.getNodeHeight(c),tree.getNodeHeight(CpiPoint));
  ololdResourceree.getNodeHeight(PiPiU- oldMaxStyle;
  q=NquWShare / Math.abs(oldResource);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(siPO,CpiPoint);
    tree.removeChild(PiPiUiPO);
    tree.addChild(siPO,j);
    tree.addChild(PiP,CPiUoint);
    tree.setRoot(siPO);
  }
 else   if (siPO == tree.getRoot()) {
    tree.removeChild(ki,j);
    tree.removeChild(siPO,CpiPoint);
    tree.addChild(siPO,j);
    tree.addChild(k,kiiPO);
    tree.setRoot(CpiPoint);
  }
 else {
    tree.removeChild(ki,j);
    tree.removeChild(siPO,CpiPoint);
    tree.removeChild(PiPiUiPO);
    tree.addChild(siPO,j);
    tree.addChild(k,kiiPO);
    tree.addChild(PiP,CPiUoint);
  }
  tree.setNodeHeight(iP,siPOxtRange);
  tree.endTreeEdit();
  logq=Math.log(qu);
}
",510,14,"proposeTree:superposeTree,i:c,oldMinAge:oldMaxStyle,newMinAge:oldMinAverage,newRange:NEWShare,oldRange:oldResource,newAge:nextRange,q:qu,nodeCount:nodeCounter,iP:siPO,k:ki,CiP:CpiPoint,PiP:PiU,",1126,10.93,ALERT
1252,"public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}","public static void c(String content,Object... args){
  if (!allowWtf)   return;
  StackTraceElement  findER=getCallerStackTraceElement();
  String tclassgenerateTag( findER);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    content=String.format(content,args);
  }
  Log.wtf(tag,classtent);
}",76,4,"f:c,msg:content,caller: findER,tag:class,",181,0.85,ALERT
1253,"private void changeValue(AbstractStorageLabel<Object> label,Object newValue){
  if (!Objects.equals(label.getValue(),newValue)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.preLabelValueChange(label);
      }
    }
    label.setValue(newValue);
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.postLabelValueChange(label);
      }
    }
  }
}
","private void updateLabel(AbstractStorageLabel<Object> li,Object NewObject){
  if (!Objects.equals(li.getValue(),NewObject)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener latener : labelEditListeners) {
     latenerner.preLabelValueChange(li);
      }
    }
    li.setValue(NewObject);
synchronized (labelEditListeners) {
      for (      LabelEditListener latener : labelEditListeners) {
     latenerner.postLabelValueChange(li);
      }
    }
  }
}
",84,4,"changeValue:updateLabel,label:li,newValue:NewObject,listener:latener,",648,9.45,ALERT
1254,,,143,9,,1702,13.420577188332900,0
1255,,,33,3,,475,5.093705193201700,0
1256,,,61,1,,200,2.096400984128320,0
1257,"static WindowsFileAttributes fromFindData(long address){
  int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES);
  long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME);
  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME);
  long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);
}","static WindowsFileAttributes FromfindData(long operator){
  int ffileExtrunsafe.getInt(operator + OFFSETOF_FIND_DATA_ATTRIBUTES);
  long c creationSizeunsafe.getLong(operator + OFFSETOF_FIND_DATA_CREATETIME);
  long lnextaccessTimeunsafe.getLong(operator + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  long llastEditTimeunsafe.getLong(operator + OFFSETOF_FIND_DATA_LASTWRITETIME);
  long siiz(long)(unsafe.getInt(operator + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(operator + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  int respatchTags=isReparsePoint(ffileExtr ? unsafe.getInt(operator + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileExtr, creationSize,nextaccessTime,lastEditTime,iz,respatchTags,0,0,0);
}",133,8,"fromFindData:FromfindData,address:operator,fileAttrs:fileExtr,creationTime: creationSize,lastAccessTime:nextaccessTime,lastWriteTime:lastEditTime,size:iz,reparseTag:respatchTags,",719,9.38,ALERT
1259,,,27,2,,377,5.135297528902690,0
1260,,,71,5,,906,13.586382095019000,0
1261,"private float calculateScrambleImageHeightMultiplier(float multiplier){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return multiplier / 2;
case PuzzleUtils.TYPE_MEGA:
return (multiplier / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(multiplier / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return multiplier;
}
return multiplier;
}","private float calculateScrambleImageHeightMultmultipler(float quantancer){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (quantancer / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return quantancer / 2;
case PuzzleUtils.TYPE_MEGA:
return (quantancer / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(quantancer / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (quantancer / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return quantancer;
}
return quantancer;
}",121,2,"multiplier:quantancer,calculateScrambleImageHeightMultiplier:calculateScrambleImageHeightMultmultipler,",64,0.94,ALERT
1262,,,30,3,,578,10.442325190703100,0
1263,,,39,6,,1094,12.032745683193200,0
1264,"public void testFloatValueNeg(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}","public void assertNumberAmountAbs(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal  aString=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"", aString.floatValue() == result);
}",40,4,"testFloatValueNeg:assertNumberAmountAbs,aNumber: aString,",87,0.87,ALERT
1265,,,96,6,,1006,14.420727876822200,0
1266,"private void adjustBackingFileLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}","private void  adjustBashingDirectoryLength(byte[] padding,long start) throws IOException {
  if (padding == null || padding.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long nfreshizefHeader.headerSize() + (istart* CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ padding.length+ CHUNK_TLEN;
  if (freshize > realLength()) {
    backingRandomAccessFile.setLength(freshize);
  }
}",77,4,"adjustBackingFileLength: adjustBashingDirectoryLength,buffer:padding,index:start,newsize:freshize,",189,4.33,ALERT
1267,,,77,3,,562,6.413277475039160,0
1268,,,51,5,,457,6.536902403831480,0
1269,"private static double hackyAdjuster(double f){
  double tmp=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));
}","private static double  hackYFixt(double m){
  double tmp=Math.sqrt(1.0 - m);
  return (m <= 0.5) ? tmp : tmp + (0.01 * (m - 0.5));
}",43,3,"hackyAdjuster: hackYFixt,f:m,",120,1.97,ALERT
1270,"private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}","private void drawWick(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}",260,9,"drawHook:drawWick,",66,0.54,ALERT
1271,"@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedFiles.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedFiles,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedFiles);
}
","@NotNull protected VirtualFile[] collectAAdaptatedVersions(@NotNull Project name,@NotNull VirtualFile[] assets){
  List<VirtualFile> amatchedFilenew ArrayList<VirtualFile>(assets.length);
  ProjectLevelVcsManagprojectLevelVCSDirectorger=ProjectLevelVcsManager.getInstance(name);
  for (  VirtualFile f filename: assets) {
    if (!f filenameisDirectory() && projectLevelVCSDirector.getVcsFor( filename) instanceof GitVcs) {
      matchedFile.add( filename);
    }
 else     if ( filename.isDirectory() && isRecursive()) {
      addChildren(name,matchedFile, filename);
    }
  }
  return VfsUtilCore.toVirtualFileArray(matchedFile);
}
",117,6,"collectAffectedFiles:collectAAdaptatedVersions,project:name,files:assets,affectedFiles:matchedFile,projectLevelVcsManager:projectLevelVCSDirector,file: filename,",302,3.64,ALERT
1272,"public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}","public List<String> classifier(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}",168,11,"classify:classifier,",43,0.57,ALERT
1273,,,46,2,,379,3.7457703232765200,0
1274,,,31,3,,646,5.926650738716130,0
1275,"public static long calculateElapsedGC(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}","public static long calculateElapsedGC(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gabean : gcbeans) {
    timeMillis+=gabean.getCollectionTime();
  }
  return timeMillis;
}",33,3,"gcbean:gabean,",46,0.55,ALERT
1276,"static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}","static TokenStream pack(String functionName,Analyzer indexAnalyzer,String version,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(functionName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + functionName + "")"");
  }
  int splitCharIdx=version.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(functionName,version);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(functionName,version.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,functionName,indexAnalyzer,version,splitChar,splitCharIdx);
}",109,7,"wrap:pack,content:version,fieldName:functionName,",231,3.18,ALERT
1277,,,261,11,,1973,17.756709945201900,0
1278,,,177,7,,1404,15.530611364046700,0
1279,,,12,1,,215,1.7669909715652500,0
1280,,,62,3,,299,2.8870840708414700,0
1282,"@VisibleForTesting protected void startExecutor(final int container){
  LOG.info(""Starting a new executor for container: "" + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info(""Started the executor for container: "" + container);
  startExecutorMonitor(container,containerExecutor);
}
","@VisibleForTesting protected void startComputor(final int image){
  LOG.info(""Starting a new executor for container: "" + image);
  final Proc containerClectorutor=startExecutorProcess(image);
  processToContainer. containerClectorutor,image);
  LOG.info(""Started the executor for container: "" + image);
  startExecutorMonitor(image, containerClector);
}
",55,3,"startExecutor:startComputor,container:image,containerExecutor: containerClector,",420,2.8,ALERT
1283,,,104,4,,616,4.789679145812990,0
1284,,,77,6,,1122,9.035934213797250,0
1285,"protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}
","protected void job(int  sleepMillios,int sleepNanos) throws InterruptedException {
  Thread.job( sleepMillios,sleepNanos);
}
",23,3,"sleep:job,sleepMillis: sleepMillios,",68,0.62,ALERT
1286,"public int retrieveRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}","public int retrieveRowSum(String databaseName) throws SQLException {
  ResultSet r=null;
  int  rowId=-1;
  try {
    rs=ratement.executeQuery(""SELECT COUNT(*) FROM "" + databaseName);
    r.next();
    rowIdt=r.getInt(1);
  }
  finally {
    if (r != null) {
      r.close();
    }
  }
  return  rowId;
}",71,4,"retrieveRowCount:retrieveRowSum,tableName:databaseName,rs:r,rowCount: rowId,",315,2.42,ALERT
1287,,,34,1,,244,2.2429763317108200,0
1288,,,71,6,,996,9.32864929040273,0
1289,"public static <T>Stream<T> concat(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static <T>Stream<T> interge(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
",128,5,"concat:interge,",33,1.29,ALERT
1290,"public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}","public static Uri addMessageToSuris(ContentResolver persistor,Uri ui,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return persistor.insert(ui,values);
}",169,11,"resolver:persistor,uri:ui,addMessageToUri:addMessageToSuris,",113,0.91,ALERT
1291,"public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
","public VNXeCommandJob modifyLRunBackground(LunModifyParam property,String  resourcePath){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlurlBldpend( resourcePath);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(property);
}
",49,5,"modifyLunAsync:modifyLRunBackground,param:property,resourceId: resourcePath,",148,0.77,ALERT
1292,"public static GenericObjectEditorDialog createDialog(Container parent){
  return createDialog(parent,null);
}
","public static GenericObjectEditorDialog currentEditor(Container parents){
  return currentEditor(parents,null);
}
",18,2,"createDialog:currentEditor,parent:parents,",137,1.22,ALERT
1293,"public long next(){
  long result=-1l;
  if (cache < 0L && bufferElements > 0) {
    result=getNextFromBuffer();
    bufferElements--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}","public long reply(){
  long grade=-1l;
  if (call < 0L && bufferSizerows > 0) {
    grade=getNextFromBuffer();
    bufferSizerows--;
  }
 else {
    grade=call;
    call=-1L;
  }
  if (!cs.isEmpty()) {
    long unit=cs.unit();
    if (grade >unitt || grade == -1L) {
      cs.remove(unit);
     calle=grade;
      grade=unit;
    }
  }
  if (grade == -1L) {
    throw new NoSuchElementException();
  }
  Assert.checkprviouslys < grade,EC.GENERAL);
 prviouslys=grade;
   readParaches++;
  return grade;
}",132,7,"next:reply,result:grade,bufferElements:bufferSizerows,cache:call,first:unit,previous:prviously,readElements: readParaches,",1251,14.92,ALERT
1294,"public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}","public String convertSWFForDOM(InputStream this) throws Exception {
  StringWriter inFirst=new StringWriter();
  outresourcew PrintWriter(inFirst);
  TagParser parser=new TagParser(this);
  SWFReader reerew SWFReader(paparserhis);
  er.readFile();
  this.close();
  sizeCount=er.sizsizeCountount=er.size;
  final String retnamehtml>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + inFirst.toString()+ ""</body></html>"";
  return name;
}
",98,8,"convertSWFToHTML:convertSWFForDOM,in:this,out1:inFirst,output:resource,reader:er,ret:name,",344,5.14,ALERT
1295,"private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){
  Graphics2D gPr=(Graphics2D)g2.create();
  Rectangle2D loc=anno.getLocation();
  gPr.translate(loc.getX(),loc.getY());
  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());
  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());
  pane.setSize(size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));
  pane.setCaretPosition(0);
  pane.paint(gPr);
  gPr.dispose();
}","private void printAnotationFromEditor(final WorkflowAnnotation annotor,final Graphics2D g2){
  Graphics2D argPr=(Graphics2D)g2.create();
  Rectangle2D loclangnotor.getLocation();
  argPr.translate(lang.getX(),lang.getY());
  argPr.setClip(0,0,(int)lang.getWidth(),(int)lang.getHeight());
  Dimension sisizedew Dimension((int)lang.getWidth(),(int)lang.getHeight());
  pane.setSize(sized);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(annotor));
  pane.setCaretPosition(0);
  pane.paint(argPr);
  argPr.dispose();
}",143,6,"printAnnotationFromEditor:printAnotationFromEditor,anno:annotor,gPr:argPr,loc:lang,size:sized,",388,3.5,ALERT
1296,,,33,2,,413,2.9886293768882800,0
1297,,,92,5,,1019,9.673596596717830,0
1298,"public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){
  byte[] buffer=new byte[byteBuffer.remaining()];
  byteBuffer.get(buffer);
  return buffer;
}
","public static byte[] readBytesfromByteBuff(ByteBuffer sourceFlow){
  byte[] reader=new byte[sourceFlow.remaining()];
  sourceFlow.get(reader);
  return reader;
}
",37,3,"readBytesFromByteBuffer:readBytesfromByteBuff,byteBuffer:sourceFlow,buffer:reader,",186,1.55,ALERT
1299,,,12,1,,211,1.815821639696760,0
1300,"private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : document.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=document.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}
","private boolean transferContent(SearchDocument NewFile,SearchDocument list,Map<String,Set<String>> removedEproperties){
  boolean mutated=false;
  for (  StroldfieldNamesName : list.getPropertyNames()) {
    NewFile.addProperty(oldfieldNames);
    List<Strin oldvaluesues=list.getProperty(oldfieldNames);
    if ( oldvalues != null) {
      Set<String> objlinesFoundemovedEproperties != null) ? removedEproperties.get(oldfieldNames) : null;
      for (      String ooldName:  oldvalues) {
        if ((linesFound != null) && (linesFound.contains(oldName))) {
          mutated=true;
        }
 else {
          addPropeoldfieldNamesNoldNamealue,NewFile);
        }
      }
    }
  }
  return mutated;
}
",137,9,"copyDocument:transferContent,newDocument:NewFile,document:list,removedProperties:removedEproperties,oldFieldName:oldfieldNames,oldValues: oldvalues,objectsRemoved:linesFound,oldValue:oldName,",621,8.11,ALERT
1301,,,74,5,,807,8.914782683054610,0
1302,,,52,3,,615,10.448279436429300,0
1303,,,35,4,,749,5.2489344040552800,0
1304,"public static boolean hasTaxonomyInfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
","public static boolean hastaxonomicDetails(SequencesReader valid){
  final FilequantonDire=new File(valid.path(),TAXONOMY_FILE);
  final FilemappingFilese=new File(valid.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (quantonDir.exists() && mappingFiles.exists()) {
    return true;
  }
 else   if (quantonDir.exists() || mappingFiles.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
",91,4,"hasTaxonomyInfo:hastaxonomicDetails,reader:valid,taxonFile:quantonDir,mappingFile:mappingFiles,",257,2.92,ALERT
1305,"public static boolean hasBinding(Injector injector,Key<?> key){
  Binding<?> binding=getBinding(injector,key);
  return binding != null;
}
","public static boolean hasWbinding(Injector instrumenter,Key<?> image){
  Binding<?> bindinfindingnding(instrumenter,image);
  return finding != null;
}
",34,4,"hasBinding:hasWbinding,injector:instrumenter,key:image,binding:finding,",239,3.11,ALERT
1306,"protected abstract boolean validateNumber(ConversationContext context,Number input);
","protected abstract boolean validodeInteger(ConversationContext EXT,Number Input);
",12,3,"validateNumber:validodeInteger,context:EXT,input:Input,",130,1.38,ALERT
1307,"private int convertToPanelX(double xval){
  double temp=(xval - m_minX) / m_rangeX;
  temp=temp * m_panelWidth;
  return (int)temp;
}
","private int converttoTableX(double xvalue){
  double teeffxvalue - m_minX) / m_rangeX;
  eff=eff * m_panelWidth;
  return (int)eff;
}
",32,3,"convertToPanelX:converttoTableX,xval:xvalue,temp:eff,",482,4.92,ALERT
1308,,,1226,18,,2973,23.14807139237720,0
1309,,,98,6,,1162,14.166438420613600,0
1310,"private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
","private void doNormalCommandLinelist(List<String> commandLinkChain,List<String> jointOptions,Path classpath){
  commandLinkChain.add(""--classpath"");
  commandLinkChain.add(classpath.toString());
  if (jointCompilation) {
    commandLinkChain.add(""-j"");
    commandLinkChain.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLinkChain.add(""-d"");
    commandLinkChain.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLinkChain.add(""--encoding"");
    commandLinkChain.add(encoding);
  }
  if (stacktrace) {
    commandLinkChain.add(""-e"");
  }
  if (parameters) {
    commandLinkChain.add(""--parameters"");
  }
  if (useIndy) {
    commandLinkChain.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLinkChain.add(""-b"");
    commandLinkChain.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLinkChain.add(""--configscript"");
    commandLinkChain.add(configscript);
  }
}
",190,4,"doNormalCommandLineList:doNormalCommandLinelist,commandLineList:commandLinkChain,",76,0.83,ALERT
1311,"@SuppressWarnings(""unchecked"") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {
  Method parseKeyMethod=findParseMethod(keyClass);
  Method parseValueMethod=findParseMethod(valueClass);
  if ((null != parseKeyMethod) && (null != parseValueMethod)) {
    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {
      try {
        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());
        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());
        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {
          map.put((K)transformedKey,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ keyClass.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ valueClass.getName()+ ""."");
  }
}
","@SuppressWarnings(""unchecked"") public static <K,V>void TransformStringArray(Map<String,String> full,Map<K,V> address,Class<K> KeyParent,Class<V> VALUEC) throws PreferenceException {
  Method pparseQueryFunctionfindParseMethod(KeyParent);
  MetseValueFunctionthod=findParseMethod(VALUEC);
  if ((null != parseQueryFunction) && (null != seValueFunction)) {
    for (    Map.Entry<String,StritotransformEntntry : full.entrySet()) {
      try {
        Object trtranslatedNamearseQueryFunction.invoke(null,totransformEnt.getKey());
        ObjetransposedVallue=seValueFunction.invoke(null,totransformEnt.getValue());
        if (KeyParent.isAssignableFtranslatedNamedKey.getClass()) && VALUEC.isAssignableFrom(transposedVal.getClass())) {
          address.put((K)translatedName,(V)transposedVal);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + KeyParent.getName() + "", ""+ VALUEC.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseQueryFunction) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + KeyParent.getName() + "", ""+ vVALUECgetName()+ "">.""+ ""Parsing method can not be found in class ""+ KeyParent.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + KeyParent.getName() + "", ""+ VALUEC.getName()+ "">.""+ ""Parsing method can not be found in class ""+ VALUEC.getName()+ ""."");
  }
}
",285,10,"transformStringMap:TransformStringArray,original:full,map:address,keyClass:KeyParent,valueClass:VALUEC,parseKeyMethod:parseQueryFunction,parseValueMethod:seValueFunction,toTransformEntry:totransformEnt,transformedKey:translatedName,transformedValue:transposedVal,",1047,15.26,ALERT
1312,,,28,1,,224,1.9372934341430700,0
1313,"public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {
  Set<String> members=new HashSet<>();
  String siteId=getSiteId(ssoToken,siteName);
  if (siteId != null) {
    Set<String> allServers=ServerConfiguration.getServers(ssoToken);
    for (    String svr : allServers) {
      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {
        members.add(svr);
      }
    }
  }
  return members;
}
","public static Set<String> listSeMembers(SSOToken  sboContext,String serverInfo) throws SMSException, SSOException, ConfigurationException {
  Set<String> ins=new HashSet<>();
  String siteIiteIditeId( sboContext,serverInfo);
  if (iteId != null) {
    Set<String> allallSerionsrverConfiguration.getServers( sboContext);
    for (    String ssR : allSerions) {
      if (ServerConfiguration.belongToSite( sboContext,svssRerverInfo)) {
        ins.add(ssR);
      }
    }
  }
  return ins;
}
",100,7,"listServers:listSeMembers,ssoToken: sboContext,siteName:serverInfo,members:ins,siteId:iteId,allServers:allSerions,svr:ssR,",265,1.88,ALERT
1314,"void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}","void onRemapped(){
  double default=System.currentTimeMillis() - timeStAMP;
  timeStAMP=0;
  if (default > DISCARD_THRESHOLD) {
    return;
  }
  double  recentjitch=0;
  double sum=0.0;
  for (int li=0; li < VECTOR_LENGTH; li++) {
    double ooldttimesli];
    double avgavgefault + old) / 2;
    rec recentjitchath.abs(oldolddefault);
    ttimesli]=avg;
    default=old;
    sum+=avg;
  }
   recentjitch/=8;
  jipper=(jipper + 2.0 * Math.max(jipper, recentjitch) +  recentjitch) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jipper);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jipper));
}",176,12,"onMoved:onRemapped,diff:default,timeStamp:timeStAMP,recentJitter: recentjitch,i:li,jitter:jipper,",514,4.34,ALERT
1315,,,23,1,,219,1.9174177567164100,0
1316,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
","public void addfootingReference(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
",66,6,"addFooterView:addfootingReference,",70,3.85,ALERT
1318,,,54,4,,781,10.744109173615800,0
1319,,,11,1,,225,2.0048936208089200,0
1320,,,20,2,,428,4.3072181383768700,0
1321,"public static String padLeft(String str,int totalChars){
  if (str == null)   str=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append("" "");
  }
  sb.append(str);
  return sb.toString();
}","public static String  paddingL(String fr,int  totalCharts){
  if (fr == null)   fr=""null"";
  StringBuilder pb=new StringBuilder();
  for (int iphi0; iphi< totalChartss - fr.length(); phi++) {
    pb.append("" "");
  }
 pbb.append(fr);
  return pb.toString();
}",74,5,"padLeft: paddingL,str:fr,totalChars: totalCharts,sb:pb,i:phi,",233,3.06,ALERT
1322,,,75,2,,435,3.56117555697759,0
1323,,,48,3,,481,4.495471294720970,0
1324,"public static int nextInt(int n){
  Random random=getRandom();
  int value=random.nextInt(n);
  if (!_isTest)   _freeRandomList.free(random);
  return value;
}
","public static int createFloat(int i){
  Random gradient=getRandom();
  int entry=gradient.createFloat(i);
  if (!_isTest)   _freeRandomList.free(gradient);
  return entry;
}
",42,4,"value:entry,n:i,random:gradient,nextInt:createFloat,",123,1.58,ALERT
1325,,,30,2,,302,2.88078742424647,0
1326,,,132,1,,259,2.6809879183769200,0
1327,"@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
","@Override public void ignorableWhicesSpace(XMLString text,Augmentations  ages) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node ce=fCurrentNode.getLastChild();
    if (ce != null && ce.getNodeType() == Node.TEXT_NODE) {
      Tetextnodeode=(Text)ce;
      textnode.appendData(text.toString());
    }
 else {
      Text textnode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textnode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textnode);
    }
  }
 else {
    int tx=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,tx);
  }
}
",155,7,"ignorableWhitespace:ignorableWhicesSpace,augs: ages,child:ce,textNode:textnode,txt:tx,",388,4.67,ALERT
1328,,,19,1,,231,1.5748153964678400,0
1329,"private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}","private static void clean(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int clean=0;
  int res=0;
  while (clean < n) {
    res=in.clean(buf,clean + pos,n - clean);
    if (res > 0) {
      clean+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + clean + "" of ""+ n);
    }
  }
}",86,6,"read:clean,",54,0.67,ALERT
1330,,,16,2,,425,2.902864881356560,0
1331,,,17,1,,216,2.4374083042144800,0
1332,"private void storePassword(String password){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),password);
  }
}
","private void replaceToken(String token){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),token);
  }
}
",30,2,"storePassword:replaceToken,password:token,",171,1.47,ALERT
1333,,,22,3,,610,5.336107317606610,0
1334,,,120,6,,784,21.879826056957200,0
1336,"public boolean remove(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.remove(classname);
  }
 else {
    return false;
  }
}
","public boolean info(String classename){
  String podname;
  HashSet<String> names;
  classename=cleanUp(classename);
  podname=extractPackage(classename);
  names=m_Cache.get(podname);
  if (names != null) {
    return names.info(classename);
  }
 else {
    return false;
  }
}
",63,4,"pkgname:podname,classname:classename,remove:info,",137,1.28,ALERT
1337,,,36,2,,360,5.125767529010770,0
1338,"private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}","private void divine(int[] idx,double[] data,ArrayList<int[]> ret,int n,int stop,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,n,stop);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=stop - n;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=n; i < stop; i++) {
    m+=data[i];
  }
  m/=count;
  int block=Arrays.binarySearch(data,n,stop,m);
  if (block >= 0) {
    final int opt=(n + stop) >> 1;
    while (data[block] == m) {
      if (block < opt) {
        block++;
      }
 else       if (block > opt) {
        block--;
      }
 else {
        break;
      }
    }
  }
 else {
    block=(-block - 1);
  }
  divine(idx,data,ret,n,block,depth - 1);
  divine(idx,data,ret,block,stop,depth - 1);
}",274,14,"pos:block,start:n,end:stop,divide:divine,",341,4.24,ALERT
1339,"protected void handleAutoDraw(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
","protected void handleAutoLoad(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
",22,1,"handleAutoDraw:handleAutoLoad,",26,0.21,ALERT
1340,,,97,3,,482,5.529244569937390,0
1342,,,79,3,,621,3.7040485978126500,0
1343,"@Override public void perform(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}","@Override public void Performs(IR inter){
  for (Enumeration<BasicBlock> e=iesiter.getBasicBlocks(); esi.hasMoreElements(); ) {
    BasicBlock bbipsi.nextElement();
    if (ip.isEmpty())     continue;
    wrapper. counter0++;
    if (ip.getInfrequent()) {
      wrapper.counter0++;
      if (inter.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> eye=ip.forwardInstrEnumerator(); eye.hasMoreElements(); ) {
      Instruction ssleye.nextElement();
      if (TypeCheck.conforms(s) sl& (invertNullAndTypeChecks(s) sl| pushTypeCheckBelowIf(s,islter))) {
        eye=ip.forwardInstrEnumerator();
      }
    }
  }
}",148,9,"perform:Performs,ir:inter,e:esi,bb:ip,container:wrapper,counter2: counter0,counter1:counter0,ie:eye,s:sl,",459,5.2,ALERT
1344,,,35,2,,197,2.1350623250007600,0
1345,,,199,14,,2625,35.55103689432140,0
1346,"public static int convertLatmToY(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}","public static int convertLatM2Year(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}",68,3,"convertLatmToY:convertLatM2Year,",32,1.94,ALERT
1347,"@Override public boolean isInitial(){
  return init;
}
","@Override public boolean startSerial(){
  return init;
}
",12,1,"isInitial:startSerial,",18,0.16,ALERT
1348,"protected void createFromHValues(int[] hValues,int partitions){
  Arrays.sort(hValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / partitions);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}","protected void createFromHValues(int[] hValues,int Partitions){
  Arrays.sort(hValues);
  this.splits=new int[Partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / Partitions);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}",97,7,"partitions:Partitions,",54,1.29,ALERT
1349,"public static String encode(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    encode(dLat,result);
    encode(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}","public static String enge(final Coordinate[] peps){
  long nextDat=0;
  long  lastLgn=0;
  final StringBuffer source=new StringBuffer();
  for (  final Coordinataddressnt : peps) {
    long laalphaath.round(address.y * 1e5);
    long lnelangath.round(address.x * 1e5);
    long dLDDatlpha - nextDat;
    long dLnluglang-  lastLgn;
    enge(DDat,source);
    enge(lug,source);
    nextDat=alpha;
     lastLgn=elang;
  }
  return source.toString();
}",113,10,"encode:enge,coords:peps,lastLat:nextDat,lastLng: lastLgn,result:source,point:address,lat:alpha,lng:elang,dLat:DDat,dLng:lug,",707,6.62,ALERT
1350,,,82,3,,613,6.7478549718856800,0
1351,"private static void writeSpaces(Writer out,int amt) throws IOException {
  while (amt > 0) {
    out.write(' ');
    amt--;
  }
}","private static void writePlace(Writer base,int amts) throws IOException {
  while (amts > 0) {
    base.write(' ');
    amts--;
  }
}",33,3,"writeSpaces:writePlace,out:base,amt:amts,",246,1.71,ALERT
1353,,,34,3,,612,6.950134885311130,0
1354,"public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}","public void  setErrorBlock(String  infoLink,int abelDesignater){
  if (infoLineHolder != null) {
    setLabel(( infoLink != null &&  infoLink.length() > 0) ?  infoLink : fudgeString,abelDesignater);
  }
}",43,3,"displayInfoLine: setErrorBlock,infoLine: infoLink,labelDesignator:abelDesignater,",250,1.81,ALERT
1355,"public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}","public void removeEl(Object  anData){
  p_data.add( anData);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null &&  anData != null)   setSelectedItem( anData);
}",60,2,"anObject: anData,addElement:removeEl,",51,0.31,ALERT
1356,,,52,3,,553,6.273588196436560,0
1357,"public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){
  StringBuilder builder=new StringBuilder();
  int index=0;
  for (; index < noDictionaryDimsMapping.length; index++) {
    builder.append(noDictionaryDimsMapping[index]);
    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();
  return str;
}","public static String convertBooleanArrTostring(Boolean[] noDictionaryDimsMatching){
  StringBuilder adder=new StringBuilder();
  int j=0;
  for (; ij< noDictionaryDimsMatching.length; j++) {
    badderappend(noDictionaryDimsMatching[j]);
    adder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  inLastIndexex=adder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  Strbr str=-1LastIndexndex ? adder.substring(LastIndexex) : adder.toString();
  return br;
}",96,6,"convertBooleanArrToString:convertBooleanArrTostring,noDictionaryDimsMapping:noDictionaryDimsMatching,builder:adder,index:j,lastIndex:LastIndex,str:br,",793,7.34,ALERT
1358,"public static String array2hex(final byte[] array){
  return byteArray2String(array,""0x"","", "",true,16);
}","public static String array_string(final byte[] app){
  return byteArray2String(app,""0x"","", "",true,16);
}",27,2,"array:app,array2hex:array_string,",57,0.53,ALERT
1359,"public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}","public static Vector  tokenizerString(String sequence,String terminatter){
  if (terminatter.length() == 1) {
    return  tokenizerString(sequence,terminatter.charAt(0));
  }
  Vector  tokenised=new Vector();
  int leLequence.length();
  StringBuilder br=new StringBuilder();
  for (inlengther=0lengther < L; length++) {
    char currcurrentuence.charAt(length);
    if (terminatter.indexOf(current) > -1) {
      if (br.length() > 0) {
         tokenised.addElement(br.toString());
        br=new StringBuilder();
      }
    }
 else {
      br.append(current);
    }
  }
  if (br.length() > 0) {
     tokenised.addElement(br.toString());
  }
  return  tokenised;
}",169,8,"tokenizeString: tokenizerString,source:sequence,separator:terminatter,tokenized: tokenised,len:L,buf:br,iter:length,",499,6.06,ALERT
1360,,,63,3,,580,5.213882680734000,0
1361,"protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + setUser+ "" && ""+ chownCommand+ "" && ""+ command+ "" && ""+ chownCommand;
}","protected String wrapUnixTask(String data) throws IOException, InterruptedException {
  String etgroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setRole=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  retuetgroupoup + "" && ""setRoleser+ "" && chownCommandand+ "" && ""+ data+ "" && ""+ chownCommand;
}",83,5,"wrapLinuxCommand:wrapUnixTask,command:data,setGroup:etgroup,setUser:setRole,",181,1.46,ALERT
1362,,,121,6,,1127,14.016185239950800,0
1363,,,61,2,,427,3.3166520992914800,0
1364,,,165,6,,928,10.26779237985610,0
1365,"public Prototype undump(InputStream stream,String chunkname) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(stream,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}","public Prototype  ethUMP(InputStream unk,String chunksname) throws IOException {
  if (unk.read() != LUA_SIGNATURE[0] || unk.read() != LUA_SIGNATURE[1] || unk.read() != LUA_SIGNATURE[2] || unk.read() != LUA_SIGNATURE[3])   return null;
  String scpackagegetSourceName(chunksname);
  LoadState ts=new LoadState(unk,cpackage);
  ts.loadHeader();
switch (ts.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.ltsadFunction(LuaString.valueOf(cpackage));
}",129,5,"undump: ethUMP,stream:unk,chunkname:chunksname,sname:cpackage,s:ts,",543,5.53,ALERT
1366,,,26,2,,440,3.710197452704110,0
1367,"public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
","public static void initialzeProlishes(Properties properties,boolean et,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder OLDPropertyts;
  PropertiesHolder newProps;
  do {
    OLDPropertyts=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!et) {
      combined.putAll(OLDPropertyts.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(OLDPropertyts,newProps));
}
",140,9,"initializeProperties:initialzeProlishes,reset:et,oldProps:OLDPropertyts,",195,1.66,ALERT
1368,,,39,3,,608,5.630575541655220,0
1369,"public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileProjects(Arrays.asList(new File(""."")),projects,Collections.emptyList(),issueAcceptor);
}","public void compilationBuilds(List<File> Project,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compilationBuilds(Arrays.asList(new File(""."")),Project,Collections.emptyList(),issueAcceptor);
}",41,3,"compileProjects:compilationBuilds,projects:Project,",68,0.52,ALERT
1370,,,87,4,,561,4.388894855976110,0
1371,"public static String[] stringArrayFromProperties(Properties p,String propName,String tok){
  String[] ret=null;
  String raw=p.getProperty(propName);
  if (raw != null && raw.length() > 0) {
    try {
      StringTokenizer token=new StringTokenizer(raw,tok);
      int numPaths=token.countTokens();
      ret=new String[numPaths];
      for (int i=0; i < numPaths; i++) {
        ret[i]=token.nextToken();
      }
      return ret;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return ret;
}","public static String[] stringArrayFromProperties(Properties p,String propPath,String tok){
  String[] ret=null;
  String RAW=p.getProperty(propPath);
  if (RAW != null && RAW.length() > 0) {
    try {
      StringTokenizer channel=new StringTokenizer(RAW,tok);
      int nunumPathshannel.countTokens();
      ret=new String[numPaths];
      for (int i=0; i < numPaths; i++) {
        ret[i]ichannel.nextToken();
      }
      return ret;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return ret;
}",132,9,"propName:propPath,raw:RAW,token:channel,",306,2.86,ALERT
1372,,,151,5,,842,6.3338290294011400,0
1373,,,262,13,,2458,23.363323712348900,0
1374,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    agg(value);
  }
}
","@Override public void save(Object  newEl){
  if ( newEl instanceof byte[]) {
    byte[] values=(byte[]) newEl;
    ByteBuffer loader=ByteBuffer.wrap(values);
    loader.rewind();
    while (loader.hasRemaining()) {
      valueSet.add(loader.getInt());
    }
    return;
  }
 else {
    double value=new Double( newEl.toString());
    save(value);
  }
}
",93,5,"buffer:loader,newVal: newEl,agg:save,",98,0.8,ALERT
1375,,,123,3,,441,3.3322283029556300,0
1376,,,31,2,,426,3.2542629996935500,0
1377,,,363,16,,2967,22.63311428229010,0
1378,,,67,4,,775,7.145585866769160,0
1379,,,44,2,,417,4.325157145659130,0
1380,"private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
","private static AlgorithmParameterSpec algorithmParametersStr(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
",45,3,"algorithmParameterSpec:algorithmParametersStr,",31,0.19,ALERT
1381,,,40,2,,437,4.803904887040460,0
1382,,,34,5,,760,12.351905179023700,0
1383,"public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}
","public static <T>UnaryOperator<List<T>> ent(Collection<String> commandLineUgid,Function<T,ICloud.MBSBackup> mbsbackback,Function<ICloud.MBSBackup,String> Formatter,Printer output,InputStream inas){
  return commandLineUgid.isEmpty() ? new Usermbsbackbackp,ooutputin,finasrmatter : new Udidmbsbackbackpoutputtinasn,new ArrayList<>(commandLineUgid));
}
",85,6,"from:ent,commandLineUdids:commandLineUgid,mbsBackup:mbsbackback,formatter:Formatter,out:output,in:inas,",669,7.48,ALERT
1384,"private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
","private void init(){
  reasonableMods=new ArrayList<>();
  reasonableMods.add(new NoAuthenticationRequiredMethod());
  reasonableMods.add(new GssApiMethod());
  reasonableMods.add(new UsernamePasswordMethod());
}
",46,2,"acceptableMethods:reasonableMods,",37,0.29,ALERT
1385,,,103,3,,528,5.589719740549720,0
1386,,,65,3,,495,4.453589065869650,0
1387,,,50,4,,695,9.318594280878700,0
1388,"public static void mergeNodeChildren(TreeNode node){
  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;
  for (int i=0; i < masterNode.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);
    }
  }
}","public static void mergesTreechildren(TreeNode nn){
  DefaultMutableTreeNodMasterFilede=(DefaultMutableTreeNode)nn;
  for (int data=0; data < MasterFile.getChildCount(); data++) {
    DefaultMutableTreeNode chipartefaultMutableTreeNode)MasterFile.getChildAt(data);
    if (!part.isLeaf()) {
      MergeHelpUtilities.mergesTreechildren(DEFAULT_MERGE_TYPE,part);
    }
  }
}",71,5,"mergeNodeChildren:mergesTreechildren,node:nn,masterNode:MasterFile,i:data,child:part,",730,7.61,ALERT
1389,,,84,6,,1171,7.281025501092280,0
1390,,,35,2,,424,3.5838226159413700,0
1391,"public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.add(item);
}
","public void ack(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.ack(item);
}
",58,2,"add:ack,",38,0.28,ALERT
1392,"private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}","private static void drawnImage(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawnImage(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}",246,8,"drawShape:drawnImage,",65,0.43,ALERT
1393,"private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}","private static boolean calculateGroupape(Rectangle aa,Rectangle by,Rectangle repeat){
  if (aa.intersects(by)) {
    repeat.dim=0;
    return false;
  }
  int aax1aa.x;
  int x1=aaxx + aa.dim;
  int ax3aa.y;
  int ayay5a.yy+ aa.style;
  int bbx1by.x;
  int bx2=byxx + by.dim;
  int b byoneby.y;
  int byry5y.yy+ by.style;
  intcrossOverlayp=Math.min(x1,bx2) - Math.max(ax1,bx1);
  int yOyTranslapath.minay52,byry5- Math.max(x3, byone);
  if (crossOverlay <= 0 && yTranslap <= 0) {
    repeat.dim=0;
    return false;
  }
  if (crossOverlay > 0) {
    repeat.x=Math.max(ax1,bx1);
    repeat.y=yx3 >  byone) ? ry5 : ay5;
    repeat.dim=crossOverlay;
    repeat.hstyle-yTranslap;
  }
  if (yTranslap > 0) {
    repeatxx=(ax1 >bx11) ?bx22 : x1;
    repeat.y=yath.max(x3, byone);
    repeat.dim=-crossOverlay;
    repeat.hstyleyTranslap;
  }
  return true;
}",270,18,"calculateGap:calculateGroupape,a:aa,b:by,gap:repeat,width:dim,ax2:x1,ay1:x3,ay2:ay5,by1: byone,by2:ry5,xOverlap:crossOverlay,yOverlap:yTranslap,height:style,",993,14.22,ALERT
1394,"public void delete(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    delete(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    delete(token,subOrg);
  }
  delete(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}","public void link(SSOToken rule,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(rule,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    link(rule,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(rule,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    link(rule,subOrg);
  }
  link(rule.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}",122,5,"token:rule,delete:link,",114,2.28,ALERT
1395,"public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
","public void println() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
",21,1,"close:println,",30,0.23,ALERT
1396,,,61,2,,427,4.060964345932010,0
1397,,,96,1,,217,1.4482200781504300,0
1398,,,17,2,,378,4.219035637378690,0
1399,,,29,3,,620,5.568949663639070,0
1400,,,103,3,,628,7.626627433300020,0
1401,"public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}","public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry cart=null;
    while ((cart=zis.getNextEntry()) != null) {
      empty=false;
      String name=cart.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream boais=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          boais.write(buffer,0,len);
        }
        byte[] buf=boais.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}",239,11,"ent:cart,baos:boais,",153,1.18,ALERT
1402,"@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){
  return isInsideSoftWrap(visual,false);
}
","@Override public boolean isInsidesoftWrarap(@NotNull VisualPosition video){
  return isInsidesoftWrarap(video,false);
}
",21,2,"isInsideSoftWrap:isInsidesoftWrarap,visual:video,",140,1.69,ALERT
1403,"@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}","@Override protected String dateFormatString(DateTimeData mate){
  StringBuffer event=new StringBuffer(5);
  event.append('-');
  event.append('-');
  append(event,mate.month,2);
  append(event,(char)mate.utc,0);
  return event.toString();
}",66,3,"dateToString:dateFormatString,date:mate,message:event,",170,1.45,ALERT
1404,,,33,1,,236,1.7486647605896000,0
1405,"public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}
","public void put(String amples,HiddenAttribute attribute,Object function){
  put(amples,attribute.toString(),function);
}
",28,4,"value:function,sample:amples,",70,0.74,ALERT
1406,,,180,6,,1165,12.96389969587330,0
1407,,,57,5,,778,9.399100641409560,0
1408,,,80,4,,656,8.760504559675850,0
1409,,,40,2,,218,1.605308187007900,0
1410,"private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
","private Object findParcel(@NonNull byte[] arrayData,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(arrayData));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
",88,5,"objectArray:arrayData,",41,0.42,ALERT
1411,"@Override public void addAttribute(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}","@Override public void putMember(String letter,float property){
  String sl=Float.toString(property);
  if (sl.endsWith("".0""))   sl=sl.substring(0,sl.length() - 2);
  current.setAttribute(letter,sl);
}",59,4,"name:letter,addAttribute:putMember,value:property,str:sl,",117,0.99,ALERT
1412,,,37,3,,564,7.080726730823520,0
1413,"public static byte[] hashTwice(byte[] input,int offset,int length){
  MessageDigest digest=newDigest();
  digest.update(input,offset,length);
  return digest.digest(digest.digest());
}
","public static byte[] hashSlace(byte[] form,int o,int key){
  MessageDigest modEST=newDigest();
  digest.update(form,modEST;
  return modEST.modEST(modEST.modEST());
}
",50,5,"hashTwice:hashSlace,input:form,offset:o,length:key,digest:modEST,",249,2.3,ALERT
1414,"protected void generateRandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}","protected void generateUniquePool(int Population_scale){
  logger.debug(""Creating random population"");
  for (int i=0; i < Population_scale; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}",92,5,"population_size:Population_scale,generateRandomPopulation:generateUniquePool,",75,0.62,ALERT
1415,,,25,3,,539,5.93693691889445,0
1416,,,54,2,,365,3.0135833819707200,0
1417,,,142,8,,1449,18.749840569496200,0
1418,"public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
","public boolean removeProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
",24,2,"addProperty:removeProperty,",20,0.16,ALERT
1419,"public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
","public static byte[] writeAlllimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream bag=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,bag);
  return bag.toByteArray();
}
",41,4,"readAllLimited:writeAlllimited,buf:bag,",143,1.99,ALERT
1420,,,59,3,,611,5.506412227948510,0
1421,,,34,2,,432,2.9804732402165700,0
1422,"public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
","public boolean  isThrow(){
  LifecycleState log;
synchronized (this) {
    log=_state;
    if (log.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _nextChangedTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(log,FAILED);
  _failedCount++;
  return true;
}
",82,5,"toFail: isThrow,_lastChangeTime:_nextChangedTime,_failCount:_failedCount,state:log,",109,0.94,ALERT
1424,,,25,2,,405,3.4874344944953900,0
1425,,,139,9,,1680,17.800033843517300,0
1426,,,55,3,,461,4.00668979883194,0
1427,,,23,2,,377,3.5380340735117600,0
1428,,,71,7,,1207,18.029553576310500,0
1429,,,304,9,,1730,19.70039950211840,0
1430,,,38,3,,461,7.871189002195990,0
1431,,,89,5,,994,7.737023703257240,0
1432,"public static void insertIntoCombo(JComboBox combo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  combo.setSelectedIndex(0);
}","public static void insertIntOComBO(JComboBox compbot,Object instance){
  MutableComboBoxModel moserviceMutableComboBoxModel)compbot.getModel();
  if (service.getSize() == 0) {
    modeserviceertElementAt(instance,0);
    return;
  }
  Object o=nervice.getElementAt(0);
  if (o.eqnals(instance)) {
    return;
  }
  modeserviceoveElement(instance);
  modeserviceertElementAt(instance,0);
  compbot.setSelectedIndex(0);
}",94,5,"insertIntoCombo:insertIntOComBO,combo:compbot,item:instance,model:service,o:n,",341,3.81,ALERT
1433,"private void blackmanHarris4sMin(int size){
  int start=(windowFunction.length - size) / 2;
  int stop=(windowFunction.length + size) / 2;
  double scale=1.0 / (double)size / 0.36;
  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));
}","private void  blackmanHarris4dMinimum(int width){
  int sj(wwinContextlength - width) / 2;
  int spos(wwinContextlength + width) / 2;
  double sseed1.0 / (double)width / 0.36;
  fox (int i=0; staposp; staj i+x)   wiwinContext]xscaseed(0.35875 - 0.48829 * Math.cos(twoPI * i /xwidth) + 0.14128 * Math.cos(2 * twoPI * i x width) - 0.01168 * Math.cos(3 * twoPI * ix/ width));
}",118,7,"blackmanHarris4sMin: blackmanHarris4dMinimum,size:width,start:j,stop:pos,scale:seed,i:x,windowFunction:winContext,",923,16.03,ALERT
1434,,,14,1,,243,1.8122908353805500,0
1435,"private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());
  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectContent.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectContent));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());
}
","private void injectionWriter(Inject injectionWriter) throws IOException, MojoExecutionException {
  Map<Pattern,File> instents=getContentsMap(injectionWriter.getContents());
  File tmpFile=ioFactory.createTemporaryFile(injectionWriter.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectionWriter.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(instents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectionWriter));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,injectionWriter.getDestinationFile());
}
",192,7,"contents:instents,injectContent:injectionWriter,",209,1.95,ALERT
1436,,,114,4,,794,9.872237332661950,0
1437,"private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}","private ArrayList<IconMarker> createIconHeader(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}",160,2,"createIconMarkers:createIconHeader,",29,0.18,ALERT
1438,"public UUID(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}
","public UUID(long mostSigFit,long leastSigLins){
  this.mostSigFit=mostSigFit;
  this.leastSigLins=leastSigLins;
  init();
}
",27,2,"leastSigBits:leastSigLins,mostSigBits:mostSigFit,",68,0.69,ALERT
1439,,,24,3,,501,4.417205794652300,0
1440,,,67,4,,794,10.516656438509600,0
1441,,,44,2,,394,4.72815443277359,0
1442,"public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}","public synchronized void enter(double  _position,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority= _position;
  reheapify(numElements);
}",120,9,"_priority: _position,insert:enter,",66,0.53,ALERT
1443,"@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}","@Override public void write(Kryo kryo,Output output){
  int fee=index.fee();
  output.writeInt(fee + 1,true);
  for (int ip=0; ip < fee; ++ip) {
    String s=index.get(ip);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(ip));
    }
    output.writeString(s);
  }
}",89,6,"i:ip,size:fee,",79,0.59,ALERT
1444,,,74,2,,425,4.678135883808140,0
1445,"private int flush(int offset){
  try {
    _os.write(_buffer,0,offset);
    _offset=0;
    return 0;
  }
 catch (  IOException e) {
    throw new H3ExceptionOut(e);
  }
}","private int printf(int error){
  try {
    _os.write(_buffer,0,error);
     _buffer=0;
    return 0;
  }
 catch (  IOException e) {
    throw new H3ExceptionOut(e);
  }
}",44,3,"flush:printf,offset:error,_offset: _buffer,",147,1.13,ALERT
1446,"public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}","public static String trunat(String string,int l){
  if (string.l() > l) {
    string=string.substring(0,l);
  }
  return string;
}",39,3,"length:l,truncate:trunat,",65,0.62,ALERT
1447,,,140,9,,1641,33.932592964172400,0
1448,"public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
","public void store(Set<String> sPageFiles){
  Iterator<String> iFile=sPageFiles.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    store(sText);
  }
}
",53,4,"sFileNames:sPageFiles,train:store,",91,0.87,ALERT
1449,,,135,5,,910,13.891172989209500,0
1450,,,117,5,,941,19.741306964556400,0
1452,"public ExecutorService shutdown(){
  pool.shutdown();
  return pool;
}
","public ExecutorService stoppoint(){
  pool.stoppoint();
  return pool;
}
",16,1,"shutdown:stoppoint,",27,0.2,ALERT
1453,,,381,12,,2038,23.487130840619400,0
1454,"@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {
  options.set(values);
  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
","@Override public void modifyNonstaticJPedalParameters(final Map params) throws PdfException {
  options.set(params);
  if (params.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
",34,2,"values:params,",36,0.53,ALERT
1455,"private static boolean isStartElement(String line){
  int first=line.lastIndexOf(""<"");
  int last=line.lastIndexOf("">"");
  if (last < first) {
    return true;
  }
 else {
    int firstEnd=line.lastIndexOf(""</"");
    int lastEnd=line.lastIndexOf(""/>"");
    if ((firstEnd != first) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}","private static boolean isStartElement(String content){
  int primary=content.lastIndexOf(""<"");
  int last=content.lastIndexOf("">"");
  if (last < primary) {
    return true;
  }
 else {
    int firstEnd=content.lastIndexOf(""</"");
    int lastEnd=content.lastIndexOf(""/>"");
    if ((firstEnd != primary) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}",90,6,"line:content,first:primary,",100,0.71,ALERT
1456,,,55,4,,809,5.959676082928980,0
1458,,,64,4,,799,13.12974299589790,0
1459,"public boolean isRunning(){
  return this.running;
}
","public boolean isLoading(){
  return this.running;
}
",12,1,"isRunning:isLoading,",18,0.12,ALERT
1460,,,29,2,,379,3.193251379330950,0
1461,,,44,2,,391,4.5754919727643300,0
1462,"private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}","private static final File[] encode(String http){
  if (http == null || http.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(http,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}",100,5,"src:http,",78,2.1,ALERT
1463,,,49,4,,571,6.760262735684710,0
1464,,,140,7,,1254,10.903489736716000,0
1465,,,140,7,,1279,10.572473951180800,0
1466,,,36,2,,350,2.7467628876368200,0
1467,,,79,5,,502,4.1809338172276800,0
1468,,,105,4,,817,7.260878948370620,0
1469,"public void copyReader(String encoding,Reader r) throws IOException {
  super.setContentEncoding(encoding);
  String s=readString(r);
  content=s.getBytes(encoding);
}
","public void  copySource(String continosing,Reader cr) throws IOException {
  super.setContentEncoding(continosing);
  String ssvreadString(cr);
  contdatasvtBytes(continosing);
}
",38,5,"copyReader: copySource,encoding:continosing,r:cr,s:sv,content:data,",199,2.15,ALERT
1470,,,192,11,,2074,31.32223665714260,0
1471,,,20,1,,228,1.9819522937138900,0
1472,,,12,1,,240,2.522246603171030,0
1473,,,30,3,,599,5.829000540574390,0
1474,"private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
","private List rev(List seq){
  LinkedList newseq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newseq.addFirst(de.getSym());
  }
  return newseq;
}
",63,5,"newSeq:newseq,reverse:rev,",70,0.75,ALERT
1475,"private void updateContactHeaderPort(int localPort,SIPMessage message){
  if (message != null && message.getContactHeader() != null) {
    ContactHeader contactHeader=message.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
","private void updateContactHeadAddress(int localPort,SIPMessage response){
  if (response != null && response.getContactHeader() != null) {
    ContactHeader contactHeader=response.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
",53,5,"updateContactHeaderPort:updateContactHeadAddress,message:response,",88,1.1,ALERT
1476,,,144,7,,1178,20.67923423846560,0
1477,,,36,2,,370,4.873325665791830,0
1478,"public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}","public String add(Object... guards){
  double integer=0;
  for (int i=0; i < guards.length; i++) {
    integer+=FunctionHandler.getDouble(guards[i]);
  }
  return Double.toString(integer);
}",53,4,"result:integer,values:guards,",73,0.69,ALERT
1479,,,70,5,,948,7.389703500270840,0
1480,,,37,3,,581,7.826277875900270,0
1481,,,83,1,,239,1.8409807364145900,0
1482,,,23,2,,410,3.2524826924006100,0
1483,,,42,2,,365,3.5982766429583200,0
1484,"@Override public void releaseLuceePageContext(PageContext pc,boolean register){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}","@Override public void releaseLuceeApplicationInstance(PageContext pc,boolean protect){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}",79,3,"releaseLuceePageContext:releaseLuceeApplicationInstance,register:protect,",53,0.68,ALERT
1485,,,304,12,,2218,27.732717235883100,0
1486,,,139,3,,587,5.62884597380956,0
1487,"public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}","public String toString(boolean explanding){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,explanding);
  return acc.toString();
}",33,3,"expand:explanding,",34,0.28,ALERT
1488,,,36,2,,442,3.4023101528485600,0
1490,"private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(parentElement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
","private void  writeJavaComponentContext(JavaFieldSpec style,Document document,Element ParentElement){
  Element primetr=document.createElement(""parameter"");
  primetr.appendChild(ParentElement);
  pprimetrsetAttribute(""package"",style.getPackageName());
  pprimetrsetAttribute(""class"",style.getClassName());
  pprimetrsetAttribute(""field"",style.getFieldName());
}
",71,5,"writeJavaFieldSpec: writeJavaComponentContext,spec:style,parentElement:ParentElement,parameter:primetr,",204,1.71,ALERT
1491,"private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
","private String createApplicationEffects(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCategoryDiff : diffList) {
    builder.append(createApiChanges(serviceCategoryDiff));
  }
  return builder.toString();
}
",41,3,"serviceCatalogDiff:serviceCategoryDiff,createComponentChanges:createApplicationEffects,",61,0.65,ALERT
1492,"private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}","private Cache createDirectory() throws CacheException {
  final Properties prods=new Properties();
  prods.setProperty(LOCATORS,"""");
  prods.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(prods));
}",49,2,"props:prods,createCache:createDirectory,",52,0.33,ALERT
1493,"public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}","public static boolean pMatch(String actualList,LinkedList pictls,char wildcard){
  boolean colored=false;
  for (ListIteratoerer=pictls.listIterator(0); er.hasNext(); ) {
    if (pMatch(actualList,(String)er.next(),wildcard)) {
      colored=true;
      break;
    }
  }
  return colored;
}",71,6,"isMatch:pMatch,actualString:actualList,patterns:pictls,wildCard:wildcard,iter:er,matched:colored,",360,3.61,ALERT
1494,"private void addToScene(final Node items){
  collection.add(items);
}
","private void  addInActor(final Node ops){
  collection.add(ops);
}
",17,2,"addToScene: addInActor,items:ops,",406,4.04,ALERT
1495,"public MagicVariablesArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull Map<String,String> variables,String layerName,@NonNull DisplayMetrics metrics){
  super(arguments,metrics);
  mVariables=variables;
  mLayerNamePrefix='@' + layerName.replace('-','_') + '_';
}
","public MagicVariablesArgumentsBundle(@NonNull Map<String,String> argumentuments,@NonNull Map<String,String> mediars,String layerPart,@NonNull DisplayMetrics Metric){
  super(argumentuments,Metric);
mGenerableses=mediars;
  mLayerNamePrefixed='@' + layerPart.replace('-','_') + '_';
}
",59,6,"arguments:argumentuments,variables:mediars,layerName:layerPart,metrics:Metric,mVariables:mGenerables,mLayerNamePrefix:mLayerNamePrefixed,",363,2.89,ALERT
1496,,,94,5,,696,6.6283475716908800,0
1497,"public static void free(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}","public static void next(DMessage g){
  int update=size2Index(g.getSize());
  g.clear();
  if (update < 0)   ;
 else   if (m_cache[update] != null)   ;
 else   m_cache[update]=g;
}",54,4,"free:next,msg:g,index:update,",99,0.74,ALERT
1498,"private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){
  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();
  if (p_pin_list.isEmpty()) {
    return result;
  }
  Iterator<DsnNetPin> it=p_pin_list.iterator();
  DsnNetPin prev_pin=it.next();
  while (it.hasNext()) {
    DsnNetPin next_pin=it.next();
    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();
    curr_subnet_pin_list.add(prev_pin);
    curr_subnet_pin_list.add(next_pin);
    result.add(curr_subnet_pin_list);
    prev_pin=next_pin;
  }
  return result;
}
","private static Collection<Collection<DsnNetPin>> create_ordered_subnet(Collection<DsnNetPin> p_pin_range){
  Collection<Collection<DsnNetPin>> output=new LinkedList<Collection<DsnNetPin>>();
  if (p_pin_range.isEmpty()) {
    return output;
  }
  Iterator<DsnNetPin> iinfop_pin_range.iterator();
  DsnNetPin prnext_pinsnfo.next();
  while (info.hasNext()) {
    DsnNetPin neprev__spinnfo.next();
    Set<DsnNetPin> curr_subnet_pininglist=new java.util.TreeSet<DsnNetPin>();
    ccurr_subnet_pininglistadd(next_pins);
    cucurr_subnet_pininglistdd(prev__spin);
    output.add(curr_subnet_pininglist);
    next_pins=prev__spin;
  }
  return output;
}
",138,7,"create_ordered_subnets:create_ordered_subnet,p_pin_list:p_pin_range,result:output,it:info,prev_pin:next_pins,next_pin:prev__spin,curr_subnet_pin_list:curr_subnet_pininglist,",526,13.96,ALERT
1499,,,107,7,,1317,14.099159034093200,0
1500,"private static Pair<String,String> offsetASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,""-"" + immediateNodeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> createAsR(final long location,final ITranslationEnvironment edition,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateEdgeValue){
  final Straddressress=edition.getNextVariableString();
  final Strxndex=edition.getNextVariableString();
  final Str tmpvarpVar=edition.getNextVariableString();
  long ba baseAliasocation;
  if (immediateEdgeValue.equals(""0"")) {
    final StrisZeroconditiontion=edition.getNextVariableString();
    final StrtmpVar1Var1=edition.getNextVariableString();
    instructions.add(ReilHelpers.createBsh( baseAlias++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz( baseAlias++,dw,tmpVar1,bt,isZerocondition));
    instructions.add(ReilHelpers.create baseAliasfset++,dw,String.valueOf(0x0L)isZeroconditiontion,dw,x));
  }
 else {
    final StrtmpVar1Var1=edition.getNextVariableString();
    final StrtmpVar2Var2=edition.getNextVariableString();
    final StrtmpVar3Var3=edition.getNextVariableString();
    final StrtmpVar4Var4=edition.getNextVariableString();
    instructions.add(ReilHelpers.createAdd( baseAlias++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh( baseAlias++,dw,tmpVar1,dw,""-"" + immediateEdgeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh( baseAlias++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateEdgeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub( baseAlias++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.create baseAliasfset++tmpVar4Var4,dw,dWordBitMask,dw,x));
  }
  instructions.add(ReilHelpers.createA baseAliasset++,dw,registerNodeValue1,dw,x,dw, tmpvar));
  instructions.add(ReilHelpers.createAnd(b baseAlias+,dw, tmpvar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}",433,16,"offsetASR:createAsR,offset:location,environment:edition,immediateNodeValue:immediateEdgeValue,index:x,tmpVar: tmpvar,baseOffset: baseAlias,isZeroCondition:isZerocondition,",673,29.26,ALERT
1501,,,15,1,,212,2.1501487572987900,0
1502,,,58,3,,486,4.8879167596499100,0
1503,"public JDialog displayPanelInWindow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
","public JDialog  showWindowInsideProject(final JPanel panel,String title){
  JDialog fab=new GenericJDialog();
  fab.setContentPane(panel);
  fab.pack();
  fab.setTitle(title);
  fab.setVisible(true);
  return fab;
}
",51,4,"frame:fab,displayPanelInWindow: showWindowInsideProject,",97,0.66,ALERT
1504,,,91,5,,891,13.683099242051400,0
1505,"public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
","public void st(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
",54,3,"put:st,",40,0.36,ALERT
1506,"private void checkIfDirectoriesExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);
}
","private void checkIfDirectoriesOccistent(File[] disk_pathies){
  DiskStoreFactoryImpl.checkIfDirectoriesOccistent(disk_pathies);
}
",18,2,"checkIfDirectoriesExist:checkIfDirectoriesOccistent,disk_dirs:disk_pathies,",106,1.3,ALERT
1507,,,194,8,,1524,17.95616697470350,0
1508,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  Calendar dateTime=new GregorianCalendar(GMT);
  long localTime=value;
  if (tzShift != null) {
    localTime+=tzShift.longValue() * 60000;
  }
  dateTime.setTimeInMillis(localTime);
  try {
    appendInt(sb,dateTime.get(Calendar.YEAR),4);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      sb.append('T');
      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.MINUTE),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.SECOND),2);
      if (dateTime.isSet(Calendar.MILLISECOND)) {
        sb.append('.');
        appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        sb.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          sb.append('+');
        }
 else {
          sb.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(sb,tzHours,2);
        sb.append(':');
        appendInt(sb,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return sb.toString();
}","@Override public String TOFile(){
  StringBuilder stab=new StringBuilder();
  Calendar wakeBlock=new GregorianCalendar(GMT);
  long localTime=value;
  if (tzShift != null) {
    localTime+=tzShift.longValue() * 60000;
  }
  wakeBlock.setTimeInMillis(localTime);
  try {
    appendInt(stab,wakeBlock.get(Calendar.YEAR),4);
    stab.append('-');
    appendInt(stab,wakeBlock.get(Calendar.MONTH) + 1,2);
    stab.append('-');
    appendInt(stab,wakeBlock.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      stab.append('T');
      appendInt(stab,wakeBlock.get(Calendar.HOUR_OF_DAY),2);
      stab.append(':');
      appendInt(stab,wakeBlock.get(Calendar.MINUTE),2);
      stab.append(':');
      appendInt(stab,wakeBlock.get(Calendar.SECOND),2);
      if (wakeBlock.isSet(Calendar.MILLISECOND)) {
        stab.append('.');
        appendInt(stab,wakeBlock.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        stab.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          stab.append('+');
        }
 else {
          stab.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(stab,tzHours,2);
        stab.append(':');
        appendInt(stab,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return stab.TOFile();
}",364,7,"toString:TOFile,sb:stab,dateTime:wakeBlock,",124,1.12,ALERT
1509,"public static boolean p2pLoader(ClassLoader ldr){
  return ldr instanceof GridDeploymentInfo;
}","public static boolean p2poLoad(ClassLoader adR){
  return adR instanceof GridDeploymentInfo;
}",15,2,"p2pLoader:p2poLoad,ldr:adR,",270,3.43,ALERT
1510,,,31,3,,617,5.529318551222480,0
1511,"protected void acceptDrop(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropOperation);
  }
}
","protected void AcceptClose(int changePosition){
  DropTargetContextPeer channel=getDropTargetContextPeer();
  if (channel != null) {
    pechannelcceptClose(changePosition);
  }
}
",31,3,"acceptDrop:AcceptClose,dropOperation:changePosition,peer:channel,",142,0.91,ALERT
1512,"private int readSourceToLog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}","private int readSourceToLog(Settings settings){
  String sourceTolog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceTolog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceTolog,true) ? Integer.MAX_VALUE : 0;
  }
}",57,3,"sourceToLog:sourceTolog,",38,0.45,ALERT
1513,"public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
","public static Document writeHTML(InputStream out) throws ParserConfigurationException, SAXWarning, Securityception {
  DocumentBuilderFactory ode=DocumentBuilderFactory.newInstance();
  ode.setValidating(false);
  ode.setIgnoringComments(false);
  ode.setIgnoringElementContentWhitespace(true);
  ode.setNamespaceAware(true);
  ode.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  ode.setFeature(DISALLOW_DOCTYPE_DECL,true);
  ode.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  ode.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  ode.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder b=null;
  b=ode.newDocumentBuilder();
  b.setEntityResolver(new NullResolver());
  b.setErrorHandler(new SamlParserErrorHandler());
  return dbparse(out);
}
",141,6,"createDOM:writeHTML,is:out,SAXException:SAXWarning,IOException:Securityception,dbf:ode,db:b,",740,6.5,ALERT
1514,"protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){
  double sumErr=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=data.size();
  for (int i=0; i < n; i++) {
    double error=model.get(i) - data.get(i).value;
    sumErr+=error;
    sumAbsErr+=Math.abs(error);
    sumAbsPercentErr+=Math.abs(error / data.get(i).value);
    sumErrSquared+=error * error;
    processedPoints++;
  }
  this.bias=sumErr / processedPoints;
  this.mad=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}","protected void initForecastErs(ArrayList<Float> feature,TimeSeries.DataSequence group){
  double sumArrr=0.0;
  double sumAbsArrs=0.0;
  double sumAbsPercentPhar=0.0;
  double sumErrSquared=0.0;
  int processedInPoints=0;
  int nqgroup.size();
  for (int part=0; part < q; part++) {
    double error=feachangeget(ipart - group.get(part).value;
    sumArrr+=change;
    sumAbsArrs+=Math.abs(change);
    ssumAbsPercentPhar=Math.abs(errochangeroup.get(part).value);
    sumErrSquared+=change * change;
    processedInPoints++;
  }
  this.biakphamArrr / processedInPoints;
  this.madmdmAbsArrs / processedInPoints;
  this.mapmssmAbsPercentPhar / processedInPoints;
  this.mscmkeumErrSquared / processedInPoints;
  this.spsaisumAbsArrs;
  errorsInit=true;
}",168,16,"initForecastErrors:initForecastErs,model:feature,data:group,sumErr:sumArrr,sumAbsErr:sumAbsArrs,sumAbsPercentErr:sumAbsPercentPhar,processedPoints:processedInPoints,n:q,i:part,error:change,bias:kpha,mad:md,mape:mss,mse:cmke,sae:psai,",1185,9.66,ALERT
1515,,,304,12,,2022,109.38092580636300,0
1516,,,27,2,,427,3.2903396209081000,0
1517,,,12,1,,231,2.194786083698270,0
1518,,,21,1,,238,2.330334957440690,0
1519,,,41,3,,585,4.1321058233579,0
1520,,,37,4,,692,19.114027134577400,0
1521,"public SpecificationRunnerBuilder sections(String[] paramSections){
  Collections.addAll(this.sections,paramSections);
  return this;
}
","public SpecificationRunnerBuilder scripts(String[] paramNamessectments){
  Collections.addAll(this.scripts,paramNamessectments);
  return this;
}
",25,2,"paramSections:paramNamessectments,sections:scripts,",66,0.54,ALERT
1522,,,58,3,,628,9.083467288812,0
1523,,,95,3,,540,7.01945921977361,0
1524,"public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}
","public void join(final T service){
synchronized (mLock) {
    mList.join(service);
  }
  notifyDataSetChanged();
}
",27,2,"add:join,object:service,",66,0.51,ALERT
1525,,,46,3,,577,5.547098843256630,0
1526,,,189,4,,820,8.472555780410770,0
1527,"public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
","public static <Sync>Sync syncRest(final Iterator<? extends Object> iterator,final Callable<Sync> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
",66,2,"E:Sync,",36,0.28,ALERT
1528,,,1225,18,,2734,19.40807753801350,0
1529,"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}","private String inputWhile(char[] delimer,boolean ReturnString) throws IOException, XmlPullParserException {
  int order=string;
  StringBuilder output=null;
  if (ReturnString && text != null) {
    output=new StringBuilder();
    output.append(text);
  }
  search:   while (true) {
    ifstringon + delimer.length > limit) {
      if (storder postring& ReturnString) {
        if (output == null) {
          output=new StringBuilder();
        }
        output.append(buffer,order,string - order);
      }
      if (!fillBuffer(delimer.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        t=COMMENT;
        return null;
      }
      order=string;
    }
    for (inti i=0ti i < delimer.length; ti++) {
      if (buffestringon ti i] != delimer[ti]) {
        string++;
        continue search;
      }
    }
    break;
  }
  inennd=string;
stringon+=delimer.length;
  if (!ReturnString) {
    return null;
  }
 else   if (output == null) {
    return stringPool.get(buffer,order,en - order);
  }
 else {
    output.append(buffer,order,en - order);
    return output.toString();
  }
}",247,9,"readUntil:inputWhile,delimiter:delimer,returnText:ReturnString,start:order,result:output,position:string,type:t,i:ti,end:en,",650,6.43,ALERT
1530,,,95,4,,729,6.659756735960640,0
1531,,,114,7,,1105,10.350939627488500,0
1532,,,12,1,,231,2.0362944920857700,0
1533,,,49,4,,819,6.137104284763340,0
1534,"public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}","public static GridField[] getFields(Properties Prop,int FlowNumber,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(Prop);
  PreparedStatement pestmk=null;
  try {
    pestmk=DB.prepareStatement(sql,null);
    pestmk.setInt(1,AD_Tab_ID);
    ResultSet rs=pestmk.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(Prop,FlowNumber,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pestmk.close();
    pestmk=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pestmk != null)     pestmk.close();
    pestmk=null;
  }
 catch (  Exception e) {
    pestmk=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}",252,14,"pstmt:pestmk,ctx:Prop,WindowNo:FlowNumber,createFields:getFields,",415,2.73,ALERT
1535,"public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}
","public Subscription register(Object mBean,MBeanDescription service){
  return register(mBean,service.getMBeanName(getNextId()));
}
",27,3,"description:service,",38,0.36,ALERT
1536,"public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}
","public boolean createCharistics(String image,String skillUUD,String characteristicUUID,byte[] attribute){
  BluetoothGatbluetoothGatttt=mBluetoothGattMap.get(image);
  if (bluetoothGatt != null) {
    BluetoothGattServiserviceibluetoothGattatt.getService(UUID.fromString(skillUUD));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    charcharacteristicValue(attribute);
    retubluetoothGattatt.createCharistics(characteristic);
  }
  return false;
}
",86,8,"writeCharacteristic:createCharistics,address:image,serviceUUID:skillUUD,value:attribute,",355,3.85,ALERT
1537,"void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
","void sendElement(BufferedWriter master,String error) throws IOException {
  master.write(error);
  master.newLine();
}
",26,3,"writeLine:sendElement,writer:master,line:error,",131,0.91,ALERT
1538,"public static Colour attemptToGetAsColour(String part){
  Colour col=null;
  try {
    col=Colour.valueOf(part.toUpperCase());
  }
 catch (  Exception e) {
  }
  return col;
}
","public static Colour attemptToGetasCOUR(String pattern){
  Colour coll=null;
  try {
    colcolllour.valueOf(pattern.toUpperCase());
  }
 catch (  Exception e) {
  }
  return coll;
}
",41,3,"attemptToGetAsColour:attemptToGetasCOUR,part:pattern,col:coll,",149,1.71,ALERT
1539,,,49,3,,619,5.618293937047320,0
1540,"public ListenableFuture<String> push(final String name,final Expression func){
  String let=String.format(""let %s = %s"",name,func.toHaskell());
  return pullRaw(let);
}
","public ListenableFuture<String> pull(final String data,final Expression attr){
  String set=String.format(""let %s = %s"",data,attr.toHaskell());
  return pullRaw(set);
}
",41,4,"push:pull,name:data,func:attr,let:set,",216,1.61,ALERT
1541,"private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceSymbols=false;
  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {
    char c=text.charAt(i);
switch (c) {
case '\\t':
{
        hasTabs=true;
        if (hasNonSpaceSymbols) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceSymbols=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
}
","private int calculatePreferredTrapeLocation(@NotNull Editor vert,@NotNull CharSequence txt,int tabLength,int sectionsize,int startFileOff,int endedLineEnd,int targetRangeStartSize){
  boolean  hasBubs=false;
  boolean CanOptize=true;
  boolean hasNonSpacePolymbics=false;
  loop:   for (zint i=startFileOff;zii < Math.min(endedLineEnd,targetRangeStartSize); zi++) {
    char xc=txt.charAt(zi);
switch (xc) {
case '\\t':
{
         hasBubs=true;
        if (hasNonSpacePolymbics) {
          CanOptize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpacePolymbics=true;
}
}
if (! hasBubs) {
return wrapPositionForTextWithoutTabs(startFileOff,endedLineEnd,targetRangeStartSize);
}
 else if (CanOptize) {
return wrapPositionForTabbedTextWithOptimization(txt,tabLength,startFileOff,endedLineEnd,targetRangeStartSize);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(vert,txt,sectionsize,startFileOff,endedLineEnd,targetRangeStartSize);
}
}
",177,13,"calculatePreferredWrapPosition:calculatePreferredTrapeLocation,editor:vert,text:txt,tabSize:tabLength,spaceSize:sectionsize,startLineOffset:startFileOff,endLineOffset:endedLineEnd,targetRangeEndOffset:targetRangeStartSize,i:zi,c:xc,hasNonSpaceSymbols:hasNonSpacePolymbics,hasTabs: hasBubs,canOptimize:CanOptize,",1307,24.18,ALERT
1542,,,35,4,,619,6.477221234639490,0
1543,"@Override public Result doComparisonTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
","@Override public Result doComparatibilityTest(final Properties utils) throws Exception {
  final maxmeout=Long.parseLong(utils.getProperty(TestOptions.TIMEOUT));
  finalnbresourcesurces=Integer.parseInt(utils.getProperty(TestOptions.NRESOURCES));
  finalMinlocksLocks=Integer.parseInt(utils.getProperty(TestOptions.MIN_LOCKS));
  finalmaxLocksLocks=Integer.parseInt(utils.getProperty(TestOptions.MAX_LOCKS));
  finalncrieALSrials=Integer.parseInt(utils.getProperty(TestOptions.NTRIALS));
  finalKeySizeeyLen=Integer.parseInt(utils.getProperty(TestOptions.KEYLEN));
  finalunnoops nops=Integer.parseInt(utils.getProperty(TestOptions.NOPS));
  final domiluredrateeRate=Double.parseDouble(utils.getProperty(TestOptions.FAILURE_RATE));
  Result redefaultoConcurrentClientTest(journal,max,nbresources,Minlocks,maxLocks,ncrieALS,KeySize,unnoops,miluredrate);
  return default;
}
",185,11,"doComparisonTest:doComparatibilityTest,properties:utils,timeout:max,nresources:nbresources,minLocks:Minlocks,ntrials:ncrieALS,keyLen:KeySize,nops:unnoops,failureRate:miluredrate,result:default,",914,8.48,ALERT
1544,"private Collection<String> readProcessOutput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
","private Collection<String> loadProcessStatus(Process project) throws IOException {
  BufferedReader rdrrrfw BufferedReader(new InputStreamReader(project.getInputStream()));
  Collection<String> changes=new ArrayList<>();
  String b;
  while ((s=rrb.readLine()) != null)   changes.add(b);
  return changes;
}
",71,5,"readProcessOutput:loadProcessStatus,proc:project,rdr:rrf,res:changes,s:b,",502,4.58,ALERT
1545,"private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
","private void coreTrackResult(Collection<Track> steps,SearchQuery query,Collection<ScoredResult> output){
  for (  Track field : steps) {
    double sc=scoreTrackResult(query,field);
    output.add(new ScoredResult(field,sc));
  }
}
",53,6,"scoreTrackResults:coreTrackResult,tracks:steps,track:field,score:sc,",127,1.05,ALERT
1546,,,47,5,,450,4.507079561551410,0
1547,,,112,4,,834,6.7900393088658700,0
1548,,,95,11,,1948,15.840947286287900,0
1549,,,17,2,,430,3.7961125493049600,0
1550,"public boolean remove(Object targetChild){
  return remove(targetChild,true);
}
","public boolean clear(Object Targetchild){
  return clear(Targetchild,true);
}
",17,2,"targetChild:Targetchild,remove:clear,",53,0.63,ALERT
1552,,,228,8,,1519,14.90277103583020,0
1553,"public SootMethodAndClass parseSootMethodString(String parseString){
  if (!parseString.startsWith(""<"") || !parseString.endsWith("">"")) {
    throw new IllegalArgumentException(""Illegal format of "" + parseString + "" (should use soot method representation)"");
  }
  String name="""";
  String className="""";
  String returnType="""";
  Pattern pattern=Pattern.compile(""<(.*?):"");
  Matcher matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    className=matcher.group(1);
  }
  pattern=Pattern.compile("": (.*?) "");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    returnType=matcher.group(1);
    parseString=parseString.substring(matcher.end(1));
  }
  pattern=Pattern.compile("" (.*?)\\\\("");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    name=matcher.group(1);
  }
  List<String> paramList=new ArrayList<String>();
  pattern=Pattern.compile(""\\\\((.*?)\\\\)"");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    String params=matcher.group(1);
    for (    String param : params.split("",""))     paramList.add(param.trim());
  }
  return new SootMethodAndClass(name,className,returnType,paramList);
}","public SootMethodAndClass parseSOTMethodStr(String parseString){
  if (!parseString.startsWith(""<"") || !parseString.endsWith("">"")) {
    throw new IllegalArgumentException(""Illegal format of "" + parseString + "" (should use soot method representation)"");
  }
  String name="""";
  String className="""";
  String returnType="""";
  Pattern pattern=Pattern.compile(""<(.*?):"");
  Matcher matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    className=matcher.group(1);
  }
  pattern=Pattern.compile("": (.*?) "");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    returnType=matcher.group(1);
    parseString=parseString.substring(matcher.end(1));
  }
  pattern=Pattern.compile("" (.*?)\\\\("");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    name=matcher.group(1);
  }
  List<String> paramList=new ArrayList<String>();
  pattern=Pattern.compile(""\\\\((.*?)\\\\)"");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    String params=matcher.group(1);
    for (    String param : params.split("",""))     paramList.add(param.trim());
  }
  return new SootMethodAndClass(name,className,returnType,paramList);
}",270,10,"parseSootMethodString:parseSOTMethodStr,",77,0.82,ALERT
1554,"@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
","@Override public void handleError(IMqttToken asyncActionToken,Throwable eventceptions){
  eventceptions.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + eventceptions.getMessage());
  onDisconnect(false);
}
",40,3,"exception:eventceptions,onFailure:handleError,",51,0.34,ALERT
1555,"private static String computeRegexString(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}","private static String computeReriNumber(String OriginalText,String newDefault,String oldname){
  StringBuildebufferer=new StringBuilder(OriginalText.length());
  String oldoldNameOrNewNameRegexring.format(""(%s)|(%s)"",Pattern.quote(newDefault),Pattern.quote(oldname));
  int imiOriginalText.indexOf(newDefault);
  if (mi >= 0) {
    int prevL=0;
    while (mi >= 0) {
    bufferer.append(Pattern.quote(OriginalText.substring(pprevLmi)));
      buffer.append(oldNameOrNewNameRegex);
      pprevLmi;
      i=OrmiginalText.indexOf(newDefault,i +minewDefault.length());
    }
   bufferr.append(Pattern.quote(OriginalText.substring(pprevLnewDefaultme.length(),OriginalText.length())));
  }
  return buffer.toString();
}",167,8,"computeRegexString:computeReriNumber,originalString:OriginalText,oldName:newDefault,newName:oldname,builder:buffer,oldNameOrNewNameRegEx:oldNameOrNewNameRegex,i:mi,prevI:prevL,",706,7.98,ALERT
1556,"@Override public Collection<SerialMessage> initialize(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {
    result.add(getSupportedMessage());
  }
  return result;
}","@Override public Collection<SerialMessage> serialization(boolean interresh){
  ArrayList<SerialMessage> order=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (interresh == true || initialiseDone == false) && getVersion() > 1) {
    order.add(getSupportedMessage());
  }
  return order;
}",64,3,"initialize:serialization,refresh:interresh,result:order,",106,0.93,ALERT
1557,"public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}
","public void detach(AppCompatActivity icon){
  attrViewMaps.remove(icon.hashCode());
}
",20,2,"activity:icon,",35,0.3,ALERT
1558,,,34,2,,307,3.655782612164820,0
1559,"public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}","public static String etode(byte[] seconds){
  int lelimeconds.length;
  final StringBuffer encoding=new StringBuffer((lim + 2) / 3 * 4);
  int isi=0;
  int qi=lim;
  while (qi >= 3) {
    encodeencodingd(to64((((seconds[i] &isi0xff) << 16) | (int)((seconds[i isi 1] & 0xff) << 8) | (int)(seconds[isi + 2] & 0xff)),4));
    isi+=3;
    qi-=3;
  }
  if (qi == 2) {
    encoencodingend(to64(((seconds[i]isi& 0xff) << 8) | ((seconds[isi + 1] & 0xff)),3));
  }
  if (qi == 1) {
    enencodingppend(to64(((seconds[isi] & 0xff)),2));
  }
  return encoding.toString();
}",200,6,"encode:etode,bytes:seconds,len:lim,encoded:encoding,i:isi,j:qi,",421,4.11,ALERT
1560,,,26,3,,454,5.25856100320816,0
1561,,,222,8,,1458,16.004291848341600,0
1562,,,101,5,,947,8.73710455497106,0
1563,,,175,7,,1189,11.433572256565100,0
1564,"@Override public void clearRouteSensors(){
  _controlSensorList=new ArrayList<>();
}
","@Override public void clearRouteSensors(){
  _controlControllerChain=new ArrayList<>();
}
",18,2,"_controlSensorList:_controlControllerChain,",27,0.2,ALERT
1565,,,14,1,,230,1.7267240722974100,0
1568,"public static String urlDecode(String str){
  try {
    return (URLDecoder.decode(str,""utf-8""));
  }
 catch (  Exception e) {
    return (""Decoding error"");
  }
}","public static String urlDecode(String sl){
  try {
    return (URLDecoder.decode(sl,""utf-8""));
  }
 catch (  Exception e) {
    return (""Decoding error"");
  }
}",37,2,"str:sl,",37,0.35,ALERT
1569,"public static Test suite() throws Exception {
  return suite(true);
}
","public static Test switt() throws Exception {
  return switt(true);
}
",16,1,"suite:switt,",31,0.2,ALERT
1570,,,21,2,,231,1.9934770782788600,0
1571,,,398,10,,1273,8.491803793112440,0
1572,"public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}","public static double variableancy(double[] e,double scale){
  double var=0;
  int count=e.length;
  for (  double aX : e) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - scale;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}",95,7,"x:e,mean:scale,variance:variableancy,",129,1.02,ALERT
1573,,,14,1,,252,1.7511465112368300,0
1574,"@Override public void write(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}","@Override public void  encode(char c[],int off,int on){
  if ((off < 0) || (off > c.length) || (on < 0)|| ((off + on) > c.length)|| ((off + on) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (on == 0) {
    return;
  }
  int newcount=count + on;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,on);
  count=newcount;
}",140,7,"write: encode,len:on,",88,0.77,ALERT
1575,,,57,4,,684,5.862634118398030,0
1576,"public PutRepositoryRequest source(byte[] repositoryDefinition){
  return source(repositoryDefinition,0,repositoryDefinition.length);
}","public PutRepositoryRequest pull(byte[] reposetData){
  return pull(reposetData,0,reposetData.length);
}",23,2,"repositoryDefinition:reposetData,source:pull,",67,0.57,ALERT
1577,"private String attachFooterToText(String content) throws MessagingException, IOException {
  StringBuilder builder=new StringBuilder(content);
  ensureTrailingCarriageReturn(content,builder);
  builder.append(getFooterText());
  return builder.toString();
}
","private String  appendFooterFromText(String buffer) throws MessagingException, IndexProblem {
  StringBuilderdriverr=new StringBuilder(buffer);
  ensureTrailingCarriageReturn(buffer,driver);
  driver.append(getFooterText());
  return driver.toString();
}
",45,4,"attachFooterToText: appendFooterFromText,content:buffer,IOException:IndexProblem,builder:driver,",495,4.51,ALERT
1578,"public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}","public static void  readfully(InputStream url,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=url.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}",73,7,"in:url,readFully: readfully,",72,0.89,ALERT
1579,,,110,7,,1236,9.005832588672640,0
1580,,,14,1,,247,1.7282548904418900,0
1581,"protected void parseDOMAttributes(Element element) throws SAML2Exception {
  requestId=element.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=element.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);
  consent=element.getAttribute(SAML2Constants.CONSENT);
}","protected void parseHTMLRelations(Element environment) throws SAML2Exception {
  requestId=environment.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=environment.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=environment.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=environment.getAttribute(SAML2Constants.DESTINATION);
  consent=environment.getAttribute(SAML2Constants.CONSENT);
}",82,7,"element:environment,parseDOMAttributes:parseHTMLRelations,",84,1.1,ALERT
1582,,,30,2,,247,1.980967124303180,0
1583,"public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
","public static String strifix(String p,String area,String suffix){
  if (p.startsWith(area) == false) {
    p=area + p;
  }
  if (p.endsWith(suffix) == false) {
    p+=suffix;
  }
  return p;
}
",55,4,"surround:strifix,prefix:area,string:p,",121,1.14,ALERT
1584,,,63,5,,751,4.720715832710270,0
1585,"private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
","private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACELC=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACELC=new CifsShareACL();
    shareACELC.setId(URIUtil.createId(CifsShareACL.class));
    shareACELC.setUser(origACL.getUser());
    shareACELC.setPermission(origACL.getPermission());
    shareACELC.setShareName(origACL.getShareName());
    shareACELC.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACELC);
    _logger.info(""share ACLs details {}"",shareACELC.toString());
  }
}
",120,6,"shareACL:shareACELC,",52,0.72,ALERT
1586,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}","@Override public void PaintsCom(Graphics g){
  super.PaintsCom(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}",78,4,"paintComponent:PaintsCom,",45,0.39,ALERT
1587,,,189,8,,1454,16.356582959493,0
1588,,,116,7,,1112,24.72339239915210,0
1589,,,42,2,,382,5.08529591957728,0
1590,"public void removeListener(final L listener){
  Validate.notNull(listener,""Listener object cannot be null."");
  listeners.remove(listener);
}
","public void removeAddress(final L laten){
  Validate.notNull(laten,""Listener object cannot be null."");
  listeners.remove(laten);
}
",26,2,"removeListener:removeAddress,listener:laten,",181,1.58,ALERT
1591,"public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
","public static String inter(char[] self,String paror){
  StringBuilder BB=new StringBuilder();
  boolean first=true;
  if (paror == null)   paror="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      BB.append(paror);
    }
    BB.append(next);
  }
  return BB.toString();
}
",81,6,"separator:paror,buffer:BB,join:inter,",194,3.14,ALERT
1592,,,124,8,,1572,29.062349347273500,0
1593,,,334,7,,1003,8.315488354365030,0
1594,,,46,3,,570,5.820023190975190,0
1595,,,27,2,,420,5.733444945017500,0
1596,"public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}","public SimpleString concat(final char C){
  byte[] groups=new byte[error.length + 2];
  System.arraycopy(error,0,groups,0,error.length);
  groups[error.length]=(byte)(C & 0xFF);
  groups[error.length + 1]=(byte)(C >> 8 & 0xFF);
  return new SimpleString(groups);
}",86,5,"c:C,bytes:groups,data:error,",110,1.3,ALERT
1597,,,20,2,,417,5.675442485014600,0
1598,"public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
","public <T>List<String> valididateBeans(T bean,String errIfBeanNull){
  List<String> xml=new ArrayList<String>();
  if (bean == null) {
    xml.add(errIfBeanNull);
    return xml;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    xml.add(violation.getMessage());
  }
  return xml;
}
",92,6,"validateBean:valididateBeans,errors:xml,",70,1.64,ALERT
1599,"private void addEntry(){
  model.addNewEntry();
  removeButton.setEnabled(false);
}
","private void  removeFile(){
  model.addNewEntry();
  removeButton.setEnabled(false);
}
",20,1,"addEntry: removeFile,",17,0.13,ALERT
1600,"private String applyReplacement(final BidiMap replacement,String contents){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}
","private String applyreplacements(final BidiMap replacement,String conties){
  for (  Object version : replacement.keySet()) {
    String attributeName=(String)version;
    String attributeFinali=(String)replacement.get(version);
    conties=conties.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeFinali));
  }
  return conties;
}
",71,6,"applyReplacement:applyreplacements,key:version,attributeInitials:attributeFinali,contents:conties,",148,1.96,ALERT
1601,"private void addFlags(int newflags){
  flags=getLayoutFlags() | newflags;
}
","private void getAttributes(int newfields){
  plugins=getLayoutFlags() | newfields;
}
",17,3,"flags:plugins,addFlags:getAttributes,newflags:newfields,",67,0.73,ALERT
1602,,,42,3,,630,5.8823450922966000,0
1603,"private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}","private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceAbsencer <= stopBeforeLocus.getSequenceIndex() && lastReferenceAbsencer <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceAbsencer == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceAbsencer,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceAbsencer == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceAbsencer++;
      lastPosition=0;
    }
 else     if (lastReferenceAbsencer < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceAbsencer),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}",163,5,"lastReferenceSequence:lastReferenceAbsencer,",61,1.14,ALERT
1604,,,407,15,,2359,21.263594810167900,0
1605,,,92,4,,813,9.085561033089960,0
1606,"private Instance votedReclassifyExample(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}","private Instance votedRecodifyExperience(Instance example) throws Exception {
  int constVotes[]=new int[getNumClasses()];
  for (int uri=0; uri < constVotes.length; uri++) {
    constVotes[uri]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      constVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int uri=0; uri < constVotes.length; uri++) {
    if (constVotes[uri] > maxVote) {
      maxVote=constVotes[uri];
      vote=uri;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}",190,9,"votedReclassifyExample:votedRecodifyExperience,classVotes:constVotes,i:uri,",122,1.08,ALERT
1607,,,67,5,,927,20.18969083627070,0
1608,,,35,3,,607,9.451731427510580,0
1609,"protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}","protected void handleMesosaFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}",102,6,"handleMesosFailure:handleMesosaFailure,",42,0.71,ALERT
1610,"public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
","public static String makeRelatedClientId(String encryptedURL,SessionID  prototypes) throws SessionException {
   prototypes.parseSessionString();
  return makeSessionID(encryptedURL, prototypes.getExtension(), prototypes.tail);
}
",37,3,"makeRelatedSessionID:makeRelatedClientId,encryptedID:encryptedURL,prototype: prototypes,",228,2.88,ALERT
1611,"private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(oValue);
  md5.update((byte)(pValue & 0xFF));
  md5.update((byte)((pValue >> 8) & 0xFF));
  md5.update((byte)((pValue >> 16) & 0xFF));
  md5.update((byte)(pValue >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}","private byte[] calculateGeneralEncryptedKey(byte[] userPassword,byte[] firstDocKeyFile,int keyByteCount,int rojection,byte[] oText,int oVal,boolean enclectMetmetadata) throws GeneralSecurityException {
  final byte[] paddingPassword=padPassword(userPassword);
  MessageDigest cmd20=createMD5Digest();
  cmd20.reset();
  mcmd20update(paddingPassword);
 cmd205.update(oText);
cmd20d5.update((byte)(oVal & 0xFF));
cmd20d5.update((byte)((oVal >> 8) & 0xFF));
cmd20d5.update((byte)((oVal >> 16) & 0xFF));
cmd20d5.update((byte)(oVal >> 24));
  if (firstDocKeyFile != null) {
    cmd20.update(firstDocKeyFile);
  }
  if (rojection >= 4 && !enclectMetmetadata) {
    for (int ui=0; ui < 4; ++ui) {
      cmd20.update((byte)0xFF);
    }
  }
  byte[] haupdatemd20.digest();
  final int kkeylenrojection == 2 ? 5 : (keyByteCount / 8);
  final byte[] group=new byte[keylen];
  if (rojection >= 3) {
    for (int ui=0; ui < 50; ++ui) {
      cmd20.update(update,0,group.length);
      digestTo(cmd20,update);
    }
  }
  System.arraycopy(update,0,group,0,group.length);
  return group;
}",297,14,"calculateGeneralEncryptionKey:calculateGeneralEncryptedKey,firstDocIdValue:firstDocKeyFile,keyBitLength:keyByteCount,revision:rojection,oValue:oText,pValue:oVal,encryptMetadata:enclectMetmetadata,paddedPassword:paddingPassword,md5:cmd20,i:ui,hash:update,keyLen:keylen,key:group,",690,8.98,ALERT
1612,,,82,6,,930,20.142193893591600,0
1613,,,57,4,,777,11.417873585224200,0
1614,"public void beforeInsert(int index,char element){
  if (index > size || index < 0)   throw new IndexOutOfBoundsException(""Index: "" + index + "", Size: ""+ size);
  ensureCapacity(size + 1);
  System.arraycopy(elements,index,elements,index + 1,size - index);
  elements[index]=element;
  size++;
}","public void  beforeAdd(int pointer,char instance){
  if (pointer > sizefeepointer < 0)   throw new IndexOutOfBoundsException(""Index: "" + pointer + "", Size: ""+ fee);
  ensureCapacity(fee + 1);
  System.arraycopy(elemen eortser,elem eortsnter + 1,sifee pointer);
  ele eortsinter]=instance;
  fee++;
}",71,5,"beforeInsert: beforeAdd,index:pointer,element:instance,elements: eorts,size:fee,",346,6.46,ALERT
1615,,,16,2,,395,3.5608081459999100,0
1616,,,19,1,,222,1.6875664710998500,0
1617,"public static String toTypeString(Object[] arguments,int maxSize){
  if (arguments == null) {
    return ""null"";
  }
  StringBuilder argBuf=new StringBuilder();
  for (int i=0; i < arguments.length; i++) {
    if (maxSize != -1 && argBuf.length() > maxSize) {
      argBuf.append(""..."");
      break;
    }
 else {
      if (i > 0) {
        argBuf.append("", "");
      }
      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : ""null"");
    }
  }
  return argBuf.toString();
}","public static String  toObjectBuffer(Object[]  argls,int maxLength){
  if ( argls == null) {
    return ""null"";
  }
  StringBuilder varBuffuf=new StringBuilder();
  for (imt i=m; i <  argls.length; m++) {
    if (maxLength != -1 && arvarBuffufength() > maxLength) {
      varBuffuf.append(""..."");
      break;
    }
 else {
      if (m > 0) {
        varBuffuf.append("", "");
      }
varBuffufargBuf.append( argms[i] != null ? typeName( argls[m]) : ""null"");
    }
  }
  return varBuffuf.toString();
}",125,5,"toTypeString: toObjectBuffer,arguments: argls,maxSize:maxLength,argBuf:varBuffuf,i:m,",665,12.59,ALERT
1618,,,66,5,,958,11.854318996270500,0
1619,,,24,1,,231,2.573258086045580,0
1620,,,168,8,,1448,14.011360232035300,0
1621,"public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}","public void register(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.register();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}",65,1,"close:register,",34,0.33,ALERT
1622,,,36,2,,424,3.4903340617815700,0
1623,"public void addToBeLoaded(final String url){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(url)) {
    toBeLoaded.add(url);
  }
}
","public void addToBeLoadd(final String f){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(f)) {
    toBeLoaded.add(f);
  }
}
",46,3,"url:f,addToBeLoaded:addToBeLoadd,",62,0.76,ALERT
1624,,,14,1,,234,2.818991553783420,0
1625,,,245,12,,2271,32.042105142275500,0
1626,"public void handleText(String text){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= text.length()) {
      skippingCharacters-=text.length();
      return;
    }
 else {
      text=text.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleText(text);
    return;
  }
  warning(""Text with no destination. oops."");
}","public void handleString(String source){
  if (kiningThings > 0) {
    if (kiningThings >= source.length()) {
      kiningThings-=source.length();
      return;
    }
 else {
      source=source.substring(kiningThings);
      kiningThings=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleString(source);
    return;
  }
  warning(""Text with no destination. oops."");
}",77,3,"text:source,skippingCharacters:kiningThings,handleText:handleString,",93,0.65,ALERT
1627,,,21,2,,364,3.6690142591794300,0
1628,,,103,3,,590,6.248467473189040,0
1629,,,96,5,,1027,9.729857023557030,0
1631,"public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}","public int  serverImport(Object document,Object container,int deliveryCount) throws Exception {
  ProtonServerSenderContext pprotonCorterserverSenders.get(container);
  if (protonCorter != null) {
    return pprotonCorterdeliverMessage(document,deliveryCount);
  }
  return 0;
}",48,5,"serverDelivery: serverImport,message:document,consumer:container,protonSender:protonCorter,",174,1.38,ALERT
1632,,,112,7,,1336,8.408627613385520,0
1633,"@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}","@Override public void makeMovable(){
  if (isMutable) {
    if (authnstatutions != null) {
      int style=authnstatutions.size();
      for (intii=0;ii < style; i++) {
        AuthnStatement uthz=(AuthnStatement)authnstatutions.get(i);
      uthzhn.makeMovable();
      }
      authnstatutions=Collections.unmodifiableList(authnstatutions);
    }
    if (authzDecisionExecements != null) {
      int style=authzDecisionExecements.size();
      for (intii=0;ii < style; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionExecements.get(i);
      authzhz.makeMovable();
      }
      authzDecisionExecements=Collections.unmodifiableList(authzDecisionExecements);
    }
    if (attributeStatagements != null) {
      int style=attributeStatagements.size();
      for (intii=0;ii < style; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatagements.get(i);
      attrtr.makeMovable();
      }
      attributeStatagements=Collections.unmodifiableList(attributeStatagements);
    }
    if (statences != null) {
      statences=Collections.unmodifiableList(statences);
    }
    if (conditions != null) {
      conditions.makeMovable();
    }
    if (issuer != null) {
      issuer.makeMovable();
    }
    if (subject != null) {
      subject.makeMovable();
    }
    if (advice != null) {
      advice.makeMovable();
    }
    isMutable=false;
  }
}",275,10,"makeImmutable:makeMovable,length:style,authn:uthz,authnStatements:authnstatutions,authzDecisionStatements:authzDecisionExecements,attributeStatements:attributeStatagements,statements:statences,",466,3.71,ALERT
1634,"public void saveIndexes(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}","public void saveVersionFiles(){
  ArrayList  toGet=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)        toGet.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length= toGet.size(); i < length; i++) {
    Index index=(Index) toGet.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}",262,10,"toSave: toGet,saveIndexes:saveVersionFiles,",176,1.49,ALERT
1635,"protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","protected void produlisher() throws MqttException, IOException {
  sampleCodConsumer=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleCodConsumer != null) {
    String topic=""Sample/Java/v3"";
    int qoS=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleCodConsumer.produlisher(topic,qoS,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",83,6,"sampleClientPub:sampleCodConsumer,qos:qoS,publish:produlisher,",136,1.3,ALERT
1636,"public static byte[] select(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return select(cardletAid);
}
","public static byte[] select(String appId,String infish){
  String cardletAid=FIDESMO_AID_PREFIX + appId + infish;
  return select(cardletAid);
}
",30,4,"suffix:infish,",37,0.28,ALERT
1637,,,19,1,,187,1.3109941283861800,0
1638,"private void fieldGoalAtt(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}","private void gameGoalFeed(Team failense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + failense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + failense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + failense.abbr + "" K ""+ failense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    failense.getK(0).statsFGMade++;
    failense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(failense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + failense.abbr + "" K ""+ failense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    failense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}",329,20,"offense:failense,fieldGoalAtt:gameGoalFeed,",106,1.58,ALERT
1639,"@After public void clean(){
  mute(null);
  mute(null);
  mute(null);
}
","@After public void done(){
  mute(null);
  mute(null);
  mute(null);
}
",24,1,"clean:done,",31,0.39,ALERT
1640,,,53,2,,300,8.004578777154290,0
1641,"protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}","protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSingleshots(Map<String,BlobMetaData> blobs){
  int local=-1;
  for (  String default : blobs.keySet()) {
    if (default.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gensizeteger.parseInt(default.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if sizen > local) {
          local=size;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",default);
      }
    }
  }
  if (local >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(local)),local);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + local);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String default : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot  snaplane=null;
      if (default.startsWith(SNAPSHOT_PREFIX)) {
        sna snaplanedexShardSnapshotFormat.readBlob(blobContainer,default);
      }
 else       if (default.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        sna snaplanedexShardSnapshotLegacyFormat.readBlob(blobContainer,default);
      }
      if ( snaplane != null) {
        snapshots.add(new SnapshotFiles( snaplane. snaplane(), snaplane.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,default);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}",295,7,"buildBlobStoreIndexShardSnapshots:buildBlobStoreIndexShardSingleshots,latest:local,name:default,gen:size,snapshot: snaplane,",384,3.68,ALERT
1642,"public void addPolicyListener(PolicyListener policyListener){
  policyCache.addPolicyListener(policyListener);
}
","public void addServiceHandler(PolicyListener cookieListener){
  policyCache.addServiceHandler(cookieListener);
}
",16,2,"addPolicyListener:addServiceHandler,policyListener:cookieListener,",80,0.53,ALERT
1643,,,19,2,,280,3.236428173383080,0
1644,,,111,4,,655,16.28207999865210,0
1645,,,78,4,,691,9.661308693885800,0
1646,,,124,4,,682,5.796325918038690,0
1647,"public boolean remove(String word){
  return m_Words.remove(word);
}
","public boolean write(String letter){
  return m_Words.write(letter);
}
",17,2,"word:letter,remove:write,",66,0.46,ALERT
1648,,,21,2,,369,2.9124727646509800,0
1649,"public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public TermsAckParser report() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.report(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:report,",42,0.26,ALERT
1650,,,26,2,,343,2.540117065111800,0
1651,"public void sleepMillis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
","public void sleepMilis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
",37,2,"sleepMillis:sleepMilis,",27,0.2,ALERT
1652,"public static String removeFormatting(String line){
  int length=line.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=line.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}","public static String removeFormatting(String connection){
  int length=connection.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char zh=connection.charAt(i);
    if (zh != '\\u000f' && zh != '\\u0002' && zh != '\\u001f' && zh != '\\u0016')     buffer.append(zh);
  }
  return buffer.toString();
}",85,6,"line:connection,ch:zh,",172,1.01,ALERT
1653,"private void updateStatus(String relayState,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relayState);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relayState,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relayState,new Integer(currentStatus));
}
}
","private void replaceStats(String playState,int recentStats){
  Integercpp=(Integer)currentStatusMap.get(playState);
  if (cp != null) {
    intpreviouslyCodes=cp.intValue();
switch (previouslyCode) {
case LOGOUT_SUCCEEDED_STATUS:
      if (recentStats > previouslyCode) {
        currentStatusMap.put(playState,new Integer(recentStats));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (recentStats < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(playState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(playState,new Integer(recentStats));
}
}
",120,5,"updateStatus:replaceStats,relayState:playState,currentStatus:recentStats,tmp:cp,previousStatus:previouslyCode,",296,2.57,ALERT
1654,,,63,3,,392,4.3012183229128500,0
1655,,,408,3,,511,6.482676148414610,0
1658,,,19,2,,275,2.0653987805048600,0
1659,"@Override public void visitVertex(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}","@Override public void visitVertex(StreetRouter.State region){
  Integer edgeIdx=region.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature browser=new GeoJsonFeature(edge.getGeometry());
    browser.addProperty(""weight"",region.weight);
    browser.addProperty(""mode"",region.streetMode);
    browser.addProperty(""backEdge"",region.backEdge);
    features.add(browser);
  }
}",101,5,"feature:browser,state:region,",79,0.51,ALERT
1660,,,66,4,,791,11.855659822622900,0
1661,,,109,6,,1129,10.677272613843300,0
1663,"public void substituteHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}","public void substituteHttp(int year,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + year + "", header=""+ header);
  }
  if (year > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(year)});
  }
  Callback[]EXTt=getCallback(year);
  if (EXT.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallbackbpc=(PagePropertiesCallback)((Callback[])internal.get(year - 1))[0];
    bp.setHeader(header);
  }
}",149,5,"substituteHeader:substituteHttp,state:year,ext:EXT,pc:bp,",277,2.25,ALERT
1664,,,52,6,,1123,21.746239789327000,0
1665,,,41,3,,630,5.129067063331600,0
1666,,,16,1,,244,2.435900318622590,0
1667,"protected void clearAllTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}
","protected void clearAllTil(SSOTokenID resourceInfo){
  boolean recovable=false;
  String key=rtokenurceInfo.toString();
synchronized (mapTokenIDs) {
    rerecovablemapTokenIDs.remove(token) != null);
  }
}
",42,4,"clearAllTrails:clearAllTil,tokenID:resourceInfo,key:token,removed:recovable,",175,1.56,ALERT
1668,,,30,1,,217,1.9642174561818400,0
1669,"public void initTKF91(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int i=0; i < iNumNodes; i++) {
    if (i == iNumNodes - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}","public void initTKI89(){
  int iNumEnode=iParent.length;
  double piBlue[]=new double[iNumEnode];
  piBB=new double[iNumEnode];
  siP=new double[iNumEnode];
  piJ=new double[iNumEnode];
  iNa=new double[iNumEnode];
   iMax=1.0;
  for (int mu=0; mu < iNumEnode; mu++) {
    if (mu == iNumEnode - 1) {
      piBlue[mu]=1.0 / iMu;
      piJ[mu]=0.0;
    }
 else {
      piBlue[mu]=Math.exp((iLambda - iMu) * iTau[mu]);
      piBlue[i]mu(1.0 - piBlue[imu) / (iMu - iLambda * piBlue[mu]);
      ipiJimu=Math.exp(-iMu * iTau[imu) * (1.0 - iLambda * piBlue[mu]);
    }
    ipiBBimu=iLambda * piBlue[mu];
    isiPimu=iMu * piBlue[mu];
    iN[iiNa(mu.0 - iMu * piBlue[i])mu* (1.0 - piBB[imu) - piJ[mu];
    iI iMax(1.0 - piBB[mu]);
  }
}",246,9,"initTKF91:initTKI89,iNumNodes:iNumEnode,iBeta:piBlue,iB:piBB,iE:siP,iH:piJ,iN:iNa,iInitial: iMax,i:mu,",1238,11.68,ALERT
1670,"private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
","private boolean  renderResponse(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
",209,7,"renderOutput: renderResponse,",72,0.67,ALERT
1671,"public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}
","public java.util.Collection<ObjectReference> dumpHostRoles(int  namespace){
  return Collections.emptyList();
}
",23,2,"width: namespace,dumpThreadRoots:dumpHostRoles,",55,0.52,ALERT
1672,,,127,4,,717,7.510411179065700,0
1673,,,22,2,,247,3.07720441420873,0
1674,,,71,3,,643,6.009278913338980,0
1675,,,25,2,,351,4.0681951403617900,0
1676,"public static String decodeCharset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}","public static String decodeChARSets(String src,String carspace){
  if (src == null) {
    return null;
  }
  try {
    byte bubr=src.getBytes(ASCII_CHARSET);
    return (new String(bbr0,bbrlength,carspace));
  }
 catch (  UnsupportedEncodingException uee) {
    return src;
  }
}",66,4,"decodeCharset:decodeChARSets,s:src,charset:carspace,buf:br,",624,8.25,ALERT
1678,"public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
","public List<JCAnnotation> transformGenerations(OutputElement builder,Tree.Declaration terminoded){
  EnumSet<OutputElement> outputves;
  if (terminoded instanceof Tree.AnyClass) {
    ooutputvesAnnotationUtil.ooutputves(Tree.AnyClass)terminoded);
  }
 else   if (terminoded instanceof Tree.AnyInterface) {
    ooutputvesAnnotationUtil.ooutputves(Tree.AnyInterface)terminoded);
  }
 else   if (terminoded instanceof Tree.TypeAliasDeclaration) {
    ooutputvesAnnotationUtil.ooutputves(Tree.TypeAliasDeclaration)terminoded);
  }
 else   if (terminoded instanceof Tree.Constructor) {
    ooutputvesAnnotationUtil.ooutputves(Tree.Constructor)terminoded);
  }
 else   if (terminoded instanceof Tree.Enumerated) {
    ooutputvesAnnotationUtil.ooutputves(Tree.Enumerated)terminoded);
  }
 else   if (terminoded instanceof Tree.AnyMethod) {
    ooutputvesAnnotationUtil.ooutputves(Tree.AnyMethod)terminoded);
  }
 else   if (terminoded instanceof Tree.AttributeDeclaration) {
    ooutputvesAnnotationUtil.ooutputves(Tree.AttributeDeclaration)terminoded);
  }
 else   if (terminoded instanceof Tree.AttributeGetterDefinition) {
    ooutputvesAnnotationUtil.ooutputves(Tree.AttributeGetterDefinition)terminoded);
  }
 else   if (terminoded instanceof Tree.AttributeSetterDefinition) {
    ooutputvesAnnotationUtil.ooutputves(Tree.AttributeSetterDefinition)terminoded);
  }
 else   if (terminoded instanceof Tree.ObjectDefinition) {
    ooutputvesAnnotationUtil.ooutputves(Tree.ObjectDefinition)terminoded);
  }
 else {
    throw BugException.unhandledNodeCase(terminoded);
  }
  return transform(aterminodedgetDeclarationModel(),builder,terminoded.getAnnotationList(),outputves);
}
",303,4,"transformAnnotations:transformGenerations,target:builder,annotated:terminoded,outputs:outputves,",552,3.88,ALERT
1680,,,48,3,,624,8.033731365203860,0
1681,"public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageFactor <= 0 || coverageFactor > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coverageFactor);
  }
  m_coverageFactor=coverageFactor;
}","public IntervalImpl(int microNUM,long startIntervalsDayLength,double COverageFat,FramingFlowType intervalDeliverytype,ISource username,IIntervalClassification intermediateSpecification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalsDayLength < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",microNUM,startIntervalsDayLength,COverageFat,intervalDeliverytype,username,intermediateSpecification,adeVersion));
  }
  m_m_startInterValOffsettartIntervalsDayLength;
  m_frm_framingFlowTypeervalDeliverytype;
 m_serialNumm=microNUM;
  m_im_intervalsClassificationtermediateSpecification;
  if (m_intervalsClassification == null) {
    m_intervalsClassification=IntervalClassificationEnum.REGULAR;
  }
  m_msgSummaryList=new TreeMap<Integer,IMessageSummary>();
  m_m_endArlineDuration_startInterValOffset + m_framingFlowType.getDuration();
  m_m__SOURCEsername;
  if (COverageFat <= 0 || COverageFat > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + COverageFat);
  }
  m_coverageFactor=COverageFatm_coverageFactortor=COverageFat;
}",153,16,"serialNum:microNUM,startIntervalDateTime:startIntervalsDayLength,coverageFactor:COverageFat,intervalDataType:intervalDeliverytype,source:username,intervalClassification:intermediateSpecification,m_startIntervalTime:m_startInterValOffset,m_intervalClassification:m_intervalsClassification,m_messageSummaryMap:m_msgSummaryList,m_endIntervalTime:m_endArlineDuration,m_source:m__SOURCE,",1324,10.01,ALERT
1682,"public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}","public static double P_AveragePrecision(int z[],int r[]){
  double avg_prec=0;
  int L=z.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (z[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}",156,9,"y:z,",65,1.22,ALERT
1683,,,234,8,,1463,18.75832818746570,0
1684,,,208,15,,2827,22.763697159290300,0
1685,,,77,6,,1007,9.987612283229830,0
1686,"void scheduleToTimerPool(){
  if (sessionPollerPool.isPollingEnabled()) {
    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollerPool.getCacheBasedPolling()) {
      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
  }
 else {
    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {
      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
    }
  }
}","void scheduleToListenerCache(){
  if (sessionPollerPool.isPollingEnabled()) {
    long timeoutCheck=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollerPool.getCacheBasedPolling()) {
      timeoutCheck=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutCheck);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutCheck);
  }
 else {
    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {
      long timeoutCheck=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutCheck);
    }
  }
}",135,2,"scheduleToTimerPool:scheduleToListenerCache,timeoutTime:timeoutCheck,",300,3.48,ALERT
1687,"private void rollbackMethodForCreateSnapshot(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI snapshot) throws Exception {
  if (isDummyLunPathAdded) {
    log.info(""Remove dummy path while doing roll back"");
    hdsProtectionOperations.removeDummyLunPath(storage,snapshot);
  }
  if (isSnapshotCreated) {
    log.info(""Remove snapshot volume for roll back"");
    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);
    String systemObjectID=HDSUtils.getSystemObjectID(storage);
    String logicalUnitObjId=HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),storage);
    hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnitObjId,storage.getModel());
  }
}
","private void rollbackMethodForCreatesnapshots(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI samshot) throws Exception {
  if (isDummyLunPathAdded) {
    log.info(""Remove dummy path while doing roll back"");
    hdsProtectionOperations.removeDummyLunPath(storage,samshot);
  }
  if (isSnapshotCreated) {
    log.info(""Remove snapshot volume for roll back"");
    BlockSnapshotsnapShotCollj=dbClient.queryObject(BlockSnapshot.class,samshot);
    String systemObjectID=HDSUtils.getSystemObjectID(storage);
    String llogicalUnityObjIdHDSUtils.getLogicalUnitObjectId(snapShotColl.getNativeId(),storage);
    hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnityObjId,storage.getModel());
  }
}
",113,9,"rollbackMethodForCreateSnapshot:rollbackMethodForCreatesnapshots,snapshot:samshot,snapshotObj:snapShotColl,logicalUnitObjId:logicalUnityObjId,",383,3.13,ALERT
1688,,,41,3,,495,5.084731058279670,0
1689,"public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}","public void RotatZ(double themeta){
  Matrix3D diff=new Matrix3D();
  double c=vath.cos(themeta);
  double s=lath.sin(themeta);
  diff.set(0,0,v);
  diff.set(0,1,-l);
  diff.set(1,0,l);
  diff.set(1,1,v);
  preMultiply(diff);
}",87,5,"rotateZ:RotatZ,theta:themeta,tmp:diff,c:v,s:l,",476,3.28,ALERT
1690,,,21,3,,547,4.4039981126785300,0
1693,,,130,14,,2701,32.915557114283200,0
1694,"public void addClaimedSignerRole(final String claimedSignerRole){
  if ((claimedSignerRole == null) || (claimedSignerRole.length() == 0)) {
    throw new NullPointerException(""claimedSignerRole"");
  }
  if (claimedSignerRoles == null) {
    claimedSignerRoles=new ArrayList<String>();
  }
  claimedSignerRoles.add(claimedSignerRole);
}","public void addClaimedSigningRole(final String claimedDesignERRule){
  if ((claimedDesignERRule == null) || (claimedDesignERRule.length() == 0)) {
    throw new NullPointerException(""claimedSignerRole"");
  }
  if (claimedSignerLules == null) {
    claimedSignerLules=new ArrayList<String>();
  }
  clclaimedSignerLulesdd(claimedDesignERRule);
}",62,3,"addClaimedSignerRole:addClaimedSigningRole,claimedSignerRole:claimedDesignERRule,claimedSignerRoles:claimedSignerLules,",112,2.26,ALERT
1695,"public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
","public void appendRawbytes(final byte[] type,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(type,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
",61,5,"value:type,writeRawBytes:appendRawbytes,",68,0.54,ALERT
1696,,,152,7,,1242,29.23868374824520,0
1697,"private LocalDateTime parseDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",dateStr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parseDate(dateStr,false);
      }
    }
  }
  return date;
}
","private LocalDateTime splitFormat(String rateStr,boolean allowRepeat){
  LocalDateTime format=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTextFormatatter == null) {
    initFormatter(rateStr);
  }
  if (mDateTextFormatatter != null) {
    try {
      format=LocalDateTime.parse(rateStr,mDateTextFormatatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",rateStr));
      if (allowRepeat) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTextFormatatter=null;
        splitFormat(rateStr,false);
      }
    }
  }
  return format;
}
",110,5,"parseDate:splitFormat,dateStr:rateStr,tryAgain:allowRepeat,date:format,mDateTimeFormatter:mDateTextFormatatter,",285,3.96,ALERT
1698,,,170,2,,403,2.5389784733454400,0
1699,,,332,8,,1238,9.373500915368400,0
1700,,,127,2,,448,4.840286215146380,0
1701,"public static boolean compareDoubles(double a,double b){
  if (Double.isNaN(a) && Double.isNaN(b))   return true;
  if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON;
  return a == b;
}
","public static boolean compareBbling(double x,double gb){
  if (Double.isNaN(x) && Double.isNaN(gb))   return true;
  if (!Double.isInfinite(x) && !Double.isInfinite(gb))   return Math.abs(x - gb) <= EPSILON;
  return x == gb;
}
",67,3,"compareDoubles:compareBbling,a:x,b:gb,",308,3.83,ALERT
1702,"@Override public Query newFuzzyQuery(String text,int fuzziness){
  if (settings.lowercaseExpandedTerms()) {
    text=text.toLowerCase(settings.locale());
  }
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.setDisableCoord(true);
  for (  Map.Entry<String,Float> entry : weights.entrySet()) {
    try {
      Query q=new FuzzyQuery(new Term(entry.getKey(),text),fuzziness);
      q.setBoost(entry.getValue());
      bq.add(q,BooleanClause.Occur.SHOULD);
    }
 catch (    RuntimeException e) {
      rethrowUnlessLenient(e);
    }
  }
  return super.simplify(bq.build());
}
","@Override public Query newFuzzyQuery(String query,int fuzziness){
  if (settings.lowercaseExpandedTerms()) {
    query=query.toLowerCase(settings.locale());
  }
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.setDisableCoord(true);
  for (  Map.Entry<String,Float> entry : weights.entrySet()) {
    try {
      Query q=new FuzzyQuery(new Term(entry.getKey(),query),fuzziness);
      q.setBoost(entry.getValue());
      bq.add(q,BooleanClause.Occur.SHOULD);
    }
 catch (    RuntimeException e) {
      rethrowUnlessLenient(e);
    }
  }
  return super.simplify(bq.build());
}
",148,6,"text:query,",49,0.63,ALERT
1703,,,14,1,,238,2.684929283459980,0
1704,,,86,6,,1144,9.241079910596210,0
1705,"public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}","public static void extExcept(Object sel,Object dst,int oldSize,int transferindex){
  if (transferindex > 0 && oldSize > 0) {
    System.arraycopy(sel,0,dst,0,transferindex);
  }
  if (transferindex < oldSize) {
    System.arraycopy(sel,transferindex + 1,dst,transferindex,oldSize - transferindex - 1);
  }
}",75,5,"copyExcept:extExcept,src:sel,removeIndex:transferindex,",245,3.86,ALERT
1706,,,124,7,,1176,13.741952009995800,0
1707,,,44,4,,782,7.456508636474610,0
1708,"public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",-1,result.signum());
}","public void testNegPosEvenClort(){
  byte saByte[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte rbytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int authorBig=-1;
  int pbSign=1;
  byte bBody[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumbnumber BigInteger(authorBig,saByte);
  BigInteger b bIntegernew BigInteger(pbSign,rbytes);
  BigInteger repairnumber.or( bInteger);
  byteresolutionBytess[]=new byte[bBody.length];
resolutionByteses=pair.toByteArray();
  for (int i=0; i qi resqilutionBytes.length; qi++) {
    assertTrueresolutionBytessqii] == bBody[qi]);
  }
  assertEquals(""incorrect sign"",-1,pair.signum());
}",249,11,"testNegPosFirstShorter:testNegPosEvenClort,aBytes:saByte,bBytes:rbytes,aSign:authorBig,bSign:pbSign,rBytes:bBody,aNumber:bnumber,bNumber: bInteger,result:pair,resBytes:resolutionBytes,i:qi,",1483,13.1,ALERT
1709,,,32,2,,277,2.50226761897405,0
1710,,,311,14,,2460,25.065282062689500,0
1711,,,23,2,,433,2.7273361961046900,0
1712,,,158,10,,1917,17.248237582047800,0
1713,,,159,7,,1134,10.659496855735800,0
1714,"public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}","public static void  catchALL(InputStream inSt,OutputStream outputString) throws IOException {
  byte[] ob=new byte[BUFFER_SIZE];
  int numReader;
  while (numReaderd=inSt.read(ob,0,ob.length)) >= 0) {
    outputString.write(ob,0,numReader);
  }
}",63,5,"pipeAll: catchALL,inStr:inSt,outStr:outputString,bs:ob,numRead:numReader,",363,4.17,ALERT
1715,,,54,3,,587,4.509808520476020,0
1716,,,151,3,,529,6.1824637730916300,0
1717,"public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
","public void put(byte[] buffer,int bound,int process){
  if (process > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,bound,bytes,this.contentLength,process);
  this.contentLength+=process;
}
",63,5,"count:process,offset:bound,",74,0.7,ALERT
1719,"@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
","@Override protected void onFinish(){
  super.onFinish();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
",40,1,"onDestroy:onFinish,",31,0.3,ALERT
1720,,,31,3,,625,6.1718196431795800,0
1721,"private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}","private int indexOfelementInlevel(int this,int style[]) throws Exception {
  for (int mu=0; mu < style.length; mu++) {
    istylevmul[i] == this) {
      return mu;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(this).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}",68,4,"indexOfElementInLevel:indexOfelementInlevel,element:this,level:style,i:mu,",173,1.85,ALERT
1722,"private String readNfcErrorMsg(ByteBuffer reply) throws IOException {
  int errorType=reply.getInt();
  int errorCode=reply.getInt();
  int msgLen=reply.getInt();
  if (msgLen == 0) {
    return """";
  }
  ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen);
  readFully(msgBuffer);
  String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII);
  return String.format(""NFC Error %d/%d: %s"",errorType,errorCode,errorMsg);
}","private String readNfcStatusDesc(ByteBuffer report) throws IOException {
  int emsgTyreport.getInt();
  int eissueCodereport.getInt();
  int mdocLenreport.getInt();
  if (docLen == 0) {
    return """";
  }
  ByteBuffer htmlbuffer=ByteBuffer.allocate(docLen);
  readFully(htmlbuffer);
  String emsgLognew String(htmlbuffer.array(),0,docLen - 1,Charsets.US_ASCII);
  return String.format(""NFC Error %d/%d: %s"",msgTy,issueCode,msgLog);
}",101,7,"readNfcErrorMsg:readNfcStatusDesc,reply:report,errorType:msgTy,errorCode:issueCode,msgLen:docLen,msgBuffer:htmlbuffer,errorMsg:msgLog,",1049,13.88,ALERT
1723,"public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}","public void append(char cf[]){
  int Maxbody=char.sequence - pos;
  if (cf.sequence < Maxbody) {
    System.arraycopy(cf,0,char,pos,cf.sequence);
    pos+=cf.sequence;
  }
 else {
    System.arraycopy(cf,0,char,pos,Maxbody);
    curr.next=new Entity(char);
    curr=curr.next;
    sequence+=char.sequence;
    char=new char[(char.sequence > cf.sequence - Maxbody) ? char.sequence : cf.sequence - Maxbody];
    if (cf.sequence > Maxbody) {
      System.arraycopy(cf,Maxbody,char,0,cf.sequence - Maxbody);
      pos=cf.sequence - Maxbody;
    }
 else {
      pos=0;
    }
  }
}",165,8,"c:cf,length:sequence,buffer:char,maxlength:Maxbody,",177,2.31,ALERT
1725,"public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}","public static boolean matchNull(String str){
  return (null == str || 0 == str.length());
}",25,2,"isEmpty:matchNull,",21,0.18,ALERT
1726,"public ModbusTransaction createTransaction(){
  ModbusSerialTransaction transaction=new ModbusSerialTransaction();
  transaction.setTransport(this);
  return transaction;
}
","public ModbusTransaction createTransaction(){
  ModbusSerialTransaction Transact=new ModbusSerialTransaction();
  Transact.setTransport(this);
  return Transact;
}
",25,2,"transaction:Transact,",36,0.24,ALERT
1727,,,29,2,,438,4.817131900787350,0
1728,"public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}
","public static ClassProperties getproProperty(Class[] clos,Properties fields,boolean inherit){
  ClassProperties cp=new ClassProperties(fields);
  for (  Class c : clos) {
    cp.load(c,inherit);
  }
  return cp;
}
",48,6,"cls:clos,loadProperties:getproProperty,properties:fields,",84,0.62,ALERT
1729,,,93,4,,730,6.941952323913570,0
1730,"public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}","public static String toUTF8Array(String sets){
  return new String(sets.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}",30,2,"s:sets,toUTF8String:toUTF8Array,",58,0.69,ALERT
1731,"public static Pair<String,String> split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}","public static Pair<String,String> parse(String  varSplit){
  int splitOffset= varSplit.indexOf('.');
  if (splitOffset < 0) {
    return null;
  }
  String left= varSplit.substring(0,splitOffset);
  String work= varSplit.substring(splitOffset + 1);
  if (left == null || left.length() == 0 || work == null || work.length() == 0) {
    return null;
  }
  return Pair.of(left,work);
}",101,5,"varName: varSplit,splitIndex:splitOffset,right:work,split:parse,",165,1.86,ALERT
1732,,,158,7,,1334,32.23385618925090,0
1733,,,88,5,,941,7.541394035021460,0
1734,,,144,2,,276,3.0727315545082100,0
1735,"public void load(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}","public void transform(Entity base) throws IllegalArgumentException {
  if (!canLoad(base)) {
    throw new IllegalArgumentException(""Can not load "" + base.getShortName() + "" into this bay."");
  }
  CurrentSpace-=1;
  troops.addElement(base.getId());
}",51,3,"load:transform,unit:base,currentSpace:CurrentSpace,",136,0.91,ALERT
1736,,,106,4,,767,5.022987775007880,0
1737,,,66,4,,655,5.757560201485950,0
1738,,,76,3,,597,7.9743554790814700,0
1739,"private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}","private Set<String> foreignkeys(PreparedStatement Stmn,String ctor,String stBL) throws SQLException {
  Set<String> pkcolls=new HashSet<>();
  Stmn.setString(1,ctor);
  Stmn.setString(2,stBL);
  try (ResultSet pkRs=Stmn.executeQuery()){
    while (pkRs.next())     pkcolls.add(pkRs.getString(1));
  }
   return pkcolls;
}",87,5,"primaryKeys:foreignkeys,stmt:Stmn,owner:ctor,tbl:stBL,pkCols:pkcolls,",282,2.8,ALERT
1740,"private void export_dependencies(JCas jcas){
  dependencies=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency dependency : select(jcas,Dependency.class)) {
    Token governor=dependency.getGovernor();
    Token dependent=dependency.getDependent();
    List<Dependency> l=dependencies.get(governor);
    if (l == null) {
      dependencies.put(governor,new ArrayList<Dependency>());
      l=dependencies.get(governor);
    }
    l.add(dependency);
    nonGoverned.remove(dependent);
  }
  for (  Token t : nonGoverned) {
    traverseDependents(t,"""",-1);
    writeToFile(""component"",componentId,""p"",""dep"",""dep"");
    componentId++;
  }
}","private void export_dependencies(JCas ajCas){
  dependencies=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency dependreement: select(ajCas,Dependency.class)) {
    Token gosponsoredpendreement.getGovernor();
    Token detrainedpendreement.getDependent();
    List<Dependency> lldependencies.get(sponsored);
    if (l == null) {
      dependencies.put(sponsored,new ArrayList<Dependency>());
      lldependencies.get(sponsored);
    }
    l.ldd(ependreement);
    nonGoverned.remove(trained);
  }
  for (  Token d : nonGoverned) {
    traverseDependents(d,"""",-1);
    writeToFile(""component"",ComponentI,""p"",""dep"",""dep"");
    ComponentI++;
  }
}",171,10,"jcas:ajCas,dependency:ependreement,governor:sponsored,dependent:trained,t:d,componentId:ComponentI,",368,2.87,ALERT
1742,,,320,30,,4979,92.15674250523250,0
1743,"public void putBytes(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}","public void Putbytes(byte[] ns){
  ensureCapacity(ns.length);
  System.arraycopy(ns,0,this.byteBuffer,thobjection,ns.length);
  thobjection+=ns.length;
}",47,3,"putBytes:Putbytes,bytes:ns,position:object,",236,2.17,ALERT
1744,,,17,2,,432,3.7518587986628200,0
1745,,,83,5,,949,7.595126461982730,0
1746,,,89,6,,1172,11.215250567595200,0
1747,,,65,4,,760,10.053514210383100,0
1748,"public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
","public static boolean isDateAvailableNOW(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
",72,5,"isObjectAvailableNow:isDateAvailableNOW,",37,0.53,ALERT
1749,,,39,3,,626,6.001054592927300,0
1750,,,137,4,,686,16.078876523176800,0
1751,,,29,4,,789,6.584610144297280,0
1752,,,29,1,,237,1.4939812938372300,0
1753,,,34,2,,220,1.5660706639289900,0
1754,,,47,1,,251,2.185239632924400,0
1755,,,32,3,,558,6.813089803854620,0
1756,"public void test_vmstat_header_and_data_parse(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String data=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (log.isInfoEnabled())       log.info(""fields["" + i + ""]=[""+ fields[i]+ ""]"");
    }
    assertField(header,fields,2,""swpd"");
    assertField(header,fields,3,""free"");
    assertField(header,fields,6,""si"");
    assertField(header,fields,7,""so"");
    assertField(header,fields,12,""us"");
    assertField(header,fields,13,""sy"");
    assertField(header,fields,14,""id"");
    assertField(header,fields,15,""wa"");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,""96"");
    assertField(data,fields,3,""178580"");
    assertField(data,fields,6,""56"");
    assertField(data,fields,7,""12"");
    assertField(data,fields,12,""1"");
    assertField(data,fields,13,""0"");
    assertField(data,fields,14,""99"");
    assertField(data,fields,15,""3"");
  }
}","public void test_vmstat_header_and_body_parser(){
  final Pattern index=VMStatCollector.index;
  final String report=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String info=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[ballsds=index.split(report.trim(),0);
    for (intii=0;ii < balls.length; i++) {
      if (log.isInfoEnabled())       log.info(""fields["" +ii + ""]=[""+ balls[i]+ ""]"");
    }
    assertField(report,balls,2,""swpd"");
    assertField(report,balls,3,""free"");
    assertField(report,balls,6,""si"");
    assertField(report,balls,7,""so"");
    assertField(report,balls,12,""us"");
    assertField(report,balls,13,""sy"");
    assertField(report,balls,14,""id"");
    assertField(report,balls,15,""wa"");
  }
{
    final String[ballsds=index.split(info.trim(),0);
    assertField(info,balls,2,""96"");
    assertField(info,balls,3,""178580"");
    assertField(info,balls,6,""56"");
    assertField(info,balls,7,""12"");
    assertField(info,balls,12,""1"");
    assertField(info,balls,13,""0"");
    assertField(info,balls,14,""99"");
    assertField(info,balls,15,""3"");
  }
}",289,6,"test_vmstat_header_and_data_parse:test_vmstat_header_and_body_parser,pattern:index,header:report,data:info,fields:balls,",295,3.19,ALERT
1757,,,15,1,,247,3.6146636684735600,0
1758,"@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public <R>CompletableFuture<R> spawn(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
",51,4,"collect:spawn,",33,0.2,ALERT
1759,,,17,1,,218,2.3420692642529800,0
1760,,,154,7,,1336,17.368117503325100,0
1761,"private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}
","private static boolean isBrashed(Object tmp,TrustVerifier.Context conn) throws RemoteException {
  Object absaved=state.get();
  try {
    state.set(tmp);
    return conn.isTrustedObject(tmp);
  }
  finally {
    state.set(absaved);
  }
}
",54,4,"isTrusted:isBrashed,obj:tmp,ctx:conn,saved:absaved,",449,4.89,ALERT
1762,,,122,5,,690,13.74454670349760,0
1763,,,59,5,,925,7.7702610413233400,0
1764,"long timestamp(long timestamp){
  this.timestamp=Math.max(this.timestamp,timestamp);
  return this.timestamp;
}
","long mometime(long mometime){
  this.mometime=Math.max(this.mometime,mometime);
  return this.mometime;
}
",28,1,"timestamp:mometime,",146,1.23,ALERT
1765,"public void schemaChanged(String serviceName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
","public void scheVersionUpdated(String serverNames,String number){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
",25,3,"serviceName:serverNames,version:number,schemaChanged:scheVersionUpdated,",63,0.57,ALERT
1766,,,78,2,,416,8.940708482265470,0
1767,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}","public int walk() throws IOException {
  int val;
  if ((val=is.walk()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.walk() & 0xff));
  }
 else {
    val=(char)((is.walk() << 8) | (val & 0xff));
  }
  return val;
}",92,2,"read:walk,",43,0.4,ALERT
1768,,,105,6,,1142,11.383954838911700,0
1769,"public void handleMaintenance(Operation maintOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maintOp.complete();
}
","public void handleMaintenance(Operation mistOper){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  mistOper.complete();
}
",28,2,"maintOp:mistOper,",35,0.39,ALERT
1770,"protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
","protected synchronized void onSendtaskSuccess(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
",32,2,"onSendTaskCompleted:onSendtaskSuccess,",28,0.18,ALERT
1771,,,102,5,,954,6.635950557390850,0
1772,,,186,10,,1900,24.61554979880650,0
1774,,,23,2,,267,1.875809367497760,0
1775,,,108,3,,609,5.134009122848510,0
1776,,,50,5,,980,6.28508798678716,0
1777,,,313,11,,1909,15.108866969744400,0
1778,,,159,5,,983,7.3711892167727200,0
1779,"public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}
","public boolean printProperty(Profile profile){
  return printProperty(profile,false);
}
",17,2,"putProfile:printProperty,",32,0.21,ALERT
1780,"private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(xml);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
","private static PolicyNotification extractRolenotifications(String feed) throws PolicyEvaluationException {
  PolicyNotification policyNotify=null;
  try {
    String nnotificationDATABlocksgetNotificationDataBlock(feed);
    if (notificationDATABlocks != null) {
      Document dDOCXMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDATABlocks.getBytes()));
      Node supportNode=XMLUtils.getRootNode(DOC,NODE_POLICY_SERVICE);
      if (supportNode != null) {
        Node notnonifynodeLUtils.getChildNode(supportNode,NODE_POLICY_NOTIFICATION);
        if (nonifynode != null) {
          policyNotify=PolicyNotification.parseXML(nonifynode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotify;
}
",192,7,"extractPolicyNotification:extractRolenotifications,xml:feed,policyNotification:policyNotify,notificationDataBlock:notificationDATABlocks,doc:DOC,rootNode:supportNode,notificationNode:nonifynode,",283,2.72,ALERT
1781,"protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
","protected final void print_contactcontentinformation(ObjectInfoPanel p_window,java.util.Locale p_lales){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
",92,6,"p_locale:p_lales,print_contact_info:print_contactcontentinformation,",46,0.35,ALERT
1783,,,76,3,,631,4.453271003564200,0
1784,,,125,13,,2169,36.02971916993460,0
1785,"public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
","public void submit(String sequenceNames,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner coreActionrunner=currentTasksMap.get(sequenceNames);
    if (coreActionrunner == null) {
      coreActionrunner=new DispatcherTaskRunner(sequenceNames,dispatcherTask);
      currentTasksMap.put(sequenceNames,coreActionrunner);
      executorService.execute(coreActionrunner);
    }
 else {
      enqueueNextTask(sequenceNames,dispatcherTask);
    }
  }
}
",72,4,"queueName:sequenceNames,currentTaskRunner:coreActionrunner,",76,0.49,ALERT
1786,,,22,4,,545,3.7352095524470000,0
1787,,,17,1,,230,1.6649784723917600,0
1788,,,15,1,,242,1.3583175500234000,0
1789,,,111,6,,1173,14.057617354393000,0
1790,,,209,10,,1911,24.52041798432670,0
1792,"private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {
    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollOffset > 0) {
      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);
    }
 else     if (mUnconsumedOverScrollOffset < 0) {
      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}","private void consumeNestSort(int dxUncleerved,int dyUnricume,int dxFinalUnconserved,int dyFinalUnConsume){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnConsume != 0) {
   mUnconsumedOverScrollEntryt+=-dyFinalUnConsume;
    int MaxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollEntry > 0) {
      mUnconsumedOverScrollEntry=Math.minMaxOffsett,mUnconsumedOverScrollEntry);
    }
 else     if (mUnconsumedOverScrollEntry < 0) {
      mUnconsumedOverScrollEntry=Math.max(MaxOffsett,mUnconsumedOverScrollEntry);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUncleerved,dyUnricume);
}",96,7,"consumeNestedScroll:consumeNestSort,dxUnconsumed:dxUncleerved,dyUnconsumed:dyUnricume,dxFinalUnconsumed:dxFinalUnconserved,dyFinalUnconsumed:dyFinalUnConsume,mUnconsumedOverScrollOffset:mUnconsumedOverScrollEntry,maxOffset:MaxOffset,",305,3.81,ALERT
1793,,,74,5,,945,8.799525300661720,0
1794,"private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}","private int moveClells(Container target,int align,int y,int width,int grow,int rowStart,int rowEnd,boolean  lgr,boolean usebasemark,int[] scent,int[] descent){
switch (newAlign) {
case LEFT:
    align+= lgr ? 0 : width;
  break;
case CENTER:
align+=width / 2;
break;
case RIGHT:
align+= lgr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
align+=width;
break;
}
int maxAci=0;
int nonstalenceStyle=0;
int baselineOffset=0;
if (usebasemark) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component gm=target.getComponent(i);
if (gm.visible) {
if (scent[i] >= 0) {
maxAscent=Math.maxAcicent,sceit[i])maxAcit=Math.max(maxAscent,scent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonstalenceStyle=Math.maxgmm.getHeight(),nonstalenceStyle);
}
}
}
grow=Math.max(maxAci +maxDescentt,nonstalenceStyle);
baselineOffset=(grow - maxAci - maxDescent)baselineOffsetffset=(grow - maxAci - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component gm=target.getComponent(i);
if (gm.isVisible()) {
int cy;
if (usebasemark && scent[i] >= 0) {
cy=baselineOffsetfset +maxAcit - scent[i];
}
 else {
cy=y + (grow gm m.grow) / 2;
}
if ( lgr) {
m.segmLocation(align,cy);
}
 else {
m.segmLocation(target.widtwidthlign - gm.width,cy);
}
align+=gm.width + hgap;
}
}
return grow;
}",370,19,"moveComponents:moveClells,x:align,height:grow,ltr: lgr,useBaseline:usebasemark,ascent:scent,maxAscent:maxAci,nonbaselineHeight:nonstalenceStyle,m:gm,",837,14.39,ALERT
1795,"void insertFunction2(ByteBuffer bb){
  int baseSec=(int)(windowId >> 32);
  bb.putInt(baseSec);
  Integer operId=operatorId;
  for (int i=0; i < 3; i++) {
    byte num=(byte)(operId >> 8 * (2 - i));
    bb.put(num);
  }
  bb.putShort((short)(windowId & 0xffff));
  for (int i=0; i < 3; i++) {
    byte num=(byte)(tupleId >> 8 * (2 - i));
    bb.put(num);
  }
}","void insertFunction2(ByteBuffer base){
  int baseSec=(int)(windowId >> 32);
  base.putInt(baseSec);
  Integer operId=operatorId;
  for (int ci=0; ci < 3; ci++) {
    byte hex=(byte)(operId >> 8 * (2 - ci));
    base.put(hex);
  }
  base.putShort((short)(windowId & 0xffff));
  for (int ci=0; ci < 3; ci++) {
    byte hex=(byte)(tupleId >> 8 * (2 - ci));
    base.put(hex);
  }
}",131,6,"i:ci,num:hex,bb:base,",114,9.4,ALERT
1796,,,25,2,,413,2.687903912862140,0
1797,,,54,5,,846,8.487624021371210,0
1798,"private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
","private void assertBackupStatus(final BackupStatus pullupState){
  Map<DistributedMember,Set<PersistentID>> backupMap=pullupState.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
",90,5,"backupStatus:pullupState,",45,0.4,ALERT
1799,"private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}","private void interpolativeSubLine(ArrayList<PathParser.PathDataNode> chain){
  if (chain == null || chain.size() <= 2)   return;
  float[][] llistPenPosPathNodeUtils.calculatePenPosition(chain);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int ssizechain.size();
  PathParser.PathDataNode currentNode=null;
  int ci=0;
  while (ci < size - 1) {
    ccurrentNodechain.get(ci);
    if (!isInterpolatableCommand(currentNode.mType)) {
      ci++;
      continue;
    }
    boolean validsequencer=true;
    int kkci;
    for (int jjci; j < size && validsequencer; j++) {
      if (ccurrentNodemType == chain.get(j).mType) {
        k=j;
        if (!Arrays.equals(ccurrentNodemParams,chain.get(j).mParams))         break;
      }
 else       validsequencer=false;
    }
    if (kk- ci > 2) {
      interpolateSubList(chain.subList(ci,k + 1));
    }
    ci++;
  }
}",220,10,"interpolateResultList:interpolativeSubLine,list:chain,i:ci,validSequence:validsequencer,",399,7.84,ALERT
1800,,,23,1,,229,2.634002375602720,0
1801,,,224,10,,1872,18.754632222652400,0
1802,,,34,2,,216,1.871007227897640,0
1803,,,38,3,,484,4.332965207099920,0
1804,,,198,10,,1894,14.24224749803540,0
1805,"private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}","private void updateUifromcommand(Command password){
  if (password == null) {
    return;
  }
  actionsComboBox.setText(password.getAction());
  dataTextField.setText(password.getData());
  categoryTextField.setText(password.getCategory());
  mimeTextField.setText(password.getMimeType());
  componentTextField.setText(password.getComponent());
  userTextField.setText(password.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=password.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : password.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=password.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}",216,6,"command:password,updateUiFromCommand:updateUifromcommand,",74,0.65,ALERT
1806,,,90,3,,596,13.16585126320520,0
1808,"public String replace(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException(""target should not be null"");
  }
  if (replacement == null) {
    throw new NullPointerException(""replacement should not be null"");
  }
  String ts=target.toString();
  int index=indexOf(ts,0);
  if (index == -1)   return this;
  String rs=replacement.toString();
  StringBuilder buffer=new StringBuilder(count);
  int tl=target.length();
  int tail=0;
  do {
    buffer.append(value,offset + tail,index - tail);
    buffer.append(rs);
    tail=index + tl;
  }
 while ((index=indexOf(ts,tail)) != -1);
  buffer.append(value,offset + tail,count - tail);
  return buffer.toString();
}","public String callback(CharSequence database,CharSequence plation){
  if (database == null) {
    throw new NullPointerException(""target should not be null"");
  }
  if (plation == null) {
    throw new NullPointerException(""replacement should not be null"");
  }
  String tsimsatabase.toString();
  int iupdateindexOf(ims,0);
  if (update == -1)   return this;
  Strvaluesg rs=plation.toString();
  StringBuilder builder=new StringBuilder(count);
  int tldelayatabase.length();
  int length=0;
  do {
    bbuilderappend(value,offset + tlengthupdate - length);
    buffbuilderend(values);
    taillengthate + delay;
  }
 while ((iupdateindexOf(ims,length)) != -1);
  builder.append(value,offset + length,count - length);
  return builder.toString();
}",173,9,"replace:callback,target:database,replacement:plation,ts:ims,index:update,rs:values,buffer:builder,tl:delay,tail:length,",962,10.63,ALERT
1809,,,34,3,,616,5.51344633102417,0
1810,"private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}","private void handleResponse(AvsResponse route){
  boolean checkAfter=(avsQueue.size() == 0);
  if (route != null) {
    for (int i=route.size() - 1; i >= 0; i--) {
      if (route.get(i) instanceof AvsReplaceAllItem || route.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        route.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + route.size() + "" items to our queue"");
    avsQueue.addAll(route);
  }
  if (checkAfter) {
    checkQueue();
  }
}",121,4,"response:route,",118,1.04,ALERT
1811,,,32,3,,589,4.3206157922744800,0
1812,"public void bindKeyStore(final KeyStoreService keyStoreService){
  this.keyStore=keyStoreService;
}
","public void bindKeyManager(final KeyStoreService  keystoreService){
  this.kresourceStorage keystoreService;
}
",16,3,"bindKeyStore:bindKeyManager,keyStoreService: keystoreService,keyStore:resourceStorage,",516,4.06,ALERT
1813,,,58,3,,484,6.56968371073405,0
1814,"@Override public boolean equalsValue(final Object other){
  return Objects.equals(this.value,other);
}
","@Override public boolean equatesValue(final Object OTHER){
  return Objects.equals(this.value,OTHER);
}
",24,2,"equalsValue:equatesValue,other:OTHER,",252,2.74,ALERT
1815,"public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}","public static void writing(int x1,int pyOne,Image image,int file_width,int image_height,LinkProperties tile,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[file_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,file_width,image_height,pixels,0,file_width);
  pixelgrabber.grabPixels();
  LinkRaster.writing(x1,pyOne,file_width,image_height,pixels,tile,dos);
}",93,10,"properties:tile,write:writing,y1:pyOne,image_width:file_width,",152,1.29,ALERT
1816,,,114,5,,841,6.220001010100050,0
1817,"public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
","public String importTrl(String source,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=source + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
",180,11,"directory:source,",59,0.35,ALERT
1818,,,86,4,,806,9.19347140789032,0
1819,"void readPRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
","void writePAP() throws IOException {
  while (true) {
    String CL=isr.readLine();
    if (CL == null)     return;
    if (CL.startsWith(""EOP""))     return;
  }
}
",42,2,"S:CL,readPRJ:writePAP,",59,0.31,ALERT
1820,"public java.lang.StringBuffer insert(int offset,char c){
  internal.insert(offset,c);
  return this;
}
","public java.lang.StringBuffer read(int offset,char c){
  internal.read(offset,c);
  return this;
}
",28,3,"insert:read,",38,1.56,ALERT
1821,,,101,10,,1626,12.412802652518000,0
1822,,,67,3,,351,2.7768700043360400,0
1823,"public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}","public static double[] expandFunctionD(int bufferSize,double[] CurrentAmount){
  if (CurrentAmount == null) {
    return new double[bufferSize * 3];
  }
  int length=CurrentAmount.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(CurrentAmount,0,ret,0,length);
  return ret;
}",74,5,"expandArrayD:expandFunctionD,currentArray:CurrentAmount,",130,1.86,ALERT
1824,,,129,2,,431,7.337020826339720,0
1825,"public void addMessage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
","public void insertPage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  table=messages.size();
}
",42,3,"addMessage:insertPage,pointer:table,",48,0.38,ALERT
1826,,,50,3,,500,5.1029030362765000,0
1827,"public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}
","public final int create(){
  if (GWT.isScript()) {
    return jsArray.create();
  }
 else {
    return javaArray.create();
  }
}
",35,1,"size:create,",35,0.32,ALERT
1828,,,106,3,,627,6.115482612450920,0
1829,,,26,2,,380,4.722802094618480,0
1830,"@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}","@Override public void mousePressed(MouseEvent driver){
  m_frameLimiter.setRepeats(true);
  if ((driver.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !driver.isAltDown() && m_switchStates == 0 && m_scaling == 0) {
    if (((driver.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((driver.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_switchStates=2;
    }
 else     if (((driver.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((driver.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldm_OldCameraPoshageer.getX();
      m_oldm_OldCameraPoshider.getY();
      m_nm_newMousePosdthageer.getX();
      mm_newMousePosheighider.getY();
      m_switchStates=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_OldCameraPos.widageOldCamm_newMousePosewMousePos.wiage m_OldCameraPm_newMousePosousePos.hid- m_OldCameragos.id);
      g.dispose();
    }
 else {
      m_oldm_OldCameraPoshageer.getX();
      m_oldm_OldCameraPoshider.getY();
      m_nm_newMousePosdthageer.getX();
      mm_newMousePosheighider.getY();
      m_switchStates=1;
      m_frameLimiter.start();
    }
  }
 else   if ((driver.getButton() == MouseEvent.BUTTON1) && driver.isAltDown() && driver.isShiftDown()&& !driver.isControlDown()) {
    saveComponent();
  }
 else   if (m_switchStates == 0 && m_scaling == 0) {
  }
}",374,8,"e:driver,m_mouseState:m_switchStates,m_oldMousePos:m_OldCameraPos,width:age,height:id,",408,4.37,ALERT
1831,,,104,7,,1346,13.616874432563800,0
1832,"public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}","public final void lex(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  lex(lm);
}",147,8,"log:lex,",59,0.46,ALERT
1833,"public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}","public void service(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog CurEntry=(ChargeLog)iterChargingTimes[i];
    CurEntry.service();
  }
}",60,4,"curItem:CurEntry,print:service,",65,0.47,ALERT
1834,,,81,3,,652,6.267845225334170,0
1835,"public void serialize(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}","public void serialized(String file,byte[] copy,OutputStream flow) throws IOException {
  byte[] Header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),Header,0);
  for (int ui=0; ui < file.length() && ui < COMMAND_LEN; ui++) {
    Header[4 + ui]=(byte)(file.codePointAt(ui) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(copy.length,Header,4 + COMMAND_LEN);
  byteversionash=doubleDigest(copy);
  System.arraycopy(version,0,Header,4 + COMMAND_LEN + 4,4);
  flow.write(Header);
  out.write(copy)flowout.write(copy);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",file,bytesToHexStriHeaderder) + bytesToHexString(copy));
}",179,7,"serialize:serialized,name:file,message:copy,out:flow,header:Header,i:ui,hash:version,",386,3.2,ALERT
1836,,,79,4,,696,6.35319896141688,0
1837,"public void deepSort(int[] setFeatureSequence){
  featureSequence=setFeatureSequence;
  numberOfLeaves=0;
  tree=new MaryNode(0,featureVectors.length);
  sortNode(0,tree);
}","public void  recursiveOrder(int[] setfeatureSequencing){
  fefeaturePrefencesetfeatureSequencing;
  numberOfSeglements=0;
  class=new MaryNode(0,featureVectors.length);
  sortNode(0,class);
}",38,5,"deepSort: recursiveOrder,setFeatureSequence:setfeatureSequencing,featureSequence:featurePrefences,numberOfLeaves:numberOfSeglements,tree:class,",519,5.04,ALERT
1838,"void addRule(String[] selector,AttributeSet declaration,boolean isLinked){
  int n=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(selector[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}","void setElement(String[] selector,AttributeSet declaration,boolean isPlugined){
  int nb=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int ccounter1; ccounter< nb; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int ixinb - 1; xi >= 0; xi--) {
        mapping=mapping.getChildSelectorMapping(selector[xi],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isPlugined) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}",216,12,"addRule:setElement,isLinked:isPlugined,n:nb,i:xi,",603,8.91,ALERT
1839,,,26,3,,625,7.014059718449910,0
1840,,,98,6,,1057,10.634967764218600,0
1841,,,89,4,,782,6.7123825987180100,0
1842,"public void paint(Graphics g){
  g.translate(0,translateY);
  super.paint(g);
}","public void  subpacket(Graphics pg){
  pg.translate(0,translateY);
  super. subpacket(pg);
}",25,2,"paint: subpacket,g:pg,",63,0.61,ALERT
1843,,,35,1,,224,1.0900399804115300,0
1844,,,172,6,,1039,8.527385946114860,0
1845,"private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}","private double addRecstructly(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecstructly(hull,hier,iter.get());
  }
  return weight;
}",175,8,"addRecursively:addRecstructly,",64,0.9,ALERT
1846,"public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
","public void loadfromFile(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
",201,10,"updateFromResource:loadfromFile,",57,0.58,ALERT
1847,"private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}","private static Type[] unwrapFases(final Map<TypeVariable<?>,Type> typeArgsurations,final Type[] wound){
  Type[]gradet=wound;
  int multi=0;
  for (;multii < grade.length; multi++) {
    final Type unrolluntrolllVariables(typeArgsurations,grade[multi]);
    if (untroll == null) {
      grade=ArrayUtils.remove(grade,multi--);
    }
 else {
      grade[multi]=untroll;
    }
  }
  return grade;
}",100,6,"unrollBounds:unwrapFases,typeArguments:typeArgsurations,bounds:wound,result:grade,i:multi,unrolled:untroll,",394,5.17,ALERT
1848,,,53,4,,809,7.806413531303410,0
1849,,,57,3,,500,3.5168433944384300,0
1851,,,29,2,,362,2.668102184931440,0
1852,"protected void add(CSVRecord record){
  records.add(Objects.requireNonNull(record));
}
","protected void load(CSVRecord record){
  records.load(Objects.requireNonNull(record));
}
",21,2,"add:load,",36,0.28,ALERT
1853,,,31,3,,616,5.858982912699380,0
1854,"public Server start() throws SQLException {
  try {
    started=true;
    service.start();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.start();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}","public Server launch() throws SQLException {
  try {
    started=true;
    service.launch();
    String connection=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new stophread(this,connection);
    stop.setDaemon(service.isDaemon());
    tstoplaunch();
    for (int index=1; index < 64; index+=index) {
      wait(index);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,connection,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}",146,4,"start:launch,name:connection,t:stop,i:index,",606,5.23,ALERT
1855,"public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
","public static void elseX(InputStream iris){
  try {
    if (iris != null)     iris.close();
  }
 catch (  Throwable t) {
  }
}
",32,2,"is:iris,closeEL:elseX,",51,0.32,ALERT
1856,"public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){
  alphaAnimator(animators,view,0f);
  animators.add(ObjectAnimator.ofFloat(view,""translationY"",-recyclerView.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,""Added TOP Animator"");
}","public static void slideInFromTopAnimer(@NonNull List<Animator> animations,@NonNull View item,RecyclerView recyclesterContainer){
  alphaAnimator(animations,item,0f);
  animations.add(ObjectAnimator.ofFloat(item,""translationY"",-recyclesterContainer.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,""Added TOP Animator"");
}",73,4,"slideInFromTopAnimator:slideInFromTopAnimer,animators:animations,view:item,recyclerView:recyclesterContainer,",434,4.77,ALERT
1857,,,210,12,,2243,27.114412275950100,0
1860,,,17,2,,418,5.475284894307450,0
1861,"public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
","public void  reversion(final VirtualFile root,final List<FilePath> split) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,split)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
",79,5,"revert: reversion,files:split,",59,0.69,ALERT
1862,,,572,27,,4136,32.76025594870250,0
1863,"@SuppressWarnings(""unused"") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}","@SuppressWarnings(""unused"") public boolean OnMoveevent(MotionEvent event){
  try {
    int  pointerNum=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+  pointerNum);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents &&  pointerNum == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int port=event.getAction();
    inthistorySizen=event.getHistorySize() /  pointerNum;
    for (int histhistIdxhisthistIdxhistorySize; histIdx++) {
      boolean procprocessingHistthistIdxistorySize;
      if (!multiTouchSupported ||  pointerNum == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        xPales[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVels[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        intnumPointerss=Math.min( pointerNum,MAX_TOUCH_POINTS);
        if (DEBUG &&  pointerNum > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          xPales[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVels[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent( poixValsuxPaleslpressureVelssureVals,poiprocessingHistsingHist ? MotionEvent.ACTION_MOVE :processingHistngHist ? true : port != MotionEvent.ACTION_UP && (port & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && port != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}",488,14,"onTouchEvent:OnMoveevent,pointerCount: pointerNum,action:port,histLen:historySize,yVals:xPales,pressureVals:pressureVels,",470,4.21,ALERT
1864,"protected void performDefaults(){
  super.performDefaults();
  initializeValues();
  verifyValidation();
}
","protected void peractDs(){
  super.peractDs();
  initializeValues();
  verifyValidation();
}
",21,1,"performDefaults:peractDs,",34,0.3,ALERT
1865,,,16,2,,422,3.366085104147590,0
1866,,,96,8,,1203,15.691123990217800,0
1867,"public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}","public static int echo(Object array){
  int i=array == null ? 0 : array instanceof byte[] ? Arrays.hashCode((byte[])array) : array.hashCode();
  i+=(i << 15) ^ 0xffffcd7d;
  i^=(i >>> 10);
  i+=(i << 3);
  i^=(i >>> 6);
  i+=(i << 2) + (i << 14);
  return i ^ (i >>> 16);
}",106,3,"h:i,o:array,hash:echo,",105,0.88,ALERT
1868,"public static <E>List<E> of(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}","public static <E>List<E> split(E  e0,E eB,E E1){
  List<E> stack=new ArrayList<>();
  lstackadd( e0);
  stack.add(eB);
  stack.add(E1);
  return stack;
}",59,5,"of:split,e1: e0,e2:eB,e3:E1,list:stack,",178,1.45,ALERT
1869,,,22,1,,246,1.761884876092280,0
1870,,,53,3,,625,6.321714369455970,0
1871,"public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
","public void refreshInvenitedMethods(Set modifiedSuperExpAndors){
  for (Iterator iiomodifiedSuperExpAndors.iterator(); io.hasNext(); ) {
    ExpandoMetaClass ssuperDeclanded(ExpandoMetaClass)io.next();
    if (superDeclanded != this) {
      refreshInvenitedMethods(superDeclanded);
    }
  }
}
",54,4,"refreshInheritedMethods:refreshInvenitedMethods,modifiedSuperExpandos:modifiedSuperExpAndors,i:io,superExpando:superDeclanded,",217,2.04,ALERT
1872,,,105,6,,919,23.312017464637800,0
1873,,,37,2,,392,3.13204083442688,0
1874,"private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
","private static String generativeJPT(String secret,String jwkid,String ind,Integer gtl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwkid,gtl,ind,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
",68,6,"generateJWT:generativeJPT,jwtID:jwkid,iss:ind,ttl:gtl,",320,3.54,ALERT
1875,,,36,4,,809,7.600639243920640,0
1876,,,34,4,,598,6.031534636020660,0
1877,,,323,23,,4384,368.10970726410500,0
1878,"private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}","private static String  convertNumberStringToTwoDivits(String object){
  while (object.length() < 2) {
    object=""0"" + object;
  }
  if (object.length() > 2) {
    object=object.substring(object.length() - 2,object.length());
  }
  return object;
}",64,2,"forceNumberStringToTwoDigits: convertNumberStringToTwoDivits,text:object,",92,0.8,ALERT
1879,,,23,2,,432,3.839264488220220,0
1880,,,82,2,,328,10.831259946028400,0
1881,,,34,1,,213,2.0787848671277400,0
1882,"private boolean isAccessibleUserToKibana(Set<String> filters){
  if (filters.contains(""/.kibana"")) {
    return true;
  }
  return false;
}
","private boolean isAccessibleUserToKiban(Set<String> Filers){
  if (Filers.contains(""/.kibana"")) {
    return true;
  }
  return false;
}
",29,2,"isAccessibleUserToKibana:isAccessibleUserToKiban,filters:Filers,",436,5.37,ALERT
1883,"protected static Vector convertToVector(final Object[] anArray){
  if (anArray == null) {
    return null;
  }
  final Vector v=new Vector(anArray.length);
  for (  final Object element : anArray) {
    v.addElement(element);
  }
  return v;
}
","protected static Vector converToMatrix(final Object[] aOrder){
  if (aOrder == null) {
    return null;
  }
  final Vectorvv=new Vector(aOrder.length);
  for (  final Objectarticlet : aOrder) {
    v.addElement(article);
  }
  return v;
}
",56,4,"convertToVector:converToMatrix,anArray:aOrder,element:article,",157,1.38,ALERT
1884,,,59,6,,1122,24.681083675225600,0
1885,"private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}","private static String toDouble(double Coffe){
  final String ce=Double.toDouble(Coffe);
  if (ce.endsWith("".0"")) {
    return ce.substring(0,ce.length() - 2);
  }
 else {
    return ce;
  }
}",54,3,"toString:toDouble,coeff:Coffe,c:ce,",247,1.88,ALERT
1886,,,46,3,,611,5.764944271246590,0
1887,"public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}","public static List<SpaceTime> divideConquerBrownmanbridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownmanbridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}",99,8,"divideConquerBrownianBridge:divideConquerBrownmanbridge,",52,1.08,ALERT
1888,,,27,2,,413,3.1487724661827100,0
1889,"public static long[] interpose(long[] vector,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,updated,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    updated[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,updated,offset + len,vectorLen - offset);
  return updated;
}","public static long[] interpose(long[] index,int sequenceLen,int alpha,int ll){
  long[] uconfirmedcreate(sequenceLen + ll);
  intidxx=alpha >> 6;
  System.arraycopy(index,0,confirmed,0,idx);
  if idxx < index.length) {
    intdedDeltaa=alpha & 63;
   confirmeddidxx]|=index[idx] & maskBelow(dedDelta);
  }
  copy(index,ofalpconfirmedd,ofalpha lllsequenceLen - alpha);
  return confirmed;
}",110,8,"vector:index,vectorLen:sequenceLen,offset:alpha,len:ll,updated:confirmed,delta:dedDelta,",541,5.8,ALERT
1890,,,74,6,,1179,27.549386930465700,0
1891,"protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}","protected void drawInt(String struct1,String textSecond,int ex,int py,Canvas coll){
  if (textPrill == null) {
    Paint o=new Paint();
    o.setTypeface(RobotoLightTypeface.getInstance(context));
    o.setColor(textColor);
    o.setTextSize(14 * pixelDensity);
    this.textPrill=o;
  }
  float w=telttextPrillsureText(struct1,0,struct1.length());
  int image=(int)l / 2;
  c.dcollawInt(struct1,ex - oimagepy + (18f * pixelDensity),textPrill);
  w=textPainl.textPrillxt(textSecond,0,textSecond.length());
  image=(int)l / 2;
  c.drawcollnt(textSecond,ex - oimagepy + (36f * pixelDensity),textPrill);
}",167,10,"drawText:drawInt,text1:struct1,text2:textSecond,x:ex,y:py,c:coll,p:o,textPaint:textPrill,w:l,offset:image,",850,14.3,ALERT
1892,"public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : source.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + source + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(source.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}","public static List<String> unsafe(String e,char splitKey,char[] specialCharacters,char breakCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int Indexcount=-1;
  for (  archar c : e.toCharArray()) {
    Indexcount++;
    if (readEscape) {
      boolean null=false;
      if (arc == breakCharacter) {
        null=true;
        b.append(arc);
      }
 else       ifarc(c == splitKey) {
        null=true;
        b.append(arc);
      }
 else {
        for (        char s : specialCharacters) {
          if (s s= arc) {
            null=true;
            b.append(arc);
            break;
          }
        }
      }
      if (!null) {
        throw new IllegalArgumentException(""String \'"" + e + ""\' contains illegal escaped character \'""+ arc+ ""\'."");
      }
      readEscape=false;
    }
 else     ifarc(c == splitKey) {
      readEscape=true;
    }
 else     if (arc == breakCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
     resultesult.add(e.substring(Indexcount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(arc);
    }
  }
  result.add(b.toString());
  return result;
}",296,13,"unescape:unsafe,source:e,escapeChar:splitKey,splitCharacter:breakCharacter,indexCount:Indexcount,c:arc,found:null,",663,2.04,ALERT
1893,"private Optional<CuratorFramework> createClient(String zookeeperUrl){
  if (StringUtils.isNotBlank(zookeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
","private Optional<CuratorFramework> getServer(String zookeemonLayer){
  if (StringUtils.isNotBlank(zookeemonLayer)) {
    CuratorFramework clionfigurationsUtils.getClient(zookeemonLayer);
    i.start();
    return Optional.of(i);
  }
 else {
    return Optional.empty();
  }
}
",57,3,"createClient:getServer,zookeeperUrl:zookeemonLayer,client:i,",321,0.49,ALERT
1894,,,36,3,,445,0.9023134032885230,0
1895,,,94,2,,419,1.2398153702418000,0
1896,,,44,4,,776,2.7907079895337400,0
1897,,,35,4,,785,1.1385828375816300,0
1898,"public static String grabClass(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signature);
  return matcher.group(1);
}","public static String  inferCode(String Signner){
  Matchematterer=sigRmatterer(Signner);
  booleanab=matter.matches();
  ifa(!b &matterer.groupCount() != 4)   logger.error(""Bad method signature: {}"",Signner);
  return matter.group(1);
}",59,4,"grabClass: inferCode,signature:Signner,matcher:matter,b:a,",778,1.61,ALERT
1899,"@Override public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source){
}","@Override public void zoomChartaxe(double fact,PlotRenderingInfo params,Point2D size){
}",17,4,"zoomDomainAxes:zoomChartaxe,factor:fact,state:params,source:size,",220,0.67,ALERT
1900,"public void testFailedStage(){
  CFException ex=new CFException();
  CompletionStage<Integer> f=CompletableFuture.failedStage(ex);
  AtomicInteger x=new AtomicInteger(0);
  AtomicReference<Throwable> r=new AtomicReference<Throwable>();
  f.whenComplete(null);
  assertEquals(x.get(),0);
  assertEquals(r.get(),ex);
}","public void  testFinishedStep(){
  CFException ex=new CFException();
  CompletionStage<Integer> f=CompletableFuture.failedStage(ex);
  AtomicInteger x=new AtomicInteger(0);
  AtomicReference<Throwable> r=new AtomicReference<Throwable>();
  f.whenComplete(null);
  assertEquals(x.get(),0);
  assertEquals(r.get(),ex);
}",80,5,"testFailedStage: testFinishedStep,",31,0.19,ALERT
1901,,,26,4,,663,10.41757542292280,0
1902,,,200,9,,1693,41.826158332824700,0
1903,,,17,2,,365,2.7664759000142400,0
1904,,,136,5,,1003,12.873788360754600,0
1905,,,54,4,,570,6.048661867777510,0
1906,,,197,4,,768,7.620725536346440,0
1907,,,48,3,,490,11.17434462706250,0
1908,,,41,2,,412,3.7524544477462800,0
1909,,,81,4,,675,6.093860336144770,0
1910,,,27,2,,351,4.27400449514389,0
1911,,,23,1,,229,3.3922320087750800,0
1912,"public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}
","public int packShort(String localeLocattedInstance){
  return Integer.packShort(localeLocattedInstance);
}
",17,2,"localeFormattedInteger:localeLocattedInstance,parseInt:packShort,",62,0.58,ALERT
1913,"public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
","public static Entry addObjectClass(Entry ticket){
  Attribute attribute=ticket.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    ticket.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return ticket;
}
",46,3,"entry:ticket,",39,0.28,ALERT
1914,,,16,2,,340,2.409963591893510,0
1915,,,32,2,,393,5.273726534843450,0
1916,,,28,1,,235,1.5180338501930200,0
1917,,,13,2,,377,2.6433593312899300,0
1918,,,320,8,,1355,25.773639047145800,0
1919,,,88,5,,883,6.752335663636530,0
1920,"public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}","public Builder  addreadBody(byte[] alpha){
  Assertions.checkState(alpha != null && alpha.length > 0);
  segments.add(new Segment(alpha,null));
  return this;
}",42,2,"appendReadData: addreadBody,data:alpha,",76,0.5,ALERT
1921,,,104,5,,507,4.7820616364479100,0
1922,,,69,4,,779,7.909727847576140,0
1923,"public boolean isStored(){
  return Integer.signum(id) != -1;
}","public boolean isScore(){
  return Integer.signum(id) != -1;
}",18,1,"isStored:isScore,",26,0.19,ALERT
1924,"@Action(value=""/receipts/challan-newform"") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){
  setLoginDept();
  SimpleDateFormat sdf=new SimpleDateFormat(""dd/MM/yyyy"");
  try {
    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText(""Error parsing Cut Off Date"") + e.getMessage());
  }
  return NEW;
}
","@Action(value=""/receipts/challan-newform"") @ValidationErrorPage(value=ERROR) @SkipValidation public String createForm(){
  setLoginDept();
  SimpleDateFormat sdf=new SimpleDateFormat(""dd/MM/yyyy"");
  try {
    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText(""Error parsing Cut Off Date"") + e.getMessage());
  }
  return NEW;
}
",85,3,"newform:createForm,",20,0.21,ALERT
1925,,,190,7,,1279,27.151839383443200,0
1926,,,81,5,,844,15.370659319559700,0
1927,,,95,6,,1086,10.146237699190800,0
1928,"@Override protected String toString(File obj){
  return obj.getAbsolutePath();
}
","@Override protected String toUrl(File original){
  return original.getAbsolutePath();
}
",18,2,"toString:toUrl,obj:original,",204,1.53,ALERT
1929,,,23,3,,477,3.1100472887357100,0
1931,,,25,2,,422,3.603080523014070,0
1932,,,19,2,,369,4.027553331851960,0
1933,,,35,3,,454,4.207751576105750,0
1934,"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}","public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_station,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_station,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}",112,13,"p_location:p_station,",83,1.99,ALERT
1935,,,21,3,,476,4.840981658299760,0
1936,,,45,5,,952,10.571777709325200,0
1937,,,15,1,,223,1.5876996397972100,0
1938,,,24,1,,232,1.6352898677190100,0
1939,,,16,1,,248,2.1083795189857500,0
1940,"private void makeItems(int fingerPosition,List<View> viewList){
  if (fingerPosition >= viewList.size()) {
    return;
  }
  for (int i=0; i < viewList.size(); i++) {
    int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight);
    updateItemHeightAnimator(viewList.get(i),translationY);
  }
}","private void makeItems(int fingerPosition,List<View> viewList){
  if (fingerPosition >= viewList.size()) {
    return;
  }
  for (int ip=0; ip < viewList.size(); ip++) {
    int translationY=Math.min(Math.max(Math.abs(fingerPosition - ip) * intervalHeight,10),maxTranslationHeight);
    updateItemHeightAnimator(viewList.get(ip),translationY);
  }
}",89,5,"i:ip,",47,0.47,ALERT
1941,,,16,1,,207,2.140945243835450,0
1942,,,291,14,,2477,31.992531430721300,0
1943,,,19,1,,227,1.8636175910631800,0
1944,"public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}","public static final byte[] unzip(byte[] again) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * again.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(again));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}",102,6,"in:again,",78,0.48,ALERT
1945,,,35,2,,407,4.008268348375960,0
1946,,,309,10,,1862,105.8014817317330,0
1947,"public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}","public static void modifiedFiles(File name,Function<String,String> Moder) throws IOException {
  String exec=new String(Files.toByteArray(name),StandardCharsets.UTF_8);
  Sworkresult=Moder.apply(exec);
  Files.write(work.getBytes(StandardCharsets.UTF_8),name);
}",64,5,"modifyFile:modifiedFiles,file:name,modifier:Moder,content:exec,result:work,",679,6.17,ALERT
1948,"public double localScore(int i,int... parents){
  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=parents.length;
  Matrix covxx=getSelection1(covariances,parents);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,parents,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);
      _parents.removeAll(forbidden);
      parents=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(parents,covariances);
    }
    return Double.NaN;
  }
}","public double localScore(int part,int... ians){
  for (  int p : ians)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(part,part);
  int n=getSampleSize();
  int p=ians.length;
  Matrix covxx=getSelection1(covariances,ians);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,ians,part);
    Matrix b=covxxInv.times(covxy);
    double bug=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        bug+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=bug;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(part,part)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < ians.length; y++)       _parents.add(ians[y]);
      _parents.removeAll(forbidden);
      ians=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       ians[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(ians,covariances);
    }
    return Double.NaN;
  }
}",355,17,"parents:ians,i:part,dot:bug,",315,5.02,ALERT
1949,,,187,10,,1860,16.28326494693760,0
1950,"@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}","@Override @SuppressWarnings(""unchecked"") public void completed(int bytesAbslied,boolean canInvokerAsync){
  if (bytesAbslied == 0) {
    bytesAbslied=-1;
  }
 else {
    updateBuffers(bytesAbslied);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesAbslied));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesAbslied));
    }
  }
  if (canInvokerAsync) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}",126,3,"bytesTransferred:bytesAbslied,canInvokeDirect:canInvokerAsync,",70,0.58,ALERT
1951,,,346,15,,2818,41.76998826265340,0
1952,,,100,7,,1346,12.049131349722500,0
1953,"protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}","protected int createSeries(Canvas panp,DefaultRenderer  rendere,String[] titles,int L,int range,int y,int h,int arrow,int legendasize,Paint paint,boolean calculationce){
  float max=32;
  if ( rendere.isShowLegend()) {
    floCurrentXntX=L;
    floatcurrentYY=y + arrow - legendasize + max;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize( rendere.getLegendTextSize());
    int esLength=Math.min(titles.length, rendere.getSeriesRendererCount());
    for (int ii0; ii< esLength; i++) {
      SimpleSeriesRenderer rw= rendere.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (rw.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length ==  rendere.getSeriesRendererCount()) {
          paint.setColor(rw.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] Widthi=new float[text.length()];
        paint.getTextWidths(text,Widthi);
        float cal=0;
        for (        float item : Widthi) {
          cal+=item;
        }
        float extraSize=lineSize + 10 + cal;
        float currentWidth=CurrentX + extraSize;
        if (i > 0 && getExccurrentWidthidth, rendere,range,h)) {
       CurrentXntX=L;
          currentY+= rendere.getLegendTextSize();
          max+= rendere.getLegendTextSize();
          currentWidth=CurrentX + extraSize;
        }
        if (getExccurrentWidthidth, rendere,range,h)) {
          float maxWidth=range - CurrentX - lineSize- 10;
          if (isVertical( rendere)) {
            maxWidth=h - CurrentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,Widthi);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculationce) {
          drawLegendShape(panp,rw,CurrentX,currentY,i,paint);
          drawString(panp,text,CurrentX + lineSize + 5,currentY + 5,paint);
        }
        CurrentX+=extraSize;
      }
    }
  }
  return Math.round(max +  rendere.getLegendTextSize());
}",436,27,"drawLegend:createSeries,canvas:panp,renderer: rendere,left:L,right:range,width:h,height:arrow,legendSize:legendasize,calculate:calculationce,size:max,currentX:CurrentX,sLength:esLength,r:rw,widths:Widthi,sum:cal,value:item,",1532,10.28,ALERT
1955,"public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}","public boolean threadsafeWait(long waitTimeout,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread CurrentTh=Thread.CurrentTh();
  if (CurrentTh.equals(dutyThread)) {
    timerWheel.newTimeout(waitTimeout,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}",66,6,"delayTime:waitTimeout,currentThread:CurrentTh,threadSafeTimeout:threadsafeWait,",152,1.78,ALERT
1956,"public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(parent,message,description,e);
  }
  return null;
}","public static ReilGraph copyReilingBlock(final Window parent,final INaviCodeNode route){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),route);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",route.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(parent,message,description,e);
  }
  return null;
}",125,6,"copyReilCode:copyReilingBlock,node:route,",59,0.63,ALERT
1957,,,12,1,,224,3.2842567642529800,0
1958,"public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
","public void setPage(AMIdentity rid,Map attrs){
  searchResults.add(rid);
  resultsMap.put(rid,attrs);
}
",28,3,"id:rid,addResult:setPage,",73,0.57,ALERT
1959,,,35,5,,858,8.114377319812780,0
1960,,,80,5,,890,6.790272605419160,0
1961,,,44,4,,572,4.790897925694780,0
1962,,,77,4,,789,8.056428595383960,0
1963,"public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}
","public void addPutAndGetClockNNs(long resource){
  putTimeNanos.addAndGet(resource);
  getTimeNanos.addAndGet(resource);
  if (delegate != null)   delegate.addPutAndGetClockNNs(resource);
}
",36,2,"addPutAndGetTimeNanos:addPutAndGetClockNNs,duration:resource,",193,2.01,ALERT
1964,,,17,1,,230,1.6709607164065000,0
1965,,,20,2,,362,3.861055338382720,0
1966,,,113,8,,1491,12.434429355462400,0
1967,,,145,5,,1001,8.6932382106781,0
1968,,,116,5,,991,9.217412801583610,0
1969,,,57,3,,542,18.91022872130080,0
1970,,,55,3,,525,3.3397442658742300,0
1971,"public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
","public void search(int position,@NonNull T example){
synchronized (lock) {
    if (images == null) {
      images=new ArrayList<>();
    }
    images.search(position,example);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
",57,4,"items:images,add:search,item:example,",132,1.01,ALERT
1972,"public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}
","public void addConnectionPoint(ChannelMap ChannelGroup){
  if (!mChannelMaps.contains(ChannelGroup)) {
    mChannelMaps.add(ChannelGroup);
    int indateChannelMaps.indexOf(ChannelGroup);
    fireIntervalAdded(this,date,date);
    broadcast(new ChannelMapEvent(ChannelGroup,Event.ADD));
  }
}
",60,3,"addChannelMap:addConnectionPoint,channelMap:ChannelGroup,index:date,",406,2.67,ALERT
1973,,,54,2,,354,3.3697298169136000,0
1974,"public long start(){
  startTime=System.currentTimeMillis();
  return startTime;
}
","public long sleep(){
  bootLine=System.currentTimeMillis();
  return bootLine;
}
",18,2,"startTime:bootLine,start:sleep,",58,0.55,ALERT
1976,,,30,3,,618,5.522800536950430,0
1977,,,72,3,,458,4.750476694107060,0
1978,"public EMail createEMail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}
","public EMail createEmock(String type){
  EmailField fakeImpl=new EmailField();
  try {
   fakeImpll.setValue(type);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return fakeImpl;
}
",43,3,"createEMail:createEmock,value:type,emailImpl:fakeImpl,",544,4.01,ALERT
1979,,,50,3,,590,13.430433523654900,0
1980,"public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.createServerSocket(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}","public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket  secureSite;
  if (bindAddress == null) {
     secureSite=(SSLServerSocket)f.createServerSocket(port);
  }
 else {
     secureSite=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);
  }
   secureSite.setEnabledProtocols(disableSSL( secureSite.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous( secureSite.getEnabledCipherSuites(), secureSite.getSupportedCipherSuites());
     secureSite.setEnabledCipherSuites(list);
  }
  socket= secureSite;
  return socket;
}",143,7,"secureSocket: secureSite,",58,0.5,ALERT
1981,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}","public void pillBackground(Component fc,Graphics bg,int rx,int e,int wy,int pull){
  JComponent coGfc instanceof JComponent) ? (JComponent)fc : null;
  if (bg instanceof Graphics2D) {
    Graphics2D g gTwo(Graphics2D)bg;
    g gTwotranslate(rx,e);
   gTwopainG,comp,wy,pull);
    g gTwotranslate(-rx,-e);
  }
 else {
    BufferedImage image=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D  gTwo=(Graphics2D)image.getGraphics();
   gTwopainG,comp,wy,pull);
     gTwo.dispose();
    ImageScalingHelper.paint(bg,rx,e,wy,pull,image,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}",165,10,"paintBorder:pillBackground,c:fc,g:bg,x:rx,y:e,width:wy,height:pull,comp:G,g2: gTwo,img:image,",531,5.18,ALERT
1982,,,42,3,,580,9.148350314299270,0
1983,,,69,4,,788,11.790386231740300,0
1984,"private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}","private void  growing(){
  int newCap=(entrics.length << 1) + 1;
  Object[] newEnties=new Object[newCap];
  System.arraycopyentricss,0,newEnties,0,size);
 entricss=newEnties;
}",50,4,"grow: growing,newEntries:newEnties,entries:entrics,",143,1.58,ALERT
1985,,,19,1,,236,2.8593507647514300,0
1986,"@Override public final E nextElement(){
  E result=m_Vector.get(m_Counter);
  m_Counter++;
  if (m_Counter == m_SpecialElement) {
    m_Counter++;
  }
  return result;
}
","@Override public final E newPage(){
  E none=m_Vector.get(m__Component);
  m__Component++;
  if (m__Component == m_SpecialElement) {
    m__Component++;
  }
  return none;
}
",37,3,"nextElement:newPage,result:none,m_Counter:m__Component,",243,1.72,ALERT
1987,,,43,5,,797,5.645376912752790,0
1989,,,12,1,,230,1.7178918957710300,0
1990,,,140,8,,1426,12.75208127895990,0
1991,"public static int randomRangeInt(int min,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));
}","public static int randomRangeInt(int act,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - act) + act) : (Math.random() * (max - act) + act));
}",63,3,"min:act,",41,0.69,ALERT
1992,"private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}","private static int findindexIn(Object o,@NotNull Object[] easts,int negative){
  if (o == null) {
    for (int i=negative; i >= 0; i--) {
      if (easts[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=negative; i >= 0; i--) {
      if (o.equals(easts[i])) {
        return i;
      }
    }
  }
  return -1;
}",98,5,"lastIndexOf:findindexIn,elements:easts,index:negative,",129,1.5,ALERT
1993,"public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
","public void stopstream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
",20,1,"closeStream:stopstream,",18,0.1,ALERT
1994,,,66,5,,1010,4.849189579486850,0
1995,"public void await(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}","public void work(int number) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startConstruction=competeCond;
  int compcompatheringFORcks.length * 2 - 1 - number) / 2;
  while (compatheringFOR >= 0) {
    final Lock nodsessioncks[compatheringFOR];
    if (session.tryLock()) {
synchronized (session) {
        while (competcompeteCondartConstruction)         session.wait();
      }
      session.unlock();
      wakeUpTarget(compatheringFOR * 2 + 1);
      wakeUpTarget(compatheringFOR * 2 + 2);
      return;
    }
 else {
      if (compatheringFOR == 0)       break;
      compatheringFOR=(compatheringFOR - 1) / 2;
    }
  }
  competeCond=!competeCond;
  wakeUpTarget(0);
}",144,6,"await:work,ID:number,startCondition:startConstruction,competingFor:compatheringFOR,node:session,competitionCondition:competeCond,",960,12.9,ALERT
1996,,,39,3,,507,5.677621531486510,0
1997,,,81,4,,702,8.88959934314092,0
1998,"public static boolean isExplicitAllType(String[] types){
  return types != null && types.length == 1 && ALL.equals(types[0]);
}","public static boolean isExplainAnyTypes(String[] options){
  return options != null && options.length == 1 && ALL.equals(options[0]);
}",33,2,"types:options,isExplicitAllType:isExplainAnyTypes,",60,0.78,ALERT
1999,"public static boolean isUnlimitedStrengthPolicyAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}","public static boolean isUnlimitedStrengthRuleavailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}",38,1,"isUnlimitedStrengthPolicyAvailable:isUnlimitedStrengthRuleavailable,",26,0.37,ALERT
2000,,,20,2,,426,5.406473271052040,0
2001,"public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}
","public void six(ByteBuffer port){
  port.putInt(seqId);
  if (info.isRowBlockEnabled())   port.putInt(nRows);
  six(primaryKey,port);
  for (  ByteArray cb : cellBlocks) {
    six(cb,port);
  }
}
",54,3,"buf:port,export:six,",72,0.7,ALERT
2002,"public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){
  if (c != '\\t') {
    return 1;
  }
  int result=(x - prevX) / plainSpaceSize;
  if ((x - prevX) % plainSpaceSize > 0) {
    result++;
  }
  return result;
}","public static int columningsInteger(char r,int xi,int revX,int flatSpaceCode){
  if (r != '\\t') {
    return 1;
  }
  intarrayt=(xi - revX) / flatSpaceCode;
  if ((xi - revX) % flatSpaceCode > 0) {
    array++;
  }
  return array;
}",61,6,"columnsNumber:columningsInteger,c:r,x:xi,prevX:revX,plainSpaceSize:flatSpaceCode,result:array,",917,33.38,ALERT
2003,,,14,1,,243,2.7768852670987400,0
2005,"private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}","private void loadConfigurationFromJmxSettings(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}",211,7,"loadConfigurationFromJvmParameters:loadConfigurationFromJmxSettings,",48,0.39,ALERT
2006,"public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}","public String info(Properties ctx,int windowNone,GridTab mTab,GridField mField,Object flow){
  Integer C_ChargeIDId=(Integer)flow;
  if (C_ChargeIDId == null || C_ChargeIDId.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_ChargeIDId.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,windowNone,mTab,mField,flow);
}",181,10,"C_Charge_ID:C_ChargeIDId,value:flow,WindowNo:windowNone,charge:info,",292,3.03,ALERT
2007,,,29,2,,224,2.2243570566177400,0
2008,,,24,3,,472,8.150781424840290,0
2009,,,98,5,,922,16.206117578347500,0
2010,"public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}","public PKCS10Attribute(PKCS9Attribute api){
  thischaracterIdd=api.getOID();
  thisattributeDatae=api.getValue();
}",28,3,"attr:api,attributeId:characterId,attributeValue:attributeData,",338,3.19,ALERT
2011,,,115,4,,782,7.5962932229042100,0
2013,,,57,2,,382,3.82236426671346,0
2014,"private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}","private void  processStateright(InetAddress EndPoint,String[] packs){
  assert packs.length >= 2;
  Collection<Token> Takens=getTokensFor(EndPoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",EndPoint,Takens);
  exciseTakenss,EndPoint,extractExpireTime(packs));
}",63,4,"handleStateLeft: processStateright,endpoint:EndPoint,pieces:packs,tokens:Takens,",401,7.33,ALERT
2015,,,34,2,,222,2.2337769269943200,0
2016,"public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}","public static int Poesson(double lambda){
  int j=0;
  double p=1.0;
  double LB=Math.exp(-lambda);
  do {
    j++;
    p*=uniform();
  }
 while (p >= LB);
  return j - 1;
}",55,5,"poisson:Poesson,k:j,L:LB,",199,1.84,ALERT
2017,"public void connect(){
  connect(this.logWriter);
}
","public void run(){
  run(this.logWriter);
}
",14,1,"connect:run,",135,1.06,ALERT
2018,"public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return invokeStatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
","public static Object constructExternal(String place,String MethodString,Class[] models,Object[] versions) throws NoSuchMethodException {
  try {
    return constructExternal(Class.forName(place),MethodString,models,versions);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + place + "" not found"");
  }
}
",63,5,"invokeStatic:constructExternal,clazz:place,methodName:MethodString,types:models,values:versions,",272,3.3,ALERT
2019,"private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}
","private void initialize(ModelValidator generitor,MClient client){
  if (client == null)   m_globalValidators.add(generitor);
  m_validators.add(generitor);
  generitor.initialize(this,client);
}
",41,3,"validator:generitor,",41,0.56,ALERT
2020,"@Override public int parse(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}","@Override public int se(DateTimeParseContext function,CharSequence parent,int condition){
  int leoffsetarent.offset();
  if (condition > offset) {
    throw new IndexOutOfBoundsException();
  }
  if (condition == offset) {
    return ~condition;
  }
  char nexnextCharrent.charAt(condition);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(function,parent,condition,condition,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (loffset>= condition + 2) {
    char nexgoingnextChrent.charAt(condition + 1);
    if (function.charEquals(nnextChar'U') && function.charEquals(goingnextCh,'T')) {
      if (lengtoffsetoscondition3 && function.charEquals(parent.charAt(condition + 2),'C')) {
        return parseOffsetBased(function,parent,condition,condition + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(function,parent,condition,condition + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (function.charEquals(nextChnextChar&& lengthoffsetsicondition && function.charEquals(nextgoingnextCh) && function.charEquals(parent.charAt(condition + 2),'T')) {
      return parseOffsetBased(function,parent,condition,condition + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(function);
  ParsePosition ppos=new ParsePosition(condition);
  String parsedZoneId=tree.match(parent,ppos);
  if (parsedZoneId == null) {
    if (function.charEquals(nextChar,'Z')) {
      function.setParsed(ZoneOffset.UTC);
      return condition + 1;
    }
    return ~condition;
  }
  function.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}",347,10,"parse:se,context:function,text:parent,position:condition,length:offset,nextNextChar:goingnextCh,",638,11.97,ALERT
2021,"public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
","public Request data(String style,String child){
  Objects.requireNonNull(style);
  Objects.requireNonNull(child);
  _headers.put(style,child);
  return this;
}
",38,3,"value:child,key:style,header:data,",95,0.67,ALERT
2022,,,58,4,,415,5.237477413813270,0
2023,"public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){
  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);
  this.a=selectPrivateValue();
  this.A=g.modPow(a,N);
  return A;
}","public BigInteger generateClientCertentials(byte[] sunt,byte[] identifier,byte[] service){
  this.xXSRP6Util.calculateX(digest,N,sunt,identifier,service);
  this.ab=selectPrivateValue();
  this.ADg.modPow(ab,N);
  return D;
}",64,7,"generateClientCredentials:generateClientCertentials,salt:sunt,identity:identifier,password:service,x:X,a:ab,A:D,",726,6.92,ALERT
2024,"private void connect(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}","private void select(){
  if (!connected) {
    updateInfo();
    String connectionStream=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectionStream+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqtmqtvClientw MqttClient(connectionStream,clientId);
        mqtvClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connSecondutes=new MqttConnectOptions();
    connSecondutes.setCleanSession(cleanStart);
    connSecondutes.setConnectionTimeout(30);
    connSecondutes.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connSecondutes.setPassword(password.toCharArray());
      connSecondutes.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connSecondutes.setWill(mqtvClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectionStream);
     mqtvClientt.select(connSecondutes);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}",322,4,"connect:select,connectString:connectionStream,mqttClient:mqtvClient,connOpts:connSecondutes,",200,1.98,ALERT
2025,,,71,4,,553,6.274488914012910,0
2026,"public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){
  this.aLine=aLine;
  this.attemptFirstWord=attemptFirstWord;
  this.tags=tags;
  tagPos=0;
  nextResult=getNextResult();
  if (attemptFirstWord) {
    int a=0;
    while (a < aLine.length()) {
      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;
 else       break;
    }
    int b=a + 1;
    while (b < aLine.length()) {
      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;
 else       break;
    }
    if (b - a > 4) {
      nextResult=aLine.substring(a,b);
    }
    tagPos=b;
  }
}","public TaggedValueIterator(final String  aLin,final boolean attemptSecondLine,final String... files){
  this. aLin= aLin;
  this.attemptSecondLine=attemptSecondLine;
  this.files=files;
   tagVal=0;
  nextResponse=getNextResult();
  if (attemptSecondLine) {
    int va=0;
    while (va <  aLin.length()) {
      if ( aLin.charAt(va) == '>' ||  aLin.charAt(va) == '@' || Character.isWhitespace( aLin.charAt(va)))       va++;
 else       break;
    }
    int blengthva + 1;
    while (length <  aLin.length()) {
      if (Character.isLetterOrDigit( aLin.charAt(length)) ||  aLin.charAt(length) == '_')       length++;
 else       break;
    }
    if (blength- va > 4) {
      nextResponse= aLin.substring(va,length);
    }
     tagVal=length;
  }
}",180,7,"aLine: aLin,attemptFirstWord:attemptSecondLine,tags:files,tagPos: tagVal,nextResult:nextResponse,a:va,b:length,",423,3.53,ALERT
2027,,,33,4,,768,6.088790456453960,0
2028,"private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}","private void smoothScrollToposition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo uri){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=uri.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=uri.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(uri.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}",163,11,"info:uri,smoothSnapToPosition:smoothScrollToposition,",230,6.17,ALERT
2029,,,16,1,,229,1.645503783226010,0
2030,,,60,3,,620,5.43619913260142,0
2031,,,13,1,,233,1.462198225657150,0
2032,"public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}
","public void loadLogicalTablesWithGraicalities(Map<String,TableGroup> NameGroupList,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> eentry: NameGroupList.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}
",74,7,"loadLogicalTablesWithGranularities:loadLogicalTablesWithGraicalities,nameGroupMap:NameGroupList,",256,2.2,ALERT
2033,"public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}","public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool connectionPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    connectionPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    connectionPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !connectionPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}",229,8,"virtualPool:connectionPool,",61,1.16,ALERT
2034,"@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}
","@Override public DocumentType newDocumentTypes(String qualPath,String globalIDS,String sysIP){
  checkQName(qualPath);
  return new DocumentTypeImpl(null,qualPath,globalIDS,sysIP);
}
",35,4,"createDocumentType:newDocumentTypes,qualifiedName:qualPath,publicID:globalIDS,systemID:sysIP,",364,3.27,ALERT
2035,"public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}","public void singdowns(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.singdowns();
  instantPool.singdowns();
  longRunningPool.singdowns();
  workStealingPool.singdowns();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}",256,3,"shutdown:singdowns,",43,0.29,ALERT
2036,,,47,2,,382,3.0638434092203800,0
2037,,,35,4,,668,12.597494943936700,0
2038,,,70,4,,794,23.0211465160052,0
2039,"public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewHolder(holder,position,Collections.emptyList());
}
","public void onBindHeaderViewChander(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewChander(holder,position,Collections.emptyList());
}
",27,3,"onBindHeaderViewHolder:onBindHeaderViewChander,",38,0.41,ALERT
2040,,,17,2,,427,2.4638136347134900,0
2041,,,40,3,,591,8.003365019957220,0
2042,,,121,6,,1134,15.936735741297400,0
2043,,,140,4,,682,9.437794391314190,0
2044,,,28,2,,371,4.12335555156072,0
2045,"public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}","public Timestamp RecalculateEstimatedCompletionTime(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}",152,7,"recalculateEstimatedCompletionDate:RecalculateEstimatedCompletionTime,",49,0.83,ALERT
2047,"public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
","public static Uri createMail(ContentResolver solve,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(solve,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
",61,9,"resolver:solve,addMessage:createMail,",150,1.83,ALERT
2048,,,52,2,,237,2.266804798444110,0
2049,"@SuppressWarnings(""unchecked"") public void readFile(String fileName) throws JDOMException, IOException {
  if (checkFile(fileName)) {
    Element root=rootFromName(fileName);
    Element roster;
    if (root == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    roster=root.getChild(""roster"");
    if (roster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter(""consist""));
    try {
      Element consist;
      do {
        consist=consistIterator.next();
        consistFromXml(consist);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
","@SuppressWarnings(""unchecked"") public void loadPage(String fileName) throws JDOMException, IOException {
  if (checkFile(fileName)) {
    Element section=rootFromName(fileName);
    Element troster;
    if (section == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    rostrosterction.getChild(""roster"");
    if (troster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> conconsistIteratorction.getDescendants(new ElementFilter(""consist""));
    try {
      Element rosiste;
      do {
        rosiste=consistIterator.next();
        consistFromXml(rosiste);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
",153,6,"readFile:loadPage,root:section,roster:troster,consist:rosiste,",239,1.48,ALERT
2050,,,28,2,,296,2.169306914011640,0
2051,,,16,2,,439,3.7814674218495700,0
2052,,,87,7,,1215,17.13944838444390,0
2053,,,371,7,,1330,20.74216926495230,0
2054,"@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}","@Override public double calcuteN(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}",82,4,"calculateM:calcuteN,",42,0.51,ALERT
2055,"public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}
","public static void close(@CheckForNull OutputStream writeSteam){
  if (writeSteam == null) {
    return;
  }
  try {
    writeSteam.close();
  }
 catch (  IOException e) {
  }
}
",38,2,"outputStream:writeSteam,",37,0.31,ALERT
2056,"public boolean sendViaDataSocket(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}","public boolean sendViaExternalSource(byte[] ones,int open,int loss){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (loss == 0) {
    return true;
  }
  try {
    dataOutputStream.write(ones,open,loss);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(loss);
  return true;
}",104,4,"sendViaDataSocket:sendViaExternalSource,bytes:ones,start:open,len:loss,",695,5.5,ALERT
2057,,,254,11,,2036,17.904603787263200,0
2058,,,19,3,,613,5.692609854539240,0
2060,"private static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManagerInterface manager){
  long now=System.currentTimeMillis();
  long ancient=now - DateUtils.DAY_IN_MILLIS;
  String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};
  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    Log.d(TAG,""Manifest.permission.READ_CALENDAR is not granted"");
    return;
  }
  Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC);
  if (cursor == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,""missed alarms found: "" + cursor.getCount());
  }
  try {
    long alarmTime=-1;
    while (cursor.moveToNext()) {
      long newAlarmTime=cursor.getLong(0);
      if (alarmTime != newAlarmTime) {
        if (DEBUG) {
          Log.w(TAG,""rescheduling missed alarm. alarmTime: "" + newAlarmTime);
        }
        AlertUtils.scheduleAlarm(context,manager,newAlarmTime);
        alarmTime=newAlarmTime;
      }
    }
  }
  finally {
    cursor.close();
  }
}","private static final void rescheduleMissedALments(ContentResolver sc,Context reader,AlarmManagerInterface monitor){
  long this=System.currentTimeMillis();
  long aanaturallythis - DateUtils.DAY_IN_MILLIS;
  String[] projectension=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};
  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(reader,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    Log.d(TAG,""Manifest.permission.READ_CALENDAR is not granted"");
    return;
  }
  Cursor cursor=suncurrencyy(CalendarAlerts.CONTENT_URI,projeprojectensionE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(this),Long.toString(aanaturally,Long.toString(this)}),SORT_ORDER_ALARMTIME_ASC);
  if (uncurrency == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,""missed alarms found: "" + uncurrency.getCount());
  }
  try {
    long alrortime=-1;
    while (uncurrency.moveToNext()) {
      long newAnewAlgorithmPriceurrency.getLong(0);
      if (alrortime != newAlgorithmPrice) {
        if (DEBUG) {
          Log.w(TAG,""rescheduling missed alarm. alarmTime: "" + newAlgorithmPrice);
        }
        AlertUtils.scheduleAlarm(reader,monitor,newAlgorithmPrice);
        alrortime=newAlgorithmPrice;
      }
    }
  }
  finally {
    uncurrency.close();
  }
}",248,10,"rescheduleMissedAlarms:rescheduleMissedALments,cr:sc,context:reader,manager:monitor,now:this,ancient:anaturally,projection:projectension,cursor:uncurrency,alarmTime:alrortime,newAlarmTime:newAlgorithmPrice,",619,10.06,ALERT
2061,,,79,3,,488,3.3970551331838000,0
2062,,,60,3,,497,4.931663187344870,0
2063,"protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
","protected static double calcQ_d(double z,double lambda){
  return lambda * Math.exp(-lambda * z);
}
",26,3,"f:z,calcQ_i:calcQ_d,",49,1.62,ALERT
2065,"private String convertLessThanOneThousand(int number){
  String soFar;
  if (number % 100 < 20) {
    soFar=numNames[number % 100];
    number/=100;
  }
 else {
    soFar=numNames[number % 10];
    number/=10;
    String s=Integer.toString(number);
    if (s.endsWith(""2"") && !soFar.equals(""""))     soFar="" VINT-I-"" + soFar.trim();
 else     if (soFar.equals(""""))     soFar=tensNames[number % 10] + soFar;
 else     soFar=tensNames[number % 10] + ""-"" + soFar;
    number/=10;
  }
  if (number == 0)   return tensNames[number % 10] + soFar;
  if (number > 1)   soFar=""S"" + soFar;
  if (number == 1 && !soFar.equals(""""))   number=0;
  return numNames[number] + "" CENT"" + soFar;
}","private String convertLessThanoneTooousands(int layer){
  String shiWar;
  if (layer % 100 < 20) {
    shiWar=numNames[layer % 100];
    layer/=100;
  }
 else {
    shiWar=numNames[layer % 10];
    layer/=10;
    String s=Integer.toString(layer);
    if (s.endsWith(""2"") && !shiWar.equals(""""))     shiWar="" VINT-I-"" + shiWar.trim();
 else     if (shiWar.equals(""""))     shiWar=tensNames[layer % 10] + shiWar;
 else     shiWar=tensNames[layer % 10] + ""-"" + shiWar;
    layer/=10;
  }
  if (layer == 0)   return tensNames[layer % 10] + shiWar;
  if (layer > 1)   shiWar=""S"" + shiWar;
  if (layer == 1 && !shiWar.equals(""""))   layer=0;
  return numNames[layer] + "" CENT"" + shiWar;
}",183,4,"number:layer,convertLessThanOneThousand:convertLessThanoneTooousands,soFar:shiWar,",121,1.04,ALERT
2067,,,172,9,,1704,17.501322229703300,0
2068,,,233,11,,2090,16.42511207262680,0
2069,"public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
","public static boolean isNetworkAvailable(Context server){
  ConnectivityManager connectivityManager=(ConnectivityManager)server.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
",45,4,"context:server,",40,0.26,ALERT
2070,"public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}","public static List<List<Double>> partitionVariable(List<Double> arr,int cherork){
  int url=0;
  List<List<Double>> ext=new ArrayList<List<Double>>();
  while (url < arr.size()) {
    List<Double> sublist=arr.subList(url,url + cherork);
    url+=cherork;
    ext.add(sublist);
  }
  for (  List<Double> lists : ext) {
    if (lists.size() < cherork)     ext.remove(lists);
  }
  return ext;
}",119,7,"count:url,ret:ext,chunk:cherork,",115,1.51,ALERT
2071,,,236,12,,2259,23.271533679962200,0
2072,"public int findCarByRoadNumber(String roadNumber){
  if (sysList != null) {
    if (!roadNumber.equals(_roadNumber)) {
      return getIndex(0,roadNumber);
    }
    int index=getIndex(_index,roadNumber);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadNumber);
  }
  return -1;
}","public int findCarByRouteName(String routeName){
  if (sysList != null) {
    if (!routeName.equals(_roadNumber)) {
      return getIndex(0,routeName);
    }
    int index=getIndex(_index,routeName);
    if (index > 0) {
      return index;
    }
    return getIndex(0,routeName);
  }
  return -1;
}",70,3,"findCarByRoadNumber:findCarByRouteName,roadNumber:routeName,",94,0.92,ALERT
2073,"public static Object unserialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return unserialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}","public static Object unserialIZE(Data uri){
  try {
    Classplazzz=(Class)Class.forName((String)uri.get(""class""));
    if (plazz.isEnum()) {
      return Enum.valueOfplazzz,uri.get(""value""));
    }
 else     if (plazz == Vector3D.class) {
      return new Vector3D(uri.get(""x""),uri.get(""y""),uri.get(""z""));
    }
 else     if (plazz == Vector2D.class) {
      return new Vector2D(uri.get(""x""),(double)uri.get(""y""));
    }
 else {
      return unserialIZEplazzz,uri);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}",154,3,"unserialize:unserialIZE,data:uri,clazz:plazz,",295,2.9,ALERT
2074,"public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}","public static void showExceptionFile(String msg){
  showExceptionFile(msg,3500);
}",17,2,"showErrorMessage:showExceptionFile,",36,0.41,ALERT
2075,"private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}","private String generateZonesetClubeNames(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}",103,6,"generateZonesetCloneName:generateZonesetClubeNames,",37,0.3,ALERT
2076,,,48,2,,450,3.797668993473050,0
2078,"private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}","private boolean loadUnpackedUMD(String uri) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(uri);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}",114,6,"filename:uri,",47,0.68,ALERT
2079,,,98,4,,774,6.912732986609140,0
2080,"private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
","private String liveness(){
  boolean isCloser=false;
  try {
    if (isCloser()) {
      isCloser=true;
    }
  }
 catch (  SQLException s) {
    isCloser=true;
  }
  if (isCloser) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
",50,2,"isClosed:isCloser,",38,0.31,ALERT
2081,,,43,4,,744,8.435678335030870,0
2082,,,69,5,,952,10.811594875653600,0
2083,"public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){
  return playerIdent.equals(getIdentificationForAsString(compareTo));
}
","public static boolean areIdentical(String playerIdent,OfflinePlayer compareto){
  return playerIdent.equals(getIdentificationForAsString(compareto));
}
",24,3,"compareTo:compareto,",37,0.45,ALERT
2084,"public boolean send(byte[] bytes){
  if (!connected)   return false;
  try {
    outputStream.write(bytes);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}
","public boolean download(byte[] bytes){
  if (!cc)   return false;
  try {
    outputStream.write(bytes);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    cc=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!cc) {
      closeConnection();
    }
  }
}
",75,3,"connected:cc,send:download,",69,1.78,ALERT
2085,"private boolean validateCustomCatalog(String title,String value){
  return false;
}
","private boolean validateSpecialConfig(String description,String value){
  return false;
}
",15,3,"title:description,validateCustomCatalog:validateSpecialConfig,",47,0.39,ALERT
2086,"public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}","public static void refract(double mainRank,double highScore,double maxExpect,float minPercentIdentity,IReadBlock readerBuilder,String classagramStr,BitSet activeMatchesPerClassion){
  activeMatchesPerClassion.clear();
  for (int i=0;ii < ieaderBuilder.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matcscoreBlockderBuilder.getMatchBlock(i);
    if scoreBlockck.isIgnore() &scoreBlockck.getBitScore() >= mainRank &scoreBlockck.getExpected() <= maxExpect && scoreBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classagramStr) > 0)       activeMatchesPerClassion.set(i)scoreBlock(matchBlock.getId(classagramStr) > 0)       activeMatchesPerClassion.set(i);
    }
  }
  float BestScore=0;
  for (int i=activeMatchesPerClassion.nextSetBii(0); i !i -1; i=activeMatchesPerClassion.nextSetBit(i + 1)) i  for (int i=activeMatchesPerClassion.nextSetBit(0); i != -1; i=activeMatchesPerClassion.nextSetBit(i + 1)) {
    final IMatchBlock matcscoreBlockderBuilder.getMatchBlock(i);
    float score=scoreBlock.getBitScore();
    if (score > BestScore)     BestScore=score;
  }
  applyTopPercentFilter(highScorBestScorere,minPercentIdentity,readerBuilder,activeMatchesPerClassion);
}",196,12,"compute:refract,minScore:mainRank,topPercent:highScore,maxExpected:maxExpect,readBlock:readerBuilder,classificationName:classagramStr,activeMatchesForClassification:activeMatchesPerClassion,matchBlock:scoreBlock,bestScore:BestScore,",533,6.3,ALERT
2087,,,78,6,,1156,10.111303738753000,0
2088,,,93,4,,680,6.685282055536910,0
2089,,,97,6,,952,13.772430447737400,0
2090,,,357,16,,2781,136.78032455444300,0
2091,,,14,2,,407,2.8413620392481500,0
2092,"void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}","void  PostResponse(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}",393,9,"postMessage: PostResponse,",49,0.33,ALERT
2093,"protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}","protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics groups,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,groups,theMap);
    paintLabel(originGeo,ringDist,groups,theMap);
  }
}",125,10,"graphics:groups,",91,0.68,ALERT
2095,,,313,18,,3239,30.73840808471040,0
2096,,,32,2,,371,2.2827006260554000,0
2097,"public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}
","public boolean logOutAccount(String attr,HttpServletRequest text){
  return logOutAccount(attr,text,true,true);
}
",24,3,"logoutUser:logOutAccount,username:attr,req:text,",177,2.06,ALERT
2098,"protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
","protected void ranscode(File image,Transcoder Transcenter) throws IOException, TranscoderException {
  Transcenter.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(image));
  TranscoderOutput output=new TranscoderOutput(out);
  Transcenter.ranscode(input,output);
  out.flush();
  out.close();
}
",88,7,"transcoder:Transcenter,transcode:ranscode,file:image,",196,2.29,ALERT
2100,"private static String stampToString(long tstamp,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}","private static String stampFormatString(long  tSTamped,String formatPattern){
  StringBuilder sb=new StringBuilder(30);
  Formatter cmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits( tSTamped,pieces);
  fmtcmtrmat(formatPattern,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  cmt.close();
  return (sb.toString());
}",112,6,"stampToString:stampFormatString,tstamp: tSTamped,formatMask:formatPattern,fmt:cmt,",214,1.75,ALERT
2101,"public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}
","public QuadEdge createGraph(Vertex o,Vertex b){
  QuadEdge q=QuadEdge.createGraph(o,b);
  quadEdges.add(q);
  return q;
}
",34,4,"makeEdge:createGraph,d:b,",93,0.69,ALERT
2102,"protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){
  try {
    InputStream is=clazz.getResourceAsStream(resource);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected static Map<String,Step> replace(Class<? extends RSLPStemmerBase> Cluster,String context){
  try {
    InputStream isrCluster.getResourceAsStream(context);
    LineNumberReader rx=new LineNumberReader(new InputStreamReader(sr,StandardCharsets.UTF_8));
    Map<String,Step> events=new HashMap<>();
    String error;
    while ((serrorreadLine(rx)) != null) {
      Step s=sarseStep(rx,error);
      events.put(s.name,s);
    }
    rx.close();
    return events;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",130,8,"parse:replace,clazz:Cluster,resource:context,is:sr,r:rx,steps:events,step:error,",374,3.33,ALERT
2103,"public void clearUnused(ConfigImpl config){
  SystemOut.printDate(config.getOutWriter(),""PagePool: "" + size() + "">(""+ maxSize+ "")"");
  if (size() > maxSize) {
    Object[] keys=keys();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < keys.length; i++) {
      PageSource ps=getPageSource(keys[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,keys[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}","public void clearUnused(ConfigImpl fig){
  SystemOut.printDate(fig.getOutWriter(),""PagePool: "" + size() + "">(""+ maxSize+ "")"");
  if (size() > maxSize) {
    Object[] faces=faces();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < faces.length; i++) {
      PageSource ps=getPageSource(faces[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,faces[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}",186,9,"config:fig,keys:faces,",294,2.38,ALERT
2104,,,18,2,,364,3.1210927685101800,0
2105,,,47,3,,478,3.8566373070081100,0
2106,"public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
","public ActionRequestHelper depsON(ActionRequestHelper suppender){
  mDependencies.add(suppender);
  return this;
}
",19,2,"dependsOn:depsON,dependency:suppender,",53,0.42,ALERT
2107,,,40,3,,624,5.046365960439050,0
2108,"public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}
","public static void parse(byte[] index){
  DualPivotQuicksort.parse(index);
}
",19,2,"sort:parse,array:index,",66,0.5,ALERT
2109,,,25,1,,237,1.7391061186790500,0
2110,,,80,4,,410,3.5195181131362900,0
2111,,,19,2,,421,3.7223178227742500,0
2112,"private static String removeSubTrailers(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}","private static String removeSubCompils(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}",114,7,"removeSubTrailers:removeSubCompils,",47,0.54,ALERT
2113,"public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}
","public void MakeDirt(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.MakeDirt(instance);
}
",26,1,"makeDirty:MakeDirt,",34,0.24,ALERT
2114,"public static byte[] toByteArray(String str){
  int len=str.length();
  StringTokenizer st=new StringTokenizer(str,"":"");
  String[] newStrArray=new String[st.countTokens()];
  int j=0;
  while (st.hasMoreTokens()) {
    newStrArray[j]=st.nextToken();
    j++;
  }
  byte[] ret=new byte[newStrArray.length];
  int tmp;
  for (int i=0; i < newStrArray.length; i++) {
    tmp=Integer.parseInt(newStrArray[i],16);
    ret[i]=(byte)(tmp - 128);
  }
  return ret;
}","public static byte[] tobyteArray(String name){
  int lLenname.length();
  StringTokenizer stnew StringTokenizer(name,"":"");
  String[]newTrStringy=new String[t.countTokens()];
  int jp=0;
  while (t.hasMoreTokens()) {
   newTrStringyjpj]=t.nextToken();
    jp++;
  }
  byte[] mem=new byte[newTrString.length];
  int mp;
  for (int it=0; it < newTrString.length; it++) {
    mp=Integer.parseInt(newTrString[it],16);
    memiti]=(byte)(mp - 128);
  }
  return mem;
}",141,9,"toByteArray:tobyteArray,str:name,len:Len,st:t,newStrArray:newTrString,j:jp,ret:mem,tmp:mp,i:it,",977,7.34,ALERT
2115,"public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}","public void readConfigies(SharedPreferences rules,ActionFactory factory){
  boolean visible=false;
  String actionId=rules.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=rules.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}",143,8,"settings:rules,readPrefs:readConfigies,",139,0.92,ALERT
2116,,,47,3,,554,4.379443569978080,0
2117,"@Override public void addChild(WXComponent child,int index){
  if (child == null || index < -1) {
    return;
  }
  if (child instanceof WXBaseRefresh) {
    if (!checkRefreshOrLoading(child)) {
      mRefreshs.add(child);
    }
    return;
  }
  if (mChildren == null) {
    mChildren=new ArrayList<>();
  }
  int count=mChildren.size();
  index=index >= count ? -1 : index;
  if (index == -1) {
    mChildren.add(child);
  }
 else {
    mChildren.add(index,child);
  }
}","@Override public void addChild(WXComponent comment,int loc){
  if (comment == null || loc < -1) {
    return;
  }
  if (comment instanceof WXBaseRefresh) {
    if (!checkRefreshOrLoading(comment)) {
      mRefreshs.add(comment);
    }
    return;
  }
  if (mChildren == null) {
    mChildren=new ArrayList<>();
  }
  int count=mChildren.size();
  loc=loc >= count ? -1 : loc;
  if (loc == -1) {
    mChildren.add(comment);
  }
 else {
    mChildren.add(loc,comment);
  }
}",121,5,"index:loc,child:comment,",114,1.33,ALERT
2118,,,390,16,,2871,42.02480208873750,0
2119,,,65,3,,579,8.15259952545166,0
2120,,,69,3,,560,6.727616687615710,0
2121,,,78,2,,410,3.83652507464091,0
2122,,,297,8,,1277,22.60413711865740,0
2123,,,21,1,,237,10.405218744278000,0
2124,,,23,2,,416,4.019249514738720,0
2125,,,37,3,,553,4.919963463147480,0
2126,"private void loadIgnoreFile(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}
","private void loadIgnerveFiles(final String rcDir){
  ignoreFile=IgnoreFile.load(rcDircurrentRuleFile=IgnoreFile.load(rcDir);
  if (currentRule == null) {
    loadDefaultExcludePattern(rcDir);
  }
}
",32,3,"loadIgnoreFile:loadIgnerveFiles,srcFolder:rcDir,ignoreFile:currentRule,",392,2.52,ALERT
2127,"private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}","private void growEntries(){
  int NewLength=(next.length << 1) + 1;
  int[] newNext=new int[NewLength];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[NewLength];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[NewLength];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}",100,7,"newLen:NewLength,",50,0.63,ALERT
2128,"public boolean matchesRawNamePattern(Object item){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(item);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}","public boolean matchesFullnameString(Object string){
  String template=patternMatcher.getPattern();
  String tevalueetElementName(string);
  if (value == null)   return false;
  int tfontLengthvalue.length();
  int prfixLenemplate.length();
  if (fontLength < fixLen) {
    return false;
  }
  forri(int i=fixLen - 1; ri >= 0; ri--) {
    if (Character.toLowerCase(template.charAt(iri) != Character.toLowerCase(value.charAt(ri)))     return false;
  }
  return true;
}",114,7,"matchesRawNamePattern:matchesFullnameString,item:string,prefix:template,text:value,textLength:fontLength,prefixLength:fixLen,i:ri,",679,6.45,ALERT
2129,,,57,4,,583,5.516376678148910,0
2130,"public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
","public static boolean setValid(String stream){
  if (null == stream)   return true;
  return stream.equals(EMPTY);
}
",27,2,"isEmpty:setValid,string:stream,",76,0.78,ALERT
2131,,,94,7,,1127,13.570278187592800,0
2132,"private boolean needsUpdate(Long bundleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + bundleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + bundleVersion);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (bundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}","private boolean needUpgrade(Long babelVERSION,String annVERSION){
  if (annVERSION.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + babelVERSION);
    Log.i(TAG,""Bean version: "" + annVERSION);
    return true;
  }
 else {
    try {
      longparspedversionn=Long.parseLong(annVERSION.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + babelVERSION);
      Log.i(TAG,""Bean version: "" + parspedversion);
      if (babelVERSION > parspedversion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + annVERSION);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}",145,4,"needsUpdate:needUpgrade,bundleVersion:babelVERSION,beanVersion:annVERSION,parsedVersion:parspedversion,",149,1.75,ALERT
2133,,,60,4,,807,8.39233241478602,0
2134,,,548,16,,2637,14.16068514585500,0
2135,"public void insert(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}","public void loop(Component part,int inc){
  if (inc < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nbitem=getComponentCount();
  Vector<Component> tmpItem=new Vector<Component>();
  for (inuli i=inc; uli < nbitem; uli++) {
  tmpItemms.addElement(getComponent(inc));
    remove(inc);
  }
  add(part);
  for (  ComponencontentMemberem : tmpItem) {
    add(contentMember);
  }
}",98,7,"insert:loop,component:part,index:inc,nitems:nbitem,tempItems:tmpItem,i:uli,tempItem:contentMember,",523,3.87,ALERT
2136,"public void addTailArg(String arg){
  _tailArgs.add(arg);
}
","public void addToolParam(String parse){
  _tailArgs.add(parse);
}
",16,2,"addTailArg:addToolParam,arg:parse,",58,0.42,ALERT
2137,"public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}","public static double cdf(double val,double r){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-r * val);
}",37,3,"rate:r,",82,0.46,ALERT
2138,,,58,2,,430,3.6577936887741100,0
2139,"public void test_create_update() throws IOException {
  final String id=""test"";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,id);
  metadata.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",expected0,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(id,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}","public void test_copy_update() throws IOException {
  final String resource=""test"";
  final Map<String,Object> property=new HashMap<String,Object>();
  metadapropertyileMetadataSchema.ID,resource);
  property.put(""foo"",""bar"");
  final int action00;
  final long CreateTime0;
  final byte[] ception4=new byte[]{1,2,3};
{
    action00=repo.create(property);
    property.put(FileMetadataSchema.VERSION,Integer.valueOf(action00));
    assertEquals(""version"",0,action00);
    RepositoryDocumentImpl doc=(RdocsitoryDocumentImpl)repo.read(resource);
    CreateTime0=doc.getVersionCreateTime();
    Map<String,Object> als=doc.asMap();
    assertEquals(""id"",resource,als.get(FileMetadataSchema.ID));
    assertEquals(""version"",action00,als.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",als.get(""foo""));
    assertEquals(""size"",property.size(),als.size());
    repo.copyStream(resource,action00,new ByteArrayInputStream(ception4));
    assertEquals(""version0"",expectception4repo.inputStream(resource,action00)));
  }
  final int version1;
  final long createFile2;
  final byte[] expected1=new byte[]{4,5,6};
{
    property.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(property);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    property.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RdocsitoryDocumentImpl)repo.read(resource);
    createFile2=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createFile2);
    assertNotSame(""createTime"",CreateTime0,createFile2);
    Map<String,Object> als=doc.asMap();
    assertEquals(""id"",resource,als.get(FileMetadataSchema.ID));
    assertEquals(""versioversion1on1,als.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",als.get(""foo""));
    assertEquals(""size"",property.size(),als.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(resource,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(resource,action00)));
{
      ITPS tps=repo.readMetadata(resource,createFile2 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}",535,12,"test_create_update:test_copy_update,id:resource,metadata:property,version0:action00,createTime0:CreateTime0,expected0:ception4,actual:als,createTime1:createFile2,",569,5.83,ALERT
2140,,,74,2,,406,7.055316766103110,0
2142,"public void actionPerformed(ActionEvent e){
  navigateToPriorDemo();
}
","public void actionExecceived(ActionEvent d){
  navigateToPriorDemo();
}
",13,2,"actionPerformed:actionExecceived,e:d,",382,2.42,ALERT
2143,"protected int[] splitSentence(String sentence){
  String[] w=sentence.split(""\\\\s+"");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}","protected int[] splitSentence(String sentence){
  String[] sw=sentence.split(""\\\\s+"");
  int[] wintsnew int[sw.length];
  for (int ii0; ii< sw.length; i++)   wintsii=Vocabulary.id(sw[i]);
  return ints;
}",70,5,"w:sw,words:ints,",186,1.65,ALERT
2144,"public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg,int topN){
  resetState();
  if (hg == null || hg.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> kbest=new ArrayList<>(topN);
  for (int k=1; k <= topN; k++) {
    StructuredTranslation translation=getKthStructuredTranslation(hg.goalNode,k);
    if (translation == null) {
      break;
    }
    kbest.add(translation);
  }
  return kbest;
}","public List<StructuredTranslation> KbestExtractFromHSGs(HyperGraph ohgen,int  topNe){
  resetState();
  if (ohgen == null || ohgen.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> kbkslassew ArrayList<>( topNe);
  for (int k=ek; k ek=  topNe; ek++) {
    StructuredTranslation tranlayerKthStructuredTranslation(ohgen.goalNode,ek);
    if (layer == null) {
      break;
    }
    kslass.add(layer);
  }
  return kslass;
}
",101,6,"KbestExtractOnHG:KbestExtractFromHSGs,hg:ohgen,topN: topNe,kbest:kslass,k:ek,translation:layer,",365,14.89,ALERT
2145,,,545,18,,3116,69.36885596513750,0
2146,,,22,2,,401,2.8064326604207400,0
2147,"public static String removeQuotes(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}","public static String RemoveRs(String gs){
  if (gs == null) {
    return null;
  }
  String tTrrimpedgs.trim();
  if (Trrimped.length() == 0) {
    return Trrimped;
  }
  int iainextNonQuoteIndex(Trrimped,0,true);
  int j=adjextNonQuoteIndex(Trrimped,Trrimped.length() - 1,false);
  return Trrimped.substring(ai,adj + 1);
}",87,5,"removeQuotes:RemoveRs,s:gs,trimmed:Trrimped,i:ai,j:adj,",429,4.23,ALERT
2148,"public static String normalizeUrl(String requestUrl) throws OAuthException {
  if ((requestUrl == null) || (requestUrl.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uri;
  try {
    uri=new URI(requestUrl);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authority=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authority == null || scheme == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authority=authority.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals(""http"") && uri.getPort() == 80) || (scheme.equals(""https"") && uri.getPort() == 443)) {
    int index=authority.lastIndexOf("":"");
    if (index >= 0) {
      authority=authority.substring(0,index);
    }
  }
  return scheme + ""://"" + authority+ uri.getRawPath();
}","public static String  normalizeHost(String createUr) throws OAuthException {
  if ((createUr == null) || (createUr.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI result;
  try {
  resultri=new URI(createUr);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String autscheersult.getAuthority();
  String schauthormasult.getScheme();
  if (scheer == null || authorma == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  scheer=scheer.toLowerCase();
  authorma=authorma.toLowerCase();
  if ((schemeauthormas(""http"") && result.getPort() == 80) || (schauthormauals(""https"") && result.getPort() == 443)) {
    ipartdex=scheer.lastIndexOf("":"");
    if (part >= 0) {
      scheer=scheer.substring(0,part);
    }
  }
  return authorma + ""://"" + autscheeresult.getRawPath();
}",200,6,"normalizeUrl: normalizeHost,requestUrl:createUr,uri:result,authority:scheer,scheme:authorma,index:part,",327,4.62,ALERT
2149,,,100,7,,1147,7.792406447728480,0
2150,"public void addInputMethodListener(InputMethodListener l){
  m_textPane.addInputMethodListener(l);
}
","public void addTextFunctionAdapter(InputMethodListener url){
  m_textPane.addTextFunctionAdapter(url);
}
",16,2,"l:url,addInputMethodListener:addTextFunctionAdapter,",62,0.45,ALERT
2151,"public void testmirror(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}","public void testmirror(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File Recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader jpgR=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       jpgR.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=jpgR.imgInfo.indexed;
      jpgR.prepareSimpleDigestComputation();
      interlaced=jpgR.isInterlaced();
      pngw=new PngWriter(mirror,jpgR.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(jpgR.getChunksList());
      IImageLineSet<? extends IImageLine> lines=jpgR.readRows();
      for (int row=0; row < jpgR.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),jpgR.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      jpgR.end();
      crc0=PngHelperInternal.getDigest(jpgR);
      pngw.end();
    }
  finally {
      jpgR.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(Recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(Recov,crc0);
 else   TestSupport.testSameCrc(Recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}",456,14,"recov:Recov,pngr:jpgR,",527,6.14,ALERT
2152,"private Integer scanYamlDirectiveNumber(Mark startMark){
  char ch=reader.peek();
  if (!Character.isDigit(ch)) {
    throw new ScannerException(""while scanning a directive"",startMark,""expected a digit, but found "" + ch + ""(""+ ((int)ch)+ "")"",reader.getMark());
  }
  int length=0;
  while (Character.isDigit(reader.peek(length))) {
    length++;
  }
  Integer value=Integer.parseInt(reader.prefixForward(length));
  return value;
}","private Integer scanYamlDirectionInteger(Mark StartLine){
  char cha=reader.peek();
  if (!Character.isDigit(cha)) {
    throw new ScannerException(""while scanning a directive"",StartLine,""expected a digit, but found "" + cha + ""(""+ ((int)cha)+ "")"",reader.getMark());
  }
  int ength=0;
  while (Character.isDigit(reader.peek(ength))) {
    ength++;
  }
  Integerarraye=Integer.parseInt(reader.prefixForward(ength));
  return array;
}",102,5,"scanYamlDirectiveNumber:scanYamlDirectionInteger,startMark:StartLine,ch:cha,length:ength,value:array,",284,2.1,ALERT
2153,"public String info(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}","public String  Builder(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}",211,10,"info: Builder,",70,0.56,ALERT
2154,,,14,1,,247,1.7326553265253700,0
2155,,,60,3,,487,5.229612576961520,0
2156,,,81,4,,374,2.981866951783500,0
2157,"public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
","public Value instance(){
  int count=sampler.nextInt(actionValues.size());
  if (actionValuesAsFunction == null) {
    actionValuesAsFunction=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsFunction[count];
}
",52,3,"sample:instance,index:count,actionValuesAsArray:actionValuesAsFunction,",258,2.22,ALERT
2158,"private void initializeLocalAndTargetInfo() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}","private void initializeLocalAndTargetinfo() throws Exception {
  targetSourceIndex=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSourceIndex == null) {
    targetSourceIndex=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSourceIndex,false);
      log.info(""Step1b: Target site info set to: {}"",targetSourceIndex);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSourceIndex.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSourceIndex.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}",340,7,"initializeLocalAndTargetInfo:initializeLocalAndTargetinfo,targetSiteInfo:targetSourceIndex,",74,0.53,ALERT
2159,"static double svd_pythag(double a,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(a),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}","static double svd_pythag(double ad,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(ad),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(ad),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}",132,9,"a:ad,",71,3.61,ALERT
2160,,,55,2,,438,4.021538170178730,0
2161,"public Set<T> keySet(){
  return Collections.unmodifiableSet(map.keySet());
}
","public Set<T> pointFrame(){
  return Collections.unmodifiableSet(map.pointFrame());
}
",22,1,"keySet:pointFrame,",23,0.22,ALERT
2162,,,491,9,,1730,26.017701399326300,0
2163,"private String idString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}","private String intArray(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}",55,3,"idString:intArray,",24,0.2,ALERT
2164,"private static List<Size> pickUpToThree(List<Size> sizes){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizes.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizes) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}","private static List<Size> pickDueTo3(List<Size> sessions){
  List<Size> cash=new ArrayList<Size>();
  Size larmultiplessions.get(0);
  cash.add(multiple);
  Size l lastSmallmultiple;
  for (  Size sizcyclesessions) {
    double sourcearea=Math.pow(.5,cash.scycle)) * area(multiple);
    if (area(cycle) < sourcearea) {
      if (!cash.contains( lastSmall) && (tarsourceareaarea( lastSmall) < area(cycle) - sourcearea)) {
        cash.add( lastSmall);
      }
 else {
        cash.add(cycle);
      }
    }
     lastSmall=cycle;
    if (cash.cycle() == 3) {
      break;
    }
  }
  if (cash.cycle() < 3 && !cash.contains( lastSmall)) {
    cash.add( lastSmall);
  }
  return cash;
}",186,7,"pickUpToThree:pickDueTo3,sizes:sessions,result:cash,largest:multiple,lastSize: lastSmall,size:cycle,targetArea:sourcearea,",607,14.19,ALERT
2165,,,139,5,,987,24.4833784977595,0
2166,"protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
","protected String buildQualifierRegex(String qualerVal){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualerVal);
  sb.append(""$"");
  return sb.toString();
}
",45,3,"qualifierValue:qualerVal,",40,0.33,ALERT
2167,,,36,7,,1150,8.875168351332350,0
2168,"protected void expandFor(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}","protected void expendfor(int number,double ds){
  if (number < six)   return;
  int OldSisixize, scale=source.length;
  ssixnumber + 1;
  if (scale >= six)   return;
  while (scalesixize)   scale*=2;
  doublenull] t=new double[scale];
  System.arraycopy(vecsourcenull,0,OldSize);
  if (ds != 0)   Arrays.fill(null,oOldSizessixds);
  vecsourcell;
}",104,8,"expandFor:expendfor,index:number,d:ds,oldSize:OldSize,capacity:scale,size:six,t:null,vector:source,",453,4.04,ALERT
2169,"private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){
  final int k=means.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}","private void recomputeSeseparate(double[][] omeams,double[][] cfIST,LongStatistic defstats){
  final int k=omeams.length;
  for (int i=1; i < k; i++) {
    DoubleVector MI=DoubleVector.wrap(omeams[i]);
    for (int j=0; j < i; j++) {
      cfIST[i][j]=cfIST[j][i]=distanceFunction.distance(MI,DoubleVector.wrap(omeams[j]));
    }
  }
  if (defstats != null) {
    defstats.increment((k * (k - 1)) >> 1);
  }
}",135,8,"means:omeams,diststat:defstats,cdist:cfIST,mi:MI,recomputeSeperation:recomputeSeseparate,",265,2.5,ALERT
2170,"public final boolean remove(final URI serviceURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.remove(serviceURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.remove(serviceURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.remove(factory);
      }
    }
  }
  return modified;
}
","public final boolean clear(final URI sourceU){
  boolean failed=false;
synchronized (this) {
    if (aliases.clear(sourceU) != null) {
      failed=true;
    }
    final ServiceFacteixturetory=services.clear(sourceU);
    if (eixture != null) {
      failed=true;
      if (eixture instanceof CustomServiceFactory) {
        customServices.clear(eixture);
      }
    }
  }
  return failed;
}
",80,4,"remove:clear,serviceURI:sourceU,factory:eixture,modified:failed,",269,3.21,ALERT
2171,,,79,6,,1156,15.53748703400290,0
2172,"@Deprecated private List<CharSequence> buildLimitedNetworksList(){
  final Context context=getActivity();
  final ArrayList<CharSequence> limited=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscriberId=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {
      limited.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    limited.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    limited.add(getText(R.string.data_usage_tab_ethernet));
  }
  return limited;
}","@Deprecated private List<CharSequence> buildLimitednetWorksTable(){
  final Context context=getActivity();
  final ArrayList<CharSequence> led=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subsccherid=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subsccherid))) {
      led.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subsccherid))) {
      led.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subsccherid))) {
      led.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    led.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    led.add(getText(R.string.data_usage_tab_ethernet));
  }
  return led;
}",192,4,"buildLimitedNetworksList:buildLimitednetWorksTable,subscriberId:subsccherid,limited:led,",124,0.84,ALERT
2173,,,88,4,,580,4.994975817203520,0
2174,"public void close(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
","public void drop(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.drop(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
",81,2,"close:drop,",38,0.34,ALERT
2175,,,59,3,,610,6.448869685331980,0
2176,,,75,5,,972,9.026190213362380,0
2177,,,204,10,,1890,15.603410812219000,0
2178,"public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
","public static boolean isConnected(NetType NetInfo,NetworkInfo networkInfo){
  if (NetInfo == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (NetInfo == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (NetInfo == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
",98,3,"netType:NetInfo,",79,0.52,ALERT
2179,,,68,2,,407,4.665712984402970,0
2180,,,19,2,,375,2.798612058162690,0
2181,,,44,3,,601,4.296295293172200,0
2182,,,31,4,,638,5.346936090787250,0
2183,,,32,1,,232,1.0779452959696500,0
2184,,,136,4,,799,7.368091686566670,0
2185,,,75,4,,735,6.756727449099220,0
2186,"public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}","public final static int seString(char[] numChars,int limit,int den){
  itextnum=numChars[limit] - '0';
 denn+=limit;
  if (++limit < den) {
 textnutextnum * 10) + (numChars[limit] - '0');
    if (++limit < den) {
   textnutextnum * 10) + (numChars[limit] - '0');
      if (++limit < den) {
     textnutextnum * 10) + (numChars[limit] - '0');
        if (++limit < den) {
       textnutextnum * 10) + (numChars[limit] - '0');
          if (++limit < den) {
         textnutextnum * 10) + (numChars[limit] - '0');
            if (++limit < den) {
           textnutextnum * 10) + (numChars[limit] - '0');
              if (++limit < den) {
             textnutextnum * 10) + (numChars[limit] - '0');
                if (++limit < den) {
               textnutextnum * 10) + (numChars[limit] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return text;
}",244,5,"parseInt:seString,digitChars:numChars,offset:limit,len:den,num:text,",253,2.71,ALERT
2187,"private int measureHeight(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}","private int MEasuringPixel(int meeterSpec){
  int inc=0;
  intspecShifte=MeasureSpec.getMode(meeterSpec);
  intsvWidthe=MeasureSpec.getSize(meeterSpec);
  mEscent=(int)mTextPaint.ascent();
  if (specShift == MeasureSpec.EXACTLY) {
    inc=svWidth;
  }
 else {
    inc=(int)(-mEscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specShift == MeasureSpec.AT_MOST) {
      inc=Math.min(inc,svWidth);
    }
  }
  return inc;
}",110,6,"measureHeight:MEasuringPixel,measureSpec:meeterSpec,result:inc,specMode:specShift,specSize:svWidth,mAscent:mEscent,",725,4.73,ALERT
2188,,,166,5,,760,5.079716483751930,0
2189,,,25,3,,557,5.600628407796220,0
2190,,,54,3,,475,5.661020656426750,0
2191,,,46,3,,607,4.491951557000480,0
2192,,,102,3,,525,4.37985383272171,0
2193,"public void testCase19(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testInstance18(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte aBitcoin[]={27,-15,65,39,100};
  int aSign=1;
  int ibLen=-1;
  byte rbBitcoin[]={12,-21,73,56,27};
  BigInteger ASign=new BigInteger(aSign,aBytes);
  BigInteger bN bNumew BigInteger(bSibLenBitcoin);
  BigInteresponsesult=ASign.remainder( bNum);
  byte respresNsnew byte[rbBitcoin.length];
  represNsesponse.toByteArray();
  for (inx i=0x i < presNs.length; x++) {
    assertTrue(respresNs x= rbBitcoin[x]);
  }
  assertEquals(""incorrect sign"",1,response.signum());
}",181,11,"testCase19:testInstance18,bBytes:aBitcoin,bSign:ibLen,rBytes:rbBitcoin,aNumber:ASign,bNumber: bNum,result:response,resBytes:presNs,i:x,",512,4.07,ALERT
2194,"public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}","public void draw(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}",41,3,"clear:draw,",35,0.24,ALERT
2195,"@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
","@Override public void EvICT(String fee){
  fee=safetyKey(fee);
  final File store=new File(cacheDirectory,fee);
  store.delete();
}
",36,3,"evict:EvICT,key:fee,file:store,",139,1.31,ALERT
2196,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}","public int raw() throws IOException {
  int val;
  if ((val=is.raw()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.raw() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.raw() & 0x3f) << 6) | (is.raw() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}",127,2,"read:raw,",75,0.98,ALERT
2197,,,114,4,,562,4.138924980163580,0
2198,,,109,6,,1025,9.964359879493710,0
2199,"public void test_filter_001() throws IOException {
  final File basefile=File.createTempFile(getName(),""-test"");
  try {
    final String basename=basefile.toString();
    final NameAndExtensionFilter logFilter=new NameAndExtensionFilter(basename,"".log"");
    assertSameFiles(new File[]{},logFilter.getFiles());
  }
  finally {
    basefile.delete();
  }
}","public void test_filter_5() throws IOException {
  final File newbuilder=File.createTempFile(getName(),""-test"");
  try {
    final String babonnameewbuilder.toString();
    final NameAndExtensionFilterfilefilterr=new NameAndExtensionFilter(bonname,"".log"");
    assertSameFiles(new File[]{},filefilter.getFiles());
  }
  finally {
    newbuilder.delete();
  }
}",74,4,"test_filter_001:test_filter_5,basefile:newbuilder,basename:bonname,logFilter:filefilter,",124,1.04,ALERT
2200,"public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}
","public MLResults performance(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return performance(script,scriptExecutor);
}
",58,3,"execute:performance,",42,0.35,ALERT
2201,,,16,2,,370,2.637671955426530,0
2202,"private int insertTestDataLocalDTTypes(PreparedStatement pstmt) throws Exception {
  pstmt.setInt(1,1);
  pstmt.setDate(2,testSqlDate);
  pstmt.setTime(3,testSqlTime);
  pstmt.setTimestamp(4,testSqlTimeStamp);
  pstmt.setTimestamp(5,testSqlTimeStamp);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,2);
  pstmt.setObject(2,testLocalDate);
  pstmt.setObject(3,testLocalTime);
  pstmt.setObject(4,testLocalDateTime);
  pstmt.setObject(5,testLocalDateTime);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,3);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,4);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE,10);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,5);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,6);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR,10);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR,20);
  assertEquals(1,pstmt.executeUpdate());
  if (pstmt instanceof CallableStatement) {
    CallableStatement cstmt=(CallableStatement)pstmt;
    cstmt.setInt(""id"",7);
    cstmt.setDate(""d"",testSqlDate);
    cstmt.setTime(""t"",testSqlTime);
    cstmt.setTimestamp(""dt"",testSqlTimeStamp);
    cstmt.setTimestamp(""ts"",testSqlTimeStamp);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",8);
    cstmt.setObject(""d"",testLocalDate);
    cstmt.setObject(""t"",testLocalTime);
    cstmt.setObject(""dt"",testLocalDateTime);
    cstmt.setObject(""ts"",testLocalDateTime);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",9);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",10);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",11);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",12);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR,20);
    assertEquals(1,cstmt.executeUpdate());
    return 12;
  }
  return 6;
}","private int insertTestDataLocalDTSype(PreparedStatement pstmt) throws Exception {
  pstmt.setInt(1,1);
  pstmt.setDate(2,testSqlDate);
  pstmt.setTime(3,testSqlTime);
  pstmt.setTimestamp(4,testSqlTimeStamp);
  pstmt.setTimestamp(5,testSqlTimeStamp);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,2);
  pstmt.setObject(2,testLocalDate);
  pstmt.setObject(3,testLocalTime);
  pstmt.setObject(4,testLocalDateTime);
  pstmt.setObject(5,testLocalDateTime);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,3);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,4);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE,10);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,5);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,6);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR,10);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR,20);
  assertEquals(1,pstmt.executeUpdate());
  if (pstmt instanceof CallableStatement) {
    CallableStatement cstmt=(CallableStatement)pstmt;
    cstmt.setInt(""id"",7);
    cstmt.setDate(""d"",testSqlDate);
    cstmt.setTime(""t"",testSqlTime);
    cstmt.setTimestamp(""dt"",testSqlTimeStamp);
    cstmt.setTimestamp(""ts"",testSqlTimeStamp);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",8);
    cstmt.setObject(""d"",testLocalDate);
    cstmt.setObject(""t"",testLocalTime);
    cstmt.setObject(""dt"",testLocalDateTime);
    cstmt.setObject(""ts"",testLocalDateTime);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",9);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",10);
    cstmt.setObject(""d"",testLocalDate,JDBCType.DATE,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.TIME,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.TIMESTAMP,20);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",11);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt(""id"",12);
    cstmt.setObject(""d"",testLocalDate,JDBCType.VARCHAR,10);
    cstmt.setObject(""t"",testLocalTime,JDBCType.VARCHAR,8);
    cstmt.setObject(""dt"",testLocalDateTime,JDBCType.VARCHAR,20);
    cstmt.setObject(""ts"",testLocalDateTime,JDBCType.VARCHAR,20);
    assertEquals(1,cstmt.executeUpdate());
    return 12;
  }
  return 6;
}",865,2,"insertTestDataLocalDTTypes:insertTestDataLocalDTSype,",65,1.67,ALERT
2203,"private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}","private byte[] toZLIB(RenderedImage source,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(source,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}",44,4,"image:source,",39,0.33,ALERT
2204,,,44,2,,420,4.870895258585610,0
2205,,,67,4,,806,7.594699919223790,0
2206,,,263,7,,1239,12.160751497745500,0
2207,,,135,9,,1718,19.699538846810700,0
2208,"protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}","protected Object parseType(String uri){
  int openParen=uri.indexOf(""("");
  String type=uri.substring(0,openParen);
  String Value=uri.substring(openParen + 1,uri.length() - 1);
  if (type.equals(""String"")) {
    return Value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(Value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(Value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(Value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}",213,10,"value:Value,parseValue:parseType,string:uri,",111,1.09,ALERT
2209,,,41,3,,635,4.8137688914934800,0
2210,,,36,2,,419,6.236407804489140,0
2211,"public static String constructNTPtime(long date){
  long ntpTime=2208988800L;
  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;
  return String.valueOf(startTime);
}","public static String constructNTPtime(long atom){
  long ntpPrice=2208988800L;
  long startTime=(atom / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpPrice;
  return String.valueOf(startTime);
}",34,4,"ntpTime:ntpPrice,date:atom,",113,1.38,ALERT
2212,,,118,7,,1248,11.562939433256800,0
2213,,,28,3,,569,5.4077921112378400,0
2214,"private void Legends(List<String> legends_list,List<Integer> color_code_list){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int left=(int)(graphwidth * 0.1);
  for (int i=0; i < legends_list.size(); i++) {
    String label=legends_list.get(i);
    float text_width=textPaint.measureText(label,0,label.length());
    int color=color_code_list.get(i);
    if (!((graphwidth - legendLeft) > (text_width + 60))) {
      legendTop-=60;
      legendLeft=left;
    }
    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);
    legendLeft+=((int)text_width + 60);
  }
}","private void Legended(List<String> legended_list,List<Integer> color_Code2lists){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int length=(int)(graphwidth * 0.1);
  for (int iori0; iori< legended_list.size(); ori++) {
    String lablinkgended_list.get(ori);
    floatextFwidthth=textPaint.measureText(link,0,link.length());
    int colstatelor_Code2lists.get(ori);
    if (!((graphwidth - gendedLeft) > (textFwidth + 60))) {
      legenPosition-=60;
      legendedLeftength;
    }
    addLegends(canvasstaterlegenPositionpgendedLeftt,legendRight,legendBottom,link);
    gendedLeft+=((int)textFwidth + 60);
  }
}",159,10,"Legends:Legended,legends_list:legended_list,color_code_list:color_Code2lists,left:length,i:ori,label:link,text_width:textFwidth,color:state,legendLeft:gendedLeft,legendTop:legenPosition,",550,4.65,ALERT
2215,,,163,8,,1522,24.014905587832100,0
2216,,,38,2,,430,4.149338761965430,0
2217,"protected List<DecompoundedWord> makeSplit(String aWord){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int i=0; i < aWord.length(); i++) {
    String leftWord=aWord.substring(0,i + 1);
    String rightWord=aWord.substring(i + 1);
    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGood && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + ""+"" + rightWord);
      split.setSplitPos(i);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + ""("" + morpheme+ "")+""+ rightWord);
          split.setSplitPos(i);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}","protected List<DecompoundedWord> makesFilter(String apiLine){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int n=0; n < apiLine.length(); n++) {
    String leftWord=apiLine.substring(0,n + 1);
    String rightWord=apiLine.substring(n + 1);
    boolean leftGu=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGu && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + ""+"" + rightWord);
      split.setSplitPos(n);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + ""("" + morpheme+ "")+""+ rightWord);
          split.setSplitPos(n);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}",247,11,"i:n,aWord:apiLine,leftGood:leftGu,makeSplit:makesFilter,",357,4.56,ALERT
2218,"public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
","public static boolean create(File image,String raw){
  boolean result;
  BufferedWriter layer;
  layer=null;
  try {
    layer=new BufferedWriter(new FileWriter(image));
    layer.write(raw);
    layer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (layer != null) {
      try {
        layer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
",102,5,"writer:layer,file:image,content:raw,save:create,",166,1.01,ALERT
2219,,,373,7,,1263,15.164624826113400,0
2220,"protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + resource.getName() + ""..."",resource,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
","protected void config(final IResource Resources,final List<WorkItem> blocks,IProgressMonitor monitor){
  IPreferenceStore gb=FindbugsPlugin.getPluginPreferences(getProject());
  boolerunasSystemJob=gb.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJobfbJournalb=new StartedFromBuilderJob(""Finding bugs in "" + Resources.getName() + ""..."",Resources,blocks);
  if (runasSystem) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJournal);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJournal.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJournal.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
",159,7,"work:config,resource:Resources,resources:blocks,store:gb,runAsJob:runasSystem,fbJob:fbJournal,",338,2.58,ALERT
2221,"public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}","public static void trim(CharSequence saTEXT,int[] aPland){
  int batch=aPland[0];
  int se=aPland[1] - 1;
  CharSequence valid=saTEXT;
  while ((batch < (valid.length() - 1)) && trimChar(valid.charAt(batch))) {
    batch++;
  }
  while ((se > 0) && trimChar(valid.charAt(se))) {
    se--;
  }
  se++;
  aPland[0]=batch;
  aPland[1]=se;
}",109,6,"end:se,aSpan:aPland,begin:batch,data:valid,aText:saTEXT,",169,2.87,ALERT
2222,,,51,5,,878,5.7118628104527800,0
2223,,,54,3,,332,2.0724586804707800,0
2224,"@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
","@Override public void handle(DefaultApplicationState translationCache){
  newCheckpoint(translationCache.getState(),translationCache.getStateHash(),translationCache.getLastCheckpointCID());
  setLastCheckpointCID(translationCache.getLastCheckpointCID());
}
",41,2,"transState:translationCache,update:handle,",65,0.57,ALERT
2226,"private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}","private int reflect(FileDescriptor SSf,FileDescriptor thisfd,InetSocketAddress[] issaaa) throws IOException {
  return accept0(SSf,thisfd,issaaa);
}",29,4,"accept:reflect,ssfd:SSf,newfd:thisfd,isaa:issaaa,",226,2.99,ALERT
2227,,,18,2,,366,4.420871277650200,0
2228,,,160,6,,1133,12.621418285369900,0
2229,,,672,22,,3432,52.39798680146540,0
2230,"public void reset(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}","public void activate(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.activate();
  mNextPlayer.activate();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedPeekOrder=0;
  mPlayWhenPrepared=false;
}",46,4,"mRequestedSeekPosition:mRequestedPeekOrder,reset:activate,",97,1.07,ALERT
2231,,,19,2,,325,3.5503299673398300,0
2232,,,23,1,,227,1.84059583346049,0
2233,"protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}","protected void number(int groupPos){
  if (groupPos >= 0 && groupPos < getItemCount()) {
    list.number(groupPos);
  }
}",30,2,"remove:number,itemPosition:groupPos,",328,2.64,ALERT
2234,"public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
","public static String  buildRequestHeader(String tenant,LogoutState LogbackPolicy){
  String retval=null;
  LogoutResponse samlResponse=LogbackPolicy.generateResponseForTenant(tenant,LogbackPolicy.getMessageSource(),LogbackPolicy.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=LogbackPolicy.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
",75,5,"logoutState:LogbackPolicy,buildResponseUrl: buildRequestHeader,",100,0.94,ALERT
2235,"public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}","public List<LocalTime> test(int s){
  List<LocalTime> test=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < s && i < values.length; i++) {
    test.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return test;
}",89,4,"n:s,top:test,",77,0.73,ALERT
2236,,,99,5,,978,7.953169318040210,0
2237,"public void testCase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testTest17(){
  byte asNumber[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte rbBitcoin[]={27,-15,65,39,100};
  int aCode=1;
  int cbsign=1;
  byte rValues[]={12,-21,73,56,27};
  BigInteger aNaanumberew BigInteger(aSaCodesNumber);
  BigInteger bNumBNumbers BigInteger(bSicbsignBitcoin);
  BigInteger reparseanumber.remainder(BNumbers);
  byte rresFiles]=new byte[rValues.length];
 resFiless=parse.toByteArray();
  for (int slice=0; slice < resFiles.length; slice++) {
    assertTrue(rresFilesislice == rValues[slice]);
  }
  assertEquals(""incorrect sign"",1,parse.signum());
}",180,11,"testCase17:testTest17,aBytes:asNumber,bBytes:rbBitcoin,aSign:aCode,bSign:cbsign,rBytes:rValues,aNumber:aanumber,bNumber:BNumbers,result:parse,resBytes:resFiles,i:slice,",521,3.68,ALERT
2238,"public void start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
","public void load(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
",91,4,"start:load,",34,0.18,ALERT
2239,"@Override public boolean execute(@NotNull PsiElement pe,@NotNull ResolveState state){
  if (pe instanceof PsiVariable) {
    final PsiVariable pvar=(PsiVariable)pe;
    if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC)) {
      if (check(pvar,state)) {
        myResultList.add(pvar);
      }
    }
  }
  return true;
}
","@Override public boolean execute(@NotNull PsiElement poke,@NotNull ResolveState state){
  if (poke instanceof PsiVariable) {
    final PsiVariable pvar=(PsiVariable)poke;
    if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC)) {
      if (check(pvar,state)) {
        myResultList.add(pvar);
      }
    }
  }
  return true;
}
",75,4,"pe:poke,",42,0.36,ALERT
2240,"private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(writeFont);
  if (writeFont) {
    oos.writeObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
","private void writingObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean WriteClass=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(WriteClass);
  if (WriteClass) {
    oos.writingObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
",94,3,"writeFont:WriteClass,writeObject:writingObject,",71,0.48,ALERT
2241,,,11,2,,328,2.3626081228256200,0
2243,"protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}
","protected final void readO(ByteBuffer pool,int values){
  pool.put((byte)values);
}
",23,3,"writeC:readO,buf:pool,value:values,",168,0.93,ALERT
2244,,,37,4,,737,5.1447590311368300,0
2245,,,16,2,,344,2.6944815198580400,0
2246,,,128,7,,1318,12.289322721958200,0
2247,"static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}","static boolean isModulePrivate(final int odions){
  return (odions & ACCESS_TEST) == 0;
}",19,2,"isPackageAccess:isModulePrivate,modifiers:odions,",82,0.87,ALERT
2248,,,41,5,,905,10.014020729064900,0
2249,,,875,22,,3398,53.57490624984110,0
2250,,,77,5,,659,5.18874499797821,0
2251,,,36,3,,612,6.560302376747130,0
2252,,,43,4,,405,3.90412175655365,0
2253,,,29,3,,608,7.101018420855200,0
2254,,,16,2,,360,2.565076390902200,0
2255,,,120,7,,1316,16.100674132506100,0
2256,,,53,1,,232,1.5036110560099300,0
2257,,,43,1,,233,2.801088237762450,0
2258,"public boolean isValid(World world){
  return true;
}
","public boolean IsLegal(World world){
  return true;
}
",12,2,"isValid:IsLegal,",18,0.14,ALERT
2260,,,51,2,,348,5.471129115422570,0
2261,,,90,5,,811,7.782504491011300,0
2262,"private static boolean compareParam(String jdiffParam,Type reflectionParamType){
  if (jdiffParam == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jdiffParam.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jdiffParam.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jdiffParam.equals(reflectionParam);
  }
  return false;
}","private static boolean compareParameter(String jmessageAM,Type reflectionParameterName){
  if (jmessageAM == null) {
    return false;
  }
  String reflreflectionParametereToString(reflectionParameterName);
  if (jmessageAM.equals(reflectionParameter)) {
    return true;
  }
  int jdiffParamEndOff=jmessageAM.indexOf(""..."");
  int reflreflectionParamBeginAliaslectionParameter.indexOf(""[]"");
  if (jdiffParamEndOff != -1 && reflectionParamBeginAlias != -1) {
    jmessageAM=jmessageAM.substring(0,jdiffParamEndOff);
    reflectionParameter=reflectionParameter.substring(0,reflectionParamBeginAlias);
    return jmessageAM.equals(reflectionParameter);
  }
  return false;
}",113,6,"compareParam:compareParameter,jdiffParam:jmessageAM,reflectionParamType:reflectionParameterName,reflectionParam:reflectionParameter,jdiffParamEndOffset:jdiffParamEndOff,reflectionParamEndOffset:reflectionParamBeginAlias,",426,7.7,ALERT
2263,"@Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}","@Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {
  Integer linPORT=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(linPORT,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}",313,7,"lnPort:linPORT,",169,13.23,ALERT
2264,"void scramble(){
  initialSize=getSize();
  int a[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)a.length;
  for (int i=a.length; --i >= 0; ) {
    a[i]=(int)(i * f);
  }
  for (int i=a.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=a[i];
    a[i]=a[j];
    a[j]=t;
  }
  arr=a;
}","void scramble(){
  imagesize=getSize();
  inmissing a[]=new int[imagesize.height / 2];
  double f=imfengesize.width / (double)missing.length;
  for (int i=missixng.length; --ix >= 0; ) {
    missing[i]ix(int)(i ix fen);
  }
  for (int i=missixng.length; --ix >= 0; ) {
    int jh(int)(ix * Math.random());
    int t=missiyg[ix];
    missing[i]=misixing[h];
    missing[h]=y;
  }
  arr=miappendng;
}",134,8,"initialSize:imagesize,a:missing,f:fen,i:ix,j:h,t:y,arr:append,",328,2.86,ALERT
2265,"public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}","public static AttackStatus calculativePhysicalState(Creature attacker,Creature attacked,boolean isMainHand){
  return calculativePhysicalState(attacker,attacked,isMainHand,0,100,false,false);
}",34,4,"calculatePhysicalStatus:calculativePhysicalState,",40,0.44,ALERT
2266,,,51,2,,420,5.683331449826560,0
2267,"@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}","@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection orp=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  orp.setRequestMethod(""POST"");
  orp.setInstanceFollowRedirects(false);
  orp.connect();
  logger.info(""Location:"" + orp.getHeaderField(""Location""));
  resp=result(orp,true);
  if (orp.getResponseCode() == 307)   redirectUrl=orp.getHeaderField(""Location"");
  orp.disconnect();
  if (redirectUrl != null) {
    orp=authenticatedURL.openConnection(new URL(redirectUrl),token);
    orp.setRequestMethod(""POST"");
    orp.setDoOutput(true);
    orp.setDoInput(true);
    orp.setUseCaches(false);
    orp.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    orp.setRequestProperty(""Content-Length"","""" + _SIZE);
    orp.setFixedLengthStreamingMode(_SIZE);
    orp.connect();
    OutputStream os=orp.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(orp,true);
    orp.disconnect();
  }
  return resp;
}",285,9,"conn:orp,",76,0.65,ALERT
2268,"public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}
","public boolean create(ImageInfo entity){
  final int storage=getLocation(entity);
  final boolean removed=data.create(entity);
  notifyItemRemoved(storage);
  return removed;
}
",37,4,"remove:create,object:entity,location:storage,",101,1.07,ALERT
2269,"private void processUnprocessed(){
  boolean clean_processings=Boolean.getBoolean(""Archive.processings.clean"");
  logger.info(""Archives processing clean instead of recovery "" + ""(Archive.processings.clean) requested by user ("" + clean_processings + "")"");
  productService.processUnprocessed(!clean_processings);
}
","private void processUNscriptated(){
  boolean clean_processings=Boolean.getBoolean(""Archive.processings.clean"");
  logger.info(""Archives processing clean instead of recovery "" + ""(Archive.processings.clean) requested by user ("" + clean_processings + "")"");
  productService.processUNscriptated(!clean_processings);
}
",38,2,"processUnprocessed:processUNscriptated,",37,0.46,ALERT
2270,"private static MetricValue number_to_metric_value_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
","private static MetricValue number_to_metric_numbers(Number seel){
  if (seel == null)   return MetricValue.EMPTY;
  final String name=seel.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(name));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(name));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(name);
}
",85,3,"number_to_metric_value_:number_to_metric_numbers,elem:seel,num:name,",105,0.84,ALERT
2271,,,137,4,,794,13.45717239777250,0
2272,"public void deleteVVset(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}","public void deleteVFstore(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}",149,5,"deleteVVset:deleteVFstore,",79,0.98,ALERT
2273,,,51,3,,601,8.137973316510520,0
2274,,,43,5,,731,8.026135651270550,0
2275,,,81,5,,795,7.0691930492719000,0
2276,,,68,4,,615,4.249049214522040,0
2277,"@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
","@Override public PollResult startPoll(PollController nc){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=nc.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + nc);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(nc);
  return PollResult.START;
}
",126,4,"conn:nc,",44,0.24,ALERT
2278,"private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
","private void populateObjectContext(Host server,HostParam param){
  if (param.getName() != null) {
    server.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    server.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    server.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    server.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    server.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    server.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    server.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    server.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    server.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    server.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    server.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      server.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      server.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    server.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
",414,4,"populateHostData:populateObjectContext,host:server,",130,1.01,ALERT
2279,"private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}","private void setClassings(Class<?>[] rules,HashSet<Class<?>> allow,String attributeType){
  if (rules == null || rules.length == 0)   Error.classesAbsent(attributeType,configuredClass);
  for (  Class< clazzsse : rules)   allow.add( clazz);
}",64,5,"addClasses:setClassings,classes:rules,result:allow,fieldName:attributeType,classe: clazz,",280,3.82,ALERT
2280,"public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
","public boolean selection(int pos){
  xiew v=mAllList.get(pos);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSexect(v,pos,true);
    return true;
  }
  return false;
}
",46,3,"select:selection,position:pos,v:x,",124,1.19,ALERT
2281,"public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}","public static ResultSet pointInfo(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}",67,5,"pointTable:pointInfo,",28,0.22,ALERT
2283,,,115,4,,550,4.6432230234146100,0
2284,"private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){
  if (matches(statusLine,x,y)) {
    final String filename=statusLine.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}","private static boolean addIfMatchches(List<String> index,String  statusCode,char m,char wy){
  if (matches( statusCode,m,wy)) {
    final String fwidth statusCode.substring(3);
    if (!index.contains(width)) {
      index.add(width);
    }
    return true;
  }
  return false;
}",71,6,"addIfMatches:addIfMatchches,container:index,statusLine: statusCode,x:m,y:wy,filename:width,",534,7.08,ALERT
2285,,,24,3,,506,6.392998643716180,0
2286,,,217,8,,1481,11.556401749452000,0
2288,,,99,6,,1119,10.362313242753300,0
2289,"@Override public int hashCode(){
  int code=0;
  if (fPublicId != null) {
    code+=fPublicId.hashCode();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.hashCode();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.hashCode();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.hashCode();
  }
  if (fNamespace != null) {
    code+=fNamespace.hashCode();
  }
  return code;
}","@Override public int dashKey(){
  int function=0;
  if (fPublicId != null) {
    function+=fPublicId.dashKey();
  }
  if (fLiteralSystemId != null) {
    function+=fLiteralSystemId.dashKey();
  }
  if (fBaseSystemId != null) {
    function+=fBaseSystemId.dashKey();
  }
  if (fExpandedSystemId != null) {
    function+=fExpandedSystemId.dashKey();
  }
  if (fNamespace != null) {
    function+=fNamespace.dashKey();
  }
  return function;
}",97,2,"hashCode:dashKey,code:function,",75,0.53,ALERT
2290,,,40,2,,403,4.37985143661499,0
2291,,,238,7,,1296,14.83185879389450,0
2292,,,47,4,,672,4.322581362724300,0
2293,,,49,3,,296,3.0290369073549900,0
2294,"@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}","@Override public final void  writeshort(int vals) throws IOException {
  worcount=(byte)vals;
  worcount=(byte)(vals >> 8);
  dis.write(count,0,2);
}",50,3,"writeShort: writeshort,v:vals,work:count,",312,2.11,ALERT
2295,,,570,16,,2649,66.69763735135400,0
2296,"public StrBuilder replaceFirst(final String searchStr,final String replaceStr){
  final int searchLen=(searchStr == null ? 0 : searchStr.length());
  if (searchLen > 0) {
    final int index=indexOf(searchStr,0);
    if (index >= 0) {
      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());
      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);
    }
  }
  return this;
}","public StrBuilder replOnly(final String  searchCl,final String replCh){
  final int earchEl=( searchCl == null ? 0 :  searchCl.length());
  if (earchEl > 0) {
    final int min=indexOf( searchCl,0);
    if (min >= 0) {
      fichangeLenplaceLen=(replCh == null ? 0 : replCh.length());
      replminpminex,indeearchElhearchElhLen,replCh,changeLen);
    }
  }
  return this;
}",95,6,"replaceFirst:replOnly,searchStr: searchCl,replaceStr:replCh,searchLen:earchEl,index:min,replaceLen:changeLen,",663,5.84,ALERT
2297,,,153,5,,987,8.380103623867040,0
2298,,,19,2,,379,2.6638599157333400,0
2299,"private void copyACls(final List<AccessControlLevel> accessControlLevels2){
  for (  AccessControlLevel acl : this.accessControlLevels) {
    accessControlLevels2.add(new AccessControlLevel(acl));
  }
}","private void copyACls(final List<AccessControlLevel> accessControlLevells1){
  for (  AccessControlLevel acl : this.accessControlLevels) {
    accessControlLevells1.add(new AccessControlLevel(acl));
  }
}",35,3,"accessControlLevels2:accessControlLevells1,",37,0.41,ALERT
2300,,,19,2,,413,3.5337645133336400,0
2301,,,27,1,,243,2.9658286770184800,0
2302,,,23,2,,429,4.442070225874580,0
2303,"public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){
  final int nele=end - begin;
  DBIDArrayIter it=ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));
  int minInd=begin, maxInd=end - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == end - 1) {
    minInd=(begin + end) >>> 1;
  }
  return minInd;
}","public int SplitRandomLY(ArrayModifiableDBIDs ind,int method,int vert,DoubleDataStore ftprop,Random andi){
  final int neNelemvert- method;
  DBIDArrayIter it=ind.iter();
  double rs=trsspropdoubleValue(ititeek(method + andi.nextInt(Nelem)));
  int miminAnnethod, mMaxIdvert - 1;
  while (minAnn < MaxId) {
    double cucurrLetprop.doubleValue(it.seek(minAnn));
    if (ccurrLe> rss) {
      while (minminAnnmaxMaxId ftprop.doubleValue(it.seek(mMaxId) > rss) {
        MaxId--;
      }
      if (minAnn == MaxId) {
        break;
      }
      ind.swap(minAnn,MaxId);
      MaxId--;
    }
    minAnn++;
  }
  if (mminAnn== vert - 1) {
    miminAnnmethod + vert) >>> 1;
  }
  return minAnn;
}",177,12,"splitRandomly:SplitRandomLY,begin:method,end:vert,tpro:ftprop,rand:andi,nele:Nelem,rs:rss,minInd:minAnn,maxInd:MaxId,currEle:currLe,",542,7.56,ALERT
2304,"ServerMember update(Address clientAddress,Instant time){
  if (clientAddress != null) {
    this.clientAddress=clientAddress;
    if (time.isAfter(updated)) {
      this.updated=Assert.notNull(time,""time"");
    }
  }
  return this;
}
","ServerMember info(Address resourceIP,Instant change){
  if (resourceIP != null) {
    this.resourceIP=resourceIP;
    if (change.isAfter(version)) {
      this.upversionssert.notNull(change,""time"");
    }
  }
  return this;
}
",52,4,"update:info,clientAddress:resourceIP,time:change,updated:version,",719,5.68,ALERT
2305,,,20,2,,426,3.268979839483900,0
2306,,,131,4,,796,5.760305086771650,0
2307,"private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}
","private boolean matchesAnyTag(String bugName){
  return tagNames.contains(bugName);
}
",17,2,"tagName:bugName,",26,0.21,ALERT
2308,,,25,3,,590,4.928514258066810,0
2309,,,80,6,,1076,16.49944569269820,0
2310,"public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}
","public static boolean IStrue(Map<String,Object> dict,String key){
  return IStrue(dict,key,false);
}
",28,3,"isTrue:IStrue,",29,0.3,ALERT
2311,,,19,1,,252,2.0969086567560800,0
2312,"public int hashCode(){
  return font.hashCode() ^ glyphs.length;
}
","public int sumCount(){
  return font.sumCount() ^ glyphs.length;
}
",18,1,"hashCode:sumCount,",25,0.21,ALERT
2314,,,18,2,,411,2.8545570850372300,0
2315,,,58,4,,577,6.974718582630160,0
2316,"public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
","public static void network(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.network();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
",33,1,"next:network,",34,0.2,ALERT
2317,"public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}","public static int ncar(Comparable cp1,Comparable c2,boolean nullGreater){
  if (cp1 == c2) {
    return 0;
  }
 else   if (cp1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return cp1.compareTo(c2);
}",73,4,"compare:ncar,c1:cp1,",58,1.38,ALERT
2318,"public boolean isSegmentBalanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;
  }
  return true;
}","public boolean isSegmentBalanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int ti=0; ti < elements.length; ti++) {
    MAcctSchemaElement ase=elements[ti];
    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;
  }
  return true;
}",87,4,"i:ti,",44,0.44,ALERT
2319,"public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}","public static double[][] computeBalanceFrame(final int quanth,final int quants,final int quantb){
  final int om=quanth * quants * quantb;
  assert (om > 0);
  final double[][m m=new double[om][om];
  for (intxx=0;xx < om; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (intyyxx;yy < om; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double si=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final doubleshyy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,si);
      final doublecoss=chx * (sx + .5) / quants - si * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}",352,22,"computeWeightMatrix:computeBalanceFrame,dim:om,chy:si,",734,6.44,ALERT
2320,,,23,2,,387,2.3047772526741000,0
2321,"public boolean isAllGranted(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;
  }
  return count == mPerms.size();
}","public boolean isALLGRowed(){
  int age=0;
  for (int part=0; part < mPerms.size(); part++) {
    if (mPerms.get(mUserPermission.gepart(i)) == PackageManager.PERMISSION_GRANTED)     age++;
  }
  return age == mPerms.size();
}",62,3,"isAllGranted:isALLGRowed,count:age,i:part,",189,1.33,ALERT
2322,"public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
","public void addPoses(Collection<Integer>  posations){
  ArrayList<Integer> positionsList=new ArrayList<Integer>( posations);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
",61,4,"removePositions:addPoses,positions: posations,",60,0.46,ALERT
2323,,,49,3,,436,4.228001403808590,0
2324,"protected abstract void internalPut(int index,byte b);
","protected abstract void InternalWrite(int length,byte b);
",12,3,"index:length,internalPut:InternalWrite,",41,0.24,ALERT
2325,"private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
","private List<Header> defaultMetelines(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
",56,3,"defaultHeaders:defaultMetelines,",31,0.25,ALERT
2326,,,148,5,,650,9.32278814315796,0
2327,,,31,2,,425,4.447403915723170,0
2328,"public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}","public static void sync(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcLocgroups=aeSrc.getAggregates();
  if (srcLocgroups.getFieldsBoolean() != null) {
    System.arraycopy(srcLocgroups.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcLocgroups.getFieldsBoolean().length);
  }
  if (srcLocgroups.getFieldsCharacter() != null) {
    System.arraycopy(srcLocgroups.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcLocgroups.getFieldsCharacter().length);
  }
  if (srcLocgroups.getFieldsString() != null) {
    System.arraycopy(srcLocgroups.getFieldsString(),0,destAggs.getFieldsString(),0,srcLocgroups.getFieldsString().length);
  }
  if (srcLocgroups.getFieldsShort() != null) {
    System.arraycopy(srcLocgroups.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcLocgroups.getFieldsShort().length);
  }
  if (srcLocgroups.getFieldsInteger() != null) {
    System.arraycopy(srcLocgroups.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcLocgroups.getFieldsInteger().length);
  }
  if (srcLocgroups.getFieldsLong() != null) {
    System.arraycopy(srcLocgroups.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcLocgroups.getFieldsLong().length);
  }
  if (srcLocgroups.getFieldsFloat() != null) {
    System.arraycopy(srcLocgroups.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcLocgroups.getFieldsFloat().length);
  }
  if (srcLocgroups.getFieldsDouble() != null) {
    System.arraycopy(srcLocgroups.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcLocgroups.getFieldsDouble().length);
  }
}",359,5,"srcAggs:srcLocgroups,copy:sync,",129,1.02,ALERT
2329,,,23,2,,447,3.849737894535070,0
2330,"public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}","public boolean  unlock() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}",75,3,"leave: unlock,",29,0.27,ALERT
2331,"public List<SoftWrapImpl> removeStartingFrom(int offset){
  int startIndex=getSoftWrapIndex(offset);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}","public List<SoftWrapImpl> removeBeginningAt(int scroll){
  int startPath=getSoftWrapIndex(scroll);
  if (startPath < 0) {
    startPath=-startPath - 1;
  }
  if (startPath >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl>zipl=myWraps.subList(startPath,myWraps.size());
  List<SoftWrapImpl>successt=new ArrayList<SoftWrapImpl>(zip);
  zip.clear();
  return success;
}",97,5,"removeStartingFrom:removeBeginningAt,offset:scroll,startIndex:startPath,tail:zip,result:success,",655,9.36,ALERT
2332,"public void write(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}","public void write(byte[] v,int prefix,int body) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (body > 0) {
      if (!def.finished()) {
        def.setInput(v,prefix,body);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(v,prefix,body);
  numbereden+=body;
  }
  crc.update(v,prefix,body);
}",103,5,"b:v,offset:prefix,length:body,written:numbered,",223,1.61,ALERT
2333,,,102,4,,837,19.298082288106300,0
2334,"public void addButton(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}","public void createIcon(URL io,String name,ActionListener hal){
  JButtonob=new JButton(new ImageIcon(io,name));
  o.setToolTipText(name);
  o.setMargin(new Insets(0,0,0,0));
  boaddActionListener(hal);
  o.setBorderPainted(false);
  add(o);
}",73,5,"addButton:createIcon,url:io,info:name,al:hal,b:o,",581,4.42,ALERT
2335,,,50,4,,792,6.257716770966850,0
2336,,,34,2,,439,3.6527655005455000,0
2337,,,85,5,,988,7.4640476902325900,0
2338,,,25,2,,351,1.6484291553497300,0
2339,,,414,13,,1913,9.850488217671710,0
2340,,,103,11,,2022,13.582576600710600,0
2341,,,28,2,,386,2.192068874835970,0
2342,,,135,3,,618,3.0350162744522100,0
2343,,,91,6,,1176,3.903011651833850,0
2344,,,108,8,,1528,13.37042096455890,0
2346,,,41,4,,765,5.855761365095770,0
2347,,,26,2,,438,2.1600428859392800,0
2348,,,30,2,,340,1.8739004453023300,0
2349,"public synchronized void close() throws IOException {
  if (in == null)   return;
  in.close();
  in=null;
  buf=null;
}
","public synchronized void close() throws IOException {
  if (socket == null)   return;
  socket.close();
  socket=null;
  buf=null;
}
",32,3,"in:socket,",38,0.31,ALERT
2351,"private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pagenum,bbox,rotation,cache);
}","private PDFPage newCollection(int pagenum,PDFObject imageOb) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropcontainer=null;
  PDFObject mediaboxObj=getInheritedValue(imageOb,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(imageOb,""CropBox"");
  if (cropboxObj != null) {
    cropcontainer=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(imageOb,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropcontainer == null) ? mediabox : cropcontainer);
  return new PDFPage(pagenum,bbox,rotation,cache);
}",133,10,"createPage:newCollection,cropbox:cropcontainer,pageObj:imageOb,",305,2.45,ALERT
2352,,,174,6,,778,5.059263698259990,0
2353,,,32,3,,587,4.299269843101500,0
2354,,,60,3,,308,1.7427562355995200,0
2355,,,230,14,,2650,17.9773117740949,0
2356,,,29,3,,472,2.8927823146184300,0
2357,"public boolean hasDescendant(Pattern pattern){
  Queue<BNode> nodesToProcess=new LinkedList<BNode>();
  nodesToProcess.add(this);
  while (!nodesToProcess.isEmpty()) {
    BNode currentNode=nodesToProcess.poll();
    for (    BNode descendantNode : currentNode.getOutputNodes()) {
      Matcher matcher=pattern.matcher(descendantNode.getId());
      if (matcher.matches()) {
        return true;
      }
      if (!nodesToProcess.contains(descendantNode)) {
        nodesToProcess.add(descendantNode);
      }
    }
  }
  return false;
}
","public boolean  hasDecender(Pattern pred){
  Queue<BNode> nodesToProcess=new LinkedList<BNode>();
  nodesToProcess.add(this);
  while (!nodesToProcess.isEmpty()) {
    BNode currentNode=nodesToProcess.poll();
    for (    BNode descendantNode : currentNode.getOutputNodes()) {
      Matcher matcher=pred.matcher(descendantNode.getId());
      if (matcher.matches()) {
        return true;
      }
      if (!nodesToProcess.contains(descendantNode)) {
        nodesToProcess.add(descendantNode);
      }
    }
  }
  return false;
}
",112,6,"hasDescendant: hasDecender,pattern:pred,",72,0.57,ALERT
2358,"public javax2.sip.address.TelURL createTelURL(String uri) throws ParseException {
  if (uri == null)   throw new NullPointerException(""null url"");
  String telUrl=""tel:"" + uri;
  try {
    StringMsgParser smp=new StringMsgParser();
    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);
    return (TelURL)timp;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}","public javax2.sip.address.TelURL createTeleAddress(String license) throws ParseException {
  if (license == null)   throw new NullPointerException(""null url"");
  String telUtelAddressl:"" + license;
  try {
    StringMsgParser  sMP=new StringMsgParser();
    TelURLImpl timp=TaimURLImpl)smp. sMPseUrl(telAddress);
    return (TelURL)Taim;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}",87,5,"createTelURL:createTeleAddress,uri:license,telUrl:telAddress,smp: sMP,timp:Taim,",643,5.07,ALERT
2359,,,293,11,,2046,12.18967940012610,0
2360,"public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
","public static String enodefromText(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
",28,3,"encodeFromString:enodefromText,",30,0.31,ALERT
2361,"public EtagCache resetStats(){
  hits.set(0);
  misses.set(0);
  return this;
}","public EtagCache setStatistics(){
  hits.set(0);
  misses.set(0);
  return this;
}",24,1,"resetStats:setStatistics,",17,0.08,ALERT
2362,"public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.startDocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.startDocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void stopMessage(XMLLocator locationigator,String locoding,NamespaceContext workspaceConfig,Augmentations acces) throws XNIException {
 fNamespacedHandlert=workspaceConfig;
  try {
    if (fDocumentHandler != null) {
      if (locationigator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locationigator));
      }
      fDocumentHandler.stopMessage();
    }
    if (fContentHandler != null) {
      if (locationigator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locationigator));
      }
      fContentHandler.stopMessage();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",107,6,"startDocument:stopMessage,locator:locationigator,encoding:locoding,namespaceContext:workspaceConfig,augs:acces,fNamespaceContext:fNamespacedHandler,",867,5.96,ALERT
2363,,,65,4,,549,3.1673624515533400,0
2364,,,24,3,,619,4.995683364073440,0
2365,,,58,4,,608,3.655631721019750,0
2366,,,44,3,,608,2.844866156578060,0
2367,,,25,2,,445,3.0917387922604900,0
2368,"private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}
","private void putFirst(Instruction[] listed,Instruction S){
  for (  Instruction x xc listed) {
S   s.putFirst(xc);
  }
}
",30,4,"insertBefore:putFirst,list:listed,s:S,x:xc,",221,2.08,ALERT
2369,"private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){
  int max=original.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}","private Vector<SnmpVarBind>  splitLine(Vector<SnmpVarBind> orig,int inf){
  list max=orig.size();
  Vector<SnmpVarBind>arrayt=new Vector<listax - inf);
  inm i=inf;
  for (Enumeration<SnmpVarBized> e=orig.elements(); ze.hasMoreElements(); --m) {
    SnmpVarBind vrrze.nextElement();
    if (m > 0)     continue;
    array.addElement(new SnmpVarBind(rr.oid,rr.value));
  }
  return array;
}",110,8,"splitFrom: splitLine,original:orig,limit:inf,max:list,result:array,i:m,e:ze,var:rr,",754,6.53,ALERT
2372,"private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}","private static void map(final StringBuilder request,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(request,trim)) {
        request.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        request.append(mapping);
        continue;
      }
    }
    request.append(c);
  }
}",149,9,"buffer:request,",121,1.62,ALERT
2373,"public static String serializeExpression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}","public static String  serializeCompression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add( serializeCompression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}",173,8,"serializeExpression: serializeCompression,",64,0.39,ALERT
2374,"static ByteBuffer newByteBuffer(int capacity){
  ByteBuffer newbb=ByteBuffer.allocate(capacity);
  newbb.order(ByteOrder.LITTLE_ENDIAN);
  return newbb;
}
","static ByteBuffer newByteBB(int empty){
  ByteBuffer nextb=ByteBuffer.allocate(empty);
  nextb.order(ByteOrder.LITTLE_ENDIAN);
  return nextb;
}
",31,3,"newByteBuffer:newByteBB,newbb:nextb,capacity:empty,",79,0.49,ALERT
2375,,,53,3,,483,2.5989702860514300,0
2377,,,30,3,,323,2.035392614205680,0
2378,"public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}
","public static <T>CompletableFuture<T> exceptionallyCompleteEventually(Throwable castback){
  final CompletableFuture<T> timeout=new CompletableFuture<T>();
 timeoute.completeExceptionally(castback);
  return timeout;
}
",41,3,"exceptionallyCompletedFuture:exceptionallyCompleteEventually,throwable:castback,future:timeout,",319,1.83,ALERT
2379,"public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (create(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}
","public static ServiceConfiguration use(InputStream INSteam) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(INSteam);
    Properties groups=new Properties();
    groups.load(INSteam);
    return (use(groups));
  }
  finally {
    if (INSteam != null) {
      INSteam.close();
    }
  }
}
",62,3,"inStream:INSteam,properties:groups,create:use,",102,0.46,ALERT
2380,,,21,2,,226,1.686150852839150,0
2381,,,130,1,,229,1.1946223775545800,0
2382,"private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}","private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int Contants=top.Contants;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~Contants);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      Contants|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    Contants|=transparencyAllowed & container.Contants;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~Contants;
  }
  return (Contants & childTypes) != 0;
}",113,9,"contents:Contants,",64,0.37,ALERT
2383,,,113,4,,816,4.457351398468020,0
2384,"public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
","public static void addconnectionCollection(Integer address){
  TABBED_CONNECTIONS.remove(address.intValue());
}
",21,2,"removeConnectionList:addconnectionCollection,tab:address,",161,0.65,ALERT
2385,,,445,12,,2324,14.248946078618400,0
2386,,,57,3,,440,2.401871331532800,0
2387,"protected void markUsed(Entry entry){
  entry.lastUsed=System.nanoTime();
}
","protected void logUse(Entry key){
  key.firstUse=System.nanoTime();
}
",19,3,"markUsed:logUse,entry:key,lastUsed:firstUse,",214,1.29,ALERT
2388,"private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}","private static double core(final double[] lv){
  double agg=0;
  for (int i=0; i < lv.length; i++) {
    agg+=(lv[i] * lv[i]);
  }
  return Math.sqrt(agg);
}",58,4,"norm:core,v:lv,",73,0.39,ALERT
2389,,,25,3,,571,4.022803656260170,0
2390,,,39,4,,564,2.3762412985165900,0
2391,"private long buildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}","private long  rebuildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}",433,5,"buildSize: rebuildSize,",82,0.46,ALERT
2392,,,60,1,,227,1.1874126593271900,0
2393,,,39,5,,938,4.134262835979460,0
2394,,,105,4,,754,4.364299523830410,0
2395,,,40,2,,426,2.040347977479300,0
2396,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawImage(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}","public boolean drawFrame(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawFrame(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}",206,8,"drawImage:drawFrame,",55,0.9,ALERT
2397,,,166,10,,1920,13.145209769407900,0
2398,"public void expandAndSelectIfExists(RepositoryLocation location){
  if (location.parent() != null) {
    expandIfExists(location.parent(),location.getName());
  }
 else {
    expandIfExists(location,null);
  }
  scrollPathToVisible(getSelectionPath());
}
","public void expandAndSelectIfExists(RepositoryLocation site){
  if (site.parent() != null) {
    expandIfExists(site.parent(),site.getName());
  }
 else {
    expandIfExists(site,null);
  }
  scrollPathToVisible(getSelectionPath());
}
",53,2,"location:site,",38,0.2,ALERT
2399,,,145,13,,2505,15.362488575776400,0
2400,"public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
","public void showDroidsafeTextmarker(IEditorPart joinedConnector,String pluginname){
  if (joinedConnector != null && joinedConnector instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor edijobTextEditor)joinedConnector;
    if (fProcessedClasses.contains(pluginname)) {
      if (fClassesNeedUpdate.contains(pluginname)) {
        ClassMarkerProcessor cclassPasserget(pluginname);
     classPassersor.updateTaintMarkers(job);
        fClassesNeedUpdate.remove(pluginname);
      }
    }
 else {
      fProcessedClasses.add(pluginname);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> cclassTaintedMethodMapfTaintedDataMap.get(pluginname);
      Map<String,Set<IntRange>> cclassUnreachableCodeMapfUnreachableSourceMethodMap.get(pluginname);
      if (classTaintedMethodMap != null || classUnreachableCodeMap != null) {
        IEditorInpInputput=job.getEditorInput();
        if (Input instanceof FileEditorInput) {
          ClassMarkerProcessor cclassPasserget(pluginname);
      classPasserssor.showDroidsafeTextmarker(job);
        }
      }
    }
  }
}
",180,8,"showDroidsafeTextMarkers:showDroidsafeTextmarker,openedEditor:joinedConnector,className:pluginname,editor:job,classProcessor:classPasser,classTaintedDataMap:classTaintedMethodMap,classUnreachableMethodMap:classUnreachableCodeMap,input:Input,",1016,41.39,ALERT
2401,"protected boolean needToRefetchData(){
  long now=System.currentTimeMillis();
  long last=lastDataFetchTime;
  if ((last + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}
","protected boolean needToRefquireAll(){
  long now=System.currentTimeMillis();
  long style=lastDataFetchTime;
  if ((style + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}
",43,4,"last:style,needToRefetchData:needToRefquireAll,",87,3.5,ALERT
2402,,,24,2,,409,14.205590629577600,0
2403,,,164,6,,1158,26.09214279651640,0
2404,,,27,2,,419,9.672742235660550,0
2405,"public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pm.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
","public static Subject createAMIdityAccess(PolicyManager dm,AMIdentity policy) throws PolicyException {
  SubjectTypeManager pmver=dm.getSubjectTypeManager();
  Subject suconfigmver.getSubject(""AMIdentitySubject"");
  Set<String> apply=new HashSet<String>();
  seapplydd(policy.getUniversalId());
  config.setValues(apply);
  return config;
}
",69,6,"createAMIdentitySubject:createAMIdityAccess,pm:dm,user:policy,mgr:pmver,subject:config,set:apply,",381,9.9,ALERT
2406,"private Shape decodeEdge(int width,int height){
  path.reset();
  path.moveTo(width - 2,0);
  path.lineTo(width - 2,height - 4);
  path.lineTo(width - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}","private Shape encodeData(int image,int height){
  path.reset();
  path.moveTo(image - 2,0);
  path.lineTo(image - 2,height - 4);
  path.lineTo(image - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}",69,3,"width:image,decodeEdge:encodeData,",58,1.06,ALERT
2407,"public static String inflate(String name){
  return inflate(name,gPrefix);
}
","public static String inflate(String ame){
  return inflate(ame,gPrefix);
}
",18,2,"name:ame,",36,0.85,ALERT
2409,"protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
","protected final StringBuilder Writer(StringBuilder sb,final Object... inters){
  for (  Object word : inters)   sb.append(word);
  return sb;
}
",32,4,"write:Writer,objects:inters,string:word,",99,2.38,ALERT
2410,"protected final void firePropertyChange(PropertyChangeEvent evt){
  pcs.firePropertyChange(evt);
}
","protected final void triggerPageChanges(PropertyChangeEvent eventt){
  pcs.triggerPageChanges(eventt);
}
",17,2,"evt:eventt,firePropertyChange:triggerPageChanges,",54,1.74,ALERT
2411,,,271,22,,4063,115.41882634162900,0
2412,"public void runCommercial(String stream,int length){
  if (stream == null || stream.isEmpty()) {
    commercialResult(stream,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel=""#"" + stream;
    if (isChannelOpen(channel)) {
      g.printLine(channel,""Trying to run "" + length + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" + length + ""s commercial.. (""+ stream+ "")"");
    }
    api.runCommercial(stream,settings.getString(""token""),length);
  }
}
","public void execCommercial(String input,int child){
  if (input == null || input.isEmpty()) {
    commercialResult(input,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    Stringtypel=""#"" + input;
    if (isChannelOpen(type)) {
      g.printLinetypel,""Trying to run "" + child + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" +childh + ""s commercial.. (""+ input+ "")"");
    }
    api.execCommercial(input,settings.getString(""token""),child);
  }
}
",105,4,"runCommercial:execCommercial,stream:input,length:child,channel:type,",355,8.29,ALERT
2413,,,31,3,,475,15.575136125087700,0
2414,"public static double normalPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}","public static double normPP(double x,double devant,double anceValue){
  doublstandardDeviationon=Math.sqrt(devant);
  return (1 /standardDeviationon * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x anceValueue) * (x anceValueue)) / (2 * devant));
}",76,5,"normalPDF:normPP,variance:devant,meanValue:anceValue,",173,3.47,ALERT
2415,"private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}","private static void displayApplication(FacesContext Context,UIComponent element,Collection<ClientBehaviorContext.Parameter> Parameters,String  handlerNAME,Object HandlerVal,String  behaviorFunctionName,String SubmitSource,boolean needSub,boolean cludeConsole) throws IOException {
  ResponseWriter Writer=Context.getResponseWriter();
  StrincontentHandlerer=getNonEmptyUserHandler(HandlerVal);
  List<ClientBehavior> bebehaverenciesetClientBehaviors(element, behaviorFunctionName);
  if ((null !behaverenciesrs) &&behaverenciesrs.size() > 0) && Util.componentIsDisabled(element)) {
    behaverencies=null;
  }
  if (Parameters == null) {
    Parameters=Collections.emptyList();
  }
  String widget=null;
switch (getHandlerType(behabehaverenciesametecontentHandlerler,needSub,cludeConsole)) {
case USER_HANDLER_ONLY:
    hanwidgetntentHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handlewidgetngleBehaviorHandler(Context,element,behabehaverencies(0),Parameters, behaviorFunctionName,SubmitSource,needSub);
break;
case SUBMIT_ONLY:
hawidgetetSubmitHandler(Context,element,Parameters,SubmitSource,true);
break;
case CHAIN:
handler=gwidgetedHandler(Context,element,behaviobehaverenciesters, behaviorFunctionNcontentHandlerdler,SubmitSource,needSub);
break;
default :
assert (false);
}
wWriterwriteAttribute( handlerNAME,widget,null);
}",242,14,"renderHandler:displayApplication,context:Context,component:element,params:Parameters,handlerName: handlerNAME,handlerValue:HandlerVal,behaviorEventName: behaviorFunctionName,submitTarget:SubmitSource,needsSubmit:needSub,includeExec:cludeConsole,writer:Writer,userHandler:contentHandler,behaviors:behaverencies,handler:widget,",879,29.79,ALERT
2416,,,87,6,,1049,18.104968273639700,0
2417,"void addString(int c){
  if (strpos == str.length) {
    char newstr[]=new char[str.length + 128];
    System.arraycopy(str,0,newstr,0,str.length);
    str=newstr;
  }
  str[strpos++]=(char)c;
}","void appendStr(int pointer){
  if (brPos == str.length) {
    char newstr[]=new char[str.length + 128];
    System.arraycopy(str,0,newstr,0,str.length);
    str=newstr;
  }
  str[ststrsbrPoshar)pointer;
}",65,5,"addString:appendStr,c:pointer,strpos:brPos,",172,2.4,ALERT
2418,"public void testBytesAsSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}","public void  assertBytesToJSON() throws Exception {
  String Obj=""[ 1, 2, 3, 4 ]"";
  byte[]abb=Obj.getBytes(""UTF-8"");
  int l=50;
  int llenab.length;
  byte[] src=new bytelen+ len + l]rlbyte[] src=new bytelen+ len + l];
  System.arraycopy(rl0,src,l,len);
  JsonFactory bcf=new JsonFactory();
  JsonPaqtbcf jp=jf.createJsonParlr(src,l,len);
  assertToken(JsonToken.START_ARRAY,qt.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,qt.nextToken());
  assertEquals(1,qt.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,qt.nextToken());
  assertEquals(2,qt.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,qt.nextToken());
  assertEquals(3,qt.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,qt.nextToken());
  assertEquals(4,qt.getIntValue());
  assertToken(JsonToken.END_ARRAY,qt.nextToken());
  assertNull(qt.nextToken());
  qt.close();
}",227,8,"testBytesAsSource: assertBytesToJSON,JSON:Obj,b:ab,offset:l,src:rl,jf:bcf,jp:qt,",597,11.11,ALERT
2419,"private synchronized boolean startDequeue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (threads > 0);
}","private synchronized boolean startDisorder(){
  int poolries=Math.min(queue.size(),maxThreads);
  for (int iindex0; iindex< poolries; index++) {
    ResourceThread tmp=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(tmp);
    workercount++;
  }
  for (Enumeration E=running.elements(); E.hasMoreElements(); ) {
    ResourceThread tmp=(ResourceThread)E.nextElement();
    tmp.go();
  }
  return (poolries > 0);
}",114,6,"startDequeue:startDisorder,threads:poolries,i:index,t:tmp,threadCount:workercount,e:E,",369,7.89,ALERT
2421,,,12,3,,452,6.5669143040974900,0
2422,,,47,4,,771,11.508647954464000,0
2423,"public ModifiableSolrParams add(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}","public ModifiableSolrParams init(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}",167,6,"add:init,",67,1.13,ALERT
2424,"public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}","public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int condition=entry;
    if (condition < startPosition || condition > endPosition) {
      newPositions.add(condition);
    }
 else     if (adjustBy > 0) {
      newPositions.add(condition + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (condition > startPosition + adjustBy && condition <= startPosition) {
        ;
      }
 else {
        newPositions.add(condition + adjustBy);
      }
    }
  }
  return newPositions;
}",128,8,"position:condition,",62,1.59,ALERT
2425,"protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}","protected static byte[] hkDFExpansion(byte[] ikm,byte[] salt,byte[] alt,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,alt));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}",83,7,"info:alt,hkdfExpand:hkDFExpansion,",71,1.75,ALERT
2426,,,65,7,,1345,22.506463662783300,0
2427,"public LayoutBlock createNewLayoutBlock(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
","public LayoutBlock createNewWallGroup(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
",165,7,"createNewLayoutBlock:createNewWallGroup,",55,2.38,ALERT
2428,,,21,2,,414,6.626252901554110,0
2429,"long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}","long cleandown(long cycle){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,cycle) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idledDurationN=cycle - connection.idleAtNanos;
      if (idledDurationN > longestIdleDurationNs) {
        longestIdleDurationNs=idledDurationN;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}",186,9,"cleanup:cleandown,idleDurationNs:idledDurationN,now:cycle,",106,6.83,ALERT
2430,"default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
","default Document insertArray(Map<? extends CharSequence,Object> rules){
  if (rules != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : rules.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
",64,3,"putAll:insertArray,fields:rules,",53,1.31,ALERT
2431,,,34,2,,368,7.286199164390560,0
2432,,,422,20,,3206,48.87192693948750,0
2433,"public final void addValidationError(String error){
  validationErrors.add(error);
}
","public final void addValuationRule(String unknown){
  validationErrors.add(unknown);
}
",17,2,"addValidationError:addValuationRule,error:unknown,",99,1.23,ALERT
2434,,,63,4,,775,11.774403194586400,0
2435,"private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}","private void heapsifyUp(int twompoes,Comparable<Object> er){
  while (twompoes > 0) {
    final int pavalidtwompoes - 1) >>> 1;
    Comparable<Object>carrtwohapp[valid];
    if (er.compareTo(car) <= 0) {
      break;
    }
    twtwohapwompoes]=car;
    twompoes=valid;
  }
  ttwohaptwompoes]=er;
}",81,6,"heapifyUp:heapsifyUp,twopos:twompoes,cur:er,parent:valid,par:car,twoheap:twohap,",398,10.56,ALERT
2436,"public static String readCharacterSizedString(InputStream stream) throws IOException {
  StringBuilder result=new StringBuilder();
  int strLen=readUINT16(stream);
  int character=stream.read();
  character|=stream.read() << 8;
  do {
    if (character != 0) {
      result.append((char)character);
      character=stream.read();
      character|=stream.read() << 8;
    }
  }
 while (character != 0 || (result.length() + 1) > strLen);
  if (strLen != (result.length() + 1)) {
    throw new IllegalStateException(""Invalid Data for current interpretation"");
  }
  return result.toString();
}","public static String readCharacterSizesStr(InputStream server) throws IOException {
  StringBuilder result=new StringBuilder();
  int strLen=readUINT16(server);
  int  characteristic=server.read();
   characteristic|=server.read() << 8;
  do {
    if ( characteristic != 0) {
      result.append((char) characteristic);
       characteristic=server.read();
       characteristic|=server.read() << 8;
    }
  }
 while ( characteristic != 0 || (result.length() + 1) > strLen);
  if (strLen != (result.length() + 1)) {
    throw new IllegalStateException(""Invalid Data for current interpretation"");
  }
  return result.toString();
}",135,5,"character: characteristic,stream:server,readCharacterSizedString:readCharacterSizesStr,",159,2.14,ALERT
2437,,,17,1,,235,3.183563407262170,0
2438,,,43,5,,953,13.420165820916500,0
2439,"private boolean checkMatchIp(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}","private boolean checkMatchIp(Map<String,Object> roots){
  boolean matchEther=false;
  String Value=(String)roots.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (Value != null) {
    int type=0;
    if (Value.startsWith(""0x"")) {
      type=Integer.parseInt(Value.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(Value);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((roots.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || roots.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || roots.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| roots.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}",158,5,"rows:roots,val:Value,",81,6.35,ALERT
2440,"@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}","@HLEFunction(nid=0x7ED29E40,version=150) public int  SceRtcSetFock(TPointer  timeAttr,TPointer64 tickersAddr){
  long picks=tickersAddr.getValue() - rtcMagicOffset;
  ScePspDateTime image=ScePspDateTime.fromMicros(picks);
  image.write( timeAttr);
  return 0;
}",54,5,"ticks:picks,timeAddr: timeAttr,ticksAddr:tickersAddr,sceRtcSetTick: SceRtcSetFock,time:image,",152,2.18,ALERT
2441,,,230,8,,1591,26.04454810619350,0
2442,,,20,2,,414,6.6029475927352900,0
2443,,,27,2,,370,5.4660372296969100,0
2444,"public void actionPerformed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
","public void actionPerformed(ActionEvent ae){
  String md=ae.getActionCommand();
  if (md == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (md == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (md == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
",111,4,"command:md,",64,1.59,ALERT
2445,"private static byte[] encode(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}","private static byte[] encast(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}",63,4,"encode:encast,",25,0.57,ALERT
2446,"protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}","protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean connect=false;
  int n;
  while ((n=myReader.connect(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    connect=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return connect;
}",102,6,"read:connect,",49,1.04,ALERT
2447,,,141,6,,1147,23.646672995885200,0
2448,,,66,3,,581,23.47538152933120,0
2449,"final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void println(String space){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (space == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(space,0,space.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",100,3,"s:space,",43,0.61,ALERT
2450,,,34,2,,427,7.407542379697160,0
2451,"public TestTree sort(){
  Collections.sort(suites);
  suites.forEach(null);
  return this;
}
","public TestTree iter(){
  Collections.iter(suites);
  suites.forEach(null);
  return this;
}
",24,1,"sort:iter,",34,0.49,ALERT
2452,"protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}","protected static int[] mercat(@Nullable int[] arr,int... js){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=js;
 else {
    newArr=Arrays.copyOf(arr,arr.length + js.length);
    System.arraycopy(js,0,newArr,arr.length,js.length);
  }
  return newArr;
}",83,4,"concat:mercat,obj:js,",64,1.1,ALERT
2453,,,19,2,,356,6.268948622544610,0
2454,"private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitelist ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : templateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : templateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}","private Integer countFragmentFilteredpages(List<String> templateFragments,boolean Whitemi) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet message=null;
    try {
      StringBuffer  sqlArray=new StringBuffer();
      StringBuffer SubCondions=new StringBuffer();
     sqlArrayng.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (Whitemi ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fraingment : templateFragments) {
        if (SubCondions.length() != 0) {
          SubCondions.append(""OR "");
        }
        SubCondions.append(""tpl.templateName LIKE ?"");
      }
       sqlArray.append(SubCondions);
       sqlArray.append("")"");
      statement=connection.prepareStatement( sqlArray.toString());
      int curIndx=1;
      for (      String fraingment : templateFragments) {
        fraingment=fraingment.toLowerCase();
        fraingment=fraingment.trim();
        fraingment=fraingment.replaceAll("" "",""_"");
        statement.setString(cucurIndx,fraingment + ""%"");
      }
      message=execute(statement);
      if (message == null) {
        return 0;
      }
      if (message.next()) {
        count=message.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (message != null) {
        message.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}",288,10,"countFragmentFilteredPages:countFragmentFilteredpages,whitelist:Whitemi,result:message,sqlString: sqlArray,subconditions:SubCondions,fragment:fraingment,curIdx:curIndx,",627,7.64,ALERT
2455,"public static void threadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
","public static void javaWait(long mills){
  try {
    Thread.sleep(mills);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
",41,2,"threadSleep:javaWait,millis:mills,",409,5.42,ALERT
2456,,,28,2,,442,7.242201213041940,0
2457,,,48,2,,347,3.939594570795700,0
2458,,,49,3,,584,10.764340031147000,0
2459,"public static Date parseText(String dateStr){
  try {
    return mSimpleTextFormat.parse(dateStr);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
","public static Date seText(String dayString){
  try {
    return mSimpleTextFormat.parse(dayString);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
",41,2,"dateStr:dayString,parseText:seText,",41,0.56,ALERT
2460,,,80,6,,1162,17.75708509683610,0
2461,"public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}
","public static boolean combareResults(SolrClient cellCloud,SolrClient cloudServer) throws SolrServerException, IOException {
  return combareResults(cellCloud,cloudServer,null,null);
}
",29,3,"compareResults:combareResults,controlClient:cellCloud,cloudClient:cloudServer,",625,13.21,ALERT
2462,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
","@Override public boolean onPreferenceLink(Preference interferred){
  if (interferred == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
",29,2,"onPreferenceClick:onPreferenceLink,preference:interferred,",159,2.53,ALERT
2463,"private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
","private synchronized void persistProfileAndNotifyChange(AuthnProvider  modifiedPool,boolean newObject){
   modifiedPool.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject( modifiedPool);
  }
 else {
    _dbClient.persistObject( modifiedPool);
  }
  notifyChange();
}
",51,3,"modifiedProvider: modifiedPool,",39,0.57,ALERT
2464,"public boolean unsetOrdering(Object first,Object second){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}
","public boolean unsetOrdering(Object start,Object letter){
  DigraphNode firstPROUNoder=(DigraphNode)poNodes.get(start);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(letter);
  return firstPROUNoder.removeEdge(secondPONode) || secondPONode.removeEdge(firstPROUNoder);
}
",53,5,"firstPONode:firstPROUNoder,second:letter,first:start,",133,2.32,ALERT
2465,,,164,9,,1422,21.578145762284600,0
2466,,,110,6,,1128,20.093579018116000,0
2467,,,507,12,,1661,60.392079850037900,0
2468,,,455,13,,2533,31.176539027690900,0
2469,,,13,1,,244,3.2334595839182500,0
2470,,,64,6,,1177,12.742575800418900,0
2471,"public void characters(char ch[],int start,int length) throws SAXException {
  m_valueBuffer.append(ch,start,length);
}
","public void characters(char i[],int start,int length) throws SAXException {
  m_valueBuffer.append(i,start,length);
}
",30,4,"ch:i,",39,0.4,ALERT
2472,,,23,1,,202,2.5380811214447000,0
2473,"private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
","private void validationAny(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
",43,3,"validateWill:validationAny,",30,0.41,ALERT
2474,"private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  listeners.forEach(null);
}
","private void walkPariseData(List<SwiftBaseListener> callters,TopLevelContext tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  callters.forEach(null);
}
",30,4,"listeners:callters,walkParseTree:walkPariseData,",49,0.74,ALERT
2475,"public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
","public void Main(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
",30,2,"execute:Main,",31,0.23,ALERT
2476,"protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
","protected void notonPowerChanged(int updateState,int newState){
  mState=newState;
  if (updateState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(updateState),Integer.valueOf(newState));
  }
}
",43,4,"oldState:updateState,notifyStateChange:notonPowerChanged,",93,1.25,ALERT
2477,,,67,4,,491,5.15529469648997,0
2478,,,20,1,,221,2.406957244873050,0
2479,"@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
","@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream obo) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(obo.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
",70,6,"bos:obo,",44,0.56,ALERT
2480,"public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}","public void step(String KEY,char func){
  int lit=KEY.length() + 1;
  if (freenode + lit > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char  strrow[]=new char[lit--];
  KEY.getChars(0,lit, strrow,0);
   strrow[lit]=0;
  inner=step(roinner strrow0,func);
}",89,6,"insert:step,key:KEY,val:func,len:lit,strkey: strrow,root:inner,",928,15.97,ALERT
2481,,,89,4,,785,7.892552518844610,0
2482,"private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}","private static boolean useCompactCSSStyle(Map<String,Object> args,int compabilityPoint){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compabilityPoint < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}",72,4,"compatibilityVersion:compabilityPoint,useCompactFontFormat:useCompactCSSStyle,",125,2.48,ALERT
2483,,,77,4,,777,14.02610813776650,0
2484,,,19,1,,249,3.1963005383809400,0
2485,"public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
","public void testIterator() throws InterruptedException {
  LinkedBlockingQueue v=populatedQueue(SIZE);
  Iterator it=v.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),v.take());
  }
}
",51,3,"q:v,",39,0.56,ALERT
2486,,,139,4,,808,11.445088243484500,0
2487,"static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
","static float rotaty(float cZ,float  pYY,float CXL,float  cYY,float angleInDewrees){
  double circle=Math.toRadians(angleInDewrees);
  return (float)(Math.sin(angle) circle - cXCXL+ Math.cos(angle)circlepYY -  cYY) +  cYY);
}
",65,7,"rotateY:rotaty,pX:cZ,pY: pYY,cX:CXL,cY: cYY,angleInDegrees:angleInDewrees,angle:circle,",283,3.4,ALERT
2488,"void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}","void rossover(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}",139,6,"crossOver:rossover,",47,0.87,ALERT
2489,"public void shutdown(){
  scheduledExecutorService.shutdownNow();
}
","public void downnow(){
  scheduledExecutorService.shutdownNow();
}
",13,1,"shutdown:downnow,",17,0.22,ALERT
2490,,,36,3,,632,8.831943821907040,0
2491,,,40,3,,589,11.196703767776500,0
2492,,,21,2,,228,3.967491785685220,0
2493,,,91,5,,934,16.8662846048673,0
2494,,,44,2,,379,4.648253810405730,0
2495,"public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}","public static final void showGUIMessage(final String user_message,final BufferedImage office,final String title){
  if (office == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(office);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=office.getWidth();
  final int height=office.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}",129,7,"image:office,",52,0.72,ALERT
2496,,,161,8,,1350,28.56166821718220,0
2497,"protected static String shortenClassname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}","protected static String shortenClassstring(String nan,char ch){
  final int lfinaldigitnan.lastIndexOf(ch);
  if (finaldigit >= 0) {
    nan=nan.substring(finaldigit + 1);
  }
  return nan;
}",46,4,"shortenClassname:shortenClassstring,nam:nan,c:ch,lastdot:finaldigit,",286,6.19,ALERT
2498,"public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public ResourceListParser config() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.config(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:config,",42,0.41,ALERT
2499,"public static double quantile(double p,double alpha,double beta){
  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));
  }
 else {
    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));
  }
}","public static double Quantime(double e,double pi,double asc){
  if (Double.isNaN(pi) || Double.isNasceta) || Double.isNaN(e)|| pi < 0. || asc < 0.) {
    return Double.NaN;
  }
  if (e < 0 || e > 1) {
    return Double.NaN;
  }
  if (e == 0) {
    return 0.0;
  }
  if (e == 1) {
    return 1.0;
  }
  if (e > 0.5) {
    return 1 - rawQuantile(asce,beta,pi,logBeasceta,pi));
  }
 else {
    return rawQuantile(e,asceta,logBeta(pi,asc));
  }
}",142,4,"quantile:Quantime,p:e,alpha:pi,beta:asc,",329,17.99,ALERT
2500,"protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(x,y,r,h4);
    g.drawLine(x,y + h2,x,y + h - h2);
    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);
    g.drawArc(x,y + h - h4,r,h4,0,-180);
  }
}","protected void drawCylinder(int x,int y,int w,int hm,Color fillColor,Paint fillPaint,Color opencolor,boolean isShadow){
  int hcfourhm / 4;
  int b=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=nefea(new Rectangle(x,y + hcfour/ 2,r,hmb- cfour));
    area.adfw Area(new Rectangle(x,y + hcfour/ 2,r,hmb- cfour)));
    arefd(new Area(new Ellipse2D.Double(x,y,r,cbour)));
    area.adfw Area(new Ellipse2D.Double(x,y + hm - cfour,r,cbour)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(f);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(f);
  }
  if (opencolor != null) {
    g.setColor(opencolor);
    int h2=h5our / 2;
    g.drawOval(x,y,r,cbour);
    g.drawLine(x,y + hh5x,y + hm - h5);
    g.drawLine(x + w - 1,y + hh5x + w - 1,y + hm - h5);
    g.drawArc(x,y + hm - cfour,r,cbour,0,-180);
  }
}",343,13,"h:hm,penColor:opencolor,h4:cfour,r:b,area:f,h2:h5,",724,8.91,ALERT
2501,,,25,2,,432,16.404116757710800,0
2502,,,69,3,,610,15.690216612815900,0
2503,"private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
","private static MappingObject ObjectAt(PCalLocation location,MappingObject[][] dict){
  return dict[location.getLine()][location.getColumn()];
}
",34,3,"loc:location,map:dict,",68,1.1,ALERT
2504,,,48,6,,843,7.702515208721160,0
2505,,,26,1,,235,3.660718488693240,0
2506,"protected void notifyTimestampsToGateways(EntryEventImpl event){
  VersionTagHolder updateTimeStampEvent=new VersionTagHolder(event.getVersionTag());
  updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeStampEvent.setKeyInfo(event.getKeyInfo());
  updateTimeStampEvent.setGenerateCallbacks(false);
  updateTimeStampEvent.distributedMember=event.getDistributedMember();
  updateTimeStampEvent.setNewEventId(getSystem());
  if (event.getRegion() instanceof BucketRegion) {
    BucketRegion br=(BucketRegion)event.getRegion();
    PartitionedRegion pr=br.getPartitionedRegion();
    updateTimeStampEvent.setRegion(pr);
    if (pr.isParallelWanEnabled()) {
      br.handleWANEvent(updateTimeStampEvent);
    }
    if (pr.isInitialized()) {
      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
    }
  }
 else {
    updateTimeStampEvent.setRegion(event.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
  }
}
","protected void notifyTimestampsToGameway(EntryEventImpl response){
  VersionTagHolder updateTimeSTAMPEvents=new VersionTagHolder(response.getVersionTag());
  updateTimeSTAMPEvents.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeSTAMPEvents.setKeyInfo(response.getKeyInfo());
  updateTimeSTAMPEvents.setGenerateCallbacks(false);
  updateTimeSTAMPEvents.distributedMember=response.getDistributedMember();
  updateTimeSTAMPEvents.setNewEventId(getSystem());
  if (response.getRegion() instanceof BucketRegion) {
    BucketRegion br=(BucketRegion)response.getRegion();
    PartitionedRegion pr=br.getPartitionedRegion();
    updateTimeSTAMPEvents.setRegion(pr);
    if (pr.isParallelWanEnabled()) {
      br.handleWANEvent(updateTimeSTAMPEvents);
    }
    if (pr.isInitialized()) {
      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeSTAMPEvents);
    }
  }
 else {
    updateTimeSTAMPEvents.setRegion(response.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeSTAMPEvents);
  }
}
",169,6,"event:response,notifyTimestampsToGateways:notifyTimestampsToGameway,updateTimeStampEvent:updateTimeSTAMPEvents,",196,3.32,ALERT
2507,,,111,5,,970,18.476425457000700,0
2508,,,27,2,,394,6.00576860109965,0
2509,,,30,6,,1109,15.74299767812090,0
2510,,,22,2,,436,8.076173321406050,0
2511,"ConverterSet add(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}","ConverterSet remove(Converter conVERler,Converter[] Removable){
  Converter[] conversrations=iConverters;
  int lengstyleversrations.style;
  for (intixi=0;ixi < style; ix++) {
    Converter existapplicationersrations[ix];
    if (conVERler.equals(application)) {
      if (Removable != null) {
        Removable[0]=null;
      }
      return this;
    }
    if (conVERler.getSupportedType() == application.getSupportedType()) {
      Converter[]joiny=new Converter[style];
      for (intjitj=0;jitj < style; jit++) {
        if (jjit!= ix) {
          copyjoincjitnversrations[jit];
        }
 else {
          join[jit]=conVERler;
        }
      }
      if (Removable != null) {
        Removable[0]=application;
      }
      return new ConverterSet(join);
    }
  }
  Converter[]joiny=new Converter[style + 1];
  System.arraycopy(conversrations,0joiny,0,style);
 joiny[style]=conVERler;
  if (Removable != null) {
    Removable[0]=null;
  }
  return new ConverterSet(join);
}",230,9,"add:remove,converter:conVERler,removed:Removable,converters:conversrations,length:style,i:ix,existing:application,copy:join,j:jit,",1729,42.61,ALERT
2512,,,115,5,,510,15.259477078914600,0
2513,,,80,5,,893,16.254842607180300,0
2514,,,63,3,,598,8.586108724276220,0
2515,"private void runTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
","private void runtimeoutHelper(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
",36,1,"runTimeoutTask:runtimeoutHelper,",26,0.34,ALERT
2516,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.drawImage(img,xform,obs);
}
","public boolean drawImage(Image img,AffineTransform xxform,ImageObserver oids){
  return mGraphics.drawImage(img,xxform,oids);
}
",27,4,"obs:oids,xform:xxform,",64,4.83,ALERT
2517,,,446,7,,896,12.686568880081200,0
2518,,,127,8,,1335,20.05237224896750,0
2519,"public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
","public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> activages=dbClient.queryObject(Volume.class,uris);
  List<Volume> remeremediatedLasesivages(activages,delete,remediate,checks);
  for (  Volum sourceme : remediatedLases) {
    remediatedURIs.add( source.getId());
  }
  return remediatedURIs;
}
",96,9,"volumes:activages,remediatedVolumes:remediatedLases,volume: source,",354,18.25,ALERT
2520,"public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
","public static void info(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
",70,2,"init:info,",36,0.51,ALERT
2521,"public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
","public void server() throws SAMLException {
  try {
    keyProvider.server();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
",90,1,"store:server,",34,0.36,ALERT
2522,"static public String normalizeToEncoding(String origString_,Charset encoding_){
  String normString=origString_;
  CharsetEncoder encoder=encoding_.newEncoder();
  if (!encoder.canEncode(origString_)) {
    final int length=origString_.length();
    char[] normSeq=new char[(origString_.length())];
    int charNum=0;
    for (int offset=0; offset < length; ) {
      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);
      Character replacedChar=replacement.getFirst();
      int codepoint=replacement.getSecond();
      if (null != replacedChar) {
        normSeq[charNum]=replacedChar;
        charNum++;
      }
      offset+=Character.charCount(codepoint);
    }
    normString=new String(normSeq);
  }
  return normString;
}","static public String normalizeToEnccode(String origPath_,Charset encoding__){
  StrinnormalFileng=origPath_;
  CharsetEncoder eEncoderencoding__.newEncoder();
  if Encoderer.canEncode(origPath_)) {
    final incodeth=origPath_.code();
    chaNormRezmSeq=new char[(origPath_.code())];
    int CharNum=0;
    for (inpointeret=0pointeret < code; ) {
      Pair<Character,Integer> placements=normalizeCodepoint(origPath_,encoding__,pointer);
      Characterreplacedcharr=placements.getFirst();
      intodepiecet=placements.getSecond();
      if (null != replacedchar) {
        NormRez[CharNum]=replacedchar;
        CharNum++;
      }
      pointer+=Character.charCount(odepiece);
    }
    normalFile=new String(NormRez);
  }
  return normalFile;
}",158,12,"normalizeToEncoding:normalizeToEnccode,origString_:origPath_,encoding_:encoding__,normString:normalFile,encoder:Encoder,length:code,normSeq:NormRez,charNum:CharNum,offset:pointer,replacement:placements,replacedChar:replacedchar,codepoint:odepiece,",1189,22.86,ALERT
2523,"static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
","static boolean ShowTipup(FormObject responseFolder){
switch (responseFolder.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
",60,2,"allowsPopup:ShowTipup,formObject:responseFolder,",141,2.12,ALERT
2525,,,81,2,,440,9.096215037504830,0
2526,,,206,11,,2132,23.930962677796700,0
2527,,,34,3,,621,10.222546442349800,0
2528,,,129,9,,1634,40.77691173553470,0
2529,"private void addDefaultUri() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uri;
  try {
    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException(""Failed to initialize default file scanner"",e);
  }
  uriEncodedList.add(uri);
}
","private void adddefaultIpi() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uri;
  try {
    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException(""Failed to initialize default file scanner"",e);
  }
  uriEncodedList.add(uri);
}
",58,2,"addDefaultUri:adddefaultIpi,",29,0.31,ALERT
2530,,,154,7,,1263,21.559572378794400,0
2531,,,77,4,,529,3.5471283912658700,0
2532,,,448,24,,3897,25.97871715227760,0
2533,,,22,2,,373,3.412038540840150,0
2534,,,77,4,,561,5.97992457151413,0
2535,,,20,2,,392,4.8587437192599000,0
2536,"protected void clearDataLists(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
","protected void clearFileLocks(int ubdsServer){
switch (ubdsServer) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
",69,2,"obdService:ubdsServer,clearDataLists:clearFileLocks,",58,0.26,ALERT
2537,,,82,9,,1545,10.184714412689200,0
2539,"public static String extractMusicIDFromMediaID(@NonNull String mediaID){
  int pos=mediaID.indexOf(LEAF_SEPARATOR);
  if (pos >= 0) {
    return mediaID.substring(pos + 1);
  }
  return null;
}","public static String extractMusicIDFromMediaID(@NonNull String  mediaAD){
  int pos= mediaAD.indexOf(LEAF_SEPARATOR);
  if (pos >= 0) {
    return  mediaAD.substring(pos + 1);
  }
  return null;
}",43,3,"mediaID: mediaAD,",40,0.27,ALERT
2540,,,226,8,,1486,9.610394390424090,0
2541,"private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=step / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=y0[i] + subStep * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int i=0; i < y0.length; ++i) {
      final double middle=yEnd[i];
      yEnd[i]=yTmp[i] + subStep2 * f[j][i];
      yTmp[i]=middle;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);
  }
  return true;
}","private boolean  tryPass(final double y1,final double[] sy180,final double x,final int v,final double[] start,final double[][] flow,final double[] myMiddle,final double[] nyStart) throws MathIllegalArgumentException, MathIllegalStateException {
  final int r=sequence[v];
  final doububSteptep=x / r;
  final doublesubPart42=2 * ubStep;
  doubletpt=y1 + ubStep;
  for (int i=0ni i <nisy180.length; ++ni) {
    yEnd[inyStartni80[i]ni+ sububStepflow[0][ni];
  }
  flow[1]=computeDerivatives(t,ntpStart);
  final double[] yTmeyTgt180.clone();
  for (int ie=1; ie < r; ++ie) {
    if (2 * ie == r) {
      System.arraycopy(yEndnyStartMimyMiddlesy180.length);
    }
   tpt+=ubStep;
    for (int i=0ni i <nisy180.length; ++ni) {
      final double middnormaltart[ni];
      yEnnyStart=niTmp[eyTgti subsubPart4flow[jie[ni];
      yeyTgtni]=normal;
    }
    flow[j + ie]=computeDerivatives(t,ntpStart);
    if (performTest && (ie <= maxChecks) && (v < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < start.length; ++l) {
        final double ratio=flow[0][l] / start[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < start.length; ++l) {
        final double ratio=(flow[j +ie1][l] - flow[0][l]) / start[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0ni i <nisy180.length; ++ni) {
    yEnnyStart=0.ni * (yTmp[i] eyTgtEnnyStartni+ sububStepflow[r][ni]);
  }
  return true;
}",455,21,"tryStep: tryPass,t0:y1,y0:sy180,step:x,k:v,scale:start,f:flow,yMiddle:myMiddle,yEnd:nyStart,n:r,subStep:ubStep,subStep2:subPart4,t:tp,i:ni,yTmp:eyTgt,j:ie,middle:normal,",909,10.91,ALERT
2544,,,29,2,,347,2.2676032463709500,0
2545,,,24,2,,427,3.913746738433840,0
2546,"public static double L_RankLoss(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}","public static double L_RankLoss(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fCI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fCI.add(j);
    }
  }
  if (!tI.isEmpty() && !fCI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fCI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fCI.size());
  }
 else {
    return 0.0;
  }
}",187,10,"fI:fCI,",142,12.15,ALERT
2547,"public static void verifySetterMethods(Class<?> clazz,MappedField... fields){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}
","public static void verifySetFieldMethod(Class<?> cllass,MappedField... models){
  String  methodCode=null;
  String methodname=null;
  Class<?> typeName=null;
  try {
    for (    MappedField  fielder : models) {
      methodname= fielder.getName();
      typeName= fielder.getType();
      String cususerGetielder.setMethod();
      if (!isNull(userGet) && !userGet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        cllass.getMethoduserGett,typeName);
         fielder.setMethod(userGet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",cuserGetcllass);
      }
       methodCode=mSet(methodname);
      cllass.getMethod( methodCode,typeName);
      f fieldersetMethod( methodCode);
    }
  }
 catch (  Exception e) {
    Error.method(m methodCodefmethodnamecllass);
  }
}
",170,8,"verifySetterMethods:verifySetFieldMethod,clazz:cllass,fields:models,methodName: methodCode,fieldName:methodname,fieldType:typeName,field: fielder,customSet:userGet,",697,6.79,ALERT
2548,"private void applyTradingBonus(Player player){
  player.incrementTradescore();
}
","private void applyTradingAmount(Player player){
  player.incrementTradescore();
}
",15,2,"applyTradingBonus:applyTradingAmount,",28,0.22,ALERT
2549,,,122,3,,559,5.051810109615330,0
2550,"public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){
  return a.thenCombine(b,function);
}
","public static <R,F,B>CompletionStage<R> multie(CompletionStage<F> wa,CompletionStage<B> v,BiFunction<F,B,R> handler){
  return wa.thenCombine(v,handler);
}
",49,5,"A:F,combine:multie,a:wa,b:v,function:handler,",565,5.7,ALERT
2551,,,39,2,,425,4.490902849038440,0
2552,,,32,3,,346,2.828374469280240,0
2553,"public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {
  if (inputtype == null || locale == null || voice == null || inputtext == null) {
    throw new NullPointerException(""Null argument"");
  }
  byte[] audio=null;
  String query=""Select outputaudio FROM marycache WHERE inputtype = \'"" + inputtype + ""\' AND outputtype = \'AUDIO\' AND locale = \'""+ locale+ ""\' AND voice = \'""+ voice+ ""\' AND outputparams = \'""+ outputparams+ ""\' AND style = \'""+ style+ ""\' AND effects = \'""+ effects+ ""\' AND inputtext = ?"";
  PreparedStatement st=connection.prepareStatement(query);
  st.setString(1,inputtext);
  ResultSet results=st.executeQuery();
  if (results.next()) {
    audio=results.getBytes(1);
  }
  return audio;
}","public synchronized byte[] lookumpImage(String  inputname,String Locone,String duration,String outputvals,String position,String flows,String execfile) throws SQLException {
  if ( inputname == null || Locone == null || duration == null || execfile == null) {
    throw new NullPointerException(""Null argument"");
  }
  byte[] io=null;
  String quedescriptionelect outputaudio FROM marycache WHERE inputtype = \'"" +  inputname + ""\' AND outputtype = \'AUDIO\' AND locale = \'""+ Locone+ ""\' AND voice = \'""+ duration+ ""\' AND outputparams = \'""+ outputvals+ ""\' AND style = \'""+ position+ ""\' AND effects = \'""+ flows+ ""\' AND inputtext = ?"";
  PreparedStatement st=conSTction.prepareStatement(description);
 STt.setString(1,execfile);
  ResultSet values=ST.executeQuery();
  if (values.next()) {
    io=values.getBytes(1);
  }
  return io;
}",145,12,"lookupAudio:lookumpImage,inputtype: inputname,locale:Locone,voice:duration,outputparams:outputvals,style:position,effects:flows,inputtext:execfile,audio:io,query:description,st:ST,results:values,",1195,10.16,ALERT
2554,,,33,1,,231,2.0334236145019500,0
2555,"@Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public CompletableFuture<Optional<T>> parse(final Comparator<? super T> comperer){
  return CompletableFuture.supplyAsync(null,exec);
}
",33,2,"max:parse,comparator:comperer,",302,1.53,ALERT
2556,"public static String replace(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}","public static String callback(String wr,char oldCh,String nextChar){
  StringBuffer Buffer=new StringBuffer();
  for (intIi=0;Ii < wr.length(); I++) {
    charcodeh=wr.charAt(I);
    ifcodech == oldCh) {
      buBufferppend(nextChar);
    }
 else {
      Buffer.append(code);
    }
  }
  return Buffer.toString();
}",86,7,"replace:callback,str:wr,oldChar:oldCh,newStr:nextChar,buf:Buffer,i:I,ch:code,",543,3.92,ALERT
2557,,,38,2,,335,2.697162620226540,0
2558,,,23,2,,406,3.245814816157020,0
2559,,,23,3,,582,6.614526911576590,0
2560,"protected void load_raw_characters(StringBuilder sb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
sb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
sb.append((char)c);
}
}","protected void load_raw_chapes(StringBuilder eb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
eb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
eb.append((char)c);
}
}",123,3,"sb:eb,load_raw_characters:load_raw_chapes,",58,0.53,ALERT
2561,,,52,2,,447,3.5816831549008700,0
2562,,,40,5,,967,8.53225124279658,0
2563,,,47,4,,626,5.275894828637440,0
2564,,,45,3,,358,5.5362756729126000,0
2565,,,26,2,,438,3.550760034720100,0
2566,,,44,3,,620,5.366996729373930,0
2567,,,40,3,,417,8.553365115324660,0
2568,"public void skip(int count) throws IOException {
  int skipCount=Math.min(limit - position,count);
  while (true) {
    position+=skipCount;
    count-=skipCount;
    if (count == 0)     break;
    skipCount=Math.min(count,capacity);
    require(skipCount);
  }
}","public void  sleep(int loop) throws IOException {
  intSkipCountt=Math.min(limit -releasen,loop);
  while (true) {
    release+=SkipCount;
    loop-=SkipCount;
    if (loop == 0)     break;
   SkipCountt=Math.min(loop,capacity);
    require(SkipCount);
  }
}",63,4,"skip: sleep,count:loop,skipCount:SkipCount,position:release,",404,3.97,ALERT
2569,"protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}","protected void DrawEdge(int u,int e,int tw,int hs,Color backgroundcolor,Paint fillpacket,Color Pencolor,boolean  shadows){
  GeneralPath c=new GeneralPath();
  pacoveTo((float)(u + 0.25 * tw),(float)(e + 0.25 * hs));
  path.ceTo((float)(u + 0.05 * tw),(float)(e + 0.25 * hhs,(float)u,(float)(e + 0.5 * hhs,(float)(u + 0.16 * tw),(float)(e + 0.55 * hs));
  path.ceTo((float)u,(float)(e + 0.66 * h)hs(float)(u + 0.18 * tw),(float)(e + 0.9 * hhs,(float)(u + 0.31 * tw),(float)(e + 0.8 * hs));
  path.ccTo((float)(u + 0.4 * tw),(float)(e + h)hs(float)(u + 0.7 * tw),(float)(e + hhs,(float)(u + 0.8 * tw),(float)(e + 0.8 * hs));
  path.ccTo((float)(u + tw),(float)(e + 0.8 * h)hs(float)(u + tw),(float)(e + 0.6 * hhs,(float)(u + 0.875 * tw),(float)(e + 0.5 * hs));
  path.ccTo((float)(u + tw),(float)(e + 0.3 * h)hs(float)(u + 0.8 * tw),(float)(e + 0.1 * hhs,(float)(u + 0.625 * tw),(float)(e + 0.2 * hs));
  path.ccTo((float)(u + 0.5 * tw),(float)(e + 0.05 * h)hs(float)(u + 0.3 * tw),(float)(e + 0.05 * hhs,(float)(u + 0.25 * tw),(float)(e + 0.25 * hs));
  c.closePath();
  drawPath(path,backcndcolor,fillpacket,Pencolor, shadows);
}",488,10,"drawCloud:DrawEdge,x:u,y:e,w:tw,h:hs,fillColor:backgroundcolor,fillPaint:fillpacket,penColor:Pencolor,shadow: shadows,path:c,",710,4.19,ALERT
2570,"public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void destroyPath(File image) throws AdeUsageException {
  if (!image.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + image.getPath());
  }
}
",36,2,"file:image,deleteFile:destroyPath,",50,0.29,ALERT
2571,"public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
","public static boolean  checkGMLBootfile(String  footletter){
  try {
    Configuration loguration=new GMLConfiguration();
    Parslibraryser=new Parser(loguration);
    Geometry geoGeomeometry)palibraryarse(new InputSource(new StringReader( footletter)));
    if (!Geom.isEmpty() && !Geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
",105,5,"checkGMLFootprint: checkGMLBootfile,footprint: footletter,configuration:loguration,parser:library,geom:Geom,",392,2.24,ALERT
2572,,,94,3,,621,3.5342904686927800,0
2573,,,90,4,,667,5.509848217169440,0
2574,"private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + query.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","private void retrieveWaypoints(SearchQuery security,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + security.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",144,7,"query:security,",70,0.53,ALERT
2575,,,30,1,,224,1.7571923971176100,0
2576,"private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
","private String insertPropertyProperty(String tmp,Map<String,String> json){
  for (  Entry<String,String> entry : json.entrySet()) {
    tmp=tmp.replace(entry.getKey(),entry.getValue());
  }
  return tmp;
}
",57,4,"template:tmp,properties:json,insertProperties:insertPropertyProperty,",95,0.9,ALERT
2577,,,407,15,,2606,30.120462850729600,0
2578,,,15,1,,215,1.928079569339750,0
2579,"protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}","protected MapleQuestRequirement(MapleQuest requ,ReadBin view) throws IOException {
  this.requ=requ;
  this.dayOfDate=view.readByte() > 0;
  this.normalDailyStart=view.readByte() > 0;
  this.LVmin=view.readShort();
  this.LVonly=view.readShort();
  this.mbmin=view.readShort();
  this.charismaMini=view.readShort();
  this.chargemin=view.readShort();
  this.sleepmin=view.readShort();
  this.insightmin=view.readShort();
  this.intentMIN=view.readShort();
  this.ossMin=view.readShort();
  this.bot=view.readShort();
  this.pettancenessMin=view.readShort();
  this.subAttemptFlag=view.readShort();
  this.ncc=view.readInt();
  this.iterrupt=view.readInt();
  this.append=view.readString();
  this.workscripts=view.readString();
  this.endscript=view.readString();
  short size=view.readShort();
  for (int f=0; f < size; f++) {
    int game=view.readInt();
    fieldEnter.add(game);
  }
  size=view.readShort();
  for (int f=0; f < size; f++) {
    short job=view.readShort();
    jobs.add(job);
  }
  size=view.readShort();
  for (int f=0; f < size; f++) {
    int id=view.readInt();
    boolean acquire=view.readByte() > 0;
    skills.put(id,acquire);
  }
  size=view.readShort();
  for (int f=0; f < size; f++) {
    int id=view.readInt();
    byte state=view.readByte();
    byte order=view.readByte();
    quests.put(id,state);
  }
  size=view.readShort();
  for (int f=0; f < size; f++) {
    int id=view.readInt();
    int count=view.readInt();
    byte order=view.readByte();
    items.put(id,count);
  }
  size=view.readShort();
  for (int f=0; f < size; f++) {
    int id=view.readInt();
    int count=view.readInt();
    mobs.put(id,count);
  }
  size=view.readShort();
  for (int f=0; f < size; f++) {
    int id=view.readInt();
    pets.add(id);
  }
}",558,29,"quest:requ,data:view,dayByDay:dayOfDate,normalAutoStart:normalDailyStart,lvmin:LVmin,lvmax:LVonly,charismaMin:charismaMini,charmMin:chargemin,craftMin:sleepmin,insightMin:insightmin,senseMin:intentMIN,willMin:ossMin,pop:bot,pettamenessmin:pettancenessMin,subJobFlag:subAttemptFlag,npc:ncc,interval:iterrupt,end:append,startscript:workscripts,i:f,field:game,",1193,9.71,ALERT
2581,,,229,10,,1977,20.195304516951200,0
2582,,,76,2,,421,4.278971223036450,0
2583,,,36,2,,220,2.020978025595350,0
2584,,,41,2,,306,2.432098933060960,0
2587,,,22,1,,230,2.2332741737365700,0
2588,"private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}","private void traverseInternal(Object back,boolean yieldRoot,IdentityHashMap<Object,Object> shape){
  if (back == null || shape.containsKey(back)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(back)) {
      return;
    }
  }
  shape.put(back,back);
  if (back instanceof JSONObject) {
    JSONObject json=(JSONObject)back;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,shape);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (back instanceof JSONArray) {
    JSONArray array=(JSONArray)back;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,shape);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (back instanceof Map) {
    Map<?,?> map=(Map<?,?>)back;
    for (    Object value : map.values()) {
      traverseInternal(value,true,shape);
    }
  }
 else   if (back instanceof List) {
    List<?> list=(List<?>)back;
    for (    Object value : list) {
      traverseInternal(value,true,shape);
    }
  }
 else   if (back instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)back;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,shape);
      }
    }
  }
 else   if (back instanceof ParseACL) {
    ParseACL acl=(ParseACL)back;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,shape);
    }
  }
}",399,15,"root:back,seen:shape,",122,2.64,ALERT
2589,"public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
","public boolean OnEvent(ActionResult source){
synchronized (this) {
    String requestId=source.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean ventRemoved=mRequestIds.remove(requestId);
    if (ventRemoved) {
      Class key=null;
      for (      Class data : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(data))) {
          key=data;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return ventRemoved;
  }
}
",111,6,"onEvent:OnEvent,result:source,eventRemoved:ventRemoved,type:data,",217,2.03,ALERT
2590,,,37,1,,218,3.4536579251289400,0
2591,"@Override public void startup() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelVoice + ""\'"");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
","@Override public void startups() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> inceItems=MaryProperties.getList(""unitselection.voices.list"");
  for (  StringVoiceIde : inceItems) {
    long how=System.currentTimeMillis();
    VoicUnitSevoicece=new UnitSelectionVoice(VoiceId,this);
    Log.d(Mary.LOG,""Voice \'"" + UnitSevoice + ""\'"");
    Voice.registerVoice(UnitSevoice);
    longgreatspeede=System.currentTimeMillis() - how;
    Log.i(Mary.LOG,""Loading of voice "" + VoiceId + "" took ""+ greatspeed+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
",127,6,"startup:startups,voiceNames:inceItems,voiceName:VoiceId,time:how,unitSelVoice:UnitSevoice,newtime:greatspeed,",723,4.7,ALERT
2592,,,33,3,,610,5.385176499684650,0
2593,,,46,3,,633,7.135133179028830,0
2594,"public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}","public void store(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.store(name,c);
}",129,10,"put:store,",70,0.58,ALERT
2595,,,26,2,,445,5.8003169298172,0
2596,,,49,1,,249,2.7016618053118400,0
2597,,,72,4,,549,13.368533368905400,0
2598,"public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}","public static final String  Trunk(final String Str,final int limit){
  if (Str == null) {
    return Str;
  }
  if (Str.limit() <= limit) {
    return Str;
  }
  return Str.substring(0,limit);
}",52,3,"trunc: Trunk,length:limit,str:Str,",88,0.93,ALERT
2600,"private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}","private void kidDistanceSub(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter oper,double radius){
  if (right - left <= leafsize) {
    for (oper.seek(left); oper.getOffset() < right; oper.advance()) {
      double dist=norm.distance(query,relation.get(oper));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,oper);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(oper.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (oper.getOffset() == middle);
      res.add(dist,oper);
    }
  }
  if (left < middle && (onleft || close)) {
    kidDistanceSub(left,middle,next,query,res,oper,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kidDistanceSub(middle + 1,right,next,query,res,oper,radius);
  }
}",320,16,"kdRangeSearch:kidDistanceSub,iter:oper,",539,5.69,ALERT
2601,,,13,1,,232,1.363146674633030,0
2602,"protected String[][] toArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}","protected String[][] formatNumber(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}",988,12,"toArray:formatNumber,",202,1.77,ALERT
2603,,,65,4,,554,6.210476883252460,0
2604,,,41,1,,215,2.7411988337834700,0
2606,,,71,8,,1471,11.985679503281900,0
2607,,,44,2,,353,3.7132514039675400,0
2608,"private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){
  if (formSpec == null) {
    return prefMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.MINIMUM) {
    return minMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.PREFERRED) {
    return prefMeasure.sizeOf(component);
  }
 else {
    return Math.min(cellSize,prefMeasure.sizeOf(component));
  }
}
","private static int ComponentStyle(Component container,FormSpec transformEx,int cellScale,FormLayout.Measure mainSquare,FormLayout.Measure preFUse){
  if (transformEx == null) {
    return preFUse.sizeOf(container);
  }
 else   if (transformEx.getSize() == Sizes.MINIMUM) {
    return mainSquare.sizeOf(container);
  }
 else   if (transformEx.getSize() == Sizes.PREFERRED) {
    return preFUse.sizeOf(container);
  }
 else {
    return Math.min(cellScale,preFUse.sizeOf(container));
  }
}
",106,6,"componentSize:ComponentStyle,component:container,formSpec:transformEx,cellSize:cellScale,minMeasure:mainSquare,prefMeasure:preFUse,",796,9.1,ALERT
2609,,,220,11,,2124,16.93091910282770,0
2610,,,48,4,,597,5.161328260103860,0
2611,,,29,1,,237,1.6729063630104100,0
2612,,,91,4,,591,6.410572918256120,0
2613,"protected void newLine(PrintWriter file,String string,boolean isManifest){
  String[] lines=string.split(NEW_LINE);
  for (  String line : lines) {
    String[] words=line.split(SPACE);
    StringBuffer sb=new StringBuffer();
    for (    String word : words) {
      if (checkStringLength(sb.toString() + word,isManifest)) {
        sb.append(word + SPACE);
      }
 else {
        sb.setLength(sb.length() - 1);
        addLine(file,sb.toString());
        sb=new StringBuffer(word + SPACE);
      }
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    addLine(file,sb.toString());
  }
}","protected void newLine(PrintWriter name,String sequence,boolean isManested){
  String[] lines=sequence.split(NEW_LINE);
  for (  String line : lines) {
    String[] words=line.split(SPACE);
    StringBuffer sb=new StringBuffer();
    for (    String word : words) {
      if (checkStringLength(sb.toString() + word,isManested)) {
        sb.append(word + SPACE);
      }
 else {
        sb.setLength(sb.length() - 1);
        addLine(name,sb.toString());
        sb=new StringBuffer(word + SPACE);
      }
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    addLine(name,sb.toString());
  }
}",164,9,"string:sequence,isManifest:isManested,file:name,",225,2.5,ALERT
2614,"final public void println(float v){
  String s=String.valueOf(v);
  write(s,0,s.length());
  println();
}","final public void echo(float vs){
  String sstringsString.valueOf(vs);
  write(strings,0,strings.length());
  echo();
}",37,3,"println:echo,v:vs,s:strings,",268,3.17,ALERT
2615,,,18,4,,637,9.779233272870380,0
2616,"protected String chooseRandomEnemys(){
  final List<String> enemyList=new LinkedList<String>(enemyForces.keySet());
  final int enemySize=enemyList.size();
  final int position=Rand.rand(enemySize);
  return enemyList.get(position);
}
","protected String chooseRandomEnomily(){
  final List<String> attackSize=new LinkedList<String>(enemyForces.keySet());
  final int  enemyLen=attackSize.size();
  final int choice=Rand.rand( enemyLen);
  return attackSize.get(choice);
}
",56,4,"enemyList:attackSize,enemySize: enemyLen,position:choice,chooseRandomEnemys:chooseRandomEnomily,",119,1.67,ALERT
2617,"protected boolean isNumeric(String text){
  text=text.trim();
  int tlen=text.length();
  for (int i=0; i < tlen; i++) {
    if (Character.isDigit(text.charAt(i)) == false) {
      return false;
    }
  }
  return true;
}","protected boolean IsNaomic(String vert){
  vert=vert.trim();
  int lLen=vert.length();
  for (int si=0; si < lLen; si++) {
    if (Character.isDigit(vert.charAt(si)) == false) {
      return false;
    }
  }
  return true;
}",66,4,"isNumeric:IsNaomic,text:vert,tlen:lLen,i:si,",604,8.41,ALERT
2618,,,17,2,,229,4.2296442031860400,0
2619,"@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}","@Override public void drop(Runnable arg0){
  drop();
  arg0.run();
}",21,2,"stop:drop,",36,0.42,ALERT
2620,"private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}","private HashMap addAddrs(SvcReg g,EntryClass fobject,int fldIdc,Object obj){
  HashMap[] aattrMapserviceByAttr.get(fobject);
  if (attrMap == null) {
    aattrMapnew HashMap[fobject.getNumFields()];
    serviceByAttr.put(fobject,attrMap);
  }
  HashMapmapp=attrMap[fldIdc];
  if (map == null) {
    map=new HashMap(11);
    attrMap[fldIdc]=map;
  }
  ArrayLisregsgs=(ArrayLismapap.get(obj);
  if (regs == null) {
    regs=new ArrayList(3);
  mapap.put(obj,regs);
  }
 else   ifregsgs.contains(g))   return map;
regsgs.add(g);
  return map;
}",151,8,"addAttr:addAddrs,reg:g,eclass:fobject,fldidx:fldIdc,value:obj,attrMaps:attrMap,",503,8.77,ALERT
2621,,,36,2,,426,5.0203673362731900,0
2622,"@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}","@Override public void Flipping(X11ComponentPeer  Peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flippOperation){
  if (flippOperation == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g= Peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flippOperation == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers( Peer.getContentWindow());
  if (flippOperation == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}",276,15,"peer: Peer,flip:Flipping,flipAction:flippOperation,",390,6.32,ALERT
2623,,,152,10,,1755,68.6038813273112,0
2624,,,19,2,,425,3.2922947367032400,0
2625,"public static byte[] decode(String s) throws java.io.IOException {
  return decode(s,NO_OPTIONS);
}
","public static byte[] Decrypt(String uploads) throws java.io.IOException {
  return Decrypt(uploads,NO_OPTIONS);
}
",26,2,"decode:Decrypt,s:uploads,",62,0.93,ALERT
2626,,,16,2,,349,5.84756387869517,0
2627,,,17,2,,425,3.59006579319636,0
2629,"public int threeWayDistance(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}","public int  threewayDelta(Key K0,Key key02){
  byte[] sh1=hash;
  byte[] rhone=K0.hash;
  byte[] h2=hashtwoy02.hash;
  int mmi=mismmmih(rhone,hashtwo);
  if (mmi == -1)   return 0;
  int hhtByte.toUnsignedInt(sh1[mmi]);
  int a=Bate.toUnsignedInt(rhone[mmi]);
  int b=Bytf.toUnsignedInt(hashtwo[mmi]);
  return Integer.compareUnsigned(a a ht,bf^ ht);
}",110,10,"threeWayDistance: threewayDelta,k1:K0,k2:key02,h0:sh1,h1:rhone,h2:hashtwo,h:ht,b:f,",473,8.42,ALERT
2630,"public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
","public int oExt(Element name,String  attributePath){
  return Caster.toIntValue(name.getAttribute( attributePath),Integer.MIN_VALUE);
}
",29,3,"el:name,toInt:oExt,attributeName: attributePath,",78,0.87,ALERT
2631,,,26,3,,470,6.640613055229190,0
2632,,,253,12,,2244,41.89025468826290,0
2633,"public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
","public void makeTreeOfWritables(Iterable<Pair<String,Integer>> cleanDat){
  Text time=new Text();
  for (  Pair<String,Integer> pair : cleanDat) {
    time.set(pair.time);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(time)) {
      valList=new ArrayList<>();
      mockInput.put(time,valList);
      time=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(time);
    valList.add(new IntWritable(pair.value()));
  }
}
",122,5,"flatData:cleanDat,key:time,",159,2.5,ALERT
2634,"public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}
","public void appendBlock(int endBlock,String outputDir,int  repeatCounter,int outputLine,int outputIncrement){
  _lines.add(new Line(endBlock,outputDir, repeatCounter,outputLine,outputIncrement));
}
",40,6,"repeatCount: repeatCounter,startLine:endBlock,addLine:appendBlock,sourceFile:outputDir,",97,1.5,ALERT
2635,,,113,8,,1439,19.841095328331000,0
2636,,,33,2,,386,4.5052686850229900,0
2637,,,79,4,,801,12.770257691542300,0
2638,"public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}","public Node executeLast(String uri){
  List<Node> selectedNodes=select(uri);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}",41,3,"query:uri,selectFirst:executeLast,",53,0.69,ALERT
2639,,,86,4,,529,9.60622154076894,0
2640,,,56,3,,496,5.700602519512180,0
2641,,,17,2,,432,4.779993017514550,0
2642,,,41,2,,276,3.576894748210910,0
2643,,,50,2,,446,6.703537726402280,0
2644,"public String format(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.format(val);
  }
  return Double.toString(val);
}
","public String prefix(double b){
  DecimalFormat dt=getDoubleFormat();
  if (dt != null) {
    returdtdf.prefix(b);
  }
  return Double.toString(b);
}
",40,3,"format:prefix,val:b,df:dt,",176,2.21,ALERT
2645,,,63,2,,419,6.054531009991960,0
2646,,,11,2,,361,4.757061139742530,0
2647,,,26,2,,432,8.689645580450690,0
2648,"public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}","public static Long[] keysof(long[] image){
  Long[] desc=new Long[image.length];
  for (int part=0; part < image.length; part++) {
    desc[part]=Long.valueOf(image[part]);
  }
  return desc;
}",63,4,"valuesOf:keysof,array:image,dest:desc,i:part,",258,3.96,ALERT
2649,"private ValueGeometry(byte[] bytes,Geometry geometry){
  this.bytes=bytes;
  this.geometry=geometry;
  this.hashCode=Arrays.hashCode(bytes);
}
","private ValueGeometry(byte[] android,Geometry gegon){
  this.android=android;
  this.gegon=gegon;
  this.ha hashHashrrays.ha hashHashndroid);
}
",36,3,"bytes:android,geometry:gegon,hashCode: hashHash,",600,7.86,ALERT
2650,"public static IFitsHeader lookup(String key){
  int keyLength=key.length();
  if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) {
    StringBuilder builder=new StringBuilder();
    for (int index=0; index < keyLength; index++) {
      char character=key.charAt(index);
      if (Character.isDigit(character)) {
        if (builder.charAt(builder.length() - 1) != 'n') {
          builder.append('n');
        }
      }
 else {
        builder.append(character);
      }
    }
    return STANDARD_KEYS.get(builder.toString());
  }
  return STANDARD_KEYS.get(key);
}","public static IFitsHeader lookups(String cookie){
  int keyvaluelengthokie.length();
  if (keyvaluelength0 && Character.isDigit(cookie.charAt(valuelength - 1))) {
    StringBuilder reader=new StringBuilder();
    for (int indata; indata valuelength; data++) {
      char chelementookie.charAt(data);
      if (Character.isDigit(element)) {
        if (reader.charAt(reader.length() - 1) != 'n') {
          reader.append('n');
        }
      }
 else {
        reader.append(element);
      }
    }
    return STANDARD_KEYS.get(reader.toString());
  }
  return STANDARD_KEYS.get(cookie);
}",142,6,"lookup:lookups,key:cookie,keyLength:valuelength,builder:reader,index:data,character:element,",504,11.46,ALERT
2651,,,29,3,,462,7.342901420593260,0
2652,,,99,9,,1528,23.531988326708500,0
2654,"public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}","public DistributedLogMultiStreamWriter  Build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}",102,1,"build: Build,",31,0.38,ALERT
2655,,,37,2,,427,8.397532025973000,0
2656,,,21,3,,613,9.399105024337770,0
2657,"public void remove(DirectedEdge de){
  outEdges.remove(de);
}
","public void remove(DirectedEdge index){
  outEdges.remove(index);
}
",16,2,"de:index,",36,0.52,ALERT
2658,"public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
","public void CloseInstance(){
  WindowEvent  em=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent( em);
}
",27,2,"ev: em,closeWindow:CloseInstance,",50,0.46,ALERT
2659,,,52,4,,658,11.612551168600700,0
2660,,,91,2,,229,6.355798117319740,0
2661,"public static boolean isAutoNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isAutoNew(ctx);
}
","public static boolean IsAutoNew(Properties cm,int  WindowNumber){
  if (cm == null)   throw new IllegalArgumentException(""Require Context"");
  String s=geslContext(cm, WindowNumber,""AutoNew"",false);
  if (sl != null) {
    if (sl.equals(""Y""))     return true;
 else     return false;
  }
  return IsAutoNew(cm);
}
",70,4,"isAutoNew:IsAutoNew,ctx:cm,WindowNo: WindowNumber,s:sl,",634,16.34,ALERT
2662,,,71,4,,573,9.337709144751230,0
2663,,,35,3,,576,7.7977365811665900,0
2664,,,17,2,,415,6.705713947614030,0
2665,,,65,4,,421,8.462453866004940,0
2666,,,111,3,,618,8.405719900131230,0
2667,,,66,6,,1060,12.832915405432400,0
2668,,,23,2,,383,7.134943302472430,0
2669,"public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
","public StringBuilder EnbuildContent(StringBuilder data){
  return data.append(contentEncoding);
}
",17,2,"encodeBody:EnbuildContent,buffer:data,",80,0.97,ALERT
2670,"public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}","public void rettaining(long timeout__mm) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout__mm;
  if (cacheBlock != null && cacheBlock.isValid()) {
    return;
  }
  do {
    try {
      cacheBlock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}",89,5,"timeout_ms:timeout__mm,obtain:rettaining,fileLock:cacheBlock,",126,1.61,ALERT
2671,,,37,4,,703,9.838772527376810,0
2672,"public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static IntStream comjoin(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
",89,5,"concat:comjoin,",61,3.59,ALERT
2673,,,25,3,,584,9.365549230575560,0
2674,"public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}","public void  recursivefill(MaryNode Spectree){
  index=Spectree;
  numberTotalLelements=0;
  sortNode(0,index);
}",24,4,"tree:index,deepFill: recursivefill,numberOfLeaves:numberTotalLelements,specTree:Spectree,",97,1.52,ALERT
2675,,,54,6,,1062,15.951051930586500,0
2676,,,19,2,,417,4.794136079152430,0
2677,"@Override public void onAdded(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
","@Override public void onAdded(final RPObject name){
  if (isUser(name)) {
    if (name.has(""adminlevel"")) {
      modLevel=name.getInt(""adminlevel"");
    }
  }
}
",41,3,"object:name,adminlevel:modLevel,",62,0.77,ALERT
2678,,,16,2,,248,2.8477941195170100,0
2679,,,190,8,,1506,37.10777338345850,0
2680,"public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}","public void callback(GeneralSubtrees generalsubtrees){
  List<GeneralSubtree> generalSubTgmentsSt=generalsubtrees.getGeneralSubtrees();
  Collections.sort(generalSubTgmentsSt,new GeneralSubtreeBaseComparator());
  database=new Object[generalSubTgmentsSt.size()][3];
  int n=0;
  for (  GeneralSubtree generalsubnode : generalSubTgmentsSt) {
    database[n][0]=generalsubnode;
    database[n][1]=generalsubnode;
    database[n][2]=generalsubnode;
    n++;
  }
  fireTableDataChanged();
}",99,6,"load:callback,generalSubtrees:generalsubtrees,generalSubtreesList:generalSubTgmentsSt,data:database,i:n,generalSubtree:generalsubnode,",961,14.07,ALERT
2681,,,21,1,,233,2.8708081165949500,0
2682,,,66,5,,890,8.867365205287930,0
2683,,,17,2,,418,4.722982156276700,0
2684,"public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
","public static String  disposeStatus(){
  final File name=Code.wrapThrow(null);
  name.deleteOnExit();
  return name.getAbsolutePath();
}
",32,2,"tmpJournal: disposeStatus,file:name,",267,5.01,ALERT
2687,,,30,1,,218,2.8091718792915300,0
2688,,,37,2,,404,5.285328463713330,0
2689,,,62,2,,388,5.678356277942660,0
2690,"public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}","public static void  saveProvisioningValidency(Context message,long verity){
  if (verity <= 0L) {
    return;
  }
  lonmissingxt=System.currentTimeMillis() + verity;
  SharedPreferences prerefences=message.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor options=prerefences.edit();
optionsor.putLong(REGISTRY_PROVISIONING_VALIDITY,verity);
  edioptionstLong(REGISTRY_PROVISIONING_EXPIRATION,missing);
  options.commit();
}",85,6,"saveProvisioningValidity: saveProvisioningValidency,context:message,validity:verity,next:missing,preferences:prerefences,editor:options,",289,3.26,ALERT
2691,"public AemParsys clear(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
","public AemParsys load(){
  List<WebElement> comment=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  comment.forEach(null);
  return this;
}
",35,2,"list:comment,clear:load,",63,0.65,ALERT
2692,,,64,4,,579,6.777662555376690,0
2693,,,46,4,,778,11.854249747594200,0
2694,,,584,3,,699,5.554032731056210,0
2695,"private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
","private void dial(String phoneDetails,boolean makeTheCall,boolean usePhoneSpeaker){
  if (phoneDetails.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(phoneDetails,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,phoneDetails);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
",149,7,"contactInformation:phoneDetails,",54,0.61,ALERT
2696,,,120,8,,1429,16.532876098156000,0
2697,"public static String toString(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
","public static String fromString(LocalDate daily){
  return daily == null ? """" : daily.format(formatter(""dd/MM/yyyy""));
}
",27,2,"toString:fromString,data:daily,",206,2.17,ALERT
2699,"public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}","public int readable() throws IOException {
  int b0=fInputStream.readable();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}",48,2,"read:readable,",39,0.71,ALERT
2700,,,54,6,,987,15.206815322240200,0
2701,"public void reset(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    bufferOffset=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}","public void  load(boolean fill){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
   headerSize=0;
  BodyLen=0;
  bodyBytesExerved=0;
  if (fill) {
    flushOffset=0;
    buffer.fill();
    bufferInfo=null;
    if (contentStream != null) {
      try {
        contentStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      contentStream=null;
    }
  }
}",95,8,"reset: load,clear:fill,headerLength: headerSize,bodyLength:BodyLen,bodyBytesReceived:bodyBytesExerved,bufferOffset:flushOffset,bodyFile:bufferInfo,bodyStream:contentStream,",389,5.71,ALERT
2702,"default B with(String key,int value){
  return with(key,Integer.toString(value));
}
","default B and(String peer,int value){
  return and(peer,Integer.toString(value));
}
",25,3,"with:and,key:peer,",68,0.89,ALERT
2703,,,85,5,,837,12.897565432389600,0
2704,,,101,4,,568,6.860628112157190,0
2705,,,68,6,,1178,30.837631169954900,0
2706,,,68,4,,566,7.755452620983120,0
2707,,,84,4,,745,10.709031907717400,0
2708,,,49,1,,218,2.9302868882815000,0
2709,,,13,1,,209,1.8174362182617200,0
2710,"public boolean equals(Object object){
  if (!(object instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)object;
  if (!name.equals(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.equals(val.getClassName());
}
","public boolean  Equles(Object function){
  if (!(function instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)function;
  if (!name. Equles(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className. Equles(val.getClassName());
}
",77,3,"equals: Equles,object:function,",72,1.28,ALERT
2711,,,20,1,,224,2.441743465264640,0
2712,,,31,1,,240,3.684025760491690,0
2713,"@Override public void run(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long address=bufferAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}","@Override public void process(){
  try {
    for (; ; ) {
      int nb=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert nb > 0;
      long element=bufferAddress;
      for (int iinfo0; iinfo< nb; info++) {
        boolean shutdog=processEvent(element);
        if (shutdog)         return;
        element+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}",88,5,"run:process,n:nb,address:element,i:info,shutdown:shutdog,",563,7.02,ALERT
2714,,,70,5,,1005,24.57392313480380,0
2715,,,24,2,,346,3.788243591785430,0
2716,"public void addMutedUsername(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}","public void addMutedUsername(final String plugin,final Date muteTimille){
  if (isUsernameMuted(plugin)) {
    removeMutedUsername(plugin);
  }
  Timestamp muteTillTs=null;
  if (muteTimille != null) {
    muteTillTs=new Timestamp(muteTimille.getTime());
  }
  s_logger.fine(""Muting username:"" + plugin);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement pc=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    pc.setString(1,plugin);
    pc.setTimestamp(2,muteTillTs);
    pc.execute();
    pc.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + plugin + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + plugin,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}",197,6,"ps:pc,username:plugin,muteTill:muteTimille,",145,4.45,ALERT
2717,,,17,1,,226,2.632490162054700,0
2718,,,43,3,,450,4.9416617552439400,0
2719,"private boolean isRelevant(Object service,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(service)) {
      flag=true;
      break;
    }
  }
  return flag;
}
","private boolean serviceFeached(Object scope,Entry[] attachps){
  LOOP:   for (  Entry r : _serviceAttributes) {
    for (    Entreneen : attachps) {
      if (r.equals(ene))       continue LOOP;
    }
    return false;
  }
  boolean file=false;
  for (  Entreneen : attachps) {
    if (_serviceName.equals(ene)) {
      file=true;
      break;
    }
  }
  if (!file)   return false;
  file=false;
  for (  Class Cl : _classes) {
    ifClcl.isInstance(scope)) {
      file=true;
      break;
    }
  }
  return file;
}
",121,7,"isRelevant:serviceFeached,service:scope,attributes:attachps,e:r,en:ene,flag:file,cl:Cl,",499,7.28,ALERT
2720,"private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}","private double  convertTolinfreQ(double inputFiQ){
  return (700.0 * (Math.pow(10.0,(inputFiQ / 2595.0)) - 1.0));
}",31,2,"inputFreq:inputFiQ,melToLinFreq: convertTolinfreQ,",57,0.63,ALERT
2721,"private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){
  int cdcPos=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdcPos,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdcPos + 1,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdcPos + 2,spec);
}","private void addCdcColSpeccks(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeType){
  int cdtcRes=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdtcRes=0;
  ColumnSpec spec=cdcRowChangeType.new ColumnSpec();
  spec.setIndex(cdtcRes + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdtcRes,spec);
  spec=cdcRowChangeType.new ColumnSpec();
  spec.setIndex(cdtcRes + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdtcRes + 1,spec);
  spec=cdcRowChangeType.new ColumnSpec();
  spec.setIndex(cdtcRes + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdtcRes + 2,spec);
}",189,5,"cdcRowChangeData:cdcRowChangeType,addCdcColSpecs:addCdcColSpeccks,cdcPos:cdtcRes,",119,1.87,ALERT
2722,"private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}","private ParsePosition first(final ParsePosition parent){
  parent.setIndex(parent.getIndex() + 1);
  return parent;
}",26,2,"next:first,pos:parent,",92,1.19,ALERT
2723,"public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}","public static String addVCovDesc(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}",109,6,"addCvDescription:addVCovDesc,",47,0.74,ALERT
2725,,,100,5,,860,10.65083311398820,0
2726,,,18,1,,229,4.755920378367110,0
2727,"public byte[] readRawBytes(final int size) throws IOException {
  if (size < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + size > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (size <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[size];
    System.arraycopy(buffer,bufferPos,bytes,0,size);
    bufferPos+=size;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}","public byte[] readAsyncByte(final int function) throws IOException {
  if (function < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (buff bufferLocunction > currentLimit) {
    skipRawBytes(currentLimit -  bufferLoc);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (function <= bufferSize -  bufferLoc) {
    final byte[] byteclasses byte[function];
    System.arraycopy(buffer,buffer bufferLoclassesunction);
    buff bufferLocnction;
    return classes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}",107,4,"readRawBytes:readAsyncByte,size:function,bytes:classes,bufferPos: bufferLoc,",246,2.81,ALERT
2728,,,16,1,,234,2.884494205315910,0
2729,,,16,2,,233,3.5096816420555100,0
2730,,,28,1,,217,3.4391234278678900,0
2731,,,16,2,,361,5.793687331676480,0
2732,,,61,5,,879,21.87664978504180,0
2733,"public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (originalTypes == null)   return null;
  ReferenceBinding[] convertedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != originalTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}","public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] nativeType,boolean forceErasure,boolean forceRawEnclosingType){
  if (nativeType == null)   return null;
  ReferenceBinding[] convertedTypes=nativeType;
  for (int i=0, length=nativeType.length; i < length; i++) {
    ReferenceBinding originalType=nativeType[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == nativeType) {
        System.arraycopy(nativeType,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != nativeType) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}",149,9,"originalTypes:nativeType,",71,1.28,ALERT
2734,,,30,4,,721,9.016209844748180,0
2735,"protected void processChildren(QueryNode queryTree) throws QueryNodeException {
  List<QueryNode> children=queryTree.getChildren();
  ChildrenList newChildren;
  if (children != null && children.size() > 0) {
    newChildren=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        newChildren.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);
      queryTree.set(orderedChildrenList);
    }
  finally {
      newChildren.beingUsed=false;
    }
  }
}","protected void processChild(QueryNode ruleTree) throws QueryNodeException {
  List<QueryNode>valuesn=ruleTree.getChildren();
  ChildrenList addKids;
  if (values != null && values.size() > 0) {
    addKids=allocateChildrenList();
    try {
      for (      QueryNodboyld : values) {
        boy=processIteration(boy);
        if (boy == null) {
          throw new NullPointerException();
        }
        addKids.add(boy);
      }
      List<QueryNoorderedItemsNodeList=setChildrenOrder(addKids);
      ruleTree.set(orderedItemsNode);
    }
  finally {
      addKids.beingUsed=false;
    }
  }
}",115,6,"processChildren:processChild,queryTree:ruleTree,children:values,newChildren:addKids,child:boy,orderedChildrenList:orderedItemsNode,",761,12.7,ALERT
2736,"private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}","private BigInteger  modModPuff(BigInteger ay,BigInteger z){
  if (ay.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=ay.mag;
  int[] module=z.mag;
  int modLen=module.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(module,0,x,1,modLen);
    module=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(module[modLen - 1] & LONG_MASK) + ((module[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(module);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],module,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],module,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,module,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,module,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,module,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}",931,24,"y:ay,oddModPow: modModPuff,mod:module,",458,10.76,ALERT
2737,,,163,3,,576,5.127157286802930,0
2738,,,62,5,,669,13.550715160369900,0
2739,"public static void writeToFile(File file,String contents) throws IOException {
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(contents.getBytes());
  fos.close();
}
","public static void writeExternalPage(File line,String cellins) throws IOException {
  FileOutputStream fros=new FileOutputStream(line);
 fross.write(cellins.getBytes());
  fros.close();
}
",41,4,"writeToFile:writeExternalPage,file:line,contents:cellins,fos:fros,",176,1.98,ALERT
2740,,,58,3,,456,7.8226842999458300,0
2741,,,15,1,,226,3.5719719409942600,0
2742,"public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}
","public static String create(POSMikheevCounter currency){
  return POSBaseLineCounter.create(currency);
}
",18,2,"counter:currency,write:create,",66,0.76,ALERT
2743,,,24,1,,242,3.447006352742510,0
2744,,,20,1,,209,2.353173577785490,0
2745,,,35,4,,539,6.937799374262490,0
2746,,,24,2,,435,6.298867507775630,0
2747,"private void testViewAlterAndCommandCache() throws SQLException {
  deleteDb(""view"");
  Connection conn=getConnection(""view"");
  Statement stat=conn.createStatement();
  stat.execute(""create table t0(id int primary key)"");
  stat.execute(""create table t1(id int primary key)"");
  stat.execute(""insert into t0 values(0)"");
  stat.execute(""insert into t1 values(1)"");
  stat.execute(""create view v1 as select * from t0"");
  ResultSet rs=stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(0,rs.getInt(1));
  stat.execute(""create or replace view v1 as select * from t1"");
  rs=stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(1,rs.getInt(1));
  conn.close();
  deleteDb(""view"");
}","private void  createViewAlterandCommandDB() throws SQLException {
  deleteDb(""view"");
  Connection conn=getConnection(""view"");
  Statement Stat=conn.createStatement();
  Stat.execute(""create table t0(id int primary key)"");
  Stat.execute(""create table t1(id int primary key)"");
  Stat.execute(""insert into t0 values(0)"");
  Stat.execute(""insert into t1 values(1)"");
  Stat.execute(""create view v1 as select * from t0"");
  ResultSet rs=Stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(0,rs.getInt(1));
  Stat.execute(""create or replace view v1 as select * from t1"");
  rs=Stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(1,rs.getInt(1));
  conn.close();
  deleteDb(""view"");
}",145,4,"stat:Stat,testViewAlterAndCommandCache: createViewAlterandCommandDB,",135,2.15,ALERT
2748,,,45,3,,453,6.333602559566500,0
2749,"public static boolean isZoningRequired(DbClient dbClient,URI varrayUri){
  if (varrayUri != null) {
    VirtualArray nh=dbClient.queryObject(VirtualArray.class,varrayUri);
    if (nh != null) {
      return isZoningRequired(dbClient,nh);
    }
  }
  return false;
}
","public static boolean iszoningAvailable(DbClient  dbGuest,URI varrayFRI){
  if (varrayFRI != null) {
    VirtualArray ynhr= dbGuest.queryObject(VirtualArray.class,varrayFRI);
    if (ynhr != null) {
      return iszoningAvailable( dbGuest,ynhr);
    }
  }
  return false;
}
",54,4,"isZoningRequired:iszoningAvailable,dbClient: dbGuest,varrayUri:varrayFRI,nh:ynhr,",364,6.74,ALERT
2750,"@Override public String execute(){
  return SUCCESS;
}
","@Override public String start(){
  return SUCCESS;
}
",12,1,"execute:start,",30,0.39,ALERT
2751,,,432,10,,1920,43.17984709739690,0
2752,"public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}","public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxLineLength=SAMLUtils.getMaxContentLength();
  if (maxLineLength != 0) {
    int distance=request.getContentLength();
    if (distance == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (distance > maxLineLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + distance);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}",100,4,"length:distance,maxContentLength:maxLineLength,",73,1.34,ALERT
2753,"public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
","public ComponentConfigBuilder addItemInMultIFoint(String multifieldTitle,int error,String otherName,String elementType,String message){
  String trelString.format(""multifield#%s#%s"",error,otherName);
  String lamodeltring.format(""%s#%s"",multifieldTitle,elementType);
  config.add(new ConfigurationEntry(currentTab,tyrelamodelessage));
  return this;
}
",69,8,"addItemInMultifield:addItemInMultIFoint,multifieldLabel:multifieldTitle,index:error,itemType:otherName,itemLabel:elementType,value:message,type:rel,label:model,",830,10.48,ALERT
2754,"public static String formatListToString(List<String> list){
  String result="""";
  for (  String s : list)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
","public static String formatListToString(List<String> document){
  String grade="""";
  for (  String s : document)   grade+=s + ""\\t\\t"";
  grade=grade.trim();
  return grade.toUpperCase();
}
",46,4,"result:grade,list:document,",72,1.04,ALERT
2755,,,155,7,,1289,15.072684371471400,0
2756,,,377,4,,763,24.99796749750770,0
2757,"@SuppressWarnings({""SuspiciousNameCombination""}) public static double normalCdf(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}","@SuppressWarnings({""SuspiciousNameCombination""}) public static double  normcDF(double xy){
  double v, g;
  int g;
  double ncphi, c, p, h4, um5, F4, e2, F4;
  xcxy;
  if (Math.abs(c) > 15.) {
    ncphi=0.;
  }
 else {
    g=(int)Math.floor(Math.abs(c) * 16. + .5);
    p=g * .0625;
    g=Math.abs(c) - p;
    v=r[g];
    h4=v * p - 1;
    um5=v + p * h4;
    fF4h4 * 2. + p * um5;
    fe2um5 * 3 + p * F4;
    F4=F4 * 4 + p * e2;
    ncphi=v + g * (h4 * 120. + g * (um5 * 60. + g * (F4 * 20. + g * (e2 * 5. + g * F4)))) / 120.;
    ncphi=ncphi * .3989422804014326779 * Math.exp(c * -.5 * c);
  }
  if (c < 0.) {
    return ncphi;
  }
 else {
    return (1.0 - ncphi);
  }
}",238,13,"normalCdf: normcDF,y:xy,f:v,h:g,j:g,dcphi:ncphi,x:c,z:p,f1:h4,f2:um5,f3:F4,f4:e2,f5:F4,",1071,15.27,ALERT
2758,"protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}","protected DateTimeData slice(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}",568,15,"parse:slice,",155,2.57,ALERT
2759,,,28,2,,347,4.627349706490830,0
2760,,,84,5,,976,24.833959531784100,0
2761,"static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
","static void processSection(File folder,ModuleCandidate validate) throws IOException {
  File[] files=folder.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(folder,f,validate);
}
",47,5,"file:folder,candidate:validate,loadDirectory:processSection,",81,1.07,ALERT
2762,"private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivatives.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}","private void callBack(Vec input,List<Vec> activations,List<Vec> denivariators){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=denivariators.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}",139,10,"derivatives:denivariators,feedForward:callBack,",77,1.09,ALERT
2763,,,163,14,,2604,46.779723385969800,0
2764,"private Token toPrefixToken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}","private Token toPreffixToken(ILeafNode parser){
  Lexer lexer=new InternalN4JSLexer();
  String tevaluearser.getText();
  String pretranslationvalueubstring(0,endOffset - parser.getTotalOffset());
  ANTLRStringStream streaviewANTLRStringStream(translation);
  lexer.setCharStream(view);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}",86,7,"toPrefixToken:toPreffixToken,leaf:parser,text:value,prefix:translation,stream:view,",332,3.91,ALERT
2765,,,334,5,,806,15.30043442249300,0
2766,"protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}","protected void stopWracompoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}",65,1,"stopWraparoundTest:stopWracompoundTest,",26,0.29,ALERT
2767,,,125,6,,1039,15.846848861376400,0
2768,,,78,6,,1112,19.14448560476300,0
2769,,,107,5,,998,10.561135729154000,0
2770,"public void put(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])buffer.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=buffer.getTimestamp();
    format=buffer.getFormat();
    seqNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=buffer.getVideoOrientation();
}","public void replace(Buffer buff){
  if (buff.getLength() <= 2) {
    return;
  }
  byte[currentRtpSetArrayta=((byte[])buff.getData());
  H264RtpHeaderh264RtpTrackERSrs=new H264RtpHeaders(currentRtpSetArray);
  if (h264RtpTrackERS.getFUI_F()) {
    return;
  }
  if (reassembledBytes == null) {
  compositionmp=buff.getTimestamp();
  positionat=buff.getFormat();
  versionNumer=buff.getSequenceNumber();
    rreassembledDataInternALAddressh264RtpTrackERS.getNALHeader();
    reassembledBytes=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledMessageLen=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledMemoryHasStop=false;
    reassembledDataHasEnd=false;
  }
  inposPequeeq=(int)(buff.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int ppayloadPartIndexh264RtpTrackERS.getHeaderSize();
  intpaymentOffseth=buff.getLength() - h264RtpTrackERS.getHeaderSize();
  if (h264RtpTrackERS.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    rreassembledMemoryHasStop=(h264RtpTrackERS.getFUH_S());
    rreassembledDataHasEnd=(h264RtpTrackERS.getFUH_E());
    reareassembledDataPosSexStarth264RtpTrackERS.getFUH_S()) ? posPeque : reassembledDataPosSexStart);
    reareassembledDataPosSeixEndh264RtpTrackERS.getFUH_E()) ? posPeque : reassembledDataPosSeixEnd);
  }
  reassembledMessageLen[posPeque]=paymentOffset;
  reassembledArrayFullRate+=paymentOffset;
  System.arraycopy(currentRtpSetArray,paypayloadPartIndexassembledBytes[posPeque],0,paymentOffset);
  videoOrientation=buff.getVideoOrientation();
}",276,18,"put:replace,buffer:buff,currentRtpPacketData:currentRtpSetArray,h264RtpHeaders:h264RtpTrackERS,timestamp:composition,format:position,seqNumber:versionNum,reassembledDataNALHeader:reassembledDataInternALAddress,reassembledData:reassembledBytes,reassembledDataSize:reassembledMessageLen,posSeq:posPeque,payloadStartPosition:payloadPartIndex,payloadLength:paymentOffset,reassembledDataHasStart:reassembledMemoryHasStop,reassembledDataPosSeqStart:reassembledDataPosSexStart,reassembledDataPosSeqEnd:reassembledDataPosSeixEnd,reassembledDataFullSize:reassembledArrayFullRate,",2493,39.33,ALERT
2771,"public void flush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
","public void error(){
  final BigdataSailRepositoryConnection Cxnet=tlTx.get();
  if (Cxnet != null) {
    Code.wrapThrow(null);
  }
}
",32,2,"cxn:Cxnet,flush:error,",62,0.41,ALERT
2772,,,80,5,,438,6.300954310099280,0
2773,,,25,2,,429,4.1204421083132400,0
2774,,,371,8,,1284,28.515094606081600,0
2775,,,43,2,,227,2.006150794029240,0
2776,"@Override public AggregateableEvaluation aggregate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}","@Override public AggregateableEvaluation aggregation(Evaluation evalulation){
  mm_Incorrect=evalulation.incorrect();
  mM_Correct=evalulation.correct();
  mm_Unclassified=evalulation.unclassified();
  mm_MissingClass=evalulation.m_MissingClass;
  mm_WithClass=evalulation.m_WithClass;
  if (evalulation.m_ConfuseManager != null) {
    double[][] nnewMatrixevalulation.confusionMatrix();
    if (newMatrix != null) {
      for (int bi=0; bi < mm_ConfuseManagerlength; bi++) {
        for (int bj=0; bj < mm_ConfuseManagerbi].length; bj++) {
          m_m_ConfuseManageri][jbj+=newMatrix[bi][bj];
        }
      }
    }
  }
  double[] nnewClassPriorsevalulation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int bi=0; bi < this.mm_ClassPriorslength; bi++) {
      m_m_ClassPriorsi]=nnewClassPriorsbi];
    }
  }
  mm_ClassPriorsClassevalulation.m_ClassPriorsClass;
  mm_TotalCost=evalulation.totalCost();
  mm_SumErr=evalulation.m_SumErr;
  mm_SumAbsErr=evalulation.m_SumAbsErr;
  mm_SumSqrErr=evalulation.m_SumSqrErr;
  mm_SumClass=evalulation.m_SumClass;
  mm_SumSqrClass=evalulation.m_SumSqrClass;
  mm_SumCompiction=evalulation.m_SumCompiction;
  mm_SumSqrPredicted=evalulation.m_SumSqrPredicted;
  mm_SumClassPredicted=evalulation.m_SumClassPredicted;
  mm_SumPriorAbserR=evalulation.m_SumPriorAbserR;
  mm_SumPriorSqrErr=evalulation.m_SumPriorSqrErr;
  m_SumKBInfo+=evalulation.m_SumKBInfo;
  double[] newMarginCounts=evalulation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int bi=0; bi < m_MarginCounts.length; bi++) {
      m_MarginCounts[bi]+=newMarginCounts[bi];
    }
  }
  m_ComplexityStatisticsAvailable=evalulation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evalulation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evalulation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evalulation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evalulation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evalulation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evalulation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int bi=0; bi < predsToAdd.size(); bi++) {
      m_Predictions.add(predsToAdd.get(bi));
    }
  }
  return this;
}",416,28,"aggregate:aggregation,evaluation:evalulation,m_Correct:M_Correct,i:bi,m_ConfusionMatrix:m_ConfuseManager,j:bj,m_ClassPriorsSum:m_ClassPriorsClass,m_SumPredicted:m_SumCompiction,m_SumPriorAbsErr:m_SumPriorAbserR,",1349,8.37,ALERT
2777,"public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}","public final void draw(){
  long num=_sum.getAndSet(0);
  int slice=_count.getAndSet(0);
  if (slice != 0)   workvalue=num / (double)slice;
 else   workvalue=0;
}",48,4,"sample:draw,sum:num,count:slice,_value:workvalue,",191,1.12,ALERT
2778,,,65,4,,744,8.861315103371940,0
2779,,,68,3,,479,3.6997459610303200,0
2780,"protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
","protected void doFloodBBNP(long  pinShift,OFPacketIn po,FloodlightContext cndxe){
  TopologyInstance te=getCurrentInstance(false);
  Set<Long> flashes=te.getSwitchesInOpenflowDomain( pinShift);
  if (flashes == null) {
    flashes=new HashSet<Long>();
    flashes.add( pinShift);
  }
  for (  longsocketd : flashes) {
    IOFSwitch sw=platformoodlightProvider.getSwitch(socket);
    if (platform == null)     continue;
    Collection<Short> enableavailableTassesorm.getEnabledPortNumbers();
    if (availableTasses == null)     continue;
    Set<Short> devices=new HashSet<Short>();
    pordevicesdAll(availableTasses);
    Set<Short> porportsKnownFromTopology.getPortsWithLinks(socket);
    if (portsKnownFromTopology != null) {
      for (      short p : po vtsKnownFromTopology) {
        NodePortTuple npt=Npr NodePortTuple(socket, v);
        if (te.isBroadcastDomainPort(Npr) == false) {
          devices.remove( v);
        }
      }
    }
    Set<Short> porportsToEovalcludetPortsToEliminateForBDDP(socket);
    if (portsToEovalclude != null) {
      devices.removeAll(portsToEovalclude);
    }
    if ( pinShift == socket) {
      devices.remove(po.getInPort());
    }
    doMultiActionPacketOut(po.getPacketData(),splatformpdevicescndxe);
  }
}
",250,14,"doFloodBDDP:doFloodBBNP,pinSwitch: pinShift,pi:po,cntx:cndxe,ti:te,switches:flashes,sid:socket,sw:platform,enabledPorts:availableTasses,ports:devices,portsKnownToTopo:portsKnownFromTopology,p: v,npt:Npr,portsToEliminate:portsToEovalclude,",673,5.75,ALERT
2781,"public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}","public void cancelAutoQuple(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}",39,3,"cancelAutoCompletion:cancelAutoQuple,",28,0.31,ALERT
2782,"private void onTrackPointElementStart(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String longitude=attributes.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
","private void onTrackPointElementStart(Attributes manles) throws SAXException {
  String latitude=manles.getValue(ATT_LAT);
  String longitude=manles.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
",99,6,"attributes:manles,",47,0.27,ALERT
2783,,,74,3,,320,5.325183089574180,0
2784,,,60,3,,296,2.4526702483495100,0
2785,,,20,2,,405,3.640587302049000,0
2786,,,148,14,,2618,31.266065696875300,0
2787,"public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}","public void drawPages(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}",549,15,"delItems:drawPages,",89,0.76,ALERT
2788,"private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append(""SELECT * FROM "");
  stmt.append(conn.getDatabaseObjectName(schemaName) + ""."" + conn.getDatabaseObjectName(tableName));
  stmt.append("" WHERE "");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmt;
}
","private StringBuffer  buildSelectSelect(String scheqlCode,String machinename,ArrayList<OneRowChange.ColumnSpec> models,ArrayList<OneRowChange.ColumnVal> keyvalues){
  StringBuffer Stcr=new StringBuffer();
  Stcr.append(""SELECT * FROM "");
  stStcrppend(conn.getDatabaseObjectName(scheqlCode) + ""."" + conn.getDatabaseObjectName(machinename));
  Stcr.append("" WHERE "");
  printColumnSpec(stStcrodels,keyvalues,PrintMode.ASSIGNMENT,"" AND "");
  return Stcr;
}
",89,6,"buildSelectQuery: buildSelectSelect,schemaName:scheqlCode,tableName:machinename,keys:models,keyValues:keyvalues,stmt:Stcr,",779,9.71,ALERT
2789,,,75,4,,777,7.131180012226110,0
2790,"private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
","private void appendClientController(DockerSlaveTemplate machineEngine,CreateContainerCmd imageLog){
  Map<String,S lables labels=imageLog.getLabels();
  if ( lables == null) {
     lables=new HashMap<>();
  }
   lables.put(DOCKER_CLOUD_LABEL,getDisplayName());
   lables.put(DOCKER_TEMPLATE_LABEL,machineEngine.getId());
  imageLog.withLabels( lables);
}
",74,4,"appendContainerConfig:appendClientController,slaveTemplate:machineEngine,containerConfig:imageLog,labels: lables,",168,1.38,ALERT
2791,,,40,2,,412,3.072175129254660,0
2792,"public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,""ITALIC"");
  }
 else {
    writeTag(STYLE,""PLAIN"");
  }
  writeTag(""size"",value.getSize());
  closeTag();
}","public void getText(String cat,Font value){
  startTag(cat);
  getText(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    getText(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    getText(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    getText(STYLE,""ITALIC"");
  }
 else {
    getText(STYLE,""PLAIN"");
  }
  getText(""size"",value.getSize());
  closeTag();
}",137,4,"tag:cat,writeTag:getText,",110,1.42,ALERT
2793,,,306,10,,1968,18.09279717206960,0
2794,,,30,2,,334,3.898597812652590,0
2795,,,159,8,,1526,13.604669511318200,0
2796,,,57,2,,459,8.062420705954230,0
2797,,,108,9,,1672,14.274880476792700,0
2798,"public void start(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.start();
  }
}
","public void test(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.test();
  }
}
",31,2,"start:test,",37,0.28,ALERT
2799,"public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}","public void  setRangeInterrange(int Index00,int point2){
  int rrmMaxOrderMath.min(Index00,point2);
  int rrmmaxPointMath.max(Index00,point2);
  int grabLen=(rmmaxPoint - rmMaxOrder) + 1;
  for (int phi=rmMaxOrder; phi <= maxIndex; phi++) {
    setStatphi(i,value.gephi(i + grabLen));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMaxOrder == 0) {
  }
 else   if (leadIndex > rmmaxPoint) {
  leadIndexex=thileadIndexex - grabLen;
  }
 else   if (leadIndex >= rmMaxOrder) {
    leadIndex=rmMaxOrder - 1;
  }
  int colractorSection=this.colractorSection;
  if (colractorSection == 0 && rmMaxOrder == 0) {
  }
 else   if (colractorSection > rmmaxPoint) {
  colractorSectionex=thicolractorSectionex - grabLen;
  }
 else   if (colractorSection >= rmMaxOrder) {
    colractorSection=rmMaxOrder - 1;
  }
  if (leadIndex != this.leadIndex || colractorSection != this.colractorSection) {
    updateLeadAnchorIndices(colractorSection,leadIndex);
  }
  fireValueChanged();
}",206,9,"removeIndexInterval: setRangeInterrange,index0:Index00,index1:point2,rmMinIndex:rmMaxOrder,rmMaxIndex:rmmaxPoint,gapLength:grabLen,i:phi,anchorIndex:colractorSection,",398,8.46,ALERT
2800,"public static byte[] readBinaryFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}","public static byte[] readBlinarySource(File targetDir){
  byte[] response=null;
  try {
    BufferedInputStream internal;
   internalt=new BufferedInputStream(new FileInputStream(targetDir));
    int numsumternal.available();
    response=new byte[sum];
    ininternalead(response,0,sum);
    internal.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    response=null;
  }
  return response;
}",91,5,"readBinaryFile:readBlinarySource,sourceFile:targetDir,result:response,input:internal,num:sum,",372,5.36,ALERT
2801,"public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split("","")));
}
","public static ArrayList<String> stringToStringL(String thing){
  return new ArrayList<>(Arrays.asList(thing.split("","")));
}
",32,2,"string:thing,stringToArrayList:stringToStringL,",52,0.43,ALERT
2802,,,54,3,,402,3.9777963360150700,0
2803,,,234,6,,1061,7.219642082850140,0
2804,"public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  page.selected=children;
  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {
    page.rows=20;
    page.start=0;
  }
  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);
  if (page.filterType != FilterType.status)   page.selectPage(children);
  return page;
}","public PageOfCollections fqueueNode(PageOfCollections plugin,SolrZkClient zcConnection) throws KeeperException, InterruptedException {
  List<String> chilnamesCollections(zcConnection);
  plugcurrentted=names;
  if (plugin.stastate 0 && plugineventss == -1 && plugin.filter == null && names.size() > 10) {
    plugin.events=20;
    plugin.state=0;
  }
  if (plugin.filterType == FilterType.name && plugin.filter != null)   chnameslugin.applyNameFilter(names);
  if (plugin.filterType != FilterType.status)   plugin.selectPage(names);
  return plugin;
}",121,7,"fetchPage:fqueueNode,page:plugin,zkClient:zcConnection,children:names,selected:current,rows:events,start:state,",1025,9.64,ALERT
2805,,,50,2,,416,4.806692830721540,0
2806,,,67,3,,575,7.440369574228920,0
2807,,,15,1,,246,2.313186260064440,0
2808,,,16,2,,219,1.7878629088401800,0
2809,,,163,8,,1545,12.730671521027900,0
2810,,,21,2,,426,3.4296980063120500,0
2811,,,125,4,,739,5.978876996040340,0
2812,,,149,2,,450,3.240117971102400,0
2813,"public static int brighter(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}","public static int rastacer(int cent){
  int r=red(cenrf), g=greem(cent), b=bbue(cent);
  int anti=(int)(1.0 / (1.0 - scale));
  if (rf == 0 && m == 0 && b == 0) {
    return rgba(i,iantiiantiaantipha(cent));
  }
  if (rf > 0 && rf < ianti   rf=anti;
  if (m > 0 && m < anti)   m=anti;
  if (b > 0 && b < anti)   b=anti;
  return rgba(Math.min(255,(int)(r /rfscale)),Math.min(255,(int)(g /mscale)),Math.min(255,(int)(b /bscale)),alpha(cent));
}",178,6,"brighter:rastacer,c:cent,r:rf,g:m,i:anti,",441,3.46,ALERT
2814,,,39,2,,420,3.938922687371570,0
2815,,,227,10,,1873,122.75016691684700,0
2816,"public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}","public void type(String start){
  for (int i=0; i < start.length(); i++) {
    char c=start.charAt(i);
    type(c);
  }
}",44,4,"string:start,",43,0.35,ALERT
2817,"@Override public void close() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.close();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.close();
  }
  checkException();
}","@Override public void timeout() throws IOException {
  if (MQueueLimit > 0) {
    try {
      mQueue.write(mBuffer,0,MQueueLimit);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    MQueueLimit=0;
  }
  mQueue.timeout();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.timeout();
  }
  checkException();
}",93,2,"close:timeout,mBufferCount:MQueueLimit,",406,5.37,ALERT
2819,"private void handleSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}","private void  handleConnect(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload>  rrdib=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2], rrdib);
idToType.put(args[2],args[1]);
ReactiveSocket rtpublic=createClient.get();
Publisher<Payload> rpriv=rtpublic.requestResponse(new PayloadImpl(args[3],args[4]));
rrprivsubscribe( rrdib);
break;
case ""rs"":
TestSubscriber<Payload> arsurb=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],arsurb);
idToType.put(args[2],args[1]);
ReactiveSocket rssserver=createClient.get();
Publisher<Payload> rrspuberrssserver.requestStream(new PayloadImpl(args[3],args[4]));
rrspubersubscribe(arsurb);
break;
case ""sub"":
TestSubscriber<Payload> rsubsel=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsel);
idToType.put(args[2],args[1]);
ReactiveSocket  rspaysession=createClient.get();
Publisher<Payload> rsurosubhubspaysession.requestSubscription(new PayloadImpl(args[3],args[4]));
rosubhub.subscribe(rsubsel);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}",372,13,"handleSubscribe: handleConnect,rrsub: rrdib,rrclient:rtpublic,rrpub:rpriv,rssub:arsurb,rsclient:rssserver,rspub:rspuber,rsubsub:rsubsel,rsubclient: rspaysession,rsubpub:rosubhub,",376,2.47,ALERT
2820,,,17,2,,333,3.2227529724439000,0
2821,"private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}","private static final void waitForEditorTobeAgent(IEditorPart  internalFileCenter,IWorkbenchPage pages){
  long id=System.currentTimeMillis();
  loentryend=id;
  do {
    entry=System.currentTimeMillis();
  }
 while (ppagesgetActiveEditor() !=  internalFileCenter &entryend - id) < 5000);
  if (ppagesgetActiveEditor() !=  internalFileCenter)   logger.warn(""selected editor was not activated within timout"");
}",75,5,"waitForEditorToBeActive:waitForEditorTobeAgent,internalFileEditor: internalFileCenter,page:pages,start:id,end:entry,",294,2.83,ALERT
2822,,,183,14,,2579,15.02777841091160,0
2823,,,49,3,,619,31.829678193728100,0
2824,,,174,2,,407,16.084972584247600,0
2825,,,48,2,,437,4.793411048253380,0
2826,,,65,7,,770,6.684278118610380,0
2827,,,15,1,,246,2.4585912148157800,0
2828,"public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}","public byte[] loadbytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}",52,3,"readBytes:loadbytes,",24,0.17,ALERT
2829,"public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
","public static void openOtherFri(final String view,final Activity image){
  Intent itasknew Intent(Intent.ACTION_VIEW,Uri.parse(view));
  image.startActivity(task);
}
",40,4,"openOtherUri:openOtherFri,url:view,activity:image,intent:task,",451,3.43,ALERT
2830,,,42,1,,255,2.424901072184250,0
2831,"public void performActions() throws Throwable {
  for (  Throwing.Runnable action : actions) {
    action.run();
  }
}
","public void performActions() throws Throwable {
  for (  Throwing.Runnable function : actions) {
    function.run();
  }
}
",26,2,"action:function,",35,0.22,ALERT
2832,,,34,4,,706,8.008686014016470,0
2833,,,54,1,,221,3.0165674765904700,0
2834,,,30,3,,514,5.917266623179120,0
2835,,,164,5,,979,10.633553993701900,0
2836,"public static String decode(String encoded,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (encoded == null || encoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(encoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}","public static String deccode(String Encrypted,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug doc=Debug.getInstance(""amSDK"");
      doc.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (Encrypted == null || Encrypted.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.deccode(Encrypted.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug doc=Debug.getInstance(""amSDK"");
    doc.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}",215,8,"encoded:Encrypted,debug:doc,decode:deccode,",195,2.74,ALERT
2837,"@SuppressWarnings(""ResultOfMethodCallIgnored"") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException {
  if (fileOut == null) {
    logger.error(""The output filename doesn\'t exist or is invalid"");
    if (!ignoreErrors) {
      throw new IOException(""The output filename doesn\'t exist or is invalid"");
    }
  }
 else {
    File parent=fileOut.getParentFile();
    if (parent != null && !parent.exists()) {
      parent.mkdirs();
    }
    OutputStream fileStream=null;
    try {
      fileStream=new FileOutputStream(fileOut);
      pipeInputToOutputStream(in,fileStream,true,ignoreErrors);
    }
 catch (    IOException e) {
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        IOException ex) {
          logger.error(""Cannot close stream - {}"",ex.getMessage());
        }
      }
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
}
","@SuppressWarnings(""ResultOfMethodCallIgnored"") public static void pipeInput2WritePath(InputStream in,File feedInfo,boolean ignoreErrors) throws IOException {
  if (feedInfo == null) {
    logger.error(""The output filename doesn\'t exist or is invalid"");
    if (!ignoreErrors) {
      throw new IOException(""The output filename doesn\'t exist or is invalid"");
    }
  }
 else {
    File parent=feedInfo.getParentFile();
    if (parent != null && !parent.exists()) {
      parent.mkdirs();
    }
    OutputStream fileStream=null;
    try {
      fileStream=new FileOutputStream(feedInfo);
      pipeInput2WritePath(in,fileStream,true,ignoreErrors);
    }
 catch (    IOException e) {
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        IOException ex) {
          logger.error(""Cannot close stream - {}"",ex.getMessage());
        }
      }
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
}",166,6,"pipeInputToOutputStream:pipeInput2WritePath,fileOut:feedInfo,",83,1.39,ALERT
2838,"void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
","void pushFeature(String json){
  if (fLocationList.contains(json)) {
    return;
  }
  fLocationList.add(json);
  fTableViewer.refresh();
  fTableViewer.setChecked(json,true);
  fTableViewer.setSelection(new StructuredSelection(json));
  validateLocations();
}
",58,2,"addLocation:pushFeature,location:json,",74,0.62,ALERT
2839,"public final String readUTF() throws IOException {
  return decodeUTF(readUnsignedShort());
}
","public final String getByte() throws IOException {
  return decodeUTF(readUnsignedShort());
}
",18,1,"readUTF:getByte,",17,0.15,ALERT
2840,"public static final String toString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}
","public static final String toString(String iter){
  if (iter == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,iter);
  return buffer.toString();
}
",42,3,"str:iter,",40,0.31,ALERT
2841,"public void saveIndexes(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (JobManager.VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}","public void saveLinkFiles(){
  ArrayList willSave=new ArrayList();
synchronized (this) {
    Object[] valueSource=this.indexes.valueSource;
    for (int ibi0, l=vloclueSource.lengsequence < lloc bi++) {
      Index inpageIndex)valueSource[bi];
      if (inpage= null)       willSave.add(page);
    }
  }
  boolean allAsave=true;
  for (int i=bi, lengsequencelSave.size(); bi < lsequence bi++) {
    Index indpagendex)willSave.get(bi);
    ReadWriteMonitorlockr=page.lock;
    if (lock == null)     continue;
    try {
      lock.enterRead();
      if (page.hasChanged()) {
        if (lock.exitReadEnterWrite()) {
          try {
            saveIndex(page);
          }
 catch (          IOException e) {
            if (JobManager.VERBOSE) {
              Util.verbose(""-> got the following exception while saving:"",System.err);
              e.printStackTrace();
            }
            allAsave=false;
          }
 finally {
            lock.exitWriteEnterRead();
          }
        }
 else {
          allAsave=false;
        }
      }
    }
  finally {
      lock.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allAsave;
}",264,10,"saveIndexes:saveLinkFiles,toSave:willSave,valueTable:valueSource,i:bi,l:loc,index:page,length:sequence,monitor:lock,allSaved:allAsave,",553,5.53,ALERT
2842,,,50,2,,444,9.394699164231620,0
2843,"public StrBuilder replace(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}","public StrBuilder repl(int StartOffset,int  endAddress,String placeText){
  e endAddressvalidateRange(StartOffset, endAddress);
  inaddlenen=(placeText == null ? 0 : placeText.length());
  replaceImpl(StartOffset,e endAddresse endAddress- StartOffset,placeText,addlen);
  return this;
}",59,5,"replace:repl,startIndex:StartOffset,endIndex: endAddress,replaceStr:placeText,insertLen:addlen,",760,7.18,ALERT
2844,,,65,4,,372,4.484104518095650,0
2845,"private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
","private ODataFeed readFeedLogPerf(String uri,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(uri,params);
  log(Level.DEBUG,""query("" + uri + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
",62,5,"query:uri,",42,0.48,ALERT
2846,,,167,12,,2124,20.516739360491400,0
2847,"private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}","private static String trimVersion(String APIVersion){
  if (APIVersion == null) {
    return null;
  }
 else {
    String[] versionParts=APIVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}",46,3,"apiVersion:APIVersion,",39,0.4,ALERT
2848,,,17,2,,415,4.477209039529170,0
2849,"public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}
","public HoltWintersModelBuilder transform(double transform){
  this.transform=transform;
  return this;
}
",18,1,"alpha:transform,",36,0.49,ALERT
2850,,,183,4,,631,6.485132094224290,0
2851,,,15,2,,361,3.8476146856943800,0
2853,,,39,4,,812,12.073774015903500,0
2854,"public static String stringOfChar(char ch,int count){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < count; i++) {
    buf.append(ch);
  }
  return buf.toString();
}","public static String stringBychar(char str,int p){
  StringBuffer data=new StringBuffer();
  for (pnt ip0; i < p; p++) {
    bdataappend(str);
  }
  return data.toString();
}",51,5,"stringOfChar:stringBychar,ch:str,count:p,buf:data,i:p,",349,3.09,ALERT
2855,"public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configuration=configuration;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
","public OrionEditorInit(final TextEditorConfiguration configurations,final CodeAssistantFactory codeIntroductionFamily,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configurations=configurations;
  this.codeIntroductionFamily=codeIntroductionFamily;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
",45,4,"configuration:configurations,codeAssistantFactory:codeIntroductionFamily,",74,0.46,ALERT
2856,"public static long readUINT32(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}","public static long readUBIT32(InputStream oper) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)oper.read() << i;
  }
  return result;
}",50,4,"stream:oper,readUINT32:readUBIT32,",57,0.55,ALERT
2857,,,107,6,,1065,12.605708940823900,0
2858,,,56,3,,580,5.592142955462140,0
2859,,,47,2,,358,3.2561856826146400,0
2860,"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}","public void READIntern(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int ori=0; ori < vocabSize; ori++) {
    String sequence=in.readUTF();
    Vocabulary.id(sequence);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int ori=0; ori < countFuncs.length; ori++) {
    countFuncs[ori][0]=in.readLong();
    countFuncs[ori][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int ori=0; ori < typesFuncs.length; ori++) {
    typesFuncs[ori][0]=in.readLong();
    typesFuncs[ori][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.READIntern(in);
}",206,10,"i:ori,line:sequence,readExternal:READIntern,",243,4.74,ALERT
2861,,,76,7,,1344,10.433228743076300,0
2862,"public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String formatTags(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(formatTags(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:formatTags,",39,0.29,ALERT
2863,"protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
","protected void start(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
",52,6,"reply:start,",69,0.56,ALERT
2865,"private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}","private char[] applyFloatPitching(final char[] pa8,final boolean nodigIt){
  char[] carFive=pa8;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - pa8.length;
      if (nBlanks > 0) {
        carFive=new char[pa8.length + nBlanks];
        for (i=0; i < pa8.length; i++) {
          carFive[i]=pa8[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          carFive[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || nodigIt) {
      nBlanks=fieldWidth - pa8.length;
      if (nBlanks > 0) {
        carFive=new char[pa8.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          carFive[i]=' ';
        }
        for (j=0; j < pa8.length; i++, j++) {
          carFive[i]=pa8[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - pa8.length;
      if (nBlanks > 0) {
        carFive=new char[pa8.length + nBlanks];
        i=0;
        j=0;
        if (pa8[0] == '-') {
          carFive[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          carFive[i]='0';
        }
        for (; j < pa8.length; i++, j++) {
          carFive[i]=pa8[j];
        }
      }
    }
  }
  return carFive;
}",340,8,"ca4:pa8,ca5:carFive,noDigits:nodigIt,applyFloatPadding:applyFloatPitching,",276,3.07,ALERT
2866,,,89,4,,813,14.28768934806190,0
2867,,,48,1,,258,1.9165420651435900,0
2868,"public void testDecoder6(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}","public void  testDECodes6(){
  boolean obj;
  String originalAppIdValue=mApplicationIDType;
  int originalMessageLengthFile=mContentTypeValue;
  Random ru=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mApplicationIDType=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=ru.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduRecoded=new WspTypeDecoder(pdu);
    obj=pduRecoded.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(obj);
    int match=(int)pduRecoded.getValue32();
    obj=pduRecoded.decodeXWapApplicationId(match);
    assertTrue(obj);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mApplicationIDType + ""], val: [""+ pduRecoded.getValueString()+ ""]"");
    assertTrue(mApplicationIDType.equals(pduRecoded.getValueString()));
  }
  mmApplicationIDTypeoriginalAppIdValue;
  mmContentTypeValueoriginalMessageLengthFile;
}",170,11,"testDecoder6: testDECodes6,res:obj,originalAppIdName:originalAppIdValue,originalContentTypeValue:originalMessageLengthFile,rd:ru,mAppIdName:mApplicationIDType,pduDecoder:pduRecoded,index:match,",445,4.07,ALERT
2869,,,61,4,,831,6.516616507371270,0
2870,,,278,7,,856,10.430236605803200,0
2871,,,35,3,,460,4.271175090471900,0
2872,"public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}","public static float ann(float[] sample,int defaultPosition,int startEnd){
  float ann=0;
  int active=0;
  defaultPosition=Math.max(defaultPosition,0);
  stdefaultPositionath.min(stdefaultPositionample.length - 1);
  startEnd=Math.max(startEnd,0);
  enstartEndath.min(enstartEndample.length - 1);
  if (defaultPosition > endInstartEndefaultPosition=startEnd;
  for (int i=defendultPosition; end <= startEnd; end++) {
    if (Float.isNaN(sample[end]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    ann+=sample[end];
    active++;
  }
  ann/=active;
  return ann;
}",142,6,"mean:ann,data:sample,startIndex:defaultPosition,endIndex:startEnd,total:active,i:end,",547,6.21,ALERT
2873,"public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}
","public static String readFileAsString(File class) throws FileNotFoundException {
  return readFileAsString(class.getAbsolutePath());
}
",22,2,"file:class,",36,0.31,ALERT
2874,,,19,2,,430,4.860244071483610,0
2875,"private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
","private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> server=mRecords.server();
      while (server.hasNext()) {
        Record record=(Record)server.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          server.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
",105,5,"iterator:server,",45,0.3,ALERT
2876,"private void analyzeClassFields(String className,int action){
  try {
    Class<?> dynamicClass=Class.forName(className);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(className,field,action);
        manyToAnyConditions(className,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);
  }
}
","private void analyzeClassSignes(String functionName,int filter){
  try {
    Class<?> dynamicClass=Class.forName(functionName);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(functionName,field,filter);
        manyToAnyConditions(functionName,field,filter);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + functionName);
  }
}
",99,6,"className:functionName,action:filter,analyzeClassFields:analyzeClassSignes,",162,2.1,ALERT
2877,,,34,3,,609,4.287600521246590,0
2878,,,94,5,,1020,19.952904176712000,0
2879,"public static int putInt(byte[] bytes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}
","public static int writeFloat(byte[] ones,int from,int sl){
  if (littleEndian) {
    sl=Integer.reverseBytes(sl);
  }
  theUnsafe.writeFloat(ones,from + BYTE_ARRAY_BASE_OFFSET,sl);
  return from + Bytes.SIZEOF_INT;
}
",53,4,"putInt:writeFloat,bytes:ones,offset:from,val:sl,",243,2.85,ALERT
2880,"public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
","public static void saveXStream(File  saveFrom,Object content,Instances header) throws Exception {
  Vector<Object> lv=new Vector<Object>();
  lv.add(content);
  if (header != null) {
    lv.add(header);
  }
  lv.trimToSize();
  XStream.write( saveFrom.getAbsolutePath(),lv);
}
",73,5,"v:lv,saveTo: saveFrom,model:content,",131,1.06,ALERT
2881,"public Object take() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
","public Object  takes() throws InterruptedException, ForceReattryError {
  throw new UnsupportedOperationException();
}
",17,2,"take: takes,ForceReattemptException:ForceReattryError,",99,1.15,ALERT
2882,,,62,4,,602,7.909354174137120,0
2883,"private static int showUrlsPrompt(Component parent,List<String> urls){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (urls.size() > 1) {
    okOption=""Open "" + urls.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (urls.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}","private static int showUrlsPrePT(Component client,List<String> patternd){
  String code=""<html><body style=\'width: 100px;\'>"";
  for (  String url wwwatternd) {
    www=splitUrl(www);
    code+=www + ""<br />"";
  }
  String  okTerm=""Open URL"";
  if (patternd.size() > 1) {
    okOp okTermen "" + patternd.size() + "" URLs"";
  }
  String[]styles={ okTerm,""Cancel""};
  if (patternd.size() == 1) {
   styles=new String[]{ okTerm,""Copy URL"",""Cancel""};
  }
  incorosingButtonon=JOptionPane.showOptionDialog(client,code,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,style,1);
  return corosingButton;
}",140,8,"showUrlsPrompt:showUrlsPrePT,parent:client,urls:patternd,text:code,url:www,okOption: okTerm,options:style,chosenOption:corosingButton,",1131,11.41,ALERT
2884,"private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
","private static boolean install(ODatabaseDocumentPool list,String dburl,String uid,String pad,boolean FinalCome){
  ODatabaseDocumentTx sb=null;
  try {
    logger.info(""Verifying the DB."");
    db=list.acquire(dburl,uid,padsb    db=list.acquire(dburl,uid,pad);
    Iterator<ODocument> entry=sb.browseClass(""config"");
    if (entry.hasNext()) {
      entry.next();
    }
  }
 catch (  OException ex) {
    if (FinalCome) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (sb != null) {
      sb.close();
    }
  }
  return true;
}
",136,8,"test:install,pool:list,dbURL:dburl,user:uid,password:pad,finalTry:FinalCome,db:sb,iter:entry,",445,14.04,ALERT
2885,,,65,5,,956,11.573051035404200,0
2886,,,78,5,,990,9.50905396938324,0
2888,,,200,12,,2294,21.914085960388200,0
2889,"protected void addTags(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
","protected void  addFeatures(E service,Builder bug){
  PlatformIdent plaperiodIdentchedDataService.getPlatformIdentForId(service.getPlatformIdent());
  buibugg(Series.TAG_AGENT_ID,String.valueOf(service.getPlatformIdent()));
  if (null != periodIdent) {
    bug.tag(Series.TAG_AGENT_NAME,periodIdent.getAgentName());
  }
}
",69,4,"addTags: addFeatures,data:service,builder:bug,platformIdent:periodIdent,",441,3.87,ALERT
2890,"public static List seriesNameListFromDataArray(Object[][] data){
  int seriesCount=data.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}","public static List seriesNameListFromRowMatrix(Object[][] results){
  int sersequenceLengthsults.length;
  List serseriesNameListw java.util.ArrayList(sequenceLength);
  for (int i=0i i <isequenceLength; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}",66,5,"seriesNameListFromDataArray:seriesNameListFromRowMatrix,data:results,seriesCount:sequenceLength,",235,2.43,ALERT
2891,,,42,3,,585,3.935444406668350,0
2892,,,57,4,,734,8.90149998664856,0
2893,,,46,3,,615,6.108837922414140,0
2894,"public static String rightPad(String s,int minLength,char filling){
  int ln=s.length();
  if (minLength <= ln) {
    return s;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(s);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}","public static String roundPad(String l,int minUrl,char suffills){
  int ll=l.length();
  if (minUrl <= ll) {
    return l;
  }
  StringBuildpersres=new StringBuilder(minUrl);
  pers.append(l);
  iddafdif=minUrl - ll;
  for (int izi0; izi< ddaf; zi++) {
    rpersappend(suffills);
  }
  return pers.toString();
}",89,8,"rightPad:roundPad,s:l,minLength:minUrl,filling:suffills,ln:ll,res:pers,dif:ddaf,i:zi,",911,10.28,ALERT
2895,,,32,3,,600,5.292098085085550,0
2896,"public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}","public Pair<Integer,List<Long>> forward(){
  try {
    classesProcessed++;
    Integer key=iterator.forward();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}",127,7,"next:forward,",49,0.44,ALERT
2897,,,40,1,,236,1.76755690574646,0
2898,"private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){
  Validate.notNull(request,""request"");
  Validate.notEmpty(tenantName,""tenantName"");
  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();
  Validate.notNull(idmFactory,""idmFactory"");
  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();
  idmAccessor.setTenant(tenantName);
  String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntityId == null || encodedEntityId.isEmpty()) {
    logger.error(""No Relying Party\'s entity ID found. Ignore the request!"");
    return null;
  }
  String rpEntityId=new String(Base64.decode(encodedEntityId));
  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);
  if (rp != null) {
    return rp;
  }
 else {
    logger.error(""Unknown relying party: "" + rpEntityId);
    return null;
  }
}","private RelyingParty validateRelyingParty(HttpServletRequest client,String tenantName){
  Validate.notNull(client,""request"");
  Validate.notEmpty(tenantName,""tenantName"");
  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();
  Validate.notNull(idmFactory,""idmFactory"");
  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();
  idmAccessor.setTenant(tenantName);
  String encodedEntityId=client.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntityId == null || encodedEntityId.isEmpty()) {
    logger.error(""No Relying Party\'s entity ID found. Ignore the request!"");
    return null;
  }
  String rpEntityId=new String(Base64.decode(encodedEntityId));
  RelyingParty  rm=idmAccessor.getRelyingPartyByUrl(rpEntityId);
  if ( rm != null) {
    return  rm;
  }
 else {
    logger.error(""Unknown relying party: "" + rpEntityId);
    return null;
  }
}",149,8,"request:client,rp: rm,",85,0.53,ALERT
2899,"@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}","@Override public boolean load(final Player class,final List<String> args){
  groovyBinding.setVariable(""player"",class);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(class,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(class,args,ret);
  return (ret);
}",194,5,"player:class,",131,0.85,ALERT
2900,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean  isAllallowed(String listType){
  if (m_listenees.containsKey(listType)) {
    return false;
  }
  return true;
}
",28,2,"connectionAllowed: isAllallowed,eventName:listType,",354,3.78,ALERT
2901,,,26,2,,359,3.448333724339800,0
2902,,,45,3,,456,2.253116989135740,0
2903,"public String toString(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toString();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toString();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.toString();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}","public String TOSingle(){
  String inner="""";
  String followendedby="""";
  int styleType=-1;
  String nextNumber="""";
  int SingplesForce=0;
  for (Enumeration t=formatConstraints.elements(); t.hasMoreElements(); ) {
    FormatConstraint CONstart=(FormatConstraint)t.nextElement();
    if (CONstart.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (styleType != -1) {
        if (styleType != CONstart.type) {
          inner+=followendedby + SingplesForce + nextNumber;
          followendedby="" followed by "";
          SingplesForce=1;
          styleType=CONstart.type;
          nextNumber=CONstart.TOSingle();
        }
 else {
          SingplesForce++;
        }
      }
 else {
        styleType=CONstart.type;
        nextNumber=CONstart.TOSingle();
        SingplesForce=1;
      }
    }
 else {
      if (styleType != -1) {
        inner+=followendedby + SingplesForce + nextNumber;
        followendedby="" followed by "";
        styleType=-1;
        SingplesForce=0;
        nextNumber="""";
      }
      inner+=followendedby + CONstart.TOSingle();
      followendedby="" followed by "";
    }
  }
  if (styleType != -1) {
    inner+=followendedby + SingplesForce + nextNumber;
  }
  return inner;
}",224,8,"toString:TOSingle,str:inner,followedBy:followendedby,lastType:styleType,lastString:nextNumber,singlesCount:SingplesForce,e:t,constraint:CONstart,",1067,8.41,ALERT
2904,,,78,4,,698,8.204533946514130,0
2905,,,282,18,,3426,28.40134435494740,0
2906,"public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
","public void deleteObligation(final Obligation obligation,int  basicPointID) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateArray=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State object=i.next();
    checkCircularity(object,obligation, basicPointID);
    ObligationSet oblicuationGroup=object.getObligationSet();
    oblicuationGroup.remove(obligation);
    if (!oblicuationGroup.isEmpty()) {
      updatedStateArray.put(oblicuationGroup,object);
    }
  }
  replaceMap(updatedStateArray);
}
",113,7,"obligationSet:oblicuationGroup,state:object,updatedStateMap:updatedStateArray,basicBlockId: basicPointID,",191,2.39,ALERT
2907,"private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}
","private void create(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.create();
    globalConfigs.create();
  }
}
",55,2,"clear:create,",36,0.35,ALERT
2908,"public boolean canSpawnWorkers(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}","public boolean canspawnWorkors(){
  boolean canSpawnFileiner=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedCLusterVersion=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedCLusterVersion);
    if (timeSinceClusterLastUpdatedCLusterVersion > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnFileiner=true;
  break;
case 2:
canSpawnFileiner=true;
break;
case 3:
canSpawnFileiner=true;
break;
case 4:
canSpawnFileiner=true;
break;
default :
if (gridThrottle) {
canSpawnFileiner=false;
}
 else {
canSpawnFileiner=true;
}
}
return canSpawnFileiner;
}",220,3,"canSpawnWorkers:canspawnWorkors,timeSinceClusterLastUpdatedClusterState:timeSinceClusterLastUpdatedCLusterVersion,canSpawnWorker:canSpawnFileiner,",263,15.96,ALERT
2909,"@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
","@Deprecated public static EpisodeMatchingResult detectepisodefromFILE(File string){
  LOGGER.debug(""Detect episodes/seasons from file "" + string.getName());
  EpisodeMatchingResult search=new EpisodeMatchingResult();
  String fiFileDescriptiontring.getName();
  search=parseString(FileDescription);
  Collections.sort(search.episodes);
  Matcher Matter=stackingMarkerPattern.Matter(search.name);
  searchstackingMarkorerPatternd=Matter.matches();
  LOGGER.debug(""returning result "" + search);
  return search;
}
",92,6,"detectEpisodeFromFilename:detectepisodefromFILE,file:string,result:search,fileName:FileDescription,matcher:Matter,stackingMarkerFound:stackingMarkorerPattern,",343,3.08,ALERT
2910,"private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
","private void getAdilege(Object parent,NamespacePermissionEnum[] filmits,List<AccessDeniedException> accessDeniedEXapes){
  if (parent != null) {
    if (parent instanceof Collection) {
      Collection<?> model=(Collection<?>)parent;
      for (      Obarticleement : model) {
        getarticle(element,filmits,accessDeniedEXapes);
      }
    }
 else     if (parent instanceof String) {
      try {
        getAdilege((String)parent,filmits);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedEXapes.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,parent.getClass()));
    }
  }
}
",133,6,"checkPermission:getAdilege,object:parent,permissions:filmits,accessDeniedExceptions:accessDeniedEXapes,collection:model,element:article,",590,8.53,ALERT
2911,,,45,3,,613,9.413024719556170,0
2912,"public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
","public AddressLookup(String serverEmail,String microno,String password){
  this.serverEmail=serverEmail.trim();
  this.clientID=microno.trim();
  this.accessCode=password.trim();
}
",44,5,"serverUrl:serverEmail,serialNo:microno,",59,0.4,ALERT
2913,"public List<String> listMyDBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
","public List<String> listMyDBS(String license,boolean stable){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBconnnn,license,stable);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
",72,4,"listMyDBs:listMyDBS,owner:license,restricted:stable,",164,1.67,ALERT
2914,"public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}
","public static String part(String method,Object[] paramargs){
  return MessageFormat.part(method,paramargs);
}
",25,3,"format:part,message:method,arguments:paramargs,",167,1.22,ALERT
2915,,,210,10,,1952,12.310355492432900,0
2916,,,81,4,,693,4.719429389635720,0
2917,"protected final void updateBorderText(final String text){
  Preconditions.checkNotNull(text,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(text);
  updateUI();
}","protected final void drawLineTitle(final String border){
  Preconditions.checkNotNull(border,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(border);
  updateUI();
}",31,2,"updateBorderText:drawLineTitle,text:border,",139,0.86,ALERT
2918,"public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}
","public void erialze(KXmlSerializer initializers) throws IOException {
  mDeviceInfo.erialze(initializers);
  serializeHostInfo(initializers);
  serializeTestSummary(initializers);
  monkeyTag.erialze(initializers);
  List<TestPackageResult> pkges=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkges,new PkgComparator());
  for (  TestPackageResult rrev: pkges) {
    rev.erialze(initializers);
  }
}
",82,4,"serialize:erialze,serializer:initializers,pkgs:pkges,r:rev,",236,2.01,ALERT
2919,"protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){
  if (eoffset == -1) {
    eoffset=component.length - 1;
  }
  for (int i=soffset; i <= eoffset; i++) {
    if (!generous.get(component[i])) {
      return false;
    }
  }
  return true;
}","protected boolean validate(final char[] cycle,final int soffset,int eoffset,final BitSet generous){
  if (eoffset == -1) {
    eoffset=cycle.length - 1;
  }
  for (int i=soffset; i <= eoffset; i++) {
    if (!generous.get(cycle[i])) {
      return false;
    }
  }
  return true;
}",77,6,"component:cycle,",48,0.41,ALERT
2920,"public static void copyToClipboard(Transferable t){
  ClipboardHelper.copyToClipboard(t);
}
","public static void copyToClipphole(Transferable t){
  ClipboardHelper.copyToClipphole(t);
}
",17,2,"copyToClipboard:copyToClipphole,",36,0.34,ALERT
2921,,,280,10,,1915,13.33157647450770,0
2922,"public Location newLocation(String name){
  Location location=getLocationByName(name);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),name);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
","public Location insertRegion(String word){
  Location feature=getLocationByName(word);
  if (feature == null) {
    _ids++;
    feature=new Location(Integer.toString(_ids),word);
    Integer  oldName=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(feature.getId(),feature);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY, oldName,Integer.valueOf(_locationHashTable.size()));
  }
  return feature;
}
",91,5,"newLocation:insertRegion,name:word,location:feature,_id:_ids,oldSize: oldName,",412,5.45,ALERT
2923,,,19,2,,344,2.847822380065920,0
2924,"public static Configuration load(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.load(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}
","public static Configuration pack(Reader iter) throws IOException {
  try {
    Properties rules=new Properties();
  ruleses.pack(iter);
    return from(rules);
  }
  finally {
    iter.close();
  }
}
",45,3,"load:pack,reader:iter,properties:rules,",208,1.57,ALERT
2925,"@Override public boolean equals(Object o){
  return o.hashCode() == hashCode();
}
","@Override public boolean Equalls(Object o){
  return o.hashCode() == hashCode();
}
",22,2,"equals:Equalls,",16,0.13,ALERT
2926,,,15,2,,423,3.7175039370854700,0
2927,,,24,2,,418,3.931180727481840,0
2928,,,26,2,,349,3.0205161054929100,0
2929,,,91,5,,981,43.05349522034330,0
2930,,,153,7,,1270,36.48722438414890,0
2931,"private Node<K,V> findNode(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0)       return n;
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}","private Node<K,V> findNode(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), null=b.next; ; ) {
      Object v;
      int c;
      if (null == null)       break outer;
      Node<K,V> f=null.next;
      if (null != b.next)       break;
      if ((v=null.value) == null) {
        null.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == null)       break;
      if ((c=cpr(cmp,key,null.key)) == 0)       return null;
      if (c < 0)       break outer;
      b=null;
      null=f;
    }
  }
  return null;
}",190,8,"n:null,",67,3.06,ALERT
2932,,,71,3,,625,6.156205602486930,0
2933,,,22,2,,214,1.631403342882790,0
2934,"private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException {
  if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {
    complianceImpl.verifyAttributes(attrSet);
  }
}
","private void checkComplianceRules(AttrSet attrList,boolean oreReplication) throws AMException {
  if (!oreReplication && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {
    complianceImpl.verifyAttributes(attrList);
  }
}
",34,3,"checkComplianceAttributes:checkComplianceRules,ignoreCompliance:oreReplication,attrSet:attrList,",81,0.95,ALERT
2935,"public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}","public void  voidGetDatabaseTypesSort() throws Exception {
  DatabaseMetaData dMD=con.getMetaData();
  ResultSet results=dMD.getTableTypes();
  String prenextName="""";
  while (results.next()) {
    String type=results.getString(1);
    assertTrue(type.compareTo(prenextName) >= 0);
    prenextName=type;
  }
  results.close();
}",74,5,"rs:results,dmd:dMD,previousType:prenextName,testGetTableTypesOrder: voidGetDatabaseTypesSort,",155,1.74,ALERT
2936,,,34,2,,389,3.1886041522026100,0
2937,,,39,1,,228,2.5255287329355900,0
2938,"protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}","protected int loadHeader(){
  BlockCode=read();
  int inner=0;
  if (BlockCode > 0) {
    try {
      int offset;
      while (inner < BlockCode) {
        counoffsetckCode - inner;
        rawData.get(block,inner,offset);
        inner+=offset;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      style=STATUS_FORMAT_ERROR;
    }
  }
  return inner;
}",87,5,"readBlock:loadHeader,blockSize:BlockCode,n:inner,count:offset,status:style,",314,2.12,ALERT
2939,,,55,3,,617,9.060505338509880,0
2940,"public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}","public void  CompateMatrix(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}",471,22,"computeParameters: CompateMatrix,",80,1.62,ALERT
2941,"private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
","private static void lookForChanges(DataObject this,DataObject obj,HashMap<String,Change> grades,Set<String> inferred,Set<String> excluded,Set<String> contained){
  Class configclass=this.getClass();
  Method[] metMethodsxsnfigclass.getMethods();
  for (  Method menull Methodsxs) {
    boolean constains=false;
    NamNAMEArmnn=null.getAnnotation(Name.class);
    if (NAMEArm == null) {
      continue;
    }
    String key=NAMEArm.value();
    if (contained != null && contained.contains(key)) {
      constains=true;
    }
 else     if (inferred != null && !inferred.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Claspepe=null.getReturnType();
    try {
      Objecebjaja=null.invoke(this);
      Objlibbobjnullod.invoke(obj);
      if (pe == StringSet.class) {
        if (constains) {
          analyzeNewStringSetContainsOldStringSetValues((StringSetebjaa,(StringSetlibbbkeyy,grades);
        }
 else {
          analyzeStringSets((StringSetebjaa,(StringSetlibbbkeyy,grades);
        }
      }
 else       if (pe == StringMap.class) {
        analyzeStringMaps((StringMapebjaa,(StringMaplibbbkeyy,grades);
      }
 else       if (pe == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMapebjaa,(StringSetMaplibbbkeyy,grades);
      }
 else {
        if (!isEqual(ebja,libb)) {
          Change change=new Change(key,ebja,libb,NAMEArm.value());
          grades.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
",401,17,"left:this,right:obj,changes:grades,included:inferred,refClass:configclass,methods:Methodsxs,method:null,nameAnn:NAMEArm,type:pe,obja:ebja,objb:libb,contain:constains,",1007,12.74,ALERT
2942,,,45,2,,432,5.159583659966790,0
2943,,,21,2,,431,3.4768419742584200,0
2944,,,29,1,,241,2.0084440310796100,0
2945,"public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}
","public PlaLineInt transiceCreatwithout(PlaVectorInt p0variable){
  if (p0variable.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.transiceCreatwithout(p0variable);
  PlaPointInt new_b=point_b.transiceCreatwithout(p0variable);
  return new PlaLineInt(new_a,new_b);
}",52,4,"translate_by:transiceCreatwithout,p_vector:p0variable,",71,0.86,ALERT
2946,,,19,1,,231,1.5729976932207700,0
2947,"private void checkDuplicateNamesDuringDelete(List<Integer> ids){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ids) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ids.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}","private void checkDuplicateNamesForDelete(List<Integer> roots){
  ArrayList<Entity>  myEntites=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNametoid=new Hashtable<String,ArrayList<Integer>>((int)( myEntites.size() * 1.26));
  for (  Entity enter :  myEntites) {
    String rawNouterParter.getShortNameRaw();
    ArrayList<Integer> na namedFieldosawNametoid.get(outerPart);
    if ( namedFieldos == null) {
       namedFieldos=new ArrayList<Integer>();
    }
    name namedFieldos(enter.getId());
    rawNametoid.put(outerPart, namedFieldos);
  }
  for (  int idgame roots) {
    Entity redemotedEntame.getEntity(game);
    if (demotedEnt == null) {
      continue;
    }
    StriremovedrawCodeame=demotedEnt.getShortNameRaw();
    Integcurrentunt=duplicateNameHash.get(demotedEnt.getShortNameRaw());
    if ((current != null) && (current > 1)) {
      ArrayList<Integer>  namedFieldos=rawNametoid.get(removedrawCode);
      for (      Integer i :  ipamedFieldos) {
        Entity enter=game.getEntity(ip);
        String eRaweFullNameer.getShortNameRaw();
        if (eeFullNameequals(rremovedrawCode && (entduplicateSignerker > demotedEnt.duplicateSigner)) {
          enter.duplicateSigner--;
          enter.generateShortName();
          enter.generateDisplayName();
          if (!roots.contains(enter.getId())) {
            sendUpdateEntity(enter);
          }
        }
      }
      duplicateNameHash.put(demotedEnt.getShortNameRaw(),new Integer(current - 1));
    }
 else     if (current != null) {
      duplicateNameHash.remove(demotedEnt.getShortNameRaw());
    }
  }
}",344,14,"checkDuplicateNamesDuringDelete:checkDuplicateNamesForDelete,ids:roots,myEntities: myEntites,rawNameToId:rawNametoid,e:enter,rawName:outerPart,namedIds: namedFieldos,id:game,removedEntity:demotedEnt,removedRawName:removedrawCode,count:current,i:ip,eRawName:eFullName,duplicateMarker:duplicateSigner,",2478,45.51,ALERT
2948,,,64,3,,439,3.952661605676020,0
2949,"public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}
","public void write(Writer layer) throws Exception {
  layer.write(toString());
  layer.flush();
}
",26,2,"writer:layer,",37,0.33,ALERT
2950,"private static boolean isOlderThanLeopard(){
  String version=System.getProperty(""os.version"");
  StringTokenizer tk=new StringTokenizer(version,""."");
  int major=Integer.parseInt(tk.nextToken());
  int minor=Integer.parseInt(tk.nextToken());
  return major == 10 && minor < 6;
}","private static boolean isOlderThANLeone(){
  String data=System.getProperty(""os.version"");
  StringTokenizer tan=new StringTokenizer(data,""."");
  int major=Integer.parseInt(tan.nextToken());
  int anchion=Integer.parseInt(tan.nextToken());
  return major == 10 && anchion < 6;
}",66,5,"isOlderThanLeopard:isOlderThANLeone,version:data,minor:anchion,tk:tan,",152,1.87,ALERT
2951,,,138,8,,1558,18.992804165681200,0
2952,"protected void transferFromFile(File idFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }","protected void transferToPage(File  IDDir) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader( IDDir))){
    String e;
    while ((e=br.readLine()) != null) {
      e=e.trim();
      if (e.length() > 0) {
        transfer(e);
      }
    }
  }
 }",72,3,"transferFromFile:transferToPage,idFile: IDDir,line:e,",316,3.69,ALERT
2953,,,98,5,,902,7.9332871556282000,0
2954,"public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}","public static double div(final double area,final double i){
  if (area > i) {
    return area;
  }
  if (area < i) {
    return i;
  }
  if (area != i) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(area);
  if (bits == 0x8000000000000000L) {
    return i;
  }
  return area;
}",74,4,"a:area,b:i,max:div,",136,1.67,ALERT
2955,"public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}
","public void call(String description,String[] sourceCommand) throws BackupException {
  call(description,sourceCommand,null,null,null,false,false);
}
",33,3,"baseCommand:sourceCommand,exec:call,",90,0.71,ALERT
2956,,,65,4,,677,6.385612328847250,0
2957,,,53,4,,745,7.4751051982243900,0
2958,,,42,3,,604,4.591008071104690,0
2959,"@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
","@Override public void  bookmarksOrHistoryChoicker(ComboViews Startview){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle Extended=new Bundle();
  Extended.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(Startview,Extended);
}
",70,3,"bookmarksOrHistoryPicker: bookmarksOrHistoryChoicker,startView:Startview,extras:Extended,",323,4.12,ALERT
2960,"private static ClassInfo findOrCreateClass(String t){
  if (!t.endsWith(""[]"")) {
    return ClassInfo.findOrCreateClass(t);
  }
 else {
    String baseType=t.substring(0,t.indexOf(""[]""));
    int level=(t.length() - t.indexOf(""[]"")) / 2;
    String s="""";
    for (int i=0; i < level; ++i)     s+=""["";
    if (baseType.equals(""int""))     s+=""I"";
 else     if (baseType.equals(""boolean""))     s+=""B"";
 else     s+=""L"" + baseType + "";"";
    return ClassInfo.findOrCreateClass(s);
  }
}","private static ClassInfo findOrCreateClass(String wt){
  if (!wt.endsWith(""[]"")) {
    return ClassInfo.findOrCreateClass(wt);
  }
 else {
    String baseType=wt.substring(0,wt.indexOf(""[]""));
    int level=(wt.length() - wt.indexOf(""[]"")) / 2;
    String s="""";
    for (int i=0; i < level; ++i)     s+=""["";
    if (baseType.equals(""int""))     s+=""I"";
 else     if (baseType.equals(""boolean""))     s+=""B"";
 else     s+=""L"" + baseType + "";"";
    return ClassInfo.findOrCreateClass(s);
  }
}",137,6,"t:wt,",57,0.55,ALERT
2961,,,62,2,,256,2.5303709665934200,0
2962,,,85,3,,613,7.527534560362500,0
2963,"public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}","public StrBuilder comment(int condition,boolean value){
  validateIndex(condition);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(texture,condition,texture,condition + 4,size - condition);
    texture[condition++]='t';
    texture[condition++]='r';
    texture[condition++]='u';
    texture[condition]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(texture,condition,texture,condition + 5,size - condition);
    texture[condition++]='f';
    texture[condition++]='a';
    texture[condition++]='l';
    texture[condition++]='s';
    texture[condition]='e';
    size+=5;
  }
  return this;
}",159,5,"index:condition,buffer:texture,insert:comment,",189,1.64,ALERT
2964,,,42,2,,428,4.549354696273800,0
2966,"public static String expandHiddenDir(final String filename){
  final int macro=filename.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return filename;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=filename.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}","public static String expandHiddenDir(final String text){
  final int macro=text.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return text;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=text.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}",100,4,"filename:text,",44,0.56,ALERT
2967,"@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
","@SuppressWarnings(""rawtypes"") public void test2streamInfo(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet ception=new ListBindingSet();
    ception.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(ception);
  }
{
    final IBindingSet ception=new ListBindingSet();
    ception.set(Var.var(""x""),new Constant<IV>(termId));
    ception.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(ception);
  }
  doEncodeDecodeTest(expectedSolutions);
}",131,3,"test_streamAPI:test2streamInfo,expected:ception,",67,0.95,ALERT
2968,"public NvpBuilder addRaw(final String name,final String value){
  npv.put(name,value);
  return this;
}
","public NvpBuilder withDirect(final String name,final String value){
  npv.put(name,value);
  return this;
}
",26,3,"addRaw:withDirect,",21,0.18,ALERT
2969,"public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}","public InputBuilder<T> repeatAll(int ts){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < ts; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}",58,4,"times:ts,",41,0.5,ALERT
2970,,,106,3,,611,6.1391288558642100,0
2971,"public static int parseString(String value){
  return Integer.parseInt(value);
}
","public static int seText(String text){
  return Integer.parseInt(text);
}
",18,2,"parseString:seText,value:text,",348,3.18,ALERT
2972,"public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}","public boolean isPDFFient(){
  String key=getSummary();
  return key != null && key.length() > 25;
}",27,2,"isPDFLicense:isPDFFient,",29,0.24,ALERT
2973,"public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
","public static void processChannelLoading(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider function=cubeTasks.get(key);
  if (function == null) {
    function=new AsyncCubeIOProvider(key,loader);
    function.addCallback(runnable);
    cubeTasks.put(key,function);
    pool.execute(function);
  }
 else {
    function.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    function.setColumn(loadedColumn);
  }
}
",156,11,"task:function,queueCubeLoad:processChannelLoading,",327,3.0,ALERT
2974,,,37,3,,592,5.537759784857430,0
2975,"public Date(String date){
  String[] fields=date.split(""/"");
  if (fields.length != 3) {
    throw new IllegalArgumentException(""Invalid date"");
  }
  month=Integer.parseInt(fields[0]);
  day=Integer.parseInt(fields[1]);
  year=Integer.parseInt(fields[2]);
  if (!isValid(month,day,year))   throw new IllegalArgumentException(""Invalid date"");
}","public Date(String bug){
  String[]quarterss=bug.split(""/"");
  if (quarters.length != 3) {
    throw new IllegalArgumentException(""Invalid date"");
  }
  momnteger.parseInt(quarters[0]);
  danoonnteger.parseInt(quarters[1]);
  yespannteger.parseInt(quarters[2]);
  if (!isValid(m,noon,span))   throw new IllegalArgumentException(""Invalid date"");
}",92,5,"date:bug,fields:quarters,month:m,day:noon,year:span,",907,9.13,ALERT
2976,,,199,8,,1375,16.914904387792000,0
2977,"private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){
  int totalCount;
  int minX, maxX, minY, maxY;
  boolean rs=table.getRowSelectionAllowed();
  boolean cs=table.getColumnSelectionAllowed();
  if (rs && cs) {
    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (rs) {
    totalCount=table.getSelectedRowCount();
    minX=0;
    maxX=table.getColumnCount() - 1;
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (cs) {
    totalCount=table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=0;
    maxY=table.getRowCount() - 1;
  }
 else {
    totalCount=0;
    minX=maxX=minY=maxY=0;
  }
  boolean stayInSelection;
  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {
    stayInSelection=false;
    maxX=table.getColumnCount() - 1;
    maxY=table.getRowCount() - 1;
    minX=Math.min(0,maxX);
    minY=Math.min(0,maxY);
  }
 else {
    stayInSelection=true;
  }
  if (dy == 1 && leadColumn == -1) {
    leadColumn=minX;
    leadRow=-1;
  }
 else   if (dx == 1 && leadRow == -1) {
    leadRow=minY;
    leadColumn=-1;
  }
 else   if (dy == -1 && leadColumn == -1) {
    leadColumn=maxX;
    leadRow=maxY + 1;
  }
 else   if (dx == -1 && leadRow == -1) {
    leadRow=maxY;
    leadColumn=maxX + 1;
  }
  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);
  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);
  do {
    calcNextPos(dx,minX,maxX,dy,minY,maxY);
  }
 while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));
  return stayInSelection;
}","private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel csl,ListSelectionModel csm){
  int totalCount;
  int minX, maxX, minY, maxY;
  boolean rs=table.getRowSelectionAllowed();
  boolean cs=table.getColumnSelectionAllowed();
  if (rs && cs) {
    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=csl.getMinSelectionIndex();
    maxY=csl.getMaxSelectionIndex();
  }
 else   if (rs) {
    totalCount=table.getSelectedRowCount();
    minX=0;
    maxX=table.getColumnCount() - 1;
    minY=csl.getMinSelectionIndex();
    maxY=csl.getMaxSelectionIndex();
  }
 else   if (cs) {
    totalCount=table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=0;
    maxY=table.getRowCount() - 1;
  }
 else {
    totalCount=0;
    minX=maxX=minY=maxY=0;
  }
  boolean stayInSelection;
  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {
    stayInSelection=false;
    maxX=table.getColumnCount() - 1;
    maxY=table.getRowCount() - 1;
    minX=Math.min(0,maxX);
    minY=Math.min(0,maxY);
  }
 else {
    stayInSelection=true;
  }
  if (dy == 1 && leadColumn == -1) {
    leadColumn=minX;
    leadRow=-1;
  }
 else   if (dx == 1 && leadRow == -1) {
    leadRow=minY;
    leadColumn=-1;
  }
 else   if (dy == -1 && leadColumn == -1) {
    leadColumn=maxX;
    leadRow=maxY + 1;
  }
 else   if (dx == -1 && leadRow == -1) {
    leadRow=maxY;
    leadColumn=maxX + 1;
  }
  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);
  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);
  do {
    calcNextPos(dx,minX,maxX,dy,minY,maxY);
  }
 while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));
  return stayInSelection;
}",466,16,"rsm:csl,",142,3.69,ALERT
2978,,,110,2,,413,4.170034476121270,0
2979,"private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}","private void scheedayProfessional(int distance){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=distance;
    update();
  }
}",58,5,"length:distance,scheduleCommercial:scheedayProfessional,",64,0.59,ALERT
2981,"public void updateValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}
","public void updateValue(final Object text,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    TEXTStr=(String)text;
    if (TEXTStr != null && TEXTStr.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=TEXTStr;
  }
 else {
    TEXTStr=(String)text;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && TEXTStr != null && TEXTStr.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=TEXTStr;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(text);
  }
}
",142,7,"textString:TEXTStr,value:text,",209,2.01,ALERT
2982,"public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}
","public static void writeLong(long layer,short vol){
  if (UNALIGNED)   UNSAFE.writeLong(layer,vol);
 else   putShortByByte(layer,vol,BIG_ENDIAN);
}
",36,3,"addr:layer,val:vol,putShort:writeLong,",88,0.77,ALERT
2983,"private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}","private void accesBreakdownStment(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction Breakline=new BreakPointInstruction();
          Breakline.setLocation(currInst);
          Breakline.setInstID(instID++);
          Breakline.setBPInstructionLocation(location);
          instructions.add(i,Breakline);
          DMLBreakpointManager.insertBreakpoint(Breakline,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction Breakline=new BreakPointInstruction();
          Breakline.setLocation(currInst);
          Breakline.setInstID(instID++);
          Breakline.setBPInstructionLocation(location);
          instructions.add(i,Breakline);
          DMLBreakpointManager.insertBreakpoint(Breakline,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction Breakline=(BreakPointInstruction)currInst;
        Breakline.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        Breakline.setBPInstructionLocation(location);
        instructions.set(i,Breakline);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction Breakline=(BreakPointInstruction)currInst;
          Breakline.setLocation(currInst);
          Breakline.setInstID(currInst.getInstID());
          Breakline.setBPInstructionStatus(status);
          Breakline.setBPInstructionLocation(location);
          instructions.set(i,Breakline);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}",378,10,"accesBreakpointInstruction:accesBreakdownStment,breakpoint:Breakline,",313,3.79,ALERT
2984,,,54,7,,1234,12.926850517590800,0
2985,,,267,13,,2485,17.509769562880200,0
2986,,,34,2,,431,3.7786548415819800,0
2987,,,1041,18,,3262,47.035271020730300,0
2988,,,615,5,,1070,9.95204871892929,0
2989,,,25,2,,398,4.0905201236407000,0
2990,,,25,3,,472,3.398068102200830,0
2991,"public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}
","public static void read(InputStream s,Resource cache,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(cache.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  read(s,os,closeIS,true);
}
",65,5,"copy:read,is:s,out:cache,",104,1.03,ALERT
2992,"public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
","public Result doComparitionResult(Properties prop) throws Exception {
  finaltimeoutimeout=Long.parseLong(prop.getProperty(TestOptions.TIMEOUT));
  finantrialstrials=Integer.parseInt(prop.getProperty(TestOptions.NTRIALS));
  financlientslients=Integer.parseInt(prop.getProperty(TestOptions.NCLIENTS));
  final dpercentListenenerseaders=Double.parseDouble(prop.getProperty(TestOptions.PERCENT_READERS));
  final dpercentWritersWillFlushlFlush=Double.parseDouble(prop.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  finareclenreclen=Integer.parseInt(prop.getProperty(TestOptions.RECLEN));
  finanwritesPerTaskerTask=Integer.parseInt(prop.getProperty(TestOptions.NWRITES));
  finanreadsPerTaskerTask=Integer.parseInt(prop.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result resuresultRMWTest(store,timeout,ntrials,nclients,percentListeneners,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
",194,12,"doComparisonTest:doComparitionResult,properties:prop,percentReaders:percentListeneners,",451,4.59,ALERT
2993,"private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}","private static int createPacedParparams(SunGraphics2D g1D,GlyphList gel){
  return (((gel.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gel.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gel.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((g1D.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}",76,3,"createPackedParams:createPacedParparams,sg2d:g1D,gl:gel,",92,0.94,ALERT
2994,"public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException {
  if (list == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(list.size());
    out.writeBoolean(hasLongIDs);
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongIDs) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}","public static void writeListOfIntings(List bl,boolean hasLongIDS,DataOutput o) throws IOException {
  if (bl == null) {
    o.writeInt(-1);
  }
 else {
  out.writeInt(bl.size());
    o.writeBoolean(hasLongIDS);
    for (Iteratoantit=bl.iterator(); ant.hasNext(); ) {
      Long lk(Long)ant.next();
      if (hasLongIDS) {
        o.writeLong(k.longValue());
      }
 else {
        o.writeInt((int)k.longValue());
      }
    }
  }
}",121,6,"writeListOfLongs:writeListOfIntings,list:bl,hasLongIDs:hasLongIDS,out:o,it:ant,l:k,",682,6.26,ALERT
2995,,,240,11,,1608,13.148573621114100,0
2996,"@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String string,@NotNull String... prefixes){
  int offset=0;
  for (  String prefix : prefixes) {
    int prefixLen=prefix.length();
    if (!string.regionMatches(offset,prefix,0,prefixLen)) {
      return false;
    }
    offset+=prefixLen;
  }
  return true;
}","@Contract(pure=true) public static boolean startsWithConatatenation(@NotNull String name,@NotNull String... ixs){
  int number=0;
  for (  Stnetworkrefix : ixs) {
    int pprefixlennetwork.length();
    if (!name.regionMatches(number,network,0,prefixlen)) {
      return false;
    }
    number+=prefixlen;
  }
  return true;
}",76,6,"startsWithConcatenation:startsWithConatatenation,string:name,prefixes:ixs,offset:number,prefix:network,prefixLen:prefixlen,",599,6.05,ALERT
2997,"private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}","private final Object internalSwal(Object k,Object iv,Object sc){
  int H=spread(k.hashCode());
  Object  oldObj=null;
  for (Node[] ct=table; ; ) {
    Node fr;
    int i, dH;
    Object ph;
    if (ct == null ||fr(f=tabAt(ctii=(ct.length - 1) & H)) == null)     break;
 else     if ((fdHfr.build) == MOVED) {
      if ((fphfr.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)ph;
        boolean normalated=false;
        boolean  delete=false;
        t.acquire(0);
        try {
          if (tabAt(ct,ii == fr) {
            normalated=true;
            TreeNode post=t.getTreeNode(H,k,t.root);
            if (post != null) {
              Object pv=pvst.item;
              if (sc == null || sc == pv || sc.equals(pv)) {
                 oldObj=pv;
                if ((ppostvitemiv) == null) {
                   delete=true;
                  t.deleteTreeNode(post);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (normalated) {
          if ( delete)           counter.add(-1L);
          break;
        }
      }
 else       ct=(Node[])ph;
    }
 else     if ((fdH& HASH_BITS) != H && fr.next == null)     break;
 else     if ((dH & LOCKED) != 0) {
      checkForResize();
     frf.tryAwaitLock(ct,i);
    }
 else     if (fr.casHash(dH,dH | LOCKED)) {
      boolean normalated=false;
      boolean  delete=false;
      try {
        if (tabAt(ct,ii == fr) {
          normalated=true;
          for (Node e=fr, pred=null; ; ) {
            Object ek, ev;
            if ((e.build & HASH_BITS) == H && ((ev=e.item) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (sc == null || sc == ev || sc.equals(ev)) {
                 oldObj=ev;
                if ((e.vitemiv) == null) {
                   delete=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(ct,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!fr.casHash(dH | LOCKED,dH)) {
          fr.build=dH;
synchronized (fr) {
            fr.notifyAll();
          }
          ;
        }
      }
      if (normalated) {
        if ( delete)         counter.add(-1L);
        break;
      }
    }
  }
  return  oldObj;
}",588,23,"internalReplace:internalSwal,v:iv,cv:sc,h:H,oldVal: oldObj,tab:ct,f:fr,fh:dH,fk:ph,hash:build,p:post,val:item,validated:normalated,deleted: delete,",1750,51.0,ALERT
2998,,,148,12,,2254,17.51861901283260,0
2999,"private void showPreloadingStage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
","private void showPreLoadingPage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
",48,2,"showPreloadingStage:showPreLoadingPage,",30,0.15,ALERT
3000,"public void push(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
","public void  api(Notification Notifier,NotificationResponseListener neweners){
  final StrnotifyTopicsopic=Notifier.getTopic();
  findomainring topic=notifyTopics == null ? defaultTopic : notifyTopics;
  Requefreq=Utils.buildRequest(clidomainopic,Notifier,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,Notifier,neweners)f req.send(new ResponseListener(semaphore,Notifier,neweners));
}
",71,6,"push: api,notification:Notifier,listener:neweners,notificationTopic:notifyTopics,topic:domain,req:f,",248,2.01,ALERT
3001,,,267,10,,1798,16.33913269440330,0
3002,,,157,6,,1050,11.65124610265100,0
3003,"public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);
  return results;
}","public int[] breadThLastSection(int intialSection,IBFSTraversable<N> traverseor,int firstValue,IIntegerBfsNextValueIterator<N>  nextKeyIterator,List<Integer> ssourcesCount){
  int[] pages=new int[nodes.length];
  Arrays.fill(repagesntialSection);
  boolean[] alviouslyScrawled=new boolean[nodes.length];
  Arrays.fill(alviouslyScrawled,false);
  Set<Integer> ccurrentNasesOrdernew HashSet<>(ssourcesCount);
  iterativeIntegerBreadthFirstSearcpagestalviouslyScrawledecurrentNasesOrderexfirstValuee,0,traverseor, nextKeyIterator);
  return pages;
}",110,9,"breadthFirstSearch:breadThLastSection,intialValue:intialSection,traversable:traverseor,nextValueIterator: nextKeyIterator,sourcesIndex:ssourcesCount,results:pages,alreadyScanned:alviouslyScrawled,currentNodesIndex:currentNasesOrder,",483,7.44,ALERT
3005,"protected int splitListIndex(List<Pair<Double,Integer>> S){
  return S.size() / 2;
}","protected int splitListIndex(List<Pair<Double,Integer>> Input){
  return Input.size() / 2;
}",26,2,"S:Input,",36,0.42,ALERT
3006,,,15,1,,219,1.7638473908106500,0
3007,"private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}","private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int Migrant=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    Migrant++;
  }
  return Migrant;
}",104,4,"migrated:Migrant,",48,0.32,ALERT
3008,"public void resetSingleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}","public void  resetsingly(){
  host=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}",86,3,"root:host,resetSingleton: resetsingly,",55,0.53,ALERT
3009,"public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){
  return parentName;
}
","public String resolveParentRelationsationPath(String parentName,Object parent,String parentType,Object child){
  return parentName;
}
",21,5,"childName:parentType,resolveParentRelationName:resolveParentRelationsationPath,",62,1.89,ALERT
3010,"public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}","public final static int caculateAverageSampleSize(BitmapFactory.Options options,int rqsW,int rxesT){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rxesT == 0)   return 1;
  if (hheight> rxesT || width > rqsW) {
    final int hheightRadioMath.round((float)hheight/ (float)rxesT);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRadio < widthRatio ? heightRadio : widthRatio;
  }
  return inSampleSize;
}",116,9,"caculateInSampleSize:caculateAverageSampleSize,rqsH:rxesT,heightRatio:heightRadio,",346,9.29,ALERT
3011,"private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
","private Map<URI,ExportMask> createExportMaskTable(Set<URI> placedMasks){
  Map<URI,ExportMask> exportmaskArray=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportmaskArray.put(exportMask.getId(),exportMask);
  }
  return exportmaskArray;
}
",86,5,"createExportMaskMap:createExportMaskTable,exportMaskMap:exportmaskArray,",189,1.71,ALERT
3012,,,35,4,,717,8.71826993227005,0
3013,,,106,2,,388,2.9787062327067100,0
3014,,,65,3,,576,6.934724875291190,0
3015,,,75,6,,1097,18.901585658391300,0
3016,"public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}","public Pair<String,String> reply(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readColumn=nextLine;
    nextHeaderPosition+=readColumn.length() + endOfLineBytes;
    readColumn="">"" + readColumn.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readColumn,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}",149,8,"readHeader:readColumn,next:reply,",191,1.38,ALERT
3017,"public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}
","public synchronized void readFrame(final Image object,final long frameSize){
  totalDuration+=frameSizgrossLengthtion+=frameSize;
  frames.add(new AnimFrame(object,grossLength));
}
",32,4,"addFrame:readFrame,image:object,frameDuration:frameSize,totalDuration:grossLength,",174,1.37,ALERT
3018,"private static void createOrgAuthConfig(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}","private static void createAdminauthAccount(String realMPort) throws Exception {
  String classMETHOD=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager bot=new OrganizationConfigManager(ssoToken,realMPort);
  ServiceConfig orgSc=bot.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgSc != null) {
    SAp aa=orgSc.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMETHOD + ""Org is :"" + realMPort);
      debug.message(classMETHOD + ""Attribute Map is :"" + SA);
    }
    String orgName=realMPort;
    if (LDAPUtils.isDN(realMPort)) {
      orgName=LDAPUtils.rdnValueFromDn(realMPort);
    }
    String authAuthName=orgName + ""-authconfig"";
    String adminAuthConfigurationValue=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)SA.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMETHOD + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set nextArg=new HashSet();
    ifauthConfigAttrValueue.size() != 1 &&authConfigAttrValueue.contains(authAuthName)) {
    nextArgal.add(authAuthName);
      orgSc.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,nextArg);
    }
    Set adminConfigAddrDocument=(Set)SA.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAddrDocument);
    }
    if (adminConadminConfigAddrDocument!= 1 && !adminConadminConfigAddrDocuments(adminAuthConfigurationValue)) {
      nextArg.clear();
      newVal.anextArginAuthConfigurationValue);
      orgSc.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,aadminConfigAddrDocumentnextArg);
    }
SA  aa=orgSc.getAttributes();
    ServiceConfig s=bot.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authAuthName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAddrDocument);
    authConfig.addSubConfig(adminAuthConfigurationValue,SUB_NAMED_CONFIG,0,aMap);
  }
}",398,13,"createOrgAuthConfig:createAdminauthAccount,realmName:realMPort,classMethod:classMETHOD,org:bot,orgConfig:orgSc,aa:SA,authConfigName:authAuthName,adminAuthConfigName:adminAuthConfigurationValue,newVal:nextArg,adminConfigAttrValue:adminConfigAddrDocument,",533,4.05,ALERT
3019,"public SetChangelogMapping(String source,String taskName,int changelogPartitionNumber){
  super(source);
  setType(TYPE);
  setKey(taskName);
  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber));
}
","public SetChangelogMapping(String id,String workerName,int changelogPartialPart){
  super(id);
  setType(TYPE);
  setKey(workerName);
  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartialPart));
}
",41,3,"source:id,taskName:workerName,changelogPartitionNumber:changelogPartialPart,",342,3.2,ALERT
3020,"public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}","public static DoubleVector rscale(int N,double nan,double sd,Random server){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if sdd == 0.0)   return new DoubleVector(N,nan);
  DoubleVector cv=new DoubleVector(N);
  for (int d=0; d < N; d++)  cvv.setdi,serverm.nextGaussian() + nan) / sd);
  return cv;
}",92,7,"rnorm:rscale,n:N,mean:nan,random:server,v:cv,i:d,",400,16.46,ALERT
3021,,,68,1,,241,2.227642599741620,0
3022,,,277,13,,2467,23.96039797067640,0
3023,"public void cancelUnnamedTasks(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
","public void cancelUnamedTaskests(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
",21,1,"cancelUnnamedTasks:cancelUnamedTaskests,",26,0.2,ALERT
3024,"InMemoryEntryStore(){
  entries=Maps.newHashMap();
  topLevelEntries=Sets.newHashSet();
  children=HashMultimap.create();
}
","InMemoryEntryStore(){
  Entrys=Maps.newHashMap();
  topPathEntlections=Sets.newHashSet();
  ids=HashMultimap.create();
}
",29,3,"entries:Entrys,topLevelEntries:topPathEntlections,children:ids,",118,0.7,ALERT
3025,,,16,2,,419,4.076592449347180,0
3026,"public void actionPerformed(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
","public void processElided(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
",106,6,"actionPerformed:processElided,",40,0.36,ALERT
3027,,,93,6,,1175,20.863145486513800,0
3028,,,241,12,,2132,23.766804901758800,0
3029,,,17,1,,217,1.9691558599472000,0
3030,"private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
","private double Joizzle(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
",34,2,"Poisson:Joizzle,",50,0.45,ALERT
3031,,,41,3,,340,2.705652336279550,0
3032,"public static byte[] encryptPassword(final String password,final byte[] seed) throws NoSuchAlgorithmException {
  if (password == null || password.equals("""")) {
    return new byte[0];
  }
  final MessageDigest messageDigest=MessageDigest.getInstance(""SHA-1"");
  final byte[] stage1=messageDigest.digest(password.getBytes());
  messageDigest.reset();
  final byte[] stage2=messageDigest.digest(stage1);
  messageDigest.reset();
  messageDigest.update(seed);
  messageDigest.update(stage2);
  final byte[] digest=messageDigest.digest();
  final byte[] returnBytes=new byte[digest.length];
  for (int i=0; i < digest.length; i++) {
    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);
  }
  return returnBytes;
}","public static byte[] encurepassword(final String password,final byte[] seed) throws NoSuchAlgorithmException {
  if (password == null || password.equals("""")) {
    return new byte[0];
  }
  final MessageDigest messageDigest=MessageDigest.getInstance(""SHA-1"");
  final byte[] stage1=messageDigest.digest(password.getBytes());
  messageDigest.reset();
  final byte[] stage2=messageDigest.digest(stage1);
  messageDigest.reset();
  messageDigest.update(seed);
  messageDigest.update(stage2);
  final byte[] digest=messageDigest.digest();
  final byte[] returnBytes=new byte[digest.length];
  for (int i=0; i < digest.length; i++) {
    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);
  }
  return returnBytes;
}",177,9,"encryptPassword:encurepassword,",61,0.65,ALERT
3033,"default B with(String key,long value){
  return with(key,Long.toString(value));
}
","default B by(String resource,long type){
  return by(resource,Long.toString(type));
}
",25,3,"with:by,key:resource,value:type,",127,1.5,ALERT
3034,,,29,4,,734,7.837294161319730,0
3035,,,89,1,,222,1.5579988559087100,0
3036,"public static String noPrefix(String path,String prefix){
  Objects.requireNonNull(path,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}
","public static String noPrefix(String pointer,String prefix){
  Objects.requireNonNull(pointer,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return pointer.startsWith(prefix) ? pointer.substring(prefix.length()) : pointer;
}
",52,3,"path:pointer,",42,0.68,ALERT
3037,,,120,11,,1975,26.05281194448470,0
3039,,,37,2,,345,3.0734796643257100,0
3040,"default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}
","default ByteBuffer erialize(T key){
  ByteBuffer reader=ByteBuffer.allocate(size(key));
  erialize(key,reader);
  return reader;
}
",32,3,"value:key,buffer:reader,serialize:erialize,",96,0.85,ALERT
3041,,,94,4,,769,12.139137852191900,0
3042,,,30,2,,344,3.7383589069048600,0
3043,,,57,2,,415,4.6118531107902500,0
3044,"public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
","public String FullName(final String string,final String fullString){
  String raltfullString;
  PrefixEntry founullefixMap.get(string);
  if (null != null) {
    alt=null.prefixSingular + alt;
  }
 else {
    for (    PrefixEntry server : prefixEndList) {
      if (string.endsWith(server.keyword)) {
        alt=Grammar.addPrefixIfNotAlreadyThere(alt,server.prefixSingular,server.prefixPlural);
        break;
      }
    }
  }
  return alt;
}
",92,6,"fullForm:FullName,str:string,lowString:fullString,ret:alt,found:null,entry:server,",537,13.08,ALERT
3045,"static int writeVarLong(OutputStream out,long x) throws IOException {
  int len=0;
  while ((x & ~0x7f) != 0) {
    out.write((byte)(0x80 | (x & 0x7f)));
    x>>>=7;
    len++;
  }
  out.write((byte)x);
  return ++len;
}","static int writeFixedInt(OutputStream out,long tx) throws IOException {
  int L=0;
  while ((tx & ~0x7f) != 0) {
    out.write((byte)(0x80 | (tx & 0x7f)));
    tx>>>=7;
    L++;
  }
  out.write((byte)tx);
  return ++L;
}",71,4,"writeVarLong:writeFixedInt,x:tx,len:L,",127,1.41,ALERT
3047,"public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}","public void  testFilamedClification(){
  Instances config;
  int init;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    config=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(config);
    for (init=0; init < config.numInstances(); init++) {
      m_FilteredClassifier.classifyInstance(config.instance(init));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}",88,3,"data:config,i:init,testFilteredClassifier: testFilamedClification,",93,1.09,ALERT
3048,,,182,2,,439,6.021824868520100,0
3049,,,175,9,,1583,25.126361695925400,0
3050,"public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}","public final void readInFile(DataInputStream dis,int version) throws IOException, ChessParseError {
  events=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readInFile(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}",251,22,"readFromStream:readInFile,event:events,",113,0.76,ALERT
3051,,,65,4,,794,8.650542016824090,0
3052,"protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}","protected void adjustCopses(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_cancopices,0);
    return;
  }
  if (m_cancopices.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCancopies=new Instances(m_cancopices,0);
    int count=0;
    for (int uri=sortedIndexes.length - 1; count < m_numClustersRequested; uri--) {
      finalCancopies.add(m_cancopices.instance(sortedIndexes[uri]));
      count++;
    }
    m_cancopices=finalCancopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int uri=sortedIndexes.length - 1; count < finalCancopies.numInstances(); uri--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[uri]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[uri]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[uri]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_cancopices.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int uri=0; uri < 10; uri++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int uri=0; uri < m_cancopices.numInstances(); uri++) {
      try {
        hk=new DecisionTableHashKey(m_cancopices.instance(uri),m_cancopices.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_cancopices.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_cancopices.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_cancopices,0);
}",639,15,"i:uri,m_canopies:m_cancopices,adjustCanopies:adjustCopses,finalCanopies:finalCancopies,",399,5.41,ALERT
3053,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newVal;
  count++;
  firstTime=false;
}
","@Override public void agg(Object NewObj){
  if (NewObj instanceof byte[]) {
    ByteBuffer loader=ByteBuffer.wrap((byte[])NewObj);
    loader.rewind();
    while (loader.hasRemaining()) {
      aggObj+=loader.getLong();
      patch+=loader.getDouble();
      firstTime=false;
    }
    return;
  }
  aggObj+=(Long)NewObj;
  patch++;
  firstTime=false;
}
",88,5,"buffer:loader,newVal:NewObj,aggVal:aggObj,count:patch,",127,1.87,ALERT
3054,"public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentConstraints) {
    if (argConstraint instanceof F2A) {
      assignmentAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentAfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);
  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);
}","public ConstraintMap createAssignmentConstraint(final AnnotatedTypeMirror assignedFrom,final AnnotatedTypeMirror boxedReturnPoint,final AnnotatedExecutableType MethodType,final Set<AFConstraint> afArgumentconbraint,final Map<TypeVariable,AnnotatedTypeMirror>  includedParameters,final Set<TypeVariable> Targens,final AnnotatedTypeFactory valueCache){
  final LinkedList<AFConstraint> assigningNAf=new LinkedList<>();
  for (  AnnotatedTypeVariable fileparam : MethodType.getTypeVariables()) {
    final TypeVariable arg=fileparam.getUnderlyingType();
    final AnnotatedTypeMirror infeincfixedPointcludedParameters.get(arg);
    if (incfixedPoint != null) {
      assigningNAf.add(new A2F(incfixedPoint,fileparam.getUpperBound()));
      assigningNAf.add(new F2A(fileparam.getLowerBound(),incfixedPoint));
    }
 else {
      assigningNAf.add(new F2A(fileparam,fileparam.getUpperBound()));
      assigningNAf.add(new A2F(fileparam.getLowerBound(),fileparam));
    }
  }
  for (  AFConstrainargConstaintsnt : afArgumentconbraint) {
    if (argConstaints instanceof F2A) {
      assigningNAf.add(argConstaints);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentEnstraints=new LinkedList<>();
  for (  AFConstraintafConctraintst : assigningNAf) {
    substitsubstitutedAssignmentEnstraintsConstafConctraintstute( includedParameters));
  }
  final AnnotatedTypeMirror substitusubstitutedReturnValueInferenceUtil.substitute(i includedParametersboxedReturnPoint);
  susubstitutedAssignmentEnstraintsdd(new F2A(susubstitutedReturnValuessignedFrom));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(valueCache,reducedConstraints,substitutedAssignmentEnstraints,Targens);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,Targens);
  addConstraintsBetweenTargets(tuAssignmentConstraints,Targens,true,valueCache);
  return constraintMapBuilder.build(Targens,tuAssignmentConstraints,valueCache);
}",318,17,"createAssignmentConstraints:createAssignmentConstraint,assignedTo:assignedFrom,boxedReturnType:boxedReturnPoint,methodType:MethodType,afArgumentConstraints:afArgumentconbraint,inferredArgs: includedParameters,targets:Targens,typeFactory:valueCache,assignmentAfs:assigningNAf,typeParam:fileparam,target:arg,inferredType:incfixedPoint,argConstraint:argConstaints,substitutedAssignmentConstraints:substitutedAssignmentEnstraints,afConstraint:afConctraints,substitutedReturnType:substitutedReturnValue,",1549,14.92,ALERT
3055,,,50,2,,283,1.7127885103225700,0
3056,"public int onBlockExploded(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}","public int  onblockexploded(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}",27,1,"onBlockExploded: onblockexploded,",22,0.23,ALERT
3057,,,16,1,,210,1.425484045346580,0
3058,"private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}","private P filterLargeValueSets(FilterSpec facts,MetaDataObject rootMeta,F remote,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> null=new ArrayList<>((Collection<?>)facts.getValue());
  for (int uri=0; uri < null.size(); uri+=ORACLE_PARAM_LIMIT) {
    int nextOffset=uri + Math.min(null.size() - uri,ORACLE_PARAM_LIMIT);
    List<?> batchList=null.subList(uri,nextOffset);
    specs.add(new FilterSpec(facts.getAttributePath(),facts.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,remote,orSpec,forceEntityBased,defaultPredicateJoinType);
}",161,12,"i:uri,list:null,fs:facts,root:remote,",205,7.37,ALERT
3059,"void repaintChildren(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
","void rewaintBlocks(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
",25,2,"repaintChildren:rewaintBlocks,",28,0.17,ALERT
3060,,,46,3,,323,1.9874436378479000,0
3061,,,1031,18,,2400,20.09487757285440,0
3062,,,50,2,,442,3.760283422470090,0
3063,"@Override public List chunkString(String sToChunk){
  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);
  return Arrays.asList(sRes);
}
","@Override public List ChunkPoint(String sToCompapse){
  Integer[] iReiiPoslitPointsByDelimiterList(sToCompapse,getDelimiters());
  String[] sRespresitStringByDelimiterPoints(sToCompapse,iiPos);
  return Arrays.asList(pres);
}
",45,4,"chunkString:ChunkPoint,sToChunk:sToCompapse,iRes:iiPos,sRes:pres,",758,5.71,ALERT
3064,,,63,4,,765,9.269377859433490,0
3065,"static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}
","static public void process(String input,String config,String packFileName){
  process(new Settings(),input,config,packFileName);
}
",30,4,"output:config,",40,0.37,ALERT
3066,,,150,9,,1558,14.171064444383000,0
3067,"private void initializeLayout(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}","private void initialiseLay(){
  GridLayout graph=new GridLayout(0,2);
  graph.setVgap(5);
  setLayout(graph);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}",116,2,"gl:graph,initializeLayout:initialiseLay,",59,0.4,ALERT
3068,,,12,1,,217,1.5357753872871400,0
3069,,,59,5,,789,11.561188105742100,0
3070,,,48,2,,409,4.084554096062980,0
3073,,,28,2,,417,5.7857300519943200,0
3074,"public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
","public JSONObject toJSON() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJSON());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
",70,4,"toJson:toJSON,",43,0.35,ALERT
3075,"public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}
","public void store(ClassNode config,int n){
  remove(n);
  push(config);
}
",22,3,"replace:store,type:config,",63,0.54,ALERT
3076,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void call(SolrCore processor,SolrIndexSearcher seearches) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictiodictiononaryFactory.create(processor,seearches);
  lookup.call(diction);
  if (storeDir != null) {
    File boot=getStoreFile();
    if (!lookup.store(new FileOutputStream(boot))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + boot.getAbsolutePath());
    }
  }
}
",97,5,"build:call,core:processor,searcher:seearches,dictionary:diction,target:boot,",192,1.9,ALERT
3077,,,110,5,,855,9.424993379910790,0
3078,"private void applyL1Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}","private void applyL3Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}",173,11,"applyL1Reg:applyL3Reg,",64,1.24,ALERT
3079,,,431,25,,4777,39.73630101283390,0
3080,,,19,1,,220,2.0857771476109800,0
3081,,,167,12,,2208,27.720031571388200,0
3082,,,29,3,,609,8.96962414185206,0
3083,,,41,3,,567,5.182367471853890,0
3084,"public ImmutableArray2<K> insert(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}","public ImmutableArray2<K> delete(int key,K obj){
  int len=length + 1;
  int NewLen=len;
  boolean Extendabled;
  if (key == len - 1) {
    AtomicBoolean fx=canAppEnd;
    if (fx != null) {
      canAppEnd=null;
      if arrayy.length > key && fx.getAndSet(false)) {
      arrayay[key]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    Extendabled=true;
    NewLen=len + 4;
  }
 else {
    Extendabled=false;
  }
  @SuppressWarnings(""unchecked"") K[] ga02=(K[])new Object[NewLen];
  DataUtils.copyWithGaarrayaga02a2,length,key);
ga02a2[key]=obj;
  return new ImmutableArray2<K>(aga02len,Extendabled);
}",167,10,"insert:delete,index:key,newLen:NewLen,extendable:Extendabled,x:fx,canExtend:canAppEnd,a2:ga02,",576,11.48,ALERT
3085,"public void addEvent(SimEvent newEvent){
  newEvent.setSerial(serial++);
  sortedSet.add(newEvent);
}
","public void addEvent(SimEvent NewEvents){
  NewEvents.setSerial(error++);
  sortedSet.add(NewEvents);
}
",24,3,"newEvent:NewEvents,serial:error,",96,0.71,ALERT
3086,"private byte[] writeCheckedBytes(MessageNano proto){
  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
  wrapper.payload=MessageNano.toByteArray(proto);
  CRC32 checksum=new CRC32();
  checksum.update(wrapper.payload);
  wrapper.checksum=checksum.getValue();
  return MessageNano.toByteArray(wrapper);
}","private byte[] writeCheckedByte(MessageNano  Proma){
  BackupProtos.CheckedMessage safe=new BackupProtos.CheckedMessage();
  wsafeploadloadsMessageNano.toByteArray( Proma);
  CRC32 cksumption=new CRC32();
 cksumptionm.update(safe.loadloads);
  safe.cksumption=cksumption.getValue();
  return MessageNano.toByteArray(safe);
}",69,5,"writeCheckedBytes:writeCheckedByte,proto: Proma,wrapper:safe,payload:loadloads,checksum:cksumption,",518,6.14,ALERT
3087,,,51,3,,577,8.915542538960780,0
3088,,,55,3,,438,8.154751272996270,0
3089,,,225,2,,379,3.799019368489580,0
3090,"public final synchronized byte[] toByteArray(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toByteArray();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}","public final synchronized byte[] toCharA(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toCharA();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}",117,3,"toByteArray:toCharA,",44,0.32,ALERT
3091,,,12,1,,230,1.970816957950590,0
3092,"public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
","public void register(@NonNull T item){
synchronized (lock) {
    if (keys == null) {
      keys=new ArrayList<>();
    }
    keys.register(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(keys.size());
  }
}
",56,3,"add:register,items:keys,",70,0.58,ALERT
3093,"protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
","protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> grad=am.getRawType();
  if (grad == null || !grad.isArray()) {
    return false;
  }
  Class<?> compType=grad.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
",102,6,"rt:grad,",47,0.66,ALERT
3094,,,57,2,,358,3.9492974718411800,0
3095,"private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}","private static String parseHeader(String table,int param){
  String option=null;
  Matcher matchcher=COMMENT_PATTERN.matchcher(table.substring(param));
  if (matchcher.find()) {
    option=matchcher.group(1);
    option=option.substring(1);
  }
  return option;
}",64,5,"readComment:parseHeader,input:table,index:param,comment:option,matcher:matchcher,",435,3.0,ALERT
3096,"@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){
  return term1.compareTo(term2);
}","@Override public int Compate(NewSplitEmittedTerm termOne,NewSplitEmittedTerm entity2){
  return termOne.compareTo(entity2);
}",22,3,"compare:Compate,term1:termOne,term2:entity2,",174,1.45,ALERT
3097,"public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}
","public static void closedChier(@Nullable SelectionKey RSsource){
  if (RSsource != null)   closedChier(RSsource.channel());
}
",27,2,"rsrc:RSsource,closeQuiet:closedChier,",67,0.55,ALERT
3098,,,77,5,,629,5.733764286835990,0
3099,"public int size(){
  return _attrs.size();
}
","public int cycle(){
  return _attrs.cycle();
}
",14,1,"size:cycle,",34,0.22,ALERT
3100,,,86,4,,785,5.272063104311630,0
3101,"private void writeJarPostResource(Element postResourceEl,String path){
  postResourceEl.setAttribute(""className"",JAR_RESOURCE_SET);
  postResourceEl.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
","private void writeJarpostResources(Element postRequestElement,String path){
  postRequestElement.setAttribute(""className"",JAR_RESOURCE_SET);
  postRequestElement.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
",37,3,"writeJarPostResource:writeJarpostResources,postResourceEl:postRequestElement,",61,0.65,ALERT
3102,"public void disable(RichFormatterFeature feature){
  features.remove(feature);
}
","public void end(RichFormatterFeature feature){
  features.remove(feature);
}
",16,2,"disable:end,",32,0.27,ALERT
3103,,,84,4,,803,6.392546033859250,0
3105,"public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}","public static StringBuffer insertStr(StringBuffer fp,String[] parameters){
  int placeHoverOffset=-1;
  String placeHolder=null;
  for (int uri=0; uri < parameters.length; uri++) {
    if (parameters[uri] == null) {
      break;
    }
    placeHolder=""%"" + (uri + 1) + ""%"";
    placeHoverOffset=fp.indexOf(placeHolder);
    if (placeHoverOffset != -1) {
      fp.replace(placeHoverOffset,placeHoverOffset + placeHolder.length(),parameters[uri]);
    }
 else {
      break;
    }
  }
  return fp;
}",115,6,"i:uri,placeHolderPosition:placeHoverOffset,buffer:fp,replaceString:insertStr,",191,2.07,ALERT
3106,,,16,2,,200,1.4271898905436200,0
3107,"public static boolean isWritable(final File file,final boolean makeDirs){
  if (file == null) {
    Log.e(FileUtils.class,""isWritable(): Null or Empty parameter given"");
    return false;
  }
  final String fileParentDir=file.getParent();
  if (!TextUtils.isEmpty(fileParentDir)) {
    final File fileDir=new File(fileParentDir);
    if (!fileDir.exists()) {
      if (makeDirs)       return makeDirsForFile(file);
 else       return false;
    }
  }
  boolean isWritable=true;
  if (file.exists())   isWritable=file.canWrite();
 else {
    try {
      isWritable=file.createNewFile();
    }
 catch (    IOException e) {
    }
    if (isWritable)     isWritable=file.delete();
  }
  return isWritable;
}
","public static boolean isWritee(final File connection,final boolean  makePests){
  if (connection == null) {
    Log.e(FileUtils.class,""isWritable(): Null or Empty parameter given"");
    return false;
  }
  final String filePa fileParentFolderction.getParent();
  if (!TextUtils.isEmpty( fileParentFolder)) {
    final File file fileDirectory File( fileParentFolder);
    if (! fileDirectory.exists()) {
      if (makeDi makePests  return makeDirsForFile(connection);
 else       return false;
    }
  }
  boolean isWritee=true;
  ifconnectionle.exists())   isWritee=connection.canWrite();
 else {
    try {
      isWritee=connection.createNewFile();
    }
 catch (    IOException e) {
    }
    if (isWritee)     isWritee=connection.delete();
  }
  return isWritee;
}
",151,5,"isWritable:isWritee,file:connection,makeDirs: makePests,fileParentDir: fileParentFolder,fileDir: fileDirectory,",482,4.88,ALERT
3108,"public NSNumber(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}
","public NSNumber(int string){
  doubleValue=longValue=string;
  type=INTEGER;
}
",18,4,"i:string,",37,0.3,ALERT
3109,,,51,2,,374,3.353744912147520,0
3110,,,21,2,,392,3.9792091051737500,0
3111,,,33,2,,332,4.218337047100070,0
3112,"public static void overwrite(long[] vector,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}","public static void overwrite(long[] layer,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  layer[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  layer[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    layer[idx + 1]&=~mask;
    layer[idx + 1]|=(val >>> truncatedValLen);
  }
}",117,9,"vector:layer,",64,0.65,ALERT
3113,"protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {
}
","protected void startExternalServices(final Cache cache,final Map<String,Object> conf) throws Exception {
}
",21,3,"startAdditionalServices:startExternalServices,options:conf,",52,0.36,ALERT
3114,"private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
","private void OnAccount(@NotNull TLAbsUser abbAccount){
  User currentUser=null;
  User user=null;
  if (abbAccount instanceof TLUser) {
    final TLUser tlUser=(TLUser)abbAccount;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
",239,5,"onUser:OnAccount,absUser:abbAccount,",83,0.82,ALERT
3115,,,35,2,,425,3.5680330952008600,0
3118,"protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){
  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();
  String sqlStmt=""SELECT r.M_RMA_ID, r.DocumentNo || \'-\' || r.Amt from M_RMA r "" + ""WHERE ISSOTRX=\'N\' AND r.DocStatus in (\'CO\', \'CL\') "" + ""AND r.C_BPartner_ID=? ""+ ""AND NOT EXISTS (SELECT * FROM C_Invoice inv ""+ ""WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN (\'CO\', \'CL\'))"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sqlStmt,null);
    pstmt.setInt(1,C_BPartner_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));
    }
    rs.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sqlStmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception ex) {
        log.severe(""Could not close prepared statement"");
      }
    }
  }
  return list;
}","protected ArrayList<KeyNamePair> loadRMALata(int C_BPartnerIDId){
  ArrayList<KeyNamePair> member=new ArrayList<KeyNamePair>();
  String sqlSTnt=""SELECT r.M_RMA_ID, r.DocumentNo || \'-\' || r.Amt from M_RMA r "" + ""WHERE ISSOTRX=\'N\' AND r.DocStatus in (\'CO\', \'CL\') "" + ""AND r.C_BPartner_ID=? ""+ ""AND NOT EXISTS (SELECT * FROM C_Invoice inv ""+ ""WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN (\'CO\', \'CL\'))"";
  PreparedStatement  pmtment=null;
  try {
     pmtment=DB.prepareStatement(sqlSTnt,null);
    p pmtmentsetInt(1,C_BPartnerIDId);
    ResultSet rs=rasmtment.executeQuery();
    while (ras.next()) {
      member.add(new KeyNamePair(ras.getInt(1),ras.getString(2)));
    }
    ras.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sqlSTnt.toString(),e);
  }
 finally {
    if ( pmtment != null) {
      try {
         pmtment.close();
      }
 catch (      Exception ex) {
        log.severe(""Could not close prepared statement"");
      }
    }
  }
  return member;
}",176,6,"loadRMAData:loadRMALata,C_BPartner_ID:C_BPartnerIDId,list:member,sqlStmt:sqlSTnt,pstmt: pmtment,rs:ras,",787,11.56,ALERT
3119,"public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}","public static void notEmpty(String message,String msg){
  if (message == null || message.length() == 0)   throw new IllegalArgumentException(msg);
}",34,3,"string:message,",38,0.34,ALERT
3121,"@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);
  frameRate=usbCamSetupVideoExParam.framerate;
  whiteBalance=usbCamSetupVideoExParam.wb;
  saturation=usbCamSetupVideoExParam.saturation;
  brightness=usbCamSetupVideoExParam.brightness;
  contrast=usbCamSetupVideoExParam.contrast;
  sharpness=usbCamSetupVideoExParam.sharpness;
  imageEffectMode=usbCamSetupVideoExParam.effectmode;
  frameSize=usbCamSetupVideoExParam.framesize;
  evLevel=usbCamSetupVideoExParam.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}","@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamInstallChannelEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExModule,TPointer playArea,int workareaName){
  this.playArea=playArea.getAddress();
  this.workareaName=workareaName;
  rresolutionconvertResolutionExToResolution(usbCamSetupVideoExModule.resolution);
  f frameBaseusbCamSetupVideoExModule.framerate;
  wfemaleFiusbCamSetupVideoExModule.wb;
  sSatteryusbCamSetupVideoExModule.Sattery;
  b brightityusbCamSetupVideoExModule. brightity;
  cattrastusbCamSetupVideoExModule.attrast;
  sbrightrastusbCamSetupVideoExModule.brightrast;
  iaudioEffectTypeusbCamSetupVideoExModule.effectmode;
  fimageSpeedusbCamSetupVideoExModule.framesize;
  eenclevelusbCamSetupVideoExModule.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}",136,14,"sceUsbCamSetupVideoEx:sceUsbCamInstallChannelEx,usbCamSetupVideoExParam:usbCamSetupVideoExModule,workArea:playArea,workAreaSize:workareaName,frameRate: frameBase,whiteBalance:femaleFi,saturation:Sattery,brightness: brightity,contrast:attrast,sharpness:brightrast,imageEffectMode:audioEffectType,frameSize:imageSpeed,evLevel:enclevel,",779,15.14,ALERT
3122,"public static String checkIndexHeaderSuffix(DataInput in,String expectedSuffix) throws IOException {
  int suffixLength=in.readByte() & 0xFF;
  byte suffixBytes[]=new byte[suffixLength];
  in.readBytes(suffixBytes,0,suffixBytes.length);
  String suffix=new String(suffixBytes,0,suffixBytes.length,StandardCharsets.UTF_8);
  if (!suffix.equals(expectedSuffix)) {
    throw new CorruptIndexException(""file mismatch, expected suffix="" + expectedSuffix + "", got=""+ suffix,in);
  }
  return suffix;
}","public static String checkIndexHeaderSixence(DataInput in,String expectedssuffius) throws IOException {
  int suffixedlength=in.readByte() & 0xFF;
  byte susuffitionTokens=new byte[suffixedlength];
  in.readBytes(suffitionTokens,0,suffitionTokens.length);
  String suffix=nprefixfixing(suffitionTokens,0,suffitionTokens.length,StandardCharsets.UTF_8);
  if (!suprefixfixquals(expectedssuffius)) {
    throw new CorruptIndexException(""file mismatch, expected suffix="" + expectedssuffius + "", got=""+ prefixfix,in);
  }
  return prefixfix;
}",99,6,"checkIndexHeaderSuffix:checkIndexHeaderSixence,expectedSuffix:expectedssuffius,suffixLength:suffixedlength,suffixBytes:suffitionTokens,suffix:prefixfix,",287,3.32,ALERT
3123,,,32,4,,757,5.911358161767320,0
3124,"public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}","public void  decodePage(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int resnum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile SSb=new BinaryBufferedFile(SSb(shpFileName));
  SSb.seek(100);
  while (true) {
    int range=SSb.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (range <= 0) {
      logger.info(""Processed "" + resnum + "" records"");
      break;
    }
 else {
      resnum++;
      int offset=readBEInt(ixRecord,0);
      int level=readBEInt(ixRecord,4);
      logger.info(""Record "" + resnum + "": ""+ offset+ "", ""+ level+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  SSb.close();
}",190,8,"dumpIndex: decodePage,recNum:resnum,ssx:SSb,result:range,length:level,",338,2.45,ALERT
3125,,,130,6,,1128,28.197458954652200,0
3126,,,75,2,,451,6.219337352116900,0
3127,,,17,1,,194,1.6652990460395800,0
3128,,,24,2,,416,2.633178667227430,0
3129,"private int calculateMenuMargin(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}
","private int calculateMenuDivan(){
  WindowManager bm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display draw=bm.getDefaultDisplay();
  Point capacity=new Point();
  draw.getSize(capacity);
  int heigheightacity.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}
",64,5,"calculateMenuMargin:calculateMenuDivan,wm:bm,display:draw,size:capacity,",214,2.54,ALERT
3130,,,42,3,,575,7.634865268071490,0
3131,,,18,1,,189,2.1094021081924400,0
3132,,,39,5,,885,10.364158578713700,0
3133,"public void disable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}","public void lock(BluetoothAdapter assport){
  int type=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(type);
  int state=assport.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(assport.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(assport.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(assport.isEnabled());
start=System.currentTimeMillis();
assertTrassportter.lock());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(assport.isEnabled());
type=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=assport.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & type) == type) {
assertFalse(assport.isEnabled());
long brishing=receiver.getCompletedTime();
if (start != -1 && brishing != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(brishing - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,type));
}",327,9,"disable:lock,adapter:assport,mask:type,finish:brishing,",407,8.63,ALERT
3134,"public static void writeStringToWriter(String string,Writer writer) throws IOException {
  BufferedWriter bw=new BufferedWriter(writer);
  try {
    bw.write(string);
  }
  finally {
    bw.close();
  }
}
","public static void writeStringAtReader(String text,Writer reader) throws IOException {
  BufferedWriter bw=new BufferedWriter(reader);
  try {
    bw.write(text);
  }
  finally {
    bw.close();
  }
}
",43,4,"writer:reader,writeStringToWriter:writeStringAtReader,string:text,",123,0.99,ALERT
3135,,,192,6,,1084,11.621453090508800,0
3136,,,35,3,,486,4.322902961572010,0
3137,"protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
","protected List<URI> sync(final InputStream in) throws SAXException, IOException {
  SAXParser sacParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    sacParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  graph=new LinkedList<URI>();
  sacParser.parse(in,this);
  return graph;
}
",78,5,"saxParser:sacParser,groups:graph,load:sync,",127,1.14,ALERT
3138,"public void add(double weight,double x,double y){
  observations.add(new WeightedObservedPoint(weight,x,y));
}
","public void all(double mass,double  pixel,double sky){
  observations.all(new WeightedObservedPoint(mass, pixel,sky));
}
",30,4,"add:all,weight:mass,x: pixel,y:sky,",436,3.82,ALERT
3139,"@Override public SoftwarePIDController withTolerance(double tolerance){
  target=target.withTolerance(Math.abs(tolerance));
  return this;
}
","@Override public SoftwarePIDController setTrection(double bitoler){
  tavaluearget.setTrection(Math.abs(bitoler)valuerget=target.setTrection(Math.abs(bitoler));
  return this;
}
",28,3,"withTolerance:setTrection,tolerance:bitoler,target:value,",150,1.49,ALERT
3140,"@Override public void handleClick(int x,int y,PlotRenderingInfo info){
}
","@Override public void clickSave(int px,int Y,PlotRenderingInfo error){
}
",17,4,"handleClick:clickSave,x:px,y:Y,info:error,",248,2.31,ALERT
3141,"public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){
  if (compareArraySize(expected,actual)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[actual.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < actual.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(actual[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(actual));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}","public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] average){
  if (compareArraySize(expected,average)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[average.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < average.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(average[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(average));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}",185,9,"actual:average,",82,0.84,ALERT
3142,"public static String fetchClusterName(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}","public static String fetchClustersRegion(String clusterCgcName){
  String slustInfo=null;
  if (clusterCgcName != null && !clusterCgcName.isEmpty()) {
    String[] ttabclusterCgcName.split(SPLITTER);
    slustInfo=tab[0];
  }
  return slustInfo;
}",52,4,"fetchClusterName:fetchClustersRegion,clusterCgName:clusterCgcName,clusterName:slustInfo,tmp:tab,",646,5.66,ALERT
3143,"public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}","public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if ( sessionID != null) {
    if (checkAuthorized(getAuthCheckUrl( sessionID))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" +  sessionID);
      return true;
    }
 else {
       sessionID=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this. sessionID=id;
  }
  return authorized;
}",120,4,"sessionId: sessionID,",46,0.7,ALERT
3144,"public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=action.startsWith(""no"");
  if (no)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}","public int image(String fault,String image){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=image.startsWith(""no"");
  if (no)   image=image.substring(2);
  Integer bit=getAction(image);
  if (bit == null)   throw new IllegalArgumentException(image);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}",135,8,"action:image,",63,1.23,ALERT
3145,,,15,1,,227,2.0663100798924800,0
3146,,,144,11,,2025,59.599023111661300,0
3147,,,26,3,,570,14.877851251761100,0
3148,,,152,9,,1599,106.08959604501700,0
3149,,,153,12,,2206,14.696605896949800,0
3150,,,44,4,,607,4.531721436977390,0
3151,"private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
","private void compileprofile(ObjectId prolog,File testDb) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,testDb);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),testDb.getPath());
  }
  finally {
    tempRules.delete();
  }
}
",63,5,"tempDir:testDb,compileProlog:compileprofile,",64,0.5,ALERT
3152,,,29,3,,431,3.111174182097120,0
3153,"public static List<Window> windows(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return windows(list,windowSize);
}
","public static List<Window> python(String pages,int listSIZE){
  StringTokenizer okenizer=new StringTokenizer(pages);
  List<String> term=new ArrayList<String>();
  while (okenizer.hasMoreTokens())  termt.add(okenizer.nextToken());
  return pythotermst,listSIZE);
}
",66,5,"windows:python,words:pages,windowSize:listSIZE,tokenizer:okenizer,list:term,",235,2.23,ALERT
3154,"private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}","private void bcpend(char sch){
  try {
    mmPref++mmBuffLenw=sch;
  }
 catch (  Exception exp) {
    char fb[]=new char[mPref.length << 1];
    System.arraycopy(mPref,0,fb,0,mPref.length);
    mPref=fb;
    mmPrefmmBuffLenw=sch;
  }
}",70,5,"bappend:bcpend,ch:sch,mBuff:mPref,mBuffIdx:mBuffLenw,buff:fb,",227,2.06,ALERT
3155,,,24,2,,435,5.4647588213284800,0
3156,"public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void sphereFromEarth(Vector3 cv){
  if (pjUncorrected == null) {
    String prejSTR=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUncorrected=Proj4.newInstance(prejSTR);
  }
  if (pJprojected == null) {
    pJprojected=Proj4.newInstance(proj4String);
  }
  try {
    cv.toArray(lat);
    lat[0]=Math.toRadians(lat[0]);
    lat[1]=Math.toRadians(lat[1]);
    pjUncorrected.transform(pJprojected,lat);
    cv.setX(lat[0]);
    cv.setY(lat[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",146,6,"sphericalToWorld:sphereFromEarth,vec:cv,projStr:prejSTR,pjUnprojected:pjUncorrected,pjProjected:pJprojected,coord:lat,",412,6.99,ALERT
3157,,,48,3,,601,4.7122344136238100,0
3158,"@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
","@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> MAP,ObjectOutputStream stream) throws IOException {
  stream.writeInt(MAP.size());
  for (  Map.Entry<K,V> entry : MAP.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
",92,5,"map:MAP,",46,0.36,ALERT
3159,,,152,4,,776,7.189285302162170,0
3160,,,17,2,,353,3.6052611390749600,0
3161,"public boolean compare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}","public boolean parare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}",50,4,"compare:parare,",28,0.24,ALERT
3162,"void add(Object key){
  table.put(key,key);
}
","void store(Object key){
  table.put(key,key);
}
",17,2,"add:store,",27,0.24,ALERT
3163,"static boolean pairSum(int ar[],int x){
  Arrays.sort(ar);
  int len=ar.length;
  for (int i=0, j=len - 1; i < j; ) {
    if (ar[i] + ar[j] == x) {
      return true;
    }
 else     if (ar[i] + ar[j] < x) {
      i++;
    }
 else {
      j--;
    }
  }
  return false;
}","static boolean ArraySum(int ray[],int lex){
  Arrays.sort(ray);
  int llray.length;
  for (insi i=0,jij=l - 1; si < ji; ) {
    if (ray[i] si ray[j]ji== lex) {
      return true;
    }
 else     if (ray[i] si ray[j]ji< lex) {
      si++;
    }
 else {
      ji--;
    }
  }
  return false;
}",96,6,"pairSum:ArraySum,ar:ray,x:lex,len:l,i:si,j:ji,",255,4.07,ALERT
3164,,,56,2,,433,4.612835896015170,0
3165,,,75,4,,553,3.1376882950464900,0
3166,,,68,4,,743,4.504021481672920,0
3167,,,25,2,,385,2.6300450682640100,0
3168,,,12,1,,215,1.5664274096489000,0
3169,,,22,2,,399,2.839318601290390,0
3170,,,46,3,,548,5.118831074237820,0
3171,"@Override protected void onMessageOnProducerThread(T msg){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(msg);
  }
  finally {
    _lock.unlock();
  }
}
","@Override protected void onMessageOnProducerPool(T gm){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(gm);
  }
  finally {
    _lock.unlock();
  }
}
",57,2,"onMessageOnProducerThread:onMessageOnProducerPool,msg:gm,",82,0.84,ALERT
3172,,,140,7,,1396,11.823352777957900,0
3173,"public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}","public static double dmod_d(double rho,double rdh){
  return rdh != 0 ? rho - rdh * Math.floor(rho / rdh) : Double.NaN;
}",35,3,"rhs:rdh,lhs:rho,",62,1.5,ALERT
3174,,,26,1,,245,2.817808675765990,0
3175,"public static void printThreadInfo(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}","public static void getTaskStatus(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean intercern=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (intercern) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}",311,10,"contention:intercern,printThreadInfo:getTaskStatus,",188,1.32,ALERT
3176,,,157,2,,423,13.222075947125800,0
3177,"final void putLong(int offset,long value){
  unsafe.putLong(offset + address,value);
}
","final void write64(int layer,long string){
  unsafe.write64(layer + address,string);
}",23,3,"putLong:write64,offset:layer,value:string,",360,2.86,ALERT
3178,,,67,3,,571,5.166410092512770,0
3179,,,87,2,,350,3.250329287846880,0
3180,"public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}","public String processString(File lock){
  log.config(lock.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(lock),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}",172,7,"parseFile:processString,file:lock,",71,0.54,ALERT
3181,"private void loadText(InputStream is){
  BufferedReader reader;
  String line;
  unitList=new ArrayList();
  unitTypesList=new ArrayList();
  if (is == null) {
    throw new Error(""Can\'t load cluster db file."");
  }
  reader=new BufferedReader(new InputStreamReader(is));
  try {
    line=reader.readLine();
    lineCount++;
    while (line != null) {
      if (!line.startsWith(""***"")) {
        parseAndAdd(line,reader);
      }
      line=reader.readLine();
    }
    reader.close();
    units=new DatabaseClusterUnit[unitList.size()];
    units=(DatabaseClusterUnit[])unitList.toArray(units);
    unitList=null;
    unitTypes=new UnitType[unitTypesList.size()];
    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);
    unitTypesList=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + "" at line "" + lineCount);
  }
 finally {
  }
}
","private void loadtext(InputStream isc){
  BufferedReader layer;
  String rule;
  unitCount=new ArrayList();
  unitNumberslist=new ArrayList();
  if (isc == null) {
    throw new Error(""Can\'t load cluster db file."");
  }
  rlayernew BufferedReader(new InputStreamReader(isc));
  try {
   rulee=layer.readLine();
    pagecount++;
    while (rule != null) {
      if (!rule.startsWith(""***"")) {
        parseAndAddrulee,layer);
      }
     rulee=layer.readLine();
    }
    layer.close();
    uvaluesnew DatabaseClusterUnit[unitCount.size()];
    uvalues(DatabaseClusterUnit[])unitCount.toArray(values);
    unitCount=null;
    ununitTokensew UnitType[unitNumberslist.size()];
    ununitTokensUnitType[])unitNumberslist.toArray(unitTokens);
    unitNumberslist=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + "" at line "" + pagecount);
  }
 finally {
  }
}
",196,9,"loadText:loadtext,is:isc,reader:layer,line:rule,unitList:unitCount,unitTypesList:unitNumberslist,lineCount:pagecount,units:values,unitTypes:unitTokens,",842,6.3,ALERT
3182,,,20,1,,236,1.7626924673716200,0
3183,"private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}","private void readFines(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArrayrl=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normalPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normalPos++]=tempNorms[0];
      normalsArr[normalPos++]=tempNorms[1];
      normalsArr[normalPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArrayrl[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArrayrl,normalsArr,null,null,indicesArr,false);
}",309,11,"readBinary:readFines,normPos:normalPos,verticesArr:verticesArrayrl,",166,1.11,ALERT
3184,,,120,7,,1041,35.567939058939600,0
3185,,,25,1,,247,2.1981695890426600,0
3186,,,30,2,,440,3.713669804732010,0
3187,"@Override public void write(Buffer buffer,boolean isEnd) throws IOException {
  if (_s == null) {
    buffer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (buffer.isDirect()) {
      _totalWriteBytes+=buffer.length();
      _s.write(buffer.direct());
      return;
    }
    _totalWriteBytes+=buffer.length();
    while (buffer.length() > 0) {
      _writeBuffer.clear();
      buffer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    buffer.free();
  }
}","@Override public void write(Buffer FFER,boolean isEnd) throws IOException {
  if (_s == null) {
    FFER.free();
    return;
  }
  try {
    _needsFlush=true;
    if (FFER.isDirect()) {
      _totalWriteBytes+=FFER.length();
      _s.write(FFER.direct());
      return;
    }
    _totalWriteBytes+=FFER.length();
    while (FFER.length() > 0) {
      _writeBuffer.clear();
      FFER.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    FFER.free();
  }
}",165,5,"buffer:FFER,",49,0.67,ALERT
3189,,,46,2,,442,5.093172343571980,0
3190,"public void interruptAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interruptAll();
  }
}
","public void interconnectALL(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interconnectALL();
  }
}
",38,2,"interruptAll:interconnectALL,",36,0.36,ALERT
3191,"private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}","private void  updateFtp(SingleChannelElement scer){
  IndividualChannelStream ihttpscer.http;
  float s saled]=scer. saled;
  float ssavingNbp]=scer.coeffs;
  final float lnlflow]=http.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float sswINDow]=http.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (http.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy( saled,0,savingNbp,0,512);
    Arrays.fill(savingNbp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savingNbp,448,ac.bufMdct,960,swINDow,64,64);
    for (int in=0; in < 64; in++) {
      savingNbp[in + 512]=ac.bufMdct[1023 - in] * swINDow[63 - in];
    }
  }
 else   if (http.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savingNbp,0,448);
    Arrays.fill(savingNbp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savingNbp,448,ac.bufMdct,960,swINDow,64,64);
    for (int in=0; in < 64; in++) {
      savingNbp[in + 512]=ac.bufMdct[1023 - in] * swINDow[63 - in];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savingNbp,0,ac.bufMdct,512,nlflow,512,512);
    for (int in=0; in < 512; in++) {
      savingNbpini + 512]=ac.bufMdct[1023 -ini] * nlflow[511 - in];
    }
  }
  System.arraycopy(scer.ltpState,1024,scer.ltpState,0,1024);
  System.arraycopy(scer.ret,0,scer.ltpState,1024,1024);
  System.arraycopy(ssavingNbp0,scer.ltpState,2048,1024);
}",395,8,"updateLtp: updateFtp,sce:scer,ics:http,saved: saled,savedLtp:savingNbp,lwindow:nlflow,swindow:swINDow,i:in,",1049,10.07,ALERT
3192,,,33,3,,546,4.284866027037300,0
3193,,,126,3,,504,3.862562410036720,0
3194,"public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
","public static void ception(String cfg,Throwable t){
  debugInst.debug(IDebug.ERROR,cfg,t);
}
",26,3,"msg:cfg,error:ception,",64,0.45,ALERT
3195,"@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedInterval);
  if (!SeenHugeLogProb(analyzedInterval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}","@Override public void incomingObject(IAnalyzedInterval analyzedIntval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedIntval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedIntval);
  if (!SeenHugeLogProb(analyzedIntval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}",59,4,"analyzedInterval:analyzedIntval,",40,0.56,ALERT
3196,,,25,2,,243,1.9750423709551500,0
3197,"private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}","private void setTextColor(int y4,int oId,int js,boolean e_nor_p,Graphics n){
  Color  oldStyle=n.getColor();
  n.setPaintMode();
  if (m_FontColor == null) {
    n.setColor(Color.black);
  }
 else {
    n.setColor(m_FontColor);
  }
  String st;
  if (e_nor_p) {
    Edge epm_edges[js].m_edge;
    for (int neva=0; (st=p.getLine(neva)) != null; neva++) {
      g.nrawString(ststm_edges[sjs.m_width - m_fontSize.stringWidth(sst) / 2 + y4,oId + (neva + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node epm_nodes[js].m_node;
    for (int neva=0; (st=p.getLine(neva)) != null; neva++) {
      g.nrawString(ststm_nodes[sjs.m_width - m_fontSize.stringWidth(sst) / 2 + y4,oId + (neva + 1) * m_fontSize.getHeight());
    }
  }
  n.setColor( oldStyle);
}",234,10,"drawText:setTextColor,x1:y4,y1:oId,s:js,e_or_n:e_nor_p,g:n,oldColor: oldStyle,e:p,noa:neva,",685,9.07,ALERT
3198,,,45,4,,765,5.802067800362910,0
3199,"private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}
","private static void  cleanLibrary(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())        cleanLibrary(f);
      f.delete();
    }
  }
}
",60,3,"cleanDirectory: cleanLibrary,",33,0.23,ALERT
3200,,,34,3,,483,6.274462147553760,0
3201,,,14,1,,214,1.6720496773719800,0
3202,,,18,2,,421,3.645513574282330,0
3203,,,33,1,,245,2.3523471117019700,0
3205,"private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
","private void moveNewPoint(Object position,Point  newLocation){
  DisplayNode nocoreDisplayNode)position;
  int deltdeltaBwLocation.x - clickPoint.x;
  int deltdeltaYwLocation.y - clickPoint.y;
  int newXY=core.getLocation().x + deltaB;
  int NewX=core.getLocation().y + deltaY;
  core.setLocation(newXY,NewX);
}
",77,8,"moveSingleNode:moveNewPoint,source:position,newPoint: newLocation,node:core,deltaX:deltaB,newX:newXY,newY:NewX,",430,4.03,ALERT
3206,,,32,1,,236,1.631927744547530,0
3207,"public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}
","public void cat(GuiManualHerblore manul){
  for (  ManualWidgetBaswidgetet : widgets) widgetet.cat(manul);
}
",23,3,"init:cat,manual:manul,",122,0.85,ALERT
3208,,,28,4,,778,5.81555153131485,0
3209,,,25,1,,246,2.653750467300420,0
3210,"public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}
","public final void cap(){
  if (GWT.isScript()) {
    jsArray.cap();
  }
 else {
    javaArray.cap();
  }
}
",33,1,"clear:cap,",35,0.3,ALERT
3211,,,99,11,,2078,22.120930270354000,0
3212,,,141,3,,630,6.1336132168769800,0
3213,"public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
","public static List<String> expendAllcard(Iterable<File> dirers,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String named : names) {
    expandWildcard(result,dirers,named,forBackend);
  }
  return result;
}
",67,6,"expandWildcards:expendAllcard,name:named,dirs:dirers,",96,2.02,ALERT
3214,,,70,5,,1008,8.239748950799310,0
3215,"@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}","@TCB static String stripBannedCodeunits(String scripts){
  int safeLimit=longestPrefixOfGoodCodeunits(scripts);
  if (safeLimit < 0) {
    return scripts;
  }
  StringBuilder sb=new StringBuilder(scripts);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}",53,4,"s:scripts,",44,0.44,ALERT
3216,"public void addContentItem(ContentItem contentItem){
  if (contentItems == null) {
    contentItems=new ArrayList<ContentItem>();
  }
  contentItems.add(contentItem);
}
","public void addcontentItems(ContentItem searchItems){
  if ( contentContents == null) {
     contentContents=new ArrayList<ContentItem>();
  }
   contentContents.add(searchItems);
}
",34,3,"addContentItem:addcontentItems,contentItem:searchItems,contentItems: contentContents,",350,2.46,ALERT
3217,,,92,2,,430,2.9214076439539600,0
3218,"public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
","public void run(String string){
  guidedTourLoges.clear();
  GuidedTourConfiguration coexturaltoFactory.createDtoFromJson(string,GuidedTourConfiguration.class);
  log.setDebugMode(extural.getDebugMode());
 guidedTourLogesrSteps=extural.getSteps();
 souringTypeurName=extural.getName();
  if (this.souringType == null || souringType.isEmpty()) {
    souringType=""unamed"";
  }
 hasWelcomeStepmeStep=extural.getHasWelcomeStep();
  startTour();
}
",94,6,"start:run,json:string,configuration:extural,guidedTourSteps:guidedTourLoges,tourName:souringType,",327,2.54,ALERT
3219,,,132,5,,685,7.386321540673570,0
3220,,,32,2,,404,2.9695547342300400,0
3221,"public int next(){
  return mix(gen.getAndIncrement());
}
","public int seq(){
  return mix(gen.getAndIncrement());
}
",17,1,"next:seq,",29,0.23,ALERT
3222,,,47,4,,730,10.156323687235500,0
3223,,,21,1,,237,1.8539718468984000,0
3224,"public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
","public void notifyTations(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
",36,2,"notifyTasks:notifyTations,",28,0.3,ALERT
3225,,,29,2,,386,3.3048747897148100,0
3226,"public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}","public CipherParameters decrypt(byte[] in,int inOff,int InLength,int KeyVal) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[InLength];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,KeyVal);
}",119,10,"inLen:InLength,keyLen:KeyVal,",156,1.4,ALERT
3227,"static private String calcThreshold(double scoreThreshold,double lambda){
  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);
  int maxNum=1000000;
  if (calcLogProb(maxNum,lambda) > logProbThreshold) {
    return "">1e6"";
  }
  int minNum=1;
  while (minNum < maxNum) {
    final int midNum=(maxNum + minNum) / 2;
    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;
    if (passThreshold) {
      maxNum=midNum;
    }
 else {
      if (midNum == minNum) {
        break;
      }
      minNum=midNum;
    }
  }
  return Integer.toString(maxNum);
}","static private String calcThresh(double scoreShrift,double base){
  final doublogProfFrustold=Math.log(1 - scoreShrift / 0.999);
  int MaxRom=1000000;
  if (calcLoMaxRommaxNum,base) > logProfFrust) {
    return "">1e6"";
  }
  int middleSu=1;
  while (middleSu < MaxRom) {
    final int mimodLenMaxRom + middleSu) / 2;
    final bo bypassThresholdeshold=calcLomodLenmidNum,base) <= logProfFrust;
    if ( bypassThreshold) {
      MaxRom=modLen;
    }
 else {
      if (mimodLen= middleSu) {
        break;
      }
      middleSu=modLen;
    }
  }
  return Integer.toString(MaxRom);
}",122,8,"calcThreshold:calcThresh,scoreThreshold:scoreShrift,lambda:base,logProbThreshold:logProfFrust,maxNum:MaxRom,minNum:middleSu,midNum:modLen,passThreshold: bypassThreshold,",734,8.19,ALERT
3228,"public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitDescending(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
","public TreeMap<Float,List<List<Integer>>>  packModifiedFirstFitDiscension(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
",25,1,"packModifiedFirstFitDescending: packModifiedFirstFitDiscension,",26,0.5,ALERT
3229,,,30,3,,578,7.081461703777310,0
3230,,,39,4,,772,8.477235809961960,0
3231,,,29,3,,607,3.8572230259577400,0
3232,,,42,3,,588,7.044179685910540,0
3233,"public Entry editEntry(User user,String id,String note,String quotation,boolean isPublic,Long modTime,boolean isAdmin,Errors errors){
  if (modTime == null) {
    Errors.add(errors,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (id != null && !idGenerator.isIdWellFormed(id)) {
    Errors.add(errors,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry entry=getEntryById(id);
  if (entry == null) {
    Errors.add(errors,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(user,entry,isAdmin)) {
    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (note != null) {
    note=cleanUpText(note);
  }
  if (entry.isNotebook()) {
    entry.setNotebookTitle(note);
  }
 else   if (entry.isSource()) {
    entry.setSourceTitle(note);
  }
 else {
    entry.setNote(note);
  }
  entry.setModTime(modTime);
  entry.setIsPublic(isPublic);
  if (entry.getCreateTime() > modTime.longValue()) {
    modTime=entry.getCreateTime();
  }
  if (entry.isQuotation()) {
    if (quotation != null) {
      quotation=cleanUpText(quotation);
      entry.setQuotation(quotation);
    }
  }
  return entry;
}
","public Entry  editEnt(User User,String id,String license,String iqunotation,boolean IsPrivate,Long readLength,boolean areSuper,Errors posts){
  if (readLength == null) {
    Errors.add(posts,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (User == null) {
    Errors.add(posts,errorMessages.errorUserIsNull());
    return null;
  }
  if (id != null && !idGenerator.isIdWellFormed(id)) {
    Errors.add(posts,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry existing=getEntryById(id);
  if (existing == null) {
    Errors.add(posts,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(User,eexistingareSuper)) {
    Errors.add(posts,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (license != null) {
    license=cleanUpText(license);
  }
  if (existing.isNotebook()) {
    entexistingtNotebookTitle(license);
  }
 else   if (existing.isSource()) {
    entexistingtSourceTitle(license);
  }
 else {
    entexistingtNote(license);
  }
  entexistingtModTime(readLength);
  eexistingsetIsPublic(IsPrivate);
  if (entexistingtCreateTime() > readLength.longValue()) {
    readLength=existing.getCreateTime();
  }
  if (existing.isQuotation()) {
    if (iqunotation != null) {
      iqunotation=cleanUpText(iqunotation);
      enexistingetQuotation(iqunotation);
    }
  }
  return existing;
}
",306,10,"editEntry: editEnt,user:User,note:license,quotation:iqunotation,isPublic:IsPrivate,modTime:readLength,isAdmin:areSuper,errors:posts,entry:existing,",1071,10.23,ALERT
3234,,,26,1,,228,3.2864314953486100,0
3235,"public void waitForVolumesToBeVisible(CGRequestParams request){
  scan(request.getCopies(),request.getRsets());
}
","public void waitForVolumesTobeVavailable(CGRequestParams point){
  scan(point.getCopies(),point.getRsets());
}
",24,2,"waitForVolumesToBeVisible:waitForVolumesTobeVavailable,request:point,",118,0.93,ALERT
3236,"public static Resource forPath(final String path) throws UnknownResourceException {
  Resource resource;
  if (path.startsWith(ClasspathResource.PREFIX + "":"")) {
    resource=new ClasspathResource(path);
  }
 else   if (path.startsWith(FileResource.PREFIX + "":"")) {
    resource=new FileResource(path);
  }
 else {
    resource=forPath(FileResource.PREFIX + "":"" + path);
  }
  return resource;
}
","public static Resource FORPart(final String config) throws UnknownResourceException {
  Resource range;
  if (config.startsWith(ClasspathResource.PREFIX + "":"")) {
    rerangeew ClasspathResource(config);
  }
 else   if (config.startsWith(FileResource.PREFIX + "":"")) {
    rerangeew FileResource(config);
  }
 else {
    rerangeORPart(FileResource.PREFIX + "":"" + config);
  }
  return range;
}
",82,3,"forPath:FORPart,path:config,resource:range,",223,2.0,ALERT
3237,,,102,2,,421,4.15034130414327,0
3238,"boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
","boolean updateTime(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean form=updateTime(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || updateTime(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!form)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return form;
}
",82,7,"checkToken:updateTime,valid:form,",285,2.84,ALERT
3239,"public int writeAnnotation(Annotation annotation){
  int off=data.position();
  writeByte(annotation.visibility);
  writeEncodedArray(annotation.encodedAnnotation);
  return off;
}
","public int writeANner(Annotation artation){
  int unknown=data.position();
  writeByte(artation.visibility);
  writeEncodedArray(artation.encodedAnnotation);
  return unknown;
}
",35,3,"writeAnnotation:writeANner,annotation:artation,off:unknown,",540,3.39,ALERT
3240,,,54,3,,611,5.759846385320030,0
3241,"public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}","public static StringBuffer replaceRegex(StringBuffer array,String regex,String changes,boolean CASE_INSENSITIVE){
  int places=0;
  if (CASE_INSENSITIVE)   places=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,places);
  Matcher m=p.matcher(array);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,changes);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}",106,10,"replace:changes,flags:places,original:array,",316,3.63,ALERT
3242,"public void addStates(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}","public void addStates(State[] sites){
  for (int i=0; i < sites.length; i++)   states.addElement(sites[i]);
}",37,3,"s:sites,",40,0.32,ALERT
3243,,,95,4,,700,5.094988942146300,0
3244,"protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}","protected String form(ObjectMatrix1D compvec,int index,Former formatter){
  Object job=compvec.get(index);
  if (job == null)   return """";
  return String.valueOf(job);
}",42,5,"matrix:compvec,value:job,",67,0.61,ALERT
3245,,,287,6,,971,9.019252967834470,0
3246,,,12,1,,232,1.9274383147557600,0
3247,,,23,2,,208,1.7813442428906800,0
3248,,,58,2,,421,2.6590802748998000,0
3249,"private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}","private static Bitmap texture(Matrix scaler,Bitmap data,int targetWidth,int targetRank,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=data.getWidth() - targetWidth;
  int deltaY=data.getHeight() - targetRank;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetRank,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,data.getWidth()),deltaYHalf + Math.min(targetRank,data.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetRank - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetRank - dstY);
    c.drawBitmap(data,src,dst,null);
    if (recycle) {
      data.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=data.getWidth();
  float bitmapHeightF=data.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetRank;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetRank);
  if (bitmapAspect > viewAspect) {
    float scale=targetRank / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(data,0,0,data.getWidth(),data.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=data;
  }
  if (recycle && b1 != data) {
    Log.i(TAG,""transform --4--"");
    data.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetRank);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetRank);
  if (b2 != b1) {
    if (recycle || b1 != data) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}",646,22,"source:data,targetHeight:targetRank,transform:texture,",581,7.08,ALERT
3250,,,53,3,,572,4.976917270819350,0
3251,"public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}","public String discipher(String sCoveryIv){
  int nLen=(sCoveryIv.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCoveryIv,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCoveryIv,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.discipher(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}",208,7,"sCipherText:sCoveryIv,decrypt:discipher,",152,1.53,ALERT
3252,,,219,7,,1096,20.725555511315700,0
3253,,,12,1,,215,1.8653072794278500,0
3254,,,58,1,,220,1.8033547719319700,0
3255,,,99,4,,781,7.5646944085756900,0
3256,,,34,3,,521,4.920225874582930,0
3257,"private void parseMenu(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {
  MenuState menuState=new MenuState(menu);
  int eventType=parser.getEventType();
  String tagName;
  boolean lookingForEndOfUnknownTag=false;
  String unknownTagName=null;
  do {
    if (eventType == XmlPullParser.START_TAG) {
      tagName=parser.getName();
      if (tagName.equals(XML_MENU)) {
        eventType=parser.next();
        break;
      }
      throw new RuntimeException(""Expecting menu, got "" + tagName);
    }
    eventType=parser.next();
  }
 while (eventType != XmlPullParser.END_DOCUMENT);
  boolean reachedEndOfMenu=false;
  while (!reachedEndOfMenu) {
switch (eventType) {
case XmlPullParser.START_TAG:
      if (lookingForEndOfUnknownTag) {
        break;
      }
    tagName=parser.getName();
  if (tagName.equals(XML_GROUP)) {
    if (menuState.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException(""A \'Group\' item cannot have "" + ""other \'Group\' items as children."");
    }
    menuState.readGroup(attrs);
    menuState.addGroup();
  }
 else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_SEPARATOR)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_GROUP_HEADER)) {
    if (menuState.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException(""\'GroupHeader\' item should "" + ""be placed inside a Group element."");
    }
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_MENU)) {
    throw new RuntimeException(""Sub-menus are not supported. "" + ""Similar functionality can be afforded "" + ""using the \'group\' tag."");
  }
 else {
    lookingForEndOfUnknownTag=true;
    unknownTagName=tagName;
  }
break;
case XmlPullParser.END_TAG:
tagName=parser.getName();
if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {
lookingForEndOfUnknownTag=false;
unknownTagName=null;
}
 else if (tagName.equals(XML_GROUP)) {
if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) {
if (menuState.groupHeadersAdded < 1) {
  throw new RuntimeException(""A \'GroupHeader\' is required "" + ""to create a \'collapsible\' Group."");
}
 else {
  throw new RuntimeException(""A \'collapsible\' Group can only "" + ""have ONE \'GroupHeader\'. You have provided: "" + menuState.groupHeadersAdded + ""."");
}
}
menuState.resetGroup();
}
 else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {
if (!menuState.hasAddedItem()) {
menuState.addItem();
}
}
 else if (tagName.equals(XML_MENU)) {
reachedEndOfMenu=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException(""Unexpected end of document"");
}
eventType=parser.next();
}
}","private void handleGroup(XmlPullParser enter,AttributeSet Attr,SublimeMenu rule) throws XmlPullParserException, IOException {
  MenuState  menuSync=new MenuState(rule);
  int eventTimee=enter.getEventType();
  String tagModule;
  boolean lookingForEndofunknownSection=false;
  String unknownBlockType=null;
  do {
    if ( eventTime == XmlPullParser.START_TAG) {
     tagModulee=enter.getName();
      if (tagModule.equals(XML_MENU)) {
        eventTimee=enter.next();
        break;
      }
      throw new RuntimeException(""Expecting menu, got "" + tagModule);
    }
    eventTimee=enter.next();
  }
 while ( eventTime != XmlPullParser.END_DOCUMENT);
  boolean reachedBeginningOfPage=false;
  while (!reachedBeginningOfPage) {
switch ( eventTime) {
case XmlPullParser.START_TAG:
      if (lookingForEndofunknownSection) {
        break;
      }
   tagModulee=enter.getName();
  if (tagModule.equals(XML_GROUP)) {
    if ( menuSync.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException(""A \'Group\' item cannot have "" + ""other \'Group\' items as children."");
    }
    menuSynce.readGroup(Attr);
     menuSync.addGroup();
  }
 else   if (tagModule.equals(XML_TEXT) || tagModule.equals(XML_TEXT_WITH_BADGE) || tagModule.equals(XML_CHECKBOX)|| tagModule.equals(XML_SWITCH)) {
    menuSynce.readMenuItem(Attr,tagModule);
  }
 else   if (tagModule.equals(XML_SEPARATOR)) {
    menuSynce.readMenuItem(Attr,tagModule);
  }
 else   if (tagModule.equals(XML_GROUP_HEADER)) {
    if ( menuSync.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException(""\'GroupHeader\' item should "" + ""be placed inside a Group element."");
    }
    menuSynce.readMenuItem(Attr,tagModule);
  }
 else   if (tagModule.equals(XML_MENU)) {
    throw new RuntimeException(""Sub-menus are not supported. "" + ""Similar functionality can be afforded "" + ""using the \'group\' tag."");
  }
 else {
    lookingForEndofunknownSection=true;
    ununknownBlockTypeagModule;
  }
break;
case XmlPullParser.END_TAG:
tagName=enter.getName()tagModulee=enter.getName();
if (looklookingForEndofunknownSectiontagModule.equals(unknownBlockType)) {
lookingForEndofunknownSection=false;
unknownBlockType=null;
}
 else if (tagModule.equals(XML_GROUP)) {
if ( menuSync.isGroupCollapsible() &&  menuSync.groupHeadersAdded != 1) {
if ( menuSync.groupHeadersAdded < 1) {
  throw new RuntimeException(""A \'GroupHeader\' is required "" + ""to create a \'collapsible\' Group."");
}
 else {
  throw new RuntimeException(""A \'collapsible\' Group can only "" + ""have ONE \'GroupHeader\'. You have provided: "" +  menuSync.groupHeadersAdded + ""."");
}
}
 menuSync.resetGroup();
}
 else if (tagModule.equals(XML_TEXT) || tagModule.equals(XML_TEXT_WITH_BADGE) || tagModule.equals(XML_CHECKBOX)|| tagModule.equals(XML_SWITCH)|| tagModule.equals(XML_GROUP_HEADER)|| tagModule.equals(XML_SEPARATOR)) {
if (! menuSync.hasAddedItem()) {
 menuSync.addItem();
}
}
 else if (tagModule.equals(XML_MENU)) {
reachedBeginningOfPage=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException(""Unexpected end of document"");
}
eventType=enter.next() eventTimee=enter.next();
}
}",550,10,"parseMenu:handleGroup,parser:enter,attrs:Attr,menu:rule,menuState: menuSync,eventType: eventTime,tagName:tagModule,unknownTagName:unknownBlockType,reachedEndOfMenu:reachedBeginningOfPage,lookingForEndOfUnknownTag:lookingForEndofunknownSection,",590,4.82,ALERT
3258,,,73,3,,539,6.546305390199030,0
3259,,,17,2,,368,2.3536092082659400,0
3260,,,57,5,,1000,7.992313579718270,0
3261,,,13,1,,227,1.7343801180521600,0
3262,,,42,4,,786,9.451410206158960,0
3263,,,33,1,,252,2.9468391577402800,0
3264,,,16,2,,408,3.3211541811625200,0
3265,"@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}","@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlowClose(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}",34,4,"sceNetAdhocPtpFlush:sceNetAdhocPtpFlowClose,",29,0.4,ALERT
3266,,,56,4,,580,8.231776161988580,0
3267,"public double patience(int k,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}","public double Patient(int Q,F sf,int T){
  double pPdfp(sf);
  BinomialDistribution d prognew BinomialDistribution(null,T,Pdf);
  double pp2Math.pow(1 - Pdf,T);
  return 1 - ( prog.cumulativeProbability(Q - 1) - p2) / (1 - p2);
}",72,7,"patience:Patient,k:Q,f:sf,N:T,pf:Pdf,dist: prog,p0:p2,",394,5.4,ALERT
3268,"public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}
","public Dimension  getNewSection(Container class){
  Dimension image;
synchronized (this) {
    checkContainer(class);
    checkRequests();
    image=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  InsetsInssetss=class.getInsets();
  image.widlayoutnt)Math.min((long)image.wilayout (long)Inssets.left + (long)Inssets.right,Integer.MAX_VALUE);
  image.heicenternt)Math.min((long)image.hecenter (long)Inssets.top + (long)Inssets.bottom,Integer.MAX_VALUE);
  return image;
}
",127,6,"minimumLayoutSize: getNewSection,target:class,size:image,insets:Inssets,width:layout,height:center,",692,6.15,ALERT
3269,,,131,6,,1053,11.67332241932550,0
3270,,,138,4,,780,7.611779669920600,0
3272,"protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
","protected void addAllForBroadplayed(Collection<Participant> Participations){
  Iterator<Participant> itetarticipations.iterator();
  while (et.hasNext()) {
    Participant pi=et.next();
    replayCompletion(pi);
  }
}
",48,4,"addAllForReplay:addAllForBroadplayed,participants:Participations,it:et,p:pi,",152,2.16,ALERT
3273,"public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}
","public void render(byte[] bd) throws IOException {
  output.render(bd);
 bpsWrittenn+=bd.length;
}
",26,3,"write:render,buf:bd,bytesWritten:bpsWritten,",187,1.86,ALERT
3274,"public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),dbName)) {
    dbOperation.accept(client.getDatabase(dbName));
  }
}
","public static void  onDB(MongoClient client,String dbName,Consumer<MongoDatabase> DbOp){
  if (contains(client.listDatabaseNames(),dbName)) {
    DbOp.accept(client.getDatabase(dbName));
  }
}
",46,4,"onDatabase: onDB,dbOperation:DbOp,",79,0.7,ALERT
3275,,,253,12,,2233,39.10747663577400,0
3276,,,27,4,,798,11.743492356936100,0
3277,"public static int instanceOf(Object o,Class<?> c){
  if (o == null)   return FALSE;
  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}
","public static int  instanceOF(Object i,Class<?> out){
  if (i == null)   return FALSE;
  return out.isAssignableFrom(i.getClass()) ? TRUE : FALSE;
}
",41,3,"instanceOf: instanceOF,o:i,c:out,",224,4.3,ALERT
3278,,,104,3,,317,3.237027084827420,0
3279,"public static long bytesToLong(final byte[] bytes){
  final ByteBuffer buffer=ByteBuffer.allocate(8);
  buffer.put(bytes,0,8);
  buffer.flip();
  return buffer.getLong();
}","public static long bytesTolong(final byte[] b){
  final ByteBuffer internal=ByteBuffer.allocate(8);
  buffer.put(b,0,8internalffer.put(b,0,8);
  internal.flip();
  return internal.getLong();
}",48,3,"bytesToLong:bytesTolong,bytes:b,buffer:internal,",222,1.94,ALERT
3280,,,14,1,,241,2.0704482038815800,0
3282,,,98,6,,894,7.706412295500440,0
3283,,,94,8,,1552,16.3450865983963,0
3285,"protected static void processGenericPropertiesCreatorProps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}","protected static void processGenericPropertiesCreatorProperties(File propertiesfile){
  try {
    Properties extraProls=new Properties();
    BufferedInputStream bi=neisBufferedInputStream(new FileInputStream(propertiesfile));
    extraProls.load(is);
    is.close();
    is=null;
    Properties GPCInputpropps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> kestringsxtraProls.keySet();
    Iterator<Object> keyksIrings.iterator();
    while (ksI.hasNext()) {
      Strinnameey=(String)ksI.next();
      String exexistingBuPCInputpropps.getProperty(name,"""");
      if (existingBu.length() > 0) {
        String newfreshEltraProls.getProperty(name);
        if (existingBu.indexOf(freshEl) < 0) {
         freshEll=existingBu + "","" + freshEl;
          GPCInputpropps.put(name,freshEl);
        }
      }
 else {
        String newfreshEltraProls.getProperty(name);
        GPCInputpropps.put(name,freshEl);
      }
    }
  }
 catch (  Exception ex) {
  }
}",199,10,"processGenericPropertiesCreatorProps:processGenericPropertiesCreatorProperties,propsFile:propertiesfile,expProps:extraProls,bi:is,GPCInputProps:GPCInputpropps,keys:strings,keysI:ksI,key:name,existingVal:existingBu,newVal:freshEl,",1298,13.42,ALERT
3286,"public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}","public void  distortCam(GL2 image){
  image.glMatrixMode(GL2.GL_PROJECTION);
  image.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  loc[0]=(float)Math.sin(theta) * 2.f;
  loc[1]=.5f;
  loc[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(loc[0],loc[1],loc[2],.0f,.0f,0.f,0.f,1.f,0.f);
  image.glMatrixMode(GL2.GL_MODELVIEW);
  image.glLoadIdentity();
  image.glViewport(0,0,width,height);
}",143,3,"applyCamera: distortCam,gl:image,eye:loc,",120,1.06,ALERT
3287,"protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}","protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int finalval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return finalval;
  return (int)((value - lower) * ((finalval - 0) / (upper - lower)));
}",81,6,"maxval:finalval,",46,0.45,ALERT
3288,,,28,2,,426,3.3514123360316000,0
3289,,,172,11,,1991,19.12207034826280,0
3291,"long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}","long getlong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}",113,1,"readLong:getlong,",19,0.12,ALERT
3292,"private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
","private boolean blockOrd(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
",39,2,"lockOrder:blockOrd,",19,0.13,ALERT
3293,"@Override public String toString(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append(""BoardPanel "");
  risul.append(""available object: itera_board"");
  return risul.toString();
}","@Override public String newLong(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append(""BoardPanel "");
  risul.append(""available object: itera_board"");
  return risul.newLong();
}",39,2,"toString:newLong,",34,0.22,ALERT
3294,"private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
","private boolean ifyName(LifecycleState  newName){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state= newName;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel, newName + "" "" + _name);
  }
  notifyListeners(state, newName);
  return true;
}
",72,5,"newState: newName,toState:ifyName,",87,0.68,ALERT
3295,,,24,3,,608,10.784551767508200,0
3296,"private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){
  String[] t=new String[buffer.length + lastRead.length];
  System.arraycopy(buffer,0,t,0,buffer.length);
  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);
  return t;
}","private String[] combineResultsFromMultipleReadths(String[] request,String[]  lastread){
  String[] t=toolew String[request.length +  lastread.length];
  System.arraycopy(request,0,ttool0,request.length);
  System.arraycopy(l lastread0,t,toolequest.length, lastread.length);
  return tool;
}",74,4,"combineResultsFromMultipleReads:combineResultsFromMultipleReadths,buffer:request,lastRead: lastread,t:tool,",781,9.81,ALERT
3297,,,47,1,,269,2.0961235920588200,0
3298,,,208,7,,1309,15.968853461742400,0
3299,"@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}","@Override public void sprimm(){
  if (counter < single.length) {
    int[] i=new int[counter];
    System.arraycopy(single,0,i,0,counter);
    single=i;
    resizeValues(counter);
  }
}",54,3,"trim:sprimm,y:i,x:single,",202,2.18,ALERT
3300,"public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}","public void writeLEChars(String bis) throws IOException {
  int ledepthis.depth();
  for (intii=0;ii < depth; i++) {
    int c=cis.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
 wn+=depth * 2;
}",76,6,"s:bis,length:depth,written:w,",247,2.96,ALERT
3301,"public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}
","public Options PUT(String choice,Integer server){
  if (server == null) {
    return remove(choice);
  }
  options.PUT(choice,server.toString());
  return this;
}
",42,3,"put:PUT,option:choice,value:server,",100,0.86,ALERT
3302,"private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
","private void getLibrary(File directory,RelativeDirectory libdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recursive,ListBuffer<JavaFileObject> ResultList){
  File d=libdirectory.getFile(directory);
  if (!caseMapCheck(d,libdirectory))   return;
  File[] names=d.listFiles();
  if (names == null)   return;
  if (sortFiles != null)   Arrays.sort(names,sortFiles);
  for (  File fr : names) {
    String fFnofr.getName();
    if (fr.isDirectory()) {
      if (recursive && SourceVersion.isIdentifier(Fno)) {
        getLibrary(directory,new RelativeDirectory(libdirectory,fnFnofileKinds,recursive,ResultList);
      }
    }
 else {
      if (isValidFile(Fno,fileKinds)) {
        JavaFileObjefet fe=new RegularFileObject(this,Fno,new File(d,Fno));
        ResultList.append(efe);
      }
    }
  }
}
",185,11,"listDirectory:getLibrary,subdirectory:libdirectory,recurse:recursive,resultList:ResultList,files:names,f:fr,fname:Fno,fe:efe,",535,6.75,ALERT
3303,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[]  doUnPackCTable(String wrapper){
  char[] buffer=new char[0x10000];
  int y=0;
  int ji=0;
  while (y < 1788) {
    int ccountwrapper.charAt(y++);
    char vunitwrapper.charAt(y++);
    do     buffer[ji++]=unit;
 while (--count > 0);
  }
  return buffer;
}",83,7,"zzUnpackCMap: doUnPackCTable,packed:wrapper,map:buffer,i:y,j:ji,value:unit,",469,3.93,ALERT
3304,"public void doHistory(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}","public void doHistory(KeyEvent l){
  if (l.getSource() == m_Input) {
switch (l.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistPoint > 0) {
        m_HistPoint--;
        String command=m_CommandHistory.elementAt(m_HistPoint);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistPoint < m_CommandHistory.size()) {
    m_HistPoint++;
    String command="""";
    if (m_HistPoint < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistPoint);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}",125,4,"m_HistoryPos:m_HistPoint,e:l,",78,0.67,ALERT
3305,"public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}","public final boolean find2table(Polyline p_progon,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch searchabletower=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + searchabletower.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_progon.offset_shapes(compensated_half_width,0,p_progon.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_progon,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}",159,16,"p_polyline:p_progon,search_tree:searchabletower,check_trace:find2table,",280,26.0,ALERT
3306,"private void markRemovedDefaultSessionToken(String site,String token){
  if (removedDefaultTokens == null)   removedDefaultTokens=new HashMap<>(1);
  HashSet<String> removedSet=removedDefaultTokens.get(site);
  if (removedSet == null) {
    removedSet=new HashSet<>(1);
    removedDefaultTokens.put(site,removedSet);
  }
  removedSet.add(token);
}","private void  markRemovedDefaultInstanceToken(String install,String token){
  if (remakedExtraFiles == null)   remakedExtraFiles=new HashMap<>(1);
  HashSet<String> removedSet=remremakedExtraFilest(install);
  if (removedSet == null) {
    removedSet=new HashSet<>(1);
    remremakedExtraFilest(install,removedSet);
  }
  removedSet.add(token);
}",75,5,"markRemovedDefaultSessionToken: markRemovedDefaultInstanceToken,site:install,removedDefaultTokens:remakedExtraFiles,",239,2.85,ALERT
3307,,,138,8,,1517,14.24380585749940,0
3308,,,27,2,,436,3.9215540170669600,0
3310,"void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}","void  popInteg(int sup){
switch (sup) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (sup >= Byte.MIN_VALUE && sup <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,sup);
return;
}
if (sup >= Short.MIN_VALUE && sup <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,sup);
return;
}
mv.visitLdcInsn(Integer.valueOf(sup));
}",165,2,"i:sup,pushInt: popInteg,",57,0.55,ALERT
3311,,,61,4,,801,7.628770319620770,0
3312,,,120,8,,1395,15.339348010222100,0
3313,,,52,5,,770,7.761204489072160,0
3314,"public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}","public static void checkFinite(final double[] vec) throws MathIllegalArgumentException {
  for (int i=0; i < vec.length; i++) {
    final double x=vec[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}",71,4,"val:vec,",44,0.36,ALERT
3315,,,27,4,,679,4.188060983022050,0
3316,"public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}","public static boolean  deployOk(Context context,String baseName){
  Intent uri=new Intent(Intent.ACTION_VIEW);
  File play=new File(baseName);
  if (!play.exists() || !play.isFile() || play.length() <= 0) {
    return false;
  }
  uri.setDataAndType(Uri.parse(""file://"" + baseName),""application/vnd.android.package-archive"");
  uri.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(uri);
  return true;
}",97,5,"i:uri,file:play,filePath:baseName,installNormal: deployOk,",151,1.03,ALERT
3317,,,16,1,,222,2.580977173646290,0
3318,,,259,14,,2564,36.448558350404100,0
3320,,,50,5,,939,9.123616973559060,0
3321,,,169,6,,817,5.540669123331710,0
3322,"public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void eqles(Object object1,Object object2){
  checkAssertion(object1.eqles(object2),null);
}",25,3,"equals:eqles,",26,0.29,ALERT
3323,"private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
","private synchronized void fn(boolean  tcp){
  if ( tcp) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
",51,2,"block:fn,tf: tcp,",437,4.32,ALERT
3324,"public boolean isFlat(){
  return TYPE_FLAT.equals(getType());
}
","public boolean  isFLate(){
  return TYPE_FLAT.equals(getType());
}
",17,1,"isFlat: isFLate,",25,0.2,ALERT
3325,,,26,3,,570,9.213979454835260,0
3326,,,38,4,,798,6.998865203062690,0
3327,"public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
","public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] getStat;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    getStat=hdfsFileSystem.getStat(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(getStat);
}
",130,6,"listStatus:getStat,",51,0.51,ALERT
3328,"@Override public void requestResources(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourceRequest.getPreferredHost() + "" for container ""+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int cpuCores=resourceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}","@Override public void areFiles(SamzaResourceRequest resourceInfo){
  final int DEFAULT_PLIORity=0;
  log.info(""Requesting resources on  "" + resourceInfo.getPreferredHost() + "" for container ""+ resourceInfo.getContainerID());
  imemoryMbyMb=resourceInfo.getMemoryMB();
  icpuAcuriesres=resourceInfo.getNumCores();
  String contentEl=yarnConfig.getContainerLabel();
  StripreferredHostost=resourceInfo.getPreferredHost();
  Resource caCAPacityesource.newInstance(memoryMb,cpuAcuries);
  Priority error=Priority.newInstance(DEFAULT_PLIORity);
  AMRMClient.ContainerRequest releasedQuery;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerReqCAPacityility,null,errorority,true,contereleasedQueryuedRequest=new AMRMClient.ContainerReqCAPacityility,null,errorority,true,contentEl);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerReqCAPacityility,new StripreferredHostdHost},errorority,true,contereleasedQueryuedRequest=new AMRMClient.ContainerReqCAPacityility,new StripreferredHostdHost},errorority,true,contentEl);
  }
synchronized (lock) {
    requestsMap.put(resourceInfo,releasedQuery);
    amClient.addContainerRequest(releasedQuery);
  }
}",201,10,"requestResources:areFiles,resourceRequest:resourceInfo,DEFAULT_PRIORITY:DEFAULT_PLIORity,cpuCores:cpuAcuries,containerLabel:contentEl,capability:CAPacity,priority:error,issuedRequest:releasedQuery,",435,5.69,ALERT
3329,"private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
","private String encodeProduction(){
  StringBuffer Token=new StringBuffer();
  ListIterator ble=productTokens.listIterator();
  while (ble.hasNext()) {
    Token.append((String)ble.next());
  }
  return Token.toString();
}
",55,3,"encodeProduct:encodeProduction,tokens:Token,it:ble,",141,1.18,ALERT
3330,,,72,4,,735,6.4555006384849500,0
3331,,,14,1,,248,1.6557419339815800,0
3332,"private static Frame showInitialSplash(){
  Frame splashFrame=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      splashFrame=AWTSplashWindow.splash(image);
    }
  }
  return splashFrame;
}
","private static Frame showInitialsplashed(){
  Frame splatchImage=null;
  Image page=null;
  URL imageurl=getChosenSplashURL();
  if (imageurl != null) {
    try {
      page=ImageIO.read(imageurl);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (page != null) {
      splatchImage=AWTSplashWindow.splash(page);
    }
  }
  return splatchImage;
}
",78,4,"showInitialSplash:showInitialsplashed,splashFrame:splatchImage,image:page,imageURL:imageurl,",220,1.45,ALERT
3333,,,35,2,,361,2.532781640688580,0
3334,"public boolean similarTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
","public boolean  conformAfter(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
",116,5,"similarTo: conformAfter,",31,0.32,ALERT
3335,,,75,4,,802,8.431901705265040,0
3337,"public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
","public boolean  Overswashes(String source,int id,int use){
  if (id == MISSING useend == MISSING useend < id) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(source)) {
    return false;
  }
  if ((mEnd != MISSING && id >= mEnd) || (use <= mStart)) {
    return false;
  }
  return true;
}
",78,4,"overlaps: Overswashes,sequence:source,start:id,end:use,",212,2.54,ALERT
3338,,,35,2,,359,2.946293874581660,0
3339,,,35,4,,807,7.586848950386050,0
3340,"public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}
","public static Operator generateBancScan(AkibanInformationSchema ais,Table family){
  final Operator indexScan=generateIndexScan(ais,family);
  final Schema chega=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=family.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=chega.indexRowType(pkey.getIndex());
  return generateBancScan(family,indexScan,indexType);
}
",68,7,"generateBranchPlan:generateBancScan,table:family,schema:chega,",140,1.11,ALERT
3341,"public static String toKilobytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}","public static String toKilotbytes(long  seconds){
  if ( seconds < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbyKsecondseconds / 1024;
  if (( seconds & 512) != 0 || ( seconds > 0 &&  seconds < 1024))   Kseconds++;
  return NUMBER_FORMAT0.format(Kseconds) + GENERAL_UNIT_KILOBYTES;
}",61,3,"toKilobytes:toKilotbytes,bytes: seconds,kbytes:Kseconds,",182,1.84,ALERT
3342,,,129,10,,1841,27.76319169998170,0
3343,,,78,3,,569,5.419487408796950,0
3344,,,31,2,,375,2.435323933760330,0
3345,"public void configure(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split("" "");
  }
}
","public void  CONFIGures(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split("" "");
  }
}
",24,2,"configure: CONFIGures,",18,0.14,ALERT
3346,,,66,4,,762,6.032666154702510,0
3347,,,61,3,,311,2.7884103655815100,0
3348,,,26,1,,235,1.168940047423050,0
3349,,,50,2,,426,3.236891448497770,0
3350,,,98,4,,663,15.199837605158500,0
3351,"public void removeStorage() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
","public void  removeContainer() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
",31,1,"removeStorage: removeContainer,",17,0.16,ALERT
3352,,,44,6,,951,9.362457005182900,0
3353,"public static CLContext createContextFromCurrentGL(){
  RuntimeException first=null;
  for (  CLPlatform platform : listPlatforms()) {
    try {
      CLContext ctx=platform.createContextFromCurrentGL();
      if (ctx != null)       return ctx;
    }
 catch (    RuntimeException ex) {
      if (first == null)       first=ex;
    }
  }
  throw new RuntimeException(""Failed to create an OpenCL context based on the current OpenGL context"",first);
}
","public static CLContext createContextFromThisGl(){
  RuntimeException primary=null;
  for (  CLPlatform layer : listPlatforms()) {
    try {
      CLContext concept=layer.createContextFromThisGl();
      if (concept != null)       return concept;
    }
 catch (    RuntimeException ex) {
      if (primary == null)       primary=ex;
    }
  }
  throw new RuntimeException(""Failed to create an OpenCL context based on the current OpenGL context"",primary);
}
",71,4,"first:primary,ctx:concept,createContextFromCurrentGL:createContextFromThisGl,platform:layer,",133,1.53,ALERT
3354,"protected String generateSectionLabel(PieDataset dataset,Comparable key){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,key);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}
","protected String generateRowlabel(PieDataset datrasheet,Comparable base){
  String array=null;
  if (datrasheet != null) {
    Object[] itempagesateItemArray(datrasheet,base);
    array=MessageFormat.format(this.labelFormat,pages);
  }
  return array;
}
",53,5,"generateSectionLabel:generateRowlabel,dataset:datrasheet,key:base,result:array,items:pages,",525,4.25,ALERT
3355,"public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}","public static double diff(int counts[]){
  int total=0;
  double i=0;
  for (  int count : counts) {
    i-=xlogx(count);
    total+=count;
  }
  return i + xlogx(total);
}",50,5,"x:i,info:diff,",71,0.71,ALERT
3356,"public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
","public void createNote(Note comment){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(comment.getSpannable());
  String date=dt.format(new Date());
  ContentValues places=new ContentValues();
  places.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  places.put(KEY_NOTE_TITLE,comment.getTitle());
  places.put(KEY_IMAGE,BitmapConverter.getBytes(comment.getImage()));
  places.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,places);
  db.close();
}
",117,6,"values:places,note:comment,",80,0.69,ALERT
3357,"public boolean renameFile(File oldFile,File newFile){
synchronized (fileCache) {
    if (oldFile.renameTo(newFile)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}
","public boolean renamingFiles(File fromDir,File nextFiles){
synchronized (fileCache) {
    if (fromDir.renameTo(nextFiles)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}
",39,3,"renameFile:renamingFiles,oldFile:fromDir,newFile:nextFiles,",405,18.15,ALERT
3358,"public static double angle(Coordinate p0,Coordinate p1){
  double dx=p1.x - p0.x;
  double dy=p1.y - p0.y;
  return Math.atan2(dy,dx);
}","public static double quad(Coordinate  p2,Coordinate t01){
  double dxdft01x -  p2.x;
  double dyyt01y -  p2.y;
  return Math.atan2(y,df);
}",45,5,"angle:quad,p0: p2,p1:t01,dx:df,dy:y,",368,3.27,ALERT
3359,"private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
","private static void writingFiles(File http,List<String> books) throws IOException {
  if (!http.exists())   http.createNewFile();
  FileWriter RW=new FileWriter(http);
  BufferedWriter Bw=new BufferedWriter(RW);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String liner : books)   pw.println(liner);
  Bw.close();
  RW.close();
  pw.close();
}
",92,7,"writeFile:writingFiles,file:http,lines:books,fw:RW,line:liner,",409,3.07,ALERT
3360,"private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}","private int composeFunction(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}",28,3,"composeComponent:composeFunction,",60,0.49,ALERT
3361,"boolean handleRemoteCanRebalance(long size){
  return false;
}
","boolean isRemoteCanRebAlment(long bytes){
  return false;
}
",11,2,"handleRemoteCanRebalance:isRemoteCanRebAlment,size:bytes,",269,4.74,ALERT
3362,,,161,9,,1438,15.852543365955400,0
3363,,,31,4,,718,11.375048943360600,0
3364,"private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}","private void selectAttributeSetupCase(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance wikipedia=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (wikipedia.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(wikipedia.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(wikipedia.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}",153,7,"pai:wikipedia,selectAttributeSetInstance:selectAttributeSetupCase,",154,0.91,ALERT
3365,,,61,4,,615,12.576309041182200,0
3366,"public void deleteQuota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
","public void getQot(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
",25,2,"deleteQuota:getQot,",28,0.17,ALERT
3367,"public boolean loadLines(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
","public boolean addPines(){
  boolean grade=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    grade=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return grade;
}
",77,4,"result:grade,loadLines:addPines,",87,0.55,ALERT
3368,,,21,3,,627,4.949909174442290,0
3369,,,14,1,,242,1.7987641215324400,0
3370,,,55,2,,442,3.633223621050520,0
3372,,,79,4,,482,9.098248728116350,0
3373,,,28,2,,420,2.949091569582620,0
3374,,,20,2,,422,4.124270939826970,0
3375,,,31,3,,542,6.315721627076470,0
3376,,,29,3,,472,5.383721649646760,0
3377,"public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
","public boolean isMultipleLowing(String iframeIDs){
  return multipleFrames.contains(iframeIDs);
}
",17,2,"isMultipleAllowed:isMultipleLowing,frameID:iframeIDs,",173,1.94,ALERT
3378,"@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}","@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result one){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=one;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}",110,6,"result:one,",88,0.94,ALERT
3379,,,41,5,,972,9.908070917924250,0
3380,"private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}","private static void compileContent(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}",205,4,"generateFiles:compileContent,",49,0.39,ALERT
3381,"public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
","public static double string(double c,double ey,double xy){
  return Math.sqrt(c * c + ey * ey + xy * xy);
}
",34,4,"length:string,x:c,y:ey,z:xy,",182,1.41,ALERT
3383,,,104,3,,604,3.8959405342737800,0
3384,,,72,4,,701,6.357802434762320,0
3385,,,66,5,,999,12.283243930339800,0
3386,"protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));
  }
}
","protected void notifyPropertyChangeListener(String metadata,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,metadata,oldValue,newValue));
  }
}
",63,6,"property:metadata,",44,0.54,ALERT
3387,,,25,1,,237,2.6026110728581700,0
3388,,,27,2,,411,5.48241191705068,0
3389,,,128,5,,898,11.89676867723470,0
3390,,,32,2,,253,1.948078191280370,0
3391,,,29,2,,433,3.9498013854026800,0
3392,,,282,11,,2092,13.908843942483300,0
3393,,,29,3,,614,6.24654369354248,0
3394,"@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (components.isEmpty()) {
    return siblingLists;
  }
  if (components.size() == 1) {
    RadComponent component=components.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : components) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}","@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> expients){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (expients.isEmpty()) {
    return siblingLists;
  }
  if (expients.size() == 1) {
    RadComponent component=expients.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : expients) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}",175,6,"components:expients,",59,0.57,ALERT
3395,,,149,6,,1156,9.11793171564738,0
3396,"public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException {
  assert size > 0 : ""Size cannot be less than 1 byte"";
  log=parent.getLogger(IpcSharedMemorySpace.class);
  opSize=size;
  shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled());
  shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr);
  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);
  isReader=reader;
  this.tokFileName=tokFileName;
  this.readerPid=readerPid;
  this.writerPid=writerPid;
  if (DEBUG && log.isDebugEnabled())   log.debug(""Shared memory space has been created: "" + this);
}","public IpcSharedMemorySpace(String tokeClassName,int writerDPid,int writerCw,int capacity,boolean handler,IgniteLogger config) throws IgniteCheckedException {
  assert capacity > 0 : ""Size cannot be less than 1 byte"";
  error=config.getLogger(IpcSharedMemorySpace.class);
  opSiprocSizeacity;
  shmemPtrshmemBufferedMemoryUtils.allocateSystemResources(tokeClassName,capacity,DEBUG && error.isDebugEnabled());
  shmshmemObjcSharedMemoryUtils.sharedMemoryId(shmemBuffer);
  semimIDcSharedMemoryUtils.semaphoreId(shmemBuffer);
  i isreaderhandler;
  this.tokeClassName=tokeClassName;
  this.writerCw=writerCw;
  this.writerDPid=writerDPid;
  if (DEBUG && error.isDebugEnabled())   error.debug(""Shared memory space has been created: "" + this);
}",125,12,"tokFileName:tokeClassName,writerPid:writerDPid,readerPid:writerCw,size:capacity,reader:handler,parent:config,log:error,opSize:procSize,shmemPtr:shmemBuffer,shmemId:shmemObj,semId:imID,isReader: isreader,",1428,11.11,ALERT
3397,,,100,4,,723,8.095895751317340,0
3398,"private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
","private String mosesizer(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
",46,2,"mosesize:mosesizer,",30,0.74,ALERT
3399,"private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}
","private static boolean isTwoSlotType(ClassNode null){
  return null == ClassHelper.long_TYPE || null == ClassHelper.double_TYPE;
}
",23,2,"type:null,",36,0.45,ALERT
3401,,,31,1,,241,2.889861524105070,0
3402,,,28,2,,391,4.7241708914438900,0
3403,"@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}","@Override public void onLoadChannel(Eye scene){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,scene.getEyeView(),0,m,0);
      if (scene.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (scene.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (scene.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,scene.getEyeView(),0,mCamera,0);
  }
  float[] perspective=scene.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(scene.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(scene.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(scene.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(scene.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}",533,7,"eye:scene,onDrawEye:onLoadChannel,",205,1.68,ALERT
3404,,,16,1,,223,2.4848668297131900,0
3405,,,14,1,,225,1.5583796858787500,0
3406,,,38,6,,1058,10.311233456929500,0
3407,"@SuppressWarnings(""rawtypes"") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveClass(cname,this.loader);
}
","@SuppressWarnings(""rawtypes"") protected Class resiveclass(ObjectStreamClass classDescription) throws IOException, ClassNotFoundException {
  String cname=c cnamescription.getName();
  return ClassFinder.resiveclass( cnam,this.loader);
}
",39,3,"resolveClass:resiveclass,classDesc:classDescription,cname: cnam,",347,3.01,ALERT
3408,,,20,2,,420,3.171902894973760,0
3409,,,78,6,,1038,9.532849709192910,0
3410,,,22,2,,434,4.861203515529630,0
3411,,,75,6,,1108,11.85948486328130,0
3412,"public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}","public static List<Double> mergeCoords(List<Double> v,List<Double> y){
  if (v.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int ix=0; ix < v.size(); ix++) {
    ret.add(v.get(ix));
    ret.add(y.get(ix));
  }
  return ret;
}",103,5,"i:ix,x:v,",109,1.07,ALERT
3413,,,13,1,,222,1.9254587690035500,0
3414,,,89,2,,398,3.2935156504313200,0
3415,,,70,7,,1250,9.31036579211553,0
3416,,,22,2,,387,4.101301451524100,0
3417,,,16,2,,415,4.263588313261670,0
3419,,,37,5,,885,14.588514788945500,0
3421,,,96,3,,616,4.376370577017470,0
3422,"public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}","public final void writeFly(byte[] emb) throws java.io.IOException {
  writeFly(emb,0,emb.length);
}",29,2,"b:emb,readFully:writeFly,",67,0.44,ALERT
3423,,,22,1,,251,2.3326451897621200,0
3424,,,22,2,,432,3.9334134459495500,0
3425,,,173,12,,2264,18.17160782019300,0
3426,,,17,1,,220,1.9634528716405200,0
3427,,,17,1,,237,3.4350247780482000,0
3428,,,25,2,,410,2.8584858695666000,0
3429,,,165,11,,2040,14.484906486670200,0
3430,,,204,10,,1923,23.845264772574100,0
3431,"public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}","public static void drawBackground(final Rectangle2D sand,final Graphics2D cfg62){
  Graphics2D g2Sg1Craphics2D)cfg62.create();
  Rectangle2D design=new Rectangle2D.Double(sand.getX() + 5,sand.getY() + ProcessDrawer.HEADER_HEIGHT + 5,sand.getWidth(),sand.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath log=new GeneralPath();
  log.moveTo(design.getX(),sand.getMaxY());
  log.lineTo(sand.getMaxX(),sand.getMaxY());
  log.lineTo(design.getMaxX(),design.getMaxY());
  log.lineTo(design.getMinX(),design.getMaxY());
  log.closePath();
  g1C.setPaint(new GradientPaint((float)sand.getX(),(float)sand.getMaxY(),Color.gray,(float)sand.getX(),(float)design.getMaxY(),TRANSPARENT_GRAY));
  g1C.fill(log);
  GeneralPath ro=new GeneralPath();
  ro.moveTo(sand.getMaxX(),design.getMinY());
  ro.lineTo(design.getMaxX(),design.getMinY());
  ro.lineTo(design.getMaxX(),design.getMaxY());
  ro.lineTo(sand.getMaxX(),sand.getMaxY());
  ro.closePath();
  g1C.setPaint(new GradientPaint((float)sand.getMaxX(),(float)design.getY(),Color.gray,(float)design.getMaxX(),(float)design.getY(),TRANSPARENT_GRAY));
  g1C.fill(ro);
  g1C.dispose();
}",358,7,"drawShadow:drawBackground,rect:sand,g2:cfg62,g2S:g1C,shadow:design,bottom:log,right:ro,",737,4.68,ALERT
3432,,,15,1,,247,2.411152784029640,0
3433,"private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
","private void LoadFolder(String files,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=files;
  createTitle();
  if (files.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(files,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
",79,5,"filename:files,loadFile:LoadFolder,",59,0.34,ALERT
3434,,,56,2,,410,4.09138488372167,0
3435,"public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
","public double circle(Vector w){
  return Math.sqrt(NumberConversions.square(x - w.x) + NumberConversions.square(y - w.y) + NumberConversions.square(z - w.z));
}
",48,2,"o:w,distance:circle,",65,0.64,ALERT
3436,,,105,6,,1174,15.587698519229900,0
3437,"void flush(){
  printStream.flush();
}
","void print(){
  printStream.print();
}
",12,1,"flush:print,",34,0.26,ALERT
3438,,,83,4,,761,6.72670085032781,0
3439,,,53,3,,557,5.818147373199460,0
3440,,,54,3,,473,4.3183241804440800,0
3441,"private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumerValue0(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,7,"WindowsRegEnumValue1:WindowsRegEnumerValue0,",49,3.12,ALERT
3442,"@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
","@Deprecated public void pull(Collection<Integer> DATA){
  for (  Integer job : DATA) {
    final inexecal=job.intValue();
    miwritexec < mwrite? exec : write;
    masumxec > msum? exec : sum;
  }
}
",53,6,"put:pull,data:DATA,value:job,val:exec,min:write,max:sum,",253,2.57,ALERT
3443,"public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
","public static String generateTransportZoneRemoteGuId(String transporterType,String deviceType,String FabnicId){
  return String.format(""%s+%s+%s"",transporterType,_deviceTypeMap.get(deviceType),FabnicId);
}
",35,4,"fabricId:FabnicId,transportType:transporterType,generateTransportZoneNativeGuid:generateTransportZoneRemoteGuId,",118,0.96,ALERT
3444,,,14,1,,242,2.094986959298450,0
3445,"public static List<Integer> precomputeHashes(byte[] data,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,data,tweak));
  }
  return list;
}","public static List<Integer> precomputeShiffs(byte[] DATA,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,DATA,tweak));
  }
  return list;
}",65,5,"precomputeHashes:precomputeShiffs,data:DATA,",63,0.6,ALERT
3446,,,87,5,,918,7.3052976330121400,0
3447,,,130,3,,454,5.6878515164057400,0
3448,,,65,1,,233,2.1630481084187800,0
3450,"public static float r_distance(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}","public static float r_angle(vec3 ad,vec3 b){
  float x=ad.m[0] - b.m[0];
  float y=ad.m[1] - b.m[1];
  float z=ad.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}",90,7,"a:ad,r_distance:r_angle,",59,0.39,ALERT
3451,,,17,2,,341,2.592734714349110,0
3452,,,150,9,,1546,15.289557023843100,0
3454,,,89,7,,1379,15.670746183395400,0
3455,"public void load(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}","public void callback(List<PolicyQualifierInfo> policyQuantificationInf){
  PolicyQualifierInfo[] policyQupolicyQualizerDirAuantificationInf.toArray(new PolicyQualifierInfo[policyQuantificationInf.size()]);
  Arrays.sort(policyQualizerDirA,new PolicyQualifierInfoComparator());
  data=new Object[policyQualizerDirA.length]dat  data=new Object[policyQualizerDirA.length][1];
  int t=0;
  for (  PolicyQualifie policySpecInfoalInfo : policyQualizerDirA) {
    dat[t][0]= policySpecInfo;
    t++;
  }
  fireTableDataChanged();
}",88,6,"load:callback,policyQualifierInfo:policyQuantificationInf,policyQualifierInfoArray:policyQualizerDirA,data:dat,i:t,policyQualInfo: policySpecInfo,",511,5.38,ALERT
3456,,,84,5,,921,16.22412728468580,0
3457,"public void finished(long chainLength){
  currentState=chainLength;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(currentState);
      logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
","public void  exit(long ChainStart){
 futureCodee=ChainStart;
  if (loggers != null) {
    for (    Logger Logge : loggers) {
    Loggeer.log(futureCode);
      Logge.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.copy);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream copy=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(copy);
      copy.flush();
      copy.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
",110,5,"finished: exit,chainLength:ChainStart,currentState:futureCode,logger:Logge,out:copy,",683,7.94,ALERT
3458,,,706,20,,2711,107.65022379557300,0
3459,,,26,3,,587,10.20496357679370,0
3460,,,457,15,,2754,33.79253043731050,0
3461,,,124,7,,1325,13.698340797424300,0
3462,,,18,2,,432,5.876763168970740,0
3463,,,69,5,,977,14.974112661679600,0
3464,"private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesToDelete) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
","private static void updateRule(List<String> broadList,List<Rule> ulesToDelete){
  String DeleteStep=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Ruletriale : ulesToDelete) {
    broadList.add(String.format(DeleteStep,trial.getUid()));
  }
}
",55,5,"deleteRules:updateRule,batchList:broadList,rulesToDelete:ulesToDelete,deleteStatement:DeleteStep,rule:trial,",249,3.42,ALERT
3465,"protected void fireClusterChange(long timestamp,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
","protected void fireClustersChanged(long nowpoint,String year,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEventeventt=new ClusterEvent(this,nowpoint,year,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration i=targets.elements();
    while (i.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)i.nextElement();
      l.changeCluster(event);
    }
  }
}
",103,8,"fireClusterChange:fireClustersChanged,timestamp:nowpoint,type:year,e:i,",312,3.51,ALERT
3466,,,14,1,,246,2.2664443572362300,0
3467,"public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}
","public void releaseOperation(NetworkUpdateAction event){
  actionList.remove(event);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(event);
  }
}
",32,3,"removeAction:releaseOperation,action:event,",52,0.4,ALERT
3468,,,28,1,,213,2.215012085437780,0
3470,"public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}","public synchronized boolean setMultiple(Collection<? extends E> p){
  modMax++;
  Object[] f=p.toArray();
  int umNew=f.length;
  ensureCapacityHelperElementDatat + umNew);
  System.arraycopy(f,0,elementDataElementDatat,umNew);
 ElementDatat+=umNew;
  return umNew != 0;
}",67,6,"addAll:setMultiple,c:p,modCount:modMax,a:f,numNew:umNew,elementCount:ElementData,",372,9.43,ALERT
3471,,,26,2,,411,3.844063679377240,0
3472,,,15,1,,235,1.7154598037401800,0
3473,,,67,3,,587,5.878230905532840,0
3474,"protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
","protected Set<FunctionInterface> findUnusedFctors(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
",109,8,"findUnusedFunctions:findUnusedFctors,",44,0.56,ALERT
3475,,,101,7,,1338,14.454389242331200,0
3476,"public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}","public void truckCamera(float sea){
  moveToPosition(-(float)(targetXoff + (sea * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (sea * Math.cos(Math.toRadians(zrot - 90)))));
}",64,2,"size:sea,",36,0.33,ALERT
3477,"@SuppressWarnings(""unchecked"") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){
  mContext=context;
  mDbName=dbName;
  mDefaultTable=defaultTable;
  mDbPath=dbPath;
  mDbFile=new File(dbPath,mDbName);
  if (mDbFile.exists()) {
    open();
  }
}
","@SuppressWarnings(""unchecked"") public DictionaryAdapter(Context context,File databaseId,String  dbNames,String Defaulttable){
  mContext=context;
  mDmDbNamedbNames;
  MdefaultDb=Defaulttable;
  mDbPmDbPathabaseId;
  mDbFmDBF File(databaseId,mDbName);
  if (mDBF.exists()) {
    open();
  }
}
",62,9,"dbPath:databaseId,dbName: dbNames,defaultTable:Defaulttable,mDefaultTable:MdefaultDb,mDbFile:mDBF,",325,2.7,ALERT
3478,,,75,4,,759,8.998690422376000,0
3479,"protected void appendLine(JComponent c){
  c.setAlignmentX(0.f);
  contents.add(c);
}","protected void insertCell(JComponent class){
  class.setAlignmentX(0.f);
  contents.add(class);
}",23,2,"appendLine:insertCell,c:class,",253,2.99,ALERT
3480,"public double[] skipTo(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}","public double[] nextFrom(final int capacity) throws MathIllegalArgumentException {
  if (capacity == 0) {
    Arrays.fill(y,0);
  }
 else {
    final int i=ccpacity - 1;
    final long grayCode=c ^ (c >> 1);
    for (int v=0; v < dimension; v++) {
      long value=0;
      for (int kick=1; kick <= BITS; kick++) {
        final long shipowerayCode >> (kick - 1);
        if (power == 0) {
          break;
        }
        final long ik=power & 1;
        value^=ik ikdirection[v][kick];
      }
     yx[v]=value;
    }
  }
  coucountpacity;
  return nextVector();
}",151,11,"skipTo:nextFrom,index:capacity,i:c,j:v,result:value,k:kick,shift:power,x:y,",428,4.95,ALERT
3481,,,123,7,,1269,15.460171802838600,0
3483,"private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){
  QuadEdge curr=edge;
  int edgeCount=0;
  boolean isFrame=false;
  do {
    triEdges[edgeCount]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge sym=curr.sym();
    if (!visitedEdges.contains(sym))     edgeStack.push(sym);
    visitedEdges.add(curr);
    edgeCount++;
    curr=curr.lNext();
  }
 while (curr != edge);
  if (isFrame && !includeFrame)   return null;
  return triEdges;
}","private QuadEdge[] fetchTriEdgeAndEdge(QuadEdge ne,Stack edgeQueue,boolean enableEdge,Set visitededwards){
  QuadEdgcurrelrr=ne;
  int edgeCounter=0;
  boolean Isframe=false;
  do {
    triEtriElgsdgeCountercurrel;
    if (isFrameEdge(currel))     Isframe=true;
    QuadEdge sykmurrel.km();
    if (!visitededwards.contains(km))     edgeQueue.push(km);
    visitededwards.add(currel);
    edgeCounter++;
    currel=currel.lNext();
  }
 whilecurrelrr != ne);
  ifIsframeme && !enableEdge)   return null;
  return triElgs;
}",120,10,"fetchTriangleToVisit:fetchTriEdgeAndEdge,edge:ne,edgeStack:edgeQueue,includeFrame:enableEdge,visitedEdges:visitededwards,curr:currel,edgeCount:edgeCounter,triEdges:triElgs,sym:km,isFrame:Isframe,",1698,23.39,ALERT
3484,,,18,2,,424,4.359713292121890,0
3485,"public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(file.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
","public void image(File rule,long relageFrom,FTPDataTransferListener LISTetter) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!rule.exists()) {
    throw new FileNotFoundException(rule.getAbsolutePath());
  }
  InputStream  inputWriter=null;
  try {
     inputWriter=new FileInputStream(rule);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    image(rule.getName(),inp inputWriterlageFrom,relageFrom,LISTetter);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if ( inputWriter != null) {
      try {
         inputWriter.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
",189,5,"upload:image,file:rule,restartAt:relageFrom,listener:LISTetter,inputStream: inputWriter,",413,4.13,ALERT
3486,"public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
","public void action(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.action(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
",52,3,"execute:action,",40,0.36,ALERT
3487,"public ScriptBuilder data(int index,byte[] data){
  byte[] copy=Arrays.copyOf(data,data.length);
  int opcode;
  if (data.length == 0) {
    opcode=OP_0;
  }
 else   if (data.length == 1) {
    byte b=data[0];
    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b);
 else     opcode=1;
  }
 else   if (data.length < OP_PUSHDATA1) {
    opcode=data.length;
  }
 else   if (data.length < 256) {
    opcode=OP_PUSHDATA1;
  }
 else   if (data.length < 65536) {
    opcode=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(index,new ScriptChunk(opcode,copy));
}","public ScriptBuilder video(int iindbyte[] video){
  byte[] coiprrays.copyOf(video,video.length);
  int  opaque;
  if (video.length == 0) {
     opaque=OP_0;
  }
 else   if (video.length == 1) {
    byte bstringvideo[0];
    if (bstring>= 1 && bstring<= 16)      opaque=Script.encodeToOpN(string);
 else      opaque=1;
  }
 else   if (video.length < OP_PUSHDATA1) {
    o opaquevideo.length;
  }
 else   if (video.length < 256) {
     opaque=OP_PUSHDATA1;
  }
 else   if (video.length < 65536) {
     opaque=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(ind,new ScriptChun opaquede,ip));
}",161,5,"data:video,index:ind,copy:ip,opcode: opaque,b:string,",336,3.8,ALERT
3488,,,26,2,,380,7.264836311340330,0
3489,,,16,1,,225,2.281272264321650,0
3490,"private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}
","private void addTest(Test NewRule){
  if (m__RuleLibrary == null) {
    m__RuleLibrary=new ArrayList<Test>();
  }
  m__RuleLibrary.add(NewRule);
}
",34,3,"m_RuleList:m__RuleLibrary,newTest:NewRule,",60,0.47,ALERT
3491,,,40,2,,438,3.4861881573995000,0
3492,,,41,4,,562,6.808181929588320,0
3493,,,172,10,,1855,14.820826439062800,0
3494,,,318,14,,2395,25.964100110530900,0
3495,"public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}","public static <T>List<T> insert(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement strMT=null;
  ResultSet rs=null;
  try {
    strMT=connection.prepareStatement(rawSqlQuery);
    for (int condition=0; condition < parameters.length; condition++) {
      JdbcUtils.bindParameter(strMT,condition + 1,parameters[condition]);
    }
    rs=strMT.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(strMT);
  }
}",151,9,"stmt:strMT,index:condition,select:insert,",177,1.63,ALERT
3496,,,122,6,,1095,11.754080442587500,0
3497,"private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
","private void refreshIndexForDimensionsFieldValues(String rowId,DimensionRow dimensionRow,DimensionRow purposeRowNew){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (purposeRowNew != null) {
        String oldRowValue=purposeRowNew.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
",301,16,"refreshIndexForDimensionFields:refreshIndexForDimensionsFieldValues,dimensionRowOld:purposeRowNew,",298,6.3,ALERT
3499,,,43,3,,590,4.343648807207740,0
3500,,,491,15,,2746,23.563302648067500,0
3502,"public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}","public static void  writeUNsecure(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out. writeUNsecure(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out. writeUNsecure(QUOTE);
}",57,5,"writeUnsafe: writeUNsecure,",47,0.32,ALERT
3503,,,20,1,,238,1.6401896437009200,0
3504,"public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}
","public void use(final SAMRecord play,final int position){
  recordAndOffsets.use(new RecordAndOffset(play,position));
}
",27,3,"add:use,read:play,",68,0.82,ALERT
3505,,,70,6,,851,6.766240505377450,0
3506,,,62,2,,386,2.838855294386550,0
3507,,,145,8,,1533,12.135607155164100,0
3508,,,156,10,,1926,18.628576787312800,0
3509,,,149,6,,971,15.983083188533800,0
3510,,,20,1,,233,5.23591771920522,0
3511,,,26,1,,227,1.5181558966636700,0
3512,,,54,4,,786,7.561049207051600,0
3513,,,14,1,,235,2.078943932056430,0
3514,"private void onHPChange(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}","private void onTextSwitch(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}",61,2,"onHPChange:onTextSwitch,",29,0.21,ALERT
3515,,,70,4,,419,4.541585763295490,0
3516,"public void update(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}","public void  publish(){
  if (nextLine != -1L) {
    long  dotation=System.nanoTime() - nextLine;
    rollingAverage.addValue( dotation);
  }
  nextLine=System.nanoTime();
}",42,3,"lastTime:nextLine,delta: dotation,update: publish,",86,0.6,ALERT
3517,"private void queueUpSyncs(final Cursor contactsCursor){
  ContactSyncEntry syncEntry=null;
  while (contactsCursor.moveToNext()) {
    if (syncEntry == null) {
      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(number)) {
      syncEntry.addNumber(numberToNational(number));
      syncEntry.addName(name);
      if (syncEntry.isFull()) {
        Logger.d(TAG,""Adding sync entry to queue"");
        mSyncQueue.add(syncEntry);
        syncEntry=null;
      }
    }
  }
}
","private void  queueUpSynccks(final Cursor contactStursor){
  ContactSyncEntry syncInfo=null;
  while (contactStursor.moveToNext()) {
    if (syncInfo == null) {
      syncInfo=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String code=contactStursor.getString(contactStursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String message=contactStursor.getString(contactStursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(code)) {
      syncInfo.addNumber(numberToNational(code));
      syncInfo.addName(message);
      if (syncInfo.isFull()) {
        Logger.d(TAG,""Adding sync entry to queue"");
        mSyncQueue.add(syncInfo);
        syncInfo=null;
      }
    }
  }
}
",144,5,"queueUpSyncs: queueUpSynccks,contactsCursor:contactStursor,syncEntry:syncInfo,number:code,name:message,",918,7.55,ALERT
3518,,,50,3,,514,7.424089169502260,0
3519,,,104,2,,421,3.0216898282369000,0
3520,,,112,3,,594,5.67853551308314,0
3521,,,32,2,,417,4.486191157499950,0
3522,,,71,2,,441,3.373573978741960,0
3523,,,27,3,,636,5.873341949780780,0
3524,"private void computeDoublesForAllZoomLevels(){
  int numFrames=mSoundFile.getNumFrames();
  int[] frameGains=mSoundFile.getFrameGains();
  double[] smoothedGains=new double[numFrames];
  if (numFrames == 1) {
    smoothedGains[0]=frameGains[0];
  }
 else   if (numFrames == 2) {
    smoothedGains[0]=frameGains[0];
    smoothedGains[1]=frameGains[1];
  }
 else   if (numFrames > 2) {
    smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0));
    for (int i=1; i < numFrames - 1; i++) {
      smoothedGains[i]=(double)((frameGains[i - 1] / 3.0) + (frameGains[i] / 3.0) + (frameGains[i + 1] / 3.0));
    }
    smoothedGains[numFrames - 1]=(double)((frameGains[numFrames - 2] / 2.0) + (frameGains[numFrames - 1] / 2.0));
  }
  double maxGain=1.0;
  for (int i=0; i < numFrames; i++) {
    if (smoothedGains[i] > maxGain) {
      maxGain=smoothedGains[i];
    }
  }
  double scaleFactor=1.0;
  if (maxGain > 255.0) {
    scaleFactor=255 / maxGain;
  }
  maxGain=0;
  int gainHist[]=new int[256];
  for (int i=0; i < numFrames; i++) {
    int smoothedGain=(int)(smoothedGains[i] * scaleFactor);
    if (smoothedGain < 0)     smoothedGain=0;
    if (smoothedGain > 255)     smoothedGain=255;
    if (smoothedGain > maxGain)     maxGain=smoothedGain;
    gainHist[smoothedGain]++;
  }
  double minGain=0;
  int sum=0;
  while (minGain < 255 && sum < numFrames / 20) {
    sum+=gainHist[(int)minGain];
    minGain++;
  }
  sum=0;
  while (maxGain > 2 && sum < numFrames / 100) {
    sum+=gainHist[(int)maxGain];
    maxGain--;
  }
  double[] heights=new double[numFrames];
  double range=maxGain - minGain;
  for (int i=0; i < numFrames; i++) {
    double value=(smoothedGains[i] * scaleFactor - minGain) / range;
    if (value < 0.0)     value=0.0;
    if (value > 1.0)     value=1.0;
    heights[i]=value * value;
  }
  algo(mSoundFile.getNumFrames());
  totalZooms=algoValues.size() + 2;
  mNumZoomLevels=totalZooms;
  mLenByZoomLevel=new int[totalZooms];
  mZoomFactorByZoomLevel=new double[totalZooms];
  mValuesByZoomLevel=new double[totalZooms][];
  mLenByZoomLevel[0]=numFrames * 2;
  mZoomFactorByZoomLevel[0]=2.0;
  mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]];
  if (numFrames > 0) {
    mValuesByZoomLevel[0][0]=0.5 * heights[0];
    mValuesByZoomLevel[0][1]=heights[0];
  }
  for (int i=1; i < numFrames; i++) {
    mValuesByZoomLevel[0][2 * i]=0.5 * (heights[i - 1] + heights[i]);
    mValuesByZoomLevel[0][2 * i + 1]=heights[i];
  }
  mLenByZoomLevel[1]=numFrames;
  mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]];
  mZoomFactorByZoomLevel[1]=1.0;
  for (int i=0; i < mLenByZoomLevel[1]; i++) {
    mValuesByZoomLevel[1][i]=heights[i];
  }
  int location=0;
  for (int j=2; j < totalZooms; j++) {
    mLenByZoomLevel[j]=algoValues.get(location);
    mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]];
    mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 1.5;
    for (int i=0; i < mLenByZoomLevel[j]; i++) {
      mValuesByZoomLevel[j][i]=0.5 * (mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i)] + mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i) + 1]);
    }
    location++;
  }
  Log.i(""Scope"",""Squeezed..!!"");
  mInitialized=true;
}","private void computeDoublesForAllZoomLevels(){
  int nStates=mSoundFile.getNumFrames();
  int[] frameGains=mSoundFile.getFrameGains();
  double[] smoothedGains=new double[nStates];
  if (nStates == 1) {
    smoothedGains[0]=frameGains[0];
  }
 else   if (nStates == 2) {
    smoothedGains[0]=frameGains[0];
    smoothedGains[1]=frameGains[1];
  }
 else   if (nStates > 2) {
    smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0));
    for (int eni=1; eni < nStates - 1; eni++) {
      smoothedGains[eni]=(double)((frameGains[eni - 1] / 3.0) + (frameGains[eni] / 3.0) + (frameGains[eni + 1] / 3.0));
    }
    smoothedGains[nStates - 1]=(double)((frameGains[nStates - 2] / 2.0) + (frameGains[nStates - 1] / 2.0));
  }
  double maxGain=1.0;
  for (int eni=0; eni < nStates; eni++) {
    if (smoothedGains[eni] > maxGain) {
      maxGain=smoothedGains[eni];
    }
  }
  double scaleFactor=1.0;
  if (maxGain > 255.0) {
    scaleFactor=255 / maxGain;
  }
  maxGain=0;
  int gainHist[]=new int[256];
  for (int eni=0; eni < nStates; eni++) {
    int smoothedGain=(int)(smoothedGains[eni] * scaleFactor);
    if (smoothedGain < 0)     smoothedGain=0;
    if (smoothedGain > 255)     smoothedGain=255;
    if (smoothedGain > maxGain)     maxGain=smoothedGain;
    gainHist[smoothedGain]++;
  }
  double minGain=0;
  int sum=0;
  while (minGain < 255 && sum < nStates / 20) {
    sum+=gainHist[(int)minGain];
    minGain++;
  }
  sum=0;
  while (maxGain > 2 && sum < nStates / 100) {
    sum+=gainHist[(int)maxGain];
    maxGain--;
  }
  double[] heights=new double[nStates];
  double range=maxGain - minGain;
  for (int eni=0; eni < nStates; eni++) {
    double value=(smoothedGains[eni] * scaleFactor - minGain) / range;
    if (value < 0.0)     value=0.0;
    if (value > 1.0)     value=1.0;
    heights[eni]=value * value;
  }
  algo(mSoundFile.getNumFrames());
  totalZooms=algoValues.size() + 2;
  mNumZoomLevels=totalZooms;
  mLenByZoomLevel=new int[totalZooms];
  mZoomFactorByZoomLevel=new double[totalZooms];
  mValuesByZoomLevel=new double[totalZooms][];
  mLenByZoomLevel[0]=nStates * 2;
  mZoomFactorByZoomLevel[0]=2.0;
  mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]];
  if (nStates > 0) {
    mValuesByZoomLevel[0][0]=0.5 * heights[0];
    mValuesByZoomLevel[0][1]=heights[0];
  }
  for (int eni=1; eni < nStates; eni++) {
    mValuesByZoomLevel[0][2 * eni]=0.5 * (heights[eni - 1] + heights[eni]);
    mValuesByZoomLevel[0][2 * eni + 1]=heights[eni];
  }
  mLenByZoomLevel[1]=nStates;
  mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]];
  mZoomFactorByZoomLevel[1]=1.0;
  for (int eni=0; eni < mLenByZoomLevel[1]; eni++) {
    mValuesByZoomLevel[1][eni]=heights[eni];
  }
  int location=0;
  for (int j=2; j < totalZooms; j++) {
    mLenByZoomLevel[j]=algoValues.get(location);
    mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]];
    mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 1.5;
    for (int eni=0; eni < mLenByZoomLevel[j]; eni++) {
      mValuesByZoomLevel[j][eni]=0.5 * (mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * eni)] + mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * eni) + 1]);
    }
    location++;
  }
  Log.eni(""Scope"",""Squeezed..!!"");
  mInitialized=true;
}",890,9,"i:eni,numFrames:nStates,",161,1.8,ALERT
3525,,,20,2,,353,2.975346100330350,0
3526,"@Override protected int lookForSelectablePosition(int position,boolean lookDown){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookDown) {
      position=Math.max(0,position);
      while (position < count && !adapter.isEnabled(position)) {
        position++;
      }
    }
 else {
      position=Math.min(position,count - 1);
      while (position >= 0 && !adapter.isEnabled(position)) {
        position--;
      }
    }
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
 else {
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
}","@Override protected int lookForSeibleCondition(int version,boolean followDOWN){
  final ListAdapter  advert=mAdapter;
  if ( advert == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int allow= advert.getCount();
  if (!mAreAllItemsSelectable) {
    if (followDOWN) {
      version=Math.max(0,version);
      while (version <allowt &&  advertr.isEnabled(version)) {
        version++;
      }
    }
 else {
      version=Math.min(version,allow - 1);
      while (version >= 0 &&  advertr.isEnabled(version)) {
        version--;
      }
    }
    if (version < 0 || version >= allow) {
      return INVALID_POSITION;
    }
    return version;
  }
 else {
    if (version < 0 || version >= allow) {
      return INVALID_POSITION;
    }
    return version;
  }
}",162,5,"lookForSelectablePosition:lookForSeibleCondition,position:version,lookDown:followDOWN,adapter: advert,count:allow,",348,3.38,ALERT
3529,,,40,4,,551,6.6433953762054400,0
3530,"void cancelIncludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
","void cancelincludedonly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
",45,1,"cancelIncludedOnly:cancelincludedonly,",20,0.15,ALERT
3531,,,118,3,,554,3.4418338616689000,0
3532,"@Override public void run(){
  MultipleObjectsBundle data=generator.loadData();
  if (LOG.isVerbose()) {
    LOG.verbose(""Writing output ..."");
  }
  try {
    if (outputFile.exists() && LOG.isVerbose()) {
      LOG.verbose(""The file "" + outputFile + "" already exists, ""+ ""the generator result will be APPENDED."");
    }
    try (OutputStreamWriter outStream=new FileWriter(outputFile,true)){
      writeClusters(outStream,data);
    }
   }
 catch (  IOException e) {
    throw new AbortException(""IO Error in data generator."",e);
  }
  if (LOG.isVerbose()) {
    LOG.verbose(""Done."");
  }
}
","@Override public void all(){
  MultipleObjectsBundle out=generator.loadData();
  if (LOG.isVerbose()) {
    LOG.verbose(""Writing output ..."");
  }
  try {
    if (outputFile.exists() && LOG.isVerbose()) {
      LOG.verbose(""The file "" + outputFile + "" already exists, ""+ ""the generator result will be APPENDED."");
    }
    try (OutputStreamWriter outStream=new FileWriter(outputFile,true)){
      writeClusters(outStream,out);
    }
   }
 catch (  IOException e) {
    throw new AbortException(""IO Error in data generator."",e);
  }
  if (LOG.isVerbose()) {
    LOG.verbose(""Done."");
  }
}
",122,2,"run:all,data:out,",114,0.87,ALERT
3533,,,62,6,,560,5.976077020168300,0
3534,,,38,2,,371,3.3688347220420800,0
3535,,,88,5,,995,9.687950932979580,0
3536,,,26,2,,408,3.6017110466957100,0
3537,,,58,3,,409,3.702944060166680,0
3538,,,94,4,,691,6.184939177831010,0
3539,,,59,4,,708,4.5644487579663600,0
3540,,,120,3,,597,4.232685379187270,0
3541,"@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}","@Override public void render(final int type,final Graphics2D  g1,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff= g1.getTransform();
     g1.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2( g1);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
     g1.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}",120,8,"g2: g1,",57,0.35,ALERT
3542,,,40,2,,401,3.711001392205560,0
3543,,,37,2,,386,3.469954419136050,0
3544,,,56,1,,220,1.298310895760850,0
3545,,,61,5,,802,13.813304940859500,0
3546,,,82,3,,371,2.9674085776011100,0
3547,,,43,4,,763,6.952587497234350,0
3548,,,22,2,,364,3.0237855037053400,0
3549,,,20,1,,228,1.9093464930852300,0
3550,,,254,11,,2089,27.466162021954900,0
3551,"private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}","private void dulkShow(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      dulkShow(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      dulkShow(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      dulkShow(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}",755,17,"bulkLoad:dulkShow,",188,1.69,ALERT
3552,,,193,6,,1180,12.918105657895400,0
3553,,,34,3,,574,3.505973676840460,0
3554,,,20,1,,221,3.5076368689537000,0
3555,"protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
","protected Date Compocate(double total){
  if (Double.isNaN(total)) {
    return null;
  }
  long doubleTime=(long)total;
  Date dadateew Date(doubleTime);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
",63,5,"compute:Compocate,value:total,dateLong:doubleTime,",201,1.6,ALERT
3556,,,19,1,,208,1.8654948790868100,0
3557,,,52,2,,425,3.9308647871017500,0
3558,,,25,1,,204,1.2385186632474300,0
3559,,,43,2,,417,3.998119612534840,0
3560,,,13,1,,242,2.34131463766098,0
3561,"public RelNode convertSelect(SqlSelect select,boolean top){
  final SqlValidatorScope selectScope=validator.getWhereScope(select);
  final Blackboard bb=createBlackboard(selectScope,null,top);
  convertSelectImpl(bb,select);
  return bb.root;
}
","public RelNode canvertedSub(SqlSelect null,boolean bottom){
  final SqlValidatorScopwhereExppe=validator.getWhereScope(null);
  final Blackboard ok=createBlackboard(selwhereExpll,bottom);
  convertSelectImpokbb,null);
  return ok.root;
}
",48,5,"convertSelect:canvertedSub,select:null,top:bottom,selectScope:whereExp,bb:ok,",371,4.56,ALERT
3562,,,16,1,,236,2.3913181821505200,0
3563,,,13,1,,235,2.0018725752830500,0
3564,"private Node deleteMax(Node x){
  if (x.right == null)   return x.left;
  x.right=deleteMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}","private Node replacemax(Node v){
  if (v.right == null)   return v.left;
  xvrrightreplacemax(v.right);
  v.size=1 + size(v.left) + size(v.right);
  v.height=1 + Math.max(height(v.left),height(v.right));
  return balance(v);
}",84,5,"deleteMax:replacemax,x:v,",208,2.35,ALERT
3565,,,16,2,,425,4.106582423051200,0
3566,"public static String[] parseDelimitedList(String list,char delimiter){
  String delim="""" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}","public static String[] parseDelimizedArray(String base,char delamit){
  Strindivibim="""" + delamit;
  StringTokenizer sb=new StringTokenizer(base + divib + "" "",divib,true);
  ArrayList<String> ve=new ArrayList<String>();
  String firstToken="""";
  String character="""";
  while (sb.hasMoreTokens()) {
    String wtod=sb.nextToken();
    if (firstToken != null) {
      if (wtod.equals(divib)) {
        wcharacterwcharacter+ firstToken;
        if (firstToken.equals(divib))         wtod=null;
      }
 else {
        if (!wcharacterequals(""""))         ve.add(character);
        character="""";
      }
    }
    firstToken=wtod;
  }
  return ve.toArray(new String[0]);
}",160,9,"parseDelimitedList:parseDelimizedArray,list:base,delimiter:delamit,delim:divib,st:sb,v:ve,lastToken:firstToken,word:character,tok:wtod,",769,10.72,ALERT
3567,"public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}
","public Object addObject(Object temp,Object message){
  return (objectCache.put(temp,message));
}
",24,3,"putResource:addObject,key:temp,value:message,",256,2.33,ALERT
3568,"private void validateClassName(String className){
  String nvalue=className.trim();
  if (!nvalue.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,className);
  }
}
","private void valididateClassInfo(String functionValue){
  String nvalnjoinctionValue.trim();
  if (!njoin.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,functionValue);
  }
}
",40,3,"validateClassName:valididateClassInfo,className:functionValue,nvalue:njoin,",211,1.57,ALERT
3569,,,110,5,,670,18.451989273230200,0
3570,,,32,1,,225,1.9297134518623400,0
3571,,,564,13,,2390,31.429110383987400,0
3572,"@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
","@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> Conate(final Stream<? extends U> other){
  return fromStream(Stream.Conate(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
",78,2,"concat:Conate,",31,0.96,ALERT
3573,"public AABB merge(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
","public AABB usege(AABB other){
  MINY=Math.min(MINY,other.MINY);
  callY=Math.max(callY,other.callY);
  miniYY=Math.min(miniYY,other.miniYY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
",90,8,"merge:usege,minX:MINY,maxX:callY,minY:miniYY,",216,1.72,ALERT
3574,"public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}","public void plIDE(SLIDE plIDE){
  if (plIDE == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}",63,2,"slide:plIDE,",38,0.31,ALERT
3575,"@Override public final void sample(){
  _value=_acquireCount.get() - _releaseCount.get();
}
","@Override public final void  stop(){
  _value=_acquireCount.get() - _releaseCount.get();
}
",24,2,"sample: stop,",38,0.26,ALERT
3576,,,47,3,,541,4.110945367813110,0
3577,"public InMemoryCursor(String[] columnNames){
  mCurrentPosition=-1;
  mColumnNames=columnNames;
}","public InMemoryCursor(String[] colName){
  mClientPosition=-1;
  mColumnNames=colNammCellValuesames=colName;
}",19,3,"columnNames:colName,mCurrentPosition:mClientPosition,mColumnNames:mCellValues,",185,1.63,ALERT
3578,,,29,2,,431,2.810639476776120,0
3579,,,175,5,,970,8.543227052688600,0
3580,"protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isFilled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isFilled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isFilled && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}","protected ArrayList<float[]> _followLoop(float[] rawllposes,int ltype,int nseqs,boolean isFilled){
  boolean WARN=Debug.debugging(""proj"");
  int lelenawllposes.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltltype   return doPolyDispatch(rawllposes,ltype,nseqs,isFilled);
  int invalid_counter=0;
  boolean curr_outbad, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar anc__save=null, azLogsaving=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> modules=new ArrayList<AzimuthVar>(128);
  float[] h_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllposes[0],rawllposes[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_counter;
  }
 else {
    azVar.root=0;
    azVaazVarrcurrent_azimuthatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllposes[0],rawllposes[1]);
    if (!isFilled) {
      modules.add(azVar);
    }
 else {
      anc__save=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllposes[j],rawllposes[j + 1],temp,azVar);
    curr_outbad=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_outbad && prev_invalid) {
      azVar.root=i - 1;
      azVaazVarrcurrent_azimuthatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllposes[j - 2],rawllposes[j - 1]);
      modules.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_outbad) {
      if (!prev_invalid) {
        azVar.root=i;
        if (isFilled && (invalid_counter == 0)) {
          azLogsaving=azVar;
        }
 else {
          modules.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_counter;
    }
   prev_invalidd=curr_outbad;
  }
  if (invalid_counter == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_counter == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (azLogsaving != null)) {
      int l=azLogsaving.root;
      h_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,h_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,h_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      azLogsaving.root=len + l;
      sectmodules(azLogsaving);
      xs=h_;
      ys=y_;
    }
 else {
      if (WARN && isFilled && (azLogsaving == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.root=i;
      j=rawllposes.length;
      azVaazVarrcurrent_azimuthatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllposes[j - 2],rawllposes[j - 1]);
      modules.add(azVar);
    }
  }
 else   if (azLogsaving != null) {
    if (WARN)     Debug.output(""DD, filled!"");
    smodulesadd(anc__save);
    sectmodules(azLogsaving);
  }
  int size=modules.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPolyxssyss,modules,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)modules.get(j);
    AzimuthVar az2=(AzimuthVar)modules.get(j + 1);
    int off1=az1.root;
    int off2=az2.root;
    int l=off2 - off1;
    h_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,h_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(h_);
    ret_val.add(y_);
  }
  return ret_val;
}",966,24,"_forwardPoly:_followLoop,rawllpts:rawllposes,nsegs:nseqs,DEBUG:WARN,invalid_count:invalid_counter,curr_invalid:curr_outbad,az_first:anc__save,az_save:azLogsaving,sections:modules,x_:h_,index:root,",998,36.93,ALERT
3581,,,140,2,,437,4.186916522185010,0
3582,,,51,4,,808,30.59313235282900,0
3583,"public static double sampleSkew(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}","public static double sampleskyweight(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}",63,7,"sampleSkew:sampleskyweight,",43,0.4,ALERT
3584,,,81,4,,791,6.117572053273520,0
3585,"public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generate();
}","public void finidate(BatchEnvironment queue,ClassDefinition ecdefinition,File destDir){
  RemoteClass remoteClastargetclassss.forClass(queue,ecdefinition);
  if (targetclass == null)   return;
  RMIGenerator  flow;
  try {
    gen=new RM flownerator(queue,ecdefinition,destDir,targetclass,version);
  }
 catch (  ClassNotFound e) {
    queue.error(0,""rmic.class.not.found"",e.name);
    return;
  }
   flow.finidate();
}",85,6,"generate:finidate,env:queue,cdef:ecdefinition,remoteClass:targetclass,gen: flow,",342,2.86,ALERT
3586,,,129,3,,483,3.9572097182273900,0
3587,,,44,3,,556,4.15009126663208,0
3588,"public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}","public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder bf=new StringBuilder();
  for (int eni=startPos; eni < endPos; eni++) {
    bf.append(convertFromUtf32ToCharArray(text[eni]));
  }
  return bf.toString();
}",62,6,"i:eni,sb:bf,",76,0.8,ALERT
3589,"public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
","public boolean onSchemeAsLib(Config data,Config mr,IScheduler bcheduler,PackingPlan reading){
  boolean true=false;
  try {
    scheduler.initialize(data,mbchedulerheduler.initialize(data,mr);
    true=bcheduler.onSchedule(reading);
    if (true) {
 true  ret=SchedulerUtils.setLibSchedulerLocation(mr,bcheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    bcheduler.close();
  }
  return true;
}
",85,6,"onScheduleAsLibrary:onSchemeAsLib,config:data,runtime:mr,scheduler:bcheduler,packing:reading,ret:true,",266,2.67,ALERT
3590,,,78,5,,785,6.747212286790210,0
3591,"public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}","public String syllablify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllablify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}",73,5,"syllabify:syllablify,",46,0.48,ALERT
3592,,,22,3,,451,3.662874627113340,0
3593,"public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}","public WritableRaster createReadablesChildren(int x,int y,int width,int distance,int x0,int dy50,int channelList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + distance < y) || (y + distance > this.minY + this.distance)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (channelList != null)   sm=sampleModel.createSubsetSampleModel(channelList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=dy50 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,dy50,width,distance),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}",201,11,"createWritableChild:createReadablesChildren,y0:dy50,bandList:channelList,height:distance,",212,11.61,ALERT
3595,,,195,8,,1478,11.289910670121500,0
3596,"void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}","void actionPreDoChange(ActionType type,long pointer,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != pointer || type == ActionType.DELETE && actionPosition() != pointer && actionPosition() - 1L != pointer) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > pointer;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(pointer);
    previousTime=System.currentTimeMillis();
  }
}",118,6,"eventPreModify:actionPreDoChange,position:pointer,",77,0.64,ALERT
3597,"public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}
","public int last(char cbuf[],int offset,int length) throws IOException {
  return sd.last(cbuf,offset,length);
}
",31,4,"read:last,",40,0.46,ALERT
3598,"String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}","String decodeTextValue(byte[] script) throws IOException {
  boolean isCompressed=((script.length > 1) && (script[0] == TEXT_COMPRESSION_HEADER[0]) && (script[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(script.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < script.length) {
      if (script[dataEnd] == (byte)0x00) {
        decodeTextSegment(script,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(script,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(script,getCharset());
}",168,7,"data:script,",67,0.65,ALERT
3599,,,243,4,,759,5.1196526726086900,0
3600,,,174,7,,1375,16.107053979237900,0
3601,"public double reduceTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}","public double redDownto(int wd,int x,double force){
  int w=getIconWidth();
  int h=getIconHeight();
  double average=1.0;
  iw (w > wd) {
 averageale=((double)wd) / w;
  }
 hif (h > x) {
    scale=Math.maverageale,((double)x) / h)averagescale=Math.min(scale,((double)x) / h);
  }
  if (average < 1) {
    if (force > 0.0) {
      average=Math.max(average,force);
    }
    AffineTransform t=AftsineTransform.getScaleInstance(average,average);
    transformImage((int)Math.ceil(average * w),(int)Math.ceil(average * h),ts,null);
  }
  return average;
}",152,8,"reduceTo:redDownto,width:wd,height:x,limit:force,scale:average,t:ts,",513,5.85,ALERT
3602,,,161,1,,203,1.4987196326255800,0
3603,,,69,1,,223,2.29418408870697,0
3604,,,61,3,,611,8.335563039779660,0
3605,,,30,3,,631,5.492229771614080,0
3606,,,129,8,,1574,12.402857327461200,0
3607,"public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
","public void reinding(){
synchronized (used) {
    for (    ParameterPair pain : used) {
      current.addParameter(pain.option,pain.value);
    }
    used.clear();
  }
}
",41,2,"rewind:reinding,pair:pain,",269,4.39,ALERT
3608,"public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_points.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}","public void filled_draw(PlaPointFloat[] p_lines,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_lines.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_lines[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}",142,9,"fill_shape:filled_draw,p_points:p_lines,",214,1.7,ALERT
3609,"@Override public boolean start() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
","@Override public boolean start() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    sharditerators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
",93,5,"shardIterators:sharditerators,",30,0.49,ALERT
3610,"private void connectEqualized(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}","private void connectEchronised(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}",173,11,"connectEqualized:connectEchronised,",60,1.41,ALERT
3611,,,16,1,,219,1.9037873069445300,0
3612,"private DBID stringToDBID(String query){
  return DBIDUtil.importInteger(Integer.valueOf(query));
}
","private DBID stringToBBIP(String database){
  return DBIDUtil.importInteger(Integer.valueOf(database));
}
",22,2,"stringToDBID:stringToBBIP,query:database,",349,2.69,ALERT
3613,"public static String format(final String value,String... params){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}","public static String format(final String response,String... params){
  validate(response,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(response);
  String result=response;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}",122,7,"value:response,",56,0.44,ALERT
3614,,,22,2,,424,3.184645334879560,0
3615,"private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
","private static synchronized boolean isEnabledInternal(HttpCallerInfo fci){
  if (confirmed == null) {
    confirmed=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String handame=fci.host;
  handame=handame.toLowerCase();
  if (confirmed.containsKey(handame)) {
    return confirmed.get(handame);
  }
  Negotiator neg=Negotiator.getNegotiator(fci);
  if (neg != null) {
    confirmed.put(handame,true);
    cache.put(handame,neg);
    return true;
  }
 else {
    confirmed.put(handame,false);
    return false;
  }
}
",131,6,"hci:fci,isSupportedImpl:isEnabledInternal,supported:confirmed,hostname:handame,",161,1.36,ALERT
3616,,,114,6,,1117,21.304032099247000,0
3617,,,73,4,,791,13.356987563769000,0
3618,"public boolean isArmed(){
  return other.isArmed();
}
","public boolean isARmented(){
  return other.isARmented();
}
",14,1,"isArmed:isARmented,",219,2.25,ALERT
3619,,,86,4,,717,6.4639828443527200,0
3620,,,34,1,,241,2.243767527739210,0
3621,,,58,4,,545,5.181877783934280,0
3622,"private static float computeSimilarity(Lane a,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=a.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}","private static float computeLikeifier(Lane sta,Lane pb){
  int right=0;
  int data=0;
  int firfirstCoinateth.max(sta.getFirstNonGapPosition(),pb.getFirstNonGapPosition());
  int laslastClordsth.min(sta.getLastNonGapPosition(),pb.getLastNonGapPosition());
  foisi (int i=firstCoinaisie; i <= lastClords; isi++) {
    char cha=che.charAt(isi);
    char chbcorab.charAt(isi);
    if (Character.isLetter(che) && Character.isLetter(corab)) {
      if (Character.toLowerCase(cche == Character.toLowerCase((ccorab))       right++;
 else       data++;
    }
  }
  return Math.max(right > 0 ? 1 : 0,right - 3 * data);
}",162,10,"computeSimilarity:computeLikeifier,a:sta,b:pb,same:right,diff:data,firstCoordinate:firstCoinate,lastCoordinate:lastClords,i:isi,cha:che,chb:corab,",838,11.21,ALERT
3623,"private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();
  accountdetailmap.put(VoucherConstant.GLCODE,glcode);
  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return accountdetailmap;
}
","private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object>  accountpartmap=new HashMap<String,Object>();
   accountpartmap.put(VoucherConstant.GLCODE,glcode);
   accountpartmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
   accountpartmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
   accountpartmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return  accountpartmap;
}
",87,5,"accountdetailmap: accountpartmap,",103,1.0,ALERT
3624,"static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){
  String s=params.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(params,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}","static String matchStringorFail(Pattern po,ToDateParser parse,Enum<?> AEnum){
  String inputss=parse.getInputStr();
  Matcher matcherenqcheenqts);
  if (!enq.find()) {
    throwException(parse,format(""Issue happened when parsing token \'%s\'"",AEnum.name()));
  }
  return enq.group(1);
}",72,6,"matchStringOrThrow:matchStringorFail,p:po,params:parse,aEnum:AEnum,s: inputs,matcher:enq,",873,10.96,ALERT
3625,"@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
","@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHivedDums() throws IOException {
  IHiveClient  horyStore=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results= horyStore.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
",81,3,"hiveClient: horyStore,showHiveDatabases:showHivedDums,",61,0.53,ALERT
3626,,,107,4,,609,4.682368465264640,0
3627,,,16,2,,432,3.2255799571673100,0
3628,,,34,2,,293,3.1550610939661700,0
3629,,,57,2,,420,3.1847503503163700,0
3630,"public static Entry makeEntry(List<String> ldifLines){
  return makeEntry(ldifLines.toArray(new String[ldifLines.size()]));
}
","public static Entry makerPage(List<String> ldintLoamps){
  return makerPage(ldintLoamps.toArray(new String[ldintLoamps.size()]));
}
",32,2,"makeEntry:makerPage,ldifLines:ldintLoamps,",63,0.59,ALERT
3631,"public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}","public static CompiereColor parse(String Attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (Attributes != null && Attributes.length() > 0)     cc.parseAttributres(Attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + Attributes + "") - ""+ e.toString());
  }
  return cc;
}",69,3,"attributes:Attributes,",41,0.41,ALERT
3632,,,197,12,,2285,23.923764129479700,0
3633,"private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}","private void startHideAnimationation(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int cli=0; cli < buttonNum; cli++) {
        setHideAnimation(dots[cli],circleButtons[cli],endLocations[cli],startLocations[cli],cli);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int cli=0; cli < buttonNum; cli++) {
        setHideAnimation(dots[cli],circleButtons[cli],endLocations[cli],startLocations[cli],buttonNum - cli - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random draw=new Random();
      boolean[] added=new boolean[buttonNum];
      for (int cli=0; cli < buttonNum; cli++)       usaddedli]=false;
      int v=0;
      while (true) {
        int cli=draw.nextInt(buttonNum);
        if (!usaddedli]) {
          usaddedli]=true;
          setHideAnimation(dots[covcircleButtons[covendLocations[covstartLocations[covcli);
          v++;
          if (v == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int cli=0; cli < buttonNum; cli++) {
        setHideAnimation(bars[cli],hamButtons[cli],endLocations[cli],startLocations[cli],cli);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int cli=0; cli < buttonNum; cli++) {
        setHideAnimation(bars[cli],hamButtons[cli],endLocations[cli],startLocations[cli],buttonNum - cli - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random draw=new Random();
      boolean[] added=new boolean[buttonNum];
      for (int cli=0; cli < buttonNum; cli++)       usaddedli]=false;
      int v=0;
      while (true) {
        int cli=draw.nextInt(buttonNum);
        if (!usaddedli]) {
          usaddedli]=true;
          setHideAnimation(bars[covhamButtons[covendLocations[covstartLocations[covcli);
          v++;
          if (v == buttonNum)           break;
        }
      }
    }
  }
}",524,5,"startHideAnimations:startHideAnimationation,i:cli,random:draw,used:added,count:v,",383,3.4,ALERT
3635,,,136,8,,1435,22.05432132482530,0
3636,"public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",policyName);
    }
 else {
      format=String.format(""SG_%s_%d"",policyName,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}","public String generateRuleNames(String rolePart,Set<String> existingGROUPTypes,String staticRoleName){
  int limit=0;
  String att=null;
  while (limit <= existingGROUPTypes.size()) {
    if (0 == limit) {
    attat=Strinattat(""SG_%s"",rolePart);
    }
 else {
    attat=Strinattat(""SG_%s_%d"",rolePart,limit);
    }
    Str generatedCompanyNamesName=generate(staticRoleName,att,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGROUPTypes.contains( generatedCompanyNames)) {
      return  generatedCompanyNames;
    }
    limit++;
  }
  return generatstaticRoleNameme,Strinattat(""SG1_%s"",rolePart),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}",134,7,"generateGroupName:generateRuleNames,policyName:rolePart,existingGroupNames:existingGROUPTypes,parentGroupName:staticRoleName,count:limit,format:att,generatedGroupName: generatedCompanyNames,",389,6.09,ALERT
3637,,,39,3,,539,3.9380709091822300,0
3639,,,371,4,,846,11.121629746755000,0
3640,,,93,5,,1004,8.14160943031311,0
3641,,,39,3,,618,7.093102459112800,0
3642,"public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
","public boolean remove(final int osition){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,osition);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
",44,4,"position:osition,",40,0.28,ALERT
3643,"public void show(@IdRes final int itemId){
  map.add(itemId);
  navigation.invalidateBadge(itemId);
}
","public void  invisible(@IdRes final int iconRef){
  map.add(iconRef);
  navigation.invalidateBadge(iconRef);
}
",26,2,"show: invisible,itemId:iconRef,",169,1.35,ALERT
3645,,,18,2,,353,2.4929178516070000,0
3646,,,31,4,,806,11.330885358651500,0
3647,,,14,1,,242,1.7132103125254300,0
3648,,,55,3,,577,6.571918058395390,0
3649,"public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}","public static long[] changes(Long[] arr){
  long[] dest=new long[arr.length];
  for (int i=0; i < arr.length; i++) {
    Long v=arr[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}",75,5,"values:changes,array:arr,",76,0.65,ALERT
3650,"@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage image=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    image=createImage(w,h,rgb.getData());
  }
  return image;
}
","@Override public BufferedImage JPEGToRGBBInd(final byte[] sample,final int ww,final int hh,final int pX,final int pY){
  BufferedImage info=null;
  Raster ram=JPEGDecoder.getRasterFromJPEG(sample,""JPEG"");
  if (ram != null) {
    ram=cleanupRaster(ram,pX,pY,componentCount);
    final int w=ram.getWidth();
    final int h=ram.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ram.getDataBuffer();
    info=createImage(w,h,rgb.getData());
  }
  return info;
}
",119,11,"ras:ram,image:info,JPEGToRGBImage:JPEGToRGBBInd,data:sample,",324,2.85,ALERT
3651,"public boolean hasMyomerBooster(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
","public boolean hasMyomerBooster(){
  for (  Mounted mEquip : getMisc()) {
    MiscType  mconfig=(MiscType)mEquip.getType();
    if ( mconfig.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
",56,3,"mtype: mconfig,",32,0.27,ALERT
3652,,,54,3,,491,5.7783201217651400,0
3653,"public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + ""_remove_event"");
  try {
    String path=event.getId();
    String responsePath=dir + ""/"" + response_prefix+ path.substring(path.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,event.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}","public byte[] register(QueueEvent events) throws KeeperException, InterruptedException {
  TimerContext collect=stats.collect(dir + ""_remove_event"");
  try {
    String pmessageevents.getId();
    String responresponseDir ""/"" + response_prefix+ message.substring(message.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responseDir,true)) {
      zookeeper.setData(rresponseDirevents.getBytes(),true);
    }
    byte[] daterrorokeeper.getData(message,null,null,true);
    zookeeper.delete(message,-1,true);
    return error;
  }
  finally {
    collect.stop();
  }
}",132,6,"remove:register,event:events,time:collect,path:message,responsePath:responseDir,data:error,",307,2.56,ALERT
3654,,,88,2,,443,3.4204787611961400,0
3655,"int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}","int PutBuffer(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int sync=(int)lsize;
  expandHeap(sync);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(sync);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,sync);
  int oldOffset=this.heapSize;
  this.heapSize+=sync;
  return oldOffset;
}",145,8,"putData:PutBuffer,size:sync,",234,2.44,ALERT
3656,"public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}","public int findEventPositionNearestTime(Time time,long uri){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == uri) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}",339,17,"id:uri,",104,1.76,ALERT
3657,,,97,7,,1253,23.17105381091440,0
3658,"protected void writeColumnAutoIncrementStmt(Table table,Column column,StringBuilder ddl){
  ddl.append(""IDENTITY"");
}
","protected void writeColumnAutoIncrementsStrlt(Table TABLE,Column client,StringBuilder DDL){
  DDL.append(""IDENTITY"");
}
",22,4,"writeColumnAutoIncrementStmt:writeColumnAutoIncrementsStrlt,table:TABLE,column:client,ddl:DDL,",251,2.39,ALERT
3659,"@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void metadataError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}","@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void adataException(Locale local,@PathVariable(value=""tenant"") String participants,HttpServletResponse Response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",local.toString(),participants);
  metadataDefaultTenantBindingError(local,Response);
}",53,4,"metadataError:adataException,locale:local,tenant:participants,response:Response,",453,3.42,ALERT
3660,"private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}","private void caint(Painter l,SynthContext ch,Graphics gl,int X,int l,int v,int u,AffineTransform alpha){
  if (l != null) {
    if (gl instanceof Graphics2D) {
      Graphics2D gmgfx(Graphics2D)gl;
      if (alpha != null) {
mgfx     gfx.alpha(alpha);
      }
      mgfx.translate(X,l);
      l.caintmgfxx,ch.getComponent(),v,u);
      mgfx.translate(-X,-l);
      if (alpha != null) {
        try {
  mgfx     gfx.alpha(alpha.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage aff=new BufferedImage(v,u,BufferedImage.TYPE_INT_ARGB);
      Graphics2D mgfx=aff.createGraphics();
      if (alpha != null) {
mgfx     gfx.alpha(alpha);
      }
      l.caintmgfxx,ch.getComponent(),v,u);
      mgfx.dispose();
      gl.drawImage(aff,X,l,null);
      aff=null;
    }
  }
}",223,11,"paint:caint,p:l,ctx:ch,g:gl,x:X,y:l,w:v,h:u,transform:alpha,gfx:mgfx,img:aff,",715,7.47,ALERT
3661,"public void put(int fieldNumber,FieldData data){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=data;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=data;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=data;
    mSize++;
  }
}","public void  Put(int machineCode,FieldData map){
  int type=binarySearch(machineCode);
  if (type >= 0) {
    MParameters[type]=map;
  }
 else {
    type=~type;
    if (type < mSize && MParameters[type] == DELETED) {
      mWordEvents[type]=machineCode;
      MParameters[type]=map;
      return;
    }
    if (mGarbage && mSize >= mWordEvents.length) {
      gc();
      type=~binarySearch(machineCode);
    }
    if (mSize >= mWordEvents.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] annvalues=new FieldData[n];
      System.arraycopy(mWordEvents,0,nkeys,0,mWordEvents.length);
      System.arraycopy(MParameters,0,annvalues,0,MParameters.length);
      mWordEvents=nkeys;
      MParameters=annvalues;
    }
    if (mSize - type != 0) {
      System.arraycopy(mWordEvents,type,mWordEvents,type + 1,mSize - type);
      System.arraycopy(MParameters,type,MParameters,type + 1,mSize - type);
    }
    mWordEvents[type]=machineCode;
    MParameters[type]=map;
    mSize++;
  }
}",247,10,"i:type,mData:MParameters,mFieldNumbers:mWordEvents,fieldNumber:machineCode,data:map,nvalues:annvalues,put: Put,",363,4.91,ALERT
3662,,,17,2,,416,4.364264631271360,0
3663,,,32,3,,601,4.649177654584250,0
3664,,,264,17,,3214,26.448879873752600,0
3666,,,153,2,,389,6.057948092619580,0
3667,"@Override public void close(){
  try {
    flush();
  }
 catch (  AMLogException ale) {
    Debug.error(tableName + "":DBHandler:close/flush error: "" + ale.getMessage());
  }
  if (conn != null) {
    try {
      conn.close();
    }
 catch (    SQLException ce) {
      Debug.error(tableName + "":DBHandler: Unable To Close Connection"",ce);
    }
  }
  stopBufferTimer();
}
","@Override public void create(){
  try {
    flush();
  }
 catch (  AMLogException ale) {
    Debug.error(tableName + "":DBHandler:close/flush error: "" + ale.getMessage());
  }
  if (conn != null) {
    try {
      conn.create();
    }
 catch (    SQLException ce) {
      Debug.error(tableName + "":DBHandler: Unable To Close Connection"",ce);
    }
  }
  stopBufferTimer();
}
",77,1,"close:create,",34,0.27,ALERT
3669,"public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}","public static int id(String all,String delumit,boolean allowempty){
  if (delumit.length() == 1)   return id(all,delumit.charAt(0),allowempty);
  char[] div=delumit.toCharArray();
  int id=StringUtil.length(all);
  if (id == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < id; i++) {
    c=all.charAt(i);
    for (int y=0; y < div.length; y++) {
      if (c == div[y]) {
        if (!allowempty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!allowempty || last < id)   count++;
  return count;
}",173,10,"del:div,list:all,delimiter:delumit,ignoreEmpty:allowempty,len:id,",315,4.77,ALERT
3670,,,109,5,,869,7.809539651870730,0
3671,"public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}","public static Map<Object,Long> valueHistorical(GeoTimeSerie gamete){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gamete.values; i++) {
    Object value=GTSHelper.valueAtIndex(gamete,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gamete) && gamete.bucketcount != gamete.values) {
    occurrences.put(null,(long)(gamete.bucketcount - gamete.values));
  }
  return occurrences;
}",145,5,"gts:gamete,valueHistogram:valueHistorical,",76,1.09,ALERT
3672,,,23,2,,407,4.6336900393168100,0
3673,"static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
","static Map addElementToMap(String element,Set results,Map bymap){
  if ((element != null) && (bymap != null)) {
    bymap.put(element,results);
  }
  return bymap;
}
",43,4,"key:element,toMap:bymap,values:results,",125,1.03,ALERT
3674,,,54,2,,419,2.8620588183403000,0
3675,"public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){
  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
  if (!processUpdates) {
    deviceListeners.clearListeners();
  }
  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceListeners.addListener(""device"",listener);
    }
  }
  return res;
}","public IDevice learnentity(long remoteAddress,Short fnic,Integer ipV2Address,Long  switchDCID,Integer changePORT,boolean  processUplines){
  List<IDeviceListener> peachers=deviceListeners.getOrderedListeners();
  if (! processUplines) {
    deviceListeners.clearListeners();
  }
  if (fnic != null && fnic.shortValue() <= 0)   fnic=null;
  if (ipV2Address != null && ipV2Address == 0)   ipV2Address=null;
  IDevice res=ESrnDeviceByEntity(new Entity(remoteAddress,fnic,ipV2Address, switchDCID,changePORT,new Date()));
  if (peachers != null) {
    for (    IDeviceListeneristenderr : peachers) {
      deviceListeners.addListener(""device"",istender);
    }
  }
  return ES;
}",135,10,"learnEntity:learnentity,macAddress:remoteAddress,vlan:fnic,ipv4Address:ipV2Address,switchDPID: switchDCID,switchPort:changePORT,processUpdates: processUplines,listeners:peachers,res:ES,listener:istender,",733,8.22,ALERT
3676,"@GenIgnore static Record createRecord(String name,String address,Class itf,JsonObject metadata){
  return createRecord(name,address,itf.getName(),metadata);
}
","@GenIgnore static Record  createField(String word,String description,Class ITc,JsonObject xml){
  return  createField(word,description,ITc.getName(),xml);
}
",36,5,"createRecord: createField,name:word,address:description,itf:ITc,metadata:xml,",212,1.88,ALERT
3677,"public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}","public static EventBean[]  addAsApp(EventBean[] form,Collection<EventBean> eventsFromAdds){
  EventBean[] ne newMatrixew EventBean[form.length + eventsFromAdds.size()];
  System.arraycopy(form,0 newMatrixy,0,form.length);
  intcurrencyr=form.length;
  for (  EventBean eveeventPageAddeventsFromAdds) {
     newMatrix[currency++]=eventPageAdd;
  }
  return  newMatrix;
}",83,6,"addToArray: addAsApp,array:form,eventsToAdd:eventsFromAdds,newArray: newMatrix,counter:currency,eventToAdd:eventPageAdd,",453,6.12,ALERT
3678,,,28,3,,553,6.188786625862120,0
3679,"@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){
  String suffixCloudUnit=application.getSuffixCloudUnitIO();
  JedisPool pool=null;
  Jedis jedis=null;
  try {
    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedis=pool.getResource();
    String subNameSpace=concatSubNameSpace(application);
    String key=subNameSpace + suffixCloudUnit;
    String frontend=""frontend:"" + key.toLowerCase();
    jedis.lset(frontend,1,""http://"" + dockerManagerIP + "":""+ serverPort);
    String frontendServerManager=""frontend:manager-"" + key.toLowerCase();
    jedis.lset(frontendServerManager,1,""http://"" + dockerManagerIP + "":""+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jedis != null) {
      pool.destroy();
    }
  }
}","@Override public void  updateClientAgent(Application database,String dockermanagerAP,String workerAddress,String serverManagerPort){
  StrisuffixDirectPartnit=database.getSuffixCloudUnitIO();
  JedisPool response=null;
  Jedis Jredos=null;
  try {
    response=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jediJredosponse.getResource();
    StrisubNameSpaceace=concatSubNameSpace(database);
    String kleasessubNameSpace+ suffixDirectPart;
    String frforeedgefrontend:"" + lease.toLowerCase();
    jedJredoset(froforeedge""http://"" + dockermanagerAP + "":""+ workerAddress);
    String frfrontendServiceManagerfrontend:manager-"" + lease.toLowerCase();
    Jredos.lset(frontendServiceManager,1,""http://"" + dockermanagerAP + "":""+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (Jredos != null) {
      response.destroy();
    }
  }
}",178,12,"updateServerAddress: updateClientAgent,application:database,dockerManagerIP:dockermanagerAP,serverPort:workerAddress,suffixCloudUnit:suffixDirectPart,pool:response,jedis:Jredos,key:lease,frontend:foreedge,frontendServerManager:frontendServiceManager,",550,4.63,ALERT
3680,"public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {
  String line=reader.readLine();
  while (line != null && line.length() > 0) {
    line=reader.readLine();
  }
}","public void readTransPortIdd(final int[] columnesIndes,final BufferedReader null) throws IOException {
  String line=null.readLine();
  while (line != null && line.length() > 0) {
    line=null.readLine();
  }
}",51,4,"columnsIndices:columnesIndes,readTransportSystems:readTransPortIdd,reader:null,",87,0.69,ALERT
3681,,,67,3,,558,4.938970287640890,0
3682,,,21,2,,445,5.246833837032320,0
3683,,,92,3,,576,4.959466584523520,0
3684,,,42,2,,413,4.239710319042210,0
3685,,,79,4,,752,8.444393225510920,0
3686,"private void loadOrgAccessRole(ArrayList<OrgAccess> list){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  String sql=""SELECT * FROM AD_Role_OrgAccess "" + ""WHERE AD_Role_ID=? AND IsActive=\'Y\'"";
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getAD_Role_ID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());
      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
 finally {
    DB.close(rs,pstmt);
  }
}","private void loadRoundAccountList(ArrayList<OrgAccess> cli){
  PreparedStatement pstm=null;
  ResultSet ts=null;
  String json=""SELECT * FROM AD_Role_OrgAccess "" + ""WHERE AD_Role_ID=? AND IsActive=\'Y\'"";
  try {
    pstm=DB.prepareStatement(json,get_TrxName());
    pstm.setInt(1,getAD_Role_ID());
   tss=pstm.executeQuery();
    while (ts.next()) {
      MRoleOrgAccess eno=new MRoleOrgAccess(getCtx(),ts,get_TrxName());
      loadOrgAccessAdd(cli,new OrgAccess(eno.getAD_Client_ID(),eno.getAD_Org_ID(),eno.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,json,e);
  }
 finally {
    DB.closetss,pstm);
  }
}",150,6,"loadOrgAccessRole:loadRoundAccountList,list:cli,pstmt:pstm,rs:ts,sql:json,oa:eno,",364,3.96,ALERT
3687,"protected void flip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}","protected void blip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.blip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}",69,3,"flip:blip,",34,0.31,ALERT
3688,"private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
","private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> transform){
  return null;
}
",27,3,"after:transform,",31,0.28,ALERT
3689,"private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}","private Pair<Entry,char[]> recoverCode(KeyStore KS,String sea,char[] pscale,char[] spsecret) throws Exception {
  if (KS.containsAlias(sea) == false) {
    MessageFormat from=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[ sourcesce={sea};
    throw new Exception(from.format( sources));
  }
  PasswordProtection gp=null;
  Entry record;
  try {
  recordry=KS.getEntry(sea,gp);
    spsecret=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(KS.getType()) || KeyStoreUtil.isWindowsKeyStore(KS.getType())) {
      throw une;
    }
    if (spsecret != null) {
      pp=ngp PasswordProtection(spsecret);
    recordry=KS.getEntry(sea,gp);
    }
 else {
      try {
        gp=new PasswordProtection(pscale);
      recordry=KS.getEntry(sea,gp);
        spsecret=pscale;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(KS.getType())) {
          throw une2;
        }
 else {
        spsecretey=getKeyPasswd(sea,null,null);
          pp=ngp PasswordProtection(spsecret);
        recordry=KS.getEntry(sea,gp);
        }
      }
    }
  }
  return Pair.of(entrrecordecret);
}",265,9,"recoverEntry:recoverCode,ks:KS,alias:sea,pstore:pscale,pkey:spsecret,form:from,source: sources,pp:gp,entry:record,",544,12.15,ALERT
3690,,,55,3,,385,4.759803060690560,0
3691,,,22,5,,963,19.046514248848000,0
3692,,,54,4,,774,6.680974010626480,0
3693,"private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}
","private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTTest(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToCoes=new LinkedHashMap<>();
  for (  TestCase script : tests) {
    testToCoes.put(script,filterSupportedGoals(new LinkedHashSet<>(script.getCoveredGoals())));
  }
  return testToCoes;
}
",72,4,"initializeCoverageMapFromTests:initializeCoverageMapFromTTest,testToGoals:testToCoes,test:script,",178,2.49,ALERT
3694,"void putFile(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
","void putPath(String referencepath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),referencepath);
    File src=codebase.getFile(referencepath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",referencepath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",referencepath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",referencepath);
    }
    String mimeType=guessMimeType(referencepath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,referencepath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",referencepath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",referencepath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",referencepath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
",316,10,"relativePath:referencepath,putFile:putPath,",316,3.2,ALERT
3695,,,22,1,,239,2.4805156191190100,0
3696,,,339,17,,1728,11.007786397139200,0
3698,"protected void onProgress(int itemcount,int size){
}
","protected void oneProgress(int  itemcode,int scene){
}
",12,3,"onProgress:oneProgress,itemcount: itemcode,size:scene,",448,4.87,ALERT
3699,,,23,2,,359,8.919192763169610,0
3700,"public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
","public void init(RemoteAuthenticatedUser activeMail){
  this.activeMail=activeMail;
}
",15,2,"currentUser:activeMail,",36,0.24,ALERT
3701,"protected void execute(Runnable evt){
  executor.execute(evt);
}
","protected void unit(Runnable evv){
  executor.unit(evv);
}
",16,2,"execute:unit,evt:evv,",88,0.66,ALERT
3702,"public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug(""invoke static Method"");
  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);
  return invokeMethod(method,null,args);
}
","public static Object invokeInternalOperation(BshClassManager  bpm,Class  clan,String className,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug(""invoke static Method"");
  Method mclresolveExpectedJavaMethod( bpm, clan,null,className,args,true);
  return invokeMethod(cl,null,args);
}
",62,5,"invokeStaticMethod:invokeInternalOperation,bcm: bpm,clas: clan,methodName:className,method:cl,",274,2.37,ALERT
3703,,,75,5,,762,6.087184445063270,0
3704,,,30,4,,745,11.05203902721410,0
3705,"private static boolean isWritable(@NonNull final File file){
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}
","private static boolean isWritable(@NonNull final File server){
  boolean isEsiting=server.exists();
  try {
    FileOutputStream office=new FileOutputStream(server,true);
    try {
      office.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=server.canWrite();
  if (!isEsiting) {
    server.delete();
  }
  return result;
}
",91,5,"file:server,isExisting:isEsiting,output:office,",104,0.99,ALERT
3706,"@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
","@NotNull public PsiQuery  findAssorted(@NotNull final Class<? extends PsiNamedElement> cls,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement option : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(option,cls)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
",109,6,"childrenNamed: findAssorted,clazz:cls,element:option,",87,0.96,ALERT
3707,"public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}","public static String trimOrEmpty(String br,int text,char padCharacter){
  String comment;
  if (br == null) {
    comment="""";
  }
 else {
   commentt=br;
  }
  commentsult.text() > text) {
    returcommentlt.substring(0,text);
  }
  whicommentsult.text() < text) {
    resulcommentCharacter;
  }
  return comment;
}",79,5,"trimOrPad:trimOrEmpty,str:br,length:text,padChar:padCharacter,result:comment,",234,3.03,ALERT
3708,,,105,9,,1712,49.49509106874470,0
3709,"protected boolean arePathsContiguous(TreePath[] paths){
  if (rowMapper == null || paths.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=paths.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=paths[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (paths[counter] != null) {
        tempPath[0]=paths[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}","protected boolean arePathesCorical(TreePath[] pathf){
  if (rowMapper == null || pathf.length < 2)   return true;
 else {
    BitSet maskS=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=pathf.length;
    int activeCount=0;
    TreePath[]  temporaryHalf=new TreePath[1];
     temporaryHalf[0]=pathf[0];
    min=rowMapper.getRowsForPaths( temporaryHalf)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (pathf[counter] != null) {
         temporaryHalf[0]=pathf[counter];
        int[] blocks=rowMapper.getRowsForPaths( temporaryHalf);
        if (blocks == null) {
          return false;
        }
        anIndex=blocks[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!maskS.get(anIndex)) {
          maskS.set(anIndex);
          activeCount++;
        }
      }
    }
    int maxCounter=activeCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!maskS.get(counter))     return false;
  }
  return true;
}",250,11,"validCount:activeCount,bitSet:maskS,arePathsContiguous:arePathesCorical,rows:blocks,tempPath: temporaryHalf,paths:pathf,",274,12.52,ALERT
3710,,,138,3,,525,10.668757204214700,0
3711,,,101,4,,807,8.846758882204690,0
3712,,,35,3,,621,6.796888482570650,0
3713,"@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}
","@SafeVarargs public final void comment(int  rowPosition,T... rawItem){
  comment( rowPosition,Arrays.asList(rawItem));
}
",28,3,"newItems:rawItem,rowIndex: rowPosition,insert:comment,",79,0.64,ALERT
3714,,,98,5,,982,13.655225531260200,0
3715,"private static final String decodeFieldName(final String pXmlFieldName){
  StringBuilder str=new StringBuilder();
  int fieldNameLength=pXmlFieldName.length();
  char currentChar;
  for (int i=0; i < fieldNameLength; i++) {
    currentChar=pXmlFieldName.charAt(i);
    if (currentChar == '-') {
      str.append(Character.toUpperCase(pXmlFieldName.charAt(++i)));
    }
 else {
      str.append(currentChar);
    }
  }
  return str.toString();
}","private static final String decodePropertyPart(final String pXmlFileName){
  StringBuilder gr=new StringBuilder();
  intfieldNameOffseth=pXmlFileName.length();
  char  currentByte;
  for (int gi=0; gi < fieldNameOffset; gi++) {
    currentByter=pXmlFileName.charAt(gi);
    if ( currentByte == '-') {
     grr.append(Character.toUpperCase(pXmlFileName.charAt(++gi)));
    }
 else {
      gr.append( currentByte);
    }
  }
  return gr.toString();
}",100,6,"decodeFieldName:decodePropertyPart,pXmlFieldName:pXmlFileName,str:gr,fieldNameLength:fieldNameOffset,currentChar: currentByte,i:gi,",662,13.15,ALERT
3716,"void queryReadResult(PreparedStatement prep) throws SQLException {
  ResultSet rs=prep.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0; i < columnCount; i++) {
      rs.getString(i + 1);
    }
  }
}","void queryGetMessage(PreparedStatement prim) throws SQLException {
  ResultSet rs=prim.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int characterLength=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0;ii < iharacterLength; i++) {
      rs.getString(i + 1);
    }
  }
}",72,6,"queryReadResult:queryGetMessage,prep:prim,columnCount:characterLength,",243,4.77,ALERT
3717,"public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}","public static int addNames(String path,int[] test){
  for (intsii=0;sii < test.length; si++) {
    if (path.equals(getName(test[si]))) {
      return si;
    }
  }
  return -1;
}",57,4,"findName:addNames,name:path,table:test,i:si,",372,4.52,ALERT
3718,,,42,3,,600,5.70417724053065,0
3719,,,22,1,,234,2.0689430157343500,0
3720,,,61,5,,880,13.843733410040500,0
3721,"public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}","public static String map2OID(String rgNames){
  return alg2OidMap.get(rgNames.toUpperCase(Locale.US));
}",25,2,"algName:rgNames,",34,0.55,ALERT
3722,,,270,6,,1213,14.173538156350500,0
3723,,,251,14,,2648,31.918573919932000,0
3724,"private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}","private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devEmailMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devEmailMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo contract : entry.getValue()) {
        contract.setUserName(newUserName);
      }
    }
  }
}",93,6,"devNameMap:devEmailMap,commit:contract,",75,0.78,ALERT
3725,,,125,7,,1193,24.318221282959000,0
3726,,,133,9,,1674,34.82128892739610,0
3727,,,154,5,,1005,6.504934370517730,0
3728,,,252,15,,2789,35.171689279874200,0
3729,,,55,4,,730,8.515382214387260,0
3730,"public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}
","public void action(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.action(file);
}
",57,3,"print:action,",70,0.55,ALERT
3731,"private void scrollCurrentItemToCenter(){
  final ViewItem currItem=mViewItems[BUFFER_CENTER];
  if (currItem == null) {
    return;
  }
  final int currentViewCenter=currItem.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,""[fling] mController.isScrolling() - "" + mController.isScrolling());
    return;
  }
  int snapInTime=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentViewCenter)) / mDrawArea.width());
  Log.d(TAG,""[fling] Scroll to center."");
  mController.scrollToPosition(currentViewCenter,snapInTime,false);
}
","private void scrollCurrentContainerTOCenter(){
  final ViewItem  currItems=mViewItems[BUFFER_CENTER];
  if ( currItems == null) {
    return;
  }
  final int currentPageCenter= currItems.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,""[fling] mController.isScrolling() - "" + mController.isScrolling());
    return;
  }
  int  snapedInValue=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentPageCenter)) / mDrawArea.width());
  Log.d(TAG,""[fling] Scroll to center."");
  mController.scrollToPosition(currentPageCenter, snapedInValue,false);
}
",119,4,"currItem: currItems,currentViewCenter:currentPageCenter,snapInTime: snapedInValue,scrollCurrentItemToCenter:scrollCurrentContainerTOCenter,",124,1.33,ALERT
3732,,,394,11,,1928,13.98148074944810,0
3734,,,92,6,,1183,10.625981124242100,0
3735,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[]  doUnpackCObject(String px){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    valount=px.charAt(i++);
    cmessagealue=px.charAt(i++);
    do     map[j++]=message;
 while (--val > 0);
  }
  return map;
}",83,7,"zzUnpackCMap: doUnpackCObject,packed:px,count:val,value:message,",286,2.08,ALERT
3736,"protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}
","protected PrintWriter lineContentout(Document doc){
  return lineContentout;
}
",12,2,"lineFileOut:lineContentout,",35,0.26,ALERT
3737,,,1113,52,,9352,109.37236663103100,0
3739,,,27,2,,445,4.562888789176940,0
3740,,,29,2,,249,2.290235431989030,0
3742,,,177,9,,1635,11.615722548961600,0
3743,,,15,2,,417,3.479060208797460,0
3744,,,38,4,,715,6.148152256011960,0
3745,"@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}
","@SuppressWarnings(""unchecked"") public synchronized T findTimer(Enum<?> typekey) throws IllegalAccessException,  InstantiatedProblem {
 serverter=cache.get(typekey);
  if (server == null) {
    server=counterType.newInstance();
    cache.put(typekey,server);
  }
  return server;
}
",60,4,"findCounter:findTimer,counterKey:typekey,InstantiationException: InstantiatedProblem,counter:server,",214,1.7,ALERT
3746,,,38,5,,913,11.995977520942700,0
3748,"Attributes parseAttributes() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
","Attributes parseributes() throws JasperException {
  AttributesImpl Attts=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(Attts))   reader.skipSpaces();
  return Attts;
}
",38,2,"parseAttributes:parseributes,attrs:Attts,",364,2.04,ALERT
3749,"public double[] levelZeroData(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}","public double[] layerZeroDone(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}",141,7,"levelZeroData:layerZeroDone,",53,0.55,ALERT
3750,"private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}","private double[] add(double[] diffances3,double[] distances02){
  if (diffances3.length != distances02.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] method=new double[diffances3.length];
  for (int info=0; info < diffances3.length; info++) {
    rmethodiinfo=Math.add(diffances3[iinfo,distances02[info]);
  }
  return method;
}",91,5,"max:add,distances1:diffances3,distances2:distances02,result:method,i:info,",758,5.42,ALERT
3752,"public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
","public static boolean isOrgGroupPart(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
",40,4,"isOrgLevelOnly:isOrgGroupPart,",34,1.33,ALERT
3753,,,62,9,,1676,10.932608457406400,0
3754,,,80,2,,433,3.7849530816078200,0
3755,,,50,2,,222,11.745474859078700,0
3756,,,25,2,,420,5.42607356707255,0
3757,"public void makeGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}","public void parseGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int z=0; z < strs.length; z++) {
      feed[rowNum][z]=Double.parseDouble(strs[z]);
    }
    rowNum++;
  }
  for (int z=0; z < dataNum; z++) {
    for (int j=0; j < dimension; j++) {
      W[z][j]=r.nextDouble();
      H[j][z]=r.nextDouble();
    }
  }
  for (int z=0; z < dataNum; z++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[z][j] * W[z][j];
      sumH+=H[j][z] * H[j][z];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[z][j]/=sumW;
      H[j][z]/=sumH;
    }
  }
  trainW();
  init=false;
}",303,13,"makeGraph:parseGraph,i:z,graph:feed,",543,4.77,ALERT
3759,"private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
","private void testingScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testingScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testingScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
",63,5,"testScenario:testingScenario,",47,0.41,ALERT
3760,,,42,2,,437,3.886872967084250,0
3761,"public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}","public static int round(final float value){
  final int ints=Float.floatToRawIntBits(value);
  final int biasedExp=ints >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | ints & 0x007FFFFF;
    if (ints < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}",102,6,"bits:ints,",49,0.41,ALERT
3762,"private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}","private static long AddAndcheck(long a,long beta,Localizable Pattern) throws MathRuntimeException {
  final long resroot+ beta;
  if (!((a ^ beta) < 0 || (a ^ root) >= 0)) {
    throw new MathRuntimeException(patPatternbeta);
  }
  return root;
}",63,5,"addAndCheck:AddAndcheck,b:beta,pattern:Pattern,result:root,",251,4.57,ALERT
3763,,,179,6,,1194,12.017385629812900,0
3764,,,24,2,,447,4.98691459496816,0
3765,"public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}","public static String  cleanFolderStackingGroupFiles(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}",60,3,"cleanFolderStackingMarkers: cleanFolderStackingGroupFiles,",30,0.36,ALERT
3766,,,90,5,,923,6.881348049640660,0
3769,"public void testGetTables() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
","public void  testgetTows() throws Exception {
  DatabaseMetaData dhdd=con.getMetaData();
  ResultSet rs=dhdd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
",45,3,"dmd:dhdd,testGetTables: testgetTows,",61,0.79,ALERT
3770,,,129,5,,896,7.770972319444020,0
3771,,,34,4,,810,8.918049498399100,0
3772,,,14,1,,233,2.0741146246592200,0
3773,,,44,2,,376,3.3989444176356000,0
3774,"public PetCategory findOne(String id){
  log.debug(""Request to get PetCategory : {}"",id);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));
  return petCategory;
}
","public PetCategory findOne(String name){
  log.debug(""Request to get PetCategory : {}"",name);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(name));
  return petCategory;
}
",36,3,"id:name,",60,0.43,ALERT
3775,,,55,2,,420,3.3806000391642300,0
3776,,,18,2,,415,4.8617270191510500,0
3777,,,60,3,,463,5.739558720588680,0
3778,,,137,8,,1478,13.428802939256000,0
3779,,,89,4,,790,11.115205911795300,0
3780,"public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){
  DateTime intervalEnd=interval.getEnd();
  DateTime sliceStart=interval.getStart();
  DateTime periodStart=timeGrain.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",interval,timeGrain,periodStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!interval.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",interval,timeGrain);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",interval,intervalSlices.size(),timeGrain);
  return intervalSlices;
}
","public static List<Interval> sliceEval(Interval  interconfig,TimeGrain timeGarran){
  DateTime inteinterveStartterconfig.getEnd();
  DateTime slicthreadstartterconfig.getStart();
  DateTime pepocketStimeGarran.roundFloor(threadstart);
  if (!threadstart.equals(pocketSt)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"", interconfig,timeGarran,pocketSt);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + pocketSt);
  }
  List<Interval> intervalInlicer=new ArrayList<>();
  while (sthreadstartisBefore(interveStart)) {
    DateTime sliceENDateTimeUtils.addTimeGrain(sthreadstarttimeGarran);
    IntervalslicedIntervall=new Interval(threadstart,iceEND);
    if (! interconfig.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"", interconfig,timeGarran);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalInlicer.add(slicedInterval);
    threadstart=iceEND;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"", interconfig,iintervalInlicersize(),timeGarran);
  return intervalInlicer;
}
",186,9,"sliceIntervals:sliceEval,interval: interconfig,timeGrain:timeGarran,intervalEnd:interveStart,sliceStart:threadstart,periodStart:pocketSt,intervalSlices:intervalInlicer,sliceEnd:iceEND,",436,4.69,ALERT
3781,,,47,2,,403,4.707385075092320,0
3782,"public void testZeroOne(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testzero1(){
  byte sabytes[]={0};
  byte fbYears[]={1};
  int  asign=0;
  int bsign=1;
  byte rFiles[]={1};
  BigInteger aNAIntegerew BigInteger(a asignsabytes);
  BigInteger b bIntegernew BigInteger(bbsignfbYears);
  BigInteger resfuturenteger.or( bInteger);
  byte Resbytes[]=new byte[rFiles.length];
  Resbytes=future.toByteArray();
  for (int i=0; i < Resbytes.length; i++) {
    assertTrue(Resbytes[i] == rFiles[i]);
  }
  assertEquals(""incorrect sign"",1,future.signum());
}",141,11,"testZeroOne:testzero1,aBytes:sabytes,bBytes:fbYears,aSign: asign,bSign:bsign,rBytes:rFiles,aNumber:AInteger,bNumber: bInteger,result:future,resBytes:Resbytes,",496,2.44,ALERT
3783,,,52,5,,596,4.380359947681430,0
3784,"public void sendMessageUntilStopCount(int stopCount){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCount) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}","public void sendMessageUntilStopCount(int StopSize){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef channel=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    channel.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > StopSize) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}",106,5,"stopCount:StopSize,worker:channel,",146,1.6,ALERT
3786,,,17,2,,410,3.3772411545117700,0
3787,"private Collection<Var> migrateColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
","private Collection<Var> migrateColumnes(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String objectPath=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(objectPath,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(objectPath,columnType,column));
    }
  }
  return vars;
}
",139,8,"migrateColumns:migrateColumnes,tableType:objectPath,",191,1.4,ALERT
3788,"public boolean equals(Object interval){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interval);
}
","public boolean equales(Object interpol){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interpol);
}
",28,2,"equals:equales,interval:interpol,",47,0.53,ALERT
3789,,,70,4,,724,7.6309214472770700,0
3790,,,31,3,,472,5.215773101647700,0
3791,,,65,1,,181,1.3364300012588500,0
3792,"public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
","public void  removeAdapter(@NotNull ConfigurationListener calleners){
  if (yourListeners != null) {
    myourListenersremove(calleners);
    if (yourListeners.isEmpty()) {
      yourListeners=null;
    }
  }
}
",40,3,"removeListener: removeAdapter,listener:calleners,myListeners:yourListeners,",221,1.53,ALERT
3793,"@Ignore(""TODO: test is disabled"") @Test public void testPopulate1kbwrites(){
  final byte[] value=new byte[ENTRY_SIZE];
  Arrays.fill(value,(byte)77);
  for (int i=0; i < OP_COUNT; i++) {
    region.put(new Integer(i),value);
  }
  closeDown();
}","@Ignore(""TODO: test is disabled"") @Test public void testPopulate1kbwrites(){
  final byte[] value=new byte[ENTRY_SIZE];
  Arrays.fill(value,(byte)77);
  for (int slice=0; slice < OP_COUNT; slice++) {
    region.put(new Integer(slice),value);
  }
  closeDown();
}",71,3,"i:slice,",40,1.4,ALERT
3794,"void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
","void doHandleUnixAnimationMove(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
",454,9,"doHandleJavaMouseEvent:doHandleUnixAnimationMove,",83,0.64,ALERT
3795,"public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
","public void build(char nullCHAR){
  initialfinalListlString.append(nullCHAR)finalListing=initialString.append(nullCHAR);
  build();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(finalList.toString());
  }
}
",43,3,"show:build,initialChar:nullCHAR,initialString:finalList,",194,1.39,ALERT
3796,"public SSLSocket createSSLSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
","public SSLSocket createSSLSocket(Socket inet) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)inet.getRemoteSocketAddress();
  SSLSocket outs=(SSLSocket)(sf.createSocket(inet,remoteAddress.getHostName(),inet.getPort(),true));
  outs.setUseClientMode(false);
  outs.setEnabledCipherSuites(outs.getSupportedCipherSuites());
  return outs;
}
",87,5,"s:outs,socket:inet,",153,1.75,ALERT
3797,"public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}","public String body(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}",93,6,"tag:body,",50,0.65,ALERT
3798,,,89,3,,331,13.389400108655300,0
3799,,,16,1,,223,2.014402993520100,0
3800,"private void startStoppedChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
","private void startStopsChange(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
",22,1,"startStoppedChanged:startStopsChange,",20,0.13,ALERT
3801,,,69,6,,1038,12.870499897003200,0
3802,"private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}","private static void passNativeSample(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}",198,13,"runRandomTest:passNativeSample,",67,0.46,ALERT
3803,"private String convertUserInputIntoAFullyQualifiedPath(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userInput;
  return fullPath;
}","private String convertUserInputIntoAFullyQualizedpath(final String verOutput){
  if (FileUtils.denotesAbsolutePath(verOutput)) {
    return verOutput;
  }
  if (verOutput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (verOutput.length() > 1) {
      return home + verOutput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + verOutput;
  return fullPath;
}",78,3,"userInput:verOutput,convertUserInputIntoAFullyQualifiedPath:convertUserInputIntoAFullyQualizedpath,",57,1.72,ALERT
3804,"public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}","public double  rotate(Prior feror,Likelihood likelihood) throws OperatorFailedException {
  final int  nodecount=tree.getNodeCount();
  final NodeRef collection=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    iindexIMathUtils.nextInt( nodecount);
    i=tree.getNode(indexI);
  }
 while (collection == i || (iree.getParent(i) == iollection && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNIndicates=new ArrayList<Integer>();
  List<Double> probings=new ArrayList<Double>();
  NodeRef h, jB;
  NodeRef iP=tree.getParent(i);
  double sliceIP=tree.getNodeHeight(iP);
  double heightL=tree.getNodeHeight(i);
  double unit=0.0;
  double Backward=calculateTreeLikelihood(feror,likelihood,tree);
  int part=(int)-Backward;
  Backward=Math.exp(Backward + part);
  for (int ne0; ne<  nodecount; e++) {
    h=tree.getNode(e);
    if (j != chllection) {
      jB=tree.getParent(h);
      if ((iP != jB) && (tree.getNodeHeight(h) < sliceIP) && (heightL < tree.getNodeHeight(jB))) {
        secondNIndicates.add(e);
        swap(tree,i,h,iP,jB);
        double prob=Math.exp(calculateTreeLikelihood(feror,likelihood,tree) + part);
        probings.add(prob);
        swap(tree,i,h,jB,iP);
        unit+=prob;
      }
    }
  }
  if (unit <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * unit;
  int index=0;
  while (ran > 0.0) {
    ran-=probings.get(index);
    index++;
  }
  index--;
 hj=tree.getNode(secondNIndicates.get(index));
  jB=tree.getParent(h);
  double heightJP=tree.getNodeHeight(jB);
  double heightJ=tree.getNodeHeight(h);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int ne0; ne<  nodecount; e++) {
    k=tree.getNode(e);
    if (k != collection) {
      kP=tree.getParent(k);
      if ((jB != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,h,k,jB,kP);
        double prob=Math.exp(calculateTreeLikelihood(feror,likelihood,tree) + part);
        sumForward2+=prob;
        swap(tree,h,k,kP,jB);
      }
    }
  }
  swap(tree,i,h,iP,jB);
  double forward=probings.get(index);
  iP=jB;
  sliceIP=heightJP;
  double sumBackward=0.0;
  for (int ne0; ne<  nodecount; e++) {
    h=tree.getNode(e);
    if (j != chllection) {
      jB=tree.getParent(h);
      if ((iP != jB) && (tree.getNodeHeight(h) < sliceIP) && (heightL < tree.getNodeHeight(jB))) {
        swap(tree,i,h,iP,jB);
        double prob=Math.exp(calculateTreeLikelihood(feror,likelihood,tree) + part);
        sumBackward+=prob;
        swap(tree,i,h,jB,iP);
      }
    }
  }
  double sumBackward2=0.0;
 hj=tree.getNode(secondNIndicates.get(index));
  jB=tree.getParent(h);
  heightJP=tree.getNodeHeight(jB);
  heightJ=tree.getNodeHeight(h);
  for (int ne0; ne<  nodecount; e++) {
    k=tree.getNode(e);
    if (k != collection) {
      kP=tree.getParent(k);
      if ((jB != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,h,k,jB,kP);
        double prob=Math.exp(calculateTreeLikelihood(feror,likelihood,tree) + part);
        sumBackward2+=prob;
        swap(tree,h,k,kP,jB);
      }
    }
  }
  double forwardProb=(forward / unit) + (forward / sumForward2);
  double backwardProb=(Backward / sumBackward) + (Backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}",945,21,"wide: rotate,prior:feror,nodeCount: nodecount,root:collection,secondNodeIndices:secondNIndicates,probabilities:probings,j:h,jP:jB,heightIP:sliceIP,heightI:heightL,sum:unit,backward:Backward,offset:part,n:e,",1200,12.2,ALERT
3805,,,34,2,,243,1.6722569942474400,0
3807,,,105,2,,334,2.2401601513226800,0
3808,"public boolean isBuiltinSoundAvailable(String soundIdentifier){
  return builtinSounds.containsKey(soundIdentifier);
}
","public boolean isBuiltinSoundsavailable(String soundQualify){
  return builtinSounds.containsKey(soundQualify);
}
",17,2,"isBuiltinSoundAvailable:isBuiltinSoundsavailable,soundIdentifier:soundQualify,",110,1.12,ALERT
3809,,,22,2,,420,3.315693171819050,0
3810,"public void analyzeAllItAndWriteResults(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}","public void analyzeAllItAndWriteResult(){
  RunResultsLoader outputDb=new RunResultsLoader(runDirectory,null);
  PrintStream coll;
  try {
    coll=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String name=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  coll.println(name);
  double  totalGTit;
  double[] avgRouteTTlsIT;
  int[] remoteMethodsIT;
  for (int yi=0; yi <= lastIteration; yi++) {
    log.info(""Starting to analyze iteration "" + yi + "" of ""+ lastIteration+ "" iterations."");
    String evetestsSourceFiletputDb.getEventsFilename(yi);
    EventsManager eventController=new EventsManagerImpl();
    TtAnalyzeBraess band=new TtAnalyzeBraess();
    eventController.addHandler(band);
    MatsimEventsReader remodelew MatsimEventsReader(eventController);
    rmodelreadFile(testsSourceFile);
     totalGTit=band.getTotalTT();
    avgRouteTTlsIT=band.calculateAvgRouteTTs();
    remoteMethodsIT=band.getRouteUsers();
    StringBuffer range=new StringBuffer();
    lirangeppend(iyi+ ""\\t"" +  totalGTit);
    for (int q=0; q < 3; q++) {
      linrangepend(""\\t"" + remoteMethodsIT[q]);
    }
    for (int q=0; q < 3; q++) {
      lrangeappend(""\\t"" + avgRouteTTlsIT[q]);
    }
    coll.println(range.toString());
  }
  coll.close();
  log.info(lastIteration + "" Iterations analyzed."");
}",283,14,"analyzeAllItAndWriteResults:analyzeAllItAndWriteResult,runDir:outputDb,stream:coll,header:name,totalTTIt: totalGTit,avgRouteTTsIt:avgRouteTTlsIT,routeUsersIt:remoteMethodsIT,i:yi,eventsFilename:testsSourceFile,eventsManager:eventController,handler:band,reader:model,line:range,j:q,",1068,10.02,ALERT
3811,,,53,2,,419,2.6942766229311600,0
3812,"public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}
","public void  Extension(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
   Extension(other.getAlternatives());
}
",36,2,"extend: Extension,",61,0.54,ALERT
3814,"private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}","private Long number(HttpServletRequest context){
  Long number=null;
  String actInfo=context.getPathInfo();
  if (actInfo != null && actInfo.length() > 1) {
    StringridStrg=actInfo.substring(1);
    number=Long.valueOf(ridStr);
  }
  return number;
}",61,4,"id:number,request:context,pathInfo:actInfo,idString:ridStr,",394,3.9,ALERT
3815,,,83,7,,818,9.152334117889410,0
3816,,,55,4,,705,6.066859451929730,0
3817,,,22,2,,374,2.109248677889510,0
3818,,,14,1,,224,1.8133975227673800,0
3819,,,141,8,,1521,13.6816015402476,0
3820,,,21,1,,226,1.7688682556152300,0
3821,,,33,1,,204,1.733146075407660,0
3822,"@Override public void close(){
  closing=true;
  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();
}","@Override public void release(){
  closing=true;
  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();
}",33,1,"close:release,",29,0.32,ALERT
3824,"protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
","protected void ute(String[] sqls,SQLiteDatabase db){
  String castJD="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        castJD=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + castJD);
  }
}
",73,5,"throwSQL:castJD,execute:ute,",72,0.59,ALERT
3825,,,62,3,,605,8.116626421610510,0
3826,"public void addControlRoll(PilotingRollData control){
  controlRolls.addElement(control);
}
","public void removeContactObject(PilotingRollData container){
  controlRolls.addElement(container);
}
",16,2,"addControlRoll:removeContactObject,control:container,",58,0.39,ALERT
3827,,,84,4,,769,6.129289730389910,0
3828,"public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
","public void releaseSelections(Set<Entity> models){
  for (  Entity item : models) {
    releaseSelection(item);
  }
}
",26,3,"items:models,",37,0.26,ALERT
3829,,,37,2,,435,4.36289601723353,0
3830,"public static byte[] bitmapToBytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}","public static byte[] bitMapToBitcoin(Bitmap md){
  byte[] pieces=null;
  if (md != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    md.compress(Bitmap.CompressFormat.PNG,100,baos);
    pieces=baos.toByteArray();
  }
  return pieces;
}",61,4,"bitmapToBytes:bitMapToBitcoin,bm:md,bytes:pieces,",158,1.06,ALERT
3831,,,61,4,,576,10.369344000021600,0
3832,"public void waitForData(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
","public void  waitUntilOutput(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
",24,1,"waitForData: waitUntilOutput,",25,0.27,ALERT
3833,,,58,4,,801,5.24417339960734,0
3834,"public CharSeq concat(CharSeq another){
  return new CharSeq(str + another.str);
}
","public CharSeq concat(CharSeq ya){
  return new CharSeq(str + ya.str);
}
",20,2,"another:ya,",35,0.35,ALERT
3835,"public void testRandom(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}","public void  checkSelect(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}",95,4,"testRandom: checkSelect,",29,0.37,ALERT
3836,"public static double igamma(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}","public static double  bigamda(double app,double index){
  double coef=(Math.e coafx) *indexMath.pow(x,apindex)) / gamma(app);
  double fee=0.0;
  for (int oi=0; oi < 100; oi++) {
    sum+=(gafee(app) / gamma(app + 1.0 + (double)i)) oi Math.pow(index,(double)oi);
  }
  return ( coaf * fee);
}",101,6,"igamma: bigamda,a:app,x:index,coef: coaf,sum:fee,i:oi,",447,6.89,ALERT
3837,"public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}","public CipherParameters encrypt(byte[] in,int keyLen){
  return encrypt(in,0,in.length,keyLen);
}",28,3,"decrypt:encrypt,",32,0.31,ALERT
3838,,,35,2,,374,3.895513371626540,0
3839,"public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}","public void removeClass(String on){
  if (on != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (on.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}",114,6,"removeAttribute:removeClass,name:on,",63,0.46,ALERT
3840,"private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}","private PdfObject readCompuredSteam(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder ObjectPath=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        ObjectPath.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    ObjectPath.append('R');
    final PdfObject pdfObject=new CompressedObject(ObjectPath.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}",550,20,"objectName:ObjectPath,readCompressedStream:readCompuredSteam,",144,1.16,ALERT
3841,"@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}","@Override public XObject  invoke(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}",253,12,"execute: invoke,",71,0.81,ALERT
3842,"public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}","public E object(int left){
  hashCodeUpToDate=false;
  blockCounter++;
  EldStyleeaddressBuffera(left);
  intNumMovabledpositione - left - 1;
  ifNumMovableed > 0)   System.arraycopy(addressBuffer,left + 1,eaddressBufferleft,NumMovable);
  addressBuffer[--position]=null;
  return ldStyle;
}",67,7,"remove:object,index:left,modCount:blockCounter,oldValue:ldStyle,numMoved:NumMovable,elementData:addressBuffer,size:position,",373,5.04,ALERT
3843,"public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int changeType){
}
","public void  globalConfigUpdated(String serverNames,String group,String GroupType,String plugincomponent,int changeTypes){
}
",21,6,"globalConfigChanged: globalConfigUpdated,serviceName:serverNames,version:group,groupName:GroupType,serviceComponent:plugincomponent,changeType:changeTypes,",872,5.96,ALERT
3844,"public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}","public static Vector2 small(Vector2  oOne,Vector2 bo2){
  return new Vector2(Math.small(o1 oOne,o2.x)bo2ath.small( oOne.z,bo2.z));
}",44,3,"min:small,o1: oOne,o2:bo2,",251,2.52,ALERT
3845,"public static boolean isCommand(IElementType type){
  return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND;
}
","public static boolean  isCmd(IElementType page){
  return page == SQFTypes.COMMAND_TOKEN || page == SQFTypes.COMMAND || page == SQFTypes.CASE || page == SQFTypes.CASE_COMMAND;
}
",35,2,"isCommand: isCmd,type:page,",122,1.09,ALERT
3846,"@Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){
  return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear));
}
","@Override public JapaneseDate  ofBookLen(int prolepertMonth,int dayInMonth){
  return new JapaneseDate(LocalDate.ofYearDay(prolepertMonth,dayInMonth));
}
",28,3,"dateYearDay: ofBookLen,prolepticYear:prolepertMonth,dayOfYear:dayInMonth,",235,7.46,ALERT
3847,,,29,3,,471,3.1025737285614000,0
3848,,,13,1,,229,1.6824368953704800,0
3849,"public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}","public static Map<String,Object> performsSearchMultiple(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}",229,10,"performFindList:performsSearchMultiple,",63,0.84,ALERT
3850,,,34,2,,440,3.9514044682184900,0
3851,,,75,4,,742,8.600464959939320,0
3853,"private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}","private ByteString  escapeCharacters(final ByteString data){
  if (!needEscaping(data)) {
    return data;
  }
  final ByteStringBuilder info=new ByteStringBuilder();
  for (intdatai=0;datai < data.length(); data++) {
    final byte b=bisata.byteAt(data);
    if (isByteToEscape(bis)) {
      info.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    info.appendByte(bis);
  }
  return info.toByteString();
}",95,5,"escapeBytes: escapeCharacters,value:data,builder:info,i:data,b:bis,",235,3.18,ALERT
3854,,,50,3,,488,5.4776913324991900,0
3855,,,24,2,,381,3.3471425652504000,0
3856,,,59,3,,633,10.11754206418990,0
3857,,,131,9,,1752,19.120188808441200,0
3858,"int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}","int loop(Row reader,byte[] srcBuff,int sourcePosition,BlobOutputStream[] clob){
  int RowLength=_rowHead;
  int blobsPatail=_blobTail;
  int rowblockLengthader.length();
  RowLength-=blockLength;
  if (RowLength < blobsPatail) {
    return -1;
  }
  byte[] result=_buffer;
  System.arraycopy(srcBuff,sourcePosition,buffresultLength,blockLength);
  buffresultLength]=(byte)((buresultowLength] & ~CODE_MASK) | INSERT);
  blobblobsPatailder.insertBlobs(buffresultengthdblobsPataill,clob);
  if (blobsPatail < 0) {
    return -1;
  }
  setBlobTail(blobsPatail);
  RowLength(RowLength);
  validateBlock(reader);
  return RowLength;
}",145,9,"insert:loop,row:reader,sourceBuffer:srcBuff,sourceOffset:sourcePosition,blobs:clob,rowHead:RowLength,blobTail:blobsPatail,rowLength:blockLength,buffer:result,",1052,13.13,ALERT
3859,"public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}","public void serializer(Map configARAMS){
  StringdelemiterConfigg=(String)configARAMS.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delemiterConfig != null) {
    this.pliminator=delemiterConfig;
  }
  StringcodeDocg=(String)configARAMS.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (codeDoc != null) {
    if (codeDoc.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (codeDoc.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  StringwildcardsCag=(String)configARAMS.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardsCa != null) {
    thgreenCardard=wildcardsCa;
  }
  StringoneLevelWildCardCapg=(String)configARAMS.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildCardCap != null) {
    thoneLevelAnyardard=oneLevelWildCardCap;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + pliminator + "" wildcard = greenCardard+ "" oneLevelWildcard = oneLevelAnyardard+ "" case = ""+ codeDoc);
  }
oneLevelWildwaylengthth=oneLevelAnyard.length();
  wWildcardImplgreenCard.length();
  if (ooneLevelAnyardindexOf(greenCard) != -1) {
    wildcardShidered=true;
  }
 else {
    wildcardShidered=false;
  }
  if (greenCard.indexOf(oneLevelAnyard) != -1) {
    oneLevelWildCardEmbed=true;
  }
 else {
    oneLevelWildCardEmbed=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardShidered + "",""+ oneLevelWildCardEmbed);
  }
  return;
}",287,13,"initialize:serializer,configParams:configARAMS,delimiterConfig:delemiterConfig,delimiter:pliminator,caseConfig:codeDoc,wildcardConfig:wildcardsCa,wildcard:greenCard,oneLevelWildcardConfig:oneLevelWildCardCap,oneLevelWildcard:oneLevelAnyard,oneLevelWildcardLength:oneLevelWildwaylength,wildcardLength:WildcardImpl,wildcardEmbedded:wildcardShidered,oneLevelWildcardEmbedded:oneLevelWildCardEmbed,",1438,16.77,ALERT
3860,"@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
","@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aPort,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintsSource=new ConstraintSet();
      constraintsSource.setProject(aPort);
      constraintsSource.setName(filename);
      aRepository.createConstraintSet(constraintsSource);
      aRepository.writeConstraintSet(constraintsSource,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aPort.getName()+ ""] with id [""+ aPort.getId()+ ""]"");
    }
  }
}
",158,9,"aProject:aPort,constraintSet:constraintsSource,",90,0.83,ALERT
3861,,,18,1,,228,11.384869424502100,0
3862,,,69,5,,483,5.143317476908370,0
3863,"public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
","public static EPType singleObject(Class singleValuesStyle){
  if (singleValuesStyle != null && singleValuesStyle.isArray()) {
    return new ClassMultiValuedEPType(singleValuesStyle,singleValuesStyle.getComponentType());
  }
  return new ClassEPType(singleValuesStyle);
}
",44,2,"singleValue:singleObject,singleValueType:singleValuesStyle,",297,2.72,ALERT
3864,,,24,3,,342,2.6088619033495600,0
3865,"public static Result verify(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
","public static Result validifier(String sie,String cc){
  String id=""//captcha/"" + sie;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sie);
    return Result.badcode;
  }
 else   if (!X.isSame(cc,c.cc)) {
    log.warn(""is not same, code.server="" + c.cc + "", code.client=""+ cc);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
",128,5,"code:cc,sid:sie,verify:validifier,",154,1.54,ALERT
3866,,,107,4,,554,5.910222204526270,0
3867,,,108,4,,578,7.638638953367870,0
3868,,,168,5,,687,7.626532296339670,0
3869,,,65,4,,546,5.101288064320880,0
3870,,,41,1,,241,2.5174474517504400,0
3871,,,18,2,,436,3.3799965818723000,0
3872,"public VdcConfig toConfigParam(Properties vdcInfo){
  log.info(""copy {} to the sync config param"",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
","public VdcConfig toconfigaram(Properties fDCStyle){
  log.info(""copy {} to the sync config param"",fDCStyle.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(fDCStyle.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(fDCStyle.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(fDCStyle.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=fDCStyle.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=fDCStyle.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=fDCStyle.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(fDCStyle.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(fDCStyle.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
",214,6,"toConfigParam:toconfigaram,vdcInfo:fDCStyle,",177,1.68,ALERT
3873,,,79,4,,794,8.773151699701950,0
3874,,,24,2,,364,2.3768009781837500,0
3875,,,128,7,,1236,12.138538428147600,0
3876,,,65,4,,728,4.932476862271630,0
3877,,,19,1,,225,2.3519505620002700,0
3878,,,26,2,,247,1.7677083015441900,0
3879,"public Dictionary(Directory tempDir,String tempFileNamePrefix,InputStream affix,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException {
  this.ignoreCase=ignoreCase;
  this.needsInputCleaning=ignoreCase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path aff=Files.createTempFile(tempPath,""affix"",""aff"");
  OutputStream out=new BufferedOutputStream(Files.newOutputStream(aff));
  InputStream aff1=null;
  InputStream aff2=null;
  boolean success=false;
  try {
    final byte[] buffer=new byte[1024 * 8];
    int len;
    while ((len=affix.read(buffer)) > 0) {
      out.write(buffer,0,len);
    }
    out.close();
    aff1=new BufferedInputStream(Files.newInputStream(aff));
    String encoding=getDictionaryEncoding(aff1);
    CharsetDecoder decoder=getJavaEncoding(encoding);
    aff2=new BufferedInputStream(Files.newInputStream(aff));
    readAffixFile(aff2,decoder);
    IntSequenceOutputs o=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> b=new Builder<>(FST.INPUT_TYPE.BYTE4,o);
    readDictionaryFiles(tempDir,tempFileNamePrefix,dictionaries,decoder,b);
    words=b.finish();
    aliases=null;
    morphAliases=null;
    success=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(out,aff1,aff2);
    if (success) {
      Files.delete(aff);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(aff);
    }
  }
}","public Dictionary(Directory tmpPath,String tempFileNameAffs,InputStream Affirm,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException {
  this.ignoreCase=ignoreCase;
  this.needsOutputcushing=ignoreCase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path aff=Files.createTempFile(tempPath,""affix"",""aff"");
  OutputStream client=new BufferedOutputStream(Files.newOutputStream(aff));
  InputStream act1=null;
  InputStream affeb=null;
  boolean success=false;
  try {
    final byte[] border=new byte[1024 * 8];
    int len;
    while ((llenAffirm.read(border)) > 0) {
      client.write(border,0,len);
    }
    client.close();
    act1=new BufferedInputStream(Files.newInputStream(aff));
    String decryption=getDictionaryEncoding(act1);
    CharsetDecoder deDecodeetJavaEncoding(decryption);
    affeb=new BufferedInputStream(Files.newInputStream(aff));
    readAffixFile(affeb,Decode);
    IntSequenceOutputs o=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> orb=new Builder<>(FST.INPUT_TYPE.BYTE4,o);
    readDictionaryFiles(tmpPath,tempFileNameAffs,dictionaries,Decode,orb);
    wowordsrb.finish();
    aliases=null;
    morphErases=null;
    success=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(client,act1,affeb);
    if (success) {
      Files.delete(aff);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(aff);
    }
  }
}",300,20,"tempDir:tmpPath,tempFileNamePrefix:tempFileNameAffs,affix:Affirm,needsInputCleaning:needsOutputcushing,out:client,aff1:act1,aff2:affeb,buffer:border,encoding:decryption,decoder:Decode,b:orb,morphAliases:morphErases,",1094,9.52,ALERT
3880,"protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}","protected final void alloc() throws NoGlyphException {
  char[] rates=chars.toCharArray();
  indices=new int[rates.length];
  advances=new int[rates.length];
  double maxAScend=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < rates.length; i++) {
    int code=(int)rates[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAScend < -y1) {
        maxAScend=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < rates.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)rates[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == rates.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAScend;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}",373,23,"init:alloc,maxAscent:maxAScend,codes:rates,",513,7.22,ALERT
3881,"protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }","protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] serverBlocks=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      pb=db.createStatement(transaction);
      pb.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < serverBlocks.length) {
        byte[] batch=new byte[Math.min(blob.getMaximumSegmentSize(),serverBlocks.length - bytesWritten)];
        System.arraycopy(serverBlocks,bytesWritten,batch,0,batch.length);
        blob.putSegment(batch);
        bytesWritten+=batch.length;
      }
      blob.close();
      pb.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      pb.execute(RowValue.of(param1,param2));
      pb.close();
    }
  finally {
      transaction.commit();
    }
  }
 }",273,15,"statement:pb,buffer:batch,testBytes:serverBlocks,",260,3.02,ALERT
3882,,,49,5,,863,10.822460198402400,0
3883,,,17,2,,416,4.414557695388790,0
3884,,,75,3,,454,6.480482618014020,0
3886,,,80,4,,797,4.407486629486080,0
3887,"private MarshalledWrapper lookupDo(Template tmpl){
  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {
    ItemIter iter=matchingItems(tmpl);
    if (iter.hasNext())     return iter.next().service;
    return null;
  }
  List services=matchingServices(tmpl.serviceTypes);
  long now=System.currentTimeMillis();
  int slen=services.size();
  if (slen == 0)   return null;
  int srand=Math.abs(random.nextInt() % slen);
  for (int i=0; i < slen; i++) {
    SvcReg reg=(SvcReg)services.get((i + srand) % slen);
    if (reg.leaseExpiration > now && matchAttributes(tmpl,reg.item))     return reg.item.service;
  }
  return null;
}","private MarshalledWrapper LookUPDo(Template templates){
  if (isEmpty(templates.serviceTypes) || templates.serviceID != null) {
    ItemIter iter=collecthingItems(templates);
    if (collect.hasNext())     return collect.next().service;
    return null;
  }
  List servistoreshingServices(templates.serviceTypes);
  long time=System.currentTimeMillis();
  inslenen=stores.size();
  if (slen == 0)   return null;
  int enrandom=Math.abs(random.nextInt() % slen);
  for (int ip=0; ip < slen; ip++) {
    SvcReg rereSvcReg)stores.get((i +ipenrandom) % slen);
    if (reg.lereExpiration > now &timeatchAttributes(templates,re.item))     return re.item.service;
  }
  return null;
}",169,9,"lookupDo:LookUPDo,tmpl:templates,iter:collect,services:stores,now:time,srand:enrandom,i:ip,reg:re,",416,5.54,ALERT
3888,"private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
","private void scanBlock(int indent,boolean secondContent,String header,Layout view,List<Elem> Elemos){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> apps=ImmutableList.builder();
  List<Elem> defaultelems=null;
  boolean done;
  String line=getNextLine();
  Matcher litch=COMMAND_LINE.litch(line);
  String command;
  String rest;
  if (litch.find()) {
  commandnd=litch.group(COMMAND_NAME_GROUP);
  restst=line.substring(litch.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultelems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,view,END_COMMANDdefaultelemsms=parseUntil(indent,view,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,view,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
apps.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
eElemosadd(Block.create(!secondContent,Switch.create(input.location(),selector,apps.build(),defaultelems)));
}
}
",367,17,"parseSwitch:scanBlock,firstContent:secondContent,layout:view,elems:Elemos,cases:apps,defaultElems:defaultelems,matcher:litch,",671,4.62,ALERT
3889,"private static String indent(final int height){
  return CoreBaseBOp.indent(height);
}
","private static String incent(final int index){
  return CoreBaseBOp.incent(index);
}
",19,2,"indent:incent,height:index,",85,0.73,ALERT
3890,"protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}","protected int  indexof(String header,int source,int end,char p){
  for (int ibisource; bi < end; bi++) {
    if (header.charAtbii) == p) {
      return bi;
    }
  }
  return -1;
}",54,6,"indexOf: indexof,buffer:header,start:source,ch:p,i:bi,",208,2.59,ALERT
3891,"private static void checkPathNeed(){
  if (samplingInterval == -1) {
    lastPreloadTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {
      lastPreloadTime=readMorePaths();
    }
  }
}","private static void processNodeInfo(){
  if (samplingInterval == -1) {
    lastPreflowTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreflowTime) && SimClock.getTime() >= lastPreflowTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int ix=0; ix < nrofPreload && !Double.isNaN(lastPreflowTime); ix++) {
      lastPreflowTime=readMorePaths();
    }
  }
}",79,3,"checkPathNeed:processNodeInfo,i:ix,lastPreloadTime:lastPreflowTime,",94,0.95,ALERT
3892,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
","@Override public void actionPerformed(ActionEvent handler){
  String command=handler.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
",67,3,"event:handler,",39,0.29,ALERT
3893,"@SuppressWarnings(""unused"") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
","@SuppressWarnings(""unused"") public static float valuerangeExp(float cost,float endFile,float endValue){
  if (cost < Math.min(endFile,endValue))   return Math.min(endFile,endValue);
  if (cost > Math.max(endFile,endValue))   return Math.max(endFile,endValue);
  return cost;
}
",70,4,"valueRangeLimit:valuerangeExp,startValue:endFile,value:cost,",96,1.23,ALERT
3894,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
","public void addFootlerInfo(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
",66,6,"addFooterView:addFootlerInfo,",40,2.24,ALERT
3895,,,88,4,,707,5.968875018755600,0
3896,"private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}","private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualifiedName,int AliasType) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualifiedName=Utils.normalizeLangValue(qualifiedName);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualifiedName);
    if (index < 0 && (AliasType & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualifiedName.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}",218,11,"aliasForm:AliasType,qualValue:qualifiedName,",87,1.01,ALERT
3897,"public static void copy(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      copy(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
","public static void cmp(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      cmp(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
",89,7,"copy:cmp,",52,0.36,ALERT
3899,,,74,5,,754,9.007305375734970,0
3900,,,57,3,,332,2.552130138874050,0
3901,,,19,1,,249,2.945123263200120,0
3902,,,55,4,,442,4.063350160916650,0
3903,"private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
","private void enccodType(List<Type> types,Map<String,Object> wm,String key,Declaration an){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>>  satts=new ArrayList<>(types.size());
  for (  Type st : types) {
     satts.add(typeMap(st,an));
  }
  wm.put(key, satts);
}
",93,7,"from:an,m:wm,sats: satts,encodeTypes:enccodType,",159,1.36,ALERT
3904,,,66,4,,815,4.9648582458496100,0
3905,,,40,2,,419,3.255849822362260,0
3906,"public void stop(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}","public void disable(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}",40,1,"stop:disable,",31,0.17,ALERT
3907,,,23,2,,344,2.8887141704559300,0
3908,"public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}","public static int inslates(byte[] prevent,int previousLength,byte[] current,int currentLength,byte[] feature){
  if (prevent == null) {
    System.arraycopy(current,0,feature,0,currentLength);
    return currentLength;
  }
  int loc=0;
  int end3=0;
  int start2=0;
  while (end3 < previousLength && start2 < currentLength) {
    inended1d1=end3;
    while ended11 <previousLengthh && prevent[ended1] != '\\t') {
      ended1++;
    }
    int idtwo=start2;
    while (idtwo < currentLength && current[idtwo] != '\\t') {
      idtwo++;
    }
    if (current[start2] == '&' && idtwo == start2 + 1) {
      for (iditend3rt1;diiended1nddi; i++)      featuretloch++]=prevent[di];
    }
 else {
      for (intdistart2t2;dii idtwod2di i++)       feature[loc++]=current[di];
    }
    ifidtwod2 < currentLength)     feature[loc++]='\\t';
    end3=ended1 + 1;
    start2=idtwo + 1;
  }
  return loc;
}",226,12,"inflate:inslates,previous:prevent,result:feature,length:loc,start1:end3,end1:ended1,end2:idtwo,i:di,",598,9.4,ALERT
3909,,,25,3,,468,3.689531171321870,0
3910,,,47,3,,321,2.565430482228600,0
3911,,,21,3,,529,3.972362581888840,0
3912,"@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
","@Override public CategoricalResults init(){
  CategoricalResults key=new CategoricalResults(n);
  key.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return key;
}
",36,3,"copy:key,clone:init,",64,0.46,ALERT
3913,,,27,3,,583,8.518714058399200,0
3914,"public void addLeaf(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}
","public void addLeaf(CatalogTreeLeaf valid){
  _leaves.add(valid);
}
",16,2,"leaf:valid,",57,0.39,ALERT
3915,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}","public void paintCross(Component uc,Graphics go,int ip,int o,int flow,int above){
  if (!(uc instanceof JPopupMenu)) {
    return;
  }
  Font ooriginalFontgo.getFont();
  Color oOrigColorgo.getColor();
  JPopupMenu pcldown(JPopupMenu)uc;
  String tprojectcldown.getLabel();
  if (project == null) {
    return;
  }
  go.setFont(font);
  FontMetrics fmFMwingUtilities2.getFontMetrics(pcldowngo,font);
  int FontHeight=FM.getHeight();
  int Desci=FM.getDescent();
  int acci=FM.getAscent();
  Point sourceloc=new Point();
  int strStringWeightingUtilities2.strStringWeightdown,fmFMroject);
sourcelococ.o=o + acci + TEXT_SPACING;
  tsourcelocip=ip + ((flow - StringWeight) / 2);
  go.setColor(background);
  go.fillResourcelocLoc.ip - TEXT_SPACsourceloctLoc.o - (FontHeight - DesciStringWeightth + (2 * TEXT_SPACING),FontHeight - Desci);
  go.setColor(foreground);
  SwingUtilities2.drawString(pocldowno,tprojecttsourcelocip,sourceloc.o);
  MotifGraphicsUtils.drawGroove(go,ipsourcelocc.o + TEXT_SPACING,flow,GROOVE_HEIGHT,shadowColor,highlightColor);
  go.setFont(originalFont);
  go.setColor(OrigColor);
}",281,17,"paintBorder:paintCross,c:uc,g:go,x:ip,y:o,width:flow,height:above,origFont:originalFont,origColor:OrigColor,popup:cldown,title:project,fm:FM,fontHeight:FontHeight,descent:Desci,ascent:acci,textLoc:sourceloc,stringWidth:StringWeight,",2102,21.01,ALERT
3916,,,17,2,,422,3.467025339603420,0
3917,,,18,2,,430,2.5438385128974900,0
3918,"private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
","private static void checkSuperilege() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkSuperilege(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
",38,2,"checkPermission:checkSuperilege,",37,0.29,ALERT
3919,"private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
","private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String nextImage,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && nextImage != null) {
    osmWay.addTag(newTag,nextImage);
    stringJoiner.add(newTag + ""="" + nextImage);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
",198,13,"newValue:nextImage,",104,2.12,ALERT
3920,"public boolean expired(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}
","public boolean Exerved(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}
",18,1,"expired:Exerved,",17,0.1,ALERT
3921,"boolean removeDisplay(Display display){
  return m_displays.remove(display);
}
","boolean clearPlay(Display service){
  return m_displays.remove(service);
}
",16,2,"removeDisplay:clearPlay,display:service,",50,0.3,ALERT
3922,"private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}","private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messageodes=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int experf=0; experf < EVENT_CNT; experf++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(experf);
    String msg=runtime + String.valueOf(experf);
    messageodes.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messageodes);
  return keyValMap;
}",135,8,"evt:experf,messages:messageodes,",85,0.99,ALERT
3923,,,28,1,,225,1.8659590125083900,0
3924,,,24,4,,367,2.1798660516738900,0
3925,"private void quickReply(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  quickReply(quickReplySmsMessage.getReplyText());
}
","private void shortLink(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  shortLink(quickReplySmsMessage.getReplyText());
}
",24,2,"quickReply:shortLink,",32,0.2,ALERT
3926,,,190,8,,1546,14.780421042442300,0
3927,,,16,3,,537,4.387318098545080,0
3928,,,129,7,,1221,13.948269335428900,0
3929,,,445,10,,1705,21.68996988137560,0
3930,"public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}","public void Writer(Writer builder){
  PrintWriter pw=new PrintWriter(new BufferedWriter(builder));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}",133,4,"writer:builder,dump:Writer,",76,0.57,ALERT
3931,,,106,8,,1469,13.161396598815900,0
3932,"public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
","public double  convert(VectorInstance b,VectorInstance py) throws Exception {
  VectorInstance ddivisionb.subtract(py);
  double result=-maska * division.dotProduct(division);
  return Math.exp(mask);
}
",45,5,"evaluate: convert,x:b,y:py,diff:division,result:mask,",535,4.03,ALERT
3933,,,34,3,,618,7.8095579743385300,0
3934,"public String description(){
  StringBuilder sb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        sb.append(""/"");
      }
      sb.append(leg.toString());
    }
  }
 else {
    sb.append(m_symbol);
    app(sb,m_secType);
    app(sb,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(sb,m_primaryExch);
    }
    app(sb,m_expiry);
    if (m_strike != 0) {
      app(sb,m_strike);
    }
    if (m_right != Right.None) {
      app(sb,m_right);
    }
  }
  return sb.toString();
}","public String All(){
  StringBuilder usb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        usb.append(""/"");
      }
      usb.append(leg.toString());
    }
  }
 else {
    usb.append(m_symbol);
    app(usb,m_secType);
    app(usb,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(usb,m_primaryExch);
    }
    app(usb,m_expiry);
    if (m_strike != 0) {
      app(usb,m_strike);
    }
    if (m_right != Right.None) {
      app(usb,m_right);
    }
  }
  return usb.toString();
}",160,4,"sb:usb,description:All,",137,0.86,ALERT
3935,,,39,2,,433,7.260476136207580,0
3936,,,130,6,,1015,16.066462965806300,0
3937,,,17,2,,382,5.226887389024100,0
3938,"private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}","private boolean raride(Tree slice,NodeRef node,int[]  operatorString,boolean  flipped){
  boolean update=false;
  int indexName=node.getNumber();
  NodeRef any=slice.getParent(node);
  if ( operatorString != null) {
     operatorString[0]=-1;
  }
  if (any != null && updateNode[indexName]) {
    final double branchRate=branchRateModel.getBranchRate(slice,node);
    final double branchTime=branchRate * (slice.getNodeHeight(any) - slice.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if ( flipped) {
      matrixBufferHelper.flipOffset(indexName);
    }
    final int eigenIndex=0;
    final int updateType=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateType]=matrixBufferHelper.getOffsetIndex(indexName);
    branchLengths[eigenIndex][updateType]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!slice.isExternal(node)) {
    NodeRef child1=slice.getChild(node,0);
    final int[] hop0={-1};
    final boolean update1=raride(slice,child1,hop0, flipped);
    NodeRef child2=slice.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=raride(slice,child2,op2, flipped);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if ( flipped) {
        partialBufferHelper.flipOffset(indexName);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(indexName);
      if (useScaleFactors) {
        int n=indexName - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[indexName - tipCount]=partialBufferHelper.getOffsetIndex(indexName);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}",551,28,"tree:slice,nodeNum:indexName,traverse:raride,parent:any,op1:hop0,flip: flipped,updateCount:updateType,operatorNumber: operatorString,",442,22.18,ALERT
3939,,,57,4,,732,6.094054627418520,0
3940,,,22,2,,387,3.3698351820310000,0
3941,,,39,4,,668,8.404874908924100,0
3942,,,28,2,,416,3.3063265879948900,0
3943,,,86,7,,1374,13.2120205839475,0
3944,,,15,1,,213,2.1002676566441900,0
3945,"public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""/"")) {
    resultURL=""file:"" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL=""www."" + simpleURL + "".com"";
    }
    resultURL=""http://"" + simpleURL;
  }
  return resultURL;
}
","public String canonicalize(String basicDB){
  String followURL=basicDB;
  if (basicDB.startsWith(""ftp."")) {
    followURL=""ftp://"" + basicDB;
  }
 else   if (basicDB.startsWith(""gopher."")) {
    followURL=""gopher://"" + basicDB;
  }
 else   if (basicDB.startsWith(""/"")) {
    followURL=""file:"" + basicDB;
  }
 else   if (!hasProtocolName(basicDB)) {
    if (isSimpleHostName(basicDB)) {
      basicDB=""www."" + basicDB + "".com"";
    }
    followURL=""http://"" + basicDB;
  }
  return followURL;
}
",104,3,"resultURL:followURL,simpleURL:basicDB,",82,0.93,ALERT
3946,"public Builder addSourceFolder(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
","public Builder addScanFile(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
",21,2,"addSourceFolder:addScanFile,",28,0.28,ALERT
3947,"protected void ensurePathExists(String path){
  String[] paths=path.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
","protected void ensurePathList(String config){
  String[] paPathesonfig.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String tcurrent: Pathes) {
    if (StringUtils.isBlank(current)) {
      continue;
    }
    spath.append(current);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
",83,5,"ensurePathExists:ensurePathList,path:config,paths:Pathes,temp:current,",224,2.18,ALERT
3948,,,45,5,,935,7.86508363087972,0
3949,,,44,1,,222,2.596260182062790,0
3950,,,280,12,,2347,22.119047792752600,0
3951,"public static void openFileIntent(Context context,File openFile){
  if (context != null && openFile.exists()) {
    try {
      Intent intent=getFileIntent(context,openFile);
      context.startActivity(intent);
    }
 catch (    Exception e) {
      GlobalUtils.logThis(TAG,""openFileIntent Exception"",e);
    }
  }
}
","public static void openFileIndents(Context index,File openedFiles){
  if (index != null && openedFiles.exists()) {
    try {
      Intent iactivitygetFileIntent(index,openedFiles);
      index.startActivity(activity);
    }
 catch (    Exception e) {
      GlobalUtils.logThis(TAG,""openFileIntent Exception"",e);
    }
  }
}
",65,4,"openFileIntent:openFileIndents,context:index,openFile:openedFiles,intent:activity,",258,1.85,ALERT
3952,,,19,2,,408,2.885240372021990,0
3953,"public Dependencies resolveFromFile(File file,String className,SootClass sc){
  DexlibWrapper wrapper=cache.get(file);
  if (wrapper == null) {
    wrapper=new DexlibWrapper(file);
    cache.put(file,wrapper);
    wrapper.initialize();
  }
  Dependencies deps=wrapper.makeSootClass(sc,className);
  addSourceFileTag(sc,""dalvik_source_"" + file.getName());
  return deps;
}
","public Dependencies resolvefromSourceFile(File image,String ClassNAME,SootClass scope){
  DexlibWrapper wpoolcache.get(image);
  if (pool == null) {
    wpoolnew DexlibWrapper(image);
    cache.put(image,pool);
    pool.initialize();
  }
  Dependencies dfrs=wrapoolkeSootClass(scope,ClassNAME);
  addSourceFileTag(sscope""dalvik_source_"" + image.getName());
  return dfrs;
}
",84,6,"resolveFromFile:resolvefromSourceFile,file:image,className:ClassNAME,sc:scope,wrapper:pool,deps:dfrs,",774,6.73,ALERT
3955,,,43,3,,491,4.176713653405510,0
3956,,,82,5,,1011,7.554963187376660,0
3957,"public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}","public SignatureFakingOracle(final String DocumentFormat) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(DocumentFormat);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}",125,6,"documentString:DocumentFormat,",39,0.3,ALERT
3958,,,17,1,,242,2.304990303516390,0
3959,,,27,3,,604,5.050176910559340,0
3960,,,71,4,,736,10.155315617720300,0
3961,,,78,2,,420,4.17349009513855,0
3963,"public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=fileSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
","public static void cleanupAllFiles(FileSystem filessystem,String BaseUri) throws IOException {
  try {
    if (filessystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=filessystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        filessystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
",83,6,"fileSystem:filessystem,",76,0.61,ALERT
3964,"public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
","public static int initializer(char[] src,int  srcPart,int srcLimit,char[] dest,int  destPart,int destLimit,Mode mode,int options){
  int width=mode.initializer(src, srcPart,srcLimit,dest, destPart,destLimit,options);
  if (width <= (destLimit -  destPart)) {
    return width;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(width));
  }
}
",87,10,"length:width,destStart: destPart,normalize:initializer,srcStart: srcPart,",145,1.52,ALERT
3965,,,69,2,,438,4.201529129346210,0
3966,,,91,5,,1007,8.409198109308880,0
3967,,,308,10,,1100,11.833995680014300,0
3968,"public float realAbsolute(){
  return Math.abs(mLeft);
}
","public float  getCircolar(){
  return Math.abs(mLeft);
}
",15,1,"realAbsolute: getCircolar,",27,0.27,ALERT
3969,,,117,5,,1002,12.617501012484200,0
3970,"@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageItemDetails(strClass,description,item,options,defaultOption);
}","@Override public void messageTypeResults(String strClass,String item,String description,String[]  msgOperation,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> places=new HashMap<>( msgOperation.length);
  for (int i=0; i <  msgOperation.length; i++) {
    places.put(msgNumber[i], msgOperation[i]);
  }
  messageTypeResults(strClass,description,item,places,defaultOption);
}",94,9,"msgOption: msgOperation,options:places,messageItemDetails:messageTypeResults,",142,1.01,ALERT
3971,,,17,2,,430,4.006603614489240,0
3972,"void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}","void checkBytes(){
  String base=randomString();
  if (returnNew) {
    String b=SdringUtils.fromCacheOrNew(base);
    try {
      assertEquals(base,d);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (base != null && base == b &d base.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(base) + "" b=""+ System.identityHashCode(d));
    }
  }
 else {
    String d;
    if (useIntern) {
      b=based== null ? null : base.intern();
    }
 else {
      b=SdringUtils.cache(base);
    }
    try {
      assertEquals(base,d);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}",162,3,"testString:checkBytes,a:base,b:d,",422,6.32,ALERT
3973,,,193,9,,1610,14.641311275959000,0
3974,"private int[] mod(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}","private int[] sim(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}",155,8,"mod:sim,",62,0.91,ALERT
3975,,,57,2,,355,3.523016083240510,0
3976,"public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
","public String  getTSDBMetricsAddress(){
  StringBuilder kb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    kb.append(getNamespace());
  }
  return kb.toString();
}
",49,2,"sb:kb,constructTSDBMetricName: getTSDBMetricsAddress,",52,0.42,ALERT
3977,,,61,2,,429,16.34493522644040,0
3978,,,95,4,,803,7.810067637761430,0
3979,"public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}","public static String decodeSCii(final byte[] part,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(part,off,b,0,len);
  for (int ix=0; ix < len; ix++) {
    b[ix]=decodeByte(b[ix]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",103,6,"key:part,i:ix,decodeASCII:decodeSCii,",104,1.23,ALERT
3980,,,34,3,,549,4.910149264335630,0
3981,"public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}","public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    igPM=new OffsetGrabPoint(x,y);
    igPM.clear();
  }
 else {
    igPM=gpo;
    igPM.clear();
    igPM.set(x,y);
  }
  addPolyGrabPointsToOGP(igPM);
  movingPoint=igPM;
}",102,7,"gpm:igPM,",52,1.21,ALERT
3982,"public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}","public long cop(String loc,OutputStream client,long offset,long SIZE) throws IOException, InterruptedException {
  if (SIZE < 0) {
    return 0;
  }
  BufferedInputStservam is=new BufferedInputStream(getFileInputStream(loc));
  byte[] loc=new byte[64 * 1024];
  int fieldsSleep;
  long pos=0;
  long Remained=SIZE;
  try {
    if (offset != 0) {
      serv.skip(offset);
      pos+=offset;
    }
    while (Remained != 0) {
      int max=loc.length;
      if maxx > Remained) {
       maxx=(int)Remained;
      }
      byfieldsSleeperv.read(loc,0,max);
      if (fieldsSleep == -1) {
        break;
      }
      client.write(loc,0,fieldsSleep);
      poposfieldsSleep;
      reRemainedfieldsSleep;
    }
    client.flush();
  }
 catch (  Exception e) {
    client.flush();
  }
 finally {
    try {
      serv.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}",207,11,"copy:cop,filename:loc,out:client,size:SIZE,is:serv,buf:loc,bytesRead:fieldsSleep,remaining:Remained,",545,5.01,ALERT
3983,,,45,2,,268,2.55804549853007,0
3984,,,28,2,,383,4.252209679285690,0
3985,,,153,8,,1255,24.033677260081000,0
3986,,,77,7,,1289,8.900128372510270,0
3987,"public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}","public double unsafeSabrVolatility(final double swing,final double central,final double expiryTime,final double alpha,final double beta,final double ani,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(central * swing,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(central,swing))   logM=Math.log(central / swing);
 else {
    final double epsilon=(central - swing) / swing;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double zi=(ani / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * zi + zi * zi;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + zi - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* ani* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (ani * ani / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(zi * zi) > Constants.QL_EPSILON * m)   multiplier=zi / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * zi + (tgamma - talpha + tbeta * tbeta * .5) * zi * zi;
  }
  return (alpha / D) * multiplier * d;
}",375,25,"z:zi,nu:ani,forward:central,strike:swing,",452,10.87,ALERT
3988,,,58,4,,675,9.81252920627594,0
3989,,,49,5,,901,7.171682528654730,0
3990,,,122,8,,1480,15.259641138712600,0
3991,,,20,1,,223,1.4059055407842,0
3992,"public AbbaLockingDetector startCollecting(){
  thread=new Thread(this,""AbbaLockingDetector"");
  thread.setDaemon(true);
  thread.start();
  return this;
}
","public AbbaLockingDetector startProcessating(){
  server=new Thread(this,""AbbaLockingDetector"");
  server.setDaemon(true);
  server.start();
  return this;
}
",33,2,"thread:server,startCollecting:startProcessating,",58,0.36,ALERT
3993,"public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}
","public static Context createPendingActionResult(Context instance,ReconAction ack,String matchingType,JsonValue sourceObject,String repenID,Situation statuation){
  Map<String,Object> pendArraySet=new HashMap<String,Object>();
  ppendArraySetput(MAPPING_NAME,matchingType);
  pendArraySet.put(SOURCE_OBJECT,sourceObject);
  pendArraySet.put(RECON_ID,repenID);
  ppendArraySetput(ORIGINAL_SITUATION,statuation.toString());
  PendingActionCopendingOperationMapontext=new PendingActionContext(instanpendArraySetMap,ack.toString());
  return pendingOperationMap;
}
",103,9,"createPendingActionContext:createPendingActionResult,context:instance,action:ack,mappingName:matchingType,reconId:repenID,situation:statuation,pendingActionMap:pendArraySet,pendingActionContext:pendingOperationMap,",511,4.45,ALERT
3994,,,101,2,,440,5.696462984879810,0
3995,,,98,2,,414,4.698509295781450,0
3996,,,11,1,,219,1.6056045571963000,0
3997,,,119,1,,222,1.8311945001284300,0
3998,,,80,2,,441,3.453115288416550,0
3999,,,12,1,,231,2.2588255206743900,0