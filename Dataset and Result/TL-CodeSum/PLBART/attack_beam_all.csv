Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,"public void addListener(Listener listener){
  mListeners.add(listener);
  notifyServiceDiscovered(mMatchingDrones);
}
","public void removeAdapter(Listener peeners){
  mListeners.add(peeners);
  notifyServiceDiscovered(mMatchingDrones);
}
",21,4,"listener:peeners,addListener:removeAdapter,",52,0.23843586444854700,Beam
3,"public void writeSI32(int value) throws IOException {
  flushBits();
  out.write(value & 0xff);
  out.write(value >> 8);
  out.write(value >> 16);
  out.write(value >> 24);
  bytesWritten+=4;
}","public void writeSU32(int data) throws IOException {
  flushBits();
  out.write(data & 0xff);
  out.write(data >> 8);
  out.write(data >> 16);
  out.write(data >> 24);
  bytesWritten+=4;
}",58,4,"writeSI32:writeSU32,value:data,",84,0.36806676387786900,Beam
5,,,33,3,,484,2.344312830766040,0
8,"public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}
","public boolean validate(String test,String rule){
  return (test.equalsIgnoreCase(rule));
}
",22,3,"value:test,",52,0.190716818968455,Beam
9,,,24,2,,270,1.3106600443522100,0
10,"public static <T>String toString(Collection<T> collection){
  if (collection == null) {
    return ""null"";
  }
  if (collection.isEmpty()) {
    return """";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="""";
  for (  T t : collection) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter="", "";
  }
  return buf.toString();
}
","public static <T>String getstring(Collection<T> document){
  if (document == null) {
    return ""null"";
  }
  if (document.isEmpty()) {
    return """";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="""";
  for (  T t : document) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter="", "";
  }
  return buf.getstring();
}
",97,5,"toString:getstring,collection:document,",115,0.5535227139790850,Beam
11,"private static String expandSystemIdStrictOn(String systemId,String baseSystemId) throws URI.MalformedURIException {
  URI systemURI=new URI(systemId,true);
  if (systemURI.isAbsoluteURI()) {
    return systemId;
  }
  URI baseURI=null;
  if (baseSystemId == null || baseSystemId.length() == 0) {
    baseURI=getUserDir();
  }
 else {
    baseURI=new URI(baseSystemId,true);
    if (!baseURI.isAbsoluteURI()) {
      baseURI.absolutize(getUserDir());
    }
  }
  systemURI.absolutize(baseURI);
  return systemURI.toString();
}","private static String expandSystemIdStrictOn(String serverId,String baseSystemId) throws URI.MalformedURIException {
  URI systemURI=new URI(serverId,true);
  if (systemURI.isAbsoluteURI()) {
    return serverId;
  }
  URI baseURI=null;
  if (baseSystemId == null || baseSystemId.length() == 0) {
    baseURI=getUserDir();
  }
 else {
    baseURI=new URI(baseSystemId,true);
    if (!baseURI.isAbsoluteURI()) {
      baseURI.absolutize(getUserDir());
    }
  }
  systemURI.absolutize(baseURI);
  return systemURI.toString();
}",115,5,"systemId:serverId,",6,0.032985417048136400,Beam
12,"private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}","private void apply(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}",213,11,"checkHeadingsHierarchy:apply,",58,0.5228331486384070,Beam
14,,,36,3,,248,1.165953763326010,0
15,"private static int compareLocales(Locale primary,Locale other){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(other.getLanguage())) {
    return 0;
  }
  final String country=primary.getCountry();
  if ((country == null) || !country.equals(other.getCountry())) {
    return 1;
  }
  final String variant=primary.getVariant();
  if ((variant == null) || !variant.equals(other.getVariant())) {
    return 2;
  }
  return 3;
}","private static int compareLocalale(Locale primary,Locale second){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(second.getLanguage())) {
    return 0;
  }
  final String country=primary.getCountry();
  if ((country == null) || !country.equals(second.getCountry())) {
    return 1;
  }
  final String variant=primary.getVariant();
  if ((variant == null) || !variant.equals(second.getVariant())) {
    return 2;
  }
  return 3;
}",121,6,"other:second,compareLocales:compareLocalale,",96,0.6349875410397850,Beam
16,"public JKSSignatureToken(InputStream ksStream,String ksPassword){
  try {
    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    password=(ksPassword == null) ? null : ksPassword.toCharArray();
    keyStore.load(ksStream,password);
  }
 catch (  Exception e) {
    throw new DSSException(e);
  }
 finally {
    if (ksStream != null) {
      try {
        ksStream.close();
      }
 catch (      IOException e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
}
","public JKSSigningToken(InputStream ksStream,String ksPassword){
  try {
    kStore=KeyStore.getInstance(KeyStore.getDefaultType());
    password=(ksPassword == null) ? null : ksPassword.toCharArray();
    kStore.load(ksStream,password);
  }
 catch (  Exception e) {
    throw new DSSException(e);
  }
 finally {
    if (ksStream != null) {
      try {
        ksStream.close();
      }
 catch (      IOException e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
}
",106,7,"JKSSignatureToken:JKSSigningToken,keyStore:kStore,",1000,5.070086534818010,Beam
18,"public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eCoord=e.getCoordinates();
    if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e;
    if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;
  }
  return null;
}","public Edge findEdgeInSameDirection(Coordinate p2,Coordinate p1){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eCoord=e.getCoordinates();
    if (matchInSameDirection(p2,p1,eCoord[0],eCoord[1]))     return e;
    if (matchInSameDirection(p2,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;
  }
  return null;
}",111,7,"p0:p2,",7,0.05380055507024130,Beam
19,"@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}
","@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse newDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.newDirectory(applicationName,containerId,path);
  return new HttpOk();
}
",101,6,"createDirectory:newDirectory,",36,0.37370365063349400,Beam
20,"public ViterbiPoint(Item item){
  this.item=item;
}
","public VerbiPart(Item object){
  this.object=object;
}
",14,2,"ViterbiPoint:VerbiPart,item:object,",177,0.6498730738957720,Beam
21,"public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}","public void calc(double value){
  setValue(Math.max(0,getValue() - value));
}",25,2,"damage:calc,",4,0.02138320207595830,Beam
22,"void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}","void class(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}",195,9,"define:class,",46,0.26559632619222000,Beam
23,"public void addScriptFinishedListener(ScriptExecutionListener l){
  m_FinishedListeners.add(l);
}
","public void addScriptFinishingHandler(ScriptExecutionListener le){
  m_FinishedListeners.add(le);
}
",16,3,"addScriptFinishedListener:addScriptFinishingHandler,l:le,",58,0.3095786690711980,Beam
24,"public Hashtable<IPoint,List<ILineSegment>> intersections(Iterator<ILineSegment> it){
  Collection<ILineSegment> c=new ArrayList<ILineSegment>();
  while (it.hasNext()) {
    c.add(it.next());
  }
  return intersections(c.toArray(new ILineSegment[]{}));
}
","public Hashtable<IPoint,List<ILineSegment>> consection(Iterator<ILineSegment> it){
  Collection<ILineSegment> c=new ArrayList<ILineSegment>();
  while (it.hasNext()) {
    c.add(it.next());
  }
  return consection(c.toArray(new ILineSegment[]{}));
}
",71,3,"intersections:consection,",43,0.17627718846003200,Beam
25,"@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
","@Override public boolean addOutputSensor(String sickerDesign,int state){
  OutputSensor outputSensor=new OutputSensor(sickerDesign);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
",48,5,"sensorName:sickerDesign,",28,0.11706882317860900,Beam
26,"public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
","public IVariable[] extractRobotDebugVariables(final int stackTraceName,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceName);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceName,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
",123,7,"stackTraceId:stackTraceName,",3,0.04128554662068690,Beam
27,"protected void create_y_axis(int i){
  Log.e(""index vlaue"",i + """");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}","protected void create_dy2column(int j){
  Log.e(""index vlaue"",j + """");
  float ver_height=((graphheight / label_size) * j) + border;
  if (j == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - j;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}",156,14,"create_y_axis:create_dy2column,i:j,",77,0.5085900147755940,Beam
28,"public void emitRetainedVars(GenerateJsVisitor gen){
  if (!retainedVars.isEmpty()) {
    gen.out(""var "");
    boolean first=true;
    for (    String varName : retainedVars) {
      if (!first) {
        gen.out("","");
      }
      first=false;
      gen.out(varName);
    }
    gen.endLine(true);
    retainedVars.clear();
  }
}
","public void emitRetainVariars(GenerateJsVisitor gen){
  if (!retainVables.isEmpty()) {
    gen.out(""var "");
    boolean first=true;
    for (    String varName : retainVables) {
      if (!first) {
        gen.out("","");
      }
      first=false;
      gen.out(varName);
    }
    gen.endLine(true);
    retainVables.clear();
  }
}
",79,5,"emitRetainedVars:emitRetainVariars,retainedVars:retainVables,",259,1.1103216409683200,Beam
29,"public void hspan(double start,double end,Paint color,String legend){
  LegendText legendText=new LegendText(color,legend);
  comments.add(legendText);
  plotElements.add(new HSpan(start,end,color,legendText));
}
","public void vchart(double start,double end,Paint black,String lagend){
  LegendText LegendaText=new LegendText(black,lagend);
  comments.add(LegendaText);
  plotElements.add(new HSpan(start,end,black,LegendaText));
}
",53,8,"legend:lagend,hspan:vchart,color:black,legendText:LegendaText,",1773,7.673441902796430,Beam
30,"public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
","public void deleteresourceDir(String clusterId,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterId,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
",73,6,"deleteResourceConfig:deleteresourceDir,clusterName:clusterId,",268,1.1604883392651900,Beam
31,"public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}
","public static String toStr(final URI uri,final Charset etasing) throws IOException {
  return IOUtils.toStr(uri.toURL(),Charsets.toCharset(etasing));
}
",36,3,"toString:toStr,encoding:etasing,",151,0.7134375850359600,Beam
32,,,21,2,,294,1.9267601132392900,0
33,,,16,3,,389,1.3567305525143900,0
35,"public AtomicDoubleArray(int length){
  larray=new AtomicLongArray(length);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int i=0; i < length; i++)   larray.set(i,ZERO);
}","public AtomicDoubleArray(int type){
  larray=new AtomicLongArray(type);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int i=0; i < type; i++)   larray.set(i,ZERO);
}",49,5,"length:type,",5,0.0288287878036499,Beam
36,"public static String decode(AbstractMessage msg,Boolean ext,int header){
  if (ext == false) {
    return decode(msg);
  }
  return ""Bootloader Message Type: "" + header;
}
","public static String decod(AbstractMessage msg,Boolean ext,int header){
  if (ext == false) {
    return decod(msg);
  }
  return ""Bootloader Message Type: "" + header;
}
",35,4,"decode:decod,",99,0.42222668329874700,Beam
37,"private double normalDens(double x,double mean,double stdDev){
  double diff=x - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}","private double normalDens(double xp,double mean,double stdDev){
  double diff=xp - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}",53,6,"x:xp,",60,0.2506330331166590,Beam
39,,,34,3,,536,3.4491909543673200,0
40,"public static double rootMeansSquaredError(double[] real,double[] predicted){
  double ret=0.0;
  for (int i=0; i < real.length; i++) {
    ret+=Math.pow((real[i] - predicted[i]),2);
  }
  return Math.sqrt(ret / real.length);
}","public static double kMeansSquaresMass(double[] real,double[] predicted){
  double ret=0.0;
  for (int i=0; i < real.length; i++) {
    ret+=Math.pow((real[i] - predicted[i]),2);
  }
  return Math.sqrt(ret / real.length);
}",73,5,"rootMeansSquaredError:kMeansSquaresMass,",43,0.17151681582133000,Beam
41,"protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}
","protected void processEventCommand(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processEventCommand(e);
}
",51,4,"processMouseEvent:processEventCommand,",44,0.18329754670461000,Beam
42,"public void postProcess(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
","public void postConstruct(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
",37,4,"postProcess:postConstruct,",4,0.01033865213394170,Beam
43,,,64,5,,972,3.1151431957880700,0
44,"public static int randGaussian(final int mean,final int sd){
  return (int)(rand.nextGaussian() * sd + mean);
}
","public static int NextSllli(final int mean,final int sd){
  return (int)(rand.nextGaussian() * sd + mean);
}
",31,4,"randGaussian:NextSllli,",84,0.3231474280357360,Beam
45,"private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
","private void onTrackpointstart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
",35,6,"onTrackPointStart:onTrackpointstart,",16,0.06621171633402510,Beam
46,"void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
","void dispose(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
",24,4,"release:dispose,",7,0.02528987725575770,Beam
47,"public FST(String fileName,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fileName);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}
","public PFST(String fileName,String encoding,boolean verbpose) throws IOException {
  FileInputStream fis=new FileInputStream(fileName);
  try {
    loadHeaderless(fis,encoding,verbpose);
  }
  finally {
    fis.close();
  }
}
",46,5,"verbose:verbpose,FST:PFST,",103,0.35319286584854100,Beam
48,"@Override public void flush(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}
","@Override public void push(){
  FlushTask channel;
synchronized (logRecords) {
    channel=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  channel.run();
}
",45,3,"flush:push,task:channel,",102,0.425245209534963,Beam
49,"private void destinationTypeChanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}","private void destributionTypechanged(){
  if (m_Oracle == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Oracle.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Oracle.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Oracle.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}",437,16,"destinationTypeChanged:destributionTypechanged,m_Exp:m_Oracle,",32,0.2872522195180260,Beam
50,"public Builder addEmail(Email email){
  emails.add(email);
  return this;
}
","public Builder AddEmail(Email email){
  emails.add(email);
  return this;
}
",19,3,"addEmail:AddEmail,",9,0.02444148858388270,Beam
51,,,129,10,,2151,9.948635749022170,0
52,"private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + "" "" + key+ ""=""+ from.getAttribute(key)+ "";"";
    }
 else {
      to.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}","private static void convertToHTML40(AttributeSet from,MutableAttributeSet per){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + "" "" + key+ ""=""+ from.getAttribute(key)+ "";"";
    }
 else {
      per.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    per.addAttribute(HTML.Attribute.STYLE,value);
  }
}",117,6,"to:per,",44,0.20631224314371700,Beam
53,"public void resetCount(){
  msgCnt.set(0);
}","public void resetSum(){
  msgCountnt.set(0);
}",14,2,"resetCount:resetSum,msgCnt:msgCountnt,",48,0.1656735142072040,Beam
54,"public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}","public static int encodeGCFiles(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}",36,3,"encodeCacheFlags:encodeGCFiles,",16,0.06902869542439780,Beam
55,"private static boolean isIdentifierName(String k){
  int n=k.length();
  if (n == 0) {
    return false;
  }
  if (!Character.isJavaIdentifierStart(k.charAt(0))) {
    return false;
  }
  for (int i=1; i < n; ++i) {
    if (!Character.isJavaIdentifierPart(k.charAt(i))) {
      return false;
    }
  }
  return true;
}","private static boolean isIdentVariableText(String kid){
  int conn=kid.length();
  if (conn == 0) {
    return false;
  }
  if (!Character.isJavaIdentifierStart(kid.charAt(0))) {
    return false;
  }
  for (int i=1; i < conn; ++i) {
    if (!Character.isJavaIdentifierPart(kid.charAt(i))) {
      return false;
    }
  }
  return true;
}",89,4,"k:kid,isIdentifierName:isIdentVariableText,n:conn,",306,1.5272217830022200,Beam
56,"public synchronized void schedulePeriodicTask(TimerTask task,long period){
  try {
    m_timer.scheduleAtFixedRate(task,0,period);
  }
 catch (  IllegalStateException ie) {
    m_timer=new Timer();
    m_timer.scheduleAtFixedRate(task,0,period);
  }
}","public synchronized void schedulePeriodicTime(TimerTask t,long period){
  try {
    m_timer.scheduleAtFixedRate(t,0,period);
  }
 catch (  IllegalStateException ie) {
    m_timer=new Timer();
    m_timer.scheduleAtFixedRate(t,0,period);
  }
}",52,4,"task:t,schedulePeriodicTask:schedulePeriodicTime,",177,0.8769983688990280,Beam
57,"public static long firstFieldOffset(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}","public static long objectObjectEntry(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}",95,6,"firstFieldOffset:objectObjectEntry,",10,0.045149600505828900,Beam
58,"private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
","private void orderChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> Operations=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      Operations.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : Operations) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
",204,8,"sortChildren:orderChildren,operators:Operations,",214,1.2261673251787800,Beam
59,,,17,2,,140,0.6608567754427590,0
60,"private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){
  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {
    LSTNode node=(LSTNode)e.nextElement();
    BasicBlock header=node.getHeader();
    BitVector loop=node.getLoop();
    if (loop == null)     continue;
    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {
      BasicBlock bb=in.nextElement();
      if (loop.get(bb.getNumber()))       continue;
      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);
      for (      Register r : liveRegisters) {
        if (r.isSymbolic()) {
          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);
          s.add(r);
        }
      }
    }
    for (int i=0; i < loop.length(); i++) {
      if (loop.get(i)) {
        BasicBlock bb=ir.getBasicBlock(i);
        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (loop.get(dest.getNumber()))           continue;
          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);
          for (          Register r : liveRegisters) {
            if (r.isSymbolic()) {
              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);
              s.add(r);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(ir,live,result);
  return result;
}","private static HashMap<BasicBlockPair,HashSet<Register>> findsplitPoint(IR ir,LiveAnalysis live,LSTGraph lst){
  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {
    LSTNode node=(LSTNode)e.nextElement();
    BasicBlock header=node.getHeader();
    BitVector loop=node.getLoop();
    if (loop == null)     continue;
    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {
      BasicBlock bb=in.nextElement();
      if (loop.get(bb.getNumber()))       continue;
      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);
      for (      Register r : liveRegisters) {
        if (r.isSymbolic()) {
          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);
          s.add(r);
        }
      }
    }
    for (int i=0; i < loop.length(); i++) {
      if (loop.get(i)) {
        BasicBlock bb=ir.getBasicBlock(i);
        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (loop.get(dest.getNumber()))           continue;
          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);
          for (          Register r : liveRegisters) {
            if (r.isSymbolic()) {
              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);
              s.add(r);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(ir,live,result);
  return result;
}",369,17,"findSplitPoints:findsplitPoint,",115,0.915110711256663,Beam
61,"public static int unixTimestamp(){
  return (int)(System.currentTimeMillis() / 1000L);
}","public static int unixTimetime(){
  return (int)(System.currentTimeMillis() / 1000L);
}",22,1,"unixTimestamp:unixTimetime,",4,0.02034621238708500,Beam
62,,,29,2,,166,0.6740087985992430,0
63,"public void mousePressed(MouseEvent e){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);
  if (SwingUtilities.isLeftMouseButton(e)) {
    if (e.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(e);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {
        selectWord(e);
      }
    }
  }
}","public void mousePressed(MouseEvent enter){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),enter);
  if (SwingUtilities.isLeftMouseButton(enter)) {
    if (enter.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(enter);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(enter)) {
        selectWord(enter);
      }
    }
  }
}",80,4,"e:enter,",28,0.14264449675877900,Beam
64,,,26,2,,236,1.0717995683352200,0
65,"public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
","public static void v(Zdiagmat D){
  v(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
",23,2,"o:v,",46,0.20413784186045300,Beam
66,"public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}","public void insertOrReclect(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}",190,6,"insertOrRefresh:insertOrReclect,",12,0.08931560516357420,Beam
67,"public final boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)object;
  return from.equals(pair.from) && to.equals(pair.to);
}
","public final boolean compizes(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)object;
  return from.compizes(pair.from) && to.compizes(pair.to);
}
",62,5,"equals:compizes,",10,0.05507196187973020,Beam
68,"public String requestStatistics(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}","public String requestStatistics(){
  orb.setLength(0);
  makeStringBuffer(orb);
  return orb.toString();
}",26,2,"sb:orb,",49,0.18742875258127800,Beam
69,,,14,2,,149,0.5569701592127480,0
70,"@Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){
  if (!initIfNecessary()) {
    return null;
  }
  File avdFolder;
  try {
    if (currentInfo != null) {
      avdFolder=new File(currentInfo.getDataFolderPath());
    }
 else {
      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error(""Could not create AVD "" + avdName,e);
    return null;
  }
  Dimension resolution=device.getScreenSize(orientation);
  assert resolution != null;
  String skinName=null;
  if (skinFolder == null && isCircular) {
    skinFolder=getRoundSkin(systemImageDescription);
  }
  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {
    skinFolder=null;
  }
  if (skinFolder == null) {
    skinName=String.format(""%dx%d"",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));
  }
  if (orientation == ScreenOrientation.LANDSCAPE) {
    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (currentInfo != null && !avdName.equals(currentInfo.getName())) {
    boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG);
}
","@Nullable public AvdInfo generate(@Nullable AvdInfo reportedData,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){
  if (!initIfNecessary()) {
    return null;
  }
  File avdFolder;
  try {
    if (reportedData != null) {
      avdFolder=new File(reportedData.getDataFolderPath());
    }
 else {
      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error(""Could not create AVD "" + avdName,e);
    return null;
  }
  Dimension resolution=device.getScreenSize(orientation);
  assert resolution != null;
  String skinName=null;
  if (skinFolder == null && isCircular) {
    skinFolder=getRoundSkin(systemImageDescription);
  }
  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {
    skinFolder=null;
  }
  if (skinFolder == null) {
    skinName=String.format(""%dx%d"",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));
  }
  if (orientation == ScreenOrientation.LANDSCAPE) {
    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (reportedData != null && !avdName.equals(reportedData.getName())) {
    boolean success=myAvdManager.moveAvd(reportedData,avdName,reportedData.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,reportedData != null,SDK_LOG);
}
",357,18,"createOrUpdateAvd:generate,currentInfo:reportedData,",804,11.214744969209000,Beam
71,"public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}","public static int ize(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}",151,10,"update:ize,",29,0.10564610560735100,Beam
72,,,147,6,,1485,9.37751856247584,0
73,"public void auditCallhome(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);
}
","public void auditeCallback(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);
}
",44,6,"auditCallhome:auditeCallback,",127,0.5033911903699240,Beam
74,"public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
","public File[] selectSelectNames(final String target,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDial=fileDialogs.get(target);
    if (importDial == null) {
      importDial=new FileDialog(this,target,FileDialog.LOAD);
      fileDialogs.put(target,importDial);
    }
    importDial.setVisible(true);
    if (importDial.getFile() != null) {
      return new File[]{new File(importDial.getDirectory(),importDial.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(target);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(target);
      fileChoosers.put(target,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
",258,10,"title:target,selectImportFiles:selectSelectNames,importDialog:importDial,",1049,6.102885981400810,Beam
75,,,122,12,,1561,6.912252088387810,0
76,,,35,3,,358,1.4345170974731400,0
77,"private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}","private void strokeArea(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}",773,16,"drawCombat:strokeArea,",137,0.8662631829579670,Beam
78,"public static void clearAssertionInformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
","public static void clearAssERTioninformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
",18,3,"clearAssertionInformation:clearAssERTioninformation,",11,0.03268822431564330,Beam
79,"public void circle(double x,double y,double r){
  if (r < 0)   throw new IllegalArgumentException(""circle radius can\'t be negative"");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * r);
  double hs=factorY(2 * r);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}","public void perimeter(double h,double dy,double rad){
  if (rad < 0)   throw new IllegalArgumentException(""circle radius can\'t be negative"");
  double xs=scaleX(h);
  double ys=scaleY(dy);
  double ws=factorX(2 * rad);
  double ht=factorY(2 * rad);
  if (ws <= 1 && ht <= 1)   pixel(h,dy);
 else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - ht / 2,ws,ht));
  draw();
}",113,9,"r:rad,y:dy,x:h,circle:perimeter,hs:ht,",1449,14.128201421101900,Beam
80,"private double[] parseVector(String s){
  String[] entries=WHITESPACE_PATTERN.split(s);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}","private double[] parseMatrix(String r){
  String[] entries=WHITESPACE_PATTERN.split(r);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}",89,5,"parseVector:parseMatrix,s:r,",48,0.26070456902186100,Beam
81,,,31,4,,587,2.768655995527900,0
82,"@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public int Read(char b[],int off,int lim) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (lim < 0)|| ((off + lim) > b.length)|| ((off + lim) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (lim == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + lim > count) {
    lim=count - pos;
  }
  if (lim <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,lim);
  pos+=lim;
  return lim;
}",150,7,"read:Read,len:lim,",246,2.8774312416712400,Beam
84,"public static boolean isFullCopyRestorable(Volume volume,DbClient dbClient){
  boolean result=false;
  String replicaState=volume.getReplicaState();
  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {
    ReplicationState state=ReplicationState.getEnumValue(replicaState);
    if (state != null && state == ReplicationState.SYNCHRONIZED) {
      result=true;
    }
  }
  return result;
}
","public static boolean isFullcopyRestore(Volume pod,DbClient dbClient){
  boolean result=false;
  String replicaState=pod.getReplicaState();
  if (isVolumeFullCopy(pod,dbClient) && replicaState != null && !replicaState.isEmpty()) {
    ReplicationState state=ReplicationState.getEnumValue(replicaState);
    if (state != null && state == ReplicationState.SYNCHRONIZED) {
      result=true;
    }
  }
  return result;
}
",80,6,"volume:pod,isFullCopyRestorable:isFullcopyRestore,",109,0.9225838383038840,Beam
85,"public void writeLinkedKml(final String filename,final KmlType kml){
  if (filename.equals(""doc.kml"")) {
    throw new IllegalArgumentException(""The filename \'doc.kml\' is reserved for the primary kml."");
  }
  if (filename.equals(""main.kml"")) {
    throw new IllegalArgumentException(""The filename \'main.kml\' is reserved for the main kml."");
  }
  writeKml(filename,kml);
}
","public void writeLinknedAksl(final String filename,final KmlType kml){
  if (filename.equals(""doc.kml"")) {
    throw new IllegalArgumentException(""The filename \'doc.kml\' is reserved for the primary kml."");
  }
  if (filename.equals(""main.kml"")) {
    throw new IllegalArgumentException(""The filename \'main.kml\' is reserved for the main kml."");
  }
  writeKml(filename,kml);
}
",57,3,"writeLinkedKml:writeLinknedAksl,",55,0.2960294604301450,Beam
86,"public void testDivideRoundHalfUpPos(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=-24;
  String b=""7472334223847623782375469293018787918347987234564568"";
  int bScale=13;
  String c=""1.24390557635720517122423359799284E+53"";
  int resScale=-21;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);
  assertEquals(""incorrect value"",c,result.toString());
  assertEquals(""incorrect scale"",resScale,result.scale());
}","public void assertDivideRoundHalfDownBlock(){
  String ab=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=-24;
  String eb=""7472334223847623782375469293018787918347987234564568"";
  int bScale=13;
  String c=""1.24390557635720517122423359799284E+53"";
  int RESScale=-21;
  BigDecimal aNumber=new BigDecimal(new BigInteger(ab),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(eb),bScale);
  BigDecimal result=aNumber.divide(bNumber,RESScale,BigDecimal.ROUND_HALF_UP);
  assertEquals(""incorrect value"",c,result.toString());
  assertEquals(""incorrect scale"",RESScale,result.scale());
}",111,10,"testDivideRoundHalfUpPos:assertDivideRoundHalfDownBlock,resScale:RESScale,b:eb,a:ab,",2332,19.441184210777300,Beam
87,"private void checkInteriorIntersections(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorIntersections(ss0,ss1);
    }
  }
}","private void checkInteriorIntersection(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorIntersection(ss0,ss1);
    }
  }
}",78,6,"checkInteriorIntersections:checkInteriorIntersection,",13,0.12128195762634300,Beam
89,"protected String format(Object o){
  return o.toString();
}
","protected String print(Object o){
  return o.toString();
}
",16,2,"format:print,",4,0.014974268277486200,Beam
90,"public void addAll(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addAll(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}","public void setAll(Collection<? extends T> model){
  if (mEventDelegate != null)   mEventDelegate.addData(model == null ? 0 : model.size());
  if (model != null && model.size() != 0) {
synchronized (mLock) {
      mObjects.setAll(model);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}",74,6,"addAll:setAll,collection:model,",66,0.3296462496121720,Beam
91,,,22,3,,348,1.2103491226832100,0
92,"public static <T>List<T> rest(List<T> l){
  return l.subList(1,l.size());
}","public static <T>List<T> members(List<T> lb){
  return lb.subList(1,lb.size());
}",33,2,"rest:members,l:lb,",236,0.9183222611745200,Beam
93,"private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
","private JsonObject getrequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
",89,7,"createRequest:getrequest,",74,0.2850919763247170,Beam
94,,,24,3,,369,1.5875474015871700,0
95,,,186,12,,3626,123.84159301519400,0
96,,,21,3,,427,1.7487040241559300,0
97,"public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
","public void removeColumn(Column condition){
  if (condition != null) {
    columns.remove(condition);
  }
}
",24,3,"column:condition,",42,0.1396036664644880,Beam
98,"public void playMedia(boolean showPlayerWindow){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerWindow(showPlayerWindow);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}","public void playMedia(boolean showPlayerFrame){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerFrame(showPlayerFrame);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}",70,5,"showPlayerWindow:showPlayerFrame,",18,0.08163666327794390,Beam
100,"public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
","public boolean isLeAF(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
",25,3,"isLeaf:isLeAF,",35,0.13590164184570300,Beam
101,,,14,2,,37,0.12293554147084600,0
102,,,29,3,,566,2.225868268807730,0
103,"public static void logStackTrace(Level level,Throwable throwable){
  logStackTrace(level,throwable,null);
}
","public static void logLineTracing(Level error,Throwable throwable){
  logLineTracing(error,throwable,null);
}
",22,3,"logStackTrace:logLineTracing,level:error,",203,0.872265903155009,Beam
104,"public void printBytes(byte[] data,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}","public void writebytes(byte[] open,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((open[offset] & 0xff) << 16) + ((open[offset + 1] & 0xff) << 8) + (open[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((open[offset] & 0xff) << 8) + (open[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=open[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}",266,6,"printBytes:writebytes,data:open,",224,1.2685398538907400,Beam
105,"protected void tearDown(){
  try {
    ds.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}
","protected void tearingUp(){
  try {
    ds.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}
",29,3,"tearDown:tearingUp,",5,0.025745932261149100,Beam
106,"public InSpacePredicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
","public InSpacePredicate(Object... pages){
  _inValues=new HashSet<Object>();
  for (  Object value : pages) {
    _inValues.add(value);
  }
}
",35,4,"values:pages,",22,0.0719411849975586,Beam
107,,,61,4,,751,5.1552477955818200,0
108,,,104,10,,1803,7.109516179561620,0
109,"@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
","@Override public void loadResources(Task task,Iterable<ObjectId> projectIds,String machinePath){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,machinePath) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,machinePath);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,machinePath,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
",168,11,"addRelations:loadResources,fieldName:machinePath,",419,2.35123287041982,Beam
110,"public void appendSplitElement(Fragment aSplit){
  splits.add(aSplit);
}
","public void appendPartEl(Fragment iPart){
  splits.add(iPart);
}
",16,3,"appendSplitElement:appendPartEl,aSplit:iPart,",57,0.2639033357302350,Beam
111,"public static double[] HPDInterval(double proportion,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}","public static double[] HPDInterval(double preposition,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(preposition * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}",161,11,"proportion:preposition,",44,0.2887787659962970,Beam
112,"public Statement between(Object former,Object later){
  statement.append("" BETWEEN "");
  append(former);
  statement.append("" AND "");
  append(later);
  return this;
}
","public Statement combine(Object flower,Object lower){
  statement.append("" BETWEEN "");
  append(flower);
  statement.append("" AND "");
  append(lower);
  return this;
}
",39,4,"later:lower,former:flower,between:combine,",388,1.784578557809190,Beam
113,,,220,11,,991,4.795467889308930,0
114,"public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}","public static boolean ContainsIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}",77,6,"containIP:ContainsIP,",67,0.4842661738395690,Beam
115,"public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
","public final void registerActivity(@NotNull TransactionRunnable worker){
  myDelayedTasks.add(worker);
}
",19,3,"delayTask:registerActivity,task:worker,",49,0.2596511880556740,Beam
116,"private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      viewMap.remove(name);
    }
    contextMap.clear();
  }
}
","private void destroyLoanners(Map<String,Object> blockMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(blockMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      blockMap.remove(name);
    }
    contextMap.clear();
  }
}
",174,12,"viewMap:blockMap,destroyBeans:destroyLoanners,",252,1.1947487831115700,Beam
117,,,103,6,,1227,7.245817752679190,0
118,"public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}","public static String generateNativeGuidForStoragePortUsingIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}",47,4,"generateNativeGuidForStoragePortFromIndication:generateNativeGuidForStoragePortUsingIndication,",7,0.04230854113896690,Beam
119,"private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}","private void readFinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.readFinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}",316,23,"loadBinary:readFinary,",10,0.06075212558110560,Beam
120,"public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}
","public void configos(SwtPlatform... platformions){
  configos(Arrays.asList(platformions));
}
",20,2,"configs:configos,platforms:platformions,",87,0.3802505572636920,Beam
121,,,38,4,,965,4.389319570859270,0
122,,,22,2,,259,0.9369898160298670,0
123,"@JsonCreator public DataSourceMetadata(@JsonProperty(""name"") String name,@JsonProperty(""properties"") Map<String,String> properties,@JsonProperty(""segments"") List<DataSegment> segments){
  this.name=name;
  this.properties=Collections.unmodifiableMap(properties);
  this.segments=Collections.unmodifiableList(segments);
}
","@JsonCreator public DataSourcesMetadata(@JsonProperty(""name"") String name,@JsonProperty(""properties"") Map<String,String> sheets,@JsonProperty(""segments"") List<DataSegment> sements){
  this.name=name;
  this.sheets=Collections.unmodifiableMap(sheets);
  this.sements=Collections.unmodifiableList(sements);
}
",67,4,"properties:sheets,segments:sements,DataSourceMetadata:DataSourcesMetadata,",393,1.3886813004811600,Beam
124,"static CipherSuite valueOf(int id1,int id2){
  id1&=0xff;
  id2&=0xff;
  int id=(id1 << 8) | id2;
  CipherSuite c=idMap.get(id);
  if (c == null) {
    String h1=Integer.toString(id1,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite(""Unknown 0x"" + h1 + "":0x""+ h2,id);
  }
  return c;
}","static CipherSuite valueof(int idx,int id2){
  idx&=0xff;
  id2&=0xff;
  int id=(idx << 8) | id2;
  CipherSuite c=idMap.get(id);
  if (c == null) {
    String h1=Integer.toString(idx,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite(""Unknown 0x"" + h1 + "":0x""+ h2,id);
  }
  return c;
}",92,8,"valueOf:valueof,id1:idx,",115,0.7153594533602400,Beam
125,"public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}","public static String[] split(String expected,String termininator){
  Vector nodes=new Vector();
  int index=expected.indexOf(termininator);
  while (index >= 0) {
    nodes.addElement(expected.substring(0,index));
    expected=expected.substring(index + termininator.length());
    index=expected.indexOf(termininator);
  }
  nodes.addElement(expected);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}",139,7,"separator:termininator,original:expected,",199,0.9248247146606450,Beam
127,"public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException(""Client not connected"");
    }
    if (!authenticated) {
      throw new IllegalStateException(""Client not authenticated"");
    }
    communication.sendFTPCommand(""MDTM "" + path);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
    String[] messages=r.getMessages();
    if (messages.length != 1) {
      throw new FTPIllegalReplyException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(messages[0]);
      }
 catch (      ParseException e) {
        throw new FTPIllegalReplyException();
      }
    }
  }
}","public Date modStr(String text) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException(""Client not connected"");
    }
    if (!henticated) {
      throw new IllegalStateException(""Client not authenticated"");
    }
    communication.sendFTPCommand(""MDTM "" + text);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
    String[] messages=r.getMessages();
    if (messages.length != 1) {
      throw new FTPIllegalReplyException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(messages[0]);
      }
 catch (      ParseException e) {
        throw new FTPIllegalReplyException();
      }
    }
  }
}",148,8,"modifiedDate:modStr,path:text,authenticated:henticated,",396,1.865758228302000,Beam
128,,,87,4,,130,1.0634322841962200,0
129,,,61,2,,130,0.4616743405659990,0
130,"public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
","public static byte[] nextBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
",33,4,"randomBytes:nextBytes,",35,0.12835877339045200,Beam
131,"String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException {
  Date source=null;
  if (obj instanceof Date) {
    source=(Date)obj;
  }
 else   if (obj instanceof String) {
    try {
      source=parse((String)obj);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((obj == null) ? ""null"" : obj.toString());
  }
  return format(source,toAppendTo);
}
","String version(Object fn,StringBuffer toAppENDTo) throws IllegalArgumentException {
  Date source=null;
  if (fn instanceof Date) {
    source=(Date)fn;
  }
 else   if (fn instanceof String) {
    try {
      source=parse((String)fn);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((fn == null) ? ""null"" : fn.toString());
  }
  return version(source,toAppENDTo);
}
",108,5,"obj:fn,format:version,toAppendTo:toAppENDTo,",382,1.756481373310090,Beam
132,,,32,5,,454,1.7888544917106600,0
133,,,73,5,,197,1.4177557190259300,0
134,,,40,4,,678,3.5569854815801000,0
135,"@Override public void processNewLines(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}","@Override public void processNewLocations(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}",202,14,"processNewLines:processNewLocations,",4,0.029713515440623000,Beam
136,"private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
","private static void addItemsInArray(int startPosition,int endIndex){
  for (int i=startPosition; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
",40,5,"startIndex:startPosition,addItemsToList:addItemsInArray,",75,0.33178061644236200,Beam
137,"public static String toRegex(String glob,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegex(glob,separator.charAt(0));
}","public static String toRegExp(String globs,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegExp(globs,separator.charAt(0));
}",48,3,"toRegex:toRegExp,glob:globs,",101,0.41803059180577600,Beam
138,"static Object ensureNotNull(Location location,Object value){
  if (value == null) {
    throw new EvalException(location,""Snippet runtime does not support null values."");
  }
  return value;
}
","static Object enspectNonNone(Location feature,Object value){
  if (value == null) {
    throw new EvalException(feature,""Snippet runtime does not support null values."");
  }
  return value;
}
",32,3,"ensureNotNull:enspectNonNone,location:feature,",103,0.5046388943990070,Beam
139,,,45,5,,833,3.103722647825880,0
140,"public void testSetNull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}","public void testTestnull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}",105,3,"testSetNull:testTestnull,",12,0.09617139101028440,Beam
141,"public void onIdleBegin(){
  _idleCount.incrementAndGet();
}
","public void onIdLEEnd(){
  _activeleTime.incrementAndGet();
}
",13,2,"onIdleBegin:onIdLEEnd,_idleCount:_activeleTime,",92,0.3555539051691690,Beam
142,"public boolean canGetInt(){
  return canGet(int.class);
}
","public boolean cangetInt(){
  return canGet(int.class);
}
",15,1,"canGetInt:cangetInt,",6,0.029027223587036100,Beam
143,"public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}","public String fadeAudio(String dir,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(dir);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(dir);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}",236,14,"path:dir,",3,0.04091064135233560,Beam
144,,,68,8,,546,1.9120140552520800,0
146,"public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){
  if (companyId < 0 || 0xFFFF < companyId) {
    String message=String.format(""\'companyId\' is out of the valid range: %d"",companyId);
    throw new IllegalArgumentException(message);
  }
  if (builder == null) {
    return;
  }
  Integer key=Integer.valueOf(companyId);
  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);
  if (builders == null) {
    builders=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(key,builders);
  }
  builders.add(0,builder);
}","public void registerManufacturerSpecialBuilding(int commonId,ADManufacturerSpecificBuilder builder){
  if (commonId < 0 || 0xFFFF < commonId) {
    String message=String.format(""\'companyId\' is out of the valid range: %d"",commonId);
    throw new IllegalArgumentException(message);
  }
  if (builder == null) {
    return;
  }
  Integer key=Integer.valueOf(commonId);
  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);
  if (builders == null) {
    builders=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(key,builders);
  }
  builders.add(0,builder);
}",112,7,"registerManufacturerSpecificBuilder:registerManufacturerSpecialBuilding,companyId:commonId,",95,0.7173842072486880,Beam
147,"public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}","public static boolean comports(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.comports(field1,field2);
  }
}",55,3,"equals:comports,",33,0.21992913881937700,Beam
148,"final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void line(char iv){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(iv);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",72,6,"v:iv,println:line,",63,0.28635690212249800,Beam
149,"protected void cutSelectedBean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
","protected void cutSelectionBean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
",165,8,"cutSelectedBean:cutSelectionBean,",3,0.02368847131729130,Beam
150,"public boolean isLeaf(){
  return children == null || children.isEmpty();
}
","public boolean isDeleaf(){
  return json == null || json.isEmpty();
}
",18,2,"isLeaf:isDeleaf,children:json,",157,0.6999466935793560,Beam
151,"public String render(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
","public String paint(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
",25,3,"render:paint,",6,0.03721069892247520,Beam
152,,,121,9,,3359,25.71507863998410,0
153,"public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}","public final ArrayList<Move> removenonoptimum(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}",310,13,"removeNonOptimal:removenonoptimum,",56,0.34634257555007900,Beam
154,"public UpdateClause addAssignment(Expression expression){
  assignments.add(new Assignment(expression));
  return this;
}
","public UpdateClause newAsignment(Expression express){
  assignedements.add(new Assignment(express));
  return this;
}
",23,3,"addAssignment:newAsignment,expression:express,assignments:assignedements,",234,0.9803472042083740,Beam
156,"public void waitForDecodingToFinish(){
  while (isDecoding) {
    try {
      Thread.sleep(100);
    }
 catch (    final InterruptedException e) {
      LogWriter.writeLog(""Exception: "" + e.getMessage());
      isDecoding=false;
    }
  }
}","public void waitForDecoderTOStart(){
  while (isDecoding) {
    try {
      Thread.sleep(100);
    }
 catch (    final InterruptedException f) {
      LogWriter.writeLog(""Exception: "" + f.getMessage());
      isDecoding=false;
    }
  }
}",48,3,"waitForDecodingToFinish:waitForDecoderTOStart,e:f,",25,0.12403518756230700,Beam
157,"public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}","public static void drawVerticalMarginSignicators(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}",430,16,"drawVerticalMarginIndicator:drawVerticalMarginSignicators,",10,0.08446405331293740,Beam
158,,,77,4,,87,0.4646732529004420,0
160,"@Override public void readExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}
","@Override public void readObject(ObjectInput bin) throws IOException {
  path=IgfsUtils.readPath(bin);
  blockSize=bin.readInt();
  grpBlockSize=bin.readLong();
  len=bin.readLong();
  props=U.readStringMap(bin);
  accessTime=bin.readLong();
  modificationStream=bin.readLong();
  ips=bin.readByte();
}
",79,10,"readExternal:readObject,in:bin,modificationTime:modificationStream,flags:ips,",2451,12.573638232549000,Beam
161,,,20,3,,265,1.1712127327919000,0
162,"private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_S < 1 || blockSize_L < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSize_S + "" or blockSize_L: ""+ blockSize_L);
  }
  int s=r.read(blockSize_S);
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart part=new DiffPart(DiffAction.INSERT);
  part.setStart(s);
  part.setText(output.toString(WIKIPEDIA_ENCODING));
  return part;
}","private DiffPart decodingadd(final int blockSizeECS,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSizeECS < 1 || blockSize_L < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSizeECS + "" or blockSize_L: ""+ blockSize_L);
  }
  int s=r.read(blockSizeECS);
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart book=new DiffPart(DiffAction.INSERT);
  book.setStart(s);
  book.setText(output.toString(WIKIPEDIA_ENCODING));
  return book;
}",131,9,"decodeAdd:decodingadd,blockSize_S:blockSizeECS,part:book,",1442,5.91255133152008,Beam
163,"private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){
  int w=Math.abs(x2 - x1);
  int h=Math.abs(z2 - z1);
  if (bAllowDiags) {
    if (w < h)     w=0;
 else     h=0;
  }
  return w + h + 1;
}","private int distAcrossParts(int x1,int z1,int x2,int z2,boolean bAllowDiags){
  int w=Math.abs(x2 - x1);
  int h=Math.abs(z2 - z1);
  if (bAllowDiags) {
    if (w < h)     w=0;
 else     h=0;
  }
  return w + h + 1;
}",73,8,"distBetweenPoints:distAcrossParts,",43,0.41244932810465500,Beam
164,"public static int countCSSPrimitiveNames(){
  return ALL_PRIMITIVE_PROPERTY_NAMES.size();
}
","public static int countCSSPrimitiveNumbers(){
  return ALL_PRIMITIVE_PROPERTY_NAMES.size();
}
",15,1,"countCSSPrimitiveNames:countCSSPrimitiveNumbers,",7,0.03163532416025800,Beam
165,,,45,7,,1277,5.090532640616100,0
166,,,31,2,,49,0.37064998149871800,0
167,"private void loadManifest(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifest=_jarPath.getManifest();
      if (_manifest == null)       return;
      Attributes attr=_manifest.getMainAttributes();
      if (attr != null)       addManifestPackage("""",attr);
      Map<String,Attributes> entries=_manifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
","private void loadManit(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifact=_jarPath.getManifest();
      if (_manifact == null)       return;
      Attributes attr=_manifact.getMainAttributes();
      if (attr != null)       addManifestPackage("""",attr);
      Map<String,Attributes> entries=_manifact.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
",163,10,"loadManifest:loadManit,_manifest:_manifact,",126,0.6325425465901690,Beam
168,"protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
","protected void readValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
",36,3,"loadValue:readValue,",3,0.009192999203999840,Beam
169,"private void addReplicationFactor(Operation op){
  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);
}
","private void addReplacementFactor(Operation op){
  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);
}
",22,2,"addReplicationFactor:addReplacementFactor,",3,0.01477673848470050,Beam
170,"public void add(int index,int element){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=element;
  size++;
}","public void create(int end,int element){
  checkRangeIncludingEndpoint(end);
  ensureCapacity(size + 1);
  int numTomove=size - end;
  System.arraycopy(array,end,array,end + 1,numTomove);
  array[end]=element;
  size++;
}",58,6,"add:create,index:end,numtomove:numTomove,",785,7.874475542704260,Beam
171,"public void centerHorizontal(ArrayList<Integer> nodes){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(nodes));
  }
  int nMinY=-1;
  int nMaxY=-1;
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nY=getPositionY(nodes.get(iNode));
    if (nY < nMinY || iNode == 0) {
      nMinY=nY;
    }
    if (nY > nMaxY || iNode == 0) {
      nMaxY=nY;
    }
  }
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nNode=nodes.get(iNode);
    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);
  }
}","public void centerhorizontal(ArrayList<Integer> cours){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(cours));
  }
  int nMinY=-1;
  int nMaxY=-1;
  for (int iNode=0; iNode < cours.size(); iNode++) {
    int nY=getPositionY(cours.get(iNode));
    if (nY < nMinY || iNode == 0) {
      nMinY=nY;
    }
    if (nY > nMaxY || iNode == 0) {
      nMaxY=nY;
    }
  }
  for (int iNode=0; iNode < cours.size(); iNode++) {
    int nNode=cours.get(iNode);
    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);
  }
}",149,9,"centerHorizontal:centerhorizontal,nodes:cours,",100,0.6016709725062050,Beam
172,,,50,4,,572,9.163858449459080,0
173,,,161,8,,1619,8.871772694587710,0
174,"public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
","public static String fromWorkML(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    fromWorkML(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
",55,5,"toXml:fromWorkML,",56,0.19992240269978800,Beam
175,,,40,5,,1003,5.9682468692461600,0
176,"QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
","QName toQname(Class<?> outFile){
  String localPart;
  String namespaceUri;
  if (outFile.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outFile.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outFile.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outFile.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outFile + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outFile);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outFile.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
",211,6,"outputClass:outFile,toQName:toQname,",70,0.38192670345306400,Beam
177,,,74,5,,734,3.5500829656918800,0
178,"private void updateLegends(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}","private void updateLegensions(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}",412,10,"updateLegends:updateLegensions,",5,0.04176662762959800,Beam
179,,,64,4,,495,3.1899354537328100,0
181,,,17,3,,463,1.6970077633857700,0
182,"public static int unionSize(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}","public static int sectionBig(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}",134,8,"unionSize:sectionBig,",5,0.02320593992869060,Beam
183,,,18,3,,482,2.531233072280880,0
184,,,34,3,,56,0.2166255275408430,0
185,"public void testEmptyOrNullBlob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}","public void insertEmptyOrNullBLob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}",254,6,"testEmptyOrNullBlob:insertEmptyOrNullBLob,",4,0.03374435901641850,Beam
186,"protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}","protected double computeEstDDEV(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}",154,14,"computeStdDev:computeEstDDEV,",23,0.14902467330296800,Beam
188,"protected Connection openH2Connection(boolean autocommit) throws SQLException {
  System.setProperty(""h2.serializeJavaObject"",""false"");
  String dbName=""test"";
  Connection conn=DriverManager.getConnection(""jdbc:h2:mem:"" + dbName + "";DB_CLOSE_DELAY=-1"");
  conn.setAutoCommit(autocommit);
  return conn;
}","protected Connection openRH4Connect(boolean autoccommmit) throws SQLException {
  System.setProperty(""h2.serializeJavaObject"",""false"");
  String databasename=""test"";
  Connection ann=DriverManager.getConnection(""jdbc:h2:mem:"" + databasename + "";DB_CLOSE_DELAY=-1"");
  ann.setAutoCommit(autoccommmit);
  return ann;
}",49,4,"openH2Connection:openRH4Connect,autocommit:autoccommmit,conn:ann,dbName:databasename,",396,3.2794586698214200,Beam
189,"public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}","public void send(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
send(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}",252,17,"invoke:send,",39,0.2060636560122170,Beam
190,,,145,8,,1423,8.611564056078590,0
191,,,26,3,,126,0.4856828967730200,0
192,,,28,3,,434,2.1733976721763600,0
193,"public Optional<BlazeVertex> vertex(final String vertexId){
  try (final CloseableIterator<Vertex> it=vertices(vertexId)){
    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException(""Multiple vertices found with id: "" + vertexId);
    }
    return v;
  }
 }
","public Optional<BlazeVertex> verices(final String vergeSource){
  try (final CloseableIterator<Vertex> it=vertices(vergeSource)){
    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException(""Multiple vertices found with id: "" + vergeSource);
    }
    return v;
  }
 }
",84,4,"vertex:verices,vertexId:vergeSource,",59,0.35853391885757400,Beam
194,"public boolean hasItem(T object){
synchronized (mLock) {
    return source.contains(object);
  }
}
","public boolean missingItem(T entity){
synchronized (mLock) {
    return source.contains(entity);
  }
}
",23,4,"object:entity,hasItem:missingItem,",49,0.2361446181933090,Beam
195,,,70,2,,290,1.7227611978848800,0
196,"public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}","public void initialate(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialate(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialate(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialate(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialate(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialate(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialate(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}",438,27,"initialize:initialate,",110,0.7104239066441850,Beam
199,"public static String parseDiskString(String input){
  String delims=""[ ]+"";
  String[] tokens=input.split(delims);
  return tokens[0];
}","public static String buildDiskSpace(String type){
  String delims=""[ ]+"";
  String[] tokens=type.split(delims);
  return tokens[0];
}",33,4,"parseDiskString:buildDiskSpace,input:type,",86,1.9517139236132300,Beam
200,"public void append(String string){
  for (int i=0; i < string.length(); i++)   append(string.charAt(i));
}","public void append(String letter){
  for (int i=0; i < letter.length(); i++)   append(letter.charAt(i));
}",37,3,"string:letter,",11,0.06479155619939170,Beam
201,,,18,2,,245,2.1548240820566800,0
202,"void hideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
","void HideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
",37,2,"hideBorder:HideBorder,",11,0.041609764099121100,Beam
203,"public void recordBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordBeginning(mModuleName,mRunId);
}
","public void replaceBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.replaceBeginning(mModuleName,mRunId);
}
",42,6,"recordBeginning:replaceBeginning,",5,0.018907590707143100,Beam
204,"public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String addArray(ByteArrayTag name){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : name.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(addArray(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:addArray,tag:name,",120,0.5811625202496850,Beam
205,"public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}","public String gen(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}",60,6,"random:gen,",11,0.061702179908752400,Beam
206,,,30,4,,631,2.454273327191670,0
207,,,38,3,,384,1.6175282835960400,0
208,"public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}","public boolean equalsValue(){
  return (Double.doubleToLongBits(value) == 0);
}",19,2,"equalsDefault:equalsValue,",4,0.028116575876871700,Beam
209,"@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
","@Override public List<String> latestKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
",78,5,"allKeys:latestKeys,",5,0.025048847993214900,Beam
210,"@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
","@Override public void do_after_propagization(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
",40,3,"do_after_propagation:do_after_propagization,",4,0.01844941775004070,Beam
211,"public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
","public ResourcesPoet newinteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
",58,6,"addInteger:newinteger,",71,0.25215139786402400,Beam
212,,,97,6,,1354,4.91513257821401,0
213,"public void remove(IAdaptable a){
  children.remove(a);
}
","public void remove(IAdaptable b){
  children.remove(b);
}
",16,3,"a:b,",4,0.02766155401865640,Beam
214,"private List<String> fetchFileCosIdList() throws SOSFailure {
  final String methodName=""fetchFileCosIdList(): "";
  log.trace(methodName + ""Entry"");
  final String FILE_COS_URI=""/file/vpools"";
  List<String> fileCosIdList=new ArrayList<String>();
  try {
    CoSList cosElemList=_client.queryObject(FILE_COS_URI,CoSList.class);
    if (cosElemList != null && cosElemList.getCosElements() != null) {
      for (      CoSElement elem : cosElemList.getCosElements()) {
        if (elem != null) {
          fileCosIdList.add(elem.getId());
        }
      }
    }
    log.trace(methodName + ""File CoS Ids: "" + fileCosIdList);
    if (cosElemList != null && fileCosIdList != null) {
      log.trace(methodName + ""Exit returning cos list of size["" + fileCosIdList.size()+ ""]"");
      return fileCosIdList;
    }
    log.trace(methodName + ""Exit returning cos list of size[0]"");
    return new ArrayList<String>();
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(methodName + ""NoSuchAlgorithmException occured"",e);
    throw new SOSFailure(e);
  }
catch (  UniformInterfaceException e) {
    log.error(methodName + ""UniformInterfaceException occured"",e);
    throw new SOSFailure(e);
  }
}","private List<String> fetchFileOSIdL() throws SOSFailure {
  final String methodName=""fetchFileCosIdList(): "";
  ge.trace(methodName + ""Entry"");
  final String null=""/file/vpools"";
  List<String> fileCosIdList=new ArrayList<String>();
  try {
    CoSList cosElerSet=_client.queryObject(null,CoSList.class);
    if (cosElerSet != null && cosElerSet.getCosElements() != null) {
      for (      CoSElement elem : cosElerSet.getCosElements()) {
        if (elem != null) {
          fileCosIdList.add(elem.getId());
        }
      }
    }
    ge.trace(methodName + ""File CoS Ids: "" + fileCosIdList);
    if (cosElerSet != null && fileCosIdList != null) {
      ge.trace(methodName + ""Exit returning cos list of size["" + fileCosIdList.size()+ ""]"");
      return fileCosIdList;
    }
    ge.trace(methodName + ""Exit returning cos list of size[0]"");
    return new ArrayList<String>();
  }
 catch (  NoSuchAlgorithmException e) {
    ge.error(methodName + ""NoSuchAlgorithmException occured"",e);
    throw new SOSFailure(e);
  }
catch (  UniformInterfaceException e) {
    ge.error(methodName + ""UniformInterfaceException occured"",e);
    throw new SOSFailure(e);
  }
}",223,9,"fetchFileCosIdList:fetchFileOSIdL,log:ge,cosElemList:cosElerSet,FILE_COS_URI:null,",1539,15.71821061372760,Beam
215,"public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
","public static void upgradeServiceinstance(SSOToken ssoToken,String containerType,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,containerType);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
",102,8,"upgradeServerInstance:upgradeServiceinstance,instanceName:containerType,",137,0.6831433733304340,Beam
216,"protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
","protected void deleteInstanceVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteInstanceVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
",68,7,"deleteTypeVertex:deleteInstanceVertex,",78,0.32710620562235500,Beam
217,"private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> build(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}",221,15,"postIndexedLSR:build,",150,1.6116119345029200,Beam
218,,,21,1,,25,0.1627668023109440,0
219,"public void forward(HttpServerRequest request){
  forward(request,null);
}
","public void flight(HttpServerRequest xml){
  flight(xml,null);
}
",16,2,"request:xml,forward:flight,",81,0.44517326752344800,Beam
220,"protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
","protected boolean matchesFilter(final String query,final String[] select){
  for (  final String match : select) {
    if (!query.contains(match))     return false;
  }
  return true;
}
",42,4,"input:query,filter:select,",132,0.6134291529655460,Beam
221,"public CompletableFuture<NewFile> run(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}","public CompletableFuture<NewFile> thread(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}",85,4,"run:thread,",16,0.06276572545369470,Beam
222,"final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void rint(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,6,"println:rint,",21,0.07405691941579180,Beam
223,"private static void updateWindowUI(Window window){
  SwingUtilities.updateComponentTreeUI(window);
  Window ownedWins[]=window.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    updateWindowUI(ownedWin);
  }
}
","private static void setWinFlow(Window target){
  SwingUtilities.updateComponentTreeUI(target);
  Window ownedWins[]=target.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    setWinFlow(ownedWin);
  }
}
",42,4,"updateWindowUI:setWinFlow,window:target,",73,0.30228929917017600,Beam
224,"protected boolean isServerTransaction(){
  return this instanceof SIPServerTransaction;
}
","protected boolean isServerTx(){
  return this instanceof SIPServerTransaction;
}
",12,1,"isServerTransaction:isServerTx,",3,0.02116088072458900,Beam
225,"public int countArray(String[] array){
  return array.length;
}
","public int startarray(String[] sample){
  return sample.length;
}
",16,2,"array:sample,countArray:startarray,",77,0.31836180289586400,Beam
226,"public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){
  this(streamOne);
  add(streamTwo);
  outerJoinQualifiers.add(outerJoinQualifier);
}
","public FromExpause(Stream streamOne,OuterJoinQualifier outerJoinEquifer,Stream streamTwo){
  this(streamOne);
  add(streamTwo);
  outerJoinQualifiers.add(outerJoinEquifer);
}
",31,5,"FromClause:FromExpause,outerJoinQualifier:outerJoinEquifer,",304,1.6509775280952500,Beam
227,,,113,4,,727,4.841125233968100,0
228,,,42,3,,350,1.609265685081480,0
229,,,291,25,,4912,36.47001492977140,0
230,"private boolean hasNext(Pattern pattern){
  if (!hasNext()) {
    return false;
  }
  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));
  return matcher.find();
}
","private boolean hasLast(Pattern comment){
  if (!hasLast()) {
    return false;
  }
  Matcher Matcher=comment.Matcher(gserValue.substring(pos,length));
  return Matcher.find();
}
",45,6,"hasNext:hasLast,pattern:comment,matcher:Matcher,",277,2.0252975980440800,Beam
231,"private void updateStateView(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
","private void UpdateModelview(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
",31,4,"updateStateView:UpdateModelview,",60,1.3265820622444200,Beam
232,,,20,2,,63,0.27584380308787000,0
233,"protected static Long convertUuidToLong(UUID uuid){
  if (uuid == null) {
    return null;
  }
  Long convertedUuid;
  if (uuid.version() == 1) {
    convertedUuid=uuid.timestamp();
  }
 else {
    convertedUuid=uuid.getMostSignificantBits();
  }
  return convertedUuid;
}","protected static Long convertUuidToLarge(UUID buip){
  if (buip == null) {
    return null;
  }
  Long convertedUuid;
  if (buip.version() == 1) {
    convertedUuid=buip.timestamp();
  }
 else {
    convertedUuid=buip.getMostSignificantBits();
  }
  return convertedUuid;
}",58,3,"convertUuidToLong:convertUuidToLarge,uuid:buip,",65,0.31183523337046300,Beam
234,,,81,6,,1156,4.591620779037480,0
235,"public void init(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    init(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + url + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
","public void use(String format,java.net.URL base){
  try {
    java.io.InputStream in=base.openStream();
    Properties props=new Properties();
    props.load(in);
    use(getLayers(format,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + base + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
",97,6,"init:use,prefix:format,url:base,",595,3.051303744316100,Beam
236,"private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}","private void insertSpining(){
  splines=new int[(splines.length << 1) + 1];
  threshold=(int)(splines.length * loadFactor);
  Arrays.fill(splines,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}",72,7,"growSpine:insertSpining,spine:splines,",639,2.5810888171196000,Beam
237,"public Tasker addTask(Task task){
  tasks.add(task);
  lastAddedTask=task;
  return this;
}
","public Tasker starttask(Task task){
  tasks.add(task);
  lastAddedTask=task;
  return this;
}
",23,4,"addTask:starttask,",43,0.16546870867411300,Beam
238,,,55,6,,1127,4.071014809608460,0
239,,,106,19,,6933,30.458392210801400,0
240,"private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}","private void pathThemeCompat(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}",213,12,"pathStyleHelper:pathThemeCompat,",8,0.04352710247039800,Beam
241,"public static Format generateFormat(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
","public static Format generateFormat(String CodEC){
  return (Format)SUPPORTED_CODECS.get(CodEC.toLowerCase());
}
",25,2,"codec:CodEC,",7,0.027795950571696000,Beam
242,"public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}","public double calculateExcitancyRadIO(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}",39,3,"calculateExcitatoryRatio:calculateExcitancyRadIO,",20,0.10778406858444200,Beam
243,"public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}
","public void tracking(File layer,Object marker,FileDeleteStrategy deleteStrategy){
  if (layer == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(layer.getPath(),marker,deleteStrategy);
}
",43,4,"file:layer,track:tracking,",196,0.6501704573631290,Beam
244,"public synchronized void reloadConfiguration(){
  properties=null;
  finalParameters.clear();
}
","public synchronized void restloadProperty(){
  properties=null;
  finalParameters.clear();
}
",18,3,"reloadConfiguration:restloadProperty,",6,0.022405906518300400,Beam
245,"protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
","protected void arraycopy(byte[] db,int pos,int length){
  mMessage.write(db,pos,length);
  mPosition=mPosition + length;
}
",34,6,"buf:db,",10,0.04929037888844810,Beam
246,,,154,7,,1272,6.273734656969710,0
247,,,25,1,,61,0.2718164881070460,0
248,"public static String[] parseTitle(String title){
  String v[]={"""",""""};
  if (title == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}","public static String[] processTitle(String phrase){
  String v[]={"""",""""};
  if (phrase == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(phrase);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=phrase;
  }
  return v;
}",103,5,"parseTitle:processTitle,title:phrase,",50,0.27540842692057300,Beam
249,"private Element createIDPEntityDescriptor(boolean exportPrivateData) throws Exception {
  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String id=idmClient.getEntityID(tenantName);
  String alias=idmClient.getLocalIDPAlias(tenantName);
  if (id == null) {
    id=tenantName;
  }
  entEle.setAttribute(SAMLNames.ENTID,id);
  Element idpSSO=createIDPSSODescriptor(exportPrivateData);
  entEle.appendChild(idpSSO);
  if (exportPrivateData) {
    if (alias == null || alias.isEmpty()) {
      alias=id;
    }
    Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH);
    entEle.appendChild(orgEle);
  }
  return entEle;
}
","private Element createIDPEntityDescructors(boolean externalPrivateData) throws Exception {
  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String id=idmClient.getEntityID(tenancyAlias);
  String alias=idmClient.getLocalIDPAlias(tenancyAlias);
  if (id == null) {
    id=tenancyAlias;
  }
  entEle.setAttribute(SAMLNames.ENTID,id);
  Element idpSSO=createIDPSSODescriptor(externalPrivateData);
  entEle.appendChild(idpSSO);
  if (externalPrivateData) {
    if (alias == null || alias.isEmpty()) {
      alias=id;
    }
    Element orgEle=createOrganization(tenancyAlias,tenancyAlias,alias,SAMLNames.ENGLISH);
    entEle.appendChild(orgEle);
  }
  return entEle;
}
",133,10,"createIDPEntityDescriptor:createIDPEntityDescructors,exportPrivateData:externalPrivateData,tenantName:tenancyAlias,",222,1.3002509991327900,Beam
250,"public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
","public Iterable<ServiceDescriptor> registerServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
",47,4,"listServices:registerServices,",5,0.01834789514541630,Beam
251,"private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}","private double[][] xprime(int h){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(h - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}",93,6,"t:h,xPrime:xprime,",74,0.6067904154459640,Beam
252,,,85,8,,1195,4.820399316151940,0
253,"public synchronized void checkAccess(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}","public synchronized void checkAccess(LicenseCheckerCallback result){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    result.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),result,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        result.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}",187,11,"callback:result,",6,0.20605944792429600,Beam
254,"private void shutdown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
","private void shutdownDown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
",49,4,"shutdown:shutdownDown,",5,0.024380338191986100,Beam
255,"@Override public IChatMessage sendMessage(final String text) throws RemoteException {
  if (TextUtils.isEmpty(text)) {
    throw new ServerApiIllegalArgumentException(""GroupChat message must not be null or empty!"");
  }
  int messageLength=text.length();
  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();
  if (messageLength > maxMessageLength) {
    throw new ServerApiIllegalArgumentException(""chat message length: "" + messageLength + "" exceeds max group chat message length: ""+ maxMessageLength+ ""!"");
  }
  if (!isAllowedToSendMessage()) {
    throw new ServerApiPermissionDeniedException(""Not allowed to send GroupChat message on the connected IMS server!"");
  }
  try {
    mImService.removeGroupChatComposingStatus(mChatId);
    long timestamp=System.currentTimeMillis();
    final ChatMessage msg=ChatUtils.createTextMessage(null,text,timestamp,timestamp);
    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),text,msg.getMimeType(),mChatId,Direction.OUTGOING);
    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);
    if (!mChatService.isGroupChatActive(mChatId)) {
      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);
    }
    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);
    return new ChatMessageImpl(persistedStorage);
  }
 catch (  ServerApiBaseException e) {
    if (!e.shouldNotBeLogged()) {
      sLogger.error(ExceptionUtil.getFullStackTrace(e));
    }
    throw e;
  }
catch (  Exception e) {
    sLogger.error(ExceptionUtil.getFullStackTrace(e));
    throw new ServerApiGenericException(e);
  }
}
","@Override public IChatMessage createmessage(final String object) throws RemoteException {
  if (TextUtils.isEmpty(object)) {
    throw new ServerApiIllegalArgumentException(""GroupChat message must not be null or empty!"");
  }
  int messageLength=object.length();
  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();
  if (messageLength > maxMessageLength) {
    throw new ServerApiIllegalArgumentException(""chat message length: "" + messageLength + "" exceeds max group chat message length: ""+ maxMessageLength+ ""!"");
  }
  if (!isAllowedToSendMessage()) {
    throw new ServerApiPermissionDeniedException(""Not allowed to send GroupChat message on the connected IMS server!"");
  }
  try {
    mImService.removeGroupChatComposingStatus(mChatId);
    long timestamp=System.currentTimeMillis();
    final ChatMessage msg=ChatUtils.createTextMessage(null,object,timestamp,timestamp);
    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),object,msg.getMimeType(),mChatId,Direction.OUTGOING);
    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);
    if (!mChatService.isGroupChatActive(mChatId)) {
      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);
    }
    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);
    return new ChatMessageImpl(persistedStorage);
  }
 catch (  ServerApiBaseException e) {
    if (!e.shouldNotBeLogged()) {
      sLogger.error(ExceptionUtil.getFullStackTrace(e));
    }
    throw e;
  }
catch (  Exception e) {
    sLogger.error(ExceptionUtil.getFullStackTrace(e));
    throw new ServerApiGenericException(e);
  }
}
",281,14,"sendMessage:createmessage,text:object,",57,0.28961100180943800,Beam
257,"public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}
","public String[] buildReport(File configString) throws SAXException, IOException {
  Document document=builder.parse(configString);
  return (buildReport(document));
}
",33,4,"parseConfiguration:buildReport,xmlFile:configString,",85,0.3644923051198320,Beam
259,,,181,9,,1177,5.870446483294170,0
260,"public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}","public int compison(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}",391,20,"compare:compison,",11,0.19250304301579800,Beam
261,"public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}
","public synchronized Future<V> flush(Callable<V> task) throws RejectedExecutionException {
  return pool.flush(task);
}
",26,3,"submit:flush,",49,0.1873989701271060,Beam
262,"private void init(){
  startController=new PourStartController();
  startController.setCheckView(this);
  waveController=new WaveController();
  waveController.setCheckView(this);
  PourFinishController finishController=new PourFinishController();
  finishController.setCheckView(this);
  TickController tickController=new TickController();
  tickController.setCheckView(this);
  List<BaseController> finishControllers=new ArrayList<>();
  finishControllers.add(finishController);
  finishControllers.add(tickController);
  this.finishControllers=finishControllers;
}
","private void core(){
  startController=new PourStartController();
  startController.setCheckView(this);
  waveController=new WaveController();
  waveController.setCheckView(this);
  PourFinishController finishController=new PourFinishController();
  finishController.setCheckView(this);
  TickController tickController=new TickController();
  tickController.setCheckView(this);
  List<BaseController> finishControllers=new ArrayList<>();
  finishControllers.add(finishController);
  finishControllers.add(tickController);
  this.finishControllers=finishControllers;
}
",98,6,"init:core,",16,0.09866631825764970,Beam
263,"public static HashProvider best(HashParameters params){
  return best(params,EnumSet.of(HashSupport.STATEFUL));
}
","public static HashProvider right(HashParameters params){
  return right(params,EnumSet.of(HashSupport.STATEFUL));
}
",25,2,"best:right,",7,0.03719174861907960,Beam
264,,,49,3,,513,2.3793735027313200,0
265,,,63,6,,1300,5.030434815088910,0
266,"public boolean isSetQueueSize(){
  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);
}
","public boolean issetQueueBytes(){
  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);
}
",15,3,"isSetQueueSize:issetQueueBytes,",16,0.12704281012217200,Beam
267,"private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}","private int calculatingTotalWidth(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}",40,5,"calculateTotalHeight:calculatingTotalWidth,",61,0.3974672794342040,Beam
268,"private String formatNode(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
","private String formatNode(RightThreadedBinaryNode<T> part){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=part.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(part.toString());
  if ((n=part.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
",104,4,"node:part,",22,0.09288930098215740,Beam
269,"private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
","private void onSchemaComplexType(Element schemaComplexForm,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexForm.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexForm.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexForm.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexForm.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
",162,11,"schemaComplexType:schemaComplexForm,",9,0.1140171488126120,Beam
270,,,45,2,,250,3.7235878348350500,0
271,"public static boolean createFolder(@SuppressWarnings(""UnusedParameters"") Context mContext,String path,String folderName){
  File SDCardRoot=new File(path,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}
","public static boolean createRoot(@SuppressWarnings(""UnusedParameters"") Context mContext,String path,String folderName){
  File SDCardRoot=new File(path,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}
",53,5,"createFolder:createRoot,",37,0.1406855861345930,Beam
272,"public NavMouseMode(boolean shouldConsumeEvents){
  super(modeID,shouldConsumeEvents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}
","public navMousePreview(boolean shouldConsumeEvents){
  super(modeID,shouldConsumeEvents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}
",52,4,"NavMouseMode:navMousePreview,",6,0.028491437435150100,Beam
273,"@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
","@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processContinments(){
  Dimension dimension=layerSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=layerSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
",81,6,"processQueues:processContinments,dimensionSetting:layerSetting,",21,0.13577523231506300,Beam
274,"private boolean isMediaTypeSupported(String media){
  for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) {
    if (media.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) {
      return true;
    }
  }
  return false;
}","private boolean isMediaTypesEnabled(String source){
  for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) {
    if (source.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) {
      return true;
    }
  }
  return false;
}",47,4,"media:source,isMediaTypeSupported:isMediaTypesEnabled,",145,0.7997081478436790,Beam
275,"public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
","public void contributesChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
",54,7,"contentsChanged:contributesChanged,",35,0.15139857530593900,Beam
276,"protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}","protected SizeRequirements calculateMinorAxisRequirements(int ax,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(ax);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(ax,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}",343,16,"axis:ax,",40,0.39114342133204100,Beam
277,"private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}","private void generateUnsignedIntExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}",478,23,"generateUniformIntegerExamples:generateUnsignedIntExamples,",15,0.08298302094141640,Beam
278,"public final boolean isExceptionHandlerEquivalent(BasicBlock other){
  if (exceptionHandlers != other.exceptionHandlers) {
    Enumeration<BasicBlock> e1=getExceptionHandlers();
    Enumeration<BasicBlock> e2=other.getExceptionHandlers();
    while (e1.hasMoreElements()) {
      if (!e2.hasMoreElements())       return false;
      if (e1.nextElement() != e2.nextElement())       return false;
    }
    if (e2.hasMoreElements())     return false;
  }
  return true;
}","public final boolean isExceptionhandlerEquSimilar(BasicBlock unknown){
  if (exceptionHandlers != unknown.exceptionHandlers) {
    Enumeration<BasicBlock> e1=getExceptionHandlers();
    Enumeration<BasicBlock> e2=unknown.getExceptionHandlers();
    while (e1.hasMoreElements()) {
      if (!e2.hasMoreElements())       return false;
      if (e1.nextElement() != e2.nextElement())       return false;
    }
    if (e2.hasMoreElements())     return false;
  }
  return true;
}",95,5,"isExceptionHandlerEquivalent:isExceptionhandlerEquSimilar,other:unknown,",76,0.5336782852808640,Beam
280,"@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
","@NotNull private File resolvedPath(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
",91,5,"resolveName:resolvedPath,",9,0.044476457436879500,Beam
281,"public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){
  if (permission == null || permission.equals("""")) {
    throw new IllegalArgumentException(""Empty permission"");
  }
  if (server != null && (server.equalsIgnoreCase(""global"") || server.equals(""""))) {
    server=null;
  }
  if (world != null && world.equals("""")) {
    world=null;
  }
  if (world != null && server == null) {
    server=""global"";
  }
  this.permission=permission;
  this.value=value;
  this.override=override;
  this.expireAt=expireAt;
  this.server=server;
  this.world=world;
  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();
}
","public Path(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){
  if (permission == null || permission.equals("""")) {
    throw new IllegalArgumentException(""Empty permission"");
  }
  if (server != null && (server.equalsIgnoreCase(""global"") || server.equals(""""))) {
    server=null;
  }
  if (world != null && world.equals("""")) {
    world=null;
  }
  if (world != null && server == null) {
    server=""global"";
  }
  this.permission=permission;
  this.value=value;
  this.override=override;
  this.expireAt=expireAt;
  this.server=server;
  this.world=world;
  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();
}
",167,8,"Node:Path,",65,0.3688979744911190,Beam
282,,,49,3,,476,2.5824536283810900,0
283,,,50,4,,347,1.5512319604555800,0
284,,,42,2,,290,1.0476354837417600,0
285,"public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}
","public void Loadlayout(File oFolder,boolean newTab){
  Loadlayout(oFolder,newTab,false);
}
",21,3,"oFile:oFolder,loadLayout:Loadlayout,",151,0.5814142107963560,Beam
286,"private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(path,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (loadedFiles.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException(""Failed to locate "" + path + "" in ""+ includePaths);
  }
  loadedFiles.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includePaths.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecursively(include.path(),loadedFiles);
      }
    }
    includePaths.removeFirst();
  }
}","private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedItems) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(path,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (loadedItems.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException(""Failed to locate "" + path + "" in ""+ includeContextows);
  }
  loadedItems.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includeContextows.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecursively(include.path(),loadedItems);
      }
    }
    includeContextows.removeFirst();
  }
}",199,9,"loadedFiles:loadedItems,includePaths:includeContextows,",1210,6.399111954371140,Beam
287,"static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}","static WindowsFileAttributes newSettings(long index) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(index,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(index,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}",139,11,"readAttributes:newSettings,handle:index,",58,0.3433349410692850,Beam
288,"public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
","public final void last(LsServerPacket openCacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + openCacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(openCacket);
    enableWriteInterest();
  }
}
",65,8,"close:last,closePacket:openCacket,",196,1.3908907453219100,Beam
289,"private void createGui(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
","private void creatGuI(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
",50,4,"createGui:creatGuI,",16,0.06425681511561080,Beam
290,"static private double calcLogProb(int numAppear,double mu){
  final double sigma=calcSigmaFromMu(mu);
  final double logNumAppear=Math.log(numAppear);
  final double overMu=Math.max(logNumAppear - mu,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}","static private double calclogProba(int numAppear,double mu){
  final double sigma=calcSigmaFromMu(mu);
  final double logNumAppear=Math.log(numAppear);
  final double overMu=Math.max(logNumAppear - mu,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}",90,8,"calcLogProb:calclogProba,",55,0.3441431125005090,Beam
291,"public static Geometry bufferBySegments(Geometry g,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(g);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return g.difference(segBuf);
  return g.union(segBuf);
}","public static Geometry bufferbyComponents(Geometry g,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(g);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return g.difference(segBuf);
  return g.union(segBuf);
}",65,6,"bufferBySegments:bufferbyComponents,",52,0.27561360200246200,Beam
292,"public static boolean arrayEquals(Object x,Object y,double tolf,double told){
  if (x == null && y == null) {
    return true;
  }
  if (x == null || y == null) {
    return false;
  }
  Class<?> xClass=x.getClass();
  Class<?> yClass=y.getClass();
  if (xClass != yClass) {
    return false;
  }
  if (!xClass.isArray()) {
    return x.equals(y);
  }
 else {
    if (xClass.equals(int[].class)) {
      return Arrays.equals((int[])x,(int[])y);
    }
 else     if (xClass.equals(double[].class)) {
      if (told == 0) {
        return Arrays.equals((double[])x,(double[])y);
      }
 else {
        return doubleArrayEquals((double[])x,(double[])y,told);
      }
    }
 else     if (xClass.equals(long[].class)) {
      return Arrays.equals((long[])x,(long[])y);
    }
 else     if (xClass.equals(float[].class)) {
      if (tolf == 0) {
        return Arrays.equals((float[])x,(float[])y);
      }
 else {
        return floatArrayEquals((float[])x,(float[])y,(float)tolf);
      }
    }
 else     if (xClass.equals(byte[].class)) {
      return Arrays.equals((byte[])x,(byte[])y);
    }
 else     if (xClass.equals(short[].class)) {
      return Arrays.equals((short[])x,(short[])y);
    }
 else     if (xClass.equals(char[].class)) {
      return Arrays.equals((char[])x,(char[])y);
    }
 else     if (xClass.equals(boolean[].class)) {
      return Arrays.equals((boolean[])x,(boolean[])y);
    }
 else {
      Object[] xo=(Object[])x;
      Object[] yo=(Object[])y;
      if (xo.length != yo.length) {
        return false;
      }
      for (int i=0; i < xo.length; i+=1) {
        if (!arrayEquals(xo[i],yo[i],tolf,told)) {
          return false;
        }
      }
      return true;
    }
  }
}","public static boolean arrayEquals(Object x,Object y,double tola,double told){
  if (x == null && y == null) {
    return true;
  }
  if (x == null || y == null) {
    return false;
  }
  Class<?> xClass=x.getClass();
  Class<?> yClass=y.getClass();
  if (xClass != yClass) {
    return false;
  }
  if (!xClass.isArray()) {
    return x.equals(y);
  }
 else {
    if (xClass.equals(int[].class)) {
      return Arrays.equals((int[])x,(int[])y);
    }
 else     if (xClass.equals(double[].class)) {
      if (told == 0) {
        return Arrays.equals((double[])x,(double[])y);
      }
 else {
        return doubleArrayEquals((double[])x,(double[])y,told);
      }
    }
 else     if (xClass.equals(long[].class)) {
      return Arrays.equals((long[])x,(long[])y);
    }
 else     if (xClass.equals(float[].class)) {
      if (tola == 0) {
        return Arrays.equals((float[])x,(float[])y);
      }
 else {
        return floatArrayEquals((float[])x,(float[])y,(float)tola);
      }
    }
 else     if (xClass.equals(byte[].class)) {
      return Arrays.equals((byte[])x,(byte[])y);
    }
 else     if (xClass.equals(short[].class)) {
      return Arrays.equals((short[])x,(short[])y);
    }
 else     if (xClass.equals(char[].class)) {
      return Arrays.equals((char[])x,(char[])y);
    }
 else     if (xClass.equals(boolean[].class)) {
      return Arrays.equals((boolean[])x,(boolean[])y);
    }
 else {
      Object[] xo=(Object[])x;
      Object[] yo=(Object[])y;
      if (xo.length != yo.length) {
        return false;
      }
      for (int i=0; i < xo.length; i+=1) {
        if (!arrayEquals(xo[i],yo[i],tola,told)) {
          return false;
        }
      }
      return true;
    }
  }
}",547,7,"tolf:tola,",3,0.06154414017995200,Beam
293,,,19,2,,267,0.9306342005729680,0
294,,,20,3,,397,1.582041891415910,0
295,"private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
","private double rediction(Instance st){
  double[] normalizedInstance=normalizedInstance(st);
  double normalizedPrediction=rediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
",33,4,"prediction:rediction,inst:st,",112,0.6129656473795570,Beam
296,,,46,4,,168,0.8104222416877750,0
298,"private static Pair<String,String> offsetLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> translate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}",200,15,"offsetLSR:translate,",144,1.1379910151163700,Beam
299,"public static synchronized void it(String description,UnsafeBlock block){
  it(description,identity(),block);
}
","public static synchronized void It(String description,UnsafeBlock block){
  It(description,identity(),block);
}
",25,3,"it:It,",94,0.3609374562899270,Beam
300,"public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}","public static int position(byte[] aux,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,aux.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=position(aux,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (aux[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}",180,10,"a:aux,find:position,",583,5.44350798924764,Beam
301,"protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lp.setLocation(easting,northing);
  return dlamda;
}","protected double center(double ha,double lon,Point2D lp){
  double phi_deg=ha;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lp.setLocation(easting,northing);
  return dlamda;
}",208,22,"LLToWorldReturningLon:center,lat:ha,",283,2.9707834760348000,Beam
302,"public void cacheResolvedMethod(Class clas,Class[] types,Method method){
  if (Interpreter.DEBUG)   Interpreter.debug(""cacheResolvedMethod putting: "" + clas + "" ""+ method);
  SignatureKey sk=new SignatureKey(clas,method.getName(),types);
  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);
 else   resolvedObjectMethods.put(sk,method);
}
","public void cacheRevolverFunction(Class clas,Class[] types,Method method){
  if (Interpreter.DEBUG)   Interpreter.debug(""cacheResolvedMethod putting: "" + clas + "" ""+ method);
  SignatureKey sk=new SignatureKey(clas,method.getName(),types);
  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);
 else   resolvedObjectMethods.put(sk,method);
}
",85,7,"cacheResolvedMethod:cacheRevolverFunction,",54,0.2319575508435570,Beam
303,"public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
","public Edge(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
",30,4,"Graph:Edge,",3,0.014460519949595100,Beam
304,"@SuppressWarnings(""unchecked"") public void testProjectionPredicateDifferentClassLoaders() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}","@SuppressWarnings(""unchecked"") public void start() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}",312,11,"testProjectionPredicateDifferentClassLoaders:start,",28,0.18137450218200700,Beam
305,"public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}","public static byte[] decrypt(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}",708,20,"decode2:decrypt,",21,0.09968233108520510,Beam
306,,,68,6,,1518,7.269105931123100,0
307,"public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}","public void testReverseSortCompat() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}",345,15,"testReverseOrder4:testReverseSortCompat,",12,0.10028692881266300,Beam
308,,,332,16,,1653,8.044931101799010,0
309,,,95,5,,607,3.058550520737970,0
310,"private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}","private static TranslationResult extractregister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}",246,12,"extractRegister:extractregister,",100,0.695920991897583,Beam
311,,,61,3,,400,2.8335896611213700,0
312,"default B withDefault(String key,int value){
  return withDefault(key,Integer.toString(value));
}
","default B WithInt(String key,int value){
  return WithInt(key,Integer.toString(value));
}
",25,3,"withDefault:WithInt,",16,0.06516069571177170,Beam
313,"private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}","private void initImageLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}",109,6,"initMapLayer:initImageLayer,",6,0.0238037109375,Beam
314,,,66,8,,3495,15.8060582558314,0
315,"@Override public boolean add(IMessage message){
  return add(message,false);
}
","@Override public boolean post(IMessage request){
  return post(request,false);
}
",19,2,"add:post,message:request,",65,0.3182748277982080,Beam
316,,,19,2,,109,0.41481599807739300,0
317,"private void removeTvShow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}","private void removeTbShow(TvShow fontDisplay){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)routeData.get(fontDisplay);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      routeData.remove(fontDisplay);
      for (      TvShowEpisode episode : new ArrayList<>(fontDisplay.getEpisodes())) {
        routeData.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      fontDisplay.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}",178,12,"tvShow:fontDisplay,removeTvShow:removeTbShow,nodeMap:routeData,",346,1.6171500603358000,Beam
318,,,126,8,,1098,4.407373742262520,0
319,,,151,9,,941,5.461158227920530,0
320,"public void add(T item){
synchronized (lock) {
    items.add(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
","public void added(T order){
synchronized (lock) {
    items.added(identifiedItemFactory.create(order));
  }
  notifyDataSetChanged();
}
",31,5,"add:added,item:order,",82,0.35834850470225000,Beam
321,,,80,4,,560,2.140067668755850,0
322,"public boolean importPkcs8(){
  return jrbPkcs8.isSelected();
}","public boolean isPkcs6(){
  return jrbPkcs8.isSelected();
}",14,2,"importPkcs8:isPkcs6,",5,0.026225229104359900,Beam
323,,,41,5,,1196,5.5194361488024400,0
324,,,65,4,,709,4.627086281776430,0
325,,,20,3,,404,2.2379993716875700,0
326,,,51,2,,290,1.513313357035320,0
328,,,32,4,,236,0.8366864919662480,0
329,"public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){
  final String expression=leftSide + operator.getMathematicalOperator() + rightSide;
  return expressionIsTrue(expression);
}
","public static boolean expressionISTrue(double leftSide,Operator operator,double rightsHalf){
  final String expression=leftSide + operator.getMathematicalOperator() + rightsHalf;
  return expressionISTrue(expression);
}
",36,5,"expressionIsTrue:expressionISTrue,rightSide:rightsHalf,",296,1.8066302418708800,Beam
330,"public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
","public void inflateAndAppendingpEND(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
",48,10,"translateAndAppendPending:inflateAndAppendingpEND,",24,0.15721640189488700,Beam
331,"public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}","public CharBuffer substr(int add,int end){
  int length=length();
  if (add < 0 || end < add || length < add)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[add + i]=buffer[end + i];
  }
  length(length - (end - add));
  return this;
}",110,7,"delete:substr,start:add,",109,0.6028664390246070,Beam
332,"public Boolean exists(String email){
  for (  Person person : people) {
    if (email.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
","public Boolean Exists(String address){
  for (  Person person : people) {
    if (address.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
",39,4,"email:address,exists:Exists,",92,0.41049975554148400,Beam
333,"public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}","public void write(byte[] bytes){
  write(bytes,0,bytes.length);
}",22,2,"append:write,",37,0.17454287608464600,Beam
334,"public static DereferenceAliasesPolicy valueOf(final int intValue){
  if (intValue < 0 || intValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[intValue];
}","public static DereferenceAliasesPolicy valueof(final int stringValue){
  if (stringValue < 0 || stringValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[stringValue];
}",34,3,"valueOf:valueof,intValue:stringValue,",49,0.25881456534067800,Beam
335,,,62,5,,616,2.370510737101240,0
336,"private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
","private void transferdirectory(File source,File src) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(src,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      transferdirectory(sourceFile,destFile);
    }
 else     transferdirectory(sourceFile,destFile);
  }
}
",88,6,"copyDirectory:transferdirectory,dest:src,",1100,4.75422029097875,Beam
337,,,79,7,,821,2.980475346247360,0
338,,,88,4,,617,6.956346682707470,0
339,,,52,5,,867,3.0409450054168700,0
341,,,57,5,,1349,6.4353446443875600,0
342,"public void reset(){
  engineReset();
  state=INITIAL;
}
","public void ize(){
  engineReset();
  state=INITTIAL;
}
",15,3,"reset:ize,INITIAL:INITTIAL,",79,0.45569684108098300,Beam
343,,,34,4,,351,1.545621919631960,0
344,"public static double bufferDistanceError(int quadSegs){
  double alpha=Math.PI / 2.0 / quadSegs;
  return 1 - Math.cos(alpha / 2.0);
}","public static double getdistanceerror(int quadSegs){
  double alpha=Math.PI / 2.0 / quadSegs;
  return 1 - Math.cos(alpha / 2.0);
}",33,3,"bufferDistanceError:getdistanceerror,",46,0.22283352216084800,Beam
345,"public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}
","public String fromEML(EPStatementFormatter formaster){
  StringWriter reader=new StringWriter();
  fromEML(formaster,reader);
  return reader.toString();
}
",31,3,"toEPL:fromEML,formatter:formaster,writer:reader,",314,1.446585981051130,Beam
346,,,19,2,,321,1.6223337332407600,0
347,"private ComplianceFeature checkEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){
  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);
  if ((operation.isEnabled() && encryptStatus) || (!operation.isEnabled() && !encryptStatus)) {
    policy.setCompliance(true);
  }
 else {
    policy.setCompliance(false);
    policy.setMessage(resources.getString(R.string.error_encrypt_policy));
  }
  return policy;
}","private ComplianceFeature checkEncryptedService(org.wso2.emm.agent.beans.Operation object){
  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);
  if ((object.isEnabled() && encryptStatus) || (!object.isEnabled() && !encryptStatus)) {
    policy.setCompliance(true);
  }
 else {
    policy.setCompliance(false);
    policy.setMessage(resources.getString(R.string.error_encrypt_policy));
  }
  return policy;
}",106,6,"checkEncryptPolicy:checkEncryptedService,operation:object,",55,0.377699871857961,Beam
348,,,70,6,,1027,5.443170249462130,0
350,"public boolean grabInput(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine(""Grab input on {0}"",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine(""    Already Grabbed"");
      return true;
    }
    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();
    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownerEvents=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - mouse"");
        return false;
      }
      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (keyGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - keyboard"");
        return false;
      }
    }
    if (prevGrabWindow != null) {
      prevGrabWindow.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine(""    Grab - success"");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}","public boolean releaseContent(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine(""Grab input on {0}"",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine(""    Already Grabbed"");
      return true;
    }
    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();
    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownerEvents=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - mouse"");
        return false;
      }
      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (keyGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - keyboard"");
        return false;
      }
    }
    if (prevGrabWindow != null) {
      prevGrabWindow.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine(""    Grab - success"");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}",352,7,"grabInput:releaseContent,",13,0.10847196181615200,Beam
351,,,87,6,,679,5.655712227026620,0
352,,,31,3,,414,2.484770083427430,0
353,,,34,4,,543,3.182412834962210,0
354,,,296,13,,1869,13.10207395553590,0
355,"public synchronized int totalRecoverFiles(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}","public synchronized int totalreccoverFile(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}",44,4,"totalRecoverFiles:totalreccoverFile,",23,0.08860735893249510,Beam
356,"private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
","private void handleSignment(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
",283,14,"handleSelection:handleSignment,",81,0.4128228823343910,Beam
357,,,19,4,,511,2.59272434314092,0
358,"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}","public static void copyAssets(Context event,String cssfilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=event.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + cssfilename);
  copyFile(file,is,mode);
}",118,9,"assetsFilename:cssfilename,context:event,",231,1.1645426432291700,Beam
359,"@Override public boolean deleteLeftWord(){
  mInputConnection.beginBatchEdit();
  if (mInputConnection.getSelectedText(0) != null) {
    mInputConnection.commitText("""",0);
  }
 else {
    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);
    if (beforeCursor != null) {
      int beforeCursorLength=beforeCursor.length();
      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);
      int lastIndex=0;
      while (m.find()) {
        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();
      }
      if (lastIndex > 0) {
        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);
      }
 else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {
        mInputConnection.deleteSurroundingText(beforeCursorLength,0);
      }
    }
  }
  mInputConnection.endBatchEdit();
  return true;
}","@Override public boolean deleteRightword(){
  mInputConnection.beginBatchEdit();
  if (mInputConnection.getSelectedText(0) != null) {
    mInputConnection.commitText("""",0);
  }
 else {
    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);
    if (beforeCursor != null) {
      int beforeCursorLength=beforeCursor.length();
      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);
      int lastIndex=0;
      while (m.find()) {
        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();
      }
      if (lastIndex > 0) {
        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);
      }
 else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {
        mInputConnection.deleteSurroundingText(beforeCursorLength,0);
      }
    }
  }
  mInputConnection.endBatchEdit();
  return true;
}",162,7,"deleteLeftWord:deleteRightword,",8,0.04310598373413090,Beam
360,"public static boolean isConnectedUsingWifi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
","public static boolean isConnectedViaWefi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
",64,4,"isConnectedUsingWifi:isConnectedViaWefi,",25,0.10242839654286700,Beam
361,"public void testInvokeAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void tryInvolveAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}",123,5,"testInvokeAny4:tryInvolveAny4,",7,0.05458087126413980,Beam
362,"private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
","private int calculateGraidentchannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
",86,7,"calculateGraidentChannel:calculateGraidentchannel,",126,0.8207841674486800,Beam
363,,,38,3,,425,2.0259729703267400,0
364,"protected void defineLabels(){
  labelsValues=calcLabels();
  if (handleValues)   labels=getLabelsFromValues();
 else   labels=getLabelsFromData();
  nLabels=labels.size();
}
","protected void defineLabELS(){
  labelsValues=calcLabels();
  if (handleValues)   labels=getLabelsFromValues();
 else   labels=getLabelsFromData();
  nLabels=labels.size();
}
",38,5,"defineLabels:defineLabELS,",4,0.020098749796549500,Beam
365,"public void add(IPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException(""Can\'t add point while iterator in progress"");
  }
  points.add(pt);
}
","public void load(IPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException(""Can\'t add point while iterator in progress"");
  }
  points.load(pt);
}
",29,4,"add:load,",11,0.04954531192779540,Beam
366,"public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){
  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
","public Joiner join(Class<? extends DataObject> clclass,String id,URI... ids){
  return join(clclass,id,new ArrayList<URI>(Arrays.asList(ids)));
}
",43,4,"clazz:clclass,alias:id,",113,0.6163843075434370,Beam
367,"@Override public final void onHeatmapFailed(){
  updatePending=false;
}
","@Override public final void onHeatmapFinailed(){
  updatePending=false;
}
",14,2,"onHeatmapFailed:onHeatmapFinailed,",8,0.04022494554519650,Beam
368,,,923,21,,334,2.2384179910024000,0
369,"public void addResponseCodeListener(ActionListener a){
  responseCodeListeners.addElement(a);
}
","public void addResponseHeaderHandler(ActionListener a){
  responseCodeListeners.addElement(a);
}
",16,3,"addResponseCodeListener:addResponseHeaderHandler,",42,0.13824373086293500,Beam
370,"public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){
  ArrayList<Page> newPages=new ArrayList<>();
  int pageAmount=pages.size();
  int times=0;
  while (pageAmount > 0) {
    ArrayList<Page> pagesTemp=new ArrayList<>();
    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));
    int height=0;
    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();
    for (    Page page : pagesTemp) {
      widgets.add(new ButtonWidget(15,10 + height,page));
      height+=20;
    }
    newPages.add(new Page(""index"" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));
    widgets.clear();
    pagesTemp.clear();
    pageAmount-=7;
    times++;
  }
  return newPages;
}","public static ArrayList<Page> pageCreatorsButles(ArrayList<Page> projects,Item manualType){
  ArrayList<Page> newPages=new ArrayList<>();
  int pageAmount=projects.size();
  int times=0;
  while (pageAmount > 0) {
    ArrayList<Page> pagesTemp=new ArrayList<>();
    pagesTemp.addAll(projects.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));
    int height=0;
    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();
    for (    Page page : pagesTemp) {
      widgets.add(new ButtonWidget(15,10 + height,page));
      height+=20;
    }
    newPages.add(new Page(""index"" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));
    widgets.clear();
    pagesTemp.clear();
    pageAmount-=7;
    times++;
  }
  return newPages;
}",198,10,"pages:projects,pageCreatorButtons:pageCreatorsButles,",97,0.8255115787188210,Beam
371,"public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
","public static EnergyNetwork initNET(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork en=new EnergyNetwork();
  usedIds.add(id);
  en.networkID=id;
  return en;
}
",74,5,"initNetwork:initNET,net:en,",85,0.47410852114359500,Beam
372,,,30,4,,516,2.544573736190800,0
373,"private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}","private void end(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.end();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}",82,8,"stop:end,",38,0.2956573327382410,Beam
374,,,82,3,,85,0.3952581445376080,0
376,,,63,3,,520,2.0426597158114100,0
377,,,111,8,,1434,9.914474642276760,0
378,"public void print(int inum){
  print(String.valueOf(inum));
}
","public void output(int inum){
  output(String.valueOf(inum));
}
",19,2,"print:output,",13,0.04984467426935830,Beam
379,"public boolean makeBackupFile(String directory,File file){
  if (file == null) {
    log.info(""No file to backup"");
  }
 else   if (file.canWrite()) {
    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());
    if (log.isDebugEnabled()) {
      log.debug(""new backup file: "" + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug(""deleted backup file "" + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug(""creating backup directory: "" + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error(""backup directory not created"");
        return false;
      }
    }
    if (file.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug(""created new backup file "" + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""could not create backup file "" + backupFullName);
      }
      return false;
    }
  }
  return true;
}
","public boolean createBackdownFiles(String directory,File file){
  if (file == null) {
    log.info(""No file to backup"");
  }
 else   if (file.canWrite()) {
    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());
    if (log.isDebugEnabled()) {
      log.debug(""new backup file: "" + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug(""deleted backup file "" + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug(""creating backup directory: "" + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error(""backup directory not created"");
        return false;
      }
    }
    if (file.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug(""created new backup file "" + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""could not create backup file "" + backupFullName);
      }
      return false;
    }
  }
  return true;
}
",257,7,"makeBackupFile:createBackdownFiles,",8,0.04462757507960000,Beam
380,,,163,11,,1892,15.374679474035900,0
381,"protected void sendLogEvent(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}","protected void sendEventEvents(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}",54,7,"sendLogEvent:sendEventEvents,",77,0.3040494640668230,Beam
382,"public void addLifecycleListener(LifecycleListener lifecycleListener){
  if (!lifecycleListeners.contains(lifecycleListener)) {
    lifecycleListeners.add(lifecycleListener);
  }
}
","public void addLifencyAdapter(LifecycleListener litecycleContext){
  if (!lifecycleListeners.contains(litecycleContext)) {
    lifecycleListeners.add(litecycleContext);
  }
}
",28,3,"lifecycleListener:litecycleContext,addLifecycleListener:addLifencyAdapter,",149,0.5611956675847370,Beam
383,,,109,7,,1251,7.725213074684140,0
384,"public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}","public void extend(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}",228,20,"update:extend,",35,0.17343533039093000,Beam
385,"public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){
  int numPreEscapes=0;
  for (int i=start; i < str.length(); i++) {
    char curChar=str.charAt(i);
    if (numPreEscapes == 0 && curChar == separator) {
      return i;
    }
 else {
      split.append(curChar);
      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;
    }
  }
  return -1;
}","public static int Findnext(String str,char separator,char escapeChar,int start,StringBuilder split){
  int numPreEscapes=0;
  for (int i=start; i < str.length(); i++) {
    char curChar=str.charAt(i);
    if (numPreEscapes == 0 && curChar == separator) {
      return i;
    }
 else {
      split.append(curChar);
      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;
    }
  }
  return -1;
}",103,9,"findNext:Findnext,",123,0.6675718784332280,Beam
386,"protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}","protected int raw(InputStream inputStream,byte[] buffer,char Divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.raw());
    if (readByte == -1 || readByte == (byte)Divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}",84,6,"read:raw,divider:Divider,",327,1.5627958337465900,Beam
387,"public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}","public static void stat(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.stat(tag,msg);
}",76,8,"i:stat,",63,0.18244011402130100,Beam
389,"private boolean isFileValid(File file,String methodName){
  if (file == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=file.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}","private boolean isfileInvalid(File file,String methodName){
  if (file == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=file.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}",80,5,"isFileValid:isfileInvalid,",47,0.29963566064834600,Beam
390,"public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
","public void initializeActiveSlotsL(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
",48,4,"initializeActiveSlotsList:initializeActiveSlotsL,",24,0.08658092816670740,Beam
391,"private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}","private static String[] searchForReferences(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}",126,5,"scanForSources:searchForReferences,",16,0.08309154510498050,Beam
392,"private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}
","private synchronized void loadHixFile(IHex binary){
  hexTileset.assignMatch(binary,boardview);
  hexTileset.trackHexImages(binary,tracker);
}
",28,5,"loadHexImage:loadHixFile,hex:binary,",80,0.29704933166503900,Beam
393,"private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}","private void read(String route) throws Exception {
  if (route != null) {
    count=route.length();
    data=new char[count];
    route.getChars(0,count,data,0);
  }
  route();
}",52,4,"path:route,parse:read,",90,0.38965245087941500,Beam
394,,,16,1,,25,0.09978177547454830,0
395,"@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}","@Override public void printf(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}",66,5,"write:printf,",56,0.2231495459874470,Beam
396,,,39,5,,488,2.264010226726530,0
397,,,234,6,,460,2.3465742111206100,0
398,"EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}","EgDemandDetails insertSignalties(final BigDecimal chqBouncePenalty,final Module device){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(device);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,device);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,device);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}",118,8,"module:device,insertPenalty:insertSignalties,",179,1.1565939346949300,Beam
399,"public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}","public void rederiveImage(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}",230,10,"rederiveColor:rederiveImage,",5,0.03387974500656130,Beam
400,"public static int calculateRMSLevel(short[] audioData,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}","public static int calculateRMSLevel(short[] audioData,int numcycles){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numcycles)     break;
  }
  double dAvg=lSum / numcycles;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numcycles)     break;
  }
  double averageMeanSquare=sumMeanSquare / numcycles;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}",126,10,"numframes:numcycles,",28,0.1962439974149070,Beam
401,"protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
","protected void generateObjects(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
",157,10,"generateFields:generateObjects,",4,0.026446314652760800,Beam
402,,,139,7,,1016,5.350277773539230,0
403,"public Debug(String clientID,ClientComms comms){
  this.clientID=clientID;
  this.comms=comms;
  log.setResourceName(clientID);
}
","public Callback(String clientID,ClientComms comms){
  this.clientID=clientID;
  this.comms=comms;
  log.setResourceName(clientID);
}
",30,4,"Debug:Callback,",90,0.2963426510492960,Beam
404,"private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}","private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger mapPull,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(mapPull,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}",193,11,"policyTrigger:mapPull,",15,0.789254363377889,Beam
405,,,30,2,,228,1.0207136154174800,0
407,"public double[] arrayCopy(){
  double[] array=new double[length()];
  for (  IndexValue iv : this)   array[iv.getIndex()]=iv.getValue();
  return array;
}
","public double[] rayCop(){
  double[] address=new double[length()];
  for (  IndexValue iv : this)   address[iv.getIndex()]=iv.getValue();
  return address;
}
",47,3,"arrayCopy:rayCop,array:address,",58,0.29580891927083300,Beam
408,"public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}
","public static String default(final String title){
  return isHidden(title) ? title : HIDDEN_PREFIX.concat(title);
}
",26,2,"key:title,hide:default,",80,0.4557335337003070,Beam
409,"public boolean isNetworkConnected(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}
","public boolean isServiceAdapting(){
  ConnectivityManager connecticationConfig=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo netInfo=connecticationConfig.getActiveNetworkInfo();
  return netInfo != null && netInfo.isConnectedOrConnecting();
}
",38,3,"isNetworkConnected:isServiceAdapting,networkInfo:netInfo,connectivityManager:connecticationConfig,",289,1.6191586256027200,Beam
411,"public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}","public void one(){
  if (iterator.hasNext()) {
    View currentView=iterator.one();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View firstView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       firstView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(firstView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View firstView=mViews.get(0);
        if (mUseDefaultListener)         firstView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(firstView);
        currentView.startAnimation(animator);
      }
    }
  }
}",204,10,"next:one,nextView:firstView,",101,0.9462713917096460,Beam
413,,,118,7,,1222,6.976143483320870,0
414,"@Override public Node item(int index){
  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;
}
","@Override public Node execute(int element){
  return (nodes != null && element < nodes.size()) ? (Node)(nodes.get(element)) : null;
}
",40,3,"item:execute,index:element,",63,0.2374133070309960,Beam
415,"public void test_simplePrematureClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int i=0;
  while (iter.hasNext()) {
    iter.next();
    if (++i == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(i == 10);
}","public void test_simplePremiereClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int i=0;
  while (iter.hasNext()) {
    iter.next();
    if (++i == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(i == 10);
}",83,4,"test_simplePrematureClose:test_simplePremiereClose,",8,0.04496458371480310,Beam
417,"public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
","public static <T>ArrayList<T> input(InputStream fileStream,String charsetName,ITransformer<String,T> helener) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(helener.transform(line));
  }
  scanner.close();
  return list;
}
",93,7,"read:input,transformer:helener,",361,1.6282176812489800,Beam
418,"public static float between(float val,float min,float max){
  return Math.max(Math.min(val,max),min);
}
","public static float between(float value,float min,float max){
  return Math.max(Math.min(value,max),min);
}
",33,4,"val:value,",3,0.023957924048105900,Beam
419,"private String pickCharset(){
  if (charset != null) {
    return charset;
  }
 else   if (utf8Supported) {
    return ""UTF-8"";
  }
 else {
    return System.getProperty(""file.encoding"");
  }
}","private String getchacterset(){
  if (charset != null) {
    return charset;
  }
 else   if (utf8Supported) {
    return ""UTF-8"";
  }
 else {
    return System.getProperty(""file.encoding"");
  }
}",39,3,"pickCharset:getchacterset,",13,0.05868196487426760,Beam
420,,,17,1,,33,0.15275797843933100,0
421,"protected int checkKnownCookie(){
  int retVal=0;
  debug.message(""{}.checkKnownCookie:"",ADAPTIVE);
  HttpServletRequest req=getHttpServletRequest();
  if (req != null) {
    Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName);
    if (cookie != null) {
      if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {
        retVal=knownCookieScore;
      }
    }
  }
  if (knownCookieValue == null) {
    knownCookieValue=""1"";
  }
  if (knownCookieSave) {
    postAuthNMap.put(""COOKIENAME"",knownCookieName);
    postAuthNMap.put(""COOKIEVALUE"",knownCookieValue);
  }
  if (!knownCookieInvert) {
    retVal=knownCookieScore - retVal;
  }
  return retVal;
}","protected int checkKnownCookerve(){
  int retVal=0;
  debug.message(""{}.checkKnownCookie:"",ADAPTIVE);
  HttpServletRequest req=getHttpServletRequest();
  if (req != null) {
    Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName);
    if (cookie != null) {
      if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {
        retVal=knownCookieScore;
      }
    }
  }
  if (knownCookieValue == null) {
    knownCookieValue=""1"";
  }
  if (knownCerveCompare) {
    postAuthNMap.put(""COOKIENAME"",knownCookieName);
    postAuthNMap.put(""COOKIEVALUE"",knownCookieValue);
  }
  if (!knownCookieInvert) {
    retVal=knownCookieScore - retVal;
  }
  return retVal;
}",128,11,"checkKnownCookie:checkKnownCookerve,knownCookieSave:knownCerveCompare,",753,5.2291465957959500,Beam
422,,,55,6,,1232,6.254212069511410,0
423,,,46,4,,1138,5.823927668730420,0
424,"public static boolean isFileTypeSupported(int fileType){
  List providers=getMidiFileWriters();
  for (int i=0; i < providers.size(); i++) {
    MidiFileWriter writer=(MidiFileWriter)providers.get(i);
    if (writer.isFileTypeSupported(fileType)) {
      return true;
    }
  }
  return false;
}","public static boolean isFiletypesupported(int FilePath){
  List providers=getMidiFileWriters();
  for (int i=0; i < providers.size(); i++) {
    MidiFileWriter handler=(MidiFileWriter)providers.get(i);
    if (handler.isFiletypesupported(FilePath)) {
      return true;
    }
  }
  return false;
}",67,5,"isFileTypeSupported:isFiletypesupported,fileType:FilePath,writer:handler,",571,3.5574456532796200,Beam
425,"DeleteEvent(@NonNull JSONObject json) throws JSONException {
  super(TYPE_DELETE,json);
  if (TextUtils.isEmpty(mBlockId)) {
    throw new JSONException(TYPENAME_DELETE + "" requires "" + JSON_BLOCK_ID);
  }
  mOldXml=json.optString(JSON_OLD_VALUE);
  JSONArray ids=json.getJSONArray(JSON_IDS);
  int count=ids.length();
  List<String> temp=new ArrayList<>(count);
  for (int i=0; i < count; ++i) {
    temp.add(ids.getString(i));
  }
  mIds=Collections.unmodifiableList(temp);
}","deleteEvent(@NonNull JSONObject serial) throws JSONException {
  super(TYPE_DELETE,serial);
  if (TextUtils.isEmpty(mBlockId)) {
    throw new JSONException(TYPENAME_DELETE + "" requires "" + JSON_BLOCK_ID);
  }
  mOldXml=serial.optString(JSON_OLD_VALUE);
  JSONArray ids=serial.getJSONArray(JSON_IDS);
  int count=ids.length();
  List<String> temp=new ArrayList<>(count);
  for (int i=0; i < count; ++i) {
    temp.add(ids.getString(i));
  }
  mIds=Collections.unmodifiableList(temp);
}",119,11,"DeleteEvent:deleteEvent,json:serial,",1324,5.0858985662460300,Beam
426,"public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}","public static String escapeComgex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}",29,3,"escapeRegex:escapeComgex,",4,0.019487202167511000,Beam
427,,,27,3,,603,6.586897087097170,0
428,"static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=collector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}","static MethodHandle makecollectArgsuments(MethodHandle target,MethodHandle collector,int CollectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorsType=collector.type();
  int collectArgCount=collectorsType.parameterCount();
  Class<?> collectValType=collectorsType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType sourcePath=targetType.dropParameterTypes(CollectArgPos,CollectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    sourcePath=sourcePath.insertParameterTypes(CollectArgPos,collectorsType.parameterList());
  }
  MethodType lambdaType=sourcePath.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + CollectArgPos,1 + CollectArgPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=CollectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(sourcePath,form);
}",373,20,"makeCollectArguments:makecollectArgsuments,collectArgPos:CollectArgPos,collectorType:collectorsType,srcType:sourcePath,",1903,10.826988581816400,Beam
429,"private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}","private void deselect(final int column,final boolean shouldFireEvents){
  checkWidget();
  if (column < 0 || column >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(column);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}",104,7,"index:column,",31,0.15726652542750000,Beam
430,"public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}","public String toChars(int[] instices){
  StringBuilder s=new StringBuilder(instices.length);
  for (int i=0; i < instices.length; i++)   s.append(toChar(instices[i]));
  return s.toString();
}",58,4,"indices:instices,",6,0.03508888880411780,Beam
431,"public void addSplitEdges(List edgeList){
  addEndpoints();
  Iterator it=iterator();
  EdgeIntersection eiPrev=(EdgeIntersection)it.next();
  while (it.hasNext()) {
    EdgeIntersection ei=(EdgeIntersection)it.next();
    Edge newEdge=createSplitEdge(eiPrev,ei);
    edgeList.add(newEdge);
    eiPrev=ei;
  }
}
","public void addPartEndices(List edgelist){
  addEndpoints();
  Iterator it=iterator();
  EdgeIntersection eniPtr=(EdgeIntersection)it.next();
  while (it.hasNext()) {
    EdgeIntersection ei=(EdgeIntersection)it.next();
    Edge newEdge=createSplitEdge(eniPtr,ei);
    edgelist.add(newEdge);
    eniPtr=ei;
  }
}
",75,6,"edgeList:edgelist,addSplitEdges:addPartEndices,eiPrev:eniPtr,",284,1.116794761021930,Beam
432,"public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
","public void conclose(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
",93,6,"reconnect:conclose,",5,0.02267993688583370,Beam
433,"public TvShowUpdateDatasourceTask(String datasource){
  super(BUNDLE.getString(""update.datasource"") + "" ("" + datasource+ "")"");
  tvShowList=TvShowList.getInstance();
  dataSources=new ArrayList<>(1);
  dataSources.add(datasource);
}","public TvShowUpdateDatasSourceActivity(String datasrc){
  super(BUNDLE.getString(""update.datasource"") + "" ("" + datasrc+ "")"");
  vShowTree=TvShowList.getInstance();
  dataSources=new ArrayList<>(1);
  dataSources.add(datasrc);
}",49,4,"TvShowUpdateDatasourceTask:TvShowUpdateDatasSourceActivity,datasource:datasrc,tvShowList:vShowTree,",185,0.8007356484731040,Beam
434,"@Override public boolean isEnabled(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.isEnabled();
  }
 else {
    if (this.crsComboBox != null) {
      return crsComboBox.isEnabled();
    }
  }
  return false;
}
","@Override public boolean hasActive(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.hasActive();
  }
 else {
    if (this.crsChboBox != null) {
      return crsChboBox.hasActive();
    }
  }
  return false;
}
",54,3,"isEnabled:hasActive,crsComboBox:crsChboBox,",246,1.7249786734581000,Beam
435,,,71,4,,681,6.157687922318780,0
436,"public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}","public Point2D inverseTransform(Point2D src,Point2D sdste){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    sdste=rotTransform.inverseTransform(src,sdste);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return sdste;
}",74,8,"dst:sdste,",3,0.025566446781158400,Beam
437,"public void addToQueue(Var var){
  addToQueue(Collections.singleton(var));
}
","public void AddToQue(Var car){
  AddToQue(Collections.singleton(car));
}
",19,2,"addToQueue:AddToQue,var:car,",97,0.38798781236012800,Beam
438,"private static String extractClientName(String clientId,String host){
  String hostExcludedId="""";
  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {
    hostExcludedId=clientId.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}","private static String extractClientName(String clientInfo,String host){
  String hostExcludedId="""";
  if ((isIPv6(host) || isIPv4(host)) && clientInfo.startsWith(host)) {
    hostExcludedId=clientInfo.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=clientInfo.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}",183,13,"clientId:clientInfo,",4,0.028243768215179400,Beam
439,"private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
","private void emmituntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
",100,8,"emitUntil:emmituntil,",9,0.046326065063476600,Beam
440,"public boolean isLoginSet(){
  return (username != null && (password != null && !username.equals("""") && !password.equals(""""))) || oauth;
}
","public boolean IsLoginet(){
  return (username != null && (word != null && !username.equals("""") && !word.equals(""""))) || oauth;
}
",38,4,"isLoginSet:IsLoginet,password:word,",30,0.12405065298080400,Beam
441,"private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){
  int targetPage;
  if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=velocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=velocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + pageOffset + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastItem=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}","private int determinetargetpage(int currentPage,float pageOffset,int velocity,int dDeltax){
  int targetPage;
  if (Math.abs(dDeltax) > flingDistance && Math.abs(velocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=velocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=velocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + pageOffset + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastItem=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}",194,15,"determineTargetPage:determinetargetpage,deltaX:dDeltax,",121,0.5920211593310040,Beam
442,,,68,6,,825,3.371920398871100,0
443,"public MemBasedCache(int maxCacheSizeInBytes){
  mMaxCacheSizeInBytes=maxCacheSizeInBytes;
  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);
}","public MemoryBasedPut(int maxCacheLengthInbytes){
  mMaxCacheSizeInBytes=maxCacheLengthInbytes;
  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);
}",29,4,"MemBasedCache:MemoryBasedPut,maxCacheSizeInBytes:maxCacheLengthInbytes,",72,0.29389795462290400,Beam
444,"public void testEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}","public void testEmptySearch() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}",305,5,"testEmptyIndex:testEmptySearch,",5,0.05552401940027870,Beam
445,"@PostConstruct public void init(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}
","@PostConstruct public void instance(){
  configurationConfigs.add(defaultDistributionSetTypeLayout);
  configurationConfigs.add(authenticationConfigurationView);
  configurationConfigs.add(pollingConfigurationView);
}
",30,5,"init:instance,configurationViews:configurationConfigs,",394,1.6092532912890100,Beam
446,,,95,4,,492,2.341115168730420,0
447,"public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){
  if (maxNumScaleMarkers < 2) {
    maxNumScaleMarkers=2;
  }
  int scale=calcScale(proteinLength,maxNumScaleMarkers);
  StringBuilder sb=new StringBuilder(""0"");
  int index=0;
  int numRemaining=proteinLength;
  while (index <= proteinLength) {
    index+=scale;
    numRemaining-=scale;
    sb.append("","");
    if ((numRemaining > 0) && (numRemaining < scale)) {
      if (numRemaining < (scale / 2)) {
        sb.append(proteinLength);
        break;
      }
    }
    if (index >= proteinLength) {
      sb.append(proteinLength);
    }
 else {
      sb.append(index);
    }
  }
  return sb.toString();
}","public static String generateScaleHeadors(int proteinLength,int maxNumScalemarkers){
  if (maxNumScalemarkers < 2) {
    maxNumScalemarkers=2;
  }
  int scale=calcScale(proteinLength,maxNumScalemarkers);
  StringBuilder sf=new StringBuilder(""0"");
  int index=0;
  int numContained=proteinLength;
  while (index <= proteinLength) {
    index+=scale;
    numContained-=scale;
    sf.append("","");
    if ((numContained > 0) && (numContained < scale)) {
      if (numContained < (scale / 2)) {
        sf.append(proteinLength);
        break;
      }
    }
    if (index >= proteinLength) {
      sf.append(proteinLength);
    }
 else {
      sf.append(index);
    }
  }
  return sf.toString();
}",146,7,"generateScaleMarkers:generateScaleHeadors,maxNumScaleMarkers:maxNumScalemarkers,numRemaining:numContained,sb:sf,",1322,6.738600961367290,Beam
448,"Builder addLenient(String line){
  int index=line.indexOf("":"",1);
  if (index != -1) {
    return addLenient(line.substring(0,index),line.substring(index + 1));
  }
 else   if (line.startsWith("":"")) {
    return addLenient("""",line.substring(1));
  }
 else {
    return addLenient("""",line);
  }
}","Builder addPatitive(String look){
  int index=look.indexOf("":"",1);
  if (index != -1) {
    return addPatitive(look.substring(0,index),look.substring(index + 1));
  }
 else   if (look.startsWith("":"")) {
    return addPatitive("""",look.substring(1));
  }
 else {
    return addPatitive("""",look);
  }
}",87,3,"addLenient:addPatitive,line:look,",156,0.8936247944831850,Beam
449,"public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(path),lowercase);
}
","public static Set<String> readstopwordsStream(Path path,boolean lowerCase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(path),lowerCase);
}
",31,3,"lowercase:lowerCase,readStopwordsPath:readstopwordsStream,",301,1.2958170135815900,Beam
450,"private void loadUserInfoIntoActionBar(){
  if (!TextUtils.isEmpty(mWithUserImage)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}
","private void loadUserInfoIntintoActionBar(){
  if (!TextUtils.isEmpty(mWithUserImage)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}
",38,3,"loadUserInfoIntoActionBar:loadUserInfoIntintoActionBar,",18,0.0822460134824117,Beam
451,"public void removeRegion(Region r){
  regions.remove(r);
}
","public void removeCountry(Region r){
  regions.remove(r);
}
",16,3,"removeRegion:removeCountry,",34,0.12241606712341300,Beam
452,,,20,2,,103,0.5407823959986370,0
453,"static void pauseThread(long duration){
  try {
    Thread.sleep(duration);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
","static void joinApplication(long repeat){
  try {
    Thread.sleep(repeat);
  }
 catch (  Exception exc) {
    s_logger.warn(""Exception while trying to sleep"",exc);
  }
}
",35,4,"duration:repeat,pauseThread:joinApplication,e:exc,",286,0.8783357898394270,Beam
455,,,18,2,,183,1.923472026983900,0
456,"public StopwatchCPU(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}
","public stopmonitorCPU(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}
",22,3,"StopwatchCPU:stopmonitorCPU,",12,0.040564064184824600,Beam
457,"public static <T>ParallelPublisher<T> from(Publisher<? extends T> source,boolean ordered,int parallelism){
  return from(source,ordered,parallelism,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize()));
}
","public static <T>ParallelPublisher<T> empty(Publisher<? extends T> source,boolean ordered,int parallelize){
  return empty(source,ordered,parallelize,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize()));
}
",54,4,"parallelism:parallelize,from:empty,",459,1.9917489131291700,Beam
458,,,45,4,,522,2.068046812216440,0
459,"public void randomize(){
  randomizeIncomingWeights();
  normalizeIncomingWeights();
}
","public void Randomizer(){
  randomizeIncomingWeights();
  normalizeIncomingWeights();
}
",15,1,"randomize:Randomizer,",13,0.0721801241238912,Beam
460,"public static void saveX509Cert(String certStr,File certFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));
  writer.write(BEGIN_CERT);
  writer.newLine();
  writer.write(certStr);
  writer.newLine();
  writer.write(END_CERT);
  writer.newLine();
  writer.close();
}","public static void saveXificateStr(String signStr,File orderFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(orderFile));
  writer.write(BEGIN_CERT);
  writer.newLine();
  writer.write(signStr);
  writer.newLine();
  writer.write(END_CERT);
  writer.newLine();
  writer.close();
}
",73,4,"saveX509Cert:saveXificateStr,certStr:signStr,certFile:orderFile,",280,1.4855373819669100,Beam
461,"public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
","public static <T>void updateMappingToimmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
",97,5,"updateMappingToImmutableSet:updateMappingToimmutableSet,",8,0.046132810910542800,Beam
462,"public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}","public void newALL(int location,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,location,array,location + dataLen,size - location);
  System.arraycopy(data,0,array,location,dataLen);
  size+=dataLen;
}",90,7,"addAll:newALL,index:location,",193,1.7433354099591600,Beam
463,,,35,3,,349,1.4849294304847700,0
464,"public synchronized void removeBatchClustererListener(BatchClustererListener cl){
  m_batchClustererListeners.remove(cl);
}
","public synchronized void removeBatchClustressorAdapter(BatchClustererListener lb){
  m_batchClustererListeners.remove(lb);
}
",17,3,"removeBatchClustererListener:removeBatchClustressorAdapter,cl:lb,",191,0.7292615175247190,Beam
465,"final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void length(long number){
  Writer out=this.out;
  if (out == null)   return;
  print(number);
  try {
    out.length(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,6,"println:length,v:number,",844,3.312581769625350,Beam
466,,,87,9,,1080,5.843671452999120,0
467,"public static Set<URI> fetchRPTargetVirtualPools(DbClient dbClient){
  Set<URI> rpProtectedTargetVPools=new HashSet<URI>();
  try {
    List<URI> vpoolProtectionSettingsURIs=dbClient.queryByType(VpoolProtectionVarraySettings.class,true);
    Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsURIs,true);
    while (vPoolProtectionSettingsItr.hasNext()) {
      VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next();
      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {
        rpProtectedTargetVPools.add(rSetting.getVirtualPool());
      }
    }
  }
 catch (  Exception ex) {
    _log.error(""Exception occurred while fetching RP enabled virtualpools"",ex);
  }
  return rpProtectedTargetVPools;
}
","public static Set<URI> fetchRPTargetVirtualpools(DbClient dbConnection){
  Set<URI> rpProtectedargetVPools=new HashSet<URI>();
  try {
    List<URI> vpoolProtectionSettingUROs=dbConnection.queryByType(VpoolProtectionVarraySettings.class,true);
    Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbConnection.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingUROs,true);
    while (vPoolProtectionSettingsItr.hasNext()) {
      VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next();
      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {
        rpProtectedargetVPools.add(rSetting.getVirtualPool());
      }
    }
  }
 catch (  Exception ex) {
    _log.error(""Exception occurred while fetching RP enabled virtualpools"",ex);
  }
  return rpProtectedargetVPools;
}
",135,8,"fetchRPTargetVirtualPools:fetchRPTargetVirtualpools,dbClient:dbConnection,rpProtectedTargetVPools:rpProtectedargetVPools,vpoolProtectionSettingsURIs:vpoolProtectionSettingUROs,",464,2.6190176328023300,Beam
468,"public synchronized void removePropertyChangeListener(PropertyChangeListener listener){
  listeners.remove(listener);
}
","public synchronized void removePropertyCreateListener(PropertyChangeListener linencer){
  lributes.remove(linencer);
}
",17,3,"listener:linencer,removePropertyChangeListener:removePropertyCreateListener,listeners:lributes,",166,0.7185201406478880,Beam
469,,,45,4,,645,3.7462728659311900,0
470,"protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.start();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}","protected synchronized void run(long curriedGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curriedGen) {
      assert myPrimaryGen < curriedGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curriedGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.run();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curriedGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}",1015,25,"start:run,curPrimaryGen:curriedGen,",57,0.3963767647743230,Beam
471,,,112,7,,227,1.2800455292065900,0
472,,,201,6,,1305,10.28374373515450,0
473,"public static CheckIndex.Status checkIndex(Directory dir) throws IOException {
  return checkIndex(dir,true);
}
","public static CheckIndex.Status readindex(Directory object) throws IOException {
  return readindex(object,true);
}
",22,2,"checkIndex:readindex,dir:object,",202,0.7407318433125810,Beam
475,"private void calculateD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}","private void calculatingD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}",86,7,"calculateD:calculatingD,",39,0.23814762830734300,Beam
477,,,55,4,,967,3.7327742060025500,0
478,,,33,3,,714,4.01326326529185,0
479,"public static boolean isResourceReference(String str){
  return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0);
}","public static boolean IsResourcereference(String str){
  return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0);
}",39,2,"isResourceReference:IsResourcereference,",49,0.2909206946690880,Beam
480,"public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}","public static int update(String where,Object[] args,V sets,Class<? extends Bean> st){
  Table mapping=(Table)st.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + st + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}",108,7,"t:st,",35,0.2150205334027610,Beam
481,,,14,2,,307,1.14433145125707,0
482,,,28,2,,307,1.266884712378180,0
483,,,151,8,,1143,4.571625359853110,0
484,"public boolean isEmpty(){
  return mSelectedWidgets.isEmpty();
}
","public boolean issempty(){
  return mSelectedWidows.issempty();
}
",14,2,"isEmpty:issempty,mSelectedWidgets:mSelectedWidows,",133,0.5849643270174660,Beam
485,,,59,7,,735,2.6987324635187800,0
486,"protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
","protected void handle(Exception exception,String error,String message){
  Utils.handleError(getShell(),exception,error,message);
}
",30,4,"title:error,",85,0.3415757735570270,Beam
487,,,84,2,,197,1.174777626991270,0
488,,,50,4,,527,1.7727119644482900,0
489,,,71,7,,782,12.582244356473300,0
490,,,102,8,,259,1.0093142628669700,0
491,"public static void closeQuietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
","public static void closeFlietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
",47,3,"closeQuietly:closeFlietly,",28,0.19919888973236100,Beam
492,"public PartialCorrelationPdf(int n,int k){
  this.n=n;
  this.k=k;
  double gammaRatio=gammaRatio(n,k);
  this.constant=(1 / Math.pow(Math.PI,0.5)) * gammaRatio;
  this.outsideExp=(double)(n - k - 2) / 2.0;
}","public PartialCornerPoint(int n,int mk){
  this.n=n;
  this.mk=mk;
  double gammaRatio=gammaRatio(n,mk);
  this.constant=(1 / Math.pow(Math.PI,0.5)) * gammaRatio;
  this.outsideExp=(double)(n - mk - 2) / 2.0;
}",71,4,"PartialCorrelationPdf:PartialCornerPoint,k:mk,",85,0.368036417166392,Beam
493,,,556,14,,2037,12.980141739050500,0
494,"private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZones,Map<String,StoragePort> initiatorPortsMap){
  Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>();
  Zone zone=null;
  List<Zone> zones=null;
  for (  String initiatorWwn : wwnToZones.keySet()) {
    for (    String portWwn : initiatorPortsMap.keySet()) {
      zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZones.get(initiatorWwn));
      if (zone != null) {
        zones=filteredMap.get(initiatorWwn);
        if (zones == null) {
          zones=new ArrayList<>();
          filteredMap.put(initiatorWwn,zones);
        }
        zones.add(zone);
      }
    }
  }
  return filteredMap;
}
","private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZodes,Map<String,StoragePort> initiatorPowersList){
  Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>();
  Zone zone=null;
  List<Zone> zones=null;
  for (  String initiatorWwn : wwnToZodes.keySet()) {
    for (    String portWwn : initiatorPowersList.keySet()) {
      zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZodes.get(initiatorWwn));
      if (zone != null) {
        zones=filteredMap.get(initiatorWwn);
        if (zones == null) {
          zones=new ArrayList<>();
          filteredMap.put(initiatorWwn,zones);
        }
        zones.add(zone);
      }
    }
  }
  return filteredMap;
}
",172,10,"wwnToZones:wwnToZodes,initiatorPortsMap:initiatorPowersList,",132,0.8786765257517500,Beam
495,"@Override public boolean open(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}
","@Override public boolean connect(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.connect(access));
}
",101,7,"open:connect,",39,0.19150344133377100,Beam
496,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenee != null || !eventName.equals(""instance"")) {
    return false;
  }
  return true;
}
","@Override public boolean applicationAllbidden(String objectName){
  if (m_listenee != null || !objectName.equals(""instance"")) {
    return false;
  }
  return true;
}
",33,3,"connectionAllowed:applicationAllbidden,eventName:objectName,",49,0.35634099642435700,Beam
498,"public boolean isValidTemplate(){
  return isValidTemplate(template);
}
","public boolean isInvalidTemplate(){
  return isInvalidTemplate(template);
}
",13,2,"isValidTemplate:isInvalidTemplate,",11,0.052727107206980400,Beam
499,"static void removeAllPhis(IR ir){
  for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {
    nextInstr=s.nextInstructionInCodeOrder();
    if (Phi.conforms(s))     s.remove();
  }
}
","static void removeallPhIs(IR ris){
  for (Instruction s=ris.firstInstructionInCodeOrder(), sentinel=ris.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {
    nextInstr=s.nextInstructionInCodeOrder();
    if (Phi.conforms(s))     s.remove();
  }
}
",65,5,"removeAllPhis:removeallPhIs,ir:ris,",138,0.8188410997390750,Beam
500,,,58,7,,1435,5.165796868006390,0
501,,,133,8,,1597,9.323205475012460,0
502,,,53,3,,727,4.377483137448630,0
503,"@Override protected void tearDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
","@Override protected void tearsUp() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
",62,5,"tearDown:tearsUp,",8,0.04125372568766280,Beam
504,"public static boolean isPlaceAction(InventoryAction action){
switch (action) {
case SWAP_WITH_CURSOR:
case PLACE_ONE:
case PLACE_ALL:
case PLACE_SOME:
    return true;
}
return false;
}
","public static boolean isplaceOperation(InventoryAction controller){
switch (controller) {
case SWAP_WITH_CURSOR:
case PLACE_ONE:
case PLACE_ALL:
case PLACE_SOME:
    return true;
}
return false;
}
",34,6,"isPlaceAction:isplaceOperation,action:controller,",51,0.26006229321161900,Beam
505,,,203,13,,1388,7.975142737229670,0
506,"public static Calendar reduceCalendar(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}","public static Calendar reducerCalcal(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}",68,2,"reduceCalendar:reducerCalcal,",52,0.2979477723439540,Beam
507,,,49,2,,38,0.1384639302889510,0
508,"public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains("".mappingTable."")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}","public HubLinkMapping(String fileDir,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileDir.contains("".mappingTable."")) {
    readMappingTable(fileDir);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileDir);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}",216,14,"fileName:fileDir,",38,0.21819434563318900,Beam
509,,,81,3,,751,4.133831151326500,0
510,"private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}","private double empiricalHSic(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}",359,17,"empiricalHSIC:empiricalHSic,",3,0.09850426912307740,Beam
511,"public void testConfigFileProperty() throws Exception {
  File configHome=new File(configuration.getHome());
  assertTrue(""Could not find a proper configuration home."",configHome.exists() && configHome.isDirectory());
  File existingFile=createFile(configHome,""existingfile"",""helloworld"");
  assertEquals(""helloworld"",readFile(existingFile));
  String fileName=""testConfigfile"";
  String fileContents=""Hello @message@ "";
  File file=createFile(configFileDirectory,fileName,fileContents);
  FileConfig configFile=new FileConfig();
  configFile.setFile(getAbsolutePath(file));
  configFile.setToFile(""existingfile"");
  configFile.setOverwrite(false);
  configFile.setConfigfile(false);
  configuration.setProperty(""message"",""world"");
  configuration.setConfigFileProperty(configFile);
  configuration.doConfigure(null);
  File copiedFile=new File(configuration.getHome() + ""/existingfile"");
  assertTrue(""Cannot find the expected copied file"",copiedFile.exists());
  assertEquals(""Hello world "",readFile(copiedFile));
}
","public void testConfigFilesproperty() throws Exception {
  File configHome=new File(configuration.getHome());
  assertTrue(""Could not find a proper configuration home."",configHome.exists() && configHome.isDirectory());
  File existingFile=createFile(configHome,""existingfile"",""helloworld"");
  assertEquals(""helloworld"",readFile(existingFile));
  String fileName=""testConfigfile"";
  String fileContents=""Hello @message@ "";
  File file=createFile(configFileDirectory,fileName,fileContents);
  FileConfig configFile=new FileConfig();
  configFile.setFile(getAbsolutePath(file));
  configFile.setToFile(""existingfile"");
  configFile.setOverwrite(false);
  configFile.setConfigfile(false);
  configuration.setProperty(""message"",""world"");
  configuration.setConfigFileProperty(configFile);
  configuration.doConfigure(null);
  File copiedFile=new File(configuration.getHome() + ""/existingfile"");
  assertTrue(""Cannot find the expected copied file"",copiedFile.exists());
  assertEquals(""Hello world "",readFile(copiedFile));
}
",181,10,"testConfigFileProperty:testConfigFilesproperty,",20,0.19201441605885800,Beam
512,"@Override public StateConnection onCloseRead(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCloseRead();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
","@Override public StateConnection onEndClose(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onEndClose();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosepending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosepending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
",108,6,"onCloseRead:onEndClose,_isClosePending:_isClosepending,",430,2.1203750451405800,Beam
513,,,16,1,,49,0.4281770428021750,0
514,"public void addColumn(int idx,Column column){
  if (column != null) {
    columns.add(idx,column);
  }
}
","public void createcolumn(int idx,Column service){
  if (service != null) {
    columns.add(idx,service);
  }
}
",29,4,"column:service,addColumn:createcolumn,",76,0.313698403040568,Beam
515,"public Builder deleteEntitlements(){
  deleteFields.add(""entitlements"");
  return this;
}
","public Builder deleteAdditleements(){
  deleteFields.add(""entitlements"");
  return this;
}
",17,2,"deleteEntitlements:deleteAdditleements,",13,0.0833122730255127,Beam
516,"protected abstract void bindItem(DataBoundViewHolder<T> holder,int position,List<Object> payloads);
","protected abstract void binditem(DataBoundViewHolder<T> holder,int position,List<Object> payloads);
",21,4,"bindItem:binditem,",18,0.06779491106669110,Beam
517,"public boolean isLastInvoice(){
  String cm=getCostingMethod();
  return cm != null && cm.equals(COSTINGMETHOD_LastInvoice);
}
","public boolean isLastInvocation(){
  String cy=getCostingMethod();
  return cy != null && cy.equals(COSTINGMETHOD_LastInvoice);
}
",26,2,"isLastInvoice:isLastInvocation,cm:cy,",147,0.660143518447876,Beam
518,"public Object assignIdValue(Object data,Number val,ObjectCache objectCache) throws SQLException {
  Object idVal=dataPersister.convertIdNumber(val);
  if (idVal == null) {
    throw new SQLException(""Invalid class "" + dataPersister + "" for sequence-id ""+ this);
  }
 else {
    assignField(data,idVal,false,objectCache);
    return idVal;
  }
}
","public Object assignmentidNumber(Object dat,Number val,ObjectCache objectCache) throws SQLException {
  Object idVal=dataPersister.convertIdNumber(val);
  if (idVal == null) {
    throw new SQLException(""Invalid class "" + dataPersister + "" for sequence-id ""+ this);
  }
 else {
    assignField(dat,idVal,false,objectCache);
    return idVal;
  }
}
",65,6,"assignIdValue:assignmentidNumber,data:dat,",161,0.9127698302268980,Beam
519,"protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}","protected final void writeS(ByteBuffer bu,String text){
  if (text == null) {
    bu.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      bu.putChar(text.charAt(i));
    }
    bu.putChar('\\000');
  }
}",76,3,"buf:bu,",3,0.03009425401687620,Beam
520,"public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException {
  MathUtils.checkNotNull(v1);
  MathUtils.checkNotNull(v2);
  field=v1.getField();
  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();
  data=MathArrays.buildArray(field,v1Data.length + v2.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(v2,0,data,v1Data.length,v2.length);
}","public ArrayObjectMatrix(FieldVector<T> v3,T[] v2) throws NullArgumentException {
  MathUtils.checkNotNull(v3);
  MathUtils.checkNotNull(v2);
  field=v3.getField();
  final T[] v1Data=(v3 instanceof ArrayObjectMatrix) ? ((ArrayObjectMatrix<T>)v3).data : v3.toArray();
  data=MathArrays.buildArray(field,v1Data.length + v2.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(v2,0,data,v1Data.length,v2.length);
}",123,6,"ArrayFieldVector:ArrayObjectMatrix,v1:v3,",101,0.5758322437604270,Beam
521,,,30,3,,349,1.7298027873039200,0
522,,,30,2,,160,1.3355303208033200,0
523,"@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
","@Override public void error(String domain,String key,XMLParseException conceptions) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(conceptions);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
",71,7,"exception:conceptions,",6,0.04692827463150030,Beam
524,"public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}","public void checkThenAcceptBoth_exceptionalExecpletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}",330,18,"testThenAcceptBoth_exceptionalCompletion:checkThenAcceptBoth_exceptionalExecpletion,",5,0.11595578591028800,Beam
525,"private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}","private int[] createEpochMonths(int epochDay,int inYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - inYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=inYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + inYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}",213,14,"minYear:inYear,",8,0.06109972397486370,Beam
526,"public void mouseWheelMoved(MouseWheelEvent e){
  boolean accepted=checkModifiers(e);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}","public void mouseWheelmoused(MouseWheelEvent x){
  boolean accepted=checkModifiers(x);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)x.getSource();
    Point2D mouse=x.getPoint();
    Point2D center=vv.getCenter();
    int amount=x.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    x.consume();
    vv.repaint();
  }
}",173,11,"mouseWheelMoved:mouseWheelmoused,e:x,",69,0.7043471972147620,Beam
527,"private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){
  result.add(new GraphEdge(head,tail,original.getRelation()));
}
","private void addSyndacticArc(Collection<GraphEdge> result,GraphEdge original,GraphNode before,GraphNode origin){
  result.add(new GraphEdge(before,origin,original.getRelation()));
}
",40,5,"addSyntheticEdge:addSyndacticArc,head:before,tail:origin,",1650,8.32502038081487,Beam
528,"private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
","private int append(FileSystem fs,Configuration conf,Path fn,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(fn)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
",106,8,"src:fn,",10,0.05396650632222490,Beam
529,"public void writeGolomb(int divisor,int value){
  int q=value / divisor;
  for (int i=0; i < q; i++) {
    writeBit(1);
  }
  writeBit(0);
  int r=value - q * divisor;
  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);
  if (r < ((2 << bit) - divisor)) {
    bit--;
  }
 else {
    r+=(2 << bit) - divisor;
  }
  for (; bit >= 0; bit--) {
    writeBit((r >>> bit) & 1);
  }
}","public void writeGollob(int divistector,int value){
  int q=value / divistector;
  for (int i=0; i < q; i++) {
    writeBit(1);
  }
  writeBit(0);
  int r=value - q * divistector;
  int bit=31 - Integer.numberOfLeadingZeros(divistector - 1);
  if (r < ((2 << bit) - divistector)) {
    bit--;
  }
 else {
    r+=(2 << bit) - divistector;
  }
  for (; bit >= 0; bit--) {
    writeBit((r >>> bit) & 1);
  }
}",125,7,"writeGolomb:writeGollob,divisor:divistector,",235,1.3441240390141800,Beam
530,"public void handleRequest(RequestContext rc) throws CLIException {
  super.handleRequest(rc);
  ldapLogin();
  SSOToken adminSSOToken=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String realm=getStringOptionValue(IArgument.REALM_NAME);
  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String filter=getStringOptionValue(IArgument.FILTER);
  if (patternType == null) {
    patternType="""";
  }
  if ((filter == null) || (filter.length() == 0)) {
    filter=""*"";
  }
  String[] params={realm,patternType,filter};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,""ATTEMPT_LIST_AGENTS"",params);
  try {
    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);
    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        if (!matchType(amid,patternType)) {
          i.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString(""format-search-agent-results""),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString(""search-agent-no-entries""));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,""SUCCEED_LIST_AGENTS"",params);
  }
 catch (  IdRepoException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}","public void HandleResource(RequestContext rc) throws CLIException {
  super.HandleResource(rc);
  ldapLogin();
  SSOToken adminSSOToken=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String realm=getStringOptionValue(IArgument.REALM_NAME);
  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String filter=getStringOptionValue(IArgument.FILTER);
  if (patternType == null) {
    patternType="""";
  }
  if ((filter == null) || (filter.length() == 0)) {
    filter=""*"";
  }
  String[] params={realm,patternType,filter};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,""ATTEMPT_LIST_AGENTS"",params);
  try {
    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);
    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        if (!matchType(amid,patternType)) {
          i.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString(""format-search-agent-results""),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString(""search-agent-no-entries""));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,""SUCCEED_LIST_AGENTS"",params);
  }
 catch (  IdRepoException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}",470,16,"handleRequest:HandleResource,",46,0.2664749264717100,Beam
531,"public boolean isFull(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}","public boolean setfull(){
  if (totalExp > 0 && notifications.size() >= totalExp) {
    return true;
  }
  return false;
}",29,3,"isFull:setfull,maxSize:totalExp,",26,0.10387035608291600,Beam
532,"private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){
  byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumKeyEx1(int hKey,int buildCaseIndex,int maxKeyLength){
  byte[] result=WindowsRegEnumKeyEx(hKey,buildCaseIndex,maxKeyLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,buildCaseIndex,maxKeyLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,9,"subKeyIndex:buildCaseIndex,",530,5.349728802839920,Beam
534,,,17,2,,186,0.8851991852124530,0
535,"private void stretchViewVertically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}","private void stretchViewVertically(View input,int crossSize){
  LayoutParams lp=(LayoutParams)input.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  input.measure(MeasureSpec.makeMeasureSpec(input.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}",79,5,"view:input,",4,0.03575214942296350,Beam
536,"private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}","private void storelastUse(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}",25,1,"storeLastUsed:storelastUse,",15,0.06621850331624350,Beam
537,,,316,15,,2145,10.34060107866920,0
538,,,58,8,,700,3.3284253517786700,0
539,"public static boolean isJavaScriptEnabled(HttpServletRequest request){
  HttpSession session=request.getSession();
  Boolean javaScriptEnabled=(Boolean)session.getAttribute(""javaScriptEnabled"");
  if (javaScriptEnabled != null) {
    return javaScriptEnabled.booleanValue();
  }
  return false;
}
","public static boolean isJavaCodeActive(HttpServletRequest this){
  HttpSession session=this.getSession();
  Boolean javaScriptEnabled=(Boolean)session.getAttribute(""javaScriptEnabled"");
  if (javaScriptEnabled != null) {
    return javaScriptEnabled.booleanValue();
  }
  return false;
}
",50,4,"isJavaScriptEnabled:isJavaCodeActive,request:this,",116,0.5848032514254250,Beam
540,,,106,5,,752,3.932084806760150,0
541,"public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}","public static String[] decodedArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}",110,6,"decodeArray:decodedArray,",10,0.04685747226079310,Beam
542,"@Category(FlakyTest.class) @Test public void test_FPAmetadataFetch(){
  final Host host=Host.getHost(0);
  VM server1=host.getVM(0);
  VM server2=host.getVM(1);
  VM server3=host.getVM(2);
  VM server4=host.getVM(3);
  Boolean simpleFPR=false;
  final int portLocator=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
  final String hostLocator=NetworkUtils.getServerHostName(server1.getHost());
  final String locator=hostLocator + ""["" + portLocator+ ""]"";
  server3.invoke(null);
  try {
    List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q1"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q2"",false,3));
    Integer port1=(Integer)server1.invoke(null);
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q3"",true,3));
    Integer port2=(Integer)server2.invoke(null);
    fpaList.clear();
    createClientWithLocator(hostLocator,portLocator);
    putIntoPartitionedRegionsThreeQs();
    getFromPartitionedRegionsFor3Qs();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    int totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    int currentRedundancy=1;
    verifyMetadata(totalBucketOnServer,currentRedundancy);
    updateIntoSinglePRFor3Qs();
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q4"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q2"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q1"",false,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q3"",false,3));
    Integer port4=(Integer)server4.invoke(null);
    Wait.pause(2000);
    putIntoPartitionedRegions();
    getFromPartitionedRegions();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    server4.invoke(null);
    totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    totalBucketOnServer+=(Integer)server4.invoke(null);
    updateIntoSinglePR();
  }
  finally {
    server3.invoke(null);
  }
}","@Category(FlakyTest.class) @Test public void run(){
  final Host host=Host.getHost(0);
  VM server1=host.getVM(0);
  VM server2=host.getVM(1);
  VM server3=host.getVM(2);
  VM server4=host.getVM(3);
  Boolean simpleFPR=false;
  final int portLocator=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
  final String hostLocator=NetworkUtils.getServerHostName(server1.getHost());
  final String locator=hostLocator + ""["" + portLocator+ ""]"";
  server3.invoke(null);
  try {
    List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q1"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q2"",false,3));
    Integer port1=(Integer)server1.invoke(null);
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q3"",true,3));
    Integer port2=(Integer)server2.invoke(null);
    fpaList.clear();
    createClientWithLocator(hostLocator,portLocator);
    putIntoPartitionedRegionsThreeQs();
    getFromPartitionedRegionsFor3Qs();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    int totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    int currentRedundancy=1;
    verifyMetadata(totalBucketOnServer,currentRedundancy);
    updateIntoSinglePRFor3Qs();
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q4"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q2"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q1"",false,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q3"",false,3));
    Integer port4=(Integer)server4.invoke(null);
    Wait.pause(2000);
    putIntoPartitionedRegions();
    getFromPartitionedRegions();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    server4.invoke(null);
    totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    totalBucketOnServer+=(Integer)server4.invoke(null);
    updateIntoSinglePR();
  }
  finally {
    server3.invoke(null);
  }
}",483,11,"test_FPAmetadataFetch:run,",21,0.6374097108840940,Beam
543,,,14,2,,95,0.4492516358693440,0
544,,,14,1,,19,0.06093233426411950,0
545,"public static boolean isAttribute(Object objValue){
  if (objValue instanceof String) {
    String stringValue=(String)objValue;
    if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {
      return true;
    }
  }
  return false;
}
","public static boolean areValue(Object stringVal){
  if (stringVal instanceof String) {
    String stringValue=(String)stringVal;
    if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {
      return true;
    }
  }
  return false;
}
",50,3,"isAttribute:areValue,objValue:stringVal,",120,0.7019345959027610,Beam
546,"public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}","public static void renderFlattenedAnnot(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}",666,10,"renderFlattenedAnnotation:renderFlattenedAnnot,",115,0.7339401801427210,Beam
547,"void onItemDismissed(final int position){
  final T removed=mData.get(position);
  final boolean wasRemoved=remove(position);
  if (wasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(removed,position);
  }
}
","void onItemDismassued(final int address){
  final T Removing=mData.get(address);
  final boolean becameAdded=remove(address);
  if (becameAdded && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(Removing,address);
  }
}
",48,6,"onItemDismissed:onItemDismassued,position:address,wasRemoved:becameAdded,removed:Removing,",636,4.448245060443880,Beam
548,"public void ensureCapacity(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}","public void enssureCompSpace(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}",73,6,"ensureCapacity:enssureCompSpace,",22,0.275902533531189,Beam
549,"static long checkPreambleSize(Memory mem){
  final long cap=mem.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=mem.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return pre0;
}","static long checkPrambleLength(Memory memory){
  final long cap=memory.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=memory.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int covered=Math.max(preLongs << 3,8);
  if (cap < covered) {
    throwNotBigEnough(cap,covered);
  }
  return pre0;
}",91,6,"checkPreambleSize:checkPrambleLength,mem:memory,required:covered,",244,3.1925801356633500,Beam
550,"public Object pack(){
  if (collection) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}
","public Object packing(){
  if (collection) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}
",68,7,"pack:packing,",6,0.025804245471954300,Beam
551,"public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  setMBeanServer(server);
  if (name == null) {
    name=new ObjectName(server.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}
","public ObjectName preRegister(MBeanServer connection,ObjectName service) throws Exception {
  setMBeanServer(connection);
  if (service == null) {
    service=new ObjectName(connection.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=service;
  return this.mletObjectName;
}
",56,3,"server:connection,name:service,",88,0.388241986433665,Beam
552,,,11,2,,249,2.1110459248224900,0
553,"public static double max(double[] data){
  double max=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(max) || data[i] > max)     max=data[i];
  }
  return max;
}","public static double right(double[] data){
  double right=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(right) || data[i] > right)     right=data[i];
  }
  return right;
}",77,3,"max:right,",39,0.204509170850118,Beam
554,"private void drawArc(Canvas canvas){
  if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) {
    mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed;
    if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) {
      mnIndeterminateStartPosition=0;
    }
    Rect currRect=new Rect();
    getLocalVisibleRect(currRect);
    float nRingBoundaryInner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2);
    mArcRect.set(mnViewCenter - nRingBoundaryInner,mnViewCenter - nRingBoundaryInner,mnViewCenter + nRingBoundaryInner,mnViewCenter + nRingBoundaryInner);
    mPaint.setColor(mArcColor);
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeWidth(mnArcWidth);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
    canvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint);
  }
}","private void drawArc(Canvas calvas){
  if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) {
    mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed;
    if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) {
      mnIndeterminateStartPosition=0;
    }
    Rect currRect=new Rect();
    getLocalVisibleRect(currRect);
    float nRingBoundaryInner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2);
    mArcRect.set(mnViewCenter - nRingBoundaryInner,mnViewCenter - nRingBoundaryInner,mnViewCenter + nRingBoundaryInner,mnViewCenter + nRingBoundaryInner);
    mPaint.setColor(mArcColor);
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeWidth(mnArcWidth);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
    calvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint);
  }
}",154,17,"canvas:calvas,",3,0.025715764363606800,Beam
555,"private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}
","private void myAdd(LinkedList<Integer> lb,int i){
  lb.add(i);
}
",22,3,"l:lb,",38,0.21377633412679000,Beam
556,,,54,5,,1322,6.772355802853900,0
557,"private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
","private String replaceSafix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
",74,5,"replaceSuffix:replaceSafix,",36,0.18264921506245900,Beam
558,,,122,10,,3205,16.180706954002400,0
559,,,90,5,,922,5.03845340013504,0
561,,,30,4,,450,1.5982542117436700,0
562,"public static synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (!listeners.contains(l)) {
    listeners.add(l);
  }
}
","public static synchronized void addPropertyChangeListener(PropertyChangeListener sl){
  if (!listeners.contains(sl)) {
    listeners.add(sl);
  }
}
",30,3,"l:sl,",21,0.13009823560714700,Beam
563,"public Class<?> loadClass(String name) throws ClassNotFoundException {
  return Class.forName(name);
}
","public Class<?> importFunction(String key) throws ClassNotFoundException {
  return Class.forName(key);
}
",22,2,"name:key,loadClass:importFunction,",95,0.46976414521535200,Beam
564,"final public void println(String v){
  try {
    _out.println(v);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void pipe(String v){
  try {
    _out.pipe(v);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",44,5,"println:pipe,",17,0.06762993335723880,Beam
565,"public String rightStr(String str,int length){
  return str.substring(Math.max(0,str.length() - length));
}","public String leftExt(String str,int split){
  return str.substring(Math.max(0,str.split() - split));
}",33,3,"rightStr:leftExt,length:split,",196,0.8055020650227860,Beam
566,"public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){
  Rectangle bounds=c.getBounds();
  check(bounds);
  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);
}
","public void paintButton(Graphics g,JComponent c,int x,int y,int w,int h){
  Rectangle bounds=c.getBounds();
  check(bounds);
  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);
}
",71,9,"paintRect:paintButton,",192,1.0368929386138900,Beam
567,"public void treeExpanded(TreeExpansionEvent event){
  inspectorWindow.updateView(Director.ALL);
}
","public void treeComanded(TreeExpansionEvent type){
  inspectorWindow.updateView(Director.ALL);
}
",18,3,"treeExpanded:treeComanded,event:type,",49,0.29452566703160600,Beam
568,"public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}","public static TestResult execjavAC(String toCopilation,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCopilation);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}",220,12,"execJavac:execjavAC,toCompile:toCopilation,",177,0.9092656175295510,Beam
569,"protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","protected synchronized void written(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",58,4,"write:written,",74,0.3458217144012450,Beam
570,,,57,4,,448,2.456882627805070,0
571,,,18,2,,267,1.0865275541941300,0
572,,,102,5,,1017,4.09867893854777,0
573,,,26,4,,115,0.40021572113037100,0
574,"public static void resetContext(){
  contexts.set(null);
}
","public static void registerContext(){
  contexts.set(null);
}
",15,2,"resetContext:registerContext,",6,0.019237852096557600,Beam
575,"private static int loadBuildNumber(Context context,PackageManager packageManager){
  try {
    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
    Bundle metaData=appInfo.metaData;
    if (metaData != null) {
      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e(""Exception thrown when accessing the application info:"");
    e.printStackTrace();
  }
  return 0;
}","private static int getBuildIndex(Context context,PackageManager packageManager){
  try {
    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
    Bundle metaData=appInfo.metaData;
    if (metaData != null) {
      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e(""Exception thrown when accessing the application info:"");
    e.printStackTrace();
  }
  return 0;
}",84,6,"loadBuildNumber:getBuildIndex,",9,0.043915112813313800,Beam
576,"public void clear(){
  m_Model.clear();
  setButtons(null);
}
","public void load(){
  m_Model.load();
  setButtons(null);
}
",18,2,"clear:load,",5,0.022911020119984900,Beam
577,"public static boolean createNewFile(File targetFile){
  if (targetFile.exists())   targetFile.delete();
  try {
    return targetFile.createNewFile();
  }
 catch (  IOException e) {
    return false;
  }
}
","public static boolean createnewFolder(File targetFile){
  if (targetFile.exists())   targetFile.delete();
  try {
    return targetFile.createnewFolder();
  }
 catch (  IOException e) {
    return false;
  }
}
",44,2,"createNewFile:createnewFolder,",51,0.23274136781692500,Beam
578,"protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
","protected void addFieldPathTrans(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
",95,7,"addFieldNameTranslation:addFieldPathTrans,",138,0.9061685125033060,Beam
579,"private void populateNavDrawer(){
  mNavDrawerItems.clear();
  mNavDrawerItems.add(NAVDRAWER_ITEM_HOME);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_FOLLOWING);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_SHOTS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_BUCKETS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_PROJECTS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_TEAMS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_LIKES);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SETTINGS);
  createNavDrawerItems();
}
","private void populatenavdrawler(){
  mNavPullerItems.clear();
  mNavPullerItems.add(NAVDRAWER_ITEM_HOME);
  mNavPullerItems.add(NAVDRAWER_ITEM_SEPARATOR);
  mNavPullerItems.add(NAVDRAWER_ITEM_MY_FOLLOWING);
  mNavPullerItems.add(NAVDRAWER_ITEM_MY_SHOTS);
  mNavPullerItems.add(NAVDRAWER_ITEM_MY_BUCKETS);
  mNavPullerItems.add(NAVDRAWER_ITEM_MY_PROJECTS);
  mNavPullerItems.add(NAVDRAWER_ITEM_MY_TEAMS);
  mNavPullerItems.add(NAVDRAWER_ITEM_MY_LIKES);
  mNavPullerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);
  mNavPullerItems.add(NAVDRAWER_ITEM_SETTINGS);
  createNavDrawerItems();
}
",87,2,"populateNavDrawer:populatenavdrawler,mNavDrawerItems:mNavPullerItems,",66,0.5387004415194190,Beam
581,,,50,3,,203,0.7533297260602320,0
582,"@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}
","@Nullable private static Bitmap extstripScreenshot(Bitmap source,int width,int height){
  return extstripScreenshot(source,width,height,OPTIONS_NONE);
}
",30,4,"extractThumbnail:extstripScreenshot,",82,0.38457423051198300,Beam
583,,,20,2,,156,0.8494256258010860,0
584,"public void write(final int b) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)b;
  m_bytesWritten++;
}","public void flush(final int eb) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)eb;
  m_bytesWritten++;
}",112,14,"write:flush,b:eb,",77,0.30796593030293800,Beam
585,"@Deprecated public static String Collection2String(Collection<?> in,String separator){
  if (in == null) {
    return null;
  }
  return Iterator2String(in.iterator(),separator);
}","@Deprecated public static String Iterator2Number(Collection<?> circ,String separment){
  if (circ == null) {
    return null;
  }
  return Iterator2String(circ.iterator(),separment);
}",41,3,"in:circ,Collection2String:Iterator2Number,separator:separment,",419,2.1110552668571500,Beam
586,"public EncoderTestSuiteBuilder valid(int min,int max){
  _valid.set(min,max + 1);
  _invalid.clear(min,max + 1);
  _encoded.clear(min,max + 1);
  return this;
}","public EncoderTestSuiteBuilder unique(int address,int path){
  _valid.set(address,path + 1);
  _invalid.clear(address,path + 1);
  _decrypted.clear(address,path + 1);
  return this;
}",48,6,"valid:unique,min:address,max:path,_encoded:_decrypted,",833,5.652954765160880,Beam
587,,,17,3,,403,1.7937984267870600,0
588,"public void init() throws Exception {
  loadParameterFromZK();
  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);
  _log.info(""Max invalid login attempts from the same client IP: {}"",_maxAuthnLoginAttemtsCount);
  _log.info(""Life time in minutes of invalid login records for a client IP: {}"",_maxAuthnLoginAttemtsLifeTimeInMins);
  _log.info(""Cleanup thread schedule interval: {} minutes"",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);
}
","public void activate() throws Exception {
  loadParameterFromZK();
  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);
  _log.info(""Max invalid login attempts from the same client IP: {}"",_maxAuthnLoginAttemtsCount);
  _log.info(""Life time in minutes of invalid login records for a client IP: {}"",_maxAuthnLoginAttemtsLifeTimeInMins);
  _log.info(""Cleanup thread schedule interval: {} minutes"",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);
}
",58,5,"init:activate,",15,0.07793106238047280,Beam
589,"protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}","protected Expression findOpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findOpression(leftSide);
      Expression rightExpression=findOpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findOpression(leftSide);
      Expression rightExpression=findOpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}",262,8,"findExpression:findOpression,",12,0.11404603719711300,Beam
590,"public void freeObject(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}","public void FreePool(int ip){
  if (cacheId == ip) {
    cacheId=-1;
    cache=null;
  }
  map.remove(ip);
}",33,5,"freeObject:FreePool,id:ip,",77,0.2889365633328760,Beam
591,"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}","@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocaStyle(DccThrottle k,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocaStyle(k,blockLength,speed);
}",130,11,"changeLocoSpeed:changeLocaStyle,t:k,",345,1.8507685859998100,Beam
593,"private Token toASIToken(ILeafNode leaf){
  if (leaf.isHidden()) {
    return newSemicolonToken(leaf);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenType == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,leaf.getText());
      }
      if (leaf.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenType,leaf.getText());
      }
      next=new CommonToken(semicolonTokenType,leaf.getText());
      return new CommonToken(tokenType,leaf.getText());
    }
 else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      next=new CommonToken(tokenType);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());
    }
 else {
      return newSemicolonToken(leaf);
    }
  }
}
","private Token parse(ILeafNode layout){
  if (layout.isHidden()) {
    return newSemicolonToken(layout);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenTy=tokenTypeMapper.getInternalTokenType(layout);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenTy == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,layout.getText());
      }
      if (layout.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenTy,layout.getText());
      }
      next=new CommonToken(semicolonTokenType,layout.getText());
      return new CommonToken(tokenTy,layout.getText());
    }
 else     if (layout.getGrammarElement() == rightCurlyInBlock || layout.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenTy=tokenTypeMapper.getInternalTokenType(layout);
      next=new CommonToken(tokenTy);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),layout.getText());
    }
 else {
      return newSemicolonToken(layout);
    }
  }
}
",206,11,"toASIToken:parse,leaf:layout,tokenType:tokenTy,",305,2.0150004982948300,Beam
594,"private <T>BindingAmp<T> findObjectBinding(Key<T> key){
  Objects.requireNonNull(key);
  if (key.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0]));
}","private <T>BindingAmp<T> findClassBapping(Key<T> lock){
  Objects.requireNonNull(lock);
  if (lock.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,lock.qualifiers()[0]));
}",70,2,"findObjectBinding:findClassBapping,key:lock,",182,1.6457903742790200,Beam
595,,,156,7,,1831,8.178532286485040,0
596,,,33,2,,135,0.537932554880778,0
597,,,78,4,,484,1.9148921092351300,0
598,"public void enableOverview(boolean b){
  if (overviewItem != null) {
    overviewItem.setEnabled(b);
  }
}
","public void EnableView(boolean status){
  if (overviewItem != null) {
    overviewItem.setEnabled(status);
  }
}
",24,3,"enableOverview:EnableView,b:status,",113,0.47449076573054000,Beam
599,,,141,8,,1801,9.060750838120780,0
600,"public boolean hasStatus(final StatusID status){
  return statuses.contains(status);
}
","public boolean hasSuccess(final StatusID index){
  return statuss.contains(index);
}
",18,3,"status:index,hasStatus:hasSuccess,statuses:statuss,",284,1.2574563423792500,Beam
601,,,33,3,,88,0.46302565733591700,0
602,"protected void clearResult(){
  md.clearResult();
  localizationResult.setText(""<HTML>Result: <BR><BR><BR></HTML>"");
}
","protected void resetReturn(){
  md.resetReturn();
  localizationResponse.setText(""<HTML>Result: <BR><BR><BR></HTML>"");
}
",20,3,"clearResult:resetReturn,localizationResult:localizationResponse,",55,0.20063159068425500,Beam
603,"public ThreadRegisterValues(final ThreadRegisters values){
  m_tid=values.getTid();
  for (  final RegisterValue value : values.getRegisters()) {
    m_values.add(new Register(value));
  }
}
","public ThreadProcessTypes(final ThreadRegisters items){
  m_Tids=items.getTid();
  for (  final RegisterValue value : items.getRegisters()) {
    m_values.add(new Register(value));
  }
}
",42,5,"ThreadRegisterValues:ThreadProcessTypes,values:items,m_tid:m_Tids,",275,1.0516398787498500,Beam
604,"public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
","public void advance(int essionTimeout) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,essionTimeout);
  testElements.add(new ContinuationElement(essionTimeout));
}
",37,3,"sessionNumber:essionTimeout,CONT:advance,",59,0.2244470477104190,Beam
605,"private boolean tryQueueCurrentBuffer(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}","private boolean onqueueQueueFuture(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}",101,9,"tryQueueCurrentBuffer:onqueueQueueFuture,",23,0.1759400447209680,Beam
606,"public void addDefinition(ICOSDefinition cosDef) throws UMSException {
  if (!(cosDef instanceof DirectCOSDefinition)) {
    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);
    throw new UMSException(msg);
  }
  String[] cosAttributes=cosDef.getCOSAttributes();
  AbstractCollection aList=(AbstractCollection)Arrays.asList(ICOSDefinition.qualifiers);
  for (int i=0; i < cosAttributes.length; i++) {
    String cosAttribute=null;
    String qualifier=null;
    StringTokenizer st=new StringTokenizer(cosAttributes[i]);
    if (st.hasMoreTokens()) {
      cosAttribute=st.nextToken();
    }
    if (cosAttribute == null) {
      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);
      throw new UMSException(msg);
    }
    if (st.hasMoreTokens())     qualifier=st.nextToken();
    if (qualifier == null) {
      qualifier=ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT];
      cosDef.removeCOSAttribute(cosAttribute);
      cosDef.addCOSAttribute(cosAttribute,ICOSDefinition.DEFAULT);
    }
    if (!aList.contains(qualifier)) {
      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);
      throw new UMSException(msg);
    }
  }
  PersistentObject po=(PersistentObject)cosDef;
  _parentObject.addChild(po);
}","public void removeProvider(ICOSDefinition sinDecl) throws UMSException {
  if (!(sinDecl instanceof DirectCOSDefinition)) {
    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);
    throw new UMSException(msg);
  }
  String[] cosAttributes=sinDecl.getCOSAttributes();
  AbstractCollection aList=(AbstractCollection)Arrays.asList(ICOSDefinition.qualifiers);
  for (int i=0; i < cosAttributes.length; i++) {
    String cosField=null;
    String qualifier=null;
    StringTokenizer st=new StringTokenizer(cosAttributes[i]);
    if (st.hasMoreTokens()) {
      cosField=st.nextToken();
    }
    if (cosField == null) {
      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);
      throw new UMSException(msg);
    }
    if (st.hasMoreTokens())     qualifier=st.nextToken();
    if (qualifier == null) {
      qualifier=ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT];
      sinDecl.removeCOSAttribute(cosField);
      sinDecl.addCOSAttribute(cosField,ICOSDefinition.DEFAULT);
    }
    if (!aList.contains(qualifier)) {
      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);
      throw new UMSException(msg);
    }
  }
  PersistentObject po=(PersistentObject)sinDecl;
  _parentObject.addChild(po);
}",251,12,"cosDef:sinDecl,addDefinition:removeProvider,cosAttribute:cosField,",690,3.2994681437810300,Beam
607,"public Builder deleteDisplayName(){
  deleteFields.add(""displayName"");
  return this;
}
","public Builder listDisplayName(){
  deleteFieldes.add(""displayName"");
  return this;
}
",17,2,"deleteDisplayName:listDisplayName,deleteFields:deleteFieldes,",43,0.17208581765492800,Beam
608,"@Override public void addValue(double value,double weight){
  m_WeightedSum+=value * weight;
  m_WeightedSumSquared+=value * value * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(value) == null) {
    m_TM.put(value,weight);
  }
 else {
    m_TM.put(value,m_TM.get(value) + weight);
  }
}
","@Override public void addValue(double cost,double work){
  m_WeightedSum+=cost * work;
  m_WeightedSumSquared+=cost * cost * work;
  m_SumOfWeights+=work;
  if (m_TM.get(cost) == null) {
    m_TM.put(cost,work);
  }
 else {
    m_TM.put(cost,m_TM.get(cost) + work);
  }
}
",73,7,"value:cost,weight:work,",129,0.6417521635691320,Beam
609,"public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}","public boolean controlUnitTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}",325,17,"controlRunTrain:controlUnitTrain,",9,0.0621737003326416,Beam
610,"private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
","private void free(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
",48,5,"release:free,",3,0.021869119008382200,Beam
611,,,133,9,,2240,8.911176868279780,0
612,"public static void checkValid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
","public static void checkInvalid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
",41,3,"checkValid:checkInvalid,",3,0.01030189593633020,Beam
614,,,24,2,,253,1.1719028234481800,0
615,"public byte[] encode1(final String s){
  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());
  final int nwritten=uc.encode(s,tmp);
  final int npack=LongPacker.getByteLength(nwritten);
  final byte[] a=new byte[npack + nwritten];
  final DataOutputBuffer dob=new DataOutputBuffer(0,a);
  try {
    dob.packLong(nwritten);
    dob.append(tmp.array(),0,tmp.pos());
    return a;
  }
  finally {
    try {
      dob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","public byte[] enodeOne(final String storage){
  final ByteArrayBuffer tmp=new ByteArrayBuffer(storage.length());
  final int nwritten=uc.encode(storage,tmp);
  final int npack=LongPacker.getByteLength(nwritten);
  final byte[] a=new byte[npack + nwritten];
  final DataOutputBuffer dob=new DataOutputBuffer(0,a);
  try {
    dob.packLong(nwritten);
    dob.append(tmp.array(),0,tmp.pos());
    return a;
  }
  finally {
    try {
      dob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",134,9,"s:storage,encode1:enodeOne,",77,0.36907666524251300,Beam
616,"public static byte[] readData(final URL url) throws IOException {
  try (InputStream input=url.openStream()){
    return readData(input);
  }
 }
","public static byte[] getText(final URL address) throws IOException {
  try (InputStream input=address.openStream()){
    return getText(input);
  }
 }
",34,3,"readData:getText,url:address,",64,0.26572250525156700,Beam
617,"protected void addHeaders(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty(""Authorization"",authorization);
  }
}
","protected void addHEADheaders(HttpURLConnection image,String tenientId){
  if (tenientId == null) {
    tenientId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenientId != null) {
    image.setRequestProperty(HAWKULAR_TENANT,tenientId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    image.setRequestProperty(""Authorization"",authorization);
  }
}
",106,9,"addHeaders:addHEADheaders,connection:image,tenantId:tenientId,",496,3.3167739311854000,Beam
618,,,137,10,,1382,4.167793182531990,0
619,"private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){
  Date podcastPublicationDate=podcast.getPublicationDate();
  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));
  if (episodePubDateIsMoreRecent) {
    podcast.setPublicationDate(episode.getPublicationDate());
    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());
  }
}
","private void updatePodcastPublicationDateAndLastMediumUrl(Episode episode,Podcast podcast){
  Date podcastPublicationDate=podcast.getPublicationDate();
  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));
  if (episodePubDateIsMoreRecent) {
    podcast.setPublicationDate(episode.getPublicationDate());
    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());
  }
}
",77,5,"updatePodcastPublicationDateAndLastMediaUrl:updatePodcastPublicationDateAndLastMediumUrl,",6,0.04335896571477250,Beam
620,"@SuppressLint(""NewApi"") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}","@SuppressLint(""NewApi"") @Nullable public static Drawable infolatten(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}",99,5,"inflate:infolatten,",22,0.09375738302866620,Beam
621,,,60,5,,637,3.419251279036200,0
622,"public boolean retainAll(AbstractFloatList other){
  if (other.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=other.size() - 1;
  int j=0;
  for (int i=0; i < size; i++) {
    if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}","public boolean retainsall(AbstractFloatList other){
  if (other.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=other.size() - 1;
  int j=0;
  for (int i=0; i < size; i++) {
    if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}",116,7,"retainAll:retainsall,",39,0.5123808185259500,Beam
623,"EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){
  EdgeMap<Block> loops=new EdgeMap<Block>();
  for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) {
    verboseStatus(""backedge "" + s);
    Block h=s.to;
    Set<Block> loop=loops.get(h);
    Set<Block> work=new TreeSet<Block>();
    for (    Edge p : pred.get(h)) {
      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {
        loop.add(p.from);
        work.add(p.from);
      }
    }
    while (!work.isEmpty()) {
      Block x=getBlock(work);
      for (      Edge p : pred.get(x)) {
        if (p.from != h && !loop.contains(p.from)) {
          loop.add(p.from);
          work.add(p.from);
        }
      }
    }
  }
  return loops;
}
","EdgeMap<Block> findLOos(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){
  EdgeMap<Block> loops=new EdgeMap<Block>();
  for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) {
    verboseStatus(""backedge "" + s);
    Block h=s.to;
    Set<Block> loop=loops.get(h);
    Set<Block> work=new TreeSet<Block>();
    for (    Edge p : pred.get(h)) {
      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {
        loop.add(p.from);
        work.add(p.from);
      }
    }
    while (!work.isEmpty()) {
      Block x=getBlock(work);
      for (      Edge p : pred.get(x)) {
        if (p.from != h && !loop.contains(p.from)) {
          loop.add(p.from);
          work.add(p.from);
        }
      }
    }
  }
  return loops;
}
",247,12,"findLoops:findLOos,",9,0.07525468269983930,Beam
624,"public void saveBootProp() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propFile=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(propFile);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
","public void saveConfigProperty() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String configFile=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(configFile);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
",60,6,"saveBootProp:saveConfigProperty,propFile:configFile,",123,0.46770041386286400,Beam
625,"public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){
  super(selectionModifiers);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
","public PickingGraphButtonModule(int selectionModifiers,int addToSelectedModifiers){
  super(selectionModifiers);
  this.addToSelectedModifiers=addToSelectedModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
",44,3,"PickingGraphMousePlugin:PickingGraphButtonModule,addToSelectionModifiers:addToSelectedModifiers,",103,0.46832799911499000,Beam
626,,,49,3,,476,2.347491935888930,0
627,"private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}","private static Key CreateDESkey(byte[] bytes,int i){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,i,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}",273,5,"createDESKey:CreateDESkey,offset:i,",163,0.903036642074585,Beam
628,"public void expandAll(){
  cancelEditing();
  final TreeModel tm=getModel();
  final Object root=tm.getRoot();
  if (root != null) {
    expandAllPaths(new TreePath(root),tm);
  }
}
","public void expansionall(){
  cancelEditing();
  final TreeModel tm=getModel();
  final Object root=tm.getRoot();
  if (root != null) {
    expandAllPaths(new TreePath(root),tm);
  }
}
",48,3,"expandAll:expansionall,",18,0.08581399917602540,Beam
629,"public Namespace(PrincipalUser creator,String qualifier,PrincipalUser owner,Set<PrincipalUser> users){
  super(creator);
  setQualifier(qualifier);
  setOwner(owner);
  if (users != null && !users.isEmpty()) {
    setUsers(users);
  }
  addUser(owner);
}
","public Namepace(PrincipalUser editor,String identifiers,PrincipalUser staff,Set<PrincipalUser> users){
  super(editor);
  setQualifier(identifiers);
  setOwner(staff);
  if (users != null && !users.isEmpty()) {
    setUsers(users);
  }
  addUser(staff);
}
",60,5,"Namespace:Namepace,creator:editor,qualifier:identifiers,owner:staff,",1321,7.172988752524060,Beam
631,"public int compareTo(CharBuffer otherBuffer){
  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();
  int thisPos=position;
  int otherPos=otherBuffer.position;
  char thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte=get(thisPos);
    otherByte=otherBuffer.get(otherPos);
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return remaining() - otherBuffer.remaining();
}","public int Comparesto(CharBuffer anotherBuff){
  int compareRemaining=(remaining() < anotherBuff.remaining()) ? remaining() : anotherBuff.remaining();
  int thisPos=position;
  int otherPos=anotherBuff.position;
  char thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte=get(thisPos);
    otherByte=anotherBuff.get(otherPos);
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return remaining() - anotherBuff.remaining();
}",113,8,"otherBuffer:anotherBuff,compareTo:Comparesto,",79,0.3999708334604900,Beam
632,"private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
","private Element createendPath(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
",119,7,"createEndPoint:createendPath,",19,0.0754653533299764,Beam
633,,,31,5,,460,2.1306809385617600,0
634,"public void registerSensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}","public void registerConnector(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}",125,9,"registerSensor:registerConnector,",4,0.01674076318740850,Beam
635,,,37,1,,63,0.2682984431584680,0
638,"public static void pushEncryptedMessage(final TextSecureEnvelope envelope){
  while (true) {
    try {
      queue.put(envelope);
      return;
    }
 catch (    final InterruptedException e) {
    }
  }
}
","public static void pushEncryptionBody(final TextSecureEnvelope envelope){
  while (true) {
    try {
      queue.put(envelope);
      return;
    }
 catch (    final InterruptedException e) {
    }
  }
}
",37,3,"pushEncryptedMessage:pushEncryptionBody,",49,0.24701309601465900,Beam
639,"@Override public boolean equals(Object x,Object y) throws HibernateException {
  if (x == null) {
    return y == null;
  }
  return x.equals(y);
}
","@Override public boolean Equates(Object x,Object y) throws HibernateException {
  if (x == null) {
    return y == null;
  }
  return x.Equates(y);
}
",37,3,"equals:Equates,",15,0.0728996753692627,Beam
640,,,89,4,,650,4.891721630096440,0
641,"public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}","public File CreateNextFile(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}",113,6,"createNewFolder:CreateNextFile,",16,0.0970263401667277,Beam
642,"public boolean addNode(Lop node){
  if (nodes.contains(node))   return false;
  nodes.add(node);
  return true;
}
","public boolean createElement(Lop one){
  if (nodes.contains(one))   return false;
  nodes.add(one);
  return true;
}
",31,3,"addNode:createElement,node:one,",65,0.31572853326797500,Beam
643,"public static Byte[] valuesOf(byte[] array){
  Byte[] dest=new Byte[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Byte.valueOf(array[i]);
  }
  return dest;
}","public static Byte[] valueOf(byte[] result){
  Byte[] dest=new Byte[result.length];
  for (int i=0; i < result.length; i++) {
    dest[i]=Byte.valueOf(result[i]);
  }
  return dest;
}",63,4,"valuesOf:valueOf,array:result,",59,0.31474098364512100,Beam
644,"public void rootRemoved(ISVNRepositoryLocation root){
  Iterator it=listeners.iterator();
  while (it.hasNext()) {
    IRepositoryListener listener=(IRepositoryListener)it.next();
    listener.repositoryRemoved(root);
  }
}
","public void registryLost(ISVNRepositoryLocation root){
  Iterator it=listeners.iterator();
  while (it.hasNext()) {
    IRepositoryListener listener=(IRepositoryListener)it.next();
    listener.repositoryRemoved(root);
  }
}
",47,5,"rootRemoved:registryLost,",37,0.22207932869593300,Beam
645,"public static boolean isMiddleMouseButton(MouseEvent anEvent){
  return ((anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON2);
}","public static boolean isMiddleButtonButton(MouseEvent annEvents){
  return ((annEvents.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || annEvents.getButton() == MouseEvent.BUTTON2);
}",37,2,"anEvent:annEvents,isMiddleMouseButton:isMiddleButtonButton,",154,1.0805807073911000,Beam
646,"private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
","private boolean announces(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
",233,14,"announce:announces,",36,0.15341269572575900,Beam
647,"public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
","public ArrayList<ConstraintWidget> findTwidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
",154,12,"findWidgets:findTwidgets,",127,0.6369264761606850,Beam
648,"public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}","public void release(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}",178,12,"commit:release,",8,0.03761382897694910,Beam
649,"public static PlainText plain(short text){
  return plain(Integer.toString(text));
}
","public static PlainText span(short dest){
  return span(Integer.toString(dest));
}
",21,2,"plain:span,text:dest,",121,0.5038053433100380,Beam
650,"public double adjustedPow10(double val){
  boolean negFlag=(val < 0.0);
  if (negFlag) {
    val=-val;
  }
  double res;
  if (val < 1.0) {
    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,val);
  }
  return negFlag ? (-res) : res;
}","public double adjustedPow10(double value){
  boolean negFlag=(value < 0.0);
  if (negFlag) {
    value=-value;
  }
  double res;
  if (value < 1.0) {
    res=(Math.pow(10,value + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,value);
  }
  return negFlag ? (-res) : res;
}",83,4,"val:value,",20,0.13446461757024100,Beam
651,"private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}","private TransportNetwork checkuncached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}",252,12,"checkCached:checkuncached,",9,0.05539478063583370,Beam
652,"public MessageCapture(final Logger logger,final boolean captureEntity){
  this(logger,captureEntity,false);
}
","public MessageCapture(final Logger Logged,final boolean capturingentity){
  this(Logged,capturingentity,false);
}
",22,3,"captureEntity:capturingentity,logger:Logged,",96,0.4604518413543700,Beam
653,,,68,5,,762,2.674751023451490,0
654,"private double calculateEntropy(double... masses){
  double res=0;
  for (  double d : masses) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}","private double calculativeEntrez(double... masses){
  double res=0;
  for (  double d : masses) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}",48,5,"calculateEntropy:calculativeEntrez,",17,0.09028493165969850,Beam
655,"private void createMissingValues(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}","private void createMissingAttributes(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}",165,7,"createMissingValues:createMissingAttributes,",4,0.026413702964782700,Beam
656,"public long inactiveTimeMillis(){
  return System.currentTimeMillis() - lastTimeMillis;
}
","public long inactiveTimemillIs(){
  return System.currentTimeMillis() - lastTimeElli;
}
",16,2,"inactiveTimeMillis:inactiveTimemillIs,lastTimeMillis:lastTimeElli,",45,0.1990962545077010,Beam
658,,,36,2,,224,1.4921399195989000,0
659,"public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}","public String subring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.subring(start);
  }
  return subject.subring(start,stop);
}",50,4,"substring:subring,",96,0.5227865020434060,Beam
660,,,255,22,,847,5.285418526331580,0
661,"public File makeAcceptable(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
","public File makeacceptible(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
",39,3,"makeAcceptable:makeacceptible,",13,0.11307806173960400,Beam
663,"public boolean needsReload(File file){
  return fFilesToReoad.contains(file);
}
","public boolean needReload(File data){
  return fFilesToReoad.contains(data);
}
",17,3,"needsReload:needReload,file:data,",71,0.3314278562863670,Beam
664,"protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}","protected boolean iscompetitive(Taxa taxb,List<Taxon> availabletaxa){
  for (int i=0; i < taxb.getTaxonCount(); i++) {
    Taxon taxon=taxb.getTaxon(i);
    if (!availabletaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}",63,5,"availableTaxa:availabletaxa,taxa:taxb,isCompatible:iscompetitive,",307,1.7274828513463300,Beam
665,"public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){
  final String alias2=SqlValidatorUtil.getAlias(node,-1);
  final String alias3=alias2 != null ? alias2 : ""t"";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;
  return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));
}","public Result select(SqlNode node,Collection<Clause> clacuss,RelNode rel){
  final String alias2=SqlValidatorUtil.getAlias(node,-1);
  final String alias3=alias2 != null ? alias2 : ""t"";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;
  return new Result(node,clacuss,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));
}",110,9,"result:select,clauses:clacuss,",162,0.6539058128992720,Beam
666,"public void addRole(String role){
  if (role != null) {
    roles.add(role);
  }
}
","public void addedRole(String type){
  if (type != null) {
    roles.add(type);
  }
}
",24,3,"role:type,addRole:addedRole,",58,0.2473456104596460,Beam
667,"public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void performLoadAS(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",55,6,"performSaveAs:performLoadAS,",59,0.49919190009435000,Beam
668,,,60,5,,693,34.073473461469000,0
669,"@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}
","@Override public SelectableChannel selectabilityStream(){
  return socketChannel;
}
",12,2,"selectableChannel:selectabilityStream,",7,0.025889643033345500,Beam
670,"@Override protected void commitToInput(){
  JmxBeanSensorAssignment assignment=getInput();
  if (null != assignment) {
    assignment.setDomain(domainText.getText());
    assignment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      assignment.setAttributes(Collections.<String>emptySet());
    }
 else {
      assignment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
","@Override protected void assignAtInput(){
  JmxBeanSensorAssignment assignment=getInput();
  if (null != assignment) {
    assignment.setDomain(domainText.getText());
    assignment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      assignment.setAttributes(Collections.<String>emptySet());
    }
 else {
      assignment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
",88,6,"commitToInput:assignAtInput,",5,0.025326255957285600,Beam
671,,,170,7,,1360,13.989592087268800,0
672,,,160,10,,2040,9.045227487881980,0
674,"private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
","private void saveAndClose(boolean leave){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (leave) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
",130,8,"save:leave,",20,0.07675047318140670,Beam
675,"private void warning(String msg,Throwable th){
  warning(msg);
  th.printStackTrace();
}
","private void breaking(String msg,Throwable th){
  breaking(msg);
  th.printStackTrace();
}
",23,3,"warning:breaking,",65,0.2458856701850890,Beam
676,"private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
","private void captureSameStr(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
",66,5,"captureDifferentString:captureSameStr,",9,0.06297657092412310,Beam
677,"public void collapseTree(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}","public void collapsedRow(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}",34,3,"collapseTree:collapsedRow,",8,0.025135374069213900,Beam
678,,,138,11,,1287,6.761174174149830,0
679,,,72,4,,514,4.673372201124830,0
680,"private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
","private Object requestINners(SimpleObject form,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(form));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(form);
  if (encounter == null) {
    return form;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
",142,9,"createInner:requestINners,post:form,",330,1.5519902229309100,Beam
681,,,51,4,,589,3.2683648387591000,0
682,"public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}","public OsmElement pasteHome(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}",213,10,"pasteFrom:pasteHome,",4,0.048563071091969800,Beam
683,,,26,3,,466,3.2644139766693100,0
685,"protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
","protected HttpURLConnection configureResponse(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
",48,4,"configureRequest:configureResponse,",36,0.13990141153335600,Beam
686,,,75,5,,910,4.68601522843043,0
688,"public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static String enoder(Serializable ob){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(ob);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",81,5,"o:ob,encode:enoder,",49,0.21190181175867700,Beam
689,"public PutIndexTemplateRequest aliases(XContentBuilder source){
  return aliases(source.bytes());
}
","public PutIndexTemplateRequest alias(XContentBuilder source){
  return alias(source.bytes());
}
",19,2,"aliases:alias,",3,0.01610575517018640,Beam
690,"public void send(XTraceReport report){
  outgoing.offer(report);
}
","public void send(XTraceReport feed){
  outgoing.offer(feed);
}
",16,3,"report:feed,",4,0.023527395725250200,Beam
691,"public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}
","public default void addFile(final ContentProvider contentProvider,final String entryType,final EntryInformation EntryManager) throws IOException {
  addFile(contentProvider,entryType,EntryManager,Optional.empty());
}
",36,4,"entryInformation:EntryManager,fileName:entryType,",94,0.4571775515874230,Beam
692,"public void shutdown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
","public void killless(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
",50,5,"shutdown:killless,",6,0.03381557464599610,Beam
693,,,99,5,,738,8.003816171487170,0
694,,,46,4,,321,1.1441047708193500,0
695,,,30,3,,224,1.0963021834691400,0
696,"@RequestMapping(value=""/{bookmarkId}"",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value=""username"") String username,@PathVariable(value=""bookmarkId"") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);
  if (optional.isPresent()) {
    ObjectMapper mapper=new ObjectMapper();
    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);
    Bookmark bookmark=optional.get();
    BeanUtils.populate(bookmark,changeMap);
    bookmark=bookmarksRepository.save(bookmark);
    return new ResponseEntity<>(bookmark,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException(""Bookmark not found id = "" + bookmarkId);
  }
}
","@RequestMapping(value=""/{bookmarkId}"",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editLandmarks(@PathVariable(value=""username"") String username,@PathVariable(value=""bookmarkId"") int bookmarkInfo,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkInfo,username);
  if (optional.isPresent()) {
    ObjectMapper mapper=new ObjectMapper();
    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);
    Bookmark bookmark=optional.get();
    BeanUtils.populate(bookmark,changeMap);
    bookmark=bookmarksRepository.save(bookmark);
    return new ResponseEntity<>(bookmark,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException(""Bookmark not found id = "" + bookmarkInfo);
  }
}
",159,9,"editBookmark:editLandmarks,bookmarkId:bookmarkInfo,",119,1.5943376382192000,Beam
697,"public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}
","public void removePhoto(PhotoEntity phot){
  photos.remove(phot);
}
",16,3,"photo:phot,",27,0.10710437297821000,Beam
698,"public static Map<String,String> allNamespaces(SOAPElement ele){
  Map<String,String> nsList=new TreeMap<String,String>();
  log.trace(""Starting Namespace Lookup in "" + ele.getNodeName());
  allNamespaces(ele,nsList);
  log.trace(""Namespace Lookup done: "" + nsList);
  return nsList;
}
","public static Map<String,String> allRelationspace(SOAPElement ele){
  Map<String,String> nsList=new TreeMap<String,String>();
  log.trace(""Starting Namespace Lookup in "" + ele.getNodeName());
  allRelationspace(ele,nsList);
  log.trace(""Namespace Lookup done: "" + nsList);
  return nsList;
}
",65,4,"allNamespaces:allRelationspace,",17,0.35659642616907800,Beam
699,"public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}","public static double LogPDF(double x,double inv,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - inv) / inv;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}",94,5,"logpdf:LogPDF,mu:inv,",173,2.2719181617101000,Beam
700,"@Override public void closingOK(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}","@Override public void ClCloseOK(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}",97,7,"closingOK:ClCloseOK,",10,0.037242428461710600,Beam
701,"public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
","public String getAsFile(){
  final StringBuilder sth=new StringBuilder();
  sth.append(amount);
  sth.append("" "");
  sth.append(itemName);
  sth.append("" on "");
  sth.append(target);
  return sth.toString();
}
",58,5,"betToString:getAsFile,sb:sth,",36,0.15212758779525800,Beam
702,"public void finishFragments(){
  for (  Fragment comment : closingFragments) {
    finishFragment(comment);
  }
  closingFragments.clear();
}
","public void finishContentings(){
  for (  Fragment comment : closingFragments) {
    finishFragment(comment);
  }
  closingFragments.clear();
}
",27,3,"finishFragments:finishContentings,",11,0.03834218978881840,Beam
703,"public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}","public double[] popy(double px1[]){
  return popY(new double[][]{px1})[0];
}",30,2,"x_:px1,",12,0.050553933779398600,Beam
704,"private static String normalisePath(String path){
  return path.replace('\\\\','/');
}
","private static String normalisePath(String route){
  return route.replace('\\\\','/');
}
",20,2,"path:route,",6,0.03087215026219690,Beam
705,"private String trimUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}","private String trstripUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}",47,2,"trimUrl:trstripUrl,",21,0.07370162804921470,Beam
706,"private void ensureSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}","private void enspectSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}",55,5,"ensureSize:enspectSize,",8,0.10853293339411400,Beam
707,"private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}","private static void insertCommentsOnTree(Node object,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=object.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsOnTree(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      object.addOrphanComment(c);
    }
  }
}",370,14,"insertCommentsInNode:insertCommentsOnTree,node:object,",162,1.0182821830113700,Beam
708,,,118,6,,266,1.4638827562332200,0
709,,,106,7,,265,1.3939719279607100,0
710,"public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){
  Object[] arguments=new Object[args.size()];
  for (int i=0; i < args.size(); i++) {
    arguments[i]=args.get(i);
  }
  return findMethodWithListParameters(service,methodName,arguments);
}","public static Object[] findMethodWithListParameters(Object array,String methodName,List<?> args){
  Object[] arguments=new Object[args.size()];
  for (int i=0; i < args.size(); i++) {
    arguments[i]=args.get(i);
  }
  return findMethodWithListParameters(array,methodName,arguments);
}",78,6,"service:array,",28,0.19296682278315200,Beam
711,,,82,4,,475,24.321774919827800,0
712,"public void showScores(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
","public void showSlorer(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
",20,3,"showScores:showSlorer,",13,0.04941414992014570,Beam
714,,,20,3,,368,1.3799498875935900,0
715,,,30,4,,670,2.3234715263048800,0
716,"public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}
","public boolean storeAccount(String username,String phrase,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,phrase,uri);
  return true;
}
",41,4,"registerUser:storeAccount,password:phrase,",108,0.5729626178741460,Beam
717,"private void parseFirstConsonant(){
  Iterator iter=alFirstConsonants.iterator();
  while (iter.hasNext()) {
    String strFirstCon=(String)iter.next();
    if (strSyllable.startsWith(strFirstCon,iCurPos)) {
      strFirstConsonant=strFirstCon;
      iCurPos+=strFirstCon.length();
      return;
    }
  }
  strFirstConsonant=ZERO;
}
","private void parseFirstCononant(){
  Iterator iter=alFirstConsonants.iterator();
  while (iter.hasNext()) {
    String strFirstCon=(String)iter.next();
    if (strSyllable.startsWith(strFirstCon,iCurPos)) {
      strFirstCononancy=strFirstCon;
      iCurPos+=strFirstCon.length();
      return;
    }
  }
  strFirstCononancy=ZERO;
}
",69,8,"parseFirstConsonant:parseFirstCononant,strFirstConsonant:strFirstCononancy,",341,2.0024165868759200,Beam
718,"@Override public String toString(){
  return getTitle();
}
","@Override public String ToStr(){
  return getTitle();
}
",14,1,"toString:ToStr,",11,0.037868682543436700,Beam
719,,,101,9,,405,1.9730949640274000,0
720,"public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}","public String[] showProduct() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}",188,9,"showVersion:showProduct,",5,0.021812192598978700,Beam
721,"public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}","public void copyfromComment(Change sourcePatch){
  if (sourcePatch.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourcePatch.revision());
  }
  if (sourcePatch.timestamp() != null) {
    Date date=sourcePatch.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}",101,4,"importFromChange:copyfromComment,sourceChange:sourcePatch,",54,0.2074964721997580,Beam
722,,,28,3,,551,2.3223114331563300,0
723,,,76,4,,221,0.8440608223279320,0
724,"public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException {
  DerOutputStream out, scratch;
  byte[] certificateRequestInfo;
  byte[] sig;
  if (encoded != null)   throw new SignatureException(""request is already signed"");
  this.subject=subject;
  scratch=new DerOutputStream();
  scratch.putInteger(BigInteger.ZERO);
  subject.encode(scratch);
  scratch.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(scratch);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  certificateRequestInfo=out.toByteArray();
  scratch=out;
  signature.update(certificateRequestInfo,0,certificateRequestInfo.length);
  sig=signature.sign();
  AlgorithmId algId=null;
  try {
    algId=AlgorithmId.get(signature.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algId.encode(scratch);
  scratch.putBitString(sig);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  encoded=out.toByteArray();
}","public void enodeAndSIGN(X500Name subject,Signature ature) throws CertificateException, IOException, SignatureException {
  DerOutputStream out, scratch;
  byte[] certificateRequestInfo;
  byte[] sig;
  if (encoded != null)   throw new SignatureException(""request is already signed"");
  this.subject=subject;
  scratch=new DerOutputStream();
  scratch.putInteger(BigInteger.ZERO);
  subject.encode(scratch);
  scratch.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(scratch);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  certificateRequestInfo=out.toByteArray();
  scratch=out;
  ature.update(certificateRequestInfo,0,certificateRequestInfo.length);
  sig=ature.sign();
  AlgorithmId algId=null;
  try {
    algId=AlgorithmId.get(ature.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algId.encode(scratch);
  scratch.putBitString(sig);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  encoded=out.toByteArray();
}",219,12,"encodeAndSign:enodeAndSIGN,signature:ature,",345,2.58118017911911,Beam
725,,,16,3,,406,1.769123415152230,0
727,,,456,11,,2647,13.993508545557700,0
728,"public static byte[] readDex(File file) throws IOException {
  return readDex(file.toPath());
}
","public static byte[] formatRecipe(File folder) throws IOException {
  return formatRecipe(folder.toPath());
}
",24,2,"file:folder,readDex:formatRecipe,",104,0.44636318683624300,Beam
729,,,92,6,,936,3.811095384756720,0
730,"public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmURI + "" ""+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}
","public static void external(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmURI + "" ""+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}
",124,7,"register:external,",53,0.2973271369934080,Beam
731,"public void clearOnCentralPositionChangedListener(){
  mOnCentralPositionChangedListeners.clear();
}
","public void clearOnCentralPositionChangeHandler(){
  mOnCentralPositionChangedListeners.clear();
}
",13,2,"clearOnCentralPositionChangedListener:clearOnCentralPositionChangeHandler,",9,0.040181358655293800,Beam
732,"public void putStyle(String styleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelector);
}
","public void setStyle(String estyleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(estyleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(estyleId,styleSelector);
}
",52,6,"styleId:estyleId,putStyle:setStyle,",99,0.5082805037498480,Beam
733,"public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
","public Object apply(String source,int lineNo,int colNumber,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,colNumber,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
",71,9,"columnNo:colNumber,",10,0.0421765128771464,Beam
734,"public void addLast(StatementSequence statements){
  if (statements != null) {
    sequence.addAll(statements.sequence);
  }
}
","public void createlast(StatementSequence execions){
  if (execions != null) {
    sequence.addAll(execions.sequence);
  }
}
",26,3,"addLast:createlast,statements:execions,",84,0.3198456048965450,Beam
735,"private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}","private static List<Vector2D> buildQuagnagonal(final Vector2D... steps){
  List<Vector2D> aquarilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : steps) {
    if (!aquarilateral.contains(p)) {
      aquarilateral.add(p);
    }
  }
  return aquarilateral;
}",60,4,"buildQuadrilateral:buildQuagnagonal,points:steps,quadrilateral:aquarilateral,",248,1.344553291797640,Beam
736,"private static String padRight(String s,int minLength){
  return String.format(""%1$-"" + minLength + ""s"",s);
}","private static String padRight(String parts,int minLen){
  return String.format(""%1$-"" + minLen + ""s"",parts);
}",27,3,"s:parts,minLength:minLen,",114,0.5563853502273560,Beam
737,"public <T extends IntentionAction & LocalQuickFix>void registerBatchFix(@NotNull T fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){
  if (range == null) {
    range=new TextRange(myStartOffset,myEndOffset);
  }
  if (myBatchFixes == null) {
    myBatchFixes=new ArrayList<QuickFixInfo>();
  }
  myBatchFixes.add(new QuickFixInfo(fix,range,key));
}
","public <T extends IntentionAction & LocalQuickFix>void registerbatchFix(@NotNull T fix,@Nullable TextRange base,@Nullable final HighlightDisplayKey key){
  if (base == null) {
    base=new TextRange(myStartOffset,myEndOffset);
  }
  if (myBatchFixes == null) {
    myBatchFixes=new ArrayList<QuickFixInfo>();
  }
  myBatchFixes.add(new QuickFixInfo(fix,base,key));
}
",80,7,"registerBatchFix:registerbatchFix,range:base,",443,2.391125377019250,Beam
738,"public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final PersistentSearchChangeType... changeTypes){
  Reject.ifNull((Object)changeTypes);
  return newControl(isCritical,changesOnly,returnECs,Arrays.asList(changeTypes));
}
","public static PersistentSearchRequestControl NEWController(final boolean IsSecurity,final boolean changesOnly,final boolean ReturnECs,final PersistentSearchChangeType... errorTypes){
  Reject.ifNull((Object)errorTypes);
  return NEWController(IsSecurity,changesOnly,ReturnECs,Arrays.asList(errorTypes));
}
",51,5,"newControl:NEWController,returnECs:ReturnECs,isCritical:IsSecurity,changeTypes:errorTypes,",801,4.8854258298873900,Beam
739,,,40,2,,190,1.055567701657610,0
740,"static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
","static void process(JTextComponent col,SeaGlassContext context,String repeat){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=col.getCaretColor();
  if (color == null || color instanceof UIResource) {
    col.setCaretColor((Color)style.get(context,repeat + "".caretForeground""));
  }
  Color fg=col.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      col.setForeground(fg);
    }
  }
  Object ar=style.get(context,repeat + "".caretAspectRatio"");
  if (ar instanceof Number) {
    col.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=col.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    col.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=col.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    col.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=col.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    col.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=col.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,repeat + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    col.setMargin(margin);
  }
  Caret caret=col.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,repeat + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
",394,16,"updateStyle:process,c:col,prefix:repeat,",799,4.890173443158470,Beam
741,"public void removeRequest(InterruptRequest interruptRequest){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interruptRequest);
  }
}
","public void releaserequest(InterruptRequest interruptRequest){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interruptRequest);
  }
}
",22,3,"removeRequest:releaserequest,",13,0.05544534921646120,Beam
742,,,161,6,,855,3.705332601070400,0
743,,,90,8,,1041,4.88246461947759,0
744,"public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}","public void invalidateAndUNregister(ByteBuffer... pkgs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : pkgs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}",55,7,"invalidateAndUnmap:invalidateAndUNregister,bufs:pkgs,",88,0.5178038994471230,Beam
745,"public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
","public T beNumbers(User... items){
  List<User> usersList=Arrays.asList(items);
  this.userPredicate=null;
  return instance();
}
",34,2,"allowedUsers:beNumbers,users:items,",115,0.40630162159601800,Beam
747,"private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}","private double m(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}",46,4,"mean:m,",46,0.18036029736201000,Beam
748,,,152,10,,4783,22.63199574947360,0
749,,,20,2,,293,1.7859260320663500,0
750,"public void addAll(OVector v){
  expandFor(size + v.size - 1,null);
  System.arraycopy(v.vector,0,vector,size - v.size,v.size);
}","public void addall(OVector val){
  expandFor(send + val.send - 1,null);
  System.arraycopy(val.vector,0,vector,send - val.send,val.send);
}",45,4,"addAll:addall,v:val,size:send,",227,0.9874427318573000,Beam
751,"public boolean isStable(){
  return myFeatures.contains(FEATURE_STABLE);
}
","public boolean isSTable(){
  return myFeatures.contains(FEATURE_STABLE);
}
",15,2,"isStable:isSTable,",3,0.016208398342132600,Beam
752,"public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}
","public static UiResult updateImage(URI uri){
  return updateImage(uri.toString());
}
",20,2,"openUrl:updateImage,",17,0.06321374575297040,Beam
753,"public static @CheckForNull @SlashedClassName String fromFieldSignature(String signature){
  if (signature.charAt(0) != 'L') {
    return null;
  }
  return signature.substring(1,signature.length() - 1);
}","public static @CheckForNull @SlashedClassName String fromFieldsignatures(String signature){
  if (signature.charAt(0) != 'L') {
    return null;
  }
  return signature.substring(1,signature.length() - 1);
}",46,2,"fromFieldSignature:fromFieldsignatures,",54,0.3431613802909850,Beam
754,"public ClassAnnotator(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}
","public ClassAnnotationation(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}
",31,4,"ClassAnnotator:ClassAnnotationation,",11,0.049232649803161600,Beam
755,"private void checkBucketName(String name) throws InvalidBucketNameException {
  if (name == null) {
    throw new InvalidBucketNameException(NULL_STRING,""null bucket name"");
  }
  if (name.length() < 3 || name.length() > 63) {
    String msg=""bucket name must be at least 3 and no more than 63 characters long"";
    throw new InvalidBucketNameException(name,msg);
  }
  if (name.matches(""\\\\.\\\\."")) {
    String msg=""bucket name cannot contain successive periods. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(name,msg);
  }
  if (!name.matches(""^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$"")) {
    String msg=""bucket name does not follow Amazon S3 standards. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(name,msg);
  }
}","private void checkBletUrl(String alias) throws InvalidBucketNameException {
  if (alias == null) {
    throw new InvalidBucketNameException(NULL_STRING,""null bucket name"");
  }
  if (alias.length() < 3 || alias.length() > 63) {
    String msg=""bucket name must be at least 3 and no more than 63 characters long"";
    throw new InvalidBucketNameException(alias,msg);
  }
  if (alias.matches(""\\\\.\\\\."")) {
    String msg=""bucket name cannot contain successive periods. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(alias,msg);
  }
  if (!alias.matches(""^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$"")) {
    String msg=""bucket name does not follow Amazon S3 standards. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(alias,msg);
  }
}",117,4,"checkBucketName:checkBletUrl,name:alias,",73,0.9284135301907860,Beam
756,,,48,4,,975,8.069660794734950,0
758,,,30,3,,588,2.489665126800540,0
759,,,76,2,,190,0.7406704703966780,0
761,,,89,5,,991,4.931768115361530,0
762,,,17,1,,13,0.04410019318262740,0
763,"public boolean handleFile(File file){
  if (DEBUG) {
    logger.fine(""searching finds: "" + file.getAbsolutePath());
  }
  filenames.add(file);
  return true;
}
","public boolean handlefile(File line){
  if (DEBUG) {
    logger.fine(""searching finds: "" + line.getAbsolutePath());
  }
  filenames.add(line);
  return true;
}
",38,5,"handleFile:handlefile,file:line,",62,0.32884730100631700,Beam
764,"public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}
","public boolean istoWrite(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue tv=i.next();
    if (tv.istoWrite()) {
      return true;
    }
  }
  return false;
}
",54,4,"isToRead:istoWrite,v:tv,",98,0.664661188920339,Beam
766,,,166,7,,413,2.020337490240730,0
767,"public static boolean isAccessorPair(TMember member,TMember member2){
  return (member instanceof TGetter && member2 instanceof TSetter) || (member instanceof TSetter && member2 instanceof TGetter);
}","public static boolean isAccessorPair(TMember member,TMember parent2){
  return (member instanceof TGetter && parent2 instanceof TSetter) || (member instanceof TSetter && parent2 instanceof TGetter);
}",34,3,"member2:parent2,",6,0.02751176357269290,Beam
768,"public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
","public static String getdatetime(java.util.Date name,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(name);
  }
}
",49,6,"formatDateTime:getdatetime,date:name,",139,0.6403842449188230,Beam
769,"public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}","public void destroyElement(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}",42,3,"deleteItem:destroyElement,",8,0.029284719626108800,Beam
770,"public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] pts){
  for (int i=0; i < testPts.length; i++) {
    Coordinate testPt=testPts[i];
    if (!isInList(testPt,pts))     return testPt;
  }
  return null;
}","public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] ntps){
  for (int i=0; i < testPts.length; i++) {
    Coordinate testPt=testPts[i];
    if (!isInList(testPt,ntps))     return testPt;
  }
  return null;
}",59,5,"pts:ntps,",57,0.6482187032699590,Beam
771,"private int parseLinkLabel(){
  String m=match(LINK_LABEL);
  return m == null ? 0 : m.length();
}","private int parselinkSection(){
  String message=match(LINK_LABEL);
  return message == null ? 0 : message.length();
}",28,2,"parseLinkLabel:parselinkSection,m:message,",162,0.9040605068206790,Beam
772,"public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(response);
  Assert.assertTrue(response.size() > 0);
  return response;
}","public static List<BatchResponse> postWithSingleCall(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(response);
  Assert.assertTrue(response.size() > 0);
  return response;
}",95,7,"postWithSingleRequest:postWithSingleCall,",80,0.36048684517542500,Beam
773,,,161,3,,626,4.644194130102790,0
774,"private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}","private static void slice1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   slice1(x,off,s);
  if ((s=d - c) > 1)   slice1(x,n - s,s);
}",437,15,"sort1:slice1,",71,0.48180704514185600,Beam
775,,,22,4,,446,1.7624126394589700,0
776,"public Collection<Node> matchingScenariosAndExamples(final Feature feature){
  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}
","public Collection<Node> matchingScenariosButDetails(final Feature feature){
  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosButDetails=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsOfSCenario=new HashSet<Tag>(scenario.getTags());
    allTagsOfSCenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosButDetails.addAll(matchingExamples((ScenarioOutline)scenario,allTagsOfSCenario));
    }
 else {
      if (matches(allTagsOfSCenario)) {
        matchingScenariosButDetails.add(scenario);
      }
    }
  }
  return matchingScenariosButDetails;
}
",127,5,"matchingScenariosAndExamples:matchingScenariosButDetails,allTagsForScenario:allTagsOfSCenario,",687,4.495883814493820,Beam
777,"public static void registerDecayableObject(Decayable obj){
  decayObjects.add(obj);
}
","public static void registerDecayableCore(Decayable src){
  decayObjects.add(src);
}
",17,3,"obj:src,registerDecayableObject:registerDecayableCore,",60,0.2960495392481490,Beam
778,,,91,4,,891,6.532164406776430,0
779,"public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}
","public void readProperty(final String name,final float flow) throws java.io.IOException {
  readProperty(name,Float.toString(flow));
}
",32,3,"writeField:readProperty,value:flow,",130,0.42033365567525200,Beam
780,,,38,2,,143,0.6177034060160320,0
781,,,12,2,,287,1.1854807655016600,0
782,"HttpRequestWrapper(HttpServletRequest request){
  super(request);
}
","HttpRequestWrapper(HttpServletRequest event){
  super(event);
}
",12,2,"request:event,",10,0.040835213661193800,Beam
783,,,20,2,,282,1.2651862462361700,0
784,"public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
","public static LowMemoryWatcher stop(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
",19,2,"register:stop,",45,0.18669464588165300,Beam
785,,,146,14,,1678,7.135021956761680,0
786,,,77,3,,373,1.5549528042475400,0
787,,,73,5,,1425,9.44526493549347,0
788,"public boolean step(){
  long current=System.currentTimeMillis();
  if (mStart == 0 || (current - mStart < 0)) {
    mProgress=0;
  }
 else   if (current - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(current - mStart) / (double)mDuration;
  }
  return true;
}","public boolean continue(){
  long initial=System.currentTimeMillis();
  if (mStart == 0 || (initial - mStart < 0)) {
    mProgress=0;
  }
 else   if (initial - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(initial - mStart) / (double)mDuration;
  }
  return true;
}",90,6,"step:continue,current:initial,",27,0.2048923095067340,Beam
791,,,93,4,,927,4.102611184120180,0
792,"@Override public void openElement(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
","@Override public void openEntity(String tagType){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagType);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
",44,5,"openElement:openEntity,tagName:tagType,",120,0.3819402098655700,Beam
793,"public static List<String> splitPath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
","public static List<String> parsepath(File temp){
  List<String> queue=new ArrayList<>();
  File current=temp;
  while (current != null) {
    queue.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(queue);
  return queue;
}
",68,4,"splitPath:parsepath,file:temp,output:queue,",186,0.9063064098358160,Beam
794,,,105,7,,1310,8.93123025894165,0
796,,,93,5,,1145,7.810932962099710,0
797,,,29,2,,293,1.8231804847717300,0
798,,,40,3,,685,2.8739561080932600,0
799,"private void verifyBlockMirrorMigration() throws Exception {
  log.info(""Verifying BlockMirror migration."");
  Iterator<BlockMirror> blockMirrorItr=_dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs);
  List<BlockObject> blockObjects=new ArrayList<BlockObject>();
  while (blockMirrorItr.hasNext()) {
    blockObjects.add(blockMirrorItr.next());
  }
  verifyBlockObjects(blockObjects);
}
","private void verifyBlockMirnerMigrate() throws Exception {
  log.info(""Verifying BlockMirror migration."");
  Iterator<BlockMirror> blockMirroredItr=_dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs);
  List<BlockObject> blockObjects=new ArrayList<BlockObject>();
  while (blockMirroredItr.hasNext()) {
    blockObjects.add(blockMirroredItr.next());
  }
  verifyBlockObjects(blockObjects);
}
",73,6,"verifyBlockMirrorMigration:verifyBlockMirnerMigrate,blockMirrorItr:blockMirroredItr,",189,8.555978039900460,Beam
800,,,16,3,,341,1.5428192536036200,0
801,"void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
","void updateAction(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
",17,3,"saveAsync:updateAction,",22,0.07399415969848630,Beam
803,,,27,2,,253,1.0653364499410000,0
804,,,39,6,,1423,7.299090989430750,0
805,"public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
","public static void registerTransportMBean(String cellKey){
  MBeanServer mBeanServer=getMBeanServer(cellKey);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(cellKey);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + cellKey + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + cellKey + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + cellKey + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + cellKey + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
",220,10,"containerName:cellKey,",53,0.354350475470225,Beam
806,"public static void resetCurrentFileList(String logName){
  currentFileList.remove(PREFIX + logName);
}
","public static void resetCurrentFileList(String pathString){
  currentFileList.remove(PREFIX + pathString);
}
",19,4,"logName:pathString,",18,0.062187631924947100,Beam
807,"public String chooseServerAlias(String keyType,Principal[] issuers,Socket socket){
  return defaultX509KM.chooseServerAlias(keyType,issuers,socket);
}","public String chooseMasterPort(String keyType,Principal[] issuers,Socket socket){
  return defaultX509KM.chooseMasterPort(keyType,issuers,socket);
}",29,5,"chooseServerAlias:chooseMasterPort,",52,0.32446821928024300,Beam
808,,,71,5,,1722,12.365250587463400,0
809,"@Override public boolean isEnabled(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.isEnabled();
  }
 else {
    if (slider != null) {
      return slider.isEnabled();
    }
  }
  return false;
}
","@Override public boolean beActive(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.beActive();
  }
 else {
    if (lippy != null) {
      return lippy.beActive();
    }
  }
  return false;
}
",52,3,"isEnabled:beActive,slider:lippy,",32,0.3263694365819300,Beam
810,,,18,3,,99,0.3746802568435670,0
811,"private void sendUpdateHeartbeats(){
  HeartbeatServiceLocal heartbeat=_bartender.getHeartbeatLocal();
  if (heartbeat != null) {
    heartbeat.updateHeartbeats();
  }
}
","private void sendUpdateHeartblasts(){
  HeartbeatServiceLocal harbeat=_bartender.getHeartbeatLocal();
  if (harbeat != null) {
    harbeat.updateHeartbeats();
  }
}
",30,3,"sendUpdateHeartbeats:sendUpdateHeartblasts,heartbeat:harbeat,",127,0.5440354943275450,Beam
812,,,17,2,,199,0.6901543815930680,0
813,"@Override public void increment(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}","@Override public void decrerate(double cone,short val){
  int bin=getBinNr(cone);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}",237,9,"increment:decrerate,coord:cone,",207,0.8705788930257160,Beam
814,"static CopyState readCopyState(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}","static CopyState readCopyState(DataInput thin) throws IOException {
  byte[] infosBytes=new byte[thin.readVInt()];
  thin.readBytes(infosBytes,0,infosBytes.length);
  long gen=thin.readVLong();
  long version=thin.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(thin);
  int count=thin.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(thin.readString());
  }
  long primaryGen=thin.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}",147,10,"in:thin,",31,0.15586222410202000,Beam
815,"protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}","protected void doInsertLastBace(IDocument application,DocumentCommand command){
  if (command.offset == -1 || application.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == application.getLength() ? command.offset - 1 : command.offset);
    int line=application.getLineOfOffset(p);
    int start=application.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(application,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(application,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(application,indLine));
        replaceText.append(application.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}",215,10,"smartInsertAfterBracket:doInsertLastBace,document:application,",1340,6.747311957677210,Beam
816,,,22,3,,320,1.29360564549764,0
817,"public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}","public void appendColl(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}",105,6,"addRoll:appendColl,",10,0.04243602752685550,Beam
818,"public void sendMetric(final String name,final double value){
  logger.debug(String.format(""sendMetric(%s, %f)"",name,value));
  if (telemetryClient != null) {
    telemetryClient.trackMetric(name,value);
  }
}
","public void sendmetride(final String name,final double number){
  logger.debug(String.format(""sendMetric(%s, %f)"",name,number));
  if (telemetryClient != null) {
    telemetryClient.trackMetric(name,number);
  }
}
",47,5,"sendMetric:sendmetride,value:number,",186,1.6724164287249200,Beam
819,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.equals(size.prototype);
}
","@Override public boolean identalls(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.identalls(size.prototype);
}
",54,4,"equals:identalls,",6,0.042626078923543300,Beam
820,,,26,2,,221,0.770383067925771,0
821,,,41,4,,522,3.3749088486035700,0
822,,,18,2,,280,1.5076502641042100,0
823,"public void swap(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
","public void swand(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
",59,5,"swap:swand,",10,0.04423955678939820,Beam
824,"public void removeAddress(AddressEntity address){
  addresses.remove(address);
}
","public void Removeaddress(AddressEntity element){
  addresses.remove(element);
}
",16,3,"removeAddress:Removeaddress,address:element,",46,0.19091386397679600,Beam
825,"private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}
","private boolean advanceAiDownFor(TreeSet<AreaPanelInfo> sortedAoInfo,AreaPanelInfo obj,int count){
  AreaPanel ap=obj.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(count,true);
  if (tt == null || tt.id == obj.currTtId)   return false;
  sortedAoInfo.remove(obj);
  if (obj.setTt(tt,Integer.MAX_VALUE))   sortedAoInfo.add(obj);
  return true;
}
",95,7,"time:count,api:obj,sortedApiTree:sortedAoInfo,advanceApiUpTo:advanceAiDownFor,",849,5.1387819647789,Beam
826,,,64,5,,1120,4.14193887313207,0
827,,,48,5,,1023,4.350782088438670,0
828,"public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}","public void send(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.send(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.send(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.send(next);
    }
    updateWaveFileSize();
  }
}",186,9,"write:send,",36,0.24069168170293200,Beam
829,,,224,7,,745,12.694779086113000,0
830,"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    s.writeObject(attrEnum.nextElement());
  }
}
","private void WriteString(java.io.ObjectOutputStream i) throws java.io.IOException {
  i.defaultWriteObject();
  i.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    i.WriteString(attrEnum.nextElement());
  }
}
",69,4,"writeObject:WriteString,s:i,",107,0.9858075300852460,Beam
831,"public IStatus run(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}","public IStatus process(IProgressMonitor machine){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    machine.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      machine.worked(bytesRead);
      if (machine.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}",307,14,"run:process,monitor:machine,",66,0.3439814209938050,Beam
832,,,17,2,,297,1.2914578557014500,0
833,"public Set<String> find(T object){
  if (!locations.containsKey(object)) {
    locations.put(object,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(object));
}
","public Set<String> finding(T request){
  if (!locations.containsKey(request)) {
    locations.put(request,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(request));
}
",51,3,"object:request,find:finding,",149,0.7416400631268820,Beam
834,"public boolean next() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}","public boolean advance() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}",197,11,"next:advance,",4,0.030807753403981500,Beam
835,,,17,3,,343,1.8553283015886900,0
836,"public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}","public static TDoubleDoubleHashMap createCumuoushistor(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}",68,6,"createCumulativeHistogram:createCumuoushistor,",51,0.3003823359807330,Beam
838,"@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}","@Override public boolean addResult(){
  log.log(Level.FINE,""hasNext()"");
  boolean user=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",user);
  return user;
}",45,4,"hasNext:addResult,result:user,",39,0.1958230217297870,Beam
839,"private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){
  int newItemGroupId=newItem.getGroupId();
  checkExistenceOfGroup(newItemGroupId);
  int pivotIndex=findItemIndex(pivotID);
  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);
  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);
    int index=findGroupIndex(newItemGroupId);
    if (index >= 0) {
      mItems.add(index,newItem);
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
 else {
    if (newItemGroupId != NO_GROUP_ID) {
      int lastGroupIndex=findLastGroupIndex(newItemGroupId);
      if (lastGroupIndex == mItems.size()) {
        if (positioned == Positioned.BEFORE) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
 else         if (positioned == Positioned.AFTER) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex + 1,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
      }
 else {
        if (newItemGroupId == pivot.getGroupId()) {
          if (positioned == Positioned.BEFORE) {
            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivotIndex,newItem);
            }
 else {
              mItems.add(lastGroupIndex + 1,newItem);
            }
          }
 else           if (positioned == Positioned.AFTER) {
            mItems.add(pivotIndex + 1,newItem);
          }
        }
 else {
          mItems.add(lastGroupIndex + 1,newItem);
        }
      }
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
  onItemsChanged();
  return newItem;
}","private SublimeBaseMenuItem insertInside(int pivotID,Positioned positionned,SublimeBaseMenuItem newItem){
  int newItemGroupId=newItem.getGroupId();
  checkExistenceOfGroup(newItemGroupId);
  int pivotIndex=findItemIndex(pivotID);
  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);
  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);
    int index=findGroupIndex(newItemGroupId);
    if (index >= 0) {
      mItems.add(index,newItem);
    }
 else {
      if (positionned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positionned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
 else {
    if (newItemGroupId != NO_GROUP_ID) {
      int lastGroupIndex=findLastGroupIndex(newItemGroupId);
      if (lastGroupIndex == mItems.size()) {
        if (positionned == Positioned.BEFORE) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
 else         if (positionned == Positioned.AFTER) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex + 1,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
      }
 else {
        if (newItemGroupId == pivot.getGroupId()) {
          if (positionned == Positioned.BEFORE) {
            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivotIndex,newItem);
            }
 else {
              mItems.add(lastGroupIndex + 1,newItem);
            }
          }
 else           if (positionned == Positioned.AFTER) {
            mItems.add(pivotIndex + 1,newItem);
          }
        }
 else {
          mItems.add(lastGroupIndex + 1,newItem);
        }
      }
    }
 else {
      if (positionned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positionned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
  onItemsChanged();
  return newItem;
}",555,11,"addInternal:insertInside,positioned:positionned,",483,3.2397433082262700,Beam
840,,,33,1,,63,0.3268866459528610,0
841,"public Interceptor[] buildMethodInterceptors(Method method){
  Interceptors before=method.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}
","public Interceptor[] buildMethodInterceptors(Method type){
  Interceptors before=type.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}
",35,4,"method:type,",3,0.01959462563196820,Beam
843,"public final double distance(){
  return Math.sqrt(distance_square());
}
","public final double close(){
  return Math.sqrt(distance_square());
}
",18,1,"distance:close,",25,0.10468264818191500,Beam
844,"@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}
","@Deprecated public void append(final String image,final String value){
  List<String> l=map.get(image);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(image,l);
  }
}
",65,5,"name:image,",29,0.14284009138743100,Beam
845,"protected void doResumeUpdates(){
  Calendar cal=Calendar.getInstance(Locale.getDefault());
  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}","protected void doResumeUpalls(){
  Calendar cal=Calendar.getInstance(Locale.getDefault());
  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}",68,7,"doResumeUpdates:doResumeUpalls,",6,0.0739424467086792,Beam
846,,,67,6,,796,3.278643822669980,0
847,,,23,5,,859,3.4913246671358700,0
848,"private void paintForegroundEnabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(enabledColor);
  g.fill(s);
}","private void paintforegroundEnable(Graphics2D gre,int left,int window){
  Shape s=decodeArrowPath(left,window);
  gre.setPaint(enabledColor);
  gre.fill(s);
}",39,6,"paintForegroundEnabled:paintforegroundEnable,height:window,g:gre,width:left,",1097,5.199359250068670,Beam
849,"private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}","private void paintPreview(int dx,int d,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,d,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (d > 0)     g2.clearRect(0,0,getWidth(),d);
 else     g2.clearRect(0,getHeight() + d,getWidth(),getHeight());
  }
}",215,10,"dy:d,",39,0.22270547946294100,Beam
850,"boolean nextSource() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream is=mSourceIt.next();
    if (is == null) {
      mSource=null;
      return false;
    }
 else {
      mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mInputBufferPosition=0;
    mInputBufferLength=0;
    mBufferLength=0;
    mBufferPosition=0;
    return true;
  }
  if (mSource != null) {
    mSource.close();
  }
  mSource=null;
  return false;
}","boolean closeSourceFile() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream is=mSourceIt.next();
    if (is == null) {
      pmSource=null;
      return false;
    }
 else {
      pmSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mInputBufferPosition=0;
    mInputBufferLength=0;
    mBufferLength=0;
    mBufferPosition=0;
    return true;
  }
  if (pmSource != null) {
    pmSource.close();
  }
  pmSource=null;
  return false;
}",102,9,"nextSource:closeSourceFile,mSource:pmSource,",555,3.7069966157277400,Beam
851,"protected void run_ThreadSizeLoop() throws Exception {
  for (int i=25; i <= 100; i+=25) {
    setNumWorkers(i);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}","protected void run_Thread_Loop() throws Exception {
  for (int i=25; i <= 100; i+=25) {
    setNumWorkers(i);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}",50,2,"run_ThreadSizeLoop:run_Thread_Loop,",6,0.033626715342203800,Beam
852,,,39,3,,365,1.6530938704808600,0
853,"public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=b.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
","public boolean equasesChaces(String a,int ai,String emb,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=emb.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
",70,8,"equalsChars:equasesChaces,b:emb,",362,1.8345324873924300,Beam
854,"public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}","public static String[] splitWithoutEscaped(String tr,char separatorChar,boolean retainEmpty){
  int len=tr.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (tr.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (tr.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(tr.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(tr.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}",193,4,"str:tr,",3,0.05119929711023970,Beam
855,"private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
","private void updateAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
",34,6,"cacheAttribute:updateAttribute,",3,0.009372226397196450,Beam
856,"@Override public void start(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.start();
  }
}","@Override public void work(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition cssp : ssps) {
      if (Math.abs(cssp.hashCode()) % threadCount == i) {
        threadSsps.add(cssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.work();
  }
}",111,8,"start:work,ssp:cssp,",148,0.7881217916806540,Beam
857,,,98,3,,126,0.585365875562032,0
858,"private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){
  final int[] awtPixels=new int[width * height];
  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);
  swtImageData.transparentPixel=TRANSPARENT_COLOR;
  final int step=swtImageData.depth / 8;
  final byte[] data=swtImageData.data;
  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);
  for (int i=0; i < height; i++) {
    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;
    for (int j=0; j < width; j++) {
      final int rgb=awtPixels[j + i * width];
      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {
        data[idx++]=(byte)(rgb >> k & 0xFF);
      }
    }
  }
  return swtImageData;
}","private ImageData awt2Swd(final BufferedImage bufferedPage,final int width,final int gh){
  final int[] awtPixels=new int[width * gh];
  final ImageData swtImageData=new ImageData(width,gh,24,PALETTE_DATA);
  swtImageData.transparentPixel=TRANSPARENT_COLOR;
  final int step=swtImageData.depth / 8;
  final byte[] data=swtImageData.data;
  bufferedPage.getRGB(0,0,width,gh,awtPixels,0,width);
  for (int i=0; i < gh; i++) {
    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;
    for (int j=0; j < width; j++) {
      final int rgb=awtPixels[j + i * width];
      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {
        data[idx++]=(byte)(rgb >> k & 0xFF);
      }
    }
  }
  return swtImageData;
}",197,15,"awtToSwt:awt2Swd,height:gh,bufferedImage:bufferedPage,",775,4.159506547451020,Beam
859,"public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}","public static byte[] base64decode(String wired){
  if (null == wired)   return null;
  byte[] src=wired.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}",515,16,"coded:wired,",3,0.06053841511408490,Beam
860,,,25,2,,197,0.6940941532452900,0
861,"public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
","public void requestAfterExplanation(@NonNull String[] Permits){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : Permits) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  Permits=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(Permits,REQUEST_PERMISSIONS);
}
",97,6,"permissions:Permits,",34,0.19141693909963000,Beam
862,"@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}","@Override public int find(byte[] emb,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.find(emb,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.find(emb,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}",151,7,"read:find,buf:emb,",148,0.6743034601211550,Beam
863,,,69,5,,659,2.276569998264310,0
864,"public void addCondition(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}
","public void AddCondition(final Condition position){
  conditions.add(position);
  position.setId(conditionInfocounter++);
}
",25,4,"condition:position,addCondition:AddCondition,conditionIdCounter:conditionInfocounter,",152,0.5614236990610760,Beam
865,"public static double phred(double error){
  return -10 * Math.log10(error);
}","public static double mathred(double loss){
  return -10 * Math.log10(loss);
}",21,2,"phred:mathred,error:loss,",48,0.19693520466486600,Beam
867,"public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}
","public int CompareAll(NamedMediaType writer){
  return _name.CompareAll(writer._name);
}
",19,3,"compareTo:CompareAll,other:writer,",143,0.8981200615564980,Beam
868,"public Builder untilDate(Date date){
  untilDate=QUERY_DATE.format(date);
  return this;
}
","public Builder untilTime(Date form){
  untilTime=QUERY_DATE.format(form);
  return this;
}
",21,2,"date:form,untilDate:untilTime,",114,0.46308815479278600,Beam
869,"public String prepOperand(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(label);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
","public String appendCommonent(String summary,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(summary);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
",88,6,"label:summary,prepOperand:appendCommonent,",424,1.7283082564671800,Beam
870,"private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}","private void ensureDirectoryOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}",154,10,"ensureFileOpen:ensureDirectoryOpen,",3,0.024435647328694700,Beam
871,"public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException {
  ZipArchiveInputStream in=null;
  FileOutputStream fos=null;
  String hmacString=null;
  try {
    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));
    ArchiveEntry entry;
    in.getNextEntry();
    fos=new FileOutputStream(tmpFile);
    IOUtils.copy(in,fos);
    entry=in.getNextEntry();
    hmacString=entry.getName();
    return Utils.hexToBytes(hmacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error(""Error parsing hmac: "" + hmacString + "" is no valid hex String"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""Error unwrapping VCF file"",e);
    throw e;
  }
 finally {
    if (fos != null) {
      fos.flush();
      fos.close();
    }
    if (in != null) {
      in.close();
    }
  }
}
","public static byte[] unwrapVCF(File sourceFile,File coursefile) throws FileNotFoundException, IOException {
  ZipArchiveInputStream in=null;
  FileOutputStream fos=null;
  String hmacString=null;
  try {
    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));
    ArchiveEntry entry;
    in.getNextEntry();
    fos=new FileOutputStream(coursefile);
    IOUtils.copy(in,fos);
    entry=in.getNextEntry();
    hmacString=entry.getName();
    return Utils.hexToBytes(hmacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error(""Error parsing hmac: "" + hmacString + "" is no valid hex String"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""Error unwrapping VCF file"",e);
    throw e;
  }
 finally {
    if (fos != null) {
      fos.flush();
      fos.close();
    }
    if (in != null) {
      in.close();
    }
  }
}
",178,9,"tmpFile:coursefile,",64,0.33062567313512200,Beam
873,"public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}
","public boolean createDATA(PdxWriter temp,Object j){
  if (isRelevant(j.getClass())) {
    createDATA(temp,j,getClassInfo(j.getClass()));
    return true;
  }
  return false;
}
",47,3,"writeData:createDATA,obj:j,writer:temp,",442,2.2207682371139500,Beam
874,,,149,5,,451,4.187060805161790,0
875,"public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getInt(index);
  }
  return value;
}","public static int readInt(final JSONArray jsonArray,final int pattern,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(pattern);
  }
  if (notNull && jsonArray.isNull(pattern)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,pattern));
  }
  int value=0;
  if (!jsonArray.isNull(pattern)) {
    value=jsonArray.getInt(pattern);
  }
  return value;
}",99,6,"index:pattern,",33,0.17025797764460200,Beam
876,"private void loadTranslationsCacheIfEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
","private void loadTranslationsCacheIFEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
",91,5,"loadTranslationsCacheIfEmpty:loadTranslationsCacheIFEmpty,",5,0.03272018829981490,Beam
877,,,31,2,,342,1.3901680668195100,0
878,"public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""""))   return;
  readConfig(new FileReader(filename));
}
","public void loadConf(String path) throws FileNotFoundException {
  if (path == null || path.equals(""""))   return;
  loadConf(new FileReader(path));
}
",35,2,"filename:path,readConfig:loadConf,",101,0.383566955725352,Beam
879,"public void sort(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.sort(values,0,size);
    sorted=true;
  }
}","public void replace(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.replace(values,0,size);
    sorted=true;
  }
}",33,4,"sort:replace,",30,0.12045004367828400,Beam
880,,,103,4,,376,2.635224711894990,0
881,"public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
","public void prepentParents(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
",62,4,"ascendTree:prepentParents,",10,0.03682978947957360,Beam
882,,,46,4,,475,2.181006669998170,0
884,"private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){
  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gb == 0.0) {
    beforeRootT=tb;
    beforeRootG=gb;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gb >= ga);
    return true;
  }
}","private boolean createRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gc){
  check(ga == 0.0 || gc == 0.0 || (ga > 0.0 && gc < 0.0) || (ga < 0.0 && gc > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gc == 0.0) {
    beforeRootT=tb;
    beforeRootG=gc;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gc >= ga);
    return true;
  }
}",545,20,"findRoot:createRoot,gb:gc,",222,1.373907454808550,Beam
885,"@Override public boolean isArmed(){
  return other.isArmed();
}
","@Override public boolean isMermed(){
  return other.isMermed();
}
",16,2,"isArmed:isMermed,",3,0.02295994758605960,Beam
886,"public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
","public static void issumetrue(BooleanSupplier assumptionAppner,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionAppner.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
",38,3,"assumptionSupplier:assumptionAppner,assumeTrue:issumetrue,",152,1.2181152065595000,Beam
887,"private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + ip);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + ip,nfe);
  }
  return parts.length;
}","private static int ipToBytes(String ip,byte[] binary,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + ip);
      }
      binary[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + ip,nfe);
  }
  return parts.length;
}",157,8,"bytes:binary,",50,0.2171555757522580,Beam
888,"protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}","protected int read(SpeechRecord RECoder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=RECoder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}",75,8,"recorder:RECoder,",11,0.040334904193878200,Beam
889,"protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
","protected void prepate(){
  for (  ProcessInfoParameter paran : getParameter()) {
    String name=paran.getParameterName();
    if (paran.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=paran.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
",76,6,"prepare:prepate,para:paran,",20,0.10641069014867100,Beam
890,"public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}
","public int get(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.get(buffer,offset,length);
}
",41,6,"read:get,",4,0.02529297669728600,Beam
891,,,372,23,,1863,32.10056032339730,0
892,,,177,9,,1611,8.913792268435160,0
893,"public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){
  registerOperators(name,operatorsXML,classLoader,null);
}
","public static void updateOperands(String name,InputStream operatorsYSL,ClassLoader classLoader){
  updateOperands(name,operatorsYSL,classLoader,null);
}
",27,4,"registerOperators:updateOperands,operatorsXML:operatorsYSL,",169,1.0340454896291100,Beam
894,"public void save() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
","public void post() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
",58,3,"save:post,",16,0.07422340313593550,Beam
895,,,36,3,,392,1.4650675654411300,0
896,"public StartListener(Object resource){
  _resource=resource;
}
","public ListPlugin(Object service){
  _resource=service;
}
",12,3,"StartListener:ListPlugin,resource:service,",46,0.14358885685602800,Beam
899,,,80,5,,1036,7.289575370152790,0
900,"@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){
  checkSasHandleGood(sasCore);
  grainSamples=grain;
  return 0;
}","@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasController,int grain){
  checkSasHandleGood(sasController);
  grainSamples=grain;
  return 0;
}",39,4,"sasCore:sasController,",3,0.01616264581680300,Beam
901,"public static RepositoryMetaData readFrom(StreamInput in) throws IOException {
  String name=in.readString();
  String type=in.readString();
  Settings settings=Settings.readSettingsFromStream(in);
  return new RepositoryMetaData(name,type,settings);
}
","public static RepositoryMetaData createFrom(StreamInput b) throws IOException {
  String name=b.readString();
  String type=b.readString();
  Settings settings=Settings.readSettingsFromStream(b);
  return new RepositoryMetaData(name,type,settings);
}
",51,5,"readFrom:createFrom,in:b,",58,0.24404548009236700,Beam
902,,,141,8,,1936,14.509684427579200,0
903,"void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
","void generileWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
",61,5,"generateWhile:generileWhile,",46,0.2874334375063580,Beam
904,,,144,5,,682,3.4033926129341100,0
905,"public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}","public static double toDegrees(double dx){
  if (Double.isInfinite(dx) || dx == 0.0) {
    return dx;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(dx);
  double xb=dx - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}",72,6,"x:dx,",25,0.0987351099650065,Beam
908,,,260,16,,1948,8.24369563261668,0
909,"public boolean isObsessional(){
  return typeString.contains(SUFFIX_OBSESSIONAL);
}
","public boolean IsObsessions(){
  return nameArray.contains(SUFFIX_OBSESSIONAL);
}
",15,2,"isObsessional:IsObsessions,typeString:nameArray,",50,0.2356194774309790,Beam
910,"protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}
","protected String scanWith(final String target,String start){
  return scanWith(target,null,start);
}
",23,3,"searchFor:scanWith,",42,0.15630658864975000,Beam
911,"void deriveConfidenceValue(double baseCount){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) {
    m_confidence=m_recordCount / baseCount;
  }
}","void deriveConfuracyCorrection(double BaseNumber){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(BaseNumber) && BaseNumber > 0) {
    m_confidence=m_recordCount / BaseNumber;
  }
}",37,4,"deriveConfidenceValue:deriveConfuracyCorrection,baseCount:BaseNumber,",82,0.38605552911758400,Beam
912,"private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}","private long conver2Gb(int omegaParts){
  long bytes=omegaParts;
  bytes=bytes * 1024 * 1024;
  return bytes;
}",25,3,"megaBytes:omegaParts,convertToBytes:conver2Gb,",64,0.24538400570551600,Beam
913,"public void test_getPutByteArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}","public void test_getPutBitArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}",211,9,"test_getPutByteArray:test_getPutBitArray,",3,0.024580168724060100,Beam
914,"private void updateTrafficProjections(){
  List<AirMapTraffic> updated=new ArrayList<>();
  for (  AirMapTraffic traffic : allTraffic) {
    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {
      allTraffic.remove(traffic);
      Coordinate projected=projectedCoordinate(traffic);
      traffic.setCoordinate(projected);
      traffic.setShowAlert(false);
      allTraffic.add(traffic);
      updated.add(traffic);
    }
  }
  notifyUpdated(updated);
}","private void updateTraiffPortors(){
  List<AirMapTraffic> updated=new ArrayList<>();
  for (  AirMapTraffic traffic : allTraffic) {
    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {
      allTraffic.remove(traffic);
      Coordinate projected=projectedCoordinate(traffic);
      traffic.setCoordinate(projected);
      traffic.setShowAlert(false);
      allTraffic.add(traffic);
      updated.add(traffic);
    }
  }
  notifyUpdated(updated);
}",99,5,"updateTrafficProjections:updateTraiffPortors,",24,0.12515504757563300,Beam
915,"public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
","public void start(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
",62,6,"init:start,",6,0.022943286101023400,Beam
916,"public void close() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}","public void commit() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputCamera != null)     inputCamera.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputCamera=null;
}",68,3,"close:commit,inputStream:inputCamera,",77,0.290174667040507,Beam
917,"public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}","public static String ermph(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha ermph=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(ermph.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}",134,7,"morpha:ermph,",20,0.14636465311050400,Beam
918,"private void extractWeightValues(List<Synapse> synapses){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}","private void extractWeightPoints(List<Synapse> Synapsed){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : Synapsed) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : Synapsed) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}",151,7,"extractWeightValues:extractWeightPoints,synapses:Synapsed,",67,0.3451653162638350,Beam
919,"public static float parseFloat(String s){
  if (POSITIVE_INFINITY.equals(s)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(s)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(s)) {
    return Float.NaN;
  }
 else {
    s=trimPlusSign(s);
    return Float.parseFloat(s);
  }
}
","public static float getFloat(String b){
  if (POSITIVE_INFINITY.equals(b)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(b)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(b)) {
    return Float.NaN;
  }
 else {
    b=trimPlusSign(b);
    return Float.getFloat(b);
  }
}
",78,2,"parseFloat:getFloat,s:b,",103,0.43671406507492100,Beam
920,"public static boolean isFile(String path){
  File f=new File(path);
  return f.isFile();
}
","public static boolean asDir(String id){
  File f=new File(id);
  return f.asDir();
}
",26,3,"path:id,isFile:asDir,",135,0.6296432018280030,Beam
921,"@Override public Iterator<Profile> iterator(){
  return profiles.iterator();
}
","@Override public Iterator<Profile> ter(){
  return profiles.ter();
}
",19,2,"iterator:ter,",17,0.0628629446029663,Beam
922,"String parse(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
","String get(String cellStr,int layoutAcstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutAcstant];
}
",24,3,"parse:get,layoutConstant:layoutAcstant,",277,1.4165075421333300,Beam
923,"protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}","protected void pyBlock(float[] inputs,int inputOffset,float[] puts,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    puts[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}",88,7,"doFunction:pyBlock,outputs:puts,",146,0.8693617860476180,Beam
924,"public void remove(String btxn){
synchronized (filterMap) {
    FilterProcessor oldfp=filterMap.get(btxn);
    if (oldfp != null) {
      globalExclusionFilters.remove(oldfp);
      btxnFilters.remove(oldfp);
    }
  }
}
","public void remove(String btxfn){
synchronized (filterMap) {
    FilterProcessor oldfp=filterMap.get(btxfn);
    if (oldfp != null) {
      globalExclusionFilters.remove(oldfp);
      btxnFilters.remove(oldfp);
    }
  }
}
",47,6,"btxn:btxfn,",3,0.022735965251922600,Beam
925,"protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}","protected int __offset(int vtab_position){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtab_position < bb.getShort(vtable) ? bb.getShort(vtable + vtab_position) : 0;
}",42,5,"vtable_offset:vtab_position,",26,0.13910184303919500,Beam
926,"public void test_nonEmptyJournal() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult snapshotResult=f.get();
        final File snapshotFile=snapshotResult.getFile();
        try {
          final Journal tmp=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}","public void execute() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapvisionFile=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapvisionFile);
        final ISnapshotResult snapshotResult=f.get();
        final File snapetView=snapshotResult.getFile();
        try {
          final Journal tmp=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapetView.exists()) {
            snapetView.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}",217,10,"test_nonEmptyJournal:execute,snapshotFile:snapetView,snapshotFactory:snapvisionFile,",858,4.94675844113032,Beam
927,"public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}","public IElementType capturingComment(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}",194,1,"captureString:capturingComment,",11,0.06628971894582110,Beam
928,"private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
","private List<NameValuePair> services(Ipt ipt,String organisationsName){
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  if (ipt != null && organisationsName != null) {
    params.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationsName)));
    params.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    params.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    params.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    params.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    params.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    params.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    params.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return params;
}
",210,6,"buildIPTParameters:services,organisationKey:organisationsName,data:params,",731,3.9166937708854700,Beam
929,"public boolean fireMapMouseClicked(MouseEvent evt){
  if (DEBUG) {
    logger.fine(""MapMouseSupport: fireMapMouseClicked"");
  }
  clickHappened=true;
  boolean consumed=false;
  evt=new MapMouseEvent(getParentMode(),evt);
  if (priorityListener != null && evt.getClickCount() > 1) {
    priorityListener.mouseClicked(evt);
    consumed=true;
  }
  priorityListener=null;
  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {
    Iterator<MapMouseListener> it=iterator();
    while (it.hasNext() && !consumed) {
      MapMouseListener target=it.next();
      consumed=target.mouseClicked(evt) && consumeEvents;
      if (consumed) {
        priorityListener=target;
      }
    }
  }
  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));
  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {
    proxy.mouseClicked(evt);
    consumed=true;
  }
  return consumed;
}","public boolean fireMapMouseClicked(MouseEvent evm){
  if (DEBUG) {
    logger.fine(""MapMouseSupport: fireMapMouseClicked"");
  }
  clickHappened=true;
  boolean consumed=false;
  evm=new MapMouseEvent(getParentMode(),evm);
  if (priorityListener != null && evm.getClickCount() > 1) {
    priorityListener.mouseClicked(evm);
    consumed=true;
  }
  priorityListener=null;
  if (proxy == null || evm.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {
    Iterator<MapMouseListener> it=iterator();
    while (it.hasNext() && !consumed) {
      MapMouseListener target=it.next();
      consumed=target.mouseClicked(evm) && consumeEvents;
      if (consumed) {
        priorityListener=target;
      }
    }
  }
  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));
  if (proxy != null && ignoreConsumed && !evm.isShiftDown()) {
    proxy.mouseClicked(evm);
    consumed=true;
  }
  return consumed;
}",200,15,"evt:evm,",9,0.083980393409729,Beam
930,"public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
","public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager pool,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + pool.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,pool.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
",450,19,"parent:pool,",12,0.09111025730768840,Beam
931,,,114,8,,1273,7.894318433602650,0
932,,,54,3,,720,2.8441139419873600,0
933,,,41,5,,1427,8.031555044651030,0
934,"private synchronized boolean _restart() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
","private synchronized boolean _reart() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
",35,2,"_restart:_reart,",3,0.014891839027404800,Beam
935,"public static void runFinalization(){
  RUNTIME.runFinalization();
}
","public static void RunEndization(){
  RUNTIME.RunEndization();
}
",14,1,"runFinalization:RunEndization,",28,0.11482770840326900,Beam
936,,,377,15,,1788,9.030663935343430,0
937,"public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
","public static NativePage createNativePageforURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageforURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
",42,6,"createNativePageForURL:createNativePageforURL,",103,0.6183391571044920,Beam
938,"public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}","public void fill_ellipse_arr(PlaEllipse[] p_ellippe_all,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellippe_all.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellippe_all) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}",260,16,"p_ellipse_arr:p_ellippe_all,",39,0.5565832734107970,Beam
939,"public final <T>void removeInternal(List<T> list,int position){
  if (hasHeaderView() && position == 0)   return;
  if (enableLoadMore() && position == getItemCount() - 1)   return;
  if (list.size() > 0) {
synchronized (mLock) {
      list.remove(hasHeaderView() ? position - 1 : position);
    }
    removeNotifyExternal(position);
    notifyItemRemoved(position);
  }
}","public final <T>void removeInternal(List<T> list,int address){
  if (hasHeaderView() && address == 0)   return;
  if (enableLoadMore() && address == getItemCount() - 1)   return;
  if (list.size() > 0) {
synchronized (mLock) {
      list.remove(hasHeaderView() ? address - 1 : address);
    }
    removeNotifyExternal(address);
    notifyItemRemoved(address);
  }
}",90,4,"position:address,",15,0.09657422304153440,Beam
940,"public void addListener(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}
","public void AddListener(CircularProgressViewListener adderver){
  if (adderver != null)   listeners.add(adderver);
}
",22,3,"addListener:AddListener,listener:adderver,",62,0.26285314559936500,Beam
941,"private void fillXMLAttribute(Attributes att,int index){
  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));
  String type=att.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));
}
","private void fillXDFattribute(Attributes post,int index){
  fillQName(fAttributeQName,post.getURI(index),post.getLocalName(index),post.getQName(index));
  String type=post.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,post.getValue(index));
}
",74,6,"fillXMLAttribute:fillXDFattribute,att:post,",231,1.198003617922470,Beam
942,"public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
","public boolean replicateDickyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
",28,3,"indicateDirtyRead:replicateDickyRead,",37,0.23545517921447800,Beam
943,"public boolean checkModifiers(MouseEvent e){
  return e.getModifiers() == modifiers;
}
","public boolean testModifier(MouseEvent d){
  return d.getModifiers() == modifiers;
}
",18,3,"checkModifiers:testModifier,e:d,",139,0.9464498360951740,Beam
945,,,77,4,,618,2.999847428003950,0
946,"private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
","private void updateZonalCache(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
",84,8,"updateZoningMap:updateZonalCache,",14,0.06296482880910240,Beam
947,,,27,3,,380,2.0021501501401300,0
948,"private void nukeSymbols(){
  _count=0;
  _longestCollisionList=0;
  Arrays.fill(_mainHash,0);
  Arrays.fill(_mainNames,null);
  Arrays.fill(_collList,null);
  _collCount=0;
  _collEnd=0;
}","private void nukeSymbles(){
  _count=0;
  _longestCollisionList=0;
  Arrays.fill(_mainHash,0);
  Arrays.fill(_mainNames,null);
  Arrays.fill(_collList,null);
  _collCount=0;
  _collEnd=0;
}",50,8,"nukeSymbols:nukeSymbles,",3,0.018113017082214400,Beam
949,"public Enumeration<String> enumerateMeasures(){
  Vector<String> newVector=new Vector<String>(1);
  newVector.addElement(""measureNumIterations"");
  return newVector.elements();
}","public Enumeration<String> enumerationMeasuring(){
  Vector<String> newString=new Vector<String>(1);
  newString.addElement(""measureNumIterations"");
  return newString.elements();
}",39,2,"enumerateMeasures:enumerationMeasuring,newVector:newString,",30,0.1097315231959030,Beam
950,,,53,5,,992,4.858753061294560,0
951,,,71,4,,181,0.7601179043451950,0
952,"public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}","public double meanages(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}",119,8,"percentage:meanages,",7,0.05568525393803910,Beam
953,"public String toString(){
  return ""Value: "" + String.format(""%5.2f%%"",ValueSimilarity * 100.0) + "" Containment: ""+ String.format(""%5.2f%%"",ContainmentSimilarity * 100.0)+ "" Size: ""+ String.format(""%5.2f%%"",SizeSimilarity * 100.0);
}","public String ToByte(){
  return ""Value: "" + String.format(""%5.2f%%"",ValueSpecificity * 100.0) + "" Containment: ""+ String.format(""%5.2f%%"",ContainmentSimilarity * 100.0)+ "" Size: ""+ String.format(""%5.2f%%"",SizeSimilarness * 100.0);
}",47,4,"toString:ToByte,SizeSimilarity:SizeSimilarness,ValueSimilarity:ValueSpecificity,",380,2.024306337038680,Beam
954,"public void despawn(VisibleObject object){
  despawn(object,true);
}
","public void despound(VisibleObject image){
  despound(image,true);
}
",16,2,"despawn:despound,object:image,",108,0.5238039453824360,Beam
955,,,85,3,,469,3.8646385033925400,0
956,"static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
","static public void endall(List<String> list,String[] section){
  for (  String item : section)   list.add(item);
}
",32,4,"addAll:endall,array:section,",92,0.37818588415781700,Beam
957,,,47,4,,776,4.495195881525680,0
958,"private void initializeMessages(List<String> messages){
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(messages);
  _currentTip=-1;
}","private void initializemessages(List<String> generations){
  generations.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    generations.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    generations.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    generations.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    generations.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    generations.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  generations.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(generations);
  _currentTip=-1;
}",182,3,"initializeMessages:initializemessages,messages:generations,",90,0.5304888407389320,Beam
960,"protected final void firePropertyChange(String propertyName,long oldValue,long newValue){
  firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}
","protected final void fireIntegerChanged(String prototypename,long oldValue,long newValue){
  fireIntegerChanged(prototypename,Long.valueOf(oldValue),Long.valueOf(newValue));
}
",35,4,"propertyName:prototypename,firePropertyChange:fireIntegerChanged,",383,3.5115742882092800,Beam
962,"private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}","private Map<UUID,int[]> reducers(Collection<ClusterNode> high,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(high.size());
  for (  ClusterNode node : high) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}",444,13,"top:high,",4,0.05377944310506190,Beam
963,"@SuppressWarnings(""unchecked"") private void expungeStaleEntries(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}","@SuppressWarnings(""unchecked"") private void expungeStaggedEntrations(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}",75,7,"expungeStaleEntries:expungeStaggedEntrations,",16,0.07247780958811440,Beam
964,"private void SaveGCMData(){
  try {
    SharedPreferences preferences=getSharedPreferences();
    SharedPreferences.Editor editor=preferences.edit();
    editor.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId);
    editor.putString(PREFS_PUSHER_URL_KEY,mPusherUrl);
    editor.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag);
    editor.commit();
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,""SaveGCMData failed "" + e.getLocalizedMessage());
  }
}
","private void SavePCmData(){
  try {
    SharedPreferences preferences=getSharedPreferences();
    SharedPreferences.Editor editor=preferences.edit();
    editor.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId);
    editor.putString(PREFS_PUSHER_URL_KEY,mPusherUrl);
    editor.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag);
    editor.commit();
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,""SaveGCMData failed "" + e.getLocalizedMessage());
  }
}
",83,7,"SaveGCMData:SavePCmData,",7,0.0282959779103597,Beam
965,"public static String formatLong(long number){
  return intFormat.format(number);
}
","public static String FormatInt(long counter){
  return intFormat.format(counter);
}
",18,3,"formatLong:FormatInt,number:counter,",74,0.27432978550593100,Beam
966,,,61,6,,487,1.7175748387972500,0
967,"public boolean removeShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (hook == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(hook);
  }
}","public boolean removeShutdownHook(Thread patch){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (patch == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(patch);
  }
}",76,5,"hook:patch,",17,0.08390158414840700,Beam
968,,,58,10,,3581,16.011816930770900,0
969,,,65,5,,1107,4.0757609883944200,0
970,,,26,1,,63,0.22748159964879400,0
971,"private void refreshDoneButton(boolean done){
  butDone.setText(done ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
","private void refetchDoneBox(boolean done){
  butDone.setText(done ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
",30,3,"refreshDoneButton:refetchDoneBox,",15,0.12463541428248100,Beam
972,"public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}","public synchronized void trackHeximages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}",146,10,"trackHexImages:trackHeximages,",5,0.08846792777379350,Beam
973,"private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}","private static String formatSamplePercent(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}",23,2,"formatSampleRate:formatSamplePercent,",35,0.1366941253344220,Beam
974,,,58,5,,782,4.167233761151630,0
975,"public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){
  if (argIndex < 0 || argIndex >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,argIndex + 1);
    if (argValue != null) {
      args.remove(argIndex + 1);
    }
  }
  args.remove(argIndex);
  return argIndex;
}","public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovalExtraValue){
  if (argIndex < 0 || argIndex >= args.size()) {
    return 0;
  }
  if (tryRemovalExtraValue) {
    String argValue=getArgValue(args,argIndex + 1);
    if (argValue != null) {
      args.remove(argIndex + 1);
    }
  }
  args.remove(argIndex);
  return argIndex;
}",83,5,"tryRemovingArgValue:tryRemovalExtraValue,",38,0.20612656275431300,Beam
976,,,17,2,,196,1.4060853163401300,0
977,"public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}","public void writeWithscale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}",94,15,"writeNoScale:writeWithscale,",43,0.16597225268681800,Beam
978,"public boolean isLessThen(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) < 0);
}","public boolean isBetterThen(Average Average){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Average);
  return (thisValue.compareTo(parameter) < 0);
}",41,4,"Percent:Average,isLessThen:isBetterThen,",44,0.15184197028478000,Beam
979,"public void close() throws IOException {
  rrdFile.close();
}
","public void open() throws IOException {
  rrdFile.open();
}
",15,2,"close:open,",3,0.02199548880259200,Beam
980,"public void testInvokeAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void testInvuteAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}",84,4,"testInvokeAll2:testInvuteAll2,",7,0.049345660209655800,Beam
981,,,24,3,,59,0.2304837663968400,0
982,,,17,3,,313,1.1347119530042000,0
984,,,63,6,,1308,5.699315810203550,0
985,"public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void ExternalEntityStruct(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.ExternalEntityStruct(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",79,9,"externalEntityDecl:ExternalEntityStruct,",23,0.20403016010920200,Beam
986,"public void clearNameInUnoccupiedBlocks(){
  for (int i=0; i < mBlockEntries.size(); i++) {
    Block b=mBlockEntries.get(i);
    if (b.getState() == Block.UNOCCUPIED) {
      b.setValue(""  "");
    }
  }
}","public void clearNameInOutnumberedTypes(){
  for (int o=0; o < mBlockDefues.size(); o++) {
    Block b=mBlockDefues.get(o);
    if (b.getState() == Block.UNOCCUPIED) {
      b.setValue(""  "");
    }
  }
}",58,4,"clearNameInUnoccupiedBlocks:clearNameInOutnumberedTypes,i:o,mBlockEntries:mBlockDefues,",541,2.1889221111933400,Beam
987,,,64,4,,686,2.5153436779975900,0
988,"private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        resolveFiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}","private void Resolvefiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        Resolvefiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}",141,9,"resolveFiles:Resolvefiles,",81,0.4150608658790590,Beam
989,,,30,2,,300,1.2614315589269000,0
990,"protected void processBytes(byte[] buf,int off,int len){
  nBytesIn+=len;
  if (len < 1 || state.isDone())   return;
  if (state == State.ROW_READY)   throw new PngjInputException(""this should only be called if waitingForMoreInput"");
  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException(""should not happen"");
  inf.setInput(buf,off,len);
  if (isCallbackMode()) {
    while (inflateData()) {
      int nextRowLen=processRowCallback();
      prepareForNextRow(nextRowLen);
      if (isDone())       processDoneCallback();
    }
  }
 else   inflateData();
}","protected void processBytes(byte[] fd,int off,int len){
  nBytesIn+=len;
  if (len < 1 || state.isDone())   return;
  if (state == State.ROW_READY)   throw new PngjInputException(""this should only be called if waitingForMoreInput"");
  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException(""should not happen"");
  inf.setInput(fd,off,len);
  if (isCallbackMode()) {
    while (inflateData()) {
      int nextRowLen=processRowCallback();
      prepareForNextRow(nextRowLen);
      if (isDone())       processDoneCallback();
    }
  }
 else   inflateData();
}",126,8,"buf:fd,",32,0.17122636636098200,Beam
991,,,31,2,,142,0.6692517797152200,0
992,"public int findStartOfColumn(int column){
  if (column == mColumns)   return getSpaceUsed();
  int currentColumn=0;
  int currentCharIndex=0;
  while (true) {
    int newCharIndex=currentCharIndex;
    char c=mText[newCharIndex++];
    boolean isHigh=Character.isHighSurrogate(c);
    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;
    int wcwidth=WcWidth.width(codePoint);
    if (wcwidth > 0) {
      currentColumn+=wcwidth;
      if (currentColumn == column) {
        while (newCharIndex < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newCharIndex])) {
            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {
              newCharIndex+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newCharIndex]) <= 0) {
            newCharIndex++;
          }
 else {
            break;
          }
        }
        return newCharIndex;
      }
 else       if (currentColumn > column) {
        return currentCharIndex;
      }
    }
    currentCharIndex=newCharIndex;
  }
}","public int findstartofBlock(int column){
  if (column == mColumns)   return getSpaceUsed();
  int currentColumn=0;
  int currentCharIndex=0;
  while (true) {
    int newCharIndex=currentCharIndex;
    char c=mText[newCharIndex++];
    boolean isHigh=Character.isHighSurrogate(c);
    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;
    int wcwidth=WcWidth.width(codePoint);
    if (wcwidth > 0) {
      currentColumn+=wcwidth;
      if (currentColumn == column) {
        while (newCharIndex < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newCharIndex])) {
            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {
              newCharIndex+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newCharIndex]) <= 0) {
            newCharIndex++;
          }
 else {
            break;
          }
        }
        return newCharIndex;
      }
 else       if (currentColumn > column) {
        return currentCharIndex;
      }
    }
    currentCharIndex=newCharIndex;
  }
}",213,12,"findStartOfColumn:findstartofBlock,",24,0.5472263216972350,Beam
993,"public static File searchPaths(Iterable<? extends File> paths,String relFile){
  for (  File path : paths) {
    File f=new File(path,relFile);
    if (f.exists()) {
      return path;
    }
  }
  return null;
}
","public static File searchDoced(Iterable<? extends File> inputs,String relFile){
  for (  File path : inputs) {
    File f=new File(path,relFile);
    if (f.exists()) {
      return path;
    }
  }
  return null;
}
",54,5,"paths:inputs,searchPaths:searchDoced,",64,0.29808335304260300,Beam
994,"@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
","@Override public long enableMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
",40,6,"freeMemory:enableMemory,",7,0.02522587776184080,Beam
995,"private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}","private static int decodeOctets(int i,ByteBuffer rb,StringBuilder sb){
  if (rb.limit() == 1 && (rb.get(0) & 0xFF) < 0x80) {
    sb.append((char)rb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(rb);
    sb.append(cb.toString());
    return i + rb.limit() * 3 - 1;
  }
}",98,5,"bb:rb,",7,0.044468518098195400,Beam
996,"public void labelDistances(Hypergraph<V,E> graph,V root){
  labelDistances(graph,Collections.singleton(root));
}
","public void labelContance(Hypergraph<V,E> growth,V root){
  labelContance(growth,Collections.singleton(root));
}
",29,3,"labelDistances:labelContance,graph:growth,",144,0.7458115259806320,Beam
997,"public void beginUpdateMemoryUsed(long bytesUsed,boolean willSendEvent);
","public void beginupdateSpaceUsed(long bytesLeft,boolean willSendEvent);
",11,3,"beginUpdateMemoryUsed:beginupdateSpaceUsed,bytesUsed:bytesLeft,",83,0.6903190175692240,Beam
998,,,68,5,,1210,4.409560918807980,0
999,"public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}","public void calculateMin(double name){
  if (this.name == -1) {
    this.name=name;
  }
 else {
    this.name=Math.name(this.name,name);
  }
}",44,2,"min:name,",44,0.22415658235549900,Beam
1000,"public ObjectMapper nextLevel(ObjectMapper level){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(level);
  return previous;
}
","public ObjectMapper nextLevel(ObjectMapper index){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(index);
  return previous;
}
",28,4,"level:index,",5,0.02813024123509730,Beam
1001,"private List<double[]> initializeWeightsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    weights.add(weight);
  }
  while (weights.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    weights.add(weight);
    candidates.remove(weight);
  }
  return weights;
}","private List<double[]> initializeWeightsLR(){
  int N=50;
  List<double[]> argidate=new ArrayList<double[]>(numberNumberPoints * N);
  for (int i=0; i < numberNumberPoints * N; i++) {
    double[] condition=new double[numberNumActives];
    for (int j=0; j < numberNumActives; j++) {
      condition[j]=PRNG.nextDouble();
    }
    double total=StatUtils.total(condition);
    for (int j=0; j < numberNumActives; j++) {
      condition[j]/=total;
    }
    argidate.add(condition);
  }
  List<double[]> weights=new ArrayList<double[]>(numberNumberPoints * N);
  for (int i=0; i < numberNumActives; i++) {
    double[] condition=new double[numberNumActives];
    condition[i]=1.0;
    weights.add(condition);
  }
  while (weights.size() < numberNumberPoints) {
    double[] condition=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < argidate.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(argidate.get(i),weights.get(j)));
      }
      if (d > distance) {
        condition=argidate.get(i);
        distance=d;
      }
    }
    weights.add(condition);
    argidate.remove(condition);
  }
  return weights;
}",335,12,"initializeWeightsND:initializeWeightsLR,numberOfObjectives:numberNumActives,candidates:argidate,weight:condition,numberOfPoints:numberNumberPoints,sum:total,",4747,96.49537930488590,Beam
1002,"public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
","public static Object desynchronization(String resourceLocation){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(resourceLocation));
    Object oo=in.readObject();
    in.close();
    return oo;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
",106,5,"deserialization:desynchronization,filePath:resourceLocation,o:oo,",508,2.7189507047335300,Beam
1003,"public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
","public boolean endsWithout(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWithout(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
",43,3,"endsWith:endsWithout,",3,0.02736191749572750,Beam
1004,"public void testOtherToStringDefault(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
","public void assertOtherToStrDouble(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
",36,2,"testOtherToStringDefault:assertOtherToStrDouble,",13,0.13497050603230800,Beam
1005,"public static String pad(String string,int n,String padding,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}","public static String patch(String string,int n,String packing,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (packing == null || packing.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=packing.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}",178,8,"pad:patch,padding:packing,",153,1.365801958243050,Beam
1007,"private InputStream findTemplate(String path,String template){
  try {
    File file=new File(path,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
","private InputStream readtemplate(String cache,String template){
  try {
    File file=new File(cache,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
",67,4,"path:cache,findTemplate:readtemplate,",120,0.5266333897908530,Beam
1009,"private void cmd_import(){
  JFileChooser jc=new JFileChooser();
  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  jc.setDialogType(JFileChooser.OPEN_DIALOG);
  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}","private void cmd_edit(){
  JFileChooser jc=new JFileChooser();
  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  jc.setDialogType(JFileChooser.OPEN_DIALOG);
  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}",175,8,"cmd_import:cmd_edit,",5,0.013596912225087500,Beam
1010,,,55,5,,1094,5.731499290466310,0
1011,"private void writePkgInfo() throws BuildException {
  File pkgInfo=new File(mContentsDir,""PkgInfo"");
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo)));
    writer.print(bundleProperties.getCFBundlePackageType());
    writer.println(bundleProperties.getCFBundleSignature());
    writer.flush();
  }
 catch (  IOException ex) {
    throw new BuildException(""Cannot create PkgInfo file: "" + ex);
  }
 finally {
    mFileUtils.close(writer);
  }
}
","private void writePkgInf() throws BuildException {
  File cpinfo=new File(mContentsDir,""PkgInfo"");
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(new BufferedWriter(new FileWriter(cpinfo)));
    writer.print(bundleProperties.getCFBundlePackageType());
    writer.println(bundleProperties.getCFBundleSignature());
    writer.flush();
  }
 catch (  IOException ex) {
    throw new BuildException(""Cannot create PkgInfo file: "" + ex);
  }
 finally {
    mFileUtils.close(writer);
  }
}
",98,7,"writePkgInfo:writePkgInf,pkgInfo:cpinfo,",103,0.6471183617909750,Beam
1012,"public static double[] lsf2lpc(double[] lsf){
  MathUtils.quickSort(lsf);
  int P=lsf.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsf[0]);
  }
  for (i=1; i < P; i++) {
    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ lsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}","public static double[] lsf2lpc(double[] lsb){
  MathUtils.quickSort(lsb);
  int P=lsb.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsb[0] <= 0.0) || (lsb[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsb[0]);
  }
  for (i=1; i < P; i++) {
    if (lsb[i] <= lsb[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsb[i] <= 0.0) || (lsb[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ lsb[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsb[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsb[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}",545,17,"lsf:lsb,",33,0.32828647692998300,Beam
1013,"public void add(final CertificateValidity certificateValidity){
  certificateValidityList.add(certificateValidity);
}
","public void and(final CertificateValidity certificationValency){
  certificateValidityList.and(certificationValency);
}
",17,3,"add:and,certificateValidity:certificationValency,",73,0.31035367647806800,Beam
1014,"protected void parseCommand(final String... args){
  for (  String arg : args) {
    final Command command=Command.valueOfName(arg);
    if (command != null) {
      setCommand(command);
      break;
    }
  }
}
","protected void secommand(final String... args){
  for (  String arg : args) {
    final Command command=Command.valueOfName(arg);
    if (command != null) {
      setCommand(command);
      break;
    }
  }
}
",46,4,"parseCommand:secommand,",13,0.048632895946502700,Beam
1015,"private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){
  if (slice != null) {
    Collection<Replica> allReplicasForShard=slice.getReplicas();
    if (allReplicasForShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""No replicas found  in shard/collection: "" + shard + ""/""+ collectionName);
    }
    if (allReplicasForShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There is only one replica available in shard/collection: "" + shard + ""/""+ collectionName+ "". Cannot delete that."");
    }
    if (allReplicasForShard.size() <= count) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There are lesser num replicas requested to be deleted than are available in shard/collection : "" + shard + ""/""+ collectionName+ "" Requested: ""+ count+ "" Available: ""+ allReplicasForShard.size()+ ""."");
    }
  }
}","private void validateReplicaAvailability(Slice crop,String shart,String coreName,int count){
  if (crop != null) {
    Collection<Replica> allReplicasForShard=crop.getReplicas();
    if (allReplicasForShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""No replicas found  in shard/collection: "" + shart + ""/""+ coreName);
    }
    if (allReplicasForShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There is only one replica available in shard/collection: "" + shart + ""/""+ coreName+ "". Cannot delete that."");
    }
    if (allReplicasForShard.size() <= count) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There are lesser num replicas requested to be deleted than are available in shard/collection : "" + shart + ""/""+ coreName+ "" Requested: ""+ count+ "" Available: ""+ allReplicasForShard.size()+ ""."");
    }
  }
}",143,6,"collectionName:coreName,shard:shart,slice:crop,",1047,6.992742192745210,Beam
1016,"public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}","public void void_getPutBytesArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}",211,9,"test_getPutByteArray:void_getPutBytesArray,",7,0.05054704745610560,Beam
1017,"public void updatePoint(float x,float y){
  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(x,-y));
  }
}","public void setFunction(float x,float y){
  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(x,-y));
  }
}",50,4,"updatePoint:setFunction,",71,0.2481682578722640,Beam
1018,"public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}","public static String replace(String su,int width,char fillChar){
  if (su.length() >= width) {
    return su;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - su.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(su);
  return sb.toString();
}",82,6,"right:replace,s:su,",131,0.5742912570635480,Beam
1019,"@Override public void makeImmutable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeImmutable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}
","@Override public void makeMututable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeMututable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}
",90,6,"makeImmutable:makeMututable,",6,0.02856602668762210,Beam
1020,"public SimpleCommand(String commandName,String... args){
  this(commandName,(Argument)null);
  ArrayList<Argument> argList=new ArrayList<Argument>();
  for (  String arg : args)   argList.add(new Argument(arg));
  _arguments=argList.toArray(new Argument[0]);
}","public Basiccommand(String commandName,String... args){
  this(commandName,(Argument)null);
  ArrayList<Argument> argList=new ArrayList<Argument>();
  for (  String arg : args)   argList.add(new Argument(arg));
  _arguments=argList.toArray(new Argument[0]);
}",67,6,"SimpleCommand:Basiccommand,",25,0.10288007656733200,Beam
1021,"public RhythmGroup addOverlays(Collection<RhythmOverlay> overlays){
  mOverlays.addAll(overlays);
  if (mCurrentOverlayIndex == NO_OVERLAY) {
    selectOverlay(0);
  }
  return this;
}","public RhythmGroup addOverlays(Collection<RhythmOverlay> overLayers){
  mOverlays.addAll(overLayers);
  if (mCurrentOverlayIndex == NO_OVERLAY) {
    selectOverlay(0);
  }
  return this;
}",35,5,"overlays:overLayers,",44,0.1730047861735030,Beam
1022,"private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}","private synchronized boolean startChangesBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}",98,8,"pollStatsBroker:startChangesBroker,",4,0.019217936197916700,Beam
1023,"private static Object add(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}","private static Object plus(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}",184,8,"add:plus,",19,0.17295573949813800,Beam
1024,"private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}","private String extractScans(String spans,int mid,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (mid >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,mid - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}",79,8,"start:mid,extractSpan:extractScans,",275,1.1693989793459600,Beam
1025,"public EventBean[] toArray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}","public EventBean[] toarray(){
  if (firstElement == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstElement};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstElement;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}",92,6,"toArray:toarray,firstEvent:firstElement,",232,0.9894510706265770,Beam
1026,"private boolean checkForCarry(final char[] ca1,final int icarry){
  boolean carry=false;
  if (icarry < ca1.length) {
    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9') {
      carry=true;
    }
 else     if (ca1[icarry] == '5') {
      int ii=icarry + 1;
      for (; ii < ca1.length; ii++) {
        if (ca1[ii] != '0') {
          break;
        }
      }
      carry=ii < ca1.length;
      if (!carry && icarry > 0) {
        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');
      }
    }
  }
  return carry;
}","private boolean checkforScarry(final char[] ca1,final int icuffle){
  boolean carry=false;
  if (icuffle < ca1.length) {
    if (ca1[icuffle] == '6' || ca1[icuffle] == '7' || ca1[icuffle] == '8' || ca1[icuffle] == '9') {
      carry=true;
    }
 else     if (ca1[icuffle] == '5') {
      int ii=icuffle + 1;
      for (; ii < ca1.length; ii++) {
        if (ca1[ii] != '0') {
          break;
        }
      }
      carry=ii < ca1.length;
      if (!carry && icuffle > 0) {
        carry=(ca1[icuffle - 1] == '1' || ca1[icuffle - 1] == '3' || ca1[icuffle - 1] == '5' || ca1[icuffle - 1] == '7' || ca1[icuffle - 1] == '9');
      }
    }
  }
  return carry;
}",184,5,"checkForCarry:checkforScarry,icarry:icuffle,",182,3.9120734453201300,Beam
1027,"public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}","public void renameEditorpanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}",87,7,"renameEditorPanel:renameEditorpanel,",8,0.03362516164779660,Beam
1028,"public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){
  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());
}
","public static float generaterandomIntbetween(float lowerLimit,float upperlimit){
  return lowerLimit + ((upperlimit - lowerLimit) * _r.nextFloat());
}
",30,4,"generateRandomFloatBetween:generaterandomIntbetween,upperLimit:upperlimit,",78,0.4793691317240400,Beam
1029,,,77,5,,938,5.8749084830284100,0
1030,"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readExternal(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
","@Override public void readObject(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readObject(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
",38,5,"readExternal:readObject,",39,0.2334426999092100,Beam
1031,,,19,3,,457,1.9337443828582800,0
1032,,,25,3,,404,2.1853465398152700,0
1033,"private float checkSaturationValid(final float val){
  float tempval=val;
  if (val > 1) {
    tempval=1;
  }
  if (val < 0) {
    tempval=0;
  }
  return tempval;
}","private float checksaturatedInvalid(final float x){
  float tempval=x;
  if (x > 1) {
    tempval=1;
  }
  if (x < 0) {
    tempval=0;
  }
  return tempval;
}",42,3,"checkSaturationValid:checksaturatedInvalid,val:x,",65,0.37066814104716000,Beam
1034,,,83,7,,1227,6.798464580376940,0
1035,,,265,14,,2085,11.375468448797900,0
1036,"@Override protected void addChooserFilters(JFileChooser chooser){
  javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage(""FileFilterLabel"",""*.dfm, *.hex""),""dmf"",""hex"");
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Digitrax Mangled Firmware (*.dmf)"",""dmf""));
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Intel Hex Format Firmware (*.hex)"",""hex""));
  chooser.addChoosableFileFilter(filter);
  chooser.setFileFilter(filter);
}
","@Override protected void addChooserFillets(JFileChooser booker){
  javax.swing.filechooser.FileNameExtensionFilter config=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage(""FileFilterLabel"",""*.dfm, *.hex""),""dmf"",""hex"");
  booker.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Digitrax Mangled Firmware (*.dmf)"",""dmf""));
  booker.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Intel Hex Format Firmware (*.hex)"",""hex""));
  booker.addChoosableFileFilter(config);
  booker.setFileFilter(config);
}
",95,3,"addChooserFilters:addChooserFillets,chooser:booker,filter:config,",285,1.8761885285377500,Beam
1037,"public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}","public Matrix4 multiplyOneScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}",111,5,"multiplyByScale:multiplyOneScale,",47,0.21348613500595100,Beam
1039,,,48,3,,286,1.5097900907198600,0
1040,"private void loadDataFromService(){
  List<ExceptionSensorData> exData=null;
  if ((null != fromDate) && (null != toDate)) {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != exData) {
    exceptionSensorData.addAll(exData);
  }
}
","private void loadDataToService(){
  List<ExceptionSensorData> auxCode=null;
  if ((null != fromDate) && (null != toDate)) {
    auxCode=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    auxCode=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != auxCode) {
    exceptionSensorData.addAll(auxCode);
  }
}
",85,9,"loadDataFromService:loadDataToService,exData:auxCode,",319,2.2695120930671700,Beam
1041,"protected Instance specifier(int i){
  return m_Specifiers.get(i);
}
","protected Instance specifier(int info){
  return m_Specifiers.get(info);
}
",17,3,"i:info,",41,0.13492530584335300,Beam
1042,"public boolean containsWindow(Class<?> windowClass){
  return (getWindow(windowClass) != null);
}
","public boolean contatchesPackage(Class<?> widgetType){
  return (getWindow(widgetType) != null);
}
",22,2,"containsWindow:contatchesPackage,windowClass:widgetType,",71,0.3938065568606060,Beam
1043,,,14,1,,25,0.11210368076960200,0
1044,"@SuppressWarnings(""unchecked"") @Test public void innerEnum(){
  Class<?> pc=PlayingCard.class;
  List<Enum<?>> include=new ArrayList<>();
  List<Enum<?>> exclude=new ArrayList<>();
  for (  Class<?> c : pc.getDeclaredClasses()) {
    int mods=c.getModifiers();
    if (c.isEnum()) {
      if (Modifier.isPublic(mods)) {
        include.addAll(asList(c.getEnumConstants()));
      }
 else {
        exclude.addAll(asList(c.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> actual=getConcreteOperations(pc);
  assertEquals(""number of statements"",include.size() + 5,actual.size());
  for (  Enum<?> e : include) {
    assertTrue(""enum constant "" + e.name() + "" should occur"",actual.contains(createEnumOperation(e)));
  }
  for (  Enum<?> e : exclude) {
    assertFalse(""enum constant "" + e.name() + "" should not occur"",actual.contains(createEnumOperation(e)));
  }
}","@SuppressWarnings(""unchecked"") @Test public void innerAnums(){
  Class<?> pc=PlayingCard.class;
  List<Enum<?>> include=new ArrayList<>();
  List<Enum<?>> exclude=new ArrayList<>();
  for (  Class<?> c : pc.getDeclaredClasses()) {
    int mods=c.getModifiers();
    if (c.isEnum()) {
      if (Modifier.isPublic(mods)) {
        include.addAll(asList(c.getEnumConstants()));
      }
 else {
        exclude.addAll(asList(c.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> actual=getConcreteOperations(pc);
  assertEquals(""number of statements"",include.size() + 5,actual.size());
  for (  Enum<?> e : include) {
    assertTrue(""enum constant "" + e.name() + "" should occur"",actual.contains(createEnumOperation(e)));
  }
  for (  Enum<?> e : exclude) {
    assertFalse(""enum constant "" + e.name() + "" should not occur"",actual.contains(createEnumOperation(e)));
  }
}",233,8,"innerEnum:innerAnums,",8,0.04611780643463140,Beam
1045,"private static void removeLoopSafepoint(StructuredGraph graph){
  LoopBeginNode loopBegin=findFirstLoop(graph);
  loopBegin.disableSafepoint();
}
","private static void removeLoopSalfewacket(StructuredGraph graph){
  LoopBeginNode loopBegin=findFirstLoop(graph);
  loopBegin.disableSafepoint();
}
",24,3,"removeLoopSafepoint:removeLoopSalfewacket,",21,0.08611294825871790,Beam
1046,,,17,2,,145,0.5298304200172430,0
1047,,,244,11,,1898,16.278497366110500,0
1048,"public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
","public void runCommand(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runCommand(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
",94,5,"runScript:runCommand,",36,0.11792127291361500,Beam
1049,"public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}","public static byte[] divin(final List<byte[]> dataChairs){
  int totalSize=0;
  for (  final byte[] dataPart : dataChairs) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChairs) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}",96,6,"dataChunks:dataChairs,combine:divin,",103,0.4436998009681700,Beam
1050,"protected void recoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
","protected void reoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
",434,12,"recoverPrimary:reoverPrimary,",12,0.060859072208404500,Beam
1051,"public void addColumn(String name,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    addColumn(name,ex);
  }
}
","public void createcolumn(String name,String express){
  Expression ex=ExpressionParser.parse(express);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    createcolumn(name,ex);
  }
}
",56,5,"addColumn:createcolumn,expr:express,",118,0.452969225247701,Beam
1052,"public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
","public String Format(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
",103,8,"parse:Format,",58,0.25915728012720700,Beam
1053,"public static void discard(){
  current.remove();
}
","public static void discarded(){
  current.remove();
}
",14,2,"discard:discarded,",3,0.01235341231028240,Beam
1054,,,104,10,,2100,28.413607728481300,0
1056,"public static int numPixelsBetween(int x1,int y1,int x2,int y2){
  return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - y2),2.0));
}","public static int numPixelsbetween(int x1,int y1,int x2,int ytSecond){
  return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - ytSecond),2.0));
}",60,5,"numPixelsBetween:numPixelsbetween,y2:ytSecond,",147,0.6565854867299400,Beam
1057,"protected void addToGUI(JPanel gui,JTextField b,String cmd){
  b.setActionCommand(cmd);
  b.addActionListener(this);
  gui.add(b);
}
","protected void addTogui(JPanel ga,JTextField b,String cmd){
  b.setActionCommand(cmd);
  b.addActionListener(this);
  ga.add(b);
}
",36,4,"addToGUI:addTogui,gui:ga,",144,0.5247499068578080,Beam
1058,,,18,2,,270,1.203299097220100,0
1059,,,30,4,,452,1.9160518169403100,0
1060,"public void makeClass(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless);
}","public void buildCode(String str,boolean casable){
  for (int i=0; i < str.length(); i++)   buildCode(str.charAt(i),casable);
}",42,4,"makeClass:buildCode,caseless:casable,",239,1.1236369053522700,Beam
1061,"public static Function<Value,Value> ofValue(){
  return VALUE;
}
","public static Function<Value,Value> OFRule(){
  return VALUE;
}
",16,2,"ofValue:OFRule,",10,0.030200854937235500,Beam
1062,"public static String encodeUrl(final String str){
  return encode(str,""%20"");
}","public static String encodeUrl(final String exp){
  return encode(exp,""%20"");
}",19,2,"str:exp,",6,0.044473759333292600,Beam
1063,"public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(reader),sw,timeout);
  sw.close();
  return sw.toString();
}","public static String ToPretty(Reader file,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(file),sw,timeout);
  sw.close();
  return sw.ToPretty();
}",49,4,"reader:file,toString:ToPretty,",210,0.8958649237950640,Beam
1064,"public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}","public void ready(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}",170,7,"load:ready,",26,0.10184226830800400,Beam
1065,,,89,5,,1124,4.583181158701580,0
1066,"private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}","private static void d_ucumm(double[] a,double[] diff,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(diff != null) ? diff : new double[n];
  if (diff == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}",122,11,"agg:diff,",24,0.25533533891042100,Beam
1067,"public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}","public static String transform(String a,String buffer,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(buffer);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}",119,7,"b:buffer,replace:transform,",196,1.0597402373949700,Beam
1068,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
","@Override public void actionReumed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
",35,3,"actionPerformed:actionReumed,",7,0.02796765963236490,Beam
1069,"private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}","private void sendOperation(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}",386,17,"sendResource:sendOperation,",5,0.02977992296218870,Beam
1070,"private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : ast.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}
","private static IAbstractNode convertOr(final CommonTree est) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : est.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}
",62,3,"ast:est,",38,0.199748698870341,Beam
1071,"public List<String> makeURLList(String shard){
  List<String> urls=StrUtils.splitSmart(shard,""|"",true);
  for (int i=0; i < urls.size(); i++) {
    urls.set(i,buildUrl(urls.get(i)));
  }
  if (urls.size() > 1)   Collections.shuffle(urls,r);
  return urls;
}","public List<String> makeURLCister(String sharding){
  List<String> urlips=StrUtils.splitSmart(sharding,""|"",true);
  for (int i=0; i < urlips.size(); i++) {
    urlips.set(i,buildUrl(urlips.get(i)));
  }
  if (urlips.size() > 1)   Collections.shuffle(urlips,r);
  return urlips;
}",88,5,"shard:sharding,makeURLList:makeURLCister,urls:urlips,",591,3.223909576733910,Beam
1072,"public void and(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}","public void but(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}",69,5,"and:but,",35,0.17664892673492400,Beam
1073,,,17,2,,95,0.3405661384264630,0
1074,,,20,2,,280,4.634327828884130,0
1075,,,54,3,,79,0.30340865850448600,0
1076,"public boolean offer(E event,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(event)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(event));
    done=true;
    return true;
  }
 else   return false;
}
","public boolean future(E item,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(item)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(item));
    done=true;
    return true;
  }
 else   return false;
}
",77,8,"offer:future,event:item,",73,0.3940627932548520,Beam
1079,,,51,4,,498,2.679680581887560,0
1080,"protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}","protected void removeMarkors(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkors();
  repaint();
}",93,5,"removeMarkers:removeMarkors,",3,0.024239838123321500,Beam
1081,"private int determineMaxLevelRec(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);
  }
  return newLevel;
}","private int determinemaxLevelrec(int level,Node tv){
  int newLevel=level;
  for (Edge e=tv.getFirstOutEdge(); e != null; e=tv.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determinemaxLevelrec(level,e.getTarget()) + 1);
  }
  return newLevel;
}",68,5,"v:tv,determineMaxLevelRec:determinemaxLevelrec,",368,2.3953657348950700,Beam
1082,"public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
","public Decimal subfact(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subfact(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
",49,5,"subtract:subfact,",3,0.020853881041208900,Beam
1083,"public JavaFormatter(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){
  fLineDelimiter=lineDelimiter;
  fUseCodeFormatter=useCodeFormatter;
  fInitialIndentLevel=initialIndentLevel;
  fProject=project;
}
","public JavaFormatatter(String lineDelrimenter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){
  fLineDelimiter=lineDelrimenter;
  fUseCodeFormatter=useCodeFormatter;
  fInitialIndentLevel=initialIndentLevel;
  fProject=project;
}
",33,9,"JavaFormatter:JavaFormatatter,lineDelimiter:lineDelrimenter,",420,1.9768516381581600,Beam
1084,"public void removeEventListener(SIPTransactionEventListener oldListener){
  eventListeners.remove(oldListener);
}
","public void removeChangeHandler(SIPTransactionEventListener OldAdapter){
  eventListeners.remove(OldAdapter);
}
",16,3,"removeEventListener:removeChangeHandler,oldListener:OldAdapter,",69,0.23608771959940600,Beam
1085,,,39,4,,807,3.3500255227088900,0
1086,"public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
","public boolean condition(final Direction order,final boolean facing){
  if (this.order != order) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
",70,6,"check:condition,dir:order,",126,0.5537223378817240,Beam
1087,"private static long signFromBit_antiCyclic(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}","private static long bitsFromBit_antiCycyclik(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}",24,2,"signFromBit_antiCyclic:bitsFromBit_antiCycyclik,",19,0.1108929991722110,Beam
1088,"public boolean hasParameter(String name){
  return _parameters.hasParameter(name);
}
","public boolean includesReference(String name){
  return _parameters.includesReference(name);
}
",17,3,"hasParameter:includesReference,",53,0.22904247442881300,Beam
1089,"public void removeComponentListener(final ComponentUpdateListener listener){
  componentListeners.remove(listener);
}
","public void RemoveContainerListener(final ComponentUpdateListener lister){
  componentInstalleners.remove(lister);
}
",17,3,"removeComponentListener:RemoveContainerListener,listener:lister,componentListeners:componentInstalleners,",260,1.0155232270558700,Beam
1090,"public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}
","public viewrefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}
",39,7,"ViewRefRender:viewrefRender,",45,0.15043513774871800,Beam
1091,"public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){
  fn_=Objects.requireNonNull(fn);
  equality_=Objects.requireNonNull(equality);
}
","public InvoidsOne(Function<? super Input,? extends Output> o,BiPredicate<Input,Input> equality){
  fn_=Objects.requireNonNull(o);
  equality_=Objects.requireNonNull(equality);
}
",43,5,"fn:o,MemoidOne:InvoidsOne,",145,0.47099641561508200,Beam
1092,,,24,3,,313,1.4414408763249700,0
1093,"public Future<?> execute(CameraCommand command){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(command));
  }
}
","public Future<?> process(CameraCommand pattern){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecuter == null) {
      mExecuter=mExecutorProvider.get();
    }
    checkNotNull(mExecuter);
    return mExecuter.submit(new CommandRunnable(pattern));
  }
}
",65,6,"command:pattern,execute:process,mExecutor:mExecuter,",211,0.7433457016944890,Beam
1094,,,53,4,,899,4.681083846092220,0
1095,"public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}
","public static void orruption(final Thread thread){
  if (thread != null) {
    thread.orruption();
  }
}
",25,2,"interrupt:orruption,",9,0.04551737705866500,Beam
1097,"private boolean isValidEngine(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}","private boolean IsInvalidengine(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}",287,23,"isValidEngine:IsInvalidengine,",19,0.09312723875045780,Beam
1098,"public <T>T time(Callable<T> event) throws Exception {
  final long startTime=clock.tick();
  try {
    return event.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}
","public <T>T exec(Callable<T> error) throws Exception {
  final long startTime=clock.tick();
  try {
    return error.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}
",51,4,"event:error,time:exec,",136,0.5720337669054670,Beam
1099,"public ArrayList<String> GetElementList(String xPathExpression){
  try {
    ArrayList<String> values=new ArrayList<String>();
    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression);
    Iterator<?> iter=nodeList.iterator();
    while (iter.hasNext()) {
      org.jdom.Element element=(org.jdom.Element)iter.next();
      values.add(element.getText());
    }
    return values;
  }
 catch (  Exception ex) {
    LOG.error(""Error in handler: "" + ex.getMessage(),ex);
    return null;
  }
}
","public ArrayList<String> GetElementValue(String xPathExpression){
  try {
    ArrayList<String> values=new ArrayList<String>();
    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression);
    Iterator<?> iter=nodeList.iterator();
    while (iter.hasNext()) {
      org.jdom.Element element=(org.jdom.Element)iter.next();
      values.add(element.getText());
    }
    return values;
  }
 catch (  Exception ex) {
    LOG.error(""Error in handler: "" + ex.getMessage(),ex);
    return null;
  }
}
",127,7,"GetElementList:GetElementValue,",7,0.04259403546651210,Beam
1100,,,134,7,,1613,13.056087032953900,0
1101,"void remove(TcpServerThread t){
  running.remove(t);
}
","void un(TcpServerThread template){
  running.un(template);
}
",15,3,"remove:un,t:template,",113,0.4248462756474810,Beam
1102,"public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}","public static double plot(double z,double shape,double scale,double factor){
  if (z <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(z) - (scale / z) - GammaFunction.lnGamma(shape));
  return factor * a;
}",77,6,"pdf:plot,x:z,",185,0.8638705213864650,Beam
1103,"public static void sortSeqs(List<String> seqs){
  Collections.sort(seqs,null);
}
","public static void sortSeqs(List<String> seqings){
  Collections.sort(seqings,null);
}
",22,2,"seqs:seqings,",7,0.027203659216562900,Beam
1104,,,130,8,,1843,8.667308644453690,0
1105,"final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void value(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",77,6,"print:value,",12,0.03791469732920330,Beam
1106,"private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSchedule.arrivals);
    LOG.debug(""Original departures: {}"",originalSchedule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}","private TripSchedule rerouteTripSchedule(TripSchedule originalSydule){
  TripSchedule schedule=originalSydule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSydule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSydule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSydule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSydule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSydule.departures[ss] - originalSydule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSydule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSydule.arrivals);
    LOG.debug(""Original departures: {}"",originalSydule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}",429,19,"originalSchedule:originalSydule,",8,0.17031486034393300,Beam
1107,"public PWResetException(String bundleName,String errCode,Object[] args){
  super(bundleName,errCode,args);
  errList=new ArrayList(1);
  errList.add(getMessage());
}","public PWRESettingEvent(String bouterName,String errName,Object[] args){
  super(bouterName,errName,args);
  errList=new ArrayList(1);
  errList.add(getMessage());
}",42,5,"PWResetException:PWRESettingEvent,bundleName:bouterName,errCode:errName,",329,1.301995042959850,Beam
1108,"default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}
","default Filterable<T> addAll(final T... values){
  return addAll(Stream.of(values));
}
",25,2,"removeAll:addAll,",6,0.026343989372253400,Beam
1109,"private ArtLocateResult calculate_next_trace(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}","private ArtLocateResult relocate(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}",287,20,"calculate_next_trace:relocate,",15,0.46338892380396500,Beam
1110,,,132,4,,679,4.55646691719691,0
1111,"protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}
","protected void addSourceCodeRemark(TestSolution testSolution,Element element,String essageName,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,essageName,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,essageName);
  }
}
",73,7,"messageCode:essageName,",50,0.21326695283254000,Beam
1112,"public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}","public static double computeRAD(double[] s,double median){
  for (int i=0; i < s.length; i++) {
    s[i]=Math.abs(s[i] - median);
  }
  double mad=QuickSelect.median(s);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : s) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}",127,7,"computeMAD:computeRAD,x:s,",192,1.102435032526650,Beam
1113,"public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions){
  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size());
  HashSet<String> previousIds=new HashSet<String>();
  for (  ExecutionEntity execution : executions) {
    if (execution.getParentId() == null) {
      orderedList.add(execution);
      previousIds.add(execution.getId());
    }
  }
  while (orderedList.size() < executions.size()) {
    for (    ExecutionEntity execution : executions) {
      if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {
        orderedList.add(execution);
        previousIds.add(execution.getId());
      }
    }
  }
  return orderedList;
}
","public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> Execations){
  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(Execations.size());
  HashSet<String> previousIds=new HashSet<String>();
  for (  ExecutionEntity execution : Execations) {
    if (execution.getParentId() == null) {
      orderedList.add(execution);
      previousIds.add(execution.getId());
    }
  }
  while (orderedList.size() < Execations.size()) {
    for (    ExecutionEntity execution : Execations) {
      if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {
        orderedList.add(execution);
        previousIds.add(execution.getId());
      }
    }
  }
  return orderedList;
}
",161,5,"executions:Execations,",9,0.07583531936009730,Beam
1114,"public boolean matchesWord(){
  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));
}
","public boolean matusesword(){
  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(col));
}
",25,3,"matchesWord:matusesword,pos:col,",158,0.7885036786397300,Beam
1115,,,130,8,,1714,7.853827627499900,0
1116,"public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null)   return false;
  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}","public static boolean matchExpend(String title,Collection<String> variences){
  if (title == null)   return false;
  if (variences == null || variences.isEmpty())   return indexOfExtension(title) == -1;
  String fileExt=getExtension(title);
  for (  String extension : variences) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}",78,5,"filename:title,isExtension:matchExpend,extensions:variences,",371,5.197286427021030,Beam
1118,"public static void sessionStop(){
  if (mProcess == null)   return;
  mProcess.destroy();
  mProcess=null;
}
","public static void sessionKill(){
  if (mProcess == null)   return;
  mProcess.destroy();
  mProcess=null;
}
",26,2,"sessionStop:sessionKill,",6,0.015300901730855300,Beam
1119,"public void paint(Graphics g){
  try {
    super.paint(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}","public void plredict(Graphics gate){
  try {
    super.plredict(gate);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,gate,rect.x,rect.y,rect.width,rect.height);
    }
  }
}",112,6,"paint:plredict,g:gate,",141,1.3165472586949700,Beam
1120,,,248,11,,2312,12.119716362158500,0
1121,"void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
","void initDemandAndcollectionArray(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
",95,6,"initDemandAndCollectionMap:initDemandAndcollectionArray,",11,0.05284512440363570,Beam
1122,,,25,2,,238,1.954943799972530,0
1123,"public void remove(RequestFilter filter){
  filters.remove(filter);
}
","public void remove(RequestFilter search){
  filters.remove(search);
}
",16,3,"filter:search,",4,0.024509243170420300,Beam
1124,"private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
","private void change(final JLabel label,final JTextField property){
  panel.change(label);
  panel.change(property);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,property,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,property,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,property,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
",184,8,"add:change,field:property,",224,1.4483903964360600,Beam
1125,"public void doWindowOpen(){
  doConnect();
}
","public void doWindowsOpen(){
  doConnect();
}
",11,1,"doWindowOpen:doWindowsOpen,",4,0.0137688676516215,Beam
1126,,,102,12,,5729,49.51497054894770,0
1127,"private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}","private void addPingTimesArray(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}",85,5,"addPingTimeData:addPingTimesArray,",12,0.058893402417500800,Beam
1128,"private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xPos);
  spriteFrame.setTranslateY(yPos);
  this.xPos=xPos;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}","private Prition(float xiPosition,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xiPosition);
  spriteFrame.setTranslateY(yPos);
  this.xiPosition=xiPosition;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}",88,8,"Sprite:Prition,xPos:xiPosition,",416,1.6852605144182800,Beam
1129,,,26,3,,514,2.379037582874300,0
1131,,,177,5,,1083,4.738158992926280,0
1132,"public Object extractHardRef(Object o){
  SoftReference w=(SoftReference)o;
  if (w != null) {
    return w.get();
  }
  return null;
}
","public Object extractStrongReference(Object oi){
  SoftReference aw=(SoftReference)oi;
  if (aw != null) {
    return aw.get();
  }
  return null;
}
",35,3,"extractHardRef:extractStrongReference,o:oi,w:aw,",275,1.1154620488484700,Beam
1133,,,98,6,,2312,35.32012503147130,0
1134,"protected int chooseRandomIndexBasedOnProportions(double[] proportionArray,Random random){
  double probSum;
  double val;
  int index;
  double sum;
  probSum=Utils.sum(proportionArray);
  val=random.nextDouble() * probSum;
  index=0;
  sum=0.0;
  while ((sum <= val) && (index < proportionArray.length)) {
    sum+=proportionArray[index++];
  }
  return index - 1;
}","protected int chooseRandomIndexBasedOnProportor(double[] proportionArray,Random serial){
  double probSum;
  double val;
  int index;
  double sum;
  probSum=Utils.sum(proportionArray);
  val=serial.nextDouble() * probSum;
  index=0;
  sum=0.0;
  while ((sum <= val) && (index < proportionArray.length)) {
    sum+=proportionArray[index++];
  }
  return index - 1;
}",84,7,"random:serial,chooseRandomIndexBasedOnProportions:chooseRandomIndexBasedOnProportor,",177,2.029410799344380,Beam
1135,"public static String generateStringOfCharacters(int count){
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < count; i++) {
    sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));
  }
  return sb.toString();
}","public static String generateArrayOfCharacter(int call){
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < call; i++) {
    sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));
  }
  return sb.toString();
}",68,4,"count:call,generateStringOfCharacters:generateArrayOfCharacter,",52,0.49982693592707300,Beam
1136,,,192,7,,1809,15.01750651995340,0
1137,"public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}","public static Object[] setall(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.setall(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}",200,12,"putAll:setall,",10,0.04203871488571170,Beam
1138,,,197,13,,1474,8.261018172899880,0
1139,,,25,3,,329,1.2379580418268800,0
1140,,,35,3,,454,2.59541095495224,0
1141,,,81,7,,1382,5.532463622093200,0
1142,"@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
","@Override public void timeout(){
  try {
    if (connection != null) {
      connection.timeout();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
",39,3,"close:timeout,",13,0.039072116216023800,Beam
1143,"public OptionalInt maxByInt(IntUnaryOperator keyExtractor){
  int[] result=collect(null,null,null);
  return result[2] == 1 ? OptionalInt.of(result[0]) : OptionalInt.empty();
}","public OptionalInt maxbyint(IntUnaryOperator KeyExtressor){
  int[] order=collect(null,null,null);
  return order[2] == 1 ? OptionalInt.of(order[0]) : OptionalInt.empty();
}",47,3,"keyExtractor:KeyExtressor,maxByInt:maxbyint,result:order,",130,1.073910931746170,Beam
1144,"@Override public void paintIcon(Component c,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}","@Override public void paintCharacter(Component c,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}",102,12,"paintIcon:paintCharacter,",129,0.45516887108484900,Beam
1145,"public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
","public Phone newPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
",43,4,"createPhone:newPhone,",3,0.010548301537831600,Beam
1146,"@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
","@Override public PacketBuffer write(PacketBuffer v){
  values.forEach(null);
  return v;
}
",21,3,"buf:v,",19,0.06537642876307170,Beam
1147,"public static String randomRegexpishString(Random r){
  return randomRegexpishString(r,20);
}","public static String randomRegexpishFunction(Random r){
  return randomRegexpishFunction(r,20);
}",18,2,"randomRegexpishString:randomRegexpishFunction,",37,0.1968005379041040,Beam
1148,,,71,5,,500,2.024337677160900,0
1149,"private Response requestHttpGetFromRegistry(String url) throws RegistryException {
  try {
    Response resp=http.get(url);
    if (resp != null && resp.content != null) {
      return resp;
    }
 else {
      throw new RegistryException(TYPE.BAD_RESPONSE,""Response content is null"");
    }
  }
 catch (  ClassCastException e) {
    throw new RegistryException(TYPE.BAD_RESPONSE,e);
  }
catch (  ConnectException e) {
    throw new RegistryException(TYPE.PROXY,e);
  }
catch (  UnknownHostException e) {
    try {
      http.get(""http://www.google.com"");
    }
 catch (    Exception e1) {
      throw new RegistryException(TYPE.NO_INTERNET,e1);
    }
    throw new RegistryException(TYPE.SITE_DOWN,e);
  }
catch (  IOException e) {
    throw new RegistryException(TYPE.IO_ERROR,e);
  }
catch (  URISyntaxException e) {
    throw new RegistryException(TYPE.BAD_REQUEST,""Please check the request URL: "" + ((url != null) ? url : ""empty URL used!""));
  }
}","private Response requestHttpGetfromRegistries(String url) throws RegistryException {
  try {
    Response resp=http.get(url);
    if (resp != null && resp.content != null) {
      return resp;
    }
 else {
      throw new RegistryException(TYPE.BAD_RESPONSE,""Response content is null"");
    }
  }
 catch (  ClassCastException e) {
    throw new RegistryException(TYPE.BAD_RESPONSE,e);
  }
catch (  ConnectException e) {
    throw new RegistryException(TYPE.PROXY,e);
  }
catch (  UnknownHostException e) {
    try {
      http.get(""http://www.google.com"");
    }
 catch (    Exception e1) {
      throw new RegistryException(TYPE.NO_INTERNET,e1);
    }
    throw new RegistryException(TYPE.SITE_DOWN,e);
  }
catch (  IOException e) {
    throw new RegistryException(TYPE.IO_ERROR,e);
  }
catch (  URISyntaxException e) {
    throw new RegistryException(TYPE.BAD_REQUEST,""Please check the request URL: "" + ((url != null) ? url : ""empty URL used!""));
  }
}",185,6,"requestHttpGetFromRegistry:requestHttpGetfromRegistries,",12,0.15598742564519200,Beam
1150,,,69,4,,626,3.9058141867319700,0
1152,,,36,3,,453,2.406455353895820,0
1153,"private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){
  final Set<T> values=new HashSet<T>(collection.size());
  for (  final S instance : collection) {
    values.add(extractor.getValue(instance));
  }
  return values;
}
","private <S,T>Set<T> contend(final Collection<S> array,final Extractor<S,T> interractor){
  final Set<T> values=new HashSet<T>(array.size());
  for (  final S instance : array) {
    values.add(interractor.getValue(instance));
  }
  return values;
}
",75,5,"extract:contend,collection:array,extractor:interractor,",316,1.3197739283243800,Beam
1154,,,113,12,,2878,12.318775431315100,0
1155,"public static TypeBinding[] substitute(Substitution substitution,TypeBinding[] originalTypes){
  if (originalTypes == null)   return null;
  TypeBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    TypeBinding originalType=originalTypes[i];
    TypeBinding substitutedParameter=substitute(substitution,originalType);
    if (substitutedParameter != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new TypeBinding[length],0,i);
      }
      substitutedTypes[i]=substitutedParameter;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}","public static TypeBinding[] superstitution(Substitution ubscaration,TypeBinding[] originalTypes){
  if (originalTypes == null)   return null;
  TypeBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    TypeBinding originalType=originalTypes[i];
    TypeBinding substitutedParameter=superstitution(ubscaration,originalType);
    if (substitutedParameter != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new TypeBinding[length],0,i);
      }
      substitutedTypes[i]=substitutedParameter;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}",136,8,"substitute:superstitution,substitution:ubscaration,",204,1.1465101679166200,Beam
1156,"@Override public void step(MessageLogger logger){
  try {
    addAgent();
    env.step();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","@Override public void action(MessageLogger logger){
  try {
    addAgent();
    env.action();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",37,4,"step:action,",20,0.08525126377741500,Beam
1157,"public int size(){
  return al.size();
}
","public int start(){
  return acc.start();
}
",14,2,"size:start,al:acc,",100,0.32421030203501400,Beam
1158,,,16,3,,238,0.9197858373324080,0
1159,,,35,3,,370,1.7226384917895,0
1160,"public CloseableAnimatedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){
  Preconditions.checkNotNull(bitmaps);
  Preconditions.checkState(bitmaps.size() >= 1,""Need at least 1 frame!"");
  mBitmaps=new ArrayList<>();
  mBitmapReferences=new ArrayList<>();
  for (  Bitmap bitmap : bitmaps) {
    mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser));
    mBitmaps.add(bitmap);
  }
  mDurations=Preconditions.checkNotNull(durations);
  Preconditions.checkState(mDurations.size() == mBitmaps.size(),""Arrays length mismatch!"");
}","public CloseableAnizedBitMap(List<Bitmap> bitspacks,List<Integer> Duration,ResourceReleaser<Bitmap> resourceRelearer){
  Preconditions.checkNotNull(bitspacks);
  Preconditions.checkState(bitspacks.size() >= 1,""Need at least 1 frame!"");
  mBitmaps=new ArrayList<>();
  mBitmapReferences=new ArrayList<>();
  for (  Bitmap bitmap : bitspacks) {
    mBitmapReferences.add(CloseableReference.of(bitmap,resourceRelearer));
    mBitmaps.add(bitmap);
  }
  mDurations=Preconditions.checkNotNull(Duration);
  Preconditions.checkState(mDurations.size() == mBitmaps.size(),""Arrays length mismatch!"");
}",121,8,"CloseableAnimatedBitmap:CloseableAnizedBitMap,resourceReleaser:resourceRelearer,bitmaps:bitspacks,durations:Duration,",741,3.8626020272572800,Beam
1161,"public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
","public boolean decride(Runnable sync,ClassLoader processor){
  boolean isAuthority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(sync,processor,MAX_EXPIRE,isAuthority,isQueue,isWake);
}
",43,6,"schedule:decride,task:sync,loader:processor,isPriority:isAuthority,",682,5.073512999216720,Beam
1162,"public final void decRef() throws IOException {
  ensureOpen();
  final int rc=refCount.decrementAndGet();
  if (rc == 0) {
    boolean success=false;
    try {
      doClose();
      closed=true;
      success=true;
    }
  finally {
      if (!success) {
        refCount.incrementAndGet();
      }
    }
  }
 else   if (rc < 0) {
    throw new IllegalStateException(""too many decRef calls: refCount is "" + rc + "" after decrement"");
  }
}","public final void divReference() throws IOException {
  ensureOpen();
  final int rc=referenceCounter.decrementAndGet();
  if (rc == 0) {
    boolean success=false;
    try {
      doClose();
      closed=true;
      success=true;
    }
  finally {
      if (!success) {
        referenceCounter.incrementAndGet();
      }
    }
  }
 else   if (rc < 0) {
    throw new IllegalStateException(""too many decRef calls: refCount is "" + rc + "" after decrement"");
  }
}",88,5,"decRef:divReference,refCount:referenceCounter,",386,2.429132648309070,Beam
1163,,,53,5,,564,3.1468602061271700,0
1164,"public void reset(){
  displayCache.clear();
  cachedID.clear();
}
","public void empty(){
  displayCache.clear();
  cachedID.clear();
}
",19,3,"reset:empty,",12,0.049963168303171800,Beam
1165,"public double doubleValue(){
  return d.doubleValue();
}
","public double voidVal(){
  return rd.voidVal();
}
",14,2,"doubleValue:voidVal,d:rd,",71,0.33498825232187900,Beam
1166,"public void addRequestProperty(String key,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (key == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(key,value);
}
","public void addrequestProp(String string,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (string == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(string,value);
}
",58,5,"addRequestProperty:addrequestProp,key:string,",116,0.4802409251530970,Beam
1167,"public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){
  Objects.requireNonNull(notifications);
  final int position=indexOf(notifications,startId);
  if (position == -1) {
    return Iterables.limit(notifications,limitSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.skip(notifications,position),limitSize);
  }
  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);
}","public Iterable<Notification> link(@Nonnull final Iterable<Notification> ansices,final long startId,final boolean inclusive,final int limitSize){
  Objects.requireNonNull(ansices);
  final int position=indexOf(ansices,startId);
  if (position == -1) {
    return Iterables.limit(ansices,limitSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.link(ansices,position),limitSize);
  }
  return Iterables.limit(Iterables.link(ansices,position + 1),limitSize);
}",109,6,"skip:link,notifications:ansices,",210,0.9715577403704330,Beam
1168,"public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(clusterData,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf(""%s\\t"",n);
    for (    int m : c) {
      out.printf(""%d\\t"",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}
","public final void printcluster(PrintWriter out,List<ClusterData> clancerDATA,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(clancerDATA,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf(""%s\\t"",n);
    for (    int m : c) {
      out.printf(""%d\\t"",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}
",120,9,"clusterData:clancerDATA,printClusters:printcluster,",141,0.5940653045972190,Beam
1169,,,116,6,,1053,6.145644728342690,0
1170,"public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}","public static String replaceChars(String exp,String oldchars,char newchar){
  int pos=indexOfChars(exp,oldchars);
  if (pos == -1) {
    return exp;
  }
  StringBuilder buf=new StringBuilder(exp);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(exp,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}",87,6,"str:exp,",13,0.06324802239735920,Beam
1172,"public void serialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialize(serializer);
  serializer.endTag(ns,TAG);
}
","public void serialze(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialze(serializer);
  serializer.endTag(ns,TAG);
}
",87,6,"serialize:serialze,",4,0.016806407769521100,Beam
1173,"public AwsIotConnection(AbstractAwsIotClient client){
  this.client=client;
}
","public AwsIngotConnection(AbstractAwsIotClient client){
  this.client=client;
}
",14,2,"AwsIotConnection:AwsIngotConnection,",42,0.15816406806310000,Beam
1174,"public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return TRUE_AS_OF_SECS;
case 2:
  return SOURCE;
case 3:
return SYSTEM;
default :
return null;
}
}","public static _Fields findByChreatId(int fieldName){
switch (fieldName) {
case 1:
    return TRUE_AS_OF_SECS;
case 2:
  return SOURCE;
case 3:
return SYSTEM;
default :
return null;
}
}",39,5,"fieldId:fieldName,findByThriftId:findByChreatId,",108,0.6662188728650410,Beam
1175,"protected void waitForShutdownSignal() throws InterruptedException {
  if (mutexWaiting == null)   mutexWaiting=new Object();
  try {
synchronized (mutexWaiting) {
      mutexWaiting.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}
","protected void waitForShutdownSignalled() throws InterruptedException {
  if (mutexWaiting == null)   mutexWaiting=new Object();
  try {
synchronized (mutexWaiting) {
      mutexWaiting.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}
",52,4,"waitForShutdownSignal:waitForShutdownSignalled,",4,0.02008355458577470,Beam
1176,"public ElsaSerializerPojo make(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}","public ElsaSerializerPojo resolve(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}",41,8,"make:resolve,",23,0.12879791657129900,Beam
1177,,,23,3,,260,1.2398484468460100,0
1178,"@Override public void actOn(File f){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(f));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
","@Override public void reactOn(File io){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(io));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
",66,5,"actOn:reactOn,f:io,",73,0.3021897633870440,Beam
1179,,,39,3,,386,2.1455463647842400,0
1180,"protected void sendIntensity(double intensity){
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + intensity + "")""+ "" lastOutputStep: ""+ lastOutputStep+ "" maxDimStep: ""+ maxDimStep);
  }
  int newStep=(int)Math.round(intensity * maxDimStep);
  if ((newStep < 0) || (newStep > maxDimStep)) {
    log.error(""newStep wrong: "" + newStep + "" intensity: ""+ intensity);
  }
  if (newStep == 0) {
    if (log.isDebugEnabled()) {
      log.debug(""intensity "" + intensity + "" within current step, return"");
    }
    return;
  }
  X10Sequence out=new X10Sequence();
  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);
  tc.sendX10Sequence(out,null);
  lastOutputStep=newStep;
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + intensity + "") house ""+ X10Sequence.houseValueToText(housecode)+ "" device ""+ devicecode+ "" newStep: ""+ newStep);
  }
}","protected void sendINTenna(double integer){
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + integer + "")""+ "" lastOutputStep: ""+ lastOutputStep+ "" maxDimStep: ""+ maxDimStep);
  }
  int newStep=(int)Math.round(integer * maxDimStep);
  if ((newStep < 0) || (newStep > maxDimStep)) {
    log.error(""newStep wrong: "" + newStep + "" intensity: ""+ integer);
  }
  if (newStep == 0) {
    if (log.isDebugEnabled()) {
      log.debug(""intensity "" + integer + "" within current step, return"");
    }
    return;
  }
  X10Sequence out=new X10Sequence();
  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);
  tc.sendX10Sequence(out,null);
  lastOutputStep=newStep;
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + integer + "") house ""+ X10Sequence.houseValueToText(housecode)+ "" device ""+ devicecode+ "" newStep: ""+ newStep);
  }
}",185,10,"sendIntensity:sendINTenna,intensity:integer,",145,1.2900224049886100,Beam
1181,,,150,10,,1630,9.370200498898820,0
1182,,,60,4,,843,3.8522683938344300,0
1183,"private JPanel createImageFilePanel(){
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  panel.add(imageFileName);
  panel.add(Box.createHorizontalStrut(6));
  panel.add(new JButton(openImageFile));
  return panel;
}","private JPanel createImagePageButton(){
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  panel.add(imageFileName);
  panel.add(Box.createHorizontalStrut(6));
  panel.add(new JButton(openImageFile));
  return panel;
}",63,4,"createImageFilePanel:createImagePageButton,",14,0.060661709308624300,Beam
1184,,,39,4,,778,3.713619577884670,0
1185,"public boolean isSearchLightBit(int bit){
  if (nodeType != SMINI) {
    log.error(""Invalid query of Searchlights bits - not SMINI node"");
    return (false);
  }
  if ((bit < 0) || (bit > 47)) {
    log.error(""Invalid bit number in query of SMINI Searchlights bits: "" + Integer.toString(bit));
    return (false);
  }
  if (locSearchLightBits[bit] == 1) {
    return (true);
  }
  return (false);
}","public boolean issearchLightMask(int piece){
  if (nodeType != SMINI) {
    log.error(""Invalid query of Searchlights bits - not SMINI node"");
    return (false);
  }
  if ((piece < 0) || (piece > 47)) {
    log.error(""Invalid bit number in query of SMINI Searchlights bits: "" + Integer.toString(piece));
    return (false);
  }
  if (locSearchlightBbits[piece] == 1) {
    return (true);
  }
  return (false);
}",85,6,"isSearchLightBit:issearchLightMask,bit:piece,locSearchLightBits:locSearchlightBbits,",1120,5.645901878674830,Beam
1186,"public static boolean isUriKey(String key){
  return key.endsWith("".url"") || key.endsWith("".uri"");
}
","public static boolean isUrikey(String element){
  return element.endsWith("".url"") || element.endsWith("".uri"");
}
",25,2,"key:element,isUriKey:isUrikey,",90,0.4468621691068010,Beam
1187,"private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}","private Collection<ExtractedItemsCollection> filterItembylevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}",96,6,"filterItemsByLevel:filterItembylevel,",46,0.18138428131739300,Beam
1189,"protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}","protected void sqrintlayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}",402,23,"sqrtLayout:sqrintlayout,",15,0.138370414574941,Beam
1190,"public GeoDistanceBuilder addUnboundedFrom(String key,double from){
  ranges.add(new Range(key,from,null));
  return this;
}
","public GeoDistanceBuilder addUnboundedFrom(String type,double from){
  ranges.add(new Range(type,from,null));
  return this;
}
",30,4,"key:type,",66,0.30648301045099900,Beam
1191,,,17,1,,41,0.2725587884585060,0
1192,"public void close() throws IOException {
  flushBits();
  out.close();
}
","public void clear() throws IOException {
  flushBits();
  out.clear();
}
",19,2,"close:clear,",11,0.047221708297729500,Beam
1193,"public void cut(){
  copy();
  deleteSelectedObjects();
}
","public void all(){
  all();
  deleteSelectedObjects();
}
",15,1,"cut:all,",42,0.18554147879282600,Beam
1194,"private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}","private ServiceRegistrar[] buildServiceRegordrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}",73,6,"buildServiceRegistrar:buildServiceRegordrar,",4,0.01899481217066450,Beam
1196,"public SimpleSetupPanel(Experiment exp){
  this();
  setExperiment(exp);
}
","public SimplesetupButton(Experiment rep){
  this();
  setExperiment(rep);
}
",17,2,"SimpleSetupPanel:SimplesetupButton,exp:rep,",86,0.3032555143038430,Beam
1197,,,14,2,,237,0.8359835783640540,0
1199,"public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){
  try {
    PrincipalName princ=new PrincipalName(principal.getName());
    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);
    this.keyBytes=key.getBytes();
    this.keyType=key.getEType();
  }
 catch (  KrbException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
}
","public KeyImpl(KerberosPrincipal pritectinent,char[] password,String algorithm){
  try {
    PrincipalName princ=new PrincipalName(pritectinent.getName());
    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);
    this.keyBytes=key.getBytes();
    this.keyType=key.getEType();
  }
 catch (  KrbException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
}
",87,7,"principal:pritectinent,",6,0.031964369614919000,Beam
1200,"public ByteArrayDataSource(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}","public ByteArraydataSources(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}",95,9,"ByteArrayDataSource:ByteArraydataSources,",75,0.24911809364954600,Beam
1201,"public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
","public static void require(String route){
  String driver=getDriver(route);
  if (driver != null) {
    loadUserClass(driver);
  }
}
",31,3,"load:require,url:route,",64,0.2614453156789140,Beam
1202,"protected void throwParseException(ParseException e) throws ParseException {
  if (locator != null) {
    String elementLocation="""";
    if (curHandler != null) {
      elementLocation+="", element "" + curHandler.qName;
    }
    String location=""[Line "" + String.valueOf(locator.getLineNumber()) + "", Column ""+ String.valueOf(locator.getColumnNumber())+ elementLocation+ ""] "";
    LogUtils.logException(logger,Level.FINE,location,e);
    throw new ParseException(location + e.getMessage(),e);
  }
 else {
    LogUtils.logException(logger,Level.FINE,null,e);
    throw e;
  }
}
","protected void throwParparseError(ParseException error) throws ParseException {
  if (locatter != null) {
    String elementLocation="""";
    if (curHandler != null) {
      elementLocation+="", element "" + curHandler.qName;
    }
    String location=""[Line "" + String.valueOf(locatter.getLineNumber()) + "", Column ""+ String.valueOf(locatter.getColumnNumber())+ elementLocation+ ""] "";
    LogUtils.logException(logger,Level.FINE,location,error);
    throw new ParseException(location + error.getMessage(),error);
  }
 else {
    LogUtils.logException(logger,Level.FINE,null,error);
    throw error;
  }
}
",124,7,"throwParseException:throwParparseError,e:error,locator:locatter,",586,2.8752002080281600,Beam
1203,,,108,4,,566,5.554680629571280,0
1204,"private void stashRequestUser(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions=""{}"";
  }
}
","private void stashRequestUser(RequestAndResponse requestAndResp){
  if (requestAndResp.wasUserAlreadyStashed) {
    return;
  }
  requestAndResp.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResp));
  if (user != null) {
    requestAndResp.userIsAdmin=user.getIsAdmin();
    requestAndResp.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResp.userOptions=user.getOptions();
  }
 else {
    requestAndResp.userOptions=""{}"";
  }
}
",86,4,"requestAndResponse:requestAndResp,",6,0.04376816749572750,Beam
1205,,,31,5,,157,0.6016896367073060,0
1206,"protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}","protected double ernelHelp(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * ernelHelp(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}",178,16,"kernelHelper:ernelHelp,",139,0.7552124102910360,Beam
1207,"private static String unwrap(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}","private static String unwrap(String operation){
  if (operation.startsWith(""(("")) {
    operation=operation.substring(operation.indexOf("")"") + 1,operation.length() - 1);
    if (operation.endsWith(""]"")) {
      operation=operation.substring(0,operation.lastIndexOf(""[""));
    }
 else {
      operation=operation.substring(0,operation.lastIndexOf("".""));
    }
  }
  return operation;
}",94,2,"expression:operation,",3,0.04472130537033080,Beam
1209,,,172,9,,2419,13.274156951904300,0
1210,"public CodeAttribute createCode(){
  CodeAttribute code=new CodeAttribute();
  for (int i=0; i < _attributes.size(); i++) {
    Attribute attr=_attributes.get(i);
    if (attr instanceof CodeAttribute)     return (CodeAttribute)attr;
  }
  return null;
}","public CodeAttribute Createcode(){
  CodeAttribute code=new CodeAttribute();
  for (int i=0; i < _attributes.size(); i++) {
    Attribute kr=_attributes.get(i);
    if (kr instanceof CodeAttribute)     return (CodeAttribute)kr;
  }
  return null;
}",60,4,"createCode:Createcode,attr:kr,",137,0.6672556400299070,Beam
1211,"public Vector<Option> enumToVector(Enumeration<Option> enu){
  Vector<Option> options=new Vector<Option>();
  options.addAll(Collections.list(enu));
  return options;
}
","public Vector<Option> enumToPoint(Enumeration<Option> enu){
  Vector<Option> options=new Vector<Option>();
  options.addAll(Collections.list(enu));
  return options;
}
",44,3,"enumToVector:enumToPoint,",10,0.03966692288716630,Beam
1212,"private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}","private boolean isNotInArray(String str,String[] string){
  for (int i=0; i < string.length; i++) {
    if (str.equals(string[i])) {
      return false;
    }
  }
  return true;
}",52,4,"array:string,",34,0.20502834717432700,Beam
1213,"void addAttributeValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
","void setAttributeReferences(String varType,Set values) throws SMSException {
  if (varType != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(varType);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(varType,newValues);
    setAttributes(newAttrs);
  }
}
",105,7,"addAttributeValues:setAttributeReferences,attrName:varType,",266,1.2673830270767200,Beam
1214,,,71,3,,124,0.691246497631073,0
1215,"public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}","public static Object callstatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}",87,6,"invokeStatic:callstatic,",21,0.09431932369867960,Beam
1216,"private void attachImageFromCamera(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,""attachImageFromCamera fails to create thumbnail file"");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}","private void attachPhotofromCamera(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,""attachImageFromCamera fails to create thumbnail file"");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}",254,11,"attachImageFromCamera:attachPhotofromCamera,",25,0.1242270549138390,Beam
1217,"public void addLongSelectionListener(SelectionListener listener){
  if (listener == null)   throw new IllegalArgumentException();
  if (hexEditControl == null) {
    if (listOfLongListeners == null)     listOfLongListeners=new ArrayList<>();
    listOfLongListeners.add(listener);
  }
 else {
    hexEditControl.addLongSelectionListener(listener);
  }
}
","public void addLongSeectionEntry(SelectionListener selacher){
  if (selacher == null)   throw new IllegalArgumentException();
  if (hexEditControl == null) {
    if (listOfLongListenerers == null)     listOfLongListenerers=new ArrayList<>();
    listOfLongListenerers.add(selacher);
  }
 else {
    hexEditControl.addLongSeectionEntry(selacher);
  }
}
",61,4,"addLongSelectionListener:addLongSeectionEntry,listener:selacher,listOfLongListeners:listOfLongListenerers,",541,2.5928808172543800,Beam
1218,"private void showFilterDialog(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}","private void showWidgetButton(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}",55,4,"showFilterDialog:showWidgetButton,",42,0.15152832667032900,Beam
1219,"static void createPolicyTree(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {
  try {
    ServiceConfig pConfig=scm.getOrganizationConfig(org,null);
    if (pConfig == null) {
      scm.createOrganizationConfig(org,null);
      pConfig=scm.getOrganizationConfig(org,null);
    }
    pConfig.addSubConfig(configName,configId,0,null);
  }
 catch (  ServiceAlreadyExistsException se) {
    if (debug.messageEnabled()) {
      debug.message(""PolicyManager->createPolicyTree: Name: "" + configName + "" ID: ""+ configId+ "" Policy service already exists under org->""+ org);
    }
  }
catch (  SMSException e) {
    String[] objs={org};
    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {
      throw (new NoPermissionException(ResBundleUtils.rbName,""insufficient_access_rights"",null));
    }
 else {
      throw (new PolicyException(ResBundleUtils.rbName,""unable_to_create_policy_for_org"",objs,e));
    }
  }
}","static void createConfigTree(String configName,String configById,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {
  try {
    ServiceConfig pConfig=scm.getOrganizationConfig(org,null);
    if (pConfig == null) {
      scm.createOrganizationConfig(org,null);
      pConfig=scm.getOrganizationConfig(org,null);
    }
    pConfig.addSubConfig(configName,configById,0,null);
  }
 catch (  ServiceAlreadyExistsException se) {
    if (debug.messageEnabled()) {
      debug.message(""PolicyManager->createPolicyTree: Name: "" + configName + "" ID: ""+ configById+ "" Policy service already exists under org->""+ org);
    }
  }
catch (  SMSException e) {
    String[] objs={org};
    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {
      throw (new NoPermissionException(ResBundleUtils.rbName,""insufficient_access_rights"",null));
    }
 else {
      throw (new PolicyException(ResBundleUtils.rbName,""unable_to_create_policy_for_org"",objs,e));
    }
  }
}",179,9,"configId:configById,createPolicyTree:createConfigTree,",520,2.5113410989443500,Beam
1220,,,25,3,,664,3.150256597995760,0
1221,"public static void scaleRectAboutCenter(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}","public static void scaleRectAroundCenter(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}",127,5,"scaleRectAboutCenter:scaleRectAroundCenter,",3,0.017256120840708400,Beam
1222,"private static void processArgs(String[] args){
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.equals(""-o"")) {
      outputDir=args[++i];
    }
 else     if (arg.equals(""-spec"")) {
      unicodeData=args[++i];
    }
 else     if (arg.equals(""-language"")) {
      language=args[++i];
    }
 else     if (arg.equals(""-country"")) {
      country=args[++i];
    }
 else     if (arg.equals(""-valiant"")) {
      valiant=args[++i];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}","private static void processFlags(String[] args){
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.equals(""-o"")) {
      outputDir=args[++i];
    }
 else     if (arg.equals(""-spec"")) {
      unicodeData=args[++i];
    }
 else     if (arg.equals(""-language"")) {
      language=args[++i];
    }
 else     if (arg.equals(""-country"")) {
      country=args[++i];
    }
 else     if (arg.equals(""-valiant"")) {
      valiant=args[++i];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}",150,10,"processArgs:processFlags,",5,0.019581166903177900,Beam
1223,,,15,2,,199,0.8219701011975610,0
1224,,,163,16,,2682,12.871836292743700,0
1225,,,47,6,,1157,4.232256925106050,0
1227,"private void executeClaimedTask(ClaimedTask claimedTask){
  if (!claimedTask.setStartTime(new Date())) {
    _log.info(""Claimed task is overdue; range not scanned: {}"",claimedTask.getTask());
    return;
  }
  ScanRangeTask task=claimedTask.getTask();
  boolean releaseTask=false;
  try {
    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);
    releaseTask=asyncRangeScan(task);
  }
  finally {
    unclaimTask(claimedTask,releaseTask);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}
","private void executeClaimableTransaction(ClaimedTask placedWork){
  if (!placedWork.setStartTime(new Date())) {
    _log.info(""Claimed task is overdue; range not scanned: {}"",placedWork.getTask());
    return;
  }
  ScanRangeTask session=placedWork.getTask();
  boolean releaseTask=false;
  try {
    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(session),QUEUE_RENEW_TTL);
    releaseTask=asyncRangeScan(session);
  }
  finally {
    unclaimTask(placedWork,releaseTask);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}
",94,8,"claimedTask:placedWork,executeClaimedTask:executeClaimableTransaction,task:session,",229,2.0991750439008100,Beam
1228,"private void loadMap(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
","private void readmap(String expackage,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,expackage);
  }
  extensionToMimeTypeMap.put(expackage,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
",58,6,"loadMap:readmap,extension:expackage,",212,1.077254045009610,Beam
1229,"void copyInto(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}","void CopyIntO(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}",27,3,"copyInto:CopyIntO,",22,0.08391786019007370,Beam
1230,"private static Position nextTokenPos(Position pos,Token[][] spec){
  if (pos == null) {
    return null;
  }
  int nextItem=pos.item + 1;
  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {
    return new Position(pos.line,nextItem);
  }
  int nextLine=pos.line + 1;
  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}","private static Position nexttokenPos(Position pos,Token[][] spec){
  if (pos == null) {
    return null;
  }
  int nextItem=pos.item + 1;
  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {
    return new Position(pos.line,nextItem);
  }
  int nextLine=pos.line + 1;
  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}",172,5,"nextTokenPos:nexttokenPos,",7,0.036852669715881300,Beam
1231,"private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}","private String processLogoutRequest(LogoutState p,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(p.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}",183,9,"t:p,",3,0.03895259698232020,Beam
1232,"private static a createImageLink(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){
  a img=new a(""#"",createImage(AD_Language,name));
  if (!pressed || !enabled)   img.setID(""imgButtonLink"");
 else   img.setID(""imgButtonPressedLink"");
  if (js_command == null)   js_command=""\'Submit\'"";
  if (js_command.length() > 0 && enabled) {
    if (js_command.startsWith(""startPopup""))     img.setOnClick(js_command);
 else     img.setOnClick(""SubmitForm(\'"" + name + ""\', ""+ js_command+ "",\'toolbar\');return false;"");
  }
  img.setClass(""ToolbarButton"");
  img.setOnMouseOver(""window.status=\'"" + name + ""\';return true;"");
  img.setOnMouseOut(""window.status=\'\';return true;"");
  img.setOnBlur(""this.hideFocus=false"");
  return img;
}","private static a createimageLink(String ad_language,String name,String js_command,boolean enabled,boolean confirmed){
  a img=new a(""#"",createImage(ad_language,name));
  if (!confirmed || !enabled)   img.setID(""imgButtonLink"");
 else   img.setID(""imgButtonPressedLink"");
  if (js_command == null)   js_command=""\'Submit\'"";
  if (js_command.length() > 0 && enabled) {
    if (js_command.startsWith(""startPopup""))     img.setOnClick(js_command);
 else     img.setOnClick(""SubmitForm(\'"" + name + ""\', ""+ js_command+ "",\'toolbar\');return false;"");
  }
  img.setClass(""ToolbarButton"");
  img.setOnMouseOver(""window.status=\'"" + name + ""\';return true;"");
  img.setOnMouseOut(""window.status=\'\';return true;"");
  img.setOnBlur(""this.hideFocus=false"");
  return img;
}",152,7,"createImageLink:createimageLink,pressed:confirmed,AD_Language:ad_language,",1232,4.810429120063780,Beam
1233,"public synchronized void commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
","public synchronized void destruct(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
",75,6,"commit:destruct,",23,0.10034834543863900,Beam
1234,,,19,2,,285,0.9671980897585550,0
1236,,,89,11,,2788,10.430618039766900,0
1237,,,13,2,,55,0.1930538853009540,0
1238,,,122,8,,1703,9.039321684837340,0
1239,"public void output(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}","public void content(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}",41,3,"output:content,",10,0.060599112510681200,Beam
1240,"private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
","private static void check(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
",337,11,"assertChangeEvents:check,",19,0.27153255939483600,Beam
1241,"@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","@Override protected synchronized void append(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",60,4,"write:append,",71,0.33819650014241500,Beam
1242,"public String text(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}
","public String transform(){
  StringBuilder fb=new StringBuilder();
  for (  Node object : nodes) {
    fb.append(object.getTextContent());
  }
  return fb.toString();
}
",42,4,"text:transform,sb:fb,node:object,",185,0.864056134223938,Beam
1243,,,41,3,,119,0.5254759510358180,0
1244,"boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}","boolean setBytes() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}",161,9,"writeData:setBytes,",10,0.04426800807317100,Beam
1245,"@Override public final void writeBoolean(boolean v) throws IOException {
  dis.writeBoolean(v);
}
","@Override public final void writeBOool(boolean iv) throws IOException {
  dis.writeBOool(iv);
}
",21,3,"writeBoolean:writeBOool,v:iv,",111,0.4553658286730450,Beam
1246,"public int loadSigned16(int addr){
  return loadSigned16(addr,AccessSource.CODE);
}","public int loadServed16(int addr){
  return loadServed16(addr,AccessSource.CODE);
}",19,2,"loadSigned16:loadServed16,",6,0.02937458356221520,Beam
1248,"private ImageElement(int AD_PrintFormatItem_ID){
  loadAttachment(AD_PrintFormatItem_ID);
}
","private ImageElement(int AD_PrintFormatItemNameURL){
  loadAttachment(AD_PrintFormatItemNameURL);
}
",13,2,"AD_PrintFormatItem_ID:AD_PrintFormatItemNameURL,",15,0.04316205581029260,Beam
1250,,,41,3,,244,0.9743593851725260,0
1252,"public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}","public static void r(String str,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    str=String.format(str,args);
  }
  Log.wtf(tag,str);
}",76,8,"msg:str,f:r,",61,0.1842462658882140,Beam
1253,"private void changeValue(AbstractStorageLabel<Object> label,Object newValue){
  if (!Objects.equals(label.getValue(),newValue)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.preLabelValueChange(label);
      }
    }
    label.setValue(newValue);
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.postLabelValueChange(label);
      }
    }
  }
}
","private void updateLabel(AbstractStorageLabel<Object> url,Object newValue){
  if (!Objects.equals(url.getValue(),newValue)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.preLabelValueChange(url);
      }
    }
    url.setValue(newValue);
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.postLabelValueChange(url);
      }
    }
  }
}
",84,5,"changeValue:updateLabel,label:url,",212,0.7500267148017880,Beam
1254,"private boolean zzRefill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzPushbackPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzBuffer.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);
    zzBuffer=newBuffer;
  }
  final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}","private boolean zzyRefresh() throws java.io.IOException {
  if (zzStartReading > 0) {
    System.arraycopy(zzBuff,zzStartReading,zzBuff,0,zzEndRead - zzStartReading);
    zzEndRead-=zzStartReading;
    zzCurrentPos-=zzStartReading;
    zzMarkedPos-=zzStartReading;
    zzPushbackPos-=zzStartReading;
    zzStartReading=0;
  }
  if (zzCurrentPos >= zzBuff.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuff,0,newBuffer,0,zzBuff.length);
    zzBuff=newBuffer;
  }
  final int numRead=zzReader.read(zzBuff,zzEndRead,zzBuff.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}",143,10,"zzRefill:zzyRefresh,zzBuffer:zzBuff,zzStartRead:zzStartReading,",1351,6.744281796614330,Beam
1255,"public boolean revisionContainsTemplateName(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}
","public boolean revisionContaintemplateString(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}
",33,3,"revisionContainsTemplateName:revisionContaintemplateString,",42,0.20967581669489500,Beam
1256,,,61,4,,107,0.6406609455744430,0
1257,,,133,16,,2908,12.24043364127480,0
1258,"public void load(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
","public void add(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
",19,4,"load:add,",3,0.013520344098409000,Beam
1259,,,27,2,,286,1.5352299054463700,0
1260,"@Override public Point translateJava2DToScreen(Point2D java2DPoint){
  Insets insets=getInsets();
  int x=(int)(java2DPoint.getX() * this.scaleX + insets.left);
  int y=(int)(java2DPoint.getY() * this.scaleY + insets.top);
  return new Point(x,y);
}","@Override public Point translateJava2d2screen(Point2D java2DPpoint){
  Insets insETS=getInsets();
  int x=(int)(java2DPpoint.getX() * this.scaleX + insETS.left);
  int y=(int)(java2DPpoint.getY() * this.scaleY + insETS.top);
  return new Point(x,y);
}",71,5,"translateJava2DToScreen:translateJava2d2screen,java2DPoint:java2DPpoint,insets:insETS,",521,2.8100385506947800,Beam
1261,"private float calculateScrambleImageHeightMultiplier(float multiplier){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return multiplier / 2;
case PuzzleUtils.TYPE_MEGA:
return (multiplier / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(multiplier / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return multiplier;
}
return multiplier;
}","private float calculateScrambleImageHeightDivipliers(float multiplier){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return multiplier / 2;
case PuzzleUtils.TYPE_MEGA:
return (multiplier / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(multiplier / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return multiplier;
}
return multiplier;
}",121,3,"calculateScrambleImageHeightMultiplier:calculateScrambleImageHeightDivipliers,",12,0.15328360001246100,Beam
1262,"public static DataSet readContinuous(File file,char delimiter) throws IOException {
  return readInContinuousData(file,delimiter,Collections.singleton(""MULT""));
}
","public static DataSet writeContinuous(File file,char delimiter) throws IOException {
  return readInContinuousData(file,delimiter,Collections.singleton(""MULT""));
}
",30,3,"readContinuous:writeContinuous,",8,0.03813561201095580,Beam
1263,,,39,6,,1407,6.20736573934555,0
1264,"public void testFloatValueNeg(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}","public void assertFloatValuesAbs(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}",40,4,"testFloatValueNeg:assertFloatValuesAbs,",24,0.11332002878189100,Beam
1265,,,96,9,,1119,5.33812305132548,0
1267,,,77,5,,712,2.8427268067995700,0
1268,"public void clear(){
  infoQueue.clear();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastAllocationOffset=allocationLength;
}","public void stop(){
  infoQueue.stop();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastInvignmentIndex=allocationLength;
}",51,9,"clear:stop,lastAllocationOffset:lastInvignmentIndex,",117,0.4807006319363910,Beam
1269,"private static double hackyAdjuster(double f){
  double tmp=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));
}","private static double hackyFixer(double q){
  double tmp=Math.sqrt(1.0 - q);
  return (q <= 0.5) ? tmp : tmp + (0.01 * (q - 0.5));
}",43,3,"hackyAdjuster:hackyFixer,f:q,",70,0.8953224341074630,Beam
1270,"private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}","private void setup(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}",260,9,"drawHook:setup,",45,0.21062623659769700,Beam
1271,"@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedFiles.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedFiles,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedFiles);
}
","@NotNull protected VirtualFile[] collectAffectedfiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedFiles.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedFiles,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedFiles);
}
",117,6,"collectAffectedFiles:collectAffectedfiles,",6,0.033909436066945400,Beam
1273,"public void clear(){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  selection.clear();
  if (!oldSelection.isEmpty()) {
    fireSelectionChanged(oldSelection,selection);
  }
}
","public void move(){
  Set<Sensor> oldSllection=new HashSet<Sensor>(selection);
  selection.move();
  if (!oldSllection.isEmpty()) {
    fireSelectionChanged(oldSllection,selection);
  }
}
",46,3,"clear:move,oldSelection:oldSllection,",66,0.2510390281677250,Beam
1274,"public int add(T dl,int row){
  _list.add(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}
","public int post(T ld,int feed){
  _list.post(feed,ld);
  fireTableRowsInserted(feed,feed);
  return feed;
}
",31,4,"add:post,row:feed,dl:ld,",535,2.1969167391459100,Beam
1276,"static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}","static TokenStream wrap(String fieldKey,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldKey) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldKey + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldKey,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldKey,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldKey,indexAnalyzer,content,splitChar,splitCharIdx);
}",109,7,"fieldName:fieldKey,",26,0.1672414183616640,Beam
1277,"public void testNegNegFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",-1,result.signum());
}","public void execute(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",-1,result.signum());
}",261,11,"testNegNegFirstShorter:execute,",28,0.14085848331451400,Beam
1278,"@Override public String findLibrary(String name){
  String systemName=System.mapLibraryName(name);
  ArrayList<Loader> loaders=getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    Loader loader=loaders.get(i);
    Path path=loader.getPath(systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
    path=loader.getPath(""native/"" + systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int i=0; i < _nativePath.size(); i++) {
    Path path=_nativePath.get(i);
    if (path.canRead())     return path.getNativePath();
  }
  return super.findLibrary(name);
}","@Override public String loadDirectory(String name){
  String systemName=System.mapLibraryName(name);
  ArrayList<Loader> loaders=getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    Loader loader=loaders.get(i);
    Path path=loader.getPath(systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
    path=loader.getPath(""native/"" + systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int i=0; i < _nativePath.size(); i++) {
    Path path=_nativePath.get(i);
    if (path.canRead())     return path.getNativePath();
  }
  return super.loadDirectory(name);
}",177,9,"findLibrary:loadDirectory,",47,0.23681717713673900,Beam
1279,"public boolean longLabel(){
  return fState.longLabel;
}
","public boolean doublelabel(){
  return fState.doublelabel;
}
",12,1,"longLabel:doublelabel,",8,0.03321077028910320,Beam
1280,"public boolean nextTile() throws ModelControlException {
  boolean movedToRow=super.nextTile();
  if (movedToRow) {
    curTile=getTileIndex();
    setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx);
    setDisplayFieldValue(TXT_CHOICE,choices[curTile]);
    setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile));
  }
  return movedToRow;
}
","public boolean prevCell() throws ModelControlException {
  boolean movedFromServer=super.prevCell();
  if (movedFromServer) {
    curPod=getTileIndex();
    setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx);
    setDisplayFieldValue(TXT_CHOICE,choices[curPod]);
    setDisplayFieldValue(TXT_INDEX,Integer.toString(curPod));
  }
  return movedFromServer;
}
",62,6,"nextTile:prevCell,movedToRow:movedFromServer,curTile:curPod,",769,4.037608969211580,Beam
1282,"@VisibleForTesting protected void startExecutor(final int container){
  LOG.info(""Starting a new executor for container: "" + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info(""Started the executor for container: "" + container);
  startExecutorMonitor(container,containerExecutor);
}
","@VisibleForTesting protected void startCompution(final int container){
  LOG.info(""Starting a new executor for container: "" + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info(""Started the executor for container: "" + container);
  startExecutorMonitor(container,containerExecutor);
}
",55,4,"startExecutor:startCompution,",45,0.17642576297124200,Beam
1283,"public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException {
  this.baseUrl=baseUrl;
  this.requestFactory=requestFactory;
  try {
    final URL baseUrlURL=new URL(baseUrl);
    final String protocol=baseUrlURL.getProtocol();
    if (!(protocol.equals(""http"") || protocol.equals(""https""))) {
      throw new IllegalArgumentException(String.format(""Invalid URL: %s"",baseUrl));
    }
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(String.format(""Invalid URL: %s"",baseUrl));
  }
}
","public RemoteServiceDescributor(String baseUrl,HttpJsonRequestFactory RequestFactory) throws IllegalArgumentException {
  this.baseUrl=baseUrl;
  this.RequestFactory=RequestFactory;
  try {
    final URL baseUrlURL=new URL(baseUrl);
    final String technometry=baseUrlURL.getProtocol();
    if (!(technometry.equals(""http"") || technometry.equals(""https""))) {
      throw new IllegalArgumentException(String.format(""Invalid URL: %s"",baseUrl));
    }
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(String.format(""Invalid URL: %s"",baseUrl));
  }
}
",104,5,"RemoteServiceDescriptor:RemoteServiceDescributor,requestFactory:RequestFactory,protocol:technometry,",635,3.016391090552010,Beam
1284,"@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
","@Override public void docttypeBlock(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
",77,10,"doctypeDecl:docttypeBlock,",12,0.07765789826711020,Beam
1285,"protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}
","protected void delay(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.delay(sleepMillis,sleepNanos);
}
",23,3,"sleep:delay,",3,0.019879961013793900,Beam
1286,"public int retrieveRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}","public int retrievingRowcount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}",71,5,"retrieveRowCount:retrievingRowcount,",10,0.031761229038238500,Beam
1287,"public static void flush(){
  clearBuffer();
  try {
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public static void write(){
  clearBuffer();
  try {
    out.write();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",34,3,"flush:write,",13,0.052877541383107500,Beam
1288,,,71,7,,975,4.892979677518210,0
1289,"public static <T>Stream<T> concat(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static <T>Stream<T> interat(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
",128,5,"concat:interat,",67,1.3403395692507400,Beam
1290,"public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}","public static Uri addMessageToSuRI(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}",169,11,"addMessageToUri:addMessageToSuRI,",74,0.28537991444269800,Beam
1291,"public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
","public VNXeCommandJob modifyLRunBackground(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
",49,6,"modifyLunAsync:modifyLRunBackground,",65,0.1798287510871890,Beam
1292,"public static GenericObjectEditorDialog createDialog(Container parent){
  return createDialog(parent,null);
}
","public static GenericObjectEditorDialog currentGUI(Container element){
  return currentGUI(element,null);
}
",18,2,"createDialog:currentGUI,parent:element,",157,0.5907757679621380,Beam
1293,"public long next(){
  long result=-1l;
  if (cache < 0L && bufferElements > 0) {
    result=getNextFromBuffer();
    bufferElements--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}","public long call(){
  long order=-1l;
  if (cache < 0L && bufferElements > 0) {
    order=getNextFromBuffer();
    bufferElements--;
  }
 else {
    order=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (order > first || order == -1L) {
      cs.remove(first);
      cache=order;
      order=first;
    }
  }
  if (order == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < order,EC.GENERAL);
  previous=order;
  readElements++;
  return order;
}",132,8,"next:call,result:order,",45,0.26511344909668000,Beam
1294,"public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}","public String convertSWFToDOM(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}",98,9,"convertSWFToHTML:convertSWFToDOM,",34,0.14632288217544600,Beam
1295,,,143,7,,258,1.0775750438372300,0
1296,,,33,2,,222,0.7994402329126990,0
1297,,,92,7,,1185,7.2184138059616100,0
1298,,,37,3,,444,1.9906299153963700,0
1299,,,12,1,,19,0.069733460744222,0
1300,,,137,9,,1851,17.990989291667900,0
1301,"public void exportSymbols(String[] exportNames,Symbol[] symbols){
  if (exportedSymbols == null) {
    exportedSymbols=new ArrayList();
  }
  for (int i=0; i < exportNames.length && i < symbols.length; i++) {
    exportedSymbols.add(new ExportedSymbol(symbols[i],exportNames[i]));
  }
}","public void exportSymbles(String[] exportNames,Symbol[] symbolic){
  if (exportedSymbols == null) {
    exportedSymbols=new ArrayList();
  }
  for (int i=0; i < exportNames.length && i < symbolic.length; i++) {
    exportedSymbols.add(new ExportedSymbol(symbolic[i],exportNames[i]));
  }
}",74,5,"symbols:symbolic,exportSymbols:exportSymbles,",109,0.5252206206321720,Beam
1302,,,52,3,,231,1.1921512206395500,0
1303,,,35,4,,764,3.160898462931320,0
1304,"public static boolean hasTaxonomyInfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
","public static boolean hastaxonomyinfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
",91,6,"hasTaxonomyInfo:hastaxonomyinfo,",52,0.2952720046043400,Beam
1305,,,34,4,,816,4.14887318611145,0
1306,"protected abstract boolean validateNumber(ConversationContext context,Number input);
","protected abstract boolean validateInteger(ConversationContext context,Number input);
",12,3,"validateNumber:validateInteger,",30,0.1142545223236080,Beam
1307,,,32,6,,147,0.5130780339241030,0
1308,,,1226,33,,2630,20.180091925462100,0
1309,"void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}","void fixompacy(View head){
  Queue<View> queue=new LinkedList<View>();
  queue.add(head);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}",98,6,"root:head,fixCompatibility:fixompacy,",118,1.4165360848108900,Beam
1310,"private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
","private void doNormalCommandBlockPart(List<String> commandLineList,List<String> juntOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(juntOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
",190,12,"doNormalCommandLineList:doNormalCommandBlockPart,jointOptions:juntOptions,",476,2.4804009914398200,Beam
1311,,,285,11,,2180,17.37081480026250,0
1312,"@Override public int hashCode(){
  return type << 16 | value.hashCode() << 8 | otherValue.hashCode();
}","@Override public int hashcode(){
  return data << 16 | value.hashcode() << 8 | otherValue.hashcode();
}",28,4,"hashCode:hashcode,type:data,",28,0.12706923882166500,Beam
1313,,,100,7,,1620,7.914358488718670,0
1314,"void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}","void OnMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}",176,15,"onMoved:OnMoved,",5,0.03853383461634320,Beam
1315,,,23,1,,49,0.2786956866582240,0
1316,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
","public void addFooterView(View va,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=va;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
",66,8,"v:va,",61,2.1330515861511200,Beam
1318,"private static boolean isMerge(InstructionHandle handle){
  if (handle.hasTargeters()) {
    InstructionTargeter[] targeterList=handle.getTargeters();
    for (    InstructionTargeter targeter : targeterList) {
      if (targeter instanceof BranchInstruction) {
        return true;
      }
    }
  }
  return false;
}
","private static boolean ismerged(InstructionHandle hand){
  if (hand.hasTargeters()) {
    InstructionTargeter[] targeterList=hand.getTargeters();
    for (    InstructionTargeter targener : targeterList) {
      if (targener instanceof BranchInstruction) {
        return true;
      }
    }
  }
  return false;
}
",54,4,"handle:hand,isMerge:ismerged,targeter:targener,",161,1.0043651262919100,Beam
1319,"public QDate(){
  this(_gmtTimeZone);
}
","public DBFormat(){
  this(_gmtTimePart);
}
",11,2,"QDate:DBFormat,_gmtTimeZone:_gmtTimePart,",48,0.1858051617940270,Beam
1320,,,20,3,,387,1.5042094349861100,0
1321,"public static String padLeft(String str,int totalChars){
  if (str == null)   str=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append("" "");
  }
  sb.append(str);
  return sb.toString();
}","public static String paddingRight(String sp,int totalChars){
  if (sp == null)   sp=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - sp.length(); i++) {
    sb.append("" "");
  }
  sb.append(sp);
  return sb.toString();
}",74,5,"padLeft:paddingRight,str:sp,",65,0.6094635049502060,Beam
1322,"public static boolean stringToBooleanValue(String str) throws ExpressionException {
  str=StringUtil.toLowerCase(str.trim());
  if (str.equals(""yes"") || str.equals(""true""))   return true;
 else   if (str.equals(""no"") || str.equals(""false""))   return false;
  throw new CasterException(""Can\'t cast String ["" + str + ""] to boolean"");
}
","public static boolean stringToBoozeValues(String sp) throws ExpressionException {
  sp=StringUtil.toLowerCase(sp.trim());
  if (sp.equals(""yes"") || sp.equals(""true""))   return true;
 else   if (sp.equals(""no"") || sp.equals(""false""))   return false;
  throw new CasterException(""Can\'t cast String ["" + sp + ""] to boolean"");
}
",75,2,"stringToBooleanValue:stringToBoozeValues,str:sp,",58,0.2825371185938520,Beam
1323,"public static Object newInstance(Class<?> cl,int[] dims){
  if (dims.length == 0) {
    dims=new int[]{1};
  }
  return Array.newInstance(cl,dims);
}","public static Object getInstance(Class<?> self,int[] dims){
  if (dims.length == 0) {
    dims=new int[]{1};
  }
  return Array.getInstance(self,dims);
}",48,3,"newInstance:getInstance,cl:self,",121,0.6045798420906070,Beam
1324,,,42,6,,189,0.8684982061386110,0
1325,,,30,2,,166,0.9519647002220150,0
1326,"public static <E extends Identifiable>List<E> findByPrimaryKeys(EntityManager em,List<BigInteger> ids,Class<E> type){
  requireArgument(em != null,""The entity manager cannot be null."");
  requireArgument(ids != null && !ids.isEmpty(),""IDs cannot be null or empty."");
  requireArgument(type != null,""The entity type cannot be null."");
  TypedQuery<E> query=em.createNamedQuery(""JPAEntity.findByPrimaryKeys"",type);
  query.setHint(""javax.persistence.cache.storeMode"",""REFRESH"");
  try {
    query.setParameter(""ids"",ids);
    query.setParameter(""deleted"",false);
    return query.getResultList();
  }
 catch (  NoResultException ex) {
    return new ArrayList<>(0);
  }
}","public static <E extends Identifiable>List<E> findByIdNames(EntityManager em,List<BigInteger> ids,Class<E> type){
  requireArgument(em != null,""The entity manager cannot be null."");
  requireArgument(ids != null && !ids.isEmpty(),""IDs cannot be null or empty."");
  requireArgument(type != null,""The entity type cannot be null."");
  TypedQuery<E> query=em.createNamedQuery(""JPAEntity.findByPrimaryKeys"",type);
  query.setHint(""javax.persistence.cache.storeMode"",""REFRESH"");
  try {
    query.setParameter(""ids"",ids);
    query.setParameter(""deleted"",false);
    return query.getResultList();
  }
 catch (  NoResultException ex) {
    return new ArrayList<>(0);
  }
}",132,5,"findByPrimaryKeys:findByIdNames,",115,0.5263514558474220,Beam
1327,"@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
","@Override public void ignorableWhitespace(XMLString content,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(content.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(content.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(content.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
",155,15,"text:content,",4,0.05576006174087520,Beam
1329,"private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}","private static void length(InputStream in,byte[] Buff,int pos,int n) throws IOException {
  int length=0;
  int res=0;
  while (length < n) {
    res=in.length(Buff,length + pos,n - length);
    if (res > 0) {
      length+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + length + "" of ""+ n);
    }
  }
}",86,6,"read:length,buf:Buff,",309,1.3076228459676100,Beam
1330,,,16,3,,345,1.108062175909680,0
1331,"public boolean hasChanged(){
  return System.identityHashCode(config) != initialHash;
}
","public boolean HasChanges(){
  return System.identityHashCode(config) != initialHash;
}
",17,3,"hasChanged:HasChanges,",10,0.03789416551589970,Beam
1332,,,30,4,,121,0.4177639722824100,0
1333,"public static void writeUint8(OutputStream theOs,int theValue) throws IOException {
  theOs.write(theValue);
}","public static void writeFint64(OutputStream theFs,int theValue) throws IOException {
  theFs.write(theValue);
}",22,3,"writeUint8:writeFint64,theOs:theFs,",130,0.5095263640085860,Beam
1334,,,120,6,,1759,10.591573079427100,0
1335,"public boolean needPreloadKey(int idx){
  return preloadKeys != null && preloadKeys.get(idx);
}
","public boolean needPreloadKey(int idx){
  return postloadKeys != null && postloadKeys.get(idx);
}
",21,3,"preloadKeys:postloadKeys,",80,0.4259160041809080,Beam
1336,"public boolean remove(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.remove(classname);
  }
 else {
    return false;
  }
}
","public boolean without(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.without(classname);
  }
 else {
    return false;
  }
}
",63,5,"remove:without,",62,0.2529444893201190,Beam
1337,,,36,3,,350,2.135119092464450,0
1338,"private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}","private void divide(int[] idx,double[] data,ArrayList<int[]> re,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    re.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      re.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,re,start,pos,depth - 1);
  divide(idx,data,re,pos,end,depth - 1);
}",274,14,"ret:re,",13,0.1214800794919330,Beam
1339,"protected void handleAutoDraw(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
","protected void manageAutoDraw(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
",22,1,"handleAutoDraw:manageAutoDraw,",4,0.03128362496693930,Beam
1340,"public void evict() throws Exception {
  assertOpen();
  boolean isEmpty;
synchronized (this) {
    isEmpty=pool.isEmpty();
  }
  if (!isEmpty) {
    if (softMinEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle() - getMinIdle();
      evict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);
    }
    if (minEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle();
      evict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);
    }
  }
}","public void ovict() throws Exception {
  assertOpen();
  boolean isEmpty;
synchronized (this) {
    isEmpty=pool.isEmpty();
  }
  if (!isEmpty) {
    if (softMinEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle() - getMinIdle();
      ovict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);
    }
    if (minEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle();
      ovict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);
    }
  }
}",97,6,"evict:ovict,",20,0.23375942707061800,Beam
1342,"public Configuration loadConfigFromResource(Resource resource){
  PropertiesConfiguration result=new PropertiesConfiguration();
  try {
    result.load(resource.getInputStream());
    return result;
  }
 catch (  ConfigurationException|IOException e) {
    LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
  }
}
","public Configuration loadConfigWithresource(Resource resource){
  PropertiesConfiguration result=new PropertiesConfiguration();
  try {
    result.load(resource.getInputStream());
    return result;
  }
 catch (  ConfigurationException|IOException e) {
    LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
  }
}
",79,4,"loadConfigFromResource:loadConfigWithresource,",53,0.1761278748512270,Beam
1343,"@Override public void perform(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}","@Override public void Perdo(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}",148,6,"perform:Perdo,",13,0.053976043065389000,Beam
1344,"public boolean isLandingPage(URL url){
  if (url.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(url) != """";
  }
}
","public boolean islandishingLine(URL url){
  if (url.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(url) != """";
  }
}
",35,2,"isLandingPage:islandishingLine,",19,0.0717640240987142,Beam
1345,,,199,15,,5390,223.2669132868450,0
1346,"public static int convertLatmToY(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}","public static int convertLatmtoy(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}",68,5,"convertLatmToY:convertLatmtoy,",23,0.0942975123723348,Beam
1347,"@Override public boolean isInitial(){
  return init;
}
","@Override public boolean startFinal(){
  return init;
}
",12,2,"isInitial:startFinal,",9,0.039026522636413600,Beam
1349,"public static String encode(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    encode(dLat,result);
    encode(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}","public static String zenoding(final Coordinate[] peinates){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : peinates) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    zenoding(dLat,result);
    zenoding(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}",113,10,"encode:zenoding,coords:peinates,",105,0.567152452468872,Beam
1350,,,82,7,,1080,4.964969917138420,0
1351,"private static void writeSpaces(Writer out,int amt) throws IOException {
  while (amt > 0) {
    out.write(' ');
    amt--;
  }
}","private static void WritePlans(Writer file,int AMte) throws IOException {
  while (AMte > 0) {
    file.write(' ');
    AMte--;
  }
}",33,3,"amt:AMte,writeSpaces:WritePlans,out:file,",418,1.8819435199101800,Beam
1352,"private boolean isPageBreak(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}","private boolean isPageBreaking(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}",74,5,"isPageBreak:isPageBreaking,",3,0.01287159522374470,Beam
1353,,,34,3,,402,1.8522618412971500,0
1354,"public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}","public void setShortline(String infoLine,int labelFormater){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelFormater);
  }
}",43,5,"displayInfoLine:setShortline,labelDesignator:labelFormater,",91,0.3762196977933250,Beam
1355,"public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}","public void insertObject(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}",60,4,"addElement:insertObject,",36,0.15797354380289700,Beam
1356,,,52,5,,643,2.2780481219291700,0
1357,"public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){
  StringBuilder builder=new StringBuilder();
  int index=0;
  for (; index < noDictionaryDimsMapping.length; index++) {
    builder.append(noDictionaryDimsMapping[index]);
    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();
  return str;
}","public static String convertBooleanArrsToStr(Boolean[] noDictionaryDimsMapping){
  StringBuilder builder=new StringBuilder();
  int index=0;
  for (; index < noDictionaryDimsMapping.length; index++) {
    builder.append(noDictionaryDimsMapping[index]);
    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();
  return str;
}",96,6,"convertBooleanArrToString:convertBooleanArrsToStr,",10,0.07101578712463380,Beam
1358,,,27,2,,222,0.9777897477149960,0
1359,"public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}","public static Vector tokenizerstring(String source,String separoder){
  if (separoder.length() == 1) {
    return tokenizerstring(source,separoder.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separoder.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}",169,8,"tokenizeString:tokenizerstring,separator:separoder,",190,0.9569087028503420,Beam
1360,"protected void removeClassifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}","protected void removeLabifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}",63,4,"removeClassifiers:removeLabifiers,",36,0.18495694001515700,Beam
1361,,,83,5,,160,4.480343433221180,0
1362,,,121,6,,337,2.5232009927431700,0
1363,"public void componentResized(ComponentEvent e){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""Size changed: "" + getWidth() + "" x ""+ getHeight());
  }
  projection.setWidth(getWidth());
  projection.setHeight(getHeight());
  fireProjectionChanged();
}
","public void applicationResendered(ComponentEvent E){
  if (Logged.isLoggable(Level.FINE)) {
    Logged.fine(""Size changed: "" + getWidth() + "" x ""+ getHeight());
  }
  projection.setWidth(getWidth());
  projection.setHeight(getHeight());
  fireProjectionChanged();
}
",61,4,"componentResized:applicationResendered,e:E,logger:Logged,",197,0.9242471973101300,Beam
1364,"boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){
  if (!window.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=window.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isStateChange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
","boolean isPowerchange(XDecoratedPeer driver,XPropertyEvent e){
  if (!driver.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=driver.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isPowerchange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
",165,7,"window:driver,isStateChange:isPowerchange,",333,2.0421494126319900,Beam
1365,"public Prototype undump(InputStream stream,String chunkname) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(stream,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}","public Prototype undUMP(InputStream source,String chunkname) throws IOException {
  if (source.read() != LUA_SIGNATURE[0] || source.read() != LUA_SIGNATURE[1] || source.read() != LUA_SIGNATURE[2] || source.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(source,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}",129,9,"stream:source,undump:undUMP,",178,0.872179381052653,Beam
1366,"StoppableReadLock(ReadWriteLock lock,CancelCriterion stopper){
  this.lock=lock.readLock();
  this.stopper=stopper;
}
","StableReadLOCK(ReadWriteLock lock,CancelCriterion stopper){
  this.lock=lock.readLock();
  this.stopper=stopper;
}
",26,3,"StoppableReadLock:StableReadLOCK,",77,0.31657607555389400,Beam
1367,"public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
","public static void initializePropertyperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
",140,10,"initializeProperties:initializePropertyperties,",36,0.1471450130144760,Beam
1368,"public boolean add(symbol sym) throws internal_error {
  Object previous;
  not_null(sym);
  previous=_all.put(sym.name(),sym);
  return previous == null;
}
","public boolean with(symbol syn) throws internal_error {
  Object envious;
  not_null(syn);
  envious=_all.put(syn.name(),syn);
  return envious == null;
}
",39,4,"add:with,sym:syn,previous:envious,",288,1.3603616913159700,Beam
1369,"public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileProjects(Arrays.asList(new File(""."")),projects,Collections.emptyList(),issueAcceptor);
}","public void compilationBuilds(List<File> packages,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compilationBuilds(Arrays.asList(new File(""."")),packages,Collections.emptyList(),issueAcceptor);
}",41,3,"compileProjects:compilationBuilds,projects:packages,",91,0.3384002645810450,Beam
1370,,,87,5,,987,3.7961217403411900,0
1371,,,132,10,,361,1.650361450513200,0
1372,"public void goToCurrentDay(){
  int monthDifference=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth);
  Calendar cal=Calendar.getInstance();
  selectedDateItem.setDay(cal.get(Calendar.DAY_OF_MONTH));
  selectedDateItem.setMonth(cal.get(Calendar.MONTH));
  selectedDateItem.setYear(cal.get(Calendar.YEAR));
  if (disableAutoDateSelection) {
    this.userSelectedItem=selectedDateItem.clone();
  }
  if (monthDifference != 0) {
    resetAdapters=true;
    if (monthDifference < 0) {
      monthInfPagerAdapter.setFakeCount(lastPosition);
      monthInfPagerAdapter.notifyDataSetChanged();
    }
    shouldOverrideComputedDate=true;
    moveToPosition(monthDifference);
  }
 else {
    FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER);
    currentlyVisibleAdapter.notifyDataSetChanged();
  }
}","public void goToCurrentDay(){
  int monthInfchange=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth);
  Calendar cal=Calendar.getInstance();
  selectedDateRow.setDay(cal.get(Calendar.DAY_OF_MONTH));
  selectedDateRow.setMonth(cal.get(Calendar.MONTH));
  selectedDateRow.setYear(cal.get(Calendar.YEAR));
  if (disableAutoDateSelection) {
    this.userSelectedItem=selectedDateRow.clone();
  }
  if (monthInfchange != 0) {
    resetAdapters=true;
    if (monthInfchange < 0) {
      monthInfPagerAdapter.setFakeCount(lastPosition);
      monthInfPagerAdapter.notifyDataSetChanged();
    }
    shouldOverrideComputedDate=true;
    moveToPosition(monthInfchange);
  }
 else {
    FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER);
    currentlyVisibleAdapter.notifyDataSetChanged();
  }
}",151,13,"monthDifference:monthInfchange,selectedDateItem:selectedDateRow,",416,2.4486793557802800,Beam
1373,,,262,13,,2531,14.805322706699400,0
1374,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    agg(value);
  }
}
","@Override public void comp(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    comp(value);
  }
}
",93,6,"agg:comp,",5,0.02894370953241980,Beam
1375,,,123,5,,1076,6.088016279538470,0
1376,"public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (entries) {
    entries.remove(alias.toLowerCase(Locale.ENGLISH));
  }
}
","public void onDeleteElement(String alias) throws KeyStoreException {
synchronized (entries) {
    entries.remove(alias.toLowerCase(Locale.ENGLISH));
  }
}
",31,3,"engineDeleteEntry:onDeleteElement,",39,0.16727749506632500,Beam
1377,"@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}","@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjecterences(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}",363,17,"loadDBObjects:loadDBObjecterences,",38,0.1484639565149940,Beam
1378,,,67,3,,558,2.59019406636556,0
1379,"public void updatePendingList(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable pending=mPendingList.get(0);
    pending.changeStatusState(new ActiveState(pending));
  }
}","public void updatePendedQueue(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable possible=mPendingList.get(0);
    possible.changeStatusState(new ActiveState(possible));
  }
}",44,3,"updatePendingList:updatePendedQueue,pending:possible,",28,0.10149051745732600,Beam
1380,"private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
","private static AlgorithmParameterSpec alivParametersSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
",45,3,"algorithmParameterSpec:alivParametersSpec,",16,0.0665120800336202,Beam
1381,,,40,3,,287,1.5590219934781400,0
1382,,,34,5,,860,9.048543039957680,0
1383,"public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}
","public static <T>UnaryOperator<List<T>> perm(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream ins){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,ins,formatter) : new Udid(mbsBackup,out,ins,new ArrayList<>(commandLineUdids));
}
",85,6,"from:perm,in:ins,",218,2.1820939938227300,Beam
1384,"private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
","private void load(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
",46,2,"init:load,",3,0.012858708699544300,Beam
1385,,,103,7,,1709,9.296649213631950,0
1386,"public List<String> reset(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
","public List<String> pair(List<String> result){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (result != null) {
    retainedVars.addAll(result);
  }
  return copy;
}
",65,4,"replace:result,reset:pair,",105,0.4373960057894390,Beam
1387,,,50,4,,648,10.692706227302600,0
1388,"public static void mergeNodeChildren(TreeNode node){
  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;
  for (int i=0; i < masterNode.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);
    }
  }
}","public static void mergerChildChild(TreeNode data){
  DefaultMutableTreeNode masterTree=(DefaultMutableTreeNode)data;
  for (int i=0; i < masterTree.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterTree.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergerChildChild(DEFAULT_MERGE_TYPE,child);
    }
  }
}",71,5,"mergeNodeChildren:mergerChildChild,node:data,masterNode:masterTree,",227,1.098087728023530,Beam
1389,"public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){
  Element element=document.createElement(""array"");
  element.setAttribute(""name"",name);
  for (  String value : values) {
    Element valueElement=document.createElement(""item"");
    valueElement.appendChild(document.createTextNode(value));
    element.appendChild(valueElement);
  }
  resourceElement.appendChild(element);
  return this;
}
","public ResourcesPoet addTypifiedResource(String name,@NotNull List<String> rules){
  Element element=document.createElement(""array"");
  element.setAttribute(""name"",name);
  for (  String value : rules) {
    Element valueElement=document.createElement(""item"");
    valueElement.appendChild(document.createTextNode(value));
    element.appendChild(valueElement);
  }
  resourceElement.appendChild(element);
  return this;
}
",84,8,"addTypedArray:addTypifiedResource,values:rules,",1259,5.055637840429940,Beam
1390,,,35,3,,618,2.7501209656397500,0
1391,"public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.add(item);
}
","public void get(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.get(item);
}
",58,3,"add:get,",13,0.0545583446820577,Beam
1392,"private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}","private static void drawGroup(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawGroup(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}",246,9,"drawShape:drawGroup,",69,0.3035894870758060,Beam
1393,"private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}","private static boolean overlapping(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}",270,14,"calculateGap:overlapping,",117,0.7295903285344440,Beam
1394,"public void delete(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    delete(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    delete(token,subOrg);
  }
  delete(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}","public void get(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    get(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    get(token,subOrg);
  }
  get(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}",122,6,"delete:get,",50,0.19618208010991400,Beam
1395,"public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
","public void end() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
",21,2,"close:end,",4,0.017264183362325000,Beam
1396,"public void rebuildPanel(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
","public void ReloadScreen(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
",61,5,"rebuildPanel:ReloadScreen,",15,0.06016042232513430,Beam
1397,,,96,4,,715,2.575619320074720,0
1398,,,17,2,,227,1.3714202841122900,0
1399,,,29,3,,397,1.9601695577303600,0
1400,,,103,5,,432,2.332844007015230,0
1401,"public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}","public JarInfo getZip() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}",239,14,"loadJar:getZip,",9,0.03775570789972940,Beam
1402,"@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){
  return isInsideSoftWrap(visual,false);
}
","@Override public boolean isInsidesoftWrawrap(@NotNull VisualPosition physical){
  return isInsidesoftWrawrap(physical,false);
}
",21,2,"visual:physical,isInsideSoftWrap:isInsidesoftWrawrap,",73,0.5020391782124840,Beam
1403,"@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}","@Override protected String dateFromString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}",66,3,"dateToString:dateFromString,",38,0.13614699840545700,Beam
1404,"public boolean clear(){
  try {
    list.clear();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
","public boolean create(){
  try {
    list.create();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
",33,2,"clear:create,",20,0.0878897468249003,Beam
1405,"public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}
","public void put(String shape,HiddenAttribute attribute,Object value){
  put(shape,attribute.toString(),value);
}
",28,4,"sample:shape,",47,0.19887112776438400,Beam
1406,,,180,8,,3173,16.255024254322100,0
1407,"protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {
  Properties props=new Properties();
  props.load(is);
  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);
  String oldPrefix=getPropertyPrefix();
  setProperties(null,props);
  setPropertyPrefix(oldPrefix);
}
","protected void configureWithproproperties(InputStream is,String rootDirectory) throws IOException {
  Properties props=new Properties();
  props.load(is);
  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);
  String oldPrefix=getPropertyPrefix();
  setProperties(null,props);
  setPropertyPrefix(oldPrefix);
}
",57,5,"configureFromProperties:configureWithproproperties,",75,0.27115681568781500,Beam
1408,"public static byte[] createDataToSign(byte[] digest){
  byte[] prefix=getDigestInfoPrefix(digest);
  byte[] digestInfo=new byte[prefix.length + digest.length];
  System.arraycopy(prefix,0,digestInfo,0,prefix.length);
  System.arraycopy(digest,0,digestInfo,prefix.length,digest.length);
  return digestInfo;
}","public static byte[] createPasswordInSign(byte[] digester){
  byte[] prefix=getDigestInfoPrefix(digester);
  byte[] digestInfo=new byte[prefix.length + digester.length];
  System.arraycopy(prefix,0,digestInfo,0,prefix.length);
  System.arraycopy(digester,0,digestInfo,prefix.length,digester.length);
  return digestInfo;
}",80,4,"createDataToSign:createPasswordInSign,digest:digester,",71,0.29642155170440700,Beam
1409,"void start(){
  this.running=true;
  Thread thread=new Thread(this,""IceConnector@"" + hashCode());
  thread.setDaemon(true);
  thread.start();
}
","void spawn(){
  this.running=true;
  Thread loop=new Thread(this,""IceConnector@"" + hashCode());
  loop.setDaemon(true);
  loop.spawn();
}
",40,2,"start:spawn,thread:loop,",97,0.37810545365015700,Beam
1410,"private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
","private Object findParcel(@NonNull byte[] addressArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(addressArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
",88,6,"objectArray:addressArray,",6,0.03482494751612350,Beam
1411,"@Override public void addAttribute(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}","@Override public void addElement(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}",59,5,"addAttribute:addElement,",6,0.02016871372858680,Beam
1412,"public void adjustIndentation(int delta){
  if (delta < 0) {
    indentationLevel=Math.max(0,indentationLevel + delta);
  }
 else {
    indentationLevel+=delta;
  }
}","public void adjustindENTuation(int dimelt){
  if (dimelt < 0) {
    indentationLevel=Math.max(0,indentationLevel + dimelt);
  }
 else {
    indentationLevel+=dimelt;
  }
}",37,3,"adjustIndentation:adjustindENTuation,delta:dimelt,",134,0.6312981367111210,Beam
1413,,,50,5,,762,3.566592041651410,0
1414,"protected void generateRandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}","protected void genercerandompopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}",92,8,"generateRandomPopulation:genercerandompopulation,",20,0.07163993120193480,Beam
1415,"public static int computeStringWidth(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}","public static int compateStringwidth(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}",25,3,"computeStringWidth:compateStringwidth,",50,0.24704811970392900,Beam
1417,"private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));
    mat[i]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}","private double[] CalcVariableCoef(Variogram variogram,KrigingPoint x,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - x.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - x.y,2)));
    mat[i]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}",142,8,"p:x,",12,0.1253202478090920,Beam
1418,"public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
","public boolean addProperty(OwlProperty route){
  route.addRestriction(this);
  return properties.add(route);
}
",24,3,"property:route,",18,0.09429894288380940,Beam
1419,"public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
","public static byte[] writealllimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
",41,4,"readAllLimited:writealllimited,",75,0.41015392939249700,Beam
1420,,,59,5,,726,2.6706491708755500,0
1421,,,34,3,,292,1.010875157515210,0
1422,"public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
","public boolean IfFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(longlog))   _log.log(longlog,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
",82,9,"toFail:IfFail,_level:longlog,",29,0.14655404090881300,Beam
1424,,,25,3,,442,2.112219484647120,0
1425,,,139,14,,4302,17.655596605936700,0
1426,,,55,4,,514,2.2643059929211900,0
1427,"public QuickActionView addAction(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
","public QuickActionView createButton(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
",23,3,"addAction:createButton,",9,0.02897942066192630,Beam
1428,"public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}","public static void calctLineStyle(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}",71,6,"calcTextSize:calctLineStyle,",16,0.11843702793121300,Beam
1429,"private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){
  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray());
  StringBuilder newLabel=new StringBuilder();
  newLabel.append(trustedSrc.getLabel());
  newLabel.append(""-target-"");
  newLabel.append(invalidTgtVA.getLabel());
  log.info(""Revised name for target: "" + newLabel.toString());
  invalidTgt.setLabel(newLabel.toString());
  NamedURI projectURI=invalidTgt.getProject();
  projectURI.setName(newLabel.toString());
  invalidTgt.setProject(projectURI);
  NamedURI tenantURI=invalidTgt.getTenant();
  tenantURI.setName(newLabel.toString());
  invalidTgt.setTenant(tenantURI);
  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt);
  if (tgtVplexVolume != null) {
    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc);
    if (srcVplexVolume != null) {
      newLabel.setLength(0);
      newLabel.append(srcVplexVolume.getLabel());
      newLabel.append(""-target-"");
      newLabel.append(invalidTgtVA.getLabel());
      log.info(""Revised name for VPlex target: "" + newLabel.toString());
      tgtVplexVolume.setLabel(newLabel.toString());
      projectURI=tgtVplexVolume.getProject();
      projectURI.setName(newLabel.toString());
      tgtVplexVolume.setProject(projectURI);
      tenantURI=tgtVplexVolume.getTenant();
      tenantURI.setName(newLabel.toString());
      tgtVplexVolume.setTenant(tenantURI);
      dbClient.updateAndReindexObject(tgtVplexVolume);
    }
  }
}","private void revision(Volume trustedMsrc,Volume invalidTft){
  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTft.getVirtualArray());
  StringBuilder newLabel=new StringBuilder();
  newLabel.append(trustedMsrc.getLabel());
  newLabel.append(""-target-"");
  newLabel.append(invalidTgtVA.getLabel());
  log.info(""Revised name for target: "" + newLabel.toString());
  invalidTft.setLabel(newLabel.toString());
  NamedURI projectURI=invalidTft.getProject();
  projectURI.setName(newLabel.toString());
  invalidTft.setProject(projectURI);
  NamedURI tenancyURI=invalidTft.getTenant();
  tenancyURI.setName(newLabel.toString());
  invalidTft.setTenant(tenancyURI);
  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTft);
  if (tgtVplexVolume != null) {
    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedMsrc);
    if (srcVplexVolume != null) {
      newLabel.setLength(0);
      newLabel.append(srcVplexVolume.getLabel());
      newLabel.append(""-target-"");
      newLabel.append(invalidTgtVA.getLabel());
      log.info(""Revised name for VPlex target: "" + newLabel.toString());
      tgtVplexVolume.setLabel(newLabel.toString());
      projectURI=tgtVplexVolume.getProject();
      projectURI.setName(newLabel.toString());
      tgtVplexVolume.setProject(projectURI);
      tenancyURI=tgtVplexVolume.getTenant();
      tenancyURI.setName(newLabel.toString());
      tgtVplexVolume.setTenant(tenancyURI);
      dbClient.updateAndReindexObject(tgtVplexVolume);
    }
  }
}",304,11,"updateVolumeLabels:revision,trustedSrc:trustedMsrc,invalidTgt:invalidTft,tenantURI:tenancyURI,",1084,7.738457326094310,Beam
1430,"public void propertyChange(PropertyChangeEvent evt){
  String name=evt.getPropertyName();
  if (name == ""width"" || name == ""preferredWidth"") {
    invalidateWidthCache();
    fireColumnMarginChanged();
  }
}
","public void propchange(PropertyChangeEvent evente){
  String name=evente.getPropertyName();
  if (name == ""width"" || name == ""preferredWidth"") {
    invalidateWidthCache();
    fireColumnMarginChanged();
  }
}
",38,3,"propertyChange:propchange,evt:evente,",56,0.27050629059473700,Beam
1431,,,89,5,,1030,9.25186996459961,0
1432,"public static void insertIntoCombo(JComboBox combo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  combo.setSelectedIndex(0);
}","public static void insertIntOcombox(JComboBox commbo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)commbo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  commbo.setSelectedIndex(0);
}",94,5,"insertIntoCombo:insertIntOcombox,combo:commbo,",121,0.5291083852450050,Beam
1433,,,118,8,,1961,14.792361426353500,0
1435,"private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());
  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectContent.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectContent));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());
}
","private void injectedWork(Inject injectedWork) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(injectedWork.getContents());
  File poraryFile=ioFactory.createTemporaryFile(injectedWork.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectedWork.getDestinationFile());
    writer=ioFactory.newWriter(poraryFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectedWork));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(poraryFile,injectedWork.getDestinationFile());
}
",192,8,"injectContent:injectedWork,tmpFile:poraryFile,",1552,5.682524085044860,Beam
1436,,,114,5,,1091,6.140488962332410,0
1437,"private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}","private ArrayList<IconMarker> createCustomMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}",160,3,"createIconMarkers:createCustomMarkers,",5,0.01897969643274940,Beam
1438,,,27,3,,149,0.7304436763127650,0
1439,,,24,3,,526,2.2054954012235000,0
1440,,,67,4,,631,2.800358215967810,0
1441,"public static <T>T decodeFromBase64(Coder<T> coder,String encodedValue) throws CoderException {
  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encodedValue)),Coder.Context.OUTER);
}","public static <T>T decodeFromX8(Coder<T> coder,String enccodedImage) throws CoderException {
  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(enccodedImage)),Coder.Context.OUTER);
}",44,3,"decodeFromBase64:decodeFromX8,encodedValue:enccodedImage,",246,1.2318715095520000,Beam
1442,"public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}","public synchronized void entry(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}",120,7,"insert:entry,",16,0.08780676523844400,Beam
1443,"@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}","@Override public void get(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}",89,7,"write:get,",41,0.24162828127543100,Beam
1444,,,74,2,,259,1.5643047451973000,0
1445,,,44,6,,453,1.8254041870435100,0
1446,"public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}","public static String trunate(String array,int length){
  if (array.length() > length) {
    array=array.substring(0,length);
  }
  return array;
}",39,3,"truncate:trunate,string:array,",99,0.40854368209838900,Beam
1447,,,140,10,,368,1.6665627241134600,0
1448,"public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
","public void learn(Set<String> iFileList){
  Iterator<String> iFile=iFileList.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    learn(sText);
  }
}
",53,5,"sFileNames:iFileList,train:learn,",66,0.28207480112711600,Beam
1449,,,135,7,,1568,11.849867403507200,0
1450,"private int convertLocationToColumn(int x,int y){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insets=list.getInsets();
    int col;
    if (isLeftToRight) {
      col=(x - insets.left) / cellWidth;
    }
 else {
      col=(list.getWidth() - x - insets.right- 1) / cellWidth;
    }
    if (col < 0) {
      return 0;
    }
 else     if (col >= columnCount) {
      return columnCount - 1;
    }
    return col;
  }
  return 0;
}","private int convertPositionToCol(int x,int vy){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insets=list.getInsets();
    int col;
    if (isLeftToRight) {
      col=(x - insets.left) / cellWidth;
    }
 else {
      col=(list.getWidth() - x - insets.right- 1) / cellWidth;
    }
    if (col < 0) {
      return 0;
    }
 else     if (col >= columnCount) {
      return columnCount - 1;
    }
    return col;
  }
  return 0;
}",117,10,"convertLocationToColumn:convertPositionToCol,y:vy,",194,0.8620538592338560,Beam
1452,"public ExecutorService shutdown(){
  pool.shutdown();
  return pool;
}
","public ExecutorService stopDown(){
  pool.stopDown();
  return pool;
}
",16,2,"shutdown:stopDown,",11,0.029962476094563800,Beam
1453,,,381,12,,235,1.4806071639061000,0
1454,"@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {
  options.set(values);
  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
","@Override public void modifyNonstaticJPedalParameters(final Map keys) throws PdfException {
  options.set(keys);
  if (keys.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
",34,3,"values:keys,",3,0.02545277277628580,Beam
1455,"private static boolean isStartElement(String line){
  int first=line.lastIndexOf(""<"");
  int last=line.lastIndexOf("">"");
  if (last < first) {
    return true;
  }
 else {
    int firstEnd=line.lastIndexOf(""</"");
    int lastEnd=line.lastIndexOf(""/>"");
    if ((firstEnd != first) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}","private static boolean isFirstBlock(String row){
  int this=row.lastIndexOf(""<"");
  int last=row.lastIndexOf("">"");
  if (last < this) {
    return true;
  }
 else {
    int firstEnd=row.lastIndexOf(""</"");
    int lastEnd=row.lastIndexOf(""/>"");
    if ((firstEnd != this) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}",90,6,"line:row,isStartElement:isFirstBlock,first:this,",225,1.0385507265726700,Beam
1456,,,55,4,,572,2.1303763508796700,0
1458,,,64,4,,623,3.873323078950250,0
1459,,,12,1,,33,0.12111057043075600,0
1460,"public synchronized int add(IAudioProcessor processor){
  processors.add(processor);
  buildFinalProcessor();
  return processors.indexOf(processor);
}
","public synchronized int start(IAudioProcessor core){
  processors.start(core);
  buildFinalProcessor();
  return processors.indexOf(core);
}
",29,3,"processor:core,add:start,",113,0.5085898439089460,Beam
1461,,,44,5,,232,1.1189160545667000,0
1462,"private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}","private static final File[] deccode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}",100,5,"encode:deccode,",6,0.020832538604736300,Beam
1463,"private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endPosition){
  return targetPosition.line >= startPosition.line && targetPosition.line <= endPosition.line && targetPosition.column >= startPosition.column && targetPosition.column <= endPosition.column;
}
","private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endLocation){
  return targetPosition.line >= startPosition.line && targetPosition.line <= endLocation.line && targetPosition.column >= startPosition.column && targetPosition.column <= endLocation.column;
}
",49,4,"endPosition:endLocation,",3,0.02164773941040040,Beam
1464,,,140,8,,1248,6.22417512734731,0
1465,,,140,8,,2150,15.693558422724400,0
1466,"public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException {
  List<IvrZoneset> zonesets=showIvrZonesets(true);
  return zonesets.isEmpty() ? null : zonesets.get(0);
}","public IvrZoneset showActiveIvrZonedetting() throws NetworkDeviceControllerException {
  List<IvrZoneset> zientset=showIvrZonesets(true);
  return zientset.isEmpty() ? null : zientset.get(0);
}",36,2,"showActiveIvrZoneset:showActiveIvrZonedetting,zonesets:zientset,",191,0.8813460230827330,Beam
1467,,,79,5,,278,1.7369593024253800,0
1468,,,105,5,,709,2.855052101612090,0
1469,,,38,6,,822,3.8682101647059100,0
1470,,,192,11,,2070,9.767714981238050,0
1471,,,20,2,,115,0.5130125959714250,0
1472,"protected String buildCreateSchemaStatement() throws ReplicatorException {
  return null;
}
","protected String buildCreateShemaString() throws ReplicatorException {
  return null;
}
",12,1,"buildCreateSchemaStatement:buildCreateShemaString,",9,0.04638240337371830,Beam
1473,"public void calcMajorTick(){
  majorTick=10;
  majorTickCount=(int)Math.round(log10(maxTick / minTick)) + 1;
}","public void calcMinorFicks(){
  majorTick=10;
  majorTickCount=(int)Math.round(log10(maxTick / minTick)) + 1;
}",30,5,"calcMajorTick:calcMinorFicks,",17,0.07122444311777750,Beam
1474,"private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
","private List reverse(List vec){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=vec.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
",63,5,"seq:vec,",40,0.19029813607533800,Beam
1475,"private void updateContactHeaderPort(int localPort,SIPMessage message){
  if (message != null && message.getContactHeader() != null) {
    ContactHeader contactHeader=message.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
","private void updateContactHeaderAddress(int localPort,SIPMessage message){
  if (message != null && message.getContactHeader() != null) {
    ContactHeader contactHeader=message.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
",53,5,"updateContactHeaderPort:updateContactHeaderAddress,",4,0.018302269776662200,Beam
1477,,,36,2,,160,1.1457640290260300,0
1478,"public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}","public String d(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}",53,4,"add:d,",6,0.022788918018341100,Beam
1479,"public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model,Set attributeSchemas) throws SMSException, SSOException {
  this.model=model;
  this.serviceName=serviceSchema.getServiceName();
  getServiceResourceBundle(serviceSchema);
  if (serviceBundle != null) {
    mapTypeToAttributeSchema=new HashMap(attributeSchemas.size() * 2);
    mapTypeToAttributeSchema.put(NULL_TYPE,attributeSchemas);
  }
}","public PropertyYMLFactory(ServiceSchema serviceScheEMA,AMModel model,Set attributeShema) throws SMSException, SSOException {
  this.model=model;
  this.serviceName=serviceScheEMA.getServiceName();
  getServiceResourceBundle(serviceScheEMA);
  if (serviceBundle != null) {
    mapTypeToattributeSchemes=new HashMap(attributeShema.size() * 2);
    mapTypeToattributeSchemes.put(NULL_TYPE,attributeShema);
  }
}",70,6,"PropertyXMLBuilder:PropertyYMLFactory,serviceSchema:serviceScheEMA,attributeSchemas:attributeShema,mapTypeToAttributeSchema:mapTypeToattributeSchemes,",1322,5.493811098734540,Beam
1480,"public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){
  mSinks.put(sourceUrn,sinks);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());
}
","public void onSinksProvceived(String sourceURl,List<MediaSink> servicesink){
  mAsink.put(sourceURl,servicesink);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceURl,servicesink.size());
}
",37,5,"sourceUrn:sourceURl,onSinksReceived:onSinksProvceived,sinks:servicesink,mSinks:mAsink,",524,2.453562092781070,Beam
1481,,,83,5,,506,2.136543798446660,0
1482,,,23,2,,199,0.7624893109003700,0
1483,"public void mouseEntered(MouseEvent e){
  if (Debug.debugging(""mousemodedetail"")) {
    Debug.output(getID() + ""|NavMouseMode.mouseEntered()"");
  }
  super.mouseEntered(e);
  autoZoom=true;
}
","public void queryEntered(MouseEvent element){
  if (Debug.debugging(""mousemodedetail"")) {
    Debug.output(getID() + ""|NavMouseMode.mouseEntered()"");
  }
  super.queryEntered(element);
  autoZoom=true;
}
",42,4,"mouseEntered:queryEntered,e:element,",204,0.9099190473556520,Beam
1484,"@Override public void releaseLuceePageContext(PageContext pc,boolean register){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}","@Override public void releaseLuceePageInstance(PageContext pc,boolean register){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}",79,5,"releaseLuceePageContext:releaseLuceePageInstance,",35,0.21318316459655800,Beam
1485,"private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}","private final String next(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}",304,13,"_decodeShortUnicodeName:next,",57,0.31035242875417100,Beam
1486,"public void finish() throws IOException {
  if (!def.finished()) {
    def.finish();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}","public void generate() throws IOException {
  if (!def.finished()) {
    def.generate();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}",139,7,"finish:generate,",4,0.01882138252258300,Beam
1487,"public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}","public String TOPretty(boolean expand){
  StringBuilder comb=new StringBuilder();
  TOPretty(comb,0,expand);
  return comb.TOPretty();
}",33,3,"toString:TOPretty,acc:comb,",168,0.8556094805399580,Beam
1488,,,36,3,,340,1.1724111358324700,0
1490,"private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(parentElement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
","private void writeJavaFieldContext(JavaFieldSpec spec,Document document,Element ParentElement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(ParentElement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
",71,5,"writeJavaFieldSpec:writeJavaFieldContext,parentElement:ParentElement,",147,0.5890277107556660,Beam
1491,"private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
","private String createApplicationChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
",41,4,"createComponentChanges:createApplicationChanges,",3,0.014087375005086300,Beam
1492,"private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}","private Cache createClient() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}",49,2,"createCache:createClient,",5,0.01719402472178140,Beam
1493,"public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}","public static boolean IsMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (IsMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}",71,6,"isMatch:IsMatch,",61,0.2713028907775880,Beam
1494,"private void addToScene(final Node items){
  collection.add(items);
}
","private void addThisScene(final Node items){
  collection.add(items);
}
",17,3,"addToScene:addThisScene,",7,0.024702604611714700,Beam
1495,,,59,7,,440,2.25179895957311,0
1496,,,94,5,,1275,7.9297059615453100,0
1498,,,138,7,,1569,8.900895837942760,0
1499,"public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceQuery<O> dq,int k){
  KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);
  if (knnq instanceof PreprocessorKNNQuery) {
    return knnq;
  }
  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);
  preproc.initialize();
  return preproc.getKNNQuery(dq,k);
}
","public static <O>KNNQuery<O> precomputedKNNQuery(Database connection,Relation<O> relation,DistanceQuery<O> dq,int k){
  KNNQuery<O> knnq=connection.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);
  if (knnq instanceof PreprocessorKNNQuery) {
    return knnq;
  }
  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);
  preproc.initialize();
  return preproc.getKNNQuery(dq,k);
}
",107,7,"database:connection,",3,0.025730721155802400,Beam
1500,"private static Pair<String,String> offsetASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,""-"" + immediateNodeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> build(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,""-"" + immediateNodeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}",433,20,"offsetASR:build,",151,1.3986382126808200,Beam
1501,"public static void resetIndexBufferTime(){
  SAFE_QUERY_TIME.set(0);
}","public static void resetIndexQueueTimes(){
  SAFE_QUERY_TIME.set(0);
}",15,1,"resetIndexBufferTime:resetIndexQueueTimes,",8,0.03196161190668740,Beam
1502,,,58,6,,1287,5.920310854911800,0
1503,"public JDialog displayPanelInWindow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
","public JDialog showWindowInsideProject(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
",51,4,"displayPanelInWindow:showWindowInsideProject,",26,0.07710651556650800,Beam
1504,,,91,5,,751,5.173203217983250,0
1505,"public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
","public void put(ByteBuffer byteBuffer,int contentType){
  if (contentType > (bytes.length - this.contentType)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentType,contentType);
  this.contentType+=contentType;
}
",54,4,"contentLength:contentType,",3,0.023924052715301500,Beam
1506,"private void checkIfDirectoriesExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);
}
","private void checkIfDirectoryExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoryExist(disk_dirs);
}
",18,2,"checkIfDirectoriesExist:checkIfDirectoryExist,",32,0.2633042494455970,Beam
1507,"public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){
  Object numRows;
  Object offset;
  if (ctx.o != null) {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else   if (ctx.c != null) {
    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}","public static RowLimitSpec parseRowShiftspec(EsperEPL2GrammarParser.RowLimitContext cli){
  Object numRows;
  Object offset;
  if (cli.o != null) {
    numRows=parseNumOrVariableIdent(cli.n1,cli.i1);
    offset=parseNumOrVariableIdent(cli.n2,cli.i2);
  }
 else   if (cli.c != null) {
    offset=parseNumOrVariableIdent(cli.n1,cli.i1);
    numRows=parseNumOrVariableIdent(cli.n2,cli.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(cli.n1,cli.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}",194,8,"buildRowLimitSpec:parseRowShiftspec,ctx:cli,",102,0.716358482837677,Beam
1508,,,364,12,,1467,7.934242582321170,0
1509,"public static boolean p2pLoader(ClassLoader ldr){
  return ldr instanceof GridDeploymentInfo;
}","public static boolean p4pLoad(ClassLoader ldR){
  return ldR instanceof GridDeploymentInfo;
}",15,2,"p2pLoader:p4pLoad,ldr:ldR,",137,0.778388778368632,Beam
1510,,,31,3,,644,3.030349830786390,0
1511,"protected void acceptDrop(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropOperation);
  }
}
","protected void acceptDrop(int dropoperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropoperation);
  }
}
",31,3,"dropOperation:dropoperation,",28,0.10559828678766900,Beam
1512,"private int readSourceToLog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}","private int readSourceToLog(Settings properties){
  String sourceToLog=properties.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}",57,3,"settings:properties,",3,0.021592084566752100,Beam
1513,"public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
","public static Document writeAST(InputStream bis) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory ebfull=DocumentBuilderFactory.newInstance();
  ebfull.setValidating(false);
  ebfull.setIgnoringComments(false);
  ebfull.setIgnoringElementContentWhitespace(true);
  ebfull.setNamespaceAware(true);
  ebfull.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  ebfull.setFeature(DISALLOW_DOCTYPE_DECL,true);
  ebfull.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  ebfull.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  ebfull.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=ebfull.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(bis);
}
",141,4,"createDOM:writeAST,is:bis,dbf:ebfull,",417,1.8566410700480100,Beam
1514,,,168,12,,421,2.011035998662310,0
1515,,,304,15,,3050,16.064753274122900,0
1516,,,27,3,,348,1.1687346339225800,0
1517,"public boolean canRead(){
  return _is != null;
}
","public boolean CanRead(){
  return _is != null;
}
",12,2,"canRead:CanRead,",9,0.03303141196568810,Beam
1518,,,21,2,,159,0.5890079180399580,0
1519,"public synchronized void deleteAllTables(){
  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());
  for (  String s : tableNames) {
    deleteTable(s);
  }
}
","public synchronized void deleteAllMables(){
  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());
  for (  String s : tableNames) {
    deleteTable(s);
  }
}
",41,4,"deleteAllTables:deleteAllMables,",6,0.020973722139994300,Beam
1520,"protected final void fireVetoableChange(String propertyName,double oldValue,double newValue) throws PropertyVetoException {
  fireVetoableChange(propertyName,Double.valueOf(oldValue),Double.valueOf(newValue));
}
","protected final void fireVetoableMove(String propertyName,double newVal,double newValues) throws PropertyVetoException {
  fireVetoableMove(propertyName,Double.valueOf(newVal),Double.valueOf(newValues));
}
",37,4,"oldValue:newVal,fireVetoableChange:fireVetoableMove,newValue:newValues,",583,7.544566452503200,Beam
1521,,,25,2,,342,1.5960081497828200,0
1522,,,58,6,,1312,7.375444372495020,0
1523,,,95,6,,583,2.4104542175928800,0
1524,"public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}
","public void create(final T target){
synchronized (mLock) {
    mList.create(target);
  }
  notifyDataSetChanged();
}
",27,4,"add:create,object:target,",84,0.3338187495867410,Beam
1525,"private boolean isFieldPackagePrivate(Element attribute){
  Set<Modifier> modifiers=attribute.getModifiers();
  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);
}
","private boolean isFieldpackagePrivate(Element parent){
  Set<Modifier> modifiers=parent.getModifiers();
  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);
}
",46,3,"isFieldPackagePrivate:isFieldpackagePrivate,attribute:parent,",184,0.9592238386472070,Beam
1526,"private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}","private void fetchMetmeta(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}",189,6,"fetchMetadata:fetchMetmeta,",39,0.1812965949376420,Beam
1527,"public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
","public static <E>E syncRest(final Iterator<? extends Object> processor,final Callable<E> patch) throws Exception {
  if (processor.hasNext()) {
synchronized (processor.next()) {
      return syncRest(processor,patch);
    }
  }
 else {
    return patch.call();
  }
}
",66,3,"task:patch,iterator:processor,",142,0.7786652644475300,Beam
1528,,,1225,34,,3653,24.72341510852180,0
1529,"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}","private String readUnless(char[] delimscher,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimscher.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimscher.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimscher.length; i++) {
      if (buffer[position + i] != delimscher[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimscher.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}",247,14,"delimiter:delimscher,readUntil:readUnless,",83,0.4149477958679200,Beam
1530,"public static void assertLabel(int[] path,String text){
  if (verbose) {
    log(""assertLabel("" + toString(path) + "", ""+ text+ "")"");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,""Null label"" + text);
  assertBool(text == l.getText() || text.equals(l.getText()),("""" + l.getText()) + "" != "" + text);
}
","public static void checkLab(int[] path,String text){
  if (verbose) {
    log(""assertLabel("" + toString(path) + "", ""+ text+ "")"");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,""Null label"" + text);
  assertBool(text == l.getText() || text.equals(l.getText()),("""" + l.getText()) + "" != "" + text);
}
",95,5,"assertLabel:checkLab,",8,0.027451539039611800,Beam
1531,,,114,8,,1629,9.428225815296170,0
1532,"@Override public boolean isComplete(){
  return true;
}
","@Override public boolean areCompleted(){
  return true;
}
",12,1,"isComplete:areCompleted,",10,0.035845947265625,Beam
1533,"public static void writeResultToFile(Result result,String fname) throws Exception {
  PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname)));
  outer.write(result.toString());
  outer.close();
}
","public static void writeResult2Files(Result r,String cnamed) throws Exception {
  PrintWriter upper=new PrintWriter(new BufferedWriter(new FileWriter(cnamed)));
  upper.write(r.toString());
  upper.close();
}",49,4,"fname:cnamed,writeResultToFile:writeResult2Files,result:r,outer:upper,",681,2.4353217204411800,Beam
1534,"public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}","public static GridField[] createFields(Properties pkg,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(pkg);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(pkg,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}",252,16,"ctx:pkg,",16,0.0862868587176005,Beam
1535,"public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}
","public Subscription register(Object mSpan,MBeanDescription description){
  return register(mSpan,description.getMBeanName(getNextId()));
}
",27,3,"mBean:mSpan,",3,0.017084395885467500,Beam
1536,"public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}
","public boolean writeCharistical(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharistical(characteristic);
  }
  return false;
}
",86,9,"writeCharacteristic:writeCharistical,",17,0.08674832979838050,Beam
1537,"void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
","void WriteElement(BufferedWriter writer,String link) throws IOException {
  writer.write(link);
  writer.newLine();
}
",26,3,"writeLine:WriteElement,line:link,",200,0.6494103272755940,Beam
1538,"public static Colour attemptToGetAsColour(String part){
  Colour col=null;
  try {
    col=Colour.valueOf(part.toUpperCase());
  }
 catch (  Exception e) {
  }
  return col;
}
","public static Colour attemptToGetAsColOUR(String parent){
  Colour fact=null;
  try {
    fact=Colour.valueOf(parent.toUpperCase());
  }
 catch (  Exception e) {
  }
  return fact;
}
",41,3,"part:parent,attemptToGetAsColour:attemptToGetAsColOUR,col:fact,",183,1.3224307497342400,Beam
1539,,,49,3,,524,2.0491775910059600,0
1541,"private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceSymbols=false;
  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {
    char c=text.charAt(i);
switch (c) {
case '\\t':
{
        hasTabs=true;
        if (hasNonSpaceSymbols) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceSymbols=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
}
","private int calculatePreferredWrapePos(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceSymbols=false;
  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {
    char c=text.charAt(i);
switch (c) {
case '\\t':
{
        hasTabs=true;
        if (hasNonSpaceSymbols) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceSymbols=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
}
",177,8,"calculatePreferredWrapPosition:calculatePreferredWrapePos,",94,0.5923066337903340,Beam
1542,,,35,5,,256,1.06782968044281,0
1543,"@Override public Result doComparisonTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
","@Override public Result doComparCompareTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
",185,12,"doComparisonTest:doComparCompareTest,",6,0.10542632738749200,Beam
1544,"private Collection<String> readProcessOutput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
","private Collection<String> readConsoleInput(Process rc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(rc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
",71,5,"readProcessOutput:readConsoleInput,proc:rc,",87,0.30347040891647300,Beam
1545,"private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
","private void scoreTrackValues(Collection<Track> grades,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : grades) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
",53,6,"scoreTrackResults:scoreTrackValues,tracks:grades,",201,0.8037333885828650,Beam
1546,,,47,2,,342,1.321400773525240,0
1547,"List<Entry> killAll(boolean rootIncluded){
  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}","List<Entry> killedAll(boolean rootIncluded){
  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}",112,6,"killAll:killedAll,",35,0.13368420998255400,Beam
1548,"void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
","void clearicon(Graphics g,int Ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=Ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
",95,14,"drawIcon:clearicon,ax:Ax,",566,2.5829789002736400,Beam
1549,,,17,3,,257,0.9746107061704,0
1550,,,17,2,,168,0.7051076253255210,0
1552,"public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=universalId;
    String currentSvc="""";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent(""ATTEMPT_IDENTITY_UNASSIGN_SERVICE"",params);
        amid.unassignService(currentSvc);
        logEvent(""SUCCEED_IDENTITY_UNASSIGN_SERVICE"",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}","public void unassignedServices(String universalId,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=universalId;
    String currentSvc="""";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent(""ATTEMPT_IDENTITY_UNASSIGN_SERVICE"",params);
        amid.unassignService(currentSvc);
        logEvent(""SUCCEED_IDENTITY_UNASSIGN_SERVICE"",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}",228,10,"unassignServices:unassignedServices,",6,0.03592212597529090,Beam
1554,"@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
","@Override public void onError(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
",40,3,"onFailure:onError,",37,0.14852665265401200,Beam
1555,"private static String computeRegexString(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}","private static String computeRegexString(String originalString,String oldName,String NEWName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(NEWName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}",167,8,"newName:NEWName,",7,0.030765652656555200,Beam
1556,"@Override public Collection<SerialMessage> initialize(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {
    result.add(getSupportedMessage());
  }
  return result;
}","@Override public Collection<SerialMessage> serialize(boolean refirm){
  ArrayList<SerialMessage> root=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refirm == true || initialiseDone == false) && getVersion() > 1) {
    root.add(getSupportedMessage());
  }
  return root;
}",64,5,"initialize:serialize,refresh:refirm,result:root,",417,1.9830744385719300,Beam
1557,"public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}
","public void detach(AppCompatActivity task){
  attrViewMaps.remove(task.hashCode());
}
",20,3,"activity:task,",3,0.016742165883382200,Beam
1558,"public static boolean isUniqueContraintError(Exception e){
  if (DB.isPostgreSQL())   return isSQLState(e,""23505"");
  return isErrorCode(e,1);
}","public static boolean isUniqueContaintError(Exception e){
  if (DB.isPostgreSQL())   return isSQLState(e,""23505"");
  return isErrorCode(e,1);
}",34,2,"isUniqueContraintError:isUniqueContaintError,",35,0.19035539627075200,Beam
1559,"public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}","public static String enode(byte[] blocks){
  int len=blocks.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((blocks[i] & 0xff) << 16) | (int)((blocks[i + 1] & 0xff) << 8) | (int)(blocks[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((blocks[i] & 0xff) << 8) | ((blocks[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((blocks[i] & 0xff)),2));
  }
  return encoded.toString();
}",200,6,"encode:enode,bytes:blocks,",71,0.48109411001205400,Beam
1560,,,26,3,,522,4.446887238820390,0
1561,"protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){
  if (expected == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (expected.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);
  }
 else   if (expected.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);
  }
 else   if (expected.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",expected,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}","protected byte[] decode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){
  if (expected == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (expected.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);
  }
 else   if (expected.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);
  }
 else   if (expected.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",expected,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}",222,8,"assertEncodeDecode:decode,",27,0.19248958826065100,Beam
1562,,,101,5,,1042,5.442611718177800,0
1563,,,175,9,,2064,13.20617976586020,0
1565,,,14,2,,191,0.7517422715822860,0
1567,"private void fillPicks() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup(""M_Warehouse_ID"",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),""M_Warehouse_ID""));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup(""C_BPartner_ID"",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),""C_BPartner_ID""));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),""C_DocType_ID""));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),""Order"")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),""VendorRMA"")));
  cmbDocType.addActionListener(this);
}","private void fillTicker() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup(""M_Warehouse_ID"",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),""M_Warehouse_ID""));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup(""C_BPartner_ID"",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),""C_BPartner_ID""));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),""C_DocType_ID""));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),""Order"")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),""VendorRMA"")));
  cmbDocType.addActionListener(this);
}",224,11,"fillPicks:fillTicker,",7,0.023361380894978800,Beam
1569,"public static Test suite() throws Exception {
  return suite(true);
}
","public static Test Suites() throws Exception {
  return Suites(true);
}
",16,1,"suite:Suites,",24,0.1467508832613630,Beam
1570,"private boolean activeListHasRoom(){
  int maxDownloads=1;
  return mActiveList.size() < maxDownloads;
}","private boolean activelistHasSpace(){
  int maxDownloads=1;
  return mActiveList.size() < maxDownloads;
}",21,3,"activeListHasRoom:activelistHasSpace,",11,0.04884623686472580,Beam
1571,,,398,15,,1445,6.583345806598660,0
1572,"public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}","public static double variant(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}",95,7,"variance:variant,",3,0.01682093143463140,Beam
1573,"public MapObjects(PokemonGo api){
  this.api=api;
}
","public ObjectObjectS(PokemonGo cache){
  this.cache=cache;
}
",14,2,"api:cache,MapObjects:ObjectObjectS,",186,0.6700498620669050,Beam
1574,,,140,7,,1705,23.454687956968900,0
1575,"private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (entry.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(entry.getSequence(),null);
  }
 else {
    indexQuery(entry,future);
  }
}
","private void sequenceQuery(QueryEntry connection,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (connection.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(connection.getSequence(),null);
  }
 else {
    indexQuery(connection,future);
  }
}
",57,4,"entry:connection,",14,0.057051281134287500,Beam
1576,,,23,2,,125,0.5007903099060060,0
1577,"private String attachFooterToText(String content) throws MessagingException, IOException {
  StringBuilder builder=new StringBuilder(content);
  ensureTrailingCarriageReturn(content,builder);
  builder.append(getFooterText());
  return builder.toString();
}
","private String appendFooterFromCode(String content) throws MessagingException, IOException {
  StringBuilder builder=new StringBuilder(content);
  ensureTrailingCarriageReturn(content,builder);
  builder.append(getFooterText());
  return builder.toString();
}
",45,3,"attachFooterToText:appendFooterFromCode,",13,0.04551472266515100,Beam
1578,,,73,7,,1581,7.009274160861970,0
1579,,,110,7,,1391,7.428478113810220,0
1580,,,14,1,,63,0.25167980591456100,0
1581,"protected void parseDOMAttributes(Element element) throws SAML2Exception {
  requestId=element.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=element.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);
  consent=element.getAttribute(SAML2Constants.CONSENT);
}","protected void parseHTMLAttributes(Element enter) throws SAML2Exception {
  requestId=enter.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=enter.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=enter.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=enter.getAttribute(SAML2Constants.DESTINATION);
  consent=enter.getAttribute(SAML2Constants.CONSENT);
}",82,7,"parseDOMAttributes:parseHTMLAttributes,element:enter,",59,0.30909772316614800,Beam
1582,"public void reset(){
  ns.removeAllElements();
  ks.setLength(0);
  cur=tt.root;
  run();
}","public void create(){
  ns.removeAllElements();
  ner.setLength(0);
  cur=tt.root;
  run();
}",30,4,"reset:create,ks:ner,",96,0.32813089291254700,Beam
1583,"public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
","public static String currounded(String value,String prefix,String suffix){
  if (value.startsWith(prefix) == false) {
    value=prefix + value;
  }
  if (value.endsWith(suffix) == false) {
    value+=suffix;
  }
  return value;
}
",55,4,"surround:currounded,string:value,",205,1.015876050790150,Beam
1584,,,63,6,,1166,6.574397913614910,0
1585,"private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
","private void copyACCLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
",120,7,"copyACLs:copyACCLs,",3,0.016385769844055200,Beam
1586,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}","@Override public void paintsApplication(Graphics g){
  super.paintsApplication(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}",78,6,"paintComponent:paintsApplication,",42,0.20667588313420600,Beam
1587,,,189,9,,471,2.646595040957130,0
1588,"public void reclaimViews(List<View> views){
  int childCount=getChildCount();
  RecyclerListener listener=mRecycler.mRecyclerListener;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {
      views.add(child);
      if (listener != null) {
        listener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(views);
  removeAllViewsInLayout();
}","public void recoverViewls(List<View> views){
  int childCount=getChildCount();
  RecyclerListener listener=mRecycler.mRecyclerListener;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {
      views.add(child);
      if (listener != null) {
        listener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(views);
  removeAllViewsInLayout();
}",116,8,"reclaimViews:recoverViewls,",17,0.28077412843704200,Beam
1589,"protected String alterCase(String value){
switch (getCase()) {
case UPPERCASE:
    return value.toUpperCase();
case LOWERCASE:
  return value.toLowerCase();
default :
return value;
}
}
","protected String restoreCast(String default){
switch (getCase()) {
case UPPERCASE:
    return default.toUpperCase();
case LOWERCASE:
  return default.toLowerCase();
default :
return default;
}
}
",42,4,"alterCase:restoreCast,value:default,",86,0.4194884657859800,Beam
1590,,,26,3,,307,1.2425076405207300,0
1591,"public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
","public static String s(char[] self,String collator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (collator == null)   collator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(collator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
",81,6,"join:s,separator:collator,",192,0.8520523111025490,Beam
1592,"public synchronized boolean removeAll(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}","public synchronized boolean moveNone(Collection cm){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] clean=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!cm.contains(element))       clean[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(clean,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}",124,8,"removeAll:moveNone,c:cm,temp:clean,",745,2.9454555988311800,Beam
1593,,,334,8,,935,4.837037404378260,0
1594,,,46,3,,502,2.246729095776880,0
1595,,,27,3,,412,2.3944331367810600,0
1596,"public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}","public SimpleString concat(final char m){
  byte[] letters=new byte[buffer.length + 2];
  System.arraycopy(buffer,0,letters,0,buffer.length);
  letters[buffer.length]=(byte)(m & 0xFF);
  letters[buffer.length + 1]=(byte)(m >> 8 & 0xFF);
  return new SimpleString(letters);
}",86,4,"c:m,bytes:letters,data:buffer,",334,1.7240792473157200,Beam
1597,,,20,2,,187,0.9237419088681540,0
1598,"public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
","public <T>List<String> validateBlan(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
",92,7,"validateBean:validateBlan,",5,0.028206499417622900,Beam
1599,"private void addEntry(){
  model.addNewEntry();
  removeButton.setEnabled(false);
}
","private void addButton(){
  model.addNewEntry();
  removeOption.setEnabled(false);
}
",20,3,"addEntry:addButton,removeButton:removeOption,",16,0.0659906506538391,Beam
1600,"private String applyReplacement(final BidiMap replacement,String contents){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}
","private String applyReplacement(final BidiMap replacement,String accent){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    accent=accent.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return accent;
}
",71,6,"contents:accent,",6,0.029848118623097700,Beam
1601,"private void addFlags(int newflags){
  flags=getLayoutFlags() | newflags;
}
","private void applyFlag(int newflags){
  flags=getLayoutFlags() | newflags;
}
",17,3,"addFlags:applyFlag,",28,0.09174439509709680,Beam
1602,,,42,4,,790,3.775476320584620,0
1603,"private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}","private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeDocus){
  while (lastReferenceSequence <= stopBeforeDocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeDocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeDocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeDocus.getSequenceIndex()) {
        lastPosition=stopBeforeDocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeDocus.getSequenceIndex() || nextbit < stopBeforeDocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeDocus.getPosition()) {
      return null;
    }
  }
  return null;
}",163,6,"stopBeforeLocus:stopBeforeDocus,",25,0.7019182840983070,Beam
1604,"private void connect() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.connect(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
","private void con() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> ec=new HashMap<String,Object>();
  if (login != null) {
    String[] creds={login,password};
    ec.put(JMXConnector.CREDENTIALS,creds);
  }
  ec.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.con(jmxUrl,ec);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
",407,26,"connect:con,env:ec,username:login,",693,3.0524583299954700,Beam
1605,"public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storedAuthTag=atagList.get(chunkIdx);
    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}","public synchronized boolean verifyChunkFattag(int chunkIdxf,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdxf < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storedRestTag=atagList.get(chunkIdxf);
    if (storedRestTag == null || !Arrays.equals(chunkAuthTag,storedRestTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}",92,5,"verifyChunkAuthTag:verifyChunkFattag,chunkIdx:chunkIdxf,storedAuthTag:storedRestTag,",568,4.234058550993600,Beam
1606,"private Instance votedReclassifyExample(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}","private Instance votedReclassifiExperience(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}",190,10,"votedReclassifyExample:votedReclassifiExperience,",17,0.08147671620051070,Beam
1607,"private boolean checkIfScrolling(float[] lastPoints,MotionEvent ev){
  float[] point=new float[2];
  point[0]=ev.getRawX();
  point[1]=ev.getRawY();
  float delta=getDistance(lastPoints,point);
  return Math.abs(delta) > mSlop;
}","private boolean checkIfScrolling(float[] oldPosts,MotionEvent ev){
  float[] point=new float[2];
  point[0]=ev.getRawX();
  point[1]=ev.getRawY();
  float delta=getDistance(oldPosts,point);
  return Math.abs(delta) > mSlop;
}",67,6,"lastPoints:oldPosts,",64,0.3968208154042560,Beam
1608,"public static int copyAndCloseOutput(Reader input,Writer output) throws IOException {
  try {
    return copy(input,output);
  }
  finally {
    output.close();
  }
}
","public static int copyandCloseError(Reader in,Writer config) throws IOException {
  try {
    return copy(in,config);
  }
  finally {
    config.close();
  }
}
",35,3,"output:config,input:in,copyAndCloseOutput:copyandCloseError,",543,3.554921801884970,Beam
1609,"protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}","protected void handleMESoFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}",102,7,"handleMesosFailure:handleMESoFailure,",13,0.04463900327682500,Beam
1610,"public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
","public static String makeNewSessionId(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
",37,3,"makeRelatedSessionID:makeNewSessionId,",62,0.29714159965515100,Beam
1611,"private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(oValue);
  md5.update((byte)(pValue & 0xFF));
  md5.update((byte)((pValue >> 8) & 0xFF));
  md5.update((byte)((pValue >> 16) & 0xFF));
  md5.update((byte)(pValue >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}","private byte[] calculateGeneralEncSecretKeys(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] output,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(output);
  md5.update((byte)(pValue & 0xFF));
  md5.update((byte)((pValue >> 8) & 0xFF));
  md5.update((byte)((pValue >> 16) & 0xFF));
  md5.update((byte)(pValue >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}",297,14,"calculateGeneralEncryptionKey:calculateGeneralEncSecretKeys,oValue:output,",381,2.7452027559280400,Beam
1612,"public static Map<String,String> createBasicAuthHeader(String username,String password,Map<String,String> headerMap){
  if (headerMap == null)   headerMap=new HashMap<>();
  String credentials=username + "":"" + password;
  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);
  headerMap.put(""Authorization"",""Basic "" + base64EncodedCredentials);
  return headerMap;
}","public static Map<String,String> createBasicAuthResponse(String username,String password,Map<String,String> headerMap){
  if (headerMap == null)   headerMap=new HashMap<>();
  String credentials=username + "":"" + password;
  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);
  headerMap.put(""Authorization"",""Basic "" + base64EncodedCredentials);
  return headerMap;
}",82,6,"createBasicAuthHeader:createBasicAuthResponse,",68,0.33371587594350200,Beam
1613,"private static int labelEnd(String s){
  int colonIndex=s.indexOf("":"");
  int semicolonIndex=s.indexOf("";"");
  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {
    return colonIndex;
  }
 else {
    return -1;
  }
}","private static int letterStart(String e){
  int colonIndex=e.indexOf("":"");
  int semicolonIndex=e.indexOf("";"");
  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {
    return colonIndex;
  }
 else {
    return -1;
  }
}",57,4,"labelEnd:letterStart,s:e,",58,0.32257838249206500,Beam
1614,"public void beforeInsert(int index,char element){
  if (index > size || index < 0)   throw new IndexOutOfBoundsException(""Index: "" + index + "", Size: ""+ size);
  ensureCapacity(size + 1);
  System.arraycopy(elements,index,elements,index + 1,size - index);
  elements[index]=element;
  size++;
}","public void BeforePush(int key,char element){
  if (key > size || key < 0)   throw new IndexOutOfBoundsException(""Index: "" + key + "", Size: ""+ size);
  ensureCapacity(size + 1);
  System.arraycopy(elements,key,elements,key + 1,size - key);
  elements[key]=element;
  size++;
}",71,5,"beforeInsert:BeforePush,index:key,",78,0.8368433396021530,Beam
1615,"public void removeChild(Group theGroup){
  mChildren.remove(theGroup);
}
","public void addchild(Group theChild){
  mChildren.remove(theChild);
}
",16,3,"removeChild:addchild,theGroup:theChild,",71,0.2545030911763510,Beam
1616,"public static boolean isDigitalUnix(){
  return osName.indexOf(""Digital Unix"") > -1;
}","public static boolean isDigitaliOS(){
  return osName.indexOf(""Digital Unix"") > -1;
}",19,2,"isDigitalUnix:isDigitaliOS,",4,0.013989655176798500,Beam
1617,"public static String toTypeString(Object[] arguments,int maxSize){
  if (arguments == null) {
    return ""null"";
  }
  StringBuilder argBuf=new StringBuilder();
  for (int i=0; i < arguments.length; i++) {
    if (maxSize != -1 && argBuf.length() > maxSize) {
      argBuf.append(""..."");
      break;
    }
 else {
      if (i > 0) {
        argBuf.append("", "");
      }
      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : ""null"");
    }
  }
  return argBuf.toString();
}","public static String toObjectSource(Object[] arguments,int maxSize){
  if (arguments == null) {
    return ""null"";
  }
  StringBuilder argBuf=new StringBuilder();
  for (int i=0; i < arguments.length; i++) {
    if (maxSize != -1 && argBuf.length() > maxSize) {
      argBuf.append(""..."");
      break;
    }
 else {
      if (i > 0) {
        argBuf.append("", "");
      }
      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : ""null"");
    }
  }
  return argBuf.toString();
}",125,5,"toTypeString:toObjectSource,",64,0.27704445521036800,Beam
1618,,,66,3,,346,1.6514958620071400,0
1619,,,24,3,,386,1.2722641706466700,0
1620,,,168,13,,3084,12.778674288590700,0
1621,"public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}","public void open(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.open();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}",65,6,"close:open,",3,0.020028416315714500,Beam
1622,"public TSink<byte[]> sendBytes(TStream<byte[]> stream){
  Objects.requireNonNull(stream,""stream"");
  return sendBinary(stream,null);
}
","public TSink<byte[]> transferbytes(TStream<byte[]> source){
  Objects.requireNonNull(source,""stream"");
  return sendBinary(source,null);
}
",36,2,"sendBytes:transferbytes,stream:source,",52,0.1930406371752420,Beam
1623,,,46,3,,531,2.285210649172470,0
1624,"public boolean isEmpty(){
  return rdns.isEmpty();
}
","public boolean hasSize(){
  return rdns.hasSize();
}
",14,2,"isEmpty:hasSize,",9,0.03340787887573240,Beam
1625,,,245,12,,1601,8.234877014160160,0
1626,"public void handleText(String text){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= text.length()) {
      skippingCharacters-=text.length();
      return;
    }
 else {
      text=text.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleText(text);
    return;
  }
  warning(""Text with no destination. oops."");
}","public void parseTEXT(String feed){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= feed.length()) {
      skippingCharacters-=feed.length();
      return;
    }
 else {
      feed=feed.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.parseTEXT(feed);
    return;
  }
  warning(""Text with no destination. oops."");
}",77,4,"handleText:parseTEXT,text:feed,",93,0.47057035366694100,Beam
1627,"public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){
  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));
}","public static ByteBuffer base64String2ByteVar(String base64EncryptedPath){
  return ByteBuffer.wrap(base64DecodeString(base64EncryptedPath));
}",21,2,"base64StringToByteBuffer:base64String2ByteVar,base64EncodedKey:base64EncryptedPath,",97,0.47815837860107400,Beam
1628,"@Override public <T>Future<T> submit(Callable<T> task){
synchronized (this) {
    active.incrementAndGet();
    long timeout=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (timeout <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          timeout+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException(""Timed out because TPE is too busy..."");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.submit(task);
  }
}","@Override public <T>Future<T> process(Callable<T> patch){
synchronized (this) {
    active.incrementAndGet();
    long timeout=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (timeout <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          timeout+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException(""Timed out because TPE is too busy..."");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.process(patch);
  }
}",103,9,"task:patch,submit:process,",100,0.39960697889328,Beam
1629,"public void removeBiomeType(BiomeDictionary.Type type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
","public void removeBioseFile(BiomeDictionary.Type role){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(role)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
",96,6,"removeBiomeType:removeBioseFile,type:role,",77,0.4110284686088560,Beam
1630,"public void uncompress(){
  data.position(0);
  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());
  byte[] buffer=new byte[8192];
  IoBuffer tmp=IoBuffer.allocate(0);
  tmp.setAutoExpand(true);
  try {
    while (inflater.available() > 0) {
      int decompressed=inflater.read(buffer);
      if (decompressed <= 0) {
        break;
      }
      tmp.put(buffer,0,decompressed);
    }
  }
 catch (  IOException e) {
    tmp.free();
    throw new RuntimeException(""could not uncompress data"",e);
  }
 finally {
    if (inflater != null) {
      try {
        inflater.close();
      }
 catch (      IOException e1) {
      }
    }
  }
  data.free();
  data=tmp;
  data.flip();
  prepareIO();
}","public void uncompressor(){
  data.position(0);
  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());
  byte[] buffer=new byte[8192];
  IoBuffer tmp=IoBuffer.allocate(0);
  tmp.setAutoExpand(true);
  try {
    while (inflater.available() > 0) {
      int decompressed=inflater.read(buffer);
      if (decompressed <= 0) {
        break;
      }
      tmp.put(buffer,0,decompressed);
    }
  }
 catch (  IOException e) {
    tmp.free();
    throw new RuntimeException(""could not uncompress data"",e);
  }
 finally {
    if (inflater != null) {
      try {
        inflater.close();
      }
 catch (      IOException e1) {
      }
    }
  }
  data.free();
  data=tmp;
  data.flip();
  prepareIO();
}",170,7,"uncompress:uncompressor,",3,0.02776597738265990,Beam
1632,,,112,8,,368,1.0399400393168100,0
1633,"@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}","@Override public void makeIntutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeIntutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeIntutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeIntutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeIntutable();
    }
    if (issuer != null) {
      issuer.makeIntutable();
    }
    if (subject != null) {
      subject.makeIntutable();
    }
    if (advice != null) {
      advice.makeIntutable();
    }
    isMutable=false;
  }
}",275,15,"makeImmutable:makeIntutable,",6,0.0898274302482605,Beam
1635,"protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","protected void publisher() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publisher(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",83,12,"publish:publisher,",4,0.016860032081604000,Beam
1636,"public static byte[] select(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return select(cardletAid);
}
","public static byte[] start(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return start(cardletAid);
}
",30,5,"select:start,",10,0.04642750024795530,Beam
1637,"public void resetReferences(){
  if (_refs != null)   _refs.clear();
}
","public void resetLinks(){
  if (_deps != null)   _deps.clear();
}
",19,2,"resetReferences:resetLinks,_refs:_deps,",12,0.03974093198776250,Beam
1638,,,329,18,,1533,7.784539194901780,0
1639,"@After public void clean(){
  mute(null);
  mute(null);
  mute(null);
}
","@After public void full(){
  mute(null);
  mute(null);
  mute(null);
}
",24,1,"clean:full,",6,0.02892643610636390,Beam
1640,"public List<Instruction> reduceInstructions(final List<Instruction> instructions){
  lock.lock();
  try {
    this.instructions=instructions;
    stackSizeSimulator.buildStackSizes(instructions);
    return reduceInstructionsInternal(instructions);
  }
  finally {
    lock.unlock();
  }
}
","public List<Instruction> reddownSTRUCTions(final List<Instruction> inscription){
  lock.lock();
  try {
    this.inscription=inscription;
    stackSizeSimulator.buildStackSizes(inscription);
    return reduceInstructionsInternal(inscription);
  }
  finally {
    lock.unlock();
  }
}
",53,4,"reduceInstructions:reddownSTRUCTions,instructions:inscription,",83,0.43663245836893700,Beam
1641,"protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}","protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> slobs){
  int latest=-1;
  for (  String name : slobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : slobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}",295,14,"blobs:slobs,",5,0.049242528279622400,Beam
1642,,,16,3,,146,0.568268358707428,0
1643,,,19,3,,347,2.355981532732650,0
1644,"public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);
  futureMap.put(Integer.valueOf(xid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(request);
  return future;
}
","public Future<SyncReply> sendTransaction(int ixsid,SyncMessage request) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(ixsid,connectionGeneration);
  futureMap.put(Integer.valueOf(ixsid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(request);
  return future;
}
",111,10,"sendRequest:sendTransaction,xid:ixsid,",131,0.7783649484316510,Beam
1645,"public static Object extractTypeChecked(List<Object> args,int i,Class clazz,Function<List<Object>,Object> extractFunc){
  if (args.size() < i + 1) {
    return null;
  }
 else   if (clazz.isInstance(args.get(i))) {
    return extractFunc.apply(args);
  }
 else {
    return null;
  }
}","public static Object extractTypeCorrectled(List<Object> args,int name,Class Clclass,Function<List<Object>,Object> extractFunfunc){
  if (args.size() < name + 1) {
    return null;
  }
 else   if (Clclass.isInstance(args.get(name))) {
    return extractFunfunc.apply(args);
  }
 else {
    return null;
  }
}",78,5,"i:name,extractTypeChecked:extractTypeCorrectled,clazz:Clclass,extractFunc:extractFunfunc,",997,4.304168450832370,Beam
1646,"@SuppressWarnings(""unchecked"") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){
  if (styleName == null || enumClass == null) {
    return defaultValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return defaultValue;
}
","@SuppressWarnings(""unchecked"") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> umText,final E defaultVALUE){
  if (styleName == null || umText == null) {
    return defaultVALUE;
  }
  for (  final Enum<? extends Style.HasCssName> constant : umText.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return defaultVALUE;
}
",124,6,"defaultValue:defaultVALUE,enumClass:umText,",235,2.6838483452796900,Beam
1647,"public boolean remove(String word){
  return m_Words.remove(word);
}
","public boolean del(String card){
  return m_Words.del(card);
}
",17,3,"remove:del,word:card,",65,0.2525769631067910,Beam
1648,"public void sort(Comparator<Individual> comparator){
  Collections.sort(individuals,comparator);
}
","public void iter(Comparator<Individual> comparator){
  Collections.iter(individuals,comparator);
}
",21,3,"sort:iter,",54,0.20079540014267000,Beam
1649,"public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public TermsAckParser load() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.load(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:load,",4,0.02256527344385780,Beam
1650,,,26,3,,420,1.9522526502609300,0
1651,"public void sleepMillis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
","public void sleepMiles(final long multipli){
  try {
    Thread.sleep(multipli);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
",37,4,"millis:multipli,sleepMillis:sleepMiles,",56,0.1911327838897710,Beam
1652,"public static String removeFormatting(String line){
  int length=line.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=line.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}","public static String stripForming(String cell){
  int length=cell.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=cell.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}",85,2,"removeFormatting:stripForming,line:cell,",86,0.35304990609486900,Beam
1653,"private void updateStatus(String relayState,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relayState);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relayState,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relayState,new Integer(currentStatus));
}
}
","private void replaceLog(String relifystate,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relifystate);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relifystate,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relifystate,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relifystate,new Integer(currentStatus));
}
}
",120,9,"relayState:relifystate,updateStatus:replaceLog,",1263,7.068199149767560,Beam
1654,"private void registerProviders(){
  final DevMachine devMachine=appContext.getDevMachine();
  if (devMachine == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devMachine);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}
","private void removeProviders(){
  final DevMachine devModel=appContext.getDevMachine();
  if (devModel == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devModel);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}
",63,5,"registerProviders:removeProviders,devMachine:devModel,",27,0.14103843371073400,Beam
1655,,,408,13,,1485,24.180311346054100,0
1658,"@Override public Instance remove(int index){
  return m_Instances.remove(index);
}
","@Override public Instance un(int id){
  return m_Instances.un(id);
}
",19,3,"remove:un,index:id,",73,0.31036479473114000,Beam
1659,"@Override public void visitVertex(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}","@Override public void visitverice(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}",101,7,"visitVertex:visitverice,",17,0.07476842800776160,Beam
1660,"protected boolean attemptToAddWord(Word word){
  double additionalLength=word.getWordWidth();
  additionalLength+=!words.isEmpty() ? spaceSize : 0;
  if (currentLineLength + additionalLength <= maxLength || maxLength == -1) {
    words.add(word);
    currentLineLength+=additionalLength;
    return true;
  }
 else {
    return false;
  }
}","protected boolean attemptToAddedword(Word name){
  double additionalLength=name.getWordWidth();
  additionalLength+=!words.isEmpty() ? spaceSize : 0;
  if (currentLineLength + additionalLength <= maxLength || maxLength == -1) {
    words.add(name);
    currentLineLength+=additionalLength;
    return true;
  }
 else {
    return false;
  }
}",66,7,"attemptToAddWord:attemptToAddedword,word:name,",85,0.43605018854141200,Beam
1661,"public PrivateKey loadPrivateKey() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (priKey == null) {
    FileReader f=new FileReader(path + ""privatekey"" + this.id);
    BufferedReader r=new BufferedReader(f);
    String tmp="""";
    String key="""";
    while ((tmp=r.readLine()) != null) {
      key=key + tmp;
    }
    f.close();
    r.close();
    priKey=getPrivateKeyFromString(key);
  }
  return priKey;
}
","public PrivateKey loadPrivatePoint() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (priKey == null) {
    FileReader f=new FileReader(path + ""privatekey"" + this.id);
    BufferedReader r=new BufferedReader(f);
    String tmp="""";
    String key="""";
    while ((tmp=r.readLine()) != null) {
      key=key + tmp;
    }
    f.close();
    r.close();
    priKey=getPrivateKeyFromString(key);
  }
  return priKey;
}
",109,8,"loadPrivateKey:loadPrivatePoint,",5,0.017346251010894800,Beam
1662,"public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){
  if (!isFocused)   return false;
 else   if (GuiScreen.func_175278_g(p_146201_2_)) {
    setCursorPositionEnd();
    setSelectionPos(0);
    return true;
  }
 else   if (GuiScreen.func_175280_f(p_146201_2_)) {
    GuiScreen.setClipboardString(getSelectedText());
    return true;
  }
 else   if (GuiScreen.func_175279_e(p_146201_2_)) {
    if (isEnabled)     writeText(GuiScreen.getClipboardString());
    return true;
  }
 else   if (GuiScreen.func_175277_d(p_146201_2_)) {
    GuiScreen.setClipboardString(getSelectedText());
    if (isEnabled)     writeText("""");
    return true;
  }
 else switch (p_146201_2_) {
case 14:
    if (GuiScreen.isCtrlKeyDown()) {
      if (isEnabled)       deleteWords(-1);
    }
 else     if (isEnabled)     deleteFromCursor(-1);
  return true;
case 199:
if (GuiScreen.isShiftKeyDown()) setSelectionPos(0);
 else setCursorPositionZero();
return true;
case 203:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(-1,getSelectionEnd()));
 else setSelectionPos(getSelectionEnd() - 1);
}
 else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(-1));
 else moveCursorBy(-1);
return true;
case 205:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(1,getSelectionEnd()));
 else setSelectionPos(getSelectionEnd() + 1);
}
 else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(1));
 else moveCursorBy(1);
return true;
case 207:
if (GuiScreen.isShiftKeyDown()) setSelectionPos(text.length());
 else setCursorPositionEnd();
return true;
case 211:
if (GuiScreen.isCtrlKeyDown()) {
if (isEnabled) deleteWords(1);
}
 else if (isEnabled) deleteFromCursor(1);
return true;
default :
if (EmailAllowedCharacters.isAllowedCharacter(p_146201_1_)) {
if (isEnabled) writeText(Character.toString(p_146201_1_));
return true;
}
 else return false;
}
}","public boolean edit(char p_146201_1_,int p_146201_2_){
  if (!isFocused)   return false;
 else   if (GuiScreen.func_175278_g(p_146201_2_)) {
    setCursorPositionEnd();
    setSelectionPos(0);
    return true;
  }
 else   if (GuiScreen.func_175280_f(p_146201_2_)) {
    GuiScreen.setClipboardString(getSelectedText());
    return true;
  }
 else   if (GuiScreen.func_175279_e(p_146201_2_)) {
    if (isEnabled)     writeText(GuiScreen.getClipboardString());
    return true;
  }
 else   if (GuiScreen.func_175277_d(p_146201_2_)) {
    GuiScreen.setClipboardString(getSelectedText());
    if (isEnabled)     writeText("""");
    return true;
  }
 else switch (p_146201_2_) {
case 14:
    if (GuiScreen.isCtrlKeyDown()) {
      if (isEnabled)       deleteWords(-1);
    }
 else     if (isEnabled)     deleteFromCursor(-1);
  return true;
case 199:
if (GuiScreen.isShiftKeyDown()) setSelectionPos(0);
 else setCursorPositionZero();
return true;
case 203:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(-1,getSelectionEnd()));
 else setSelectionPos(getSelectionEnd() - 1);
}
 else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(-1));
 else moveCursorBy(-1);
return true;
case 205:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(1,getSelectionEnd()));
 else setSelectionPos(getSelectionEnd() + 1);
}
 else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(1));
 else moveCursorBy(1);
return true;
case 207:
if (GuiScreen.isShiftKeyDown()) setSelectionPos(text.length());
 else setCursorPositionEnd();
return true;
case 211:
if (GuiScreen.isCtrlKeyDown()) {
if (isEnabled) deleteWords(1);
}
 else if (isEnabled) deleteFromCursor(1);
return true;
default :
if (EmailAllowedCharacters.isAllowedCharacter(p_146201_1_)) {
if (isEnabled) writeText(Character.toString(p_146201_1_));
return true;
}
 else return false;
}
}",435,6,"textboxKeyTyped:edit,",26,0.13818963368733700,Beam
1663,"public void substituteHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}","public void substitutionHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}",149,9,"substituteHeader:substitutionHeader,",3,0.018634331226348900,Beam
1664,"public void addFieldBuffered(VEditor editor,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=editor;
  prevField=mField;
}
","public void addfieldbuffered(VEditor reader,GridField mButton){
  wrap=mButton != null ? !mButton.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=reader;
  prevField=mButton;
}
",52,6,"mField:mButton,addFieldBuffered:addfieldbuffered,editor:reader,",372,1.6010926802953100,Beam
1665,,,41,5,,731,2.54803360303243,0
1666,,,16,2,,228,0.855934755007426,0
1667,"protected void clearAllTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}
","protected void clearallTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}
",42,5,"clearAllTrails:clearallTrails,",21,0.06766480604807540,Beam
1668,,,30,2,,133,0.5940187414487200,0
1670,"private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
","private boolean formatOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
",209,10,"renderOutput:formatOutput,",35,0.1334959626197820,Beam
1671,"public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}
","public java.util.Collection<ObjectReference> dumpThreadRoots(int len){
  return Collections.emptyList();
}
",23,2,"width:len,",8,0.03471001386642460,Beam
1672,"void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {
  LOG.debug(""wildcard resources: {}"",allFiles);
  if (allFiles.isEmpty()) {
    final String message=String.format(""No resource found for wildcard: %s"",wildcardContext.getWildcard());
    LOG.warn(message);
    throw new IOException(message);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(allFiles);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug(""wildcard expanding error. Reporting original exception"",e);
      throw new IOException(""Exception during expanding wildcard: "" + e.getMessage());
    }
  }
}
","void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardHandler) throws IOException {
  LOG.debug(""wildcard resources: {}"",allFiles);
  if (allFiles.isEmpty()) {
    final String message=String.format(""No resource found for wildcard: %s"",wildcardHandler.getWildcard());
    LOG.warn(message);
    throw new IOException(message);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(allFiles);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug(""wildcard expanding error. Reporting original exception"",e);
      throw new IOException(""Exception during expanding wildcard: "" + e.getMessage());
    }
  }
}
",127,6,"wildcardContext:wildcardHandler,",7,0.055237412452697800,Beam
1673,"@LayoutlibDelegate static float sin(float angle){
  return (float)Math.sin(angle);
}
","@LayoutlibDelegate static float span(float square){
  return (float)Math.span(square);
}
",22,2,"sin:span,angle:square,",111,0.45933526357015000,Beam
1674,,,71,3,,445,5.683015823364260,0
1675,"public void crabDownDirBlockForModification(BlockId blk){
  lockTbl.xLock(blk,txNum);
  writenIndexBlks.add(blk);
}
","public void crabDownDirBlockforModification(BlockId blb){
  lockTbl.xLock(blb,txNum);
  writenIndexBlks.add(blb);
}
",25,5,"crabDownDirBlockForModification:crabDownDirBlockforModification,blk:blb,",47,0.2434719681739810,Beam
1676,"public static String decodeCharset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}","public static String decodeCarset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}",66,4,"decodeCharset:decodeCarset,",65,0.3688212593396510,Beam
1678,"public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
","public List<JCAnnotation> generate(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
",303,4,"transformAnnotations:generate,",22,0.11716643969217900,Beam
1679,"public boolean validate(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return validate(certBytes,signedDataBytes,signatureBytes);
}","public boolean validate(String cert,String signedData,String Signatures) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(Signatures);
  return validate(certBytes,signedDataBytes,signatureBytes);
}",67,7,"signature:Signatures,",21,0.09356887340545650,Beam
1680,"public boolean hasNatureAndWeapon(Nature nature,String weapon){
  return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon)));
}
","public boolean hasnatureAndweapons(Nature nature,String knife){
  return this.nature == nature && ((knife == null && this.knife == null) || (knife != null && knife.equals(this.knife)));
}
",48,3,"weapon:knife,hasNatureAndWeapon:hasnatureAndweapons,",130,0.77264963388443,Beam
1681,"public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageFactor <= 0 || coverageFactor > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coverageFactor);
  }
  m_coverageFactor=coverageFactor;
}","public IntervalHelper(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageFactor <= 0 || coverageFactor > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coverageFactor);
  }
  m_coverageFactor=coverageFactor;
}",153,17,"IntervalImpl:IntervalHelper,",3,0.019837427139282200,Beam
1682,"public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}","public static double P_AveragePrecision(int y[],int p[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (p[k] <= p[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + p[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}",156,9,"r:p,",10,0.06136056979497270,Beam
1683,,,234,10,,1709,15.175523686409000,0
1684,"protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}","protected XSQLDA allocateXSQLda(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}",208,7,"allocateXSqlDa:allocateXSQLda,",57,0.4606565038363140,Beam
1685,,,77,6,,1306,5.423571344216670,0
1686,"void scheduleToTimerPool(){
  if (sessionPollerPool.isPollingEnabled()) {
    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollerPool.getCacheBasedPolling()) {
      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
  }
 else {
    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {
      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
    }
  }
}","void scheduleToPoolPool(){
  if (sessionPollnerCache.isPollingEnabled()) {
    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollnerCache.getCacheBasedPolling()) {
      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
  }
 else {
    if ((sessionPollnerCache.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {
      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
    }
  }
}",135,4,"scheduleToTimerPool:scheduleToPoolPool,sessionPollerPool:sessionPollnerCache,",229,1.1371661186218300,Beam
1687,,,113,12,,796,3.072555696964260,0
1688,"private void initProgram(){
  glUseProgram(this.program);
  vec3ArrayUniform=glGetUniformLocation(this.program,""cols"");
  chosenUniform=glGetUniformLocation(this.program,""chosen"");
  glUseProgram(0);
}","private void resetMatrix(){
  glUseProgram(this.program);
  vec3ArrayUniform=glGetUniformLocation(this.program,""cols"");
  chosenUnitiform=glGetUniformLocation(this.program,""chosen"");
  glUseProgram(0);
}",41,3,"initProgram:resetMatrix,chosenUniform:chosenUnitiform,",28,0.11882955233256000,Beam
1689,"public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}","public void rotateZ(double heda){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(heda);
  double s=Math.sin(heda);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}",87,5,"theta:heda,",12,0.053536323706309,Beam
1690,"public void replaceSplitElement(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
","public void replaceSplitSection(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
",21,4,"replaceSplitElement:replaceSplitSection,",3,0.01434337298075360,Beam
1691,"static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {
  Iterator it=set.iterator();
  boolean keepGoing=true;
  boolean sentLastChunk=false;
  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());
  do {
    mos.reset();
    int avgItemSize=0;
    int itemCount=0;
    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {
      Object key=it.next();
      DataSerializer.writeObject(key,mos);
      itemCount++;
      avgItemSize=mos.size() / itemCount;
    }
    DataSerializer.writeObject((Object)null,mos);
    int lastMsg=it.hasNext() ? 0 : 1;
    keepGoing=proc.executeWith(mos,lastMsg);
    sentLastChunk=lastMsg == 1 && keepGoing;
  }
 while (keepGoing && it.hasNext());
  return sentLastChunk;
}","static boolean chunkOffset(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {
  Iterator it=set.iterator();
  boolean keepGoing=true;
  boolean sentLastChunk=false;
  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());
  do {
    mos.reset();
    int avgItemSize=0;
    int itemCount=0;
    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {
      Object key=it.next();
      DataSerializer.writeObject(key,mos);
      itemCount++;
      avgItemSize=mos.size() / itemCount;
    }
    DataSerializer.writeObject((Object)null,mos);
    int lastMsg=it.hasNext() ? 0 : 1;
    keepGoing=proc.executeWith(mos,lastMsg);
    sentLastChunk=lastMsg == 1 && keepGoing;
  }
 while (keepGoing && it.hasNext());
  return sentLastChunk;
}",194,14,"chunkSet:chunkOffset,",109,0.491351576646169,Beam
1692,"public static String formatPercent(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}","public static String formatPixel(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}",52,5,"formatPercent:formatPixel,",5,0.021441749731699600,Beam
1693,"public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}","public RoundedIconGenerate(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}",130,15,"RoundedIconGenerator:RoundedIconGenerate,",111,0.4795292218526200,Beam
1694,,,62,3,,437,2.093052689234420,0
1695,"public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
","public void writeBytebytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
",61,7,"writeRawBytes:writeBytebytes,",20,0.06703660885492960,Beam
1696,,,152,8,,2063,96.36482333342230,0
1697,"private LocalDateTime parseDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",dateStr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parseDate(dateStr,false);
      }
    }
  }
  return date;
}
","private LocalDateTime parserDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",dateStr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parserDate(dateStr,false);
      }
    }
  }
  return date;
}
",110,5,"parseDate:parserDate,",9,0.04119193951288860,Beam
1698,,,170,21,,849,2.781269148985550,0
1699,,,332,9,,1248,6.836298036575320,0
1700,,,127,3,,469,3.900667444864910,0
1701,"public static boolean compareDoubles(double a,double b){
  if (Double.isNaN(a) && Double.isNaN(b))   return true;
  if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON;
  return a == b;
}
","public static boolean compareDoubles(double da,double b){
  if (Double.isNaN(da) && Double.isNaN(b))   return true;
  if (!Double.isInfinite(da) && !Double.isInfinite(b))   return Math.abs(da - b) <= EPSILON;
  return da == b;
}
",67,4,"a:da,",16,0.08952810764312740,Beam
1703,"public boolean areAllPermissionsGranted(){
  return deniedPermissionResponses.isEmpty();
}
","public boolean areAllPermissionsComplants(){
  return DeniedPermissionReponses.isEmpty();
}
",14,2,"areAllPermissionsGranted:areAllPermissionsComplants,deniedPermissionResponses:DeniedPermissionReponses,",54,0.25442539850870800,Beam
1704,,,86,8,,1081,4.5131392002105700,0
1705,"public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}","public static void copyExcept(Object src,Object dst,int lastSize,int deleteSection){
  if (deleteSection > 0 && lastSize > 0) {
    System.arraycopy(src,0,dst,0,deleteSection);
  }
  if (deleteSection < lastSize) {
    System.arraycopy(src,deleteSection + 1,dst,deleteSection,lastSize - deleteSection - 1);
  }
}",75,5,"removeIndex:deleteSection,oldSize:lastSize,",610,4.865385468800860,Beam
1706,,,124,8,,1815,10.196366143226600,0
1708,"public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",-1,result.signum());
}","public void divide(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",-1,result.signum());
}",249,11,"testNegPosFirstShorter:divide,",30,0.14492103656133000,Beam
1709,"public void onRestoreInstanceState(Bundle savedInstanceState){
  mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
","public void onRestoreApplicationState(Bundle savedApplicationState){
  mSelectedPositions.addAll(savedApplicationState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
",32,3,"onRestoreInstanceState:onRestoreApplicationState,savedInstanceState:savedApplicationState,",61,0.22371030648549400,Beam
1710,,,311,21,,2891,18.08470224539440,0
1711,"public Skype(String username,String password){
  this.username=username;
  this.password=password;
}
","public Skyphone(String username,String image){
  this.username=username;
  this.image=image;
}
",23,3,"Skype:Skyphone,password:image,",104,0.38026656707127900,Beam
1712,,,158,10,,2597,14.941838173071500,0
1713,,,159,7,,992,6.406367381413780,0
1714,"public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}","public static void writeall(InputStream inStr,OutputStream outputStream) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outputStream.write(bs,0,numRead);
  }
}",63,6,"pipeAll:writeall,outStr:outputStream,",64,0.3167993505795800,Beam
1715,"private void buildDescriptionPanel(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}","private void buildDescBar(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}",54,3,"buildDescriptionPanel:buildDescBar,",40,0.1984933654467270,Beam
1716,,,151,3,,401,3.8837295095125800,0
1717,"public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
","public void put(byte[] buffer,int offset,int part){
  if (part > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,part);
  this.contentLength+=part;
}
",63,5,"count:part,",48,0.21391695737838700,Beam
1719,"@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
","@Override protected void doDeploy(){
  super.doDeploy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
",40,4,"onDestroy:doDeploy,",16,0.06762384176254270,Beam
1720,,,31,4,,474,1.7319981018702200,0
1721,"private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}","private int indexOfElementInsideLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}",68,5,"indexOfElementInLevel:indexOfElementInsideLevel,",35,0.17565918763478600,Beam
1722,,,101,7,,1078,4.963256192207340,0
1723,"public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}","public void append(char b[]){
  int maxlength=buffer.length - pos;
  if (b.length < maxlength) {
    System.arraycopy(b,0,buffer,pos,b.length);
    pos+=b.length;
  }
 else {
    System.arraycopy(b,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > b.length - maxlength) ? buffer.length : b.length - maxlength];
    if (b.length > maxlength) {
      System.arraycopy(b,maxlength,buffer,0,b.length - maxlength);
      pos=b.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}",165,7,"c:b,",17,0.1012811024983720,Beam
1725,"public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}","public static boolean matchEmpty(String str){
  return (null == str || 0 == str.length());
}",25,2,"isEmpty:matchEmpty,",38,0.17331567605336500,Beam
1726,"public ModbusTransaction createTransaction(){
  ModbusSerialTransaction transaction=new ModbusSerialTransaction();
  transaction.setTransport(this);
  return transaction;
}
","public ModbusTransaction getTx(){
  ModbusSerialTransaction passport=new ModbusSerialTransaction();
  passport.setTransport(this);
  return passport;
}
",25,2,"createTransaction:getTx,transaction:passport,",49,0.18206752936045300,Beam
1727,,,29,3,,607,2.461297674973810,0
1728,"public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}
","public static ClassProperties loadproperties(Class[] cls,Properties properties,boolean inherIT){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherIT);
  }
  return cp;
}
",48,6,"loadProperties:loadproperties,inherit:inherIT,",257,1.1495426774025000,Beam
1729,,,93,6,,1189,5.690365437666580,0
1730,"public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}","public static String toutf8string(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}",30,2,"toUTF8String:toutf8string,",51,0.227201779683431,Beam
1731,,,101,5,,787,3.7736882011095700,0
1732,,,158,9,,1303,8.48026948372523,0
1733,"public static File createTempPath(String path) throws IOException {
  String sep=File.separator;
  File tempDir=new File(System.getProperty(""java.io.tmpdir"") + sep + path);
  if (!tempDir.exists())   if (!tempDir.mkdirs()) {
    boolean status=tempDir.delete();
    throw new IOException(""creation failed for dir "" + tempDir + ""status = ""+ status);
  }
  tempDir.deleteOnExit();
  return tempDir;
}
","public static File createtempDirectory(String path) throws IOException {
  String sep=File.separator;
  File tempDir=new File(System.getProperty(""java.io.tmpdir"") + sep + path);
  if (!tempDir.exists())   if (!tempDir.mkdirs()) {
    boolean status=tempDir.delete();
    throw new IOException(""creation failed for dir "" + tempDir + ""status = ""+ status);
  }
  tempDir.deleteOnExit();
  return tempDir;
}
",88,5,"createTempPath:createtempDirectory,",45,0.18541531960169500,Beam
1734,"boolean closeOutbound() throws SSLException {
  if (sslEngine == null || sslEngine.isOutboundDone()) {
    return false;
  }
  sslEngine.closeOutbound();
  createOutNetBuffer(0);
  SSLEngineResult result;
  for (; ; ) {
    result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());
    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {
      outNetBuffer.capacity(outNetBuffer.capacity() << 1);
      outNetBuffer.limit(outNetBuffer.capacity());
    }
 else {
      break;
    }
  }
  if (result.getStatus() != SSLEngineResult.Status.CLOSED) {
    throw new SSLException(""Improper close state: "" + result);
  }
  outNetBuffer.flip();
  return true;
}","boolean connectInbound() throws SSLException {
  if (sslengine == null || sslengine.isOutboundDone()) {
    return false;
  }
  sslengine.connectInbound();
  createOutNetBuffer(0);
  SSLEngineResult result;
  for (; ; ) {
    result=sslengine.wrap(emptyBuffer.buf(),outNetBuffer.buf());
    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {
      outNetBuffer.capacity(outNetBuffer.capacity() << 1);
      outNetBuffer.limit(outNetBuffer.capacity());
    }
 else {
      break;
    }
  }
  if (result.getStatus() != SSLEngineResult.Status.CLOSED) {
    throw new SSLException(""Improper close state: "" + result);
  }
  outNetBuffer.flip();
  return true;
}",144,5,"closeOutbound:connectInbound,sslEngine:sslengine,",223,1.1351771593093900,Beam
1735,"public void load(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}","public void read(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}",51,4,"load:read,",38,0.16104416847229000,Beam
1736,,,106,5,,1060,5.743601222833000,0
1737,"public void rebuildEventList(boolean resetSelected){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""rebuilding list"");
  }
  allEvents=null;
  activeEvents=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelected);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}
","public void reupdateEventlist(boolean resetSelected){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""rebuilding list"");
  }
  allEvents=null;
  activeEvents=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelected);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}
",66,6,"rebuildEventList:reupdateEventlist,",18,0.07021105686823530,Beam
1738,,,76,4,,808,3.5869333028793300,0
1739,"private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}","private Set<String> uniqueParameters(PreparedStatement stmt,String owner,String titles) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,titles);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}",87,6,"primaryKeys:uniqueParameters,tbl:titles,",521,2.7751572211583500,Beam
1742,,,320,30,,4153,28.83979663848880,0
1743,"public void putBytes(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}","public void PutParts(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}",47,2,"putBytes:PutParts,",12,0.041808708508809400,Beam
1744,"public boolean remove(JsonElement element){
  return elements.remove(element);
}
","public boolean release(JsonElement component){
  return elements.release(component);
}
",17,3,"remove:release,element:component,",70,0.25327977339426700,Beam
1745,,,83,5,,232,0.9271114548047380,0
1746,"public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {
  final String query=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ moduleId+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}","public static void insertBaseNames(final CConnection connection,final int rawTablePath,final int vmID) throws SQLException {
  final String query=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ vmID+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawTablePath);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}",89,6,"importBaseTypes:insertBaseNames,moduleId:vmID,rawModuleId:rawTablePath,",697,2.5382769544919300,Beam
1747,"@SuppressWarnings(""unchecked"") public void restore(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
","@SuppressWarnings(""unchecked"") public void estORE(String fileSize) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileSize));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
",65,5,"restore:estORE,fileName:fileSize,",80,0.38935229380925500,Beam
1748,"public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
","public static boolean isObjectReadyNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
",72,5,"isObjectAvailableNow:isObjectReadyNow,",6,0.03090190887451170,Beam
1749,,,39,3,,502,1.89304918050766,0
1750,,,137,6,,180,1.953794260819750,0
1751,"private void initCheckbox(CheckBoxPreference checkbox,boolean checked,boolean enabled){
  checkbox.setChecked(checked);
  checkbox.setEnabled(enabled);
}
","private void initTextBox(CheckBoxPreference bookpoint,boolean checked,boolean enabled){
  bookpoint.setChecked(checked);
  bookpoint.setEnabled(enabled);
}
",29,4,"initCheckbox:initTextBox,checkbox:bookpoint,",284,1.1695862690607700,Beam
1752,"public void stopSampling(){
  if (mSamplingCounter.decrementAndGet() == 0) {
    mHandler.stopSamplingThread();
    addFinalSample();
  }
}","public void disableSamling(){
  if (mSamagingThread.decrementAndGet() == 0) {
    mHandler.stopSamplingThread();
    addFinalSample();
  }
}",29,3,"stopSampling:disableSamling,mSamplingCounter:mSamagingThread,",122,0.5600571990013120,Beam
1753,"private void deleteCurrentLicenseFileOnDisk(){
  File licenseFile=new File(LicenseConstants.LICENSE_FILE_PATH);
  if (licenseFile.exists()) {
    licenseFile.delete();
  }
}
","private void deleteCurrentLicenseFilesonFile(){
  File licenceFolder=new File(LicenseConstants.LICENSE_FILE_PATH);
  if (licenceFolder.exists()) {
    licenceFolder.delete();
  }
}
",34,2,"deleteCurrentLicenseFileOnDisk:deleteCurrentLicenseFilesonFile,licenseFile:licenceFolder,",43,0.1627372900644940,Beam
1754,"@SuppressWarnings({""rawtypes"",""unchecked""}) public static <T extends Annotation>T unproxy(T annotation){
  Function unproxyFunction=getUnproxyFunction(annotation.annotationType());
  return (T)unproxyFunction.apply(annotation);
}
","@SuppressWarnings({""rawtypes"",""unchecked""}) public static <T extends Annotation>T unproxy(T Annoid){
  Function unproxyFunction=getUnproxyFunction(Annoid.annotationType());
  return (T)unproxyFunction.apply(Annoid);
}
",47,3,"annotation:Annoid,",4,0.025798292954762800,Beam
1755,"public SelectClause addWithAsProvidedName(String propertyName,String asName){
  selectList.add(new SelectClauseExpression(new PropertyValueExpression(propertyName),asName));
  return this;
}
","public SelectClause addWithAsProvidedName(String attributeValue,String ASName){
  selectList.add(new SelectClauseExpression(new PropertyValueExpression(attributeValue),ASName));
  return this;
}
",32,4,"propertyName:attributeValue,asName:ASName,",97,0.5361242532730100,Beam
1756,,,289,7,,1153,10.15069023768110,0
1757,"public boolean matchesNamingConvension(){
  return packageName.matches(JAVA_PACKAGE_CONVENSION);
}
","public boolean matchesNamingConvenession(){
  return packageName.matches(JAVA_PACKAGE_CONVENSION);
}
",15,2,"matchesNamingConvension:matchesNamingConvenession,",22,0.12115711768468200,Beam
1758,"@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public <R>CompletableFuture<R> connect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumerinator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
",51,5,"collect:connect,accumulator:accumerinator,",249,0.8746048212051390,Beam
1759,,,17,2,,269,1.2965283672014900,0
1760,,,154,12,,1421,8.011674284935000,0
1761,"private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}
","private static boolean isTrusted(Object conn,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(conn);
    return ctx.isTrustedObject(conn);
  }
  finally {
    state.set(saved);
  }
}
",54,5,"obj:conn,",16,0.068549911181132,Beam
1762,"public int elevationAt(float lat,float lon){
  if (frame_is_valid == true) {
    if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) {
      int lat_index=Math.round((lat - dsi.sw_lat) * 36000 / uhl.lat_post_interval);
      int lon_index=Math.round((lon - dsi.sw_lon) * 36000 / uhl.lon_post_interval);
      if (elevations[lon_index] == null)       readDataRecord(lon_index);
      return (int)elevations[lon_index][lat_index];
    }
  }
  return -32767;
}","public int elevationsPoint(float alt,float location){
  if (frame_is_valid == true) {
    if (alt >= dsi.sw_lat && alt <= dsi.ne_lat && location >= dsi.sw_lon && location <= dsi.ne_lon) {
      int lat_index=Math.round((alt - dsi.sw_lat) * 36000 / uhl.lat_post_interval);
      int lon_index=Math.round((location - dsi.sw_lon) * 36000 / uhl.lon_post_interval);
      if (elevations[lon_index] == null)       readDataRecord(lon_index);
      return (int)elevations[lon_index][lat_index];
    }
  }
  return -32767;
}",122,7,"lat:alt,elevationAt:elevationsPoint,lon:location,",376,1.9861852129300400,Beam
1763,,,59,5,,716,3.032077968120580,0
1764,,,28,1,,63,0.34126307169596400,0
1765,"public void schemaChanged(String serviceName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
","public void chemaChanged(String serviceName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
",25,4,"schemaChanged:chemaChanged,",8,0.0308734655380249,Beam
1766,"private String attemptToChooseFormattingPattern(){
  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {
    getAvailableFormats(nationalNumber.toString());
    String formattedNumber=attemptToFormatAccruedDigits();
    if (formattedNumber.length() > 0) {
      return formattedNumber;
    }
    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();
  }
 else {
    return appendNationalNumber(nationalNumber.toString());
  }
}","private String attemptToChooseFormattingFormat(){
  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {
    getAvailableFormats(nationalNumber.toString());
    String formattedNumber=attemptToFormatAccruedDigits();
    if (formattedNumber.length() > 0) {
      return formattedNumber;
    }
    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();
  }
 else {
    return appendNationalNumber(nationalNumber.toString());
  }
}",78,5,"attemptToChooseFormattingPattern:attemptToChooseFormattingFormat,",5,0.04124502340952560,Beam
1767,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}","public int iter() throws IOException {
  int vol;
  if ((vol=is.iter()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    vol=(char)((vol << 8) | (is.iter() & 0xff));
  }
 else {
    vol=(char)((is.iter() << 8) | (vol & 0xff));
  }
  return vol;
}",92,4,"read:iter,val:vol,",326,1.8198313991228700,Beam
1768,"@Override public long handleCommit(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    bb.put(rbv.get());
  }
  bb.flip();
  return journal.write(bb);
}","@Override public long handleCommits(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer fb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    fb.put(rbv.get());
  }
  fb.flip();
  return journal.write(fb);
}",105,8,"handleCommit:handleCommits,bb:fb,",265,1.3236321926116900,Beam
1770,,,32,4,,467,2.4002262592315700,0
1771,"private int measureHeight(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
","private int measuringBottom(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
",102,6,"measureHeight:measuringBottom,",11,0.03625618616739910,Beam
1772,,,186,12,,1756,9.113701101144160,0
1774,"public final double sampleMax(){
  long max=_max.getAndSet(0);
  return _scale * max;
}","public final double getScale(){
  long div=_max.getAndSet(0);
  return _scale * div;
}",23,4,"sampleMax:getScale,max:div,",170,0.8444983005523680,Beam
1775,"@Override public void update(List<EnvVar> dataList){
  envVarList.clear();
  if (dataList == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataList) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
","@Override public void updated(List<EnvVar> dataSet){
  envVarList.clear();
  if (dataSet == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataSet) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
",108,5,"update:updated,dataList:dataSet,",47,0.1890264630317690,Beam
1776,,,50,5,,889,4.195686014493310,0
1777,"public static float computeContrastBetweenColors(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}","public static float computeContrastBetweenCOLORS(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}",313,11,"computeContrastBetweenColors:computeContrastBetweenCOLORS,",72,0.6742376089096070,Beam
1778,"private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException {
  DataOutputStream dos=null;
  try {
    String xml=transMeta.getXML();
    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));
    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException(""Error while getting the graph XML"",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException(""Unable to find the graph fileL"",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException(""Error while Converting the graph xml string to bytes"",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException(""Error while writing the graph file"",ioe);
  }
 finally {
    if (dos != null) {
      try {
        dos.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}
","private static void generategraphFiles(TransMeta transMeta,String graphFile) throws GraphGeneratorException {
  DataOutputStream dos=null;
  try {
    String xml=transMeta.getXML();
    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));
    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException(""Error while getting the graph XML"",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException(""Unable to find the graph fileL"",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException(""Error while Converting the graph xml string to bytes"",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException(""Error while writing the graph file"",ioe);
  }
 finally {
    if (dos != null) {
      try {
        dos.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}
",159,9,"generateGraphFile:generategraphFiles,",22,0.08169025580088300,Beam
1779,"public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}
","public boolean writeAccount(Profile project){
  return writeAccount(project,false);
}
",17,2,"profile:project,putProfile:writeAccount,",63,0.2689824183781940,Beam
1780,"private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(xml);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
","private static PolicyNotification extractPolicyNotification(String x) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(x);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
",192,9,"xml:x,",37,0.20147658189137800,Beam
1781,,,92,7,,306,1.9977313836415600,0
1782,,,37,2,,266,0.8234285473823550,0
1783,,,76,4,,719,3.2612200220425900,0
1784,,,125,13,,3086,25.80185963710150,0
1785,"public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
","public void submission(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
",72,7,"submit:submission,",34,0.13030743996302300,Beam
1786,"protected void appendShortType(StringBuilder sb,FieldType fieldType,int fieldWidth){
  sb.append(""SMALLINT"");
}
","protected void appendSmallLength(StringBuilder bs,FieldType fieldType,int fieldWidth){
  bs.append(""SMALLINT"");
}
",22,4,"appendShortType:appendSmallLength,sb:bs,",156,0.7571537097295130,Beam
1787,,,17,1,,33,0.12112188339233400,0
1788,,,15,2,,127,0.5162419160207110,0
1789,"public PathImpl createTempFile(String prefix,String suffix) throws IOException {
  if (prefix == null || prefix.length() == 0)   prefix=""t"";
  if (suffix == null)   suffix="".tmp"";
synchronized (LOCK) {
    for (int i=0; i < 32768; i++) {
      int r=Math.abs((int)RandomUtil.getRandomLong());
      PathImpl file=lookup(prefix + r + suffix);
      if (file.createNewFile())       return file;
    }
  }
  throw new IOException(""cannot create temp file"");
}","public PathImpl createtempFolder(String prefix,String difffix) throws IOException {
  if (prefix == null || prefix.length() == 0)   prefix=""t"";
  if (difffix == null)   difffix="".tmp"";
synchronized (LOCK) {
    for (int z=0; z < 32768; z++) {
      int r=Math.abs((int)RandomUtil.getRandomLong());
      PathImpl file=lookup(prefix + r + difffix);
      if (file.createNewFile())       return file;
    }
  }
  throw new IOException(""cannot create temp file"");
}",111,7,"createTempFile:createtempFolder,suffix:difffix,i:z,",631,3.077098019917810,Beam
1790,,,209,11,,2465,11.879233344396000,0
1792,,,96,9,,2198,12.020735251903500,0
1793,"private String buildToolTip(final CTaggedGraphNodesContainerNode node){
  final StringBuilder tooltip=new StringBuilder(""<html>"");
  boolean first=true;
  for (  final NaviNode graphnode : node.getGraphNodes()) {
    if (!first) {
      tooltip.append(""<br>"");
    }
    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));
    first=false;
  }
  return tooltip + ""</html>"";
}
","private String getToolTips(final CTaggedGraphNodesContainerNode instance){
  final StringBuilder tooltip=new StringBuilder(""<html>"");
  boolean first=true;
  for (  final NaviNode graphnode : instance.getGraphNodes()) {
    if (!first) {
      tooltip.append(""<br>"");
    }
    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));
    first=false;
  }
  return tooltip + ""</html>"";
}
",74,5,"buildToolTip:getToolTips,node:instance,",174,0.8235722502072650,Beam
1794,"private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}","private int moveClients(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}",370,26,"moveComponents:moveClients,",37,0.27980517943700200,Beam
1796,"public void removeTitlePrefix(String prfx){
  titlePrefix.remove(prfx);
  firePropertyChange(TITLE_PREFIX,null,titlePrefix);
}
","public void removeHeaderFixed(String pix){
  titlePreprefix.remove(pix);
  firePropertyChange(TITLE_PREFIX,null,titlePreprefix);
}
",25,3,"prfx:pix,removeTitlePrefix:removeHeaderFixed,titlePrefix:titlePreprefix,",248,1.1416158556938200,Beam
1797,,,54,5,,1043,10.65531429052350,0
1798,"private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
","private void assertBackUPDetails(final BackupStatus pullupState){
  Map<DistributedMember,Set<PersistentID>> backupMap=pullupState.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
",90,5,"backupStatus:pullupState,assertBackupStatus:assertBackUPDetails,",79,0.6186715165774030,Beam
1800,,,23,2,,260,2.9672921657562300,0
1801,"public GradleDistribution deserializeFromString(String distributionString){
  Preconditions.checkNotNull(distributionString);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith(""))"")) {
    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith(""))"")) {
    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith(""))"")) {
    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributionString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributionString);
  throw new RuntimeException(message);
}","public GradleDistribution deserializeFromString(String distributString){
  Preconditions.checkNotNull(distributString);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributString.startsWith(localInstallationPrefix) && distributString.endsWith(""))"")) {
    String localInstallationDir=distributString.substring(localInstallationPrefix.length(),distributString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributString.startsWith(remoteDistributionPrefix) && distributString.endsWith(""))"")) {
    String remoteDistributionUri=distributString.substring(remoteDistributionPrefix.length(),distributString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributString.startsWith(versionPrefix) && distributString.endsWith(""))"")) {
    String version=distributString.substring(versionPrefix.length(),distributString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributString);
  throw new RuntimeException(message);
}",224,10,"distributionString:distributString,",19,0.30787352720896400,Beam
1802,,,34,3,,365,1.6565753777821900,0
1803,,,38,3,,426,1.8963558395703600,0
1804,"public StateMachine createStateMachine(StateMachineDefinition stateMachineDefinition){
  final Map<EventDefinition,EventData> eventDataMap=stateMachineDefinition.getEventDataMap();
  Set<Event> allEvents=createAllEvents(eventDataMap);
  Set<StateDefinition> stateDefinitions=stateMachineDefinition.getStates();
  Set<State> states=new HashSet<>();
  for (  StateDefinition stateDefinition : stateDefinitions) {
    State state=convertStateDefinitionToState(stateDefinition);
    states.add(state);
  }
  StateMachine stateMachine=new StateMachine(stateMachineDefinition.getVersion(),stateMachineDefinition.getName(),stateMachineDefinition.getDescription(),states,stateMachineDefinition.getCorrelationId());
  stateMachinesDAO.create(stateMachine);
  for (  Event event : allEvents) {
    event.setStateMachineInstanceId(stateMachine.getId());
    eventPersistenceService.persistEvent(event);
  }
  for (  State state : stateMachine.getStates()) {
    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));
  }
  return stateMachine;
}","public StateMachine createEventMachine(StateMachineDefinition stateManagerDef){
  final Map<EventDefinition,EventData> eventDataMap=stateManagerDef.getEventDataMap();
  Set<Event> allEvents=createAllEvents(eventDataMap);
  Set<StateDefinition> stateDefinitions=stateManagerDef.getStates();
  Set<State> states=new HashSet<>();
  for (  StateDefinition stateDefinition : stateDefinitions) {
    State state=convertStateDefinitionToState(stateDefinition);
    states.add(state);
  }
  StateMachine stateMachine=new StateMachine(stateManagerDef.getVersion(),stateManagerDef.getName(),stateManagerDef.getDescription(),states,stateManagerDef.getCorrelationId());
  stateMachinesDAO.create(stateMachine);
  for (  Event event : allEvents) {
    event.setStateMachineInstanceId(stateMachine.getId());
    eventPersistenceService.persistEvent(event);
  }
  for (  State state : stateMachine.getStates()) {
    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));
  }
  return stateMachine;
}",198,13,"createStateMachine:createEventMachine,stateMachineDefinition:stateManagerDef,",75,0.34906985362370800,Beam
1805,"private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}","private void updateUifromCmd(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}",216,14,"updateUiFromCommand:updateUifromCmd,",12,0.053139599164327000,Beam
1806,,,90,4,,824,10.20485689242680,0
1807,"public static double P_Harmonic(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmonic(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}","public static double P_Harmatic(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmatic(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}",119,8,"P_Harmonic:P_Harmatic,",49,0.8005768259366350,Beam
1808,,,173,12,,2069,11.928401045004500,0
1809,"public void addPauseListener(AnimatorPauseListener listener){
  if (mPauseListeners == null) {
    mPauseListeners=new ArrayList<AnimatorPauseListener>();
  }
  mPauseListeners.add(listener);
}
","public void addpauseHandler(AnimatorPauseListener listener){
  if (mPauseListeners == null) {
    mPauseListeners=new ArrayList<AnimatorPauseListener>();
  }
  mPauseListeners.add(listener);
}
",34,3,"addPauseListener:addpauseHandler,",10,0.04720516602198280,Beam
1810,"private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}","private void handleRequest(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}",121,5,"handleResponse:handleRequest,",35,0.17103163798650100,Beam
1811,"public void addOperand(ISpacePredicate operand){
  if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>();
  _operandsList.add(operand);
}
","public void addExpanded(ISpacePredicate ironand){
  if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>();
  _operandsList.add(ironand);
}
",32,3,"operand:ironand,addOperand:addExpanded,",99,0.4330594619115190,Beam
1812,,,16,2,,198,0.7740490277608240,0
1813,,,58,4,,472,2.125277554988860,0
1814,,,24,2,,184,0.8793435335159300,0
1815,"public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}","public static void read(int xf,int y1,Image i,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(i,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.read(xf,y1,image_width,image_height,pixels,properties,dos);
}",93,10,"write:read,x1:xf,image:i,",1165,29.53306897083920,Beam
1816,,,114,8,,293,1.8606031775474500,0
1817,"public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
","public String importTRl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
",180,14,"importTrl:importTRl,",34,0.12144653002421100,Beam
1818,,,86,5,,914,5.59777264992396,0
1820,"public java.lang.StringBuffer insert(int offset,char c){
  internal.insert(offset,c);
  return this;
}
","public java.lang.StringBuffer replace(int offset,char c){
  internal.replace(offset,c);
  return this;
}
",28,4,"insert:replace,",67,2.2178414980570500,Beam
1821,"public void testPlusMathContextPositive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c=""929487820944884782312124789.8748298842"";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals(""incorrect value"",c,res.toString());
  assertEquals(""incorrect scale"",cScale,res.scale());
}","public void assertPlusMathcontextposient(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c=""929487820944884782312124789.8748298842"";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals(""incorrect value"",c,res.toString());
  assertEquals(""incorrect scale"",cScale,res.scale());
}",101,10,"testPlusMathContextPositive:assertPlusMathcontextposient,",22,0.10638729333877600,Beam
1822,,,67,5,,550,2.5427222847938500,0
1823,"public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}","public static double[] expandArrayD(int bufferSize,double[] reportedAll){
  if (reportedAll == null) {
    return new double[bufferSize * 3];
  }
  int length=reportedAll.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(reportedAll,0,ret,0,length);
  return ret;
}",74,5,"currentArray:reportedAll,",46,0.22694753805796300,Beam
1824,,,129,2,,49,0.6124433318773910,0
1825,,,42,5,,749,3.2217275937398300,0
1826,,,50,4,,468,2.052246602376300,0
1827,"public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}
","public final int depth(){
  if (GWT.isScript()) {
    return jsArray.depth();
  }
 else {
    return javaArray.depth();
  }
}
",35,3,"size:depth,",5,0.034667340914408400,Beam
1828,"public void unlockForClear(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
","public void unlockForClear(InternalDistributedMember LockER){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",LockER,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !LockER.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(LockER);
  }
}
",106,5,"locker:LockER,",12,0.05199486414591470,Beam
1829,,,26,3,,439,2.436248771349590,0
1830,"@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}","@Override public void MousePatched(MouseEvent e){
  m_frameWaiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameWaiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}",374,8,"mousePressed:MousePatched,m_frameLimiter:m_frameWaiter,",193,1.0492935220400500,Beam
1831,,,104,10,,1610,15.555116820335400,0
1832,"public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}","public final void start(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  start(lm);
}",147,9,"log:start,",70,0.34695477883021000,Beam
1833,"public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}","public void printf(){
  Object[] iterChargingSeries=chargingTimes.toArray();
  Arrays.sort(iterChargingSeries);
  for (int i=0; i < iterChargingSeries.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingSeries[i];
    curItem.printf();
  }
}",60,5,"print:printf,iterChargingTimes:iterChargingSeries,",332,1.8504429419835400,Beam
1834,"public LogFormatter(Logger log){
  if (log == null)   log=Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
  Level lvl=null;
  while (log != null) {
    lvl=log.getLevel();
    if (lvl != null)     break;
    log=log.getParent();
  }
  ;
  if (lvl == null)   lvl=Level.WARNING;
  this.level=lvl;
}
","public logformatter(Logger fail){
  if (fail == null)   fail=Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
  Level layer=null;
  while (fail != null) {
    layer=fail.getLevel();
    if (layer != null)     break;
    fail=fail.getParent();
  }
  ;
  if (layer == null)   layer=Level.WARNING;
  this.level=layer;
}
",81,3,"LogFormatter:logformatter,log:fail,lvl:layer,",214,1.046880066394810,Beam
1835,,,179,10,,1718,7.484821625550590,0
1836,"public static Properties createProperties(final Map<String,String> map){
  Properties properties=new Properties();
  if (!(map == null || map.isEmpty())) {
    for (    Entry<String,String> entry : map.entrySet()) {
      properties.setProperty(entry.getKey(),entry.getValue());
    }
  }
  return properties;
}
","public static Properties createProtperties(final Map<String,String> complete){
  Properties apps=new Properties();
  if (!(complete == null || complete.isEmpty())) {
    for (    Entry<String,String> entry : complete.entrySet()) {
      apps.setProperty(entry.getKey(),entry.getValue());
    }
  }
  return apps;
}
",79,4,"map:complete,createProperties:createProtperties,properties:apps,",179,0.9160409609476730,Beam
1837,,,38,5,,621,2.0338803211847900,0
1838,"void addRule(String[] selector,AttributeSet declaration,boolean isLinked){
  int n=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(selector[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}","void addElement(String[] electer,AttributeSet declaration,boolean isLinked){
  int n=electer.length;
  StringBuilder sb=new StringBuilder();
  sb.append(electer[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(electer[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(electer[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,electer,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}",216,12,"addRule:addElement,selector:electer,",152,0.7182093898455300,Beam
1839,"public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {
  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));
}
","public void convertBuiltinSound(String soundQualification,InputStream data) throws IOException {
  builtinSounds.put(soundQualification,convertBuiltinSound(data));
}
",26,4,"soundIdentifier:soundQualification,installBuiltinSound:convertBuiltinSound,",146,0.5845252116521200,Beam
1840,"public static Object toArray(Collection<?> collection,Class<?> componentType){
  if (componentType.isPrimitive()) {
    Object array=Array.newInstance(componentType,collection.size());
    int index=0;
    for (    Object value : collection) {
      Array.set(array,index++,value);
    }
    return array;
  }
  return collection.toArray((Object[])Array.newInstance(componentType,collection.size()));
}","public static Object asAddress(Collection<?> coll,Class<?> componentType){
  if (componentType.isPrimitive()) {
    Object array=Array.newInstance(componentType,coll.size());
    int index=0;
    for (    Object value : coll) {
      Array.set(array,index++,value);
    }
    return array;
  }
  return coll.asAddress((Object[])Array.newInstance(componentType,coll.size()));
}",98,6,"toArray:asAddress,collection:coll,",124,0.855984874566396,Beam
1841,"public Repository(String domain,boolean fairLock){
  lock=new ReentrantReadWriteLock(fairLock);
  domainTb=new HashMap<String,Map<String,NamedObject>>(5);
  if (domain != null && domain.length() != 0)   this.domain=domain.intern();
 else   this.domain=ServiceName.DOMAIN;
  domainTb.put(this.domain,new HashMap<String,NamedObject>());
}","public Regository(String domain,boolean nativeLOCK){
  lock=new ReentrantReadWriteLock(nativeLOCK);
  domainGTbj=new HashMap<String,Map<String,NamedObject>>(5);
  if (domain != null && domain.length() != 0)   this.domain=domain.intern();
 else   this.domain=ServiceName.DOMAIN;
  domainGTbj.put(this.domain,new HashMap<String,NamedObject>());
}",89,5,"Repository:Regository,fairLock:nativeLOCK,domainTb:domainGTbj,",597,2.4729646325111400,Beam
1843,"public static boolean isWindows8(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}","public static boolean iswindows16(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}",35,3,"isWindows8:iswindows16,",19,0.07046684424082440,Beam
1844,,,172,6,,1282,5.6273828347524,0
1845,"private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}","private double addRecursively(ArrayList<double[]> thuild,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    thuild.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(thuild,hier,iter.get());
  }
  return weight;
}",175,10,"hull:thuild,",75,0.37436471780141200,Beam
1846,"public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
","public void loadfromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
",201,12,"updateFromResource:loadfromResource,",12,0.056136953830719,Beam
1847,"private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}","private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> allVariizations,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(allVariizations,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}",100,6,"typeArguments:allVariizations,",28,0.20547762314478600,Beam
1848,"public void collapseBuilding(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    collapseBuilding(coords);
  }
}
","public void collceBuild(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    collceBuild(coords);
  }
}
",53,5,"collapseBuilding:collceBuild,",24,0.1897040367126470,Beam
1849,,,57,5,,1148,4.053749930858610,0
1851,,,29,2,,265,1.1139974872271200,0
1852,"protected void add(CSVRecord record){
  records.add(Objects.requireNonNull(record));
}
","protected void read(CSVRecord row){
  records.read(Objects.requireNonNull(row));
}
",21,3,"add:read,record:row,",67,0.29166892369588200,Beam
1853,,,31,3,,503,2.5051729520161900,0
1854,"public Server start() throws SQLException {
  try {
    started=true;
    service.start();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.start();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}","public Server st() throws SQLException {
  try {
    started=true;
    service.st();
    String home=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,home);
    t.setDaemon(service.isDaemon());
    t.st();
    for (int multi=1; multi < 64; multi+=multi) {
      wait(multi);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,home,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}",146,7,"start:st,i:multi,name:home,",667,3.841228405634560,Beam
1855,"public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
","public static void closeCL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
",32,2,"closeEL:closeCL,",3,0.010116946697235100,Beam
1856,"public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){
  alphaAnimator(animators,view,0f);
  animators.add(ObjectAnimator.ofFloat(view,""translationY"",-recyclerView.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,""Added TOP Animator"");
}","public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View event,RecyclerView recycleerView){
  alphaAnimator(animators,event,0f);
  animators.add(ObjectAnimator.ofFloat(event,""translationY"",-recycleerView.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,""Added TOP Animator"");
}",73,4,"view:event,recyclerView:recycleerView,",501,4.749098654588060,Beam
1857,,,210,12,,2427,14.402500629425000,0
1860,,,17,2,,278,1.3560897310574800,0
1861,"public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
","public void reforce(final VirtualFile leaf,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(leaf,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,leaf,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
",79,6,"root:leaf,revert:reforce,",115,0.5269293785095220,Beam
1862,,,572,28,,1526,7.061185034116110,0
1863,"@SuppressWarnings(""unused"") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}","@SuppressWarnings(""unused"") public boolean onMoveEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}",488,27,"onTouchEvent:onMoveEvent,",3,0.038196714719136600,Beam
1864,,,21,2,,63,0.47066607475280800,0
1865,,,16,3,,289,1.3722689072291100,0
1866,"public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assetwk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}","public boolean CanInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assetwk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}",96,9,"canInvoke:CanInvoke,",7,0.04533666372299190,Beam
1867,"public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}","public static int b(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}",106,3,"hash:b,",6,0.027795608838399300,Beam
1868,"public static <E>List<E> of(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}","public static <E>List<E> in(E e1,E eB,E e3){
  List<E> group=new ArrayList<>();
  group.add(e1);
  group.add(eB);
  group.add(e3);
  return group;
}",59,5,"e2:eB,of:in,list:group,",564,3.0910292148590100,Beam
1869,"@Override protected void failed(){
  relation.setCanceled(true);
  super.failed();
}
","@Override protected void fail(){
  relation.setCanceled(true);
  super.fail();
}
",22,3,"failed:fail,",4,0.028687795003255200,Beam
1870,"public boolean isInvalidNode(){
  ASTNode first=fNodes.get(0);
  ASTNode candidate=first.getParent();
  if (candidate == null)   return false;
  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}","public boolean hasInvalidPart(){
  ASTNode first=fNodes.get(0);
  ASTNode Candidate=first.getParent();
  if (Candidate == null)   return false;
  if (Candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}",53,4,"isInvalidNode:hasInvalidPart,candidate:Candidate,",90,0.4559518297513330,Beam
1871,"public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
","public void refreshInheritedMethods(Set modifiedSuperExpandors){
  for (Iterator i=modifiedSuperExpandors.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
",54,4,"modifiedSuperExpandos:modifiedSuperExpandors,",5,0.03387753168741860,Beam
1872,"private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){
  final List<String> names=new ArrayList<>();
  for (  String localeName : localeNames) {
    if (symbolicSuffix.isEmpty()) {
      names.add(localeName);
    }
 else {
      names.add(localeName + ""."" + numSuffix);
      names.add(localeName + ""."" + symbolicSuffix);
    }
  }
  return names.toArray(new String[names.size()]);
}
","private static String[] collationMatchedRulenames(final List<String> locilleWorks,final int numSuffix,final String symbolicSuffix){
  final List<String> names=new ArrayList<>();
  for (  String localeName : locilleWorks) {
    if (symbolicSuffix.isEmpty()) {
      names.add(localeName);
    }
 else {
      names.add(localeName + ""."" + numSuffix);
      names.add(localeName + ""."" + symbolicSuffix);
    }
  }
  return names.toArray(new String[names.size()]);
}
",105,6,"collationMatchingRuleNames:collationMatchedRulenames,localeNames:locilleWorks,",310,2.6846075654029800,Beam
1873,,,37,3,,255,0.8300360838572180,0
1874,"private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
","private static String generateJPT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
",68,7,"generateJWT:generateJPT,",6,0.04072303771972660,Beam
1875,"public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text){
  return parseExpression(context,configNamespaces,text,0,false);
}","public static List<Node> parseExecuation(Context context,HashSet<String> configNamespaces,String text){
  return parseExecuation(context,configNamespaces,text,0,false);
}",36,4,"parseExpression:parseExecuation,",75,0.3876665512720740,Beam
1876,"public static void changeFont(JComponent comp,int style){
  Font font=comp.getFont();
  comp.setFont(font.deriveFont(style));
}
","public static void switchfont(JComponent comp,int rule){
  Font font=comp.getFont();
  comp.setFont(font.deriveFont(rule));
}
",34,4,"style:rule,changeFont:switchfont,",115,1.343184240659080,Beam
1877,"public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isReversal) {
      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException(""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",totalCreditedAmount,totalAmount);
  }
}","public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isRevisional,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isRevisional) {
      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException(""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",totalCreditedAmount,totalAmount);
  }
}",323,23,"isReversal:isRevisional,",50,0.63756023645401,Beam
1878,"private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}","private static String convertNumberStringToTwoDigites(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}",64,2,"forceNumberStringToTwoDigits:convertNumberStringToTwoDigites,",8,0.03575514157613120,Beam
1879,,,23,4,,610,2.786423655351000,0
1880,,,82,3,,74,0.3135656634966530,0
1882,"private boolean isAccessibleUserToKibana(Set<String> filters){
  if (filters.contains(""/.kibana"")) {
    return true;
  }
  return false;
}
","private boolean isAccessibleUserToAkoban(Set<String> filters){
  if (filters.contains(""/.kibana"")) {
    return true;
  }
  return false;
}
",29,2,"isAccessibleUserToKibana:isAccessibleUserToAkoban,",20,0.11068730354309100,Beam
1883,"protected static Vector convertToVector(final Object[] anArray){
  if (anArray == null) {
    return null;
  }
  final Vector v=new Vector(anArray.length);
  for (  final Object element : anArray) {
    v.addElement(element);
  }
  return v;
}
","protected static Vector converToMatrix(final Object[] canObject){
  if (canObject == null) {
    return null;
  }
  final Vector v=new Vector(canObject.length);
  for (  final Object element : canObject) {
    v.addElement(element);
  }
  return v;
}
",56,4,"convertToVector:converToMatrix,anArray:canObject,",110,0.4668287475903830,Beam
1884,"public boolean incrementReceived(){
  Long diff=System.currentTimeMillis() - startTime;
  if (diff >= 1000) {
    packetsPerSecond=intervalPackets;
    startTime=System.currentTimeMillis();
    intervalPackets=1;
    return true;
  }
 else {
    intervalPackets++;
  }
  this.receivedPackets++;
  return false;
}","public boolean incrementmentCached(){
  Long diff=System.currentTimeMillis() - startTime;
  if (diff >= 1000) {
    packetsPerSecond=intervalPackets;
    startTime=System.currentTimeMillis();
    intervalPackets=1;
    return true;
  }
 else {
    intervalPackets++;
  }
  this.receivedPackets++;
  return false;
}",59,5,"incrementReceived:incrementmentCached,",3,0.02266845703125,Beam
1885,"private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}","private static String tostring(double Coef){
  final String c=Double.tostring(Coef);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}",54,3,"toString:tostring,coeff:Coef,",51,0.2026915232340500,Beam
1886,"public ExternalProcessResult awaitTerminationAndResult(int timeoutMs,boolean destroyOnError) throws InterruptedException, TimeoutException, OperationCancellation, IOException {
  awaitTermination(timeoutMs,destroyOnError);
  return new ExternalProcessResult(process.exitValue(),getStdOutBytes(),getStdErrBytes());
}
","public ExternalProcessResult awaitTerminationWithExit(int sizeMS,boolean killONException) throws InterruptedException, TimeoutException, OperationCancellation, IOException {
  awaitTermination(sizeMS,killONException);
  return new ExternalProcessResult(process.exitValue(),getStdOutBytes(),getStdErrBytes());
}
",46,4,"destroyOnError:killONException,timeoutMs:sizeMS,awaitTerminationAndResult:awaitTerminationWithExit,",336,3.032624344031020,Beam
1887,"public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}","public static List<SpaceTime> divideConquerBrownmanBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownmanBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}",99,9,"divideConquerBrownianBridge:divideConquerBrownmanBridge,",185,0.9671245058377580,Beam
1888,"Rules(Workspace workspace){
  this.root=workspace.getRoot();
  this.teamHook=workspace.getTeamHook();
}
","et(Workspace workingheet){
  this.root=workingheet.getRoot();
  this.teamHook=workingheet.getTeamHook();
}
",27,2,"Rules:et,workspace:workingheet,",155,0.6612419327100120,Beam
1889,"public static long[] interpose(long[] vector,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,updated,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    updated[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,updated,offset + len,vectorLen - offset);
  return updated;
}","public static long[] Interposition(long[] entry,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(entry,0,updated,0,idx);
  if (idx < entry.length) {
    int delta=offset & 63;
    updated[idx]|=entry[idx] & maskBelow(delta);
  }
  copy(entry,offset,updated,offset + len,vectorLen - offset);
  return updated;
}",110,8,"vector:entry,interpose:Interposition,",633,2.8480996052424100,Beam
1890,"private int countNonNewline(String str,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (str.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (str.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}","private int countNonNewline(String st,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (st.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (st.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}",74,8,"str:st,",3,0.026172252496083600,Beam
1891,"protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}","protected void drawText(String text1,String text2,int x,int y,Canvas bc){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  bc.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  bc.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}",167,13,"c:bc,",17,0.08736506303151450,Beam
1892,"public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : source.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + source + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(source.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}","public static List<String> unsafe(String from,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : from.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + from + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(from.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}",296,13,"unescape:unsafe,source:from,",425,2.2175578832626300,Beam
1893,"private Optional<CuratorFramework> createClient(String zookeeperUrl){
  if (StringUtils.isNotBlank(zookeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
","private Optional<CuratorFramework> getServer(String zookeeeperUrl){
  if (StringUtils.isNotBlank(zookeeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
",57,3,"createClient:getServer,zookeeperUrl:zookeeeperUrl,",50,0.2138981779416400,Beam
1894,"static void normalize(StringBuilder number){
  String normalizedNumber=normalize(number.toString());
  number.replace(0,number.length(),normalizedNumber);
}","static void ormalizer(StringBuilder position){
  String normalizedNumber=ormalizer(position.toString());
  position.replace(0,position.length(),normalizedNumber);
}",36,3,"normalize:ormalizer,number:position,",186,0.8494323889414470,Beam
1895,"String generateKey() throws OracleException {
  byte[] data=null;
  try {
    data=HashFuncs.getRandom();
  }
 catch (  Exception e) {
    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());
  }
  if (data == null) {
    data=fetchGuid();
  }
  if (data == null) {
    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);
  }
  return (ByteArray.rawToHex(data));
}
","String genGenId() throws OracleException {
  byte[] parent=null;
  try {
    parent=HashFuncs.getRandom();
  }
 catch (  Exception e) {
    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());
  }
  if (parent == null) {
    parent=fetchGuid();
  }
  if (parent == null) {
    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);
  }
  return (ByteArray.rawToHex(parent));
}
",94,4,"generateKey:genGenId,data:parent,",611,2.6359198967615800,Beam
1896,"public static String cutFromIndexOf(String string,String substring){
  int i=string.indexOf(substring);
  if (i != -1) {
    string=string.substring(i);
  }
  return string;
}","public static String cutAtArrayOf(String text,String substring){
  int i=text.indexOf(substring);
  if (i != -1) {
    text=text.substring(i);
  }
  return text;
}",44,4,"cutFromIndexOf:cutAtArrayOf,string:text,",187,0.9124226967493690,Beam
1897,,,35,3,,638,2.4346901257832800,0
1898,"public static String grabClass(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signature);
  return matcher.group(1);
}","public static String getCLASS(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signature);
  return matcher.group(1);
}",59,6,"grabClass:getCLASS,",8,0.03102635145187380,Beam
1899,,,17,4,,1287,5.57655264933904,0
1901,"public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}
","public byte[] extractorDATA(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}
",26,4,"extractData:extractorDATA,",15,0.08705174128214520,Beam
1902,"private V doGet(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}","private V goSet(Object start){
  if (start == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(start,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,start,n.start)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}",200,10,"key:start,doGet:goSet,",146,0.8021989703178410,Beam
1903,,,17,3,,400,1.6326165159543400,0
1904,"private void ensureCapacity(int additionalData){
  if ((this.position + additionalData) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + additionalData)) {
      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + additionalData;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}","private void enssureCapacement(int additionalData){
  if ((this.position + additionalData) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + additionalData)) {
      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + additionalData;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}",136,4,"ensureCapacity:enssureCapacement,",22,0.16171871026357000,Beam
1905,,,54,4,,576,2.4349984367688500,0
1907,"public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure condition){
  return dropWhile(self.toString(),condition);
}
","public static String dropsUnless(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure condition){
  return dropsUnless(self.toString(),condition);
}
",48,3,"dropWhile:dropsUnless,",74,0.545772910118103,Beam
1908,"public static String toString(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.toString(l,10);
  }
  return NUMBERS[(int)l];
}","public static String tostring(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.tostring(l,10);
  }
  return NUMBERS[(int)l];
}",41,5,"toString:tostring,",16,0.07826003630956020,Beam
1909,,,81,4,,522,3.4116929292678800,0
1910,,,27,4,,386,2.117338212331140,0
1912,"public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}
","public int seInt(String localeFormattedInteger){
  return Integer.seInt(localeFormattedInteger);
}
",17,2,"parseInt:seInt,",8,0.028644609451293900,Beam
1913,"public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
","public static Entry addObjectClass(Entry search){
  Attribute attribute=search.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    search.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return search;
}
",46,3,"entry:search,",11,0.11235393683115600,Beam
1914,"public void addDocumentType(DocumentType documentType){
  mDocumentTypes.add(documentType);
}
","public void addMediaPart(DocumentType ocumentId){
  mMediaFiles.add(ocumentId);
}
",16,3,"addDocumentType:addMediaPart,documentType:ocumentId,mDocumentTypes:mMediaFiles,",171,0.5960409601529440,Beam
1915,"public void addProcessInteractionListener(final ProcessInteractionListener l){
  if (l == null) {
    throw new IllegalArgumentException(""l must not be null!"");
  }
  processInteractionListeners.add(l);
}
","public void addProcessInteractiveAdapter(final ProcessInteractionListener l){
  if (l == null) {
    throw new IllegalArgumentException(""l must not be null!"");
  }
  processInteractionListeneners.add(l);
}
",32,3,"addProcessInteractionListener:addProcessInteractiveAdapter,processInteractionListeners:processInteractionListeneners,",251,0.9289675752321880,Beam
1916,"@SuppressWarnings(""unchecked"") public static <K>ImmutableArray<K> empty(){
  return (ImmutableArray<K>)EMPTY;
}
","@SuppressWarnings(""unchecked"") public static <K>ImmutableArray<K> equal(){
  return (ImmutableArray<K>)EMPTY;
}
",28,1,"empty:equal,",20,0.07287813822428390,Beam
1917,,,13,3,,330,1.3037589907646200,0
1919,"protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposals=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           proposals.add(editProposal);
        }
      }
    }
  }
  return proposals;
}
","protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposeal=new ArrayList<IEditProposal>();
  View projectview=getSelectedView();
  if (projectview != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(projectview)) {
          if (editProposal.isApplicable())           proposeal.add(editProposal);
        }
      }
    }
  }
  return proposeal;
}
",88,6,"proposals:proposeal,selectedView:projectview,",324,2.2909233768781000,Beam
1920,"public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}","public Builder addreadBody(byte[] feed){
  Assertions.checkState(feed != null && feed.length > 0);
  segments.add(new Segment(feed,null));
  return this;
}",42,3,"appendReadData:addreadBody,data:feed,",63,0.3055369257926940,Beam
1921,"public boolean isProcessed(Trace trace,Node node,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(node.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ node+ "" direction=""+ direction+ ""? ""+ ret);
  }
  return ret;
}
","public boolean isPresentled(Trace trace,Node instance,Direction director){
  boolean fin=false;
  if (processor.getNodeType() == instance.getType() && processor.getDirection() == director) {
    if (uriFilter == null || uriFilter.test(instance.getUri())) {
      fin=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ instance+ "" direction=""+ director+ ""? ""+ fin);
  }
  return fin;
}
",104,8,"isProcessed:isPresentled,node:instance,direction:director,ret:fin,",1351,7.577562832832340,Beam
1923,"public boolean isStored(){
  return Integer.signum(id) != -1;
}","public boolean isStorer(){
  return Integer.signum(id) != -1;
}",18,2,"isStored:isStorer,",5,0.02403792937596640,Beam
1925,"void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());
    addOns.addAll(changes.getOldVersions());
    Set<Extension> extensions=new HashSet<>();
    extensions.addAll(changes.getUnloadExtensions());
    extensions.addAll(changes.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) {
      return;
    }
  }
  uninstallAddOns(caller,changes.getUninstalls(),false);
  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());
  allAddons.addAll(changes.getInstalls());
  for (  AddOn addOn : allAddons) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addOn);
    }
    downloadAddOn(addOn);
  }
}
","void processAddsOffChange(Window logester,AddOnDependencyChecker.AddOnChangesResult changes){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());
    addOns.addAll(changes.getOldVersions());
    Set<Extension> extensions=new HashSet<>();
    extensions.addAll(changes.getUnloadExtensions());
    extensions.addAll(changes.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(logester,addOns,extensions,true)) {
      return;
    }
  }
  uninstallAddOns(logester,changes.getUninstalls(),false);
  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());
  allAddons.addAll(changes.getInstalls());
  for (  AddOn addOn : allAddons) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addOn);
    }
    downloadAddOn(addOn);
  }
}
",190,8,"processAddOnChanges:processAddsOffChange,caller:logester,",84,0.42600351174672400,Beam
1926,"private PendingIntent createRequestPendingIntent(@NonNull String pendingIntentClassName){
  PendingIntent pendingIntent=null;
  try {
    Class classOfPendingIntent=Class.forName(pendingIntentClassName);
    if (classOfPendingIntent != null) {
      Intent intent=new Intent(mContext,classOfPendingIntent);
      pendingIntent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return pendingIntent;
}","private PendingIntent createRequestPendingIntent(@NonNull String pendingIntentsClassName){
  PendingIntent pendingIntent=null;
  try {
    Class classOfPendingIntent=Class.forName(pendingIntentsClassName);
    if (classOfPendingIntent != null) {
      Intent intent=new Intent(mContext,classOfPendingIntent);
      pendingIntent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return pendingIntent;
}",81,7,"pendingIntentClassName:pendingIntentsClassName,",12,0.08086550235748290,Beam
1927,"public static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale,Voice voice){
  if (!registrationComplete)   throw new IllegalStateException(""Cannot inquire about modules while registration is ongoing"");
  if (sourceType == null)   throw new NullPointerException(""Received null source type"");
  if (targetType == null)   throw new NullPointerException(""Received null target type"");
  LinkedList<MaryDataType> seenTypes=new LinkedList<MaryDataType>();
  seenTypes.add(sourceType);
  return modulesRequiredForProcessing(sourceType,targetType,locale,voice,seenTypes);
}
","public static LinkedList<MaryModule> modulesRequiredForprocesscing(MaryDataType proxyInfo,MaryDataType targetType,Locale locale,Voice cue){
  if (!registrationComplete)   throw new IllegalStateException(""Cannot inquire about modules while registration is ongoing"");
  if (proxyInfo == null)   throw new NullPointerException(""Received null source type"");
  if (targetType == null)   throw new NullPointerException(""Received null target type"");
  LinkedList<MaryDataType> seenTypes=new LinkedList<MaryDataType>();
  seenTypes.add(proxyInfo);
  return modulesRequiredForprocesscing(proxyInfo,targetType,locale,cue,seenTypes);
}
",95,7,"modulesRequiredForProcessing:modulesRequiredForprocesscing,sourceType:proxyInfo,voice:cue,",434,2.1779863039652500,Beam
1928,,,18,2,,285,0.9847701191902160,0
1929,"public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,int timeoutInMs){
  return waitForAllActiveAndLiveReplicas(zkStateReader,null,timeoutInMs);
}
","public static boolean waitForAllActiveAndLiveOpericas(ZkStateReader zksStateRunner,int timeoutOutMS){
  return waitForAllActiveAndLiveOpericas(zksStateRunner,null,timeoutOutMS);
}
",23,3,"zkStateReader:zksStateRunner,timeoutInMs:timeoutOutMS,waitForAllActiveAndLiveReplicas:waitForAllActiveAndLiveOpericas,",600,2.998131255308790,Beam
1931,,,25,4,,716,3.1619285504023200,0
1932,,,19,3,,360,1.7501399040222200,0
1933,"static void queuePlayerCapeReplacement(AbstractClientPlayer player){
  final String displayName=player.getDisplayNameString();
  Logger.info(""Queueing cape replacement for %s"",displayName);
  THREAD_POOL.submit(null);
}
","static void queuePlayerCapereplacement(AbstractClientPlayer game){
  final String DisplayName=game.getDisplayNameString();
  Logger.info(""Queueing cape replacement for %s"",DisplayName);
  THREAD_POOL.submit(null);
}
",35,3,"player:game,queuePlayerCapeReplacement:queuePlayerCapereplacement,displayName:DisplayName,",183,0.8012717366218570,Beam
1934,"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}","public final boolean insert_source(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_infuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_infuracy,null,t_limit,null);
  return true;
}",112,15,"insert_via:insert_source,p_pull_tight_accuracy:p_pull_tight_infuracy,",363,8.928704035282130,Beam
1935,"public static Properties loadProperties(ClassLoader classLoader,String classpathResource){
  return loadProperties(null,classpathResource);
}
","public static Properties loadProtps(ClassLoader classLoader,String classpathResource){
  return loadProtps(null,classpathResource);
}
",21,3,"loadProperties:loadProtps,",20,0.08589963515599570,Beam
1936,,,45,6,,1500,10.891555325190200,0
1937,,,15,2,,54,0.18244953950246200,0
1938,"public static void fullReset(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
","public static void fullRebet(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
",24,2,"fullReset:fullRebet,",3,0.012495847543080600,Beam
1939,"public boolean readBoolean() throws IOException {
  return primitiveTypes.readBoolean();
}
","public boolean writeBOBoo() throws IOException {
  return primitiveTypes.writeBOBoo();
}
",16,2,"readBoolean:writeBOBoo,",30,0.15438967148462900,Beam
1941,"@Override public boolean hasQueuedReaderThreads(){
  return readerLock.hasQueuedThreads();
}
","@Override public boolean hasQueuedReaderthreadries(){
  return queueLock.hasQueuedThreads();
}
",16,2,"hasQueuedReaderThreads:hasQueuedReaderthreadries,readerLock:queueLock,",29,0.1272400458653770,Beam
1942,"SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseComponentType=linearArrayType.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}","SparseCollection(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L magValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,magValues,imagValues);
  _baseComponentType=linearArrayType.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,magValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}",291,22,"SparseArray:SparseCollection,realValues:magValues,",655,3.1698323925336200,Beam
1943,,,19,2,,153,0.6294476469357810,0
1944,"public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}","public static final byte[] unzip(byte[] src) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * src.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(src));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}",102,8,"in:src,",23,0.09781298637390140,Beam
1945,"private static Class<?> convertFieldType(String fieldType){
  if (fieldTypeMap.containsKey(fieldType)) {
    return fieldTypeMap.get(fieldType);
  }
  return null;
}
","private static Class<?> convertFieldTyp(String fieldType){
  if (fieldTypeMap.containsKey(fieldType)) {
    return fieldTypeMap.get(fieldType);
  }
  return null;
}
",35,3,"convertFieldType:convertFieldTyp,",35,0.15426517327626500,Beam
1946,"public void testBug66947() throws Exception {
  Connection con=null;
  try {
    Properties props=new Properties();
    props.setProperty(""useServerPrepStmts"",""true"");
    props.setProperty(""cachePrepStmts"",""true"");
    props.setProperty(""prepStmtCacheSize"",""2"");
    con=getConnectionWithProps(props);
    PreparedStatement ps1_1;
    PreparedStatement ps1_2;
    String query=""Select \'a\' from dual"";
    ps1_1=con.prepareStatement(query);
    ps1_1.execute();
    ps1_1.close();
    ps1_2=con.prepareStatement(query);
    assertSame(""SSPS should be taken from cache but is not the same."",ps1_1,ps1_2);
    ps1_2.execute();
    ps1_2.close();
    ps1_2.close();
    ps1_1=con.prepareStatement(query);
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_2,ps1_1);
    ps1_1.execute();
    ps1_1.close();
    ps1_1.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_1=con.prepareStatement(""Select \'b\' from dual"");
    ps1_1.execute();
    ps1_1.close();
    ps2_1=con.prepareStatement(""Select \'c\' from dual"");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=con.prepareStatement(""Select \'d\' from dual"");
    ps3_1.execute();
    ps3_1.close();
    ps1_2=con.prepareStatement(""Select \'b\' from dual"");
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_1,ps1_2);
    ps2_2=con.prepareStatement(""Select \'c\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps2_1,ps2_2);
    ps3_2=con.prepareStatement(""Select \'d\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps3_1,ps3_2);
  }
  finally {
    if (con != null) {
      con.close();
    }
  }
}","public void start() throws Exception {
  Connection con=null;
  try {
    Properties props=new Properties();
    props.setProperty(""useServerPrepStmts"",""true"");
    props.setProperty(""cachePrepStmts"",""true"");
    props.setProperty(""prepStmtCacheSize"",""2"");
    con=getConnectionWithProps(props);
    PreparedStatement ps1_1;
    PreparedStatement ps1_2;
    String query=""Select \'a\' from dual"";
    ps1_1=con.prepareStatement(query);
    ps1_1.execute();
    ps1_1.close();
    ps1_2=con.prepareStatement(query);
    assertSame(""SSPS should be taken from cache but is not the same."",ps1_1,ps1_2);
    ps1_2.execute();
    ps1_2.close();
    ps1_2.close();
    ps1_1=con.prepareStatement(query);
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_2,ps1_1);
    ps1_1.execute();
    ps1_1.close();
    ps1_1.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_1=con.prepareStatement(""Select \'b\' from dual"");
    ps1_1.execute();
    ps1_1.close();
    ps2_1=con.prepareStatement(""Select \'c\' from dual"");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=con.prepareStatement(""Select \'d\' from dual"");
    ps3_1.execute();
    ps3_1.close();
    ps1_2=con.prepareStatement(""Select \'b\' from dual"");
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_1,ps1_2);
    ps2_2=con.prepareStatement(""Select \'c\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps2_1,ps2_2);
    ps3_2=con.prepareStatement(""Select \'d\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps3_1,ps3_2);
  }
  finally {
    if (con != null) {
      con.close();
    }
  }
}",309,10,"testBug66947:start,",27,1.4089423497517900,Beam
1947,"public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}","public static void modifiedFiles(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}",64,5,"modifyFile:modifiedFiles,",64,0.2707166274388630,Beam
1948,"public double localScore(int i,int... parents){
  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=parents.length;
  Matrix covxx=getSelection1(covariances,parents);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,parents,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);
      _parents.removeAll(forbidden);
      parents=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(parents,covariances);
    }
    return Double.NaN;
  }
}","public double localScale(int i,int... pins){
  for (  int p : pins)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=pins.length;
  Matrix covxx=getSelection1(covariances,pins);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,pins,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < pins.length; y++)       _parents.add(pins[y]);
      _parents.removeAll(forbidden);
      pins=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       pins[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(pins,covariances);
    }
    return Double.NaN;
  }
}",355,21,"localScore:localScale,parents:pins,",193,1.6745648662249200,Beam
1949,,,187,10,,1775,9.092059894402820,0
1950,"@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}","@Override @SuppressWarnings(""unchecked"") public void extended(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}",126,5,"completed:extended,",35,0.17974167664845800,Beam
1951,,,346,15,,2277,14.527450867493900,0
1952,"@SuppressWarnings(""UnusedReturnValue"") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){
  final int count=OutlinesObj.getInt(PdfDictionary.Count);
  final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(FirstObj);
  if (FirstObj != null) {
    final Element root=OutlineDataXML.createElement(""root"");
    OutlineDataXML.appendChild(root);
    final int level=0;
    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);
  }
  return count;
}","@SuppressWarnings(""UnusedReturnValue"") public int readOutlineFileMetadata(final PdfObject OutlinersOb,final PdfObjectReader currentPdfFile){
  final int count=OutlinersOb.getInt(PdfDictionary.Count);
  final PdfObject FirstObj=OutlinersOb.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(FirstObj);
  if (FirstObj != null) {
    final Element root=OutlineDataXML.createElement(""root"");
    OutlineDataXML.appendChild(root);
    final int level=0;
    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);
  }
  return count;
}",100,7,"OutlinesObj:OutlinersOb,",14,0.06390372117360430,Beam
1953,,,436,27,,7308,41.21778350273770,0
1955,"public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}","public boolean processSecureTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}",66,9,"threadSafeTimeout:processSecureTimeout,",89,0.49040289322535200,Beam
1958,"public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
","public void setPage(AMIdentity ref,Map attrs){
  searchResults.add(ref);
  resultsMap.put(ref,attrs);
}
",28,5,"addResult:setPage,id:ref,",70,0.2825804551442460,Beam
1959,,,35,5,,184,0.6893100579579670,0
1960,"public void insertTwin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + inst + "" not found"");
}
","public void inserttwin(Instruction td,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == td) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + td + "" not found"");
}
",80,6,"inst:td,insertTwin:inserttwin,",81,0.3769990921020510,Beam
1961,,,44,8,,618,2.2208408236503600,0
1962,,,77,5,,1116,5.908716571331020,0
1963,"public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}
","public void addPutAndGetTimenanos(long term){
  putTimeNanos.addAndGet(term);
  getTimeNanos.addAndGet(term);
  if (Delegate != null)   Delegate.addPutAndGetTimenanos(term);
}
",36,5,"duration:term,addPutAndGetTimeNanos:addPutAndGetTimenanos,delegate:Delegate,",344,2.0051095326741500,Beam
1964,,,17,2,,198,0.9008217255274450,0
1965,"public void addSafeClass(SootClass clz){
  safeClasses.add(clz.getName());
}
","public void addSecureclass(SootClass ClZ){
  safeClasses.add(ClZ.getName());
}
",20,3,"addSafeClass:addSecureclass,clz:ClZ,",78,0.38984551827112800,Beam
1966,,,113,8,,1708,7.578176967302960,0
1967,"Sentence parseSentence(final String text,final ConversationContext ctx){
  if (isEmpty()) {
    return ConversationParser.parse(text,ctx);
  }
  String txt=text.trim();
  final Sentence sentence=new SentenceImplementation(ctx,txt);
  txt=ConversationParser.detectSentenceType(txt,sentence);
  if (typeMatching) {
    readTypeMatchExpressions(txt,ctx,sentence);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,ctx,sentence);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,ctx,sentence);
  }
  return sentence;
}
","Sentence parsesentencer(final String name,final ConversationContext ctx){
  if (isEmpty()) {
    return ConversationParser.parse(name,ctx);
  }
  String txt=name.trim();
  final Sentence lexence=new SentenceImplementation(ctx,txt);
  txt=ConversationParser.detectSentenceType(txt,lexence);
  if (typeMatching) {
    readTypeMatchExpressions(txt,ctx,lexence);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,ctx,lexence);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,ctx,lexence);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,ctx,lexence);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,ctx,lexence);
  }
  return lexence;
}
",145,10,"parseSentence:parsesentencer,text:name,sentence:lexence,",755,3.486582557360330,Beam
1968,"public static byte[] decode(String hexa) throws CoderException {
  if (hexa == null) {
    throw new CoderException(""can\'t decode empty String"");
  }
  if ((hexa.length() % 2) != 0) {
    throw new CoderException(""invalid hexadicimal String"");
  }
  int tamArray=hexa.length() / 2;
  byte[] retorno=new byte[tamArray];
  for (int i=0; i < tamArray; i++) {
    retorno[i]=hexToByte(hexa.substring(i * 2,i * 2 + 2));
  }
  return retorno;
}","public static byte[] decode(String shexa) throws CoderException {
  if (shexa == null) {
    throw new CoderException(""can\'t decode empty String"");
  }
  if ((shexa.length() % 2) != 0) {
    throw new CoderException(""invalid hexadicimal String"");
  }
  int tamArray=shexa.length() / 2;
  byte[] retorno=new byte[tamArray];
  for (int i=0; i < tamArray; i++) {
    retorno[i]=hexToByte(shexa.substring(i * 2,i * 2 + 2));
  }
  return retorno;
}",116,5,"hexa:shexa,",10,0.08553528785705570,Beam
1969,,,57,4,,510,5.969992431004840,0
1970,,,55,3,,186,1.0759346564610800,0
1971,"public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
","public void ad(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.ad(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
",57,6,"add:ad,",27,0.12529696623484300,Beam
1972,"public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}
","public void addChanClass(ChannelMap connectionData){
  if (!mChannelMaps.contains(connectionData)) {
    mChannelMaps.add(connectionData);
    int index=mChannelMaps.indexOf(connectionData);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(connectionData,Event.ADD));
  }
}
",60,4,"channelMap:connectionData,addChannelMap:addChanClass,",77,0.35570847590764400,Beam
1973,,,54,5,,936,4.829542358716330,0
1974,,,18,2,,239,1.1543028672536200,0
1976,"public static ExecutionSystem newExecutionSystem(URI uri,Map<String,?> env) throws IOException {
  return newExecutionSystem(uri,env,null);
}
","public static ExecutionSystem newExecationProcess(URI gi,Map<String,?> env) throws IOException {
  return newExecationProcess(gi,env,null);
}
",30,3,"newExecutionSystem:newExecationProcess,uri:gi,",251,1.6682021498680100,Beam
1977,,,72,4,,548,2.9305095593134600,0
1978,"public EMail createEMail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}
","public EMail createELMail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}
",43,4,"createEMail:createELMail,",10,0.03657764196395870,Beam
1979,"@Override public synchronized void powerOnSelfTest() throws Error {
  for (Iterator<WaveformSynthesizer> it=waveformSynthesizers.iterator(); it.hasNext(); ) {
    WaveformSynthesizer ws=it.next();
    ws.powerOnSelfTest();
  }
}
","@Override public synchronized void powerOnFirstTest() throws Error {
  for (Iterator<WaveformSynthesizer> it=waveformSyethesizers.iterator(); it.hasNext(); ) {
    WaveformSynthesizer ws=it.next();
    ws.powerOnFirstTest();
  }
}
",50,4,"powerOnSelfTest:powerOnFirstTest,waveformSynthesizers:waveformSyethesizers,",197,1.7299087564150500,Beam
1981,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}","public void spillBackground(Component c,Graphics g,int image,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(image,y);
    paint(g2,comp,width,height);
    g2.translate(-image,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,image,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}",165,11,"paintBorder:spillBackground,x:image,",294,2.0012213269869500,Beam
1982,"public static <T>ParallelFlux<T> from(Publisher<? extends T> source,int parallelism){
  return from(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}
","public static <T>ParallelFlux<T> empty(Publisher<? extends T> source,int parallelity){
  return empty(source,parallelity,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}
",42,3,"from:empty,parallelism:parallelity,",220,1.6317321101824400,Beam
1983,"private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){
  if (keyChain == null || keyToAdd == null) {
    return false;
  }
 else {
    for (    ECKey loopKey : keyChain) {
      if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}
","private boolean keyChainContainsPrivateKey(Collection<ECKey> royCh,ECKey keyToPush){
  if (royCh == null || keyToPush == null) {
    return false;
  }
 else {
    for (    ECKey loopKey : royCh) {
      if (Arrays.equals(keyToPush.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}
",69,4,"keyChain:royCh,keyToAdd:keyToPush,",74,0.5189496000607810,Beam
1984,"private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}","private void growing(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}",50,5,"grow:growing,",10,0.05030997196833290,Beam
1985,"@Override public boolean isTraceEnabled(){
  return logger.isLoggable(Level.FINEST);
}
","@Override public boolean isTRaceEnable(){
  return logger.isLoggable(Level.FINEST);
}
",19,2,"isTraceEnabled:isTRaceEnable,",14,0.0631594181060791,Beam
1986,,,37,5,,647,2.611350937684380,0
1987,,,43,6,,1020,3.5470606962839800,0
1989,,,12,2,,42,0.14755661090215000,0
1990,"public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {
  this.addr=address;
  this.port=port;
  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  channel=DatagramChannel.open(family);
  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);
  if (srcAddress != null) {
    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);
    try {
      channel.bind(new InetSocketAddress(srcAddress,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException(""Unable to bind to source address"");
    }
    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);
  }
}","public JdpGateChannel(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {
  this.addr=address;
  this.port=port;
  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  channel=DatagramChannel.open(family);
  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);
  if (srcAddress != null) {
    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);
    try {
      channel.bind(new InetSocketAddress(srcAddress,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException(""Unable to bind to source address"");
    }
    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);
  }
}",140,8,"JdpBroadcaster:JdpGateChannel,",125,0.7025572260220850,Beam
1991,"public static int randomRangeInt(int min,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));
}","public static int randomrangeInt(int mid,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - mid) + mid) : (Math.random() * (max - mid) + mid));
}",63,3,"randomRangeInt:randomrangeInt,min:mid,",93,0.9118194500605270,Beam
1992,"private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}","private static int lastIndexof(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}",98,5,"lastIndexOf:lastIndexof,",4,0.026601215203603100,Beam
1993,"public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
","public void stopSocket(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
",20,3,"closeStream:stopSocket,",8,0.035217010974884000,Beam
1994,,,66,6,,1471,5.788801372051240,0
1995,"public void await(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}","public void work(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}",144,8,"await:work,",3,0.015517048041025800,Beam
1996,,,39,4,,773,3.0840285301208500,0
1997,"public static float mean(float[] data,int[] inds){
  float mean=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[inds[i]];
  }
  mean/=inds.length;
  return mean;
}","public static float m(float[] func,int[] inds){
  float m=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(func[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    m+=func[inds[i]];
  }
  m/=inds.length;
  return m;
}",81,4,"mean:m,data:func,",104,0.499869712193807,Beam
1998,"public static boolean isExplicitAllType(String[] types){
  return types != null && types.length == 1 && ALL.equals(types[0]);
}","public static boolean isExplicitAllType(String[] services){
  return services != null && services.length == 1 && ALL.equals(services[0]);
}",33,2,"types:services,",23,0.132235852877299,Beam
2000,,,20,2,,288,1.587492283185320,0
2001,"public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}
","public void export(ByteBuffer bag){
  bag.putInt(seqId);
  if (info.isRowBlockEnabled())   bag.putInt(nRows);
  export(primaryKey,bag);
  for (  ByteArray cb : cellBlocks) {
    export(cb,bag);
  }
}
",54,8,"buf:bag,",5,0.04121801455815630,Beam
2002,,,61,5,,681,2.9090669631958000,0
2003,,,14,2,,276,1.0078479488690700,0
2005,"private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}","private void loadConfigurationFromJmxSettings(){
  String repoositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repoositoryProperty) {
    String[] repositoryIpHost=repoositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIngp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIngp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIngp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIngp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}",211,9,"loadConfigurationFromJvmParameters:loadConfigurationFromJmxSettings,repositoryProperty:repoositoryProperty,repositoryIp:repositoryIngp,",1820,8.397155634562180,Beam
2006,"public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}","public String flow(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}",181,12,"charge:flow,",9,0.3691973169644670,Beam
2007,"private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){
  return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements()));
}
","private Map<String,AnnotationMirror> annosInsidepackage(PackageElement directoryElement){
  return createImportedAnnotationsMap(ElementFilter.typesIn(directoryElement.getEnclosedElements()));
}
",29,2,"annosInPackage:annosInsidepackage,packageElement:directoryElement,",125,0.5974956234296160,Beam
2008,,,24,3,,655,2.8234723687171900,0
2009,,,98,8,,2034,19.226876401901200,0
2010,"public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}","public PKSS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}",28,2,"PKCS10Attribute:PKSS10Attribute,",5,0.01807193358739220,Beam
2011,"private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){
  try {
    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug(""writeLocalCSV SAVING  EMPTY!!"");
 else     log.debug(""writeLocalCSV SAVING --> "" + mostRecentData.bGValue);
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),""save.bin"")));
    oos.writeObject(mostRecentData);
    oos.flush();
    oos.close();
  }
 catch (  Exception e) {
    Log.e(TAG,""write to OutputStream failed"",e);
    log.error(""write to OutputStream failed"",e);
  }
}
","private void writeRemoteDSVL(MedtronicSensorRecord mostRecentData,Context context){
  try {
    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug(""writeLocalCSV SAVING  EMPTY!!"");
 else     log.debug(""writeLocalCSV SAVING --> "" + mostRecentData.bGValue);
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),""save.bin"")));
    oos.writeObject(mostRecentData);
    oos.flush();
    oos.close();
  }
 catch (  Exception e) {
    Log.e(TAG,""write to OutputStream failed"",e);
    log.error(""write to OutputStream failed"",e);
  }
}
",115,6,"writeLocalCSV:writeRemoteDSVL,",24,0.09878031810124720,Beam
2013,"@SuppressWarnings(""UnusedDeclaration"") public KeyValuePersistenceSettings(File settingsFile){
  InputStream in;
  try {
    in=new FileInputStream(settingsFile);
  }
 catch (  IOException e) {
    throw new IgniteException(""Failed to get input stream for Cassandra persistence settings file: "" + settingsFile.getAbsolutePath(),e);
  }
  init(loadSettings(in));
}
","@SuppressWarnings(""UnusedDeclaration"") public KeyValuepersistentOptions(File settingsFile){
  InputStream in;
  try {
    in=new FileInputStream(settingsFile);
  }
 catch (  IOException e) {
    throw new IgniteException(""Failed to get input stream for Cassandra persistence settings file: "" + settingsFile.getAbsolutePath(),e);
  }
  init(loadSettings(in));
}
",57,4,"KeyValuePersistenceSettings:KeyValuepersistentOptions,",20,0.07422576745351160,Beam
2014,"private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}","private void handleStateleft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}",63,5,"handleStateLeft:handleStateleft,",62,0.42173009316126500,Beam
2015,,,34,4,,406,1.604388451576230,0
2016,"public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}","public static int poiss(double Beta){
  int k=0;
  double p=1.0;
  double L=Math.exp(-Beta);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}",55,5,"poisson:poiss,lambda:Beta,",155,0.6705233693122860,Beam
2017,,,14,1,,63,0.25779982407887800,0
2018,"public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return invokeStatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
","public static Object callMethod(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return callMethod(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
",63,5,"invokeStatic:callMethod,",89,0.5362705628077190,Beam
2019,"private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}
","private void initialize(ModelValidator validater,MClient client){
  if (client == null)   m_globalValidators.add(validater);
  m_validators.add(validater);
  validater.initialize(this,client);
}
",41,5,"validator:validater,",6,0.03532687425613400,Beam
2020,"@Override public int parse(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}","@Override public int ize(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}",347,10,"parse:ize,",57,0.4437094767888390,Beam
2021,"public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
","public Request patch(String rule,String value){
  Objects.requireNonNull(rule);
  Objects.requireNonNull(value);
  _headers.put(rule,value);
  return this;
}
",38,4,"header:patch,key:rule,",379,1.6356947541236900,Beam
2022,"public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){
  System.arraycopy(sourceArray,0,destinationArray,0,offset);
  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);
}","public static void removeObjectAlongPosition(Object[] sourceArray,Object[] destinationArray,int from){
  System.arraycopy(sourceArray,0,destinationArray,0,from);
  System.arraycopy(sourceArray,from + 1,destinationArray,from,sourceArray.length - from - 1);
}",58,4,"offset:from,removeObjectAtOffset:removeObjectAlongPosition,",322,1.2642159024874400,Beam
2023,"public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){
  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);
  this.a=selectPrivateValue();
  this.A=g.modPow(a,N);
  return A;
}","public BigInteger generateClientChedentials(byte[] salt,byte[] identity,byte[] password){
  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);
  this.a=selectPrivateValue();
  this.A=g.modPow(a,N);
  return A;
}",64,8,"generateClientCredentials:generateClientChedentials,",3,0.012253983815511100,Beam
2024,"private void connect(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}","private void connection(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connection(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}",322,19,"connect:connection,",3,0.03889622688293460,Beam
2025,"protected void putCommand(final Class commandClass,final String[] names){
  Check.isTrue(names.length > 0,""names.length > 0"");
  _commandsToCanonicalNames.put(commandClass,names[0]);
  for (int i=0; i < names.length; i++) {
    _aliasesToCommands.put(names[i],commandClass);
  }
}","protected void setCommand(final Class actionClass,final String[] names){
  Check.isTrue(names.length > 0,""names.length > 0"");
  _commandsToCanonicalNames.put(actionClass,names[0]);
  for (int i=0; i < names.length; i++) {
    _aliasesToCommands.put(names[i],actionClass);
  }
}",71,6,"commandClass:actionClass,putCommand:setCommand,",135,0.7024628837903340,Beam
2026,,,180,8,,1506,6.805072883764900,0
2027,,,33,5,,1542,6.761325112978620,0
2028,"private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}","private void smoothSnapFromposition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo handler){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=handler.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=handler.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(handler.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}",163,18,"smoothSnapToPosition:smoothSnapFromposition,info:handler,",171,1.0320691029230800,Beam
2029,"public void requestSecondsUntilIdleLockout(){
  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT);
}
","public void getSecondsUntilIdLElockOut(){
  operationATIONS.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT);
}
",16,2,"requestSecondsUntilIdleLockout:getSecondsUntilIdLElockOut,operations:operationATIONS,",105,0.7097403605779010,Beam
2030,"private static String convertActionTypeToIntent(RamlActionType actionType,boolean isTargetCollection){
switch (actionType) {
case DELETE:
    return ""delete"";
case GET:
  return ""get"";
case POST:
if (isTargetCollection) {
  return ""create"";
}
case PUT:
return ""update"";
case PATCH:
return ""modify"";
default :
return ""do"";
}
}
","private static String convertActionTypeToIntent(RamlActionType actType,boolean isTargetCollection){
switch (actType) {
case DELETE:
    return ""delete"";
case GET:
  return ""get"";
case POST:
if (isTargetCollection) {
  return ""create"";
}
case PUT:
return ""update"";
case PATCH:
return ""modify"";
default :
return ""do"";
}
}
",60,8,"actionType:actType,",4,0.019111470381418900,Beam
2031,"public void waitForOperations(){
  operator.waitForOperations();
}
","public void waitForOperationations(){
  atom.waitForOperationations();
}
",13,2,"waitForOperations:waitForOperationations,operator:atom,",35,0.12418681383132900,Beam
2032,"public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}
","public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> allGroups,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,allGroups,dictionaries);
  }
}
",74,7,"validGrains:allGroups,",59,0.36659204959869400,Beam
2033,"public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}","public boolean create(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}
",229,9,"disableVMAX3Compression:create,",53,0.3518308162689210,Beam
2034,"@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}
","@Override public DocumentType createClassType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}
",35,4,"createDocumentType:createClassType,",42,0.17138736248016400,Beam
2035,"public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}","public void ShutDOWN(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.ShutDOWN();
  instantPool.ShutDOWN();
  longRunningPool.ShutDOWN();
  workStealingPool.ShutDOWN();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}",256,9,"shutdown:ShutDOWN,",11,0.18490543365478500,Beam
2036,,,47,2,,266,1.475770656267800,0
2037,,,35,5,,1247,8.453341559569040,0
2038,,,70,5,,951,9.449043675263720,0
2039,"public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewHolder(holder,position,Collections.emptyList());
}
","public void onBindHeaderViewHander(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewHander(holder,position,Collections.emptyList());
}
",27,3,"onBindHeaderViewHolder:onBindHeaderViewHander,",9,0.05294603904088340,Beam
2040,"public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){
  return clickListeners.remove(itemClickListener);
}
","public boolean removeOnItemclickEvent(OnItemClickListener cellFocusEvent){
  return clickListenators.remove(cellFocusEvent);
}
",17,3,"removeOnItemClickListener:removeOnItemclickEvent,itemClickListener:cellFocusEvent,clickListeners:clickListenators,",188,0.4870143453280130,Beam
2041,,,40,3,,624,2.7992173512776700,0
2042,,,121,6,,287,1.6844837506612100,0
2043,"@Override public boolean batchFinished(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}","@Override public boolean processingFinilled(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFormat=getInputFormat();
  int cutOff=(int)Math.round(toFormat.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFormat.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFormat.numInstances(); i++) {
      push(toFormat.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}",140,8,"batchFinished:processingFinilled,toFilter:toFormat,",410,2.1975961963335700,Beam
2044,"public static boolean isModule(IResource resource){
  return (resource != null && TLA_EXTENSION.equals(resource.getFileExtension()));
}
","public static boolean ISResource(IResource buffer){
  return (buffer != null && TLA_EXTENSION.equals(buffer.getFileExtension()));
}
",28,2,"isModule:ISResource,resource:buffer,",148,0.9809388438860580,Beam
2047,"public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
","public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long instanceId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,instanceId);
}
",61,9,"threadId:instanceId,",37,0.17974649667739900,Beam
2048,,,52,4,,535,2.212846557299300,0
2049,,,153,7,,1811,8.555159219106040,0
2050,"public void put(Song song){
  if (!mSongs.contains(song)) {
    mSongs.add(song);
  }
}
","public void put(Song site){
  if (!mSongs.contains(site)) {
    mSongs.add(site);
  }
}
",28,3,"song:site,",6,0.04003355900446570,Beam
2051,"public void write(PrintStream out){
  write(out,table);
}
","public void pipe(PrintStream this){
  pipe(this,table);
}
",16,3,"write:pipe,out:this,",74,0.3076245387395220,Beam
2052,"private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){
  long startFix=System.currentTimeMillis();
  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec);
  if (result.fixed) {
    removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result);
  }
 else {
    fallbackToString(widthMeasureSpec,heightMeasureSpec);
  }
  long fixDuration=System.currentTimeMillis() - startFix;
  Logger.d(TAG,""fixSpannedWithSpaces() duration in ms: "" + fixDuration);
}
","private void fixSpannedWithPlace(SpannableStringBuilder builder,int widthMeasureSpec,int heightStringSpec){
  long startFix=System.currentTimeMillis();
  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightStringSpec);
  if (result.fixed) {
    removeUnneededSpaces(widthMeasureSpec,heightStringSpec,builder,result);
  }
 else {
    fallbackToString(widthMeasureSpec,heightStringSpec);
  }
  long fixDuration=System.currentTimeMillis() - startFix;
  Logger.d(TAG,""fixSpannedWithSpaces() duration in ms: "" + fixDuration);
}
",87,7,"heightMeasureSpec:heightStringSpec,fixSpannedWithSpaces:fixSpannedWithPlace,",194,2.2686918934186300,Beam
2053,"@Override public LogMessage readNextLogMessage(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
","@Override public LogMessage readNextLOGLine(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
",371,12,"readNextLogMessage:readNextLOGLine,",14,0.07781866788864140,Beam
2054,"@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}","@Override public double calculalN(double delta,double eprilon){
  double i=1;
  while (conf(i,delta) > eprilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (eprilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}",82,4,"calculateM:calculalN,epsilon:eprilon,",152,0.990810759862264,Beam
2055,"public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}
","public static void close(@CheckForNull OutputStream OutputPath){
  if (OutputPath == null) {
    return;
  }
  try {
    OutputPath.close();
  }
 catch (  IOException e) {
  }
}
",38,2,"outputStream:OutputPath,",26,0.11052358150482200,Beam
2056,"public boolean sendViaDataSocket(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}","public boolean sendViaWebSource(byte[] bytes,int start,int fin){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (fin == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,fin);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(fin);
  return true;
}",104,7,"sendViaDataSocket:sendViaWebSource,len:fin,",213,0.8203987161318460,Beam
2057,"public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void divide(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",254,11,"testNegPosFirstShorter:divide,",29,0.147959037621816,Beam
2058,"@Override public abstract List<JToolBar> createToolBars(Application a,@Nullable View p);
","@Override public abstract List<JToolBar> createHelpBarts(Application a,@Nullable View p);
",19,3,"createToolBars:createHelpBarts,",11,0.04754352569580080,Beam
2061,"public void clientDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisconnect();
  }
  killKeepalive(""client disconnect"");
}
","public void serverDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.serverDisconnect();
  }
  killKeepalive(""client disconnect"");
}
",79,6,"clientDisconnect:serverDisconnect,",6,0.024632966518402100,Beam
2062,,,60,3,,526,3.282015073299410,0
2063,"protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
","protected static double calcQ_i(double f,double la){
  return la * Math.exp(-la * f);
}
",26,3,"lambda:la,",3,0.02217287222544350,Beam
2065,"private String convertLessThanOneThousand(int number){
  String soFar;
  if (number % 100 < 20) {
    soFar=numNames[number % 100];
    number/=100;
  }
 else {
    soFar=numNames[number % 10];
    number/=10;
    String s=Integer.toString(number);
    if (s.endsWith(""2"") && !soFar.equals(""""))     soFar="" VINT-I-"" + soFar.trim();
 else     if (soFar.equals(""""))     soFar=tensNames[number % 10] + soFar;
 else     soFar=tensNames[number % 10] + ""-"" + soFar;
    number/=10;
  }
  if (number == 0)   return tensNames[number % 10] + soFar;
  if (number > 1)   soFar=""S"" + soFar;
  if (number == 1 && !soFar.equals(""""))   number=0;
  return numNames[number] + "" CENT"" + soFar;
}","private String convertLessThanOneTooousands(int counter){
  String foFer;
  if (counter % 100 < 20) {
    foFer=numNames[counter % 100];
    counter/=100;
  }
 else {
    foFer=numNames[counter % 10];
    counter/=10;
    String s=Integer.toString(counter);
    if (s.endsWith(""2"") && !foFer.equals(""""))     foFer="" VINT-I-"" + foFer.trim();
 else     if (foFer.equals(""""))     foFer=tensPosts[counter % 10] + foFer;
 else     foFer=tensPosts[counter % 10] + ""-"" + foFer;
    counter/=10;
  }
  if (counter == 0)   return tensPosts[counter % 10] + foFer;
  if (counter > 1)   foFer=""S"" + foFer;
  if (counter == 1 && !foFer.equals(""""))   counter=0;
  return numNames[counter] + "" CENT"" + foFer;
}",183,6,"convertLessThanOneThousand:convertLessThanOneTooousands,number:counter,soFar:foFer,tensNames:tensPosts,",1178,15.579658655325600,Beam
2066,"protected static boolean networkMonitorExist(String nwMonName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}","protected static boolean networkMonitorAbsists(String nwMonName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}",119,6,"networkMonitorExist:networkMonitorAbsists,",11,0.07376149098078410,Beam
2067,"public void createBounds(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}","public void createBandounds(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int ll=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    ll=Math.min(w.getDrawX(),ll);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(ll,t,r - ll,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}",172,9,"createBounds:createBandounds,l:ll,",214,1.1985990603764900,Beam
2068,,,233,18,,2424,12.067319456736200,0
2069,"public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
","public static boolean isInternetAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
",45,4,"isNetworkAvailable:isInternetAvailable,",6,0.02418410380681360,Beam
2070,"public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}","public static List<List<Double>> partunkArray(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}",119,7,"partitionVariable:partunkArray,",47,0.21806110541025800,Beam
2071,,,236,13,,3265,20.708768407503800,0
2072,"public int findCarByRoadNumber(String roadNumber){
  if (sysList != null) {
    if (!roadNumber.equals(_roadNumber)) {
      return getIndex(0,roadNumber);
    }
    int index=getIndex(_index,roadNumber);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadNumber);
  }
  return -1;
}","public int findCarByRoadNumber(String roadsCode){
  if (sysList != null) {
    if (!roadsCode.equals(_roadNumber)) {
      return getIndex(0,roadsCode);
    }
    int index=getIndex(_index,roadsCode);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadsCode);
  }
  return -1;
}",70,6,"roadNumber:roadsCode,",22,0.12268956899642900,Beam
2073,"public static Object unserialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return unserialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}","public static Object unoptimizable(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return unoptimizable(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}",154,4,"unserialize:unoptimizable,",17,0.11983941396077500,Beam
2074,"public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}","public static void showStatusFile(String msg){
  showStatusFile(msg,3500);
}",17,2,"showErrorMessage:showStatusFile,",41,0.14928892850875900,Beam
2075,"private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}","private String generateZonesetCloneName(String zonesetToClon){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClon + ""-""+ dateString;
}",103,8,"zonesetToClone:zonesetToClon,",5,0.0566752831141154,Beam
2076,"private void printBootstrapMap(){
  LOG.info(""Bootstrap map:"");
  for (  Integer i : chainMap.keySet()) {
    LOG.info(String.format(""  %6d: %d"",i,chainMap.get(i)));
  }
}","private void printBootchainmap(){
  LOG.info(""Bootstrap map:"");
  for (  Integer i : chainMap.keySet()) {
    LOG.info(String.format(""  %6d: %d"",i,chainMap.get(i)));
  }
}",48,3,"printBootstrapMap:printBootchainmap,",22,0.06873886585235600,Beam
2077,"protected boolean removeTurntable(LayoutTurntable o){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == o) {
    selectedObject=null;
  }
  if (prevSelectedObject == o) {
    prevSelectedObject=null;
  }
  for (int j=0; j < o.getNumberRays(); j++) {
    TrackSegment t=o.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(o.getRayCoordsIndexed(j),o,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == o) {
      turntableList.remove(i);
      o.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}","protected boolean removeturntable(LayoutTurntable o){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == o) {
    selectedObject=null;
  }
  if (prevSelectedObject == o) {
    prevSelectedObject=null;
  }
  for (int j=0; j < o.getNumberRays(); j++) {
    TrackSegment t=o.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(o.getRayCoordsIndexed(j),o,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == o) {
      turntableList.remove(i);
      o.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}",255,12,"removeTurntable:removeturntable,",6,0.044944425423940000,Beam
2078,"private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}","private boolean loadUnpackedUMD(String journal) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(journal);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}",114,9,"filename:journal,",16,0.06236974000930790,Beam
2079,"private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {
    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));
  }
  return blist;
}
","private List<Pair<String,Object>> toPairsMap(final Map<String,Object> bindings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {
    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));
  }
  return blist;
}
",98,4,"toPairList:toPairsMap,",10,0.04281560182571410,Beam
2080,"private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
","private String llives(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
",50,2,"liveness:llives,",8,0.031925912698109900,Beam
2081,,,43,6,,866,19.34929631551110,0
2082,"public static String addAlpha(String originalColor,double alpha){
  long alphaFixed=Math.round(alpha * 255);
  String alphaHex=Long.toHexString(alphaFixed);
  if (alphaHex.length() == 1) {
    alphaHex=""0"" + alphaHex;
  }
  originalColor=originalColor.replace(""#"",""#"" + alphaHex);
  return originalColor;
}","public static String applyalpha(String originalGray,double alpha){
  long alphaFixed=Math.round(alpha * 255);
  String alphaHex=Long.toHexString(alphaFixed);
  if (alphaHex.length() == 1) {
    alphaHex=""0"" + alphaHex;
  }
  originalGray=originalGray.replace(""#"",""#"" + alphaHex);
  return originalGray;
}",69,5,"addAlpha:applyalpha,originalColor:originalGray,",175,1.0091310461362200,Beam
2083,"public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){
  return playerIdent.equals(getIdentificationForAsString(compareTo));
}
","public static boolean areIdentical(String teamUb,OfflinePlayer compareTo){
  return teamUb.equals(getIdentificationForAsString(compareTo));
}
",24,3,"playerIdent:teamUb,",14,0.05938273270924890,Beam
2084,"public boolean send(byte[] bytes){
  if (!connected)   return false;
  try {
    outputStream.write(bytes);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}
","public boolean execute(byte[] blocks){
  if (!connected)   return false;
  try {
    outputStream.write(blocks);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}
",75,4,"send:execute,bytes:blocks,",65,0.3062986969947820,Beam
2085,"private boolean validateCustomCatalog(String title,String value){
  return false;
}
","private boolean validatecustomConfig(String title,String value){
  return false;
}
",15,3,"validateCustomCatalog:validatecustomConfig,",9,0.02986193895339970,Beam
2086,"public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}","public static void refute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}",196,12,"compute:refute,",3,0.018166855971018500,Beam
2087,"void removeRipple(Ripple ripple){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ripple);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}","void removeRipple(Ripple ippler){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ippler);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}",78,7,"ripple:ippler,",5,0.02763277292251590,Beam
2088,,,93,6,,1140,6.609266185760500,0
2089,,,97,7,,1061,5.383532563845320,0
2090,"protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}","protected void resize(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}",357,19,"onPageScrolled:resize,",82,2.7765976945559200,Beam
2091,,,14,3,,97,0.3937203963597620,0
2092,"void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}","void PostMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}",393,18,"postMessage:PostMessage,",66,0.4298354029655460,Beam
2093,"protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}","protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean TheMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,TheMap);
    paintLabel(originGeo,ringDist,graphics,TheMap);
  }
}",125,11,"theMap:TheMap,",5,0.021115811665852900,Beam
2095,"void copyNodeStructure(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}","void init(ArrayList<Node> destinate){
  while (destinate.size() < nodes.size())   destinate.add(new Node());
  while (destinate.size() > nodes.size())   destinate.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destinate.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}",313,8,"copyNodeStructure:init,destination:destinate,",84,0.49006096919377600,Beam
2096,,,32,2,,245,0.7285985787709550,0
2097,"public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}
","public boolean logOutAccount(String username,HttpServletRequest exec){
  return logOutAccount(username,exec,true,true);
}
",24,3,"logoutUser:logOutAccount,req:exec,",262,1.1677423199017800,Beam
2098,"protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
","protected void transcode(File io,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(io));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
",88,7,"file:io,",25,0.08260448376337690,Beam
2101,"public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}
","public QuadEdge makeEdge(Vertex os,Vertex dh){
  QuadEdge q=QuadEdge.makeEdge(os,dh);
  quadEdges.add(q);
  return q;
}
",34,5,"d:dh,o:os,",169,0.7865421136220300,Beam
2102,"protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){
  try {
    InputStream is=clazz.getResourceAsStream(resource);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected static Map<String,Step> patch(Class<? extends RSLPStemmerBase> clazz,String data){
  try {
    InputStream is=clazz.getResourceAsStream(data);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",130,9,"parse:patch,resource:data,",191,1.0388693849245700,Beam
2104,"public static boolean isChar(String desc){
  return desc.endsWith(""C"");
}
","public static boolean isLetter(String Desc){
  return Desc.endsWith(""C"");
}
",18,2,"desc:Desc,isChar:isLetter,",115,0.5468081752459210,Beam
2105,"public void stateChanged(ChangeEvent e){
  if (ignoreUpdate) {
    return;
  }
  double value=(double)(1800 - setpointSlider.getValue()) / 10;
  setSetPoint(value);
  sim.setSetPoint(value);
}","public void configLost(ChangeEvent e){
  if (ignoreUpdate) {
    return;
  }
  double value=(double)(1800 - setpointSlider.getValue()) / 10;
  setSetPoint(value);
  sim.setSetPoint(value);
}",47,6,"stateChanged:configLost,",37,0.23637515703837100,Beam
2106,"public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
","public ActionRequestHelper depson(ActionRequestHelper predension){
  mDependencies.add(predension);
  return this;
}
",19,3,"dependency:predension,dependsOn:depson,",56,0.260026228427887,Beam
2107,,,40,4,,813,4.179154372215270,0
2108,"public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}
","public static void min(byte[] result){
  DualPivotQuicksort.min(result);
}
",19,2,"sort:min,array:result,",191,0.9657365361849470,Beam
2109,,,25,2,,72,0.30585720936457300,0
2110,"Builder addEncodedQueryParameter(String encodedName,String encodedValue){
  if (encodedName == null)   throw new IllegalArgumentException(""encodedName == null"");
  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();
  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true));
  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);
  return this;
}
","Builder addEncodedqueryVariable(String encodedNames,String EncidedValue){
  if (encodedNames == null)   throw new IllegalArgumentException(""encodedName == null"");
  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();
  encodedQueryNamesAndValues.add(canonicalize(encodedNames,QUERY_COMPONENT_ENCODE_SET,true,true));
  encodedQueryNamesAndValues.add(EncidedValue != null ? canonicalize(EncidedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);
  return this;
}
",80,4,"addEncodedQueryParameter:addEncodedqueryVariable,encodedValue:EncidedValue,encodedName:encodedNames,",497,2.447902735074360,Beam
2111,"@Override public void onTmpFilesCopied(ResultCode result){
  dismissLoadingDialog();
  finish();
}
","@Override public void onTmpFilesCopied(ResultCode report){
  dismissLoadingDialog();
  finish();
}
",19,2,"result:report,",6,0.04074491659800210,Beam
2113,"public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}
","public void makeFirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeFirty(instance);
}
",26,6,"makeDirty:makeFirty,",7,0.031110437711079900,Beam
2114,,,141,8,,297,1.2754324913024900,0
2115,"public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}","public void readPrefs(SharedPreferences settings,ActionFactory fancy){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=fancy.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=fancy.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}",143,12,"factory:fancy,",36,0.15753719409306800,Beam
2116,,,47,3,,591,2.701557385921480,0
2118,,,390,16,,4467,33.44625378449760,0
2119,"private static void useMissile(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
","private static void useMissile(Player game){
  StackableItem projectilesItem=null;
  if (game.getRangeWeapon() != null) {
    projectilesItem=game.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=game.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
",65,3,"player:game,",28,0.1449567159016930,Beam
2120,"public static File createTempDir(File dir,boolean cleanup) throws IOException {
  if (!dir.mkdirs() && !dir.exists()) {
    throw new IOException(String.format(""Failed to create directory structure \'%s\'"",dir.toString()));
  }
  if (cleanup) {
    addCleanupHook(dir.toPath());
  }
  return dir;
}
","public static File createtempDirectory(File temp,boolean cleandown) throws IOException {
  if (!temp.mkdirs() && !temp.exists()) {
    throw new IOException(String.format(""Failed to create directory structure \'%s\'"",temp.toString()));
  }
  if (cleandown) {
    addCleanupHook(temp.toPath());
  }
  return temp;
}
",69,3,"createTempDir:createtempDirectory,cleanup:cleandown,dir:temp,",405,2.070348683993020,Beam
2121,"public OkapiBM25(double k1,double b){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(""coefficient k1 must be a non negative constant, not "" + k1);
  this.k1=k1;
  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException(""coefficient b must be in the range [0,1], not "" + b);
  this.b=b;
}","public OkwithBC025(double k1,double batch){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(""coefficient k1 must be a non negative constant, not "" + k1);
  this.k1=k1;
  if (Double.isNaN(batch) || batch < 0 || batch > 1)   throw new IllegalArgumentException(""coefficient b must be in the range [0,1], not "" + batch);
  this.batch=batch;
}",78,3,"OkapiBM25:OkwithBC025,b:batch,",119,0.7370872934659320,Beam
2122,"@Override protected Sensor createNewSensor(String systemName,String userName){
  if (log.isDebugEnabled()) {
    log.debug(""createNewSensor "" + systemName + "" ""+ userName);
  }
  Sensor s;
  String sName=SerialAddress.normalizeSystemName(systemName);
  if (sName.equals("""")) {
    log.error(""Invalid Sensor system name - "" + systemName);
    return null;
  }
  s=getBySystemName(sName);
  if (s != null) {
    log.error(""Sensor with this name already exists - "" + systemName);
    return null;
  }
  String altName=SerialAddress.convertSystemNameToAlternate(sName);
  s=getBySystemName(altName);
  if (s != null) {
    log.error(""Sensor with name \'"" + systemName + ""\' already exists as \'""+ altName+ ""\'"");
    return null;
  }
  int bit=SerialAddress.getBitFromSystemName(sName);
  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {
    log.error(""Sensor bit number, "" + Integer.toString(bit) + "", is outside the supported range, 1-""+ Integer.toString(SENSORSPERNODE - 1));
    return null;
  }
  if (userName == null) {
    s=new SerialSensor(sName);
  }
 else {
    s=new SerialSensor(sName,userName);
  }
  SerialNode node=SerialAddress.getNodeFromSystemName(sName);
  if (node == null) {
    log.warn(""Sensor "" + sName + "" refers to an undefined Serial Node."");
    return s;
  }
  node.registerSensor(s,bit);
  if (log.isDebugEnabled()) {
    log.debug(""register "" + s.getSystemName() + "" in node ""+ node);
  }
  return s;
}","@Override protected Sensor get(String softwarePart,String userName){
  if (log.isDebugEnabled()) {
    log.debug(""createNewSensor "" + softwarePart + "" ""+ userName);
  }
  Sensor s;
  String sName=SerialAddress.normalizeSystemName(softwarePart);
  if (sName.equals("""")) {
    log.error(""Invalid Sensor system name - "" + softwarePart);
    return null;
  }
  s=getBySystemName(sName);
  if (s != null) {
    log.error(""Sensor with this name already exists - "" + softwarePart);
    return null;
  }
  String altName=SerialAddress.convertSystemNameToAlternate(sName);
  s=getBySystemName(altName);
  if (s != null) {
    log.error(""Sensor with name \'"" + softwarePart + ""\' already exists as \'""+ altName+ ""\'"");
    return null;
  }
  int bit=SerialAddress.getBitFromSystemName(sName);
  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {
    log.error(""Sensor bit number, "" + Integer.toString(bit) + "", is outside the supported range, 1-""+ Integer.toString(SENSORSPERNODE - 1));
    return null;
  }
  if (userName == null) {
    s=new SerialSensor(sName);
  }
 else {
    s=new SerialSensor(sName,userName);
  }
  SerialNode node=SerialAddress.getNodeFromSystemName(sName);
  if (node == null) {
    log.warn(""Sensor "" + sName + "" refers to an undefined Serial Node."");
    return s;
  }
  node.registerSensor(s,bit);
  if (log.isDebugEnabled()) {
    log.debug(""register "" + s.getSystemName() + "" in node ""+ node);
  }
  return s;
}",297,10,"createNewSensor:get,systemName:softwarePart,",359,2.58544374704361,Beam
2123,"public static boolean isJellybeanOrLater(){
  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
}
","public static boolean isJellybeansORLater(){
  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
}
",21,1,"isJellybeanOrLater:isJellybeansORLater,",12,0.0723060647646586,Beam
2124,"public boolean isFinalState(int state){
  return (state < 0) ? false : fFinalStateFlags[state];
}","public boolean isCompleteStates(int grade){
  return (grade < 0) ? false : fFinalCodeFlags[grade];
}",23,3,"isFinalState:isCompleteStates,state:grade,fFinalStateFlags:fFinalCodeFlags,",224,1.2368917067845700,Beam
2125,"private Member nextMember(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}","private Member buildMembers(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}",37,3,"nextMember:buildMembers,",15,0.04884549379348760,Beam
2126,,,32,3,,166,0.697623590628306,0
2127,"private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}","private void growObjects(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}",100,8,"growEntries:growObjects,",6,0.025369143486022900,Beam
2128,,,114,8,,1660,9.566029222806300,0
2129,"public static void toString(Iterator<?> iter,String separator,StringBuilder sb){
  while (iter.hasNext()) {
    sb.append(iter.next());
    if (iter.hasNext()) {
      sb.append(separator);
    }
  }
}
","public static void toString(Iterator<?> iter,String generator,StringBuilder sb){
  while (iter.hasNext()) {
    sb.append(iter.next());
    if (iter.hasNext()) {
      sb.append(generator);
    }
  }
}
",57,4,"separator:generator,",66,0.348331618309021,Beam
2130,"public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
","public static boolean isempty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
",27,2,"isEmpty:isempty,",37,0.16515985329945900,Beam
2131,"private static Intent createMapActivityIntent(Context context,URLSpan[] urlSpans){
  for (int span_i=0; span_i < urlSpans.length; span_i++) {
    URLSpan urlSpan=urlSpans[span_i];
    String urlString=urlSpan.getURL();
    if (urlString.startsWith(GEO_PREFIX)) {
      Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));
      geoIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      return geoIntent;
    }
  }
  return null;
}","private static Intent createMapActivityExtency(Context context,URLSpan[] urlSpans){
  for (int span_i=0; span_i < urlSpans.length; span_i++) {
    URLSpan urlSpan=urlSpans[span_i];
    String urlString=urlSpan.getURL();
    if (urlString.startsWith(GEO_PREFIX)) {
      Intent geoIdend=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));
      geoIdend.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      return geoIdend;
    }
  }
  return null;
}",94,7,"createMapActivityIntent:createMapActivityExtency,geoIntent:geoIdend,",315,1.5372648636500000,Beam
2132,"private boolean needsUpdate(Long bundleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + bundleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + bundleVersion);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (bundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}","private boolean needupdate(Long BundleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + BundleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + BundleVersion);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (BundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}",145,4,"needsUpdate:needupdate,bundleVersion:BundleVersion,",87,0.5145573576291400,Beam
2133,,,60,6,,1392,20.54296845992410,0
2134,,,548,23,,1676,8.752947791417440,0
2135,"public void insert(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}","public void insertion(Component element,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(element);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}",98,7,"insert:insertion,component:element,",91,0.40325152476628600,Beam
2136,"public void addTailArg(String arg){
  _tailArgs.add(arg);
}
","public void addDetailingEl(String ar){
  _headParameters.add(ar);
}
",16,3,"arg:ar,addTailArg:addDetailingEl,_tailArgs:_headParameters,",233,1.0602449933687800,Beam
2137,"public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}","public static double cDF(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}",37,3,"cdf:cDF,",34,0.1280107100804650,Beam
2138,"protected void update(int length){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(length);
  }
 else {
    updateTickLabelForLinearScale(length);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
","protected void ize(int length){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(length);
  }
 else {
    updateTickLabelForLinearScale(length);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
",58,6,"update:ize,",60,0.2373013138771060,Beam
2139,"public void test_create_update() throws IOException {
  final String id=""test"";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,id);
  metadata.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",expected0,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(id,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}","public void test_createxcreate() throws IOException {
  final String kid=""test"";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,kid);
  metadata.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.test_createxcreate(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(kid);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",kid,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    repo.copyStream(kid,version0,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",expected0,read(repo.inputStream(kid,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(kid);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",kid,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(kid,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(kid,version0)));
{
      ITPS tps=repo.readMetadata(kid,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}",535,13,"test_create_update:test_createxcreate,id:kid,",2105,12.023972702026400,Beam
2140,"public void clearTransactions(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}","public void cleantransants(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}",74,8,"clearTransactions:cleantransants,",18,0.08314605156580610,Beam
2141,"public Week(Date time){
  this(time,TimeZone.getDefault(),Locale.getDefault());
}
","public Week(Date format){
  this(format,TimeZone.getDefault(),Locale.getDefault());
}
",25,2,"time:format,",10,0.06645078659057620,Beam
2142,"public void actionPerformed(ActionEvent e){
  navigateToPriorDemo();
}
","public void actionConformed(ActionEvent e){
  navigateToPriorDemo();
}
",13,2,"actionPerformed:actionConformed,",4,0.02089660962422690,Beam
2143,"protected int[] splitSentence(String sentence){
  String[] w=sentence.split(""\\\\s+"");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}","protected int[] splitSentence(String sentences){
  String[] w=sentences.split(""\\\\s+"");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}",70,5,"sentence:sentences,",5,0.03980424006779990,Beam
2144,,,101,6,,1089,10.086972935994500,0
2145,"private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){
  NativeRegExp re;
  String str=ScriptRuntime.toString(thisObj);
  data.str=str;
  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);
  if (args.length == 0) {
    Object compiled=NativeRegExp.compileRE(cx,"""","""",false);
    re=new NativeRegExp(topScope,compiled);
  }
 else   if (args[0] instanceof NativeRegExp) {
    re=(NativeRegExp)args[0];
  }
 else {
    String src=ScriptRuntime.toString(args[0]);
    String opt;
    if (data.optarg < args.length) {
      args[0]=src;
      opt=ScriptRuntime.toString(args[data.optarg]);
    }
 else {
      opt=null;
    }
    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);
    re=new NativeRegExp(topScope,compiled);
  }
  data.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;
  int[] indexp={0};
  Object result=null;
  if (data.mode == RA_SEARCH) {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length);
 else     result=Integer.valueOf(-1);
  }
 else   if (data.global) {
    re.lastIndex=0;
    for (int count=0; indexp[0] <= str.length(); count++) {
      result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
      if (result == null || !result.equals(Boolean.TRUE))       break;
      if (data.mode == RA_MATCH) {
        match_glob(data,cx,scope,count,reImpl);
      }
 else {
        if (data.mode != RA_REPLACE)         Kit.codeBug();
        SubString lastMatch=reImpl.lastMatch;
        int leftIndex=data.leftIndex;
        int leftlen=lastMatch.index - leftIndex;
        data.leftIndex=lastMatch.index + lastMatch.length;
        replace_glob(data,cx,scope,reImpl,leftIndex,leftlen);
      }
      if (reImpl.lastMatch.length == 0) {
        if (indexp[0] == str.length())         break;
        indexp[0]++;
      }
    }
  }
 else {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));
  }
  return result;
}","private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData input,boolean forceFlat){
  NativeRegExp re;
  String str=ScriptRuntime.toString(thisObj);
  input.str=str;
  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);
  if (args.length == 0) {
    Object compiled=NativeRegExp.compileRE(cx,"""","""",false);
    re=new NativeRegExp(topScope,compiled);
  }
 else   if (args[0] instanceof NativeRegExp) {
    re=(NativeRegExp)args[0];
  }
 else {
    String src=ScriptRuntime.toString(args[0]);
    String opt;
    if (input.optarg < args.length) {
      args[0]=src;
      opt=ScriptRuntime.toString(args[input.optarg]);
    }
 else {
      opt=null;
    }
    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);
    re=new NativeRegExp(topScope,compiled);
  }
  input.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;
  int[] indexp={0};
  Object result=null;
  if (input.mode == RA_SEARCH) {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length);
 else     result=Integer.valueOf(-1);
  }
 else   if (input.global) {
    re.lastIndex=0;
    for (int count=0; indexp[0] <= str.length(); count++) {
      result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
      if (result == null || !result.equals(Boolean.TRUE))       break;
      if (input.mode == RA_MATCH) {
        match_glob(input,cx,scope,count,reImpl);
      }
 else {
        if (input.mode != RA_REPLACE)         Kit.codeBug();
        SubString lastMatch=reImpl.lastMatch;
        int leftIndex=input.leftIndex;
        int leftlen=lastMatch.index - leftIndex;
        input.leftIndex=lastMatch.index + lastMatch.length;
        replace_glob(input,cx,scope,reImpl,leftIndex,leftlen);
      }
      if (reImpl.lastMatch.length == 0) {
        if (indexp[0] == str.length())         break;
        indexp[0]++;
      }
    }
  }
 else {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,((input.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));
  }
  return result;
}",545,19,"data:input,",5,0.15245322783788000,Beam
2146,"@Override public void send(Buffer buffer){
  _outProxy.write(_outWriter,buffer,false);
}
","@Override public void send(Buffer input){
  _outProxy.write(_outWriter,input,false);
}
",22,4,"buffer:input,",7,0.03208194971084600,Beam
2147,"public static String removeQuotes(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}","public static String stripRs(String b){
  if (b == null) {
    return null;
  }
  String Trrimped=b.trim();
  if (Trrimped.length() == 0) {
    return Trrimped;
  }
  int i=nextNonQuoteIndex(Trrimped,0,true);
  int j=nextNonQuoteIndex(Trrimped,Trrimped.length() - 1,false);
  return Trrimped.substring(i,j + 1);
}",87,5,"s:b,removeQuotes:stripRs,trimmed:Trrimped,",137,0.7109277089436850,Beam
2148,,,200,7,,870,11.313755698998800,0
2149,"public void deleteAuthenticationDomain(String realm,String cotName) throws AMConsoleException {
  String[] param={realm,cotName};
  logEvent(""ATTEMPT_DELETE_AUTH_DOMAINS"",param);
  try {
    CircleOfTrustManager manager=getCircleOfTrustManager();
    manager.deleteCircleOfTrust(realm,cotName);
    logEvent(""SUCCEED_DELETE_AUTH_DOMAIN"",param);
  }
 catch (  COTException e) {
    String strError=getErrorString(e);
    String[] paramsEx={realm,cotName,strError};
    logEvent(""FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN"",paramsEx);
    throw new AMConsoleException(strError);
  }
}
","public void deleteAuthenticatorChain(String calm,String cotName) throws AMConsoleException {
  String[] param={calm,cotName};
  logEvent(""ATTEMPT_DELETE_AUTH_DOMAINS"",param);
  try {
    CircleOfTrustManager manager=getCircleOfTrustManager();
    manager.deleteCircleOfTrust(calm,cotName);
    logEvent(""SUCCEED_DELETE_AUTH_DOMAIN"",param);
  }
 catch (  COTException e) {
    String strError=getErrorString(e);
    String[] paramsEx={calm,cotName,strError};
    logEvent(""FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN"",paramsEx);
    throw new AMConsoleException(strError);
  }
}
",100,8,"deleteAuthenticationDomain:deleteAuthenticatorChain,realm:calm,",120,0.3824610511461890,Beam
2150,"public void addInputMethodListener(InputMethodListener l){
  m_textPane.addInputMethodListener(l);
}
","public void addOutputMethodHandler(InputMethodListener l){
  m_textPane.addOutputMethodHandler(l);
}
",16,3,"addInputMethodListener:addOutputMethodHandler,",15,0.05036404132843020,Beam
2152,"private Integer scanYamlDirectiveNumber(Mark startMark){
  char ch=reader.peek();
  if (!Character.isDigit(ch)) {
    throw new ScannerException(""while scanning a directive"",startMark,""expected a digit, but found "" + ch + ""(""+ ((int)ch)+ "")"",reader.getMark());
  }
  int length=0;
  while (Character.isDigit(reader.peek(length))) {
    length++;
  }
  Integer value=Integer.parseInt(reader.prefixForward(length));
  return value;
}","private Integer scanYamlDirectionInteger(Mark endmark){
  char ch=reader.peek();
  if (!Character.isDigit(ch)) {
    throw new ScannerException(""while scanning a directive"",endmark,""expected a digit, but found "" + ch + ""(""+ ((int)ch)+ "")"",reader.getMark());
  }
  int length=0;
  while (Character.isDigit(reader.peek(length))) {
    length++;
  }
  Integer value=Integer.parseInt(reader.prefixForward(length));
  return value;
}",102,6,"scanYamlDirectiveNumber:scanYamlDirectionInteger,startMark:endmark,",707,3.4234257698059100,Beam
2153,"public String info(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}","public String pretty(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}",211,16,"info:pretty,",12,0.08722414970397950,Beam
2154,"public String toString(){
  return oid.toString();
}
","public String tostring(){
  return oids.tostring();
}
",14,2,"toString:tostring,oid:oids,",49,0.23146158456802400,Beam
2155,"private static void skipMemberValue(int tag,ByteBuffer buf){
switch (tag) {
case 'e':
    buf.getInt();
  break;
case '@':
skipAnnotation(buf,true);
break;
case '[':
skipArray(buf);
break;
default :
buf.getShort();
}
}
","private static void SkipMemberValue(int tag,ByteBuffer buf){
switch (tag) {
case 'e':
    buf.getInt();
  break;
case '@':
skipAnnotation(buf,true);
break;
case '[':
skipArray(buf);
break;
default :
buf.getShort();
}
}
",60,3,"skipMemberValue:SkipMemberValue,",49,0.19857718547185300,Beam
2156,,,81,7,,662,3.7690993269284600,0
2157,"public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
","public Value example(){
  int index=sampler.nextInt(actRules.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actRules.toArray(new Value[actRules.size()]);
  }
  return actionValuesAsArray[index];
}
",52,5,"sample:example,actionValues:actRules,",73,0.4209983229637150,Beam
2158,"private void initializeLocalAndTargetInfo() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}","private void start() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}",340,11,"initializeLocalAndTargetInfo:start,",20,0.11779131094614700,Beam
2159,"static double svd_pythag(double a,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(a),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}","static double svd_pythag(double as,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(as),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(as),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}",132,9,"a:as,",3,0.026226500670115200,Beam
2160,"public boolean equals(final ArtifactCoordinates obj){
  return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier);
}
","public boolean sequals(final ArtifactCoordinates o){
  return this == o || o != null && groupId.sequals(o.groupId) && artifactId.sequals(o.artifactId) && version.sequals(o.version) && classifier.sequals(o.classifier);
}
",55,6,"equals:sequals,obj:o,",139,0.7310608903567000,Beam
2161,,,22,2,,245,1.1405258536338800,0
2162,"private void applyImageMatrix(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}","private void ApplyimageMotion(float west,float height,boolean center,boolean animate){
  if (mBitmap != null && west > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((west - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(west / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=west > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(west / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + west) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}",491,17,"applyImageMatrix:ApplyimageMotion,width:west,",186,1.236021093527480,Beam
2163,"private String idString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}","private String intstring(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}",55,3,"idString:intstring,",74,0.5155250072479250,Beam
2164,"private static List<Size> pickUpToThree(List<Size> sizes){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizes.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizes) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}","private static List<Size> pickUpBelowThree(List<Size> sizing){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizing.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizing) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}",186,7,"pickUpToThree:pickUpBelowThree,sizes:sizing,",145,2.465908873081210,Beam
2165,,,139,10,,2414,10.39029221534730,0
2166,"protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
","protected String buildQualiferRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
",45,3,"buildQualifierRegex:buildQualiferRegex,",3,0.019676836331685400,Beam
2167,"public StreamThroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}","public StreamThroughment(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}",36,8,"StreamThroughput:StreamThroughment,",6,0.0210967222849528,Beam
2168,"protected void expandFor(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}","protected void explandOf(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}",104,8,"expandFor:explandOf,",53,0.3018687566121420,Beam
2169,"private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){
  final int k=means.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}","private void recomputeSEperate(double[][] peans,double[][] cfIST,LongStatistic Distcount){
  final int k=peans.length;
  for (int si=1; si < k; si++) {
    DoubleVector mi=DoubleVector.wrap(peans[si]);
    for (int j=0; j < si; j++) {
      cfIST[si][j]=cfIST[j][si]=distanceFunction.distance(mi,DoubleVector.wrap(peans[j]));
    }
  }
  if (Distcount != null) {
    Distcount.increment((k * (k - 1)) >> 1);
  }
}",135,9,"means:peans,recomputeSeperation:recomputeSEperate,cdist:cfIST,diststat:Distcount,i:si,",2234,77.86410125494000,Beam
2170,,,80,7,,1289,5.36346081495285,0
2171,,,79,6,,1380,10.139896615346300,0
2172,"@Deprecated private List<CharSequence> buildLimitedNetworksList(){
  final Context context=getActivity();
  final ArrayList<CharSequence> limited=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscriberId=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {
      limited.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    limited.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    limited.add(getText(R.string.data_usage_tab_ethernet));
  }
  return limited;
}","@Deprecated private List<CharSequence> buildLimitedNetWorksList(){
  final Context context=getActivity();
  final ArrayList<CharSequence> modified=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscriberPath=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberPath))) {
      modified.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberPath))) {
      modified.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberPath))) {
      modified.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    modified.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    modified.add(getText(R.string.data_usage_tab_ethernet));
  }
  return modified;
}",192,5,"buildLimitedNetworksList:buildLimitedNetWorksList,limited:modified,subscriberId:subscriberPath,",706,11.288077696164400,Beam
2173,,,88,5,,607,2.7944588740666700,0
2174,"public void close(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
","public void back(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.back(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
",81,5,"close:back,",24,0.11818473339080800,Beam
2175,"@Override public void valueChanged(TreeSelectionEvent e){
  if (preventEvent) {
    return;
  }
  if (mainFrame != null) {
    List<Operator> selectedOperators=getSelectedOperators();
    if (selectedOperators != null && !selectedOperators.isEmpty()) {
      mainFrame.selectOperators(selectedOperators);
    }
  }
}
","@Override public void selectionchanged(TreeSelectionEvent e){
  if (preventEvent) {
    return;
  }
  if (mainFrame != null) {
    List<Operator> matchedOperters=getSelectedOperators();
    if (matchedOperters != null && !matchedOperters.isEmpty()) {
      mainFrame.selectOperators(matchedOperters);
    }
  }
}
",59,5,"valueChanged:selectionchanged,selectedOperators:matchedOperters,",216,0.9915890296300250,Beam
2176,"public boolean free(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}","public boolean release(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}",75,8,"free:release,",34,0.15833566586176600,Beam
2177,"private byte[] decode(DerInputStream in) throws IOException {
  DerValue val=in.getDerValue();
  byte[] derEncoding=val.toByteArray();
  derEncoding[0]=DerValue.tag_SetOf;
  DerInputStream derIn=new DerInputStream(derEncoding);
  DerValue[] derVals=derIn.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier oid;
  boolean reuseEncoding=true;
  for (int i=0; i < derVals.length; i++) {
    try {
      attrib=new PKCS9Attribute(derVals[i]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEncoding=false;
        continue;
      }
 else {
        throw e;
      }
    }
    oid=attrib.getOID();
    if (attributes.get(oid) != null)     throw new IOException(""Duplicate PKCS9 attribute: "" + oid);
    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException(""Attribute "" + oid + "" not permitted in this attribute set"");
    attributes.put(oid,attrib);
  }
  return reuseEncoding ? derEncoding : generateDerEncoding();
}","private byte[] Decoder(DerInputStream in) throws IOException {
  DerValue val=in.getDerValue();
  byte[] derEncoding=val.toByteArray();
  derEncoding[0]=DerValue.tag_SetOf;
  DerInputStream derIn=new DerInputStream(derEncoding);
  DerValue[] derVals=derIn.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier oid;
  boolean reuseEncoding=true;
  for (int i=0; i < derVals.length; i++) {
    try {
      attrib=new PKCS9Attribute(derVals[i]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEncoding=false;
        continue;
      }
 else {
        throw e;
      }
    }
    oid=attrib.getOID();
    if (attributes.get(oid) != null)     throw new IOException(""Duplicate PKCS9 attribute: "" + oid);
    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException(""Attribute "" + oid + "" not permitted in this attribute set"");
    attributes.put(oid,attrib);
  }
  return reuseEncoding ? derEncoding : generateDerEncoding();
}",204,14,"decode:Decoder,",40,0.25519586404164600,Beam
2178,"public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
","public static boolean isConnected(NetType NETTy,NetworkInfo resourceInfo){
  if (NETTy == NetType.Any && resourceInfo != null && isConnected(resourceInfo))   return true;
 else   if (NETTy == NetType.Wifi && resourceInfo != null && resourceInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(resourceInfo))   return true;
 else   if (NETTy == NetType.Mobile && resourceInfo != null && resourceInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(resourceInfo))   return true;
  return false;
}
",98,3,"netType:NETTy,networkInfo:resourceInfo,",211,1.2312652945518500,Beam
2179,"public boolean deleteLoadName(String load){
  if (!_loadList.contains(load)) {
    return false;
  }
  _loadList.remove(load);
  log.debug(""train ("" + getName() + "") delete car load ""+ load);
  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());
  return true;
}","public boolean deleteloadname(String play){
  if (!_loadList.contains(play)) {
    return false;
  }
  _loadList.remove(play);
  log.debug(""train ("" + getName() + "") delete car load ""+ play);
  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());
  return true;
}",68,4,"deleteLoadName:deleteloadname,load:play,",59,0.41798814535141000,Beam
2180,"public float toMeters(double pixels){
  return (float)(pixels * METERS_PER_PIXELS);
}
","public float ToMometers(double pipes){
  return (float)(pipes * METERS_PER_PIXELS);
}
",19,3,"toMeters:ToMometers,pixels:pipes,",46,0.1867259621620180,Beam
2181,,,44,4,,506,1.8910953362782800,0
2182,,,31,4,,1311,7.105747516949970,0
2183,"public void startLaunchNotifier(){
  if (m_launchNotification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}
","public void startlaunchnotizer(){
  if (m_launchNotification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}
",32,3,"startLaunchNotifier:startlaunchnotizer,",23,0.07013318141301470,Beam
2184,,,136,5,,858,4.1085417628288300,0
2185,"protected final void resolveIssue(HealthIssue healthIssue){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthIssue.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(healthIssue);
  }
  if (wasIssueActive) {
    eventBus.post(healthIssue.resolved);
  }
}","protected final void reolvingissue(HealthIssue httpissue){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",httpissue.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(httpissue);
  }
  if (wasIssueActive) {
    eventBus.post(httpissue.resolved);
  }
}",75,7,"healthIssue:httpissue,resolveIssue:reolvingissue,",131,0.7995148062705990,Beam
2186,"public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}","public final static int parseInt(char[] digitChars,int option,int len){
  int num=digitChars[option] - '0';
  len+=option;
  if (++option < len) {
    num=(num * 10) + (digitChars[option] - '0');
    if (++option < len) {
      num=(num * 10) + (digitChars[option] - '0');
      if (++option < len) {
        num=(num * 10) + (digitChars[option] - '0');
        if (++option < len) {
          num=(num * 10) + (digitChars[option] - '0');
          if (++option < len) {
            num=(num * 10) + (digitChars[option] - '0');
            if (++option < len) {
              num=(num * 10) + (digitChars[option] - '0');
              if (++option < len) {
                num=(num * 10) + (digitChars[option] - '0');
                if (++option < len) {
                  num=(num * 10) + (digitChars[option] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}",244,5,"offset:option,",32,0.23019117911656700,Beam
2187,"private int measureHeight(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}","private int measuresWidth(int measuredSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measuredSpec);
  int specSize=MeasureSpec.getSize(measuredSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}",110,7,"measureHeight:measuresWidth,measureSpec:measuredSpec,",66,0.31246569951375300,Beam
2188,"private void persistNewTemp(File fileCfg){
  if (hsDeleteOnExit.size() == 0) {
    logDebug(LogArea.CONFIG,""No temp file names to persist on exit."");
    fileCfg.delete();
    return;
  }
  logDebug(LogArea.CONFIG,""Persisting %d temp file names into %s"",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(fileCfg));
    for (    File file : hsDeleteOnExit) {
      if (!file.delete()) {
        String f=file.getCanonicalPath();
        writer.write(f);
        writer.newLine();
        logWarn(LogArea.JAR,""JVM failed to release %s"",f);
      }
    }
  }
 catch (  IOException e) {
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void persistNewPath(File fileCfg){
  if (hsDeleteOnExit.size() == 0) {
    logDebug(LogArea.CONFIG,""No temp file names to persist on exit."");
    fileCfg.delete();
    return;
  }
  logDebug(LogArea.CONFIG,""Persisting %d temp file names into %s"",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(fileCfg));
    for (    File file : hsDeleteOnExit) {
      if (!file.delete()) {
        String f=file.getCanonicalPath();
        writer.write(f);
        writer.newLine();
        logWarn(LogArea.JAR,""JVM failed to release %s"",f);
      }
    }
  }
 catch (  IOException e) {
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",166,6,"persistNewTemp:persistNewPath,",37,0.18989010651906300,Beam
2189,"public static void assertEquals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void assertequalls(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}",25,3,"assertEquals:assertequalls,",47,0.25006348292032900,Beam
2190,,,54,3,,673,3.800955390930180,0
2191,"public void addRow(Assignment head,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(head.getVariables());
  table.put(head,prob);
}","public void setrow(Assignment block,double prbs){
  if (prbs < 0.0f || prbs > 1.02f) {
    return;
  }
  headVars.addAll(block.getVariables());
  table.put(block,prbs);
}",46,5,"addRow:setrow,prob:prbs,head:block,",433,2.212112625439960,Beam
2192,"public void delItem(int index){
synchronized (getMenuTreeLock()) {
    if (selectedIndex == index) {
      selectItem(null,false);
    }
 else     if (selectedIndex > index) {
      selectedIndex--;
    }
    if (index < items.size()) {
      items.remove(index);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine(""WARNING: Attempt to remove non-existing menu item, index : "" + index + "", item count : ""+ items.size());
      }
    }
  }
  updateSize();
}
","public void releaseitem(int index){
synchronized (getMenuTreeLock()) {
    if (selectedIndex == index) {
      selectItem(null,false);
    }
 else     if (selectedIndex > index) {
      selectedIndex--;
    }
    if (index < sites.size()) {
      sites.remove(index);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine(""WARNING: Attempt to remove non-existing menu item, index : "" + index + "", item count : ""+ sites.size());
      }
    }
  }
  updateSize();
}
",102,5,"delItem:releaseitem,items:sites,",311,1.3995699961980200,Beam
2193,"public void testCase19(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void Testcase19(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",181,11,"testCase19:Testcase19,",19,0.10962467193603500,Beam
2194,"public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}","public void simple(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}",41,5,"clear:simple,",24,0.08500805298487350,Beam
2195,"@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
","@Override public void evociate(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
",36,4,"evict:evociate,",35,0.13153833945592200,Beam
2196,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}","public int start() throws IOException {
  int val;
  if ((val=is.start()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.start() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.start() & 0x3f) << 6) | (is.start() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}",127,3,"read:start,",12,0.0969131588935852,Beam
2197,,,114,9,,1081,4.647581601142880,0
2198,,,109,6,,222,1.1665283521016400,0
2199,"public void test_filter_001() throws IOException {
  final File basefile=File.createTempFile(getName(),""-test"");
  try {
    final String basename=basefile.toString();
    final NameAndExtensionFilter logFilter=new NameAndExtensionFilter(basename,"".log"");
    assertSameFiles(new File[]{},logFilter.getFiles());
  }
  finally {
    basefile.delete();
  }
}","public void test_test_001() throws IOException {
  final File tempfile=File.createTempFile(getName(),""-test"");
  try {
    final String basename=tempfile.toString();
    final NameAndExtensionFilter logFilter=new NameAndExtensionFilter(basename,"".log"");
    assertSameFiles(new File[]{},logFilter.getFiles());
  }
  finally {
    tempfile.delete();
  }
}",74,4,"test_filter_001:test_test_001,basefile:tempfile,",86,0.642589251200358,Beam
2200,"public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}
","public MLResults apply(Script object){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return apply(object,scriptExecutor);
}
",58,8,"execute:apply,script:object,",83,0.3266064763069150,Beam
2201,"public void addTerm(SplitCondition condition){
  terms.add(condition);
}
","public void createterm(SplitCondition cond){
  terms.add(cond);
}
",16,3,"addTerm:createterm,condition:cond,",48,0.21806501547495500,Beam
2203,"private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}","private byte[] toZIP(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}",44,4,"toZLIB:toZIP,",54,0.25030392011006700,Beam
2204,"private boolean fitsAsSingleLine(int col){
  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}","private boolean wrapasOneChar(int th){
  return (th + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}",44,3,"fitsAsSingleLine:wrapasOneChar,col:th,",70,0.453877862294515,Beam
2205,,,67,6,,854,3.9099684834480300,0
2206,,,263,11,,1226,6.287430981794990,0
2207,,,135,8,,1659,24.37329945166910,0
2208,"protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}","protected Object getString(String reference){
  int openParen=reference.indexOf(""("");
  String type=reference.substring(0,openParen);
  String value=reference.substring(openParen + 1,reference.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tock=new StringTokenizer(value,"","");
    int size=tock.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tock.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}",213,10,"string:reference,parseValue:getString,tok:tock,",150,0.8811381856600440,Beam
2209,,,41,4,,1197,7.192879895369210,0
2210,"public static void closeQuiet(@Nullable Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
","public static void closeSilort(@Nullable Closeable openable){
  if (openable != null) {
    try {
      openable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
",36,2,"closeQuiet:closeSilort,closeable:openable,",127,0.5469258546829220,Beam
2211,"public static String constructNTPtime(long date){
  long ntpTime=2208988800L;
  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;
  return String.valueOf(startTime);
}","public static String constructNTPtime(long day){
  long ntpTime=2208988800L;
  long startTime=(day / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;
  return String.valueOf(startTime);
}",34,5,"date:day,",3,0.029817676544189500,Beam
2212,"public static boolean validSkinSpecFile(String fileName){
  File file=new File(Configuration.skinsDir(),fileName);
  if (!file.exists() || !file.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder builder=dbf.newDocumentBuilder();
    Document doc=builder.parse(file);
    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);
    if (listOfComponents.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isskinspecFile(String fileName){
  File file=new File(Configuration.skinsDir(),fileName);
  if (!file.exists() || !file.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder builder=dbf.newDocumentBuilder();
    Document doc=builder.parse(file);
    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);
    if (listOfComponents.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}",118,7,"validSkinSpecFile:isskinspecFile,",37,0.20465205113093100,Beam
2213,,,28,4,,379,2.0736897309621200,0
2214,"private void Legends(List<String> legends_list,List<Integer> color_code_list){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int left=(int)(graphwidth * 0.1);
  for (int i=0; i < legends_list.size(); i++) {
    String label=legends_list.get(i);
    float text_width=textPaint.measureText(label,0,label.length());
    int color=color_code_list.get(i);
    if (!((graphwidth - legendLeft) > (text_width + 60))) {
      legendTop-=60;
      legendLeft=left;
    }
    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);
    legendLeft+=((int)text_width + 60);
  }
}","private void Legends(List<String> legends_stack,List<Integer> color_code_list){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int left=(int)(graphwidth * 0.1);
  for (int i=0; i < legends_stack.size(); i++) {
    String label=legends_stack.get(i);
    float text_width=textPaint.measureText(label,0,label.length());
    int color=color_code_list.get(i);
    if (!((graphwidth - legendLeft) > (text_width + 60))) {
      legendTop-=60;
      legendLeft=left;
    }
    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);
    legendLeft+=((int)text_width + 60);
  }
}",159,15,"legends_list:legends_stack,",3,0.015187756220499700,Beam
2215,"private static String readName(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return readName(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=readName(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}","private static String formatDescription(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return formatDescription(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=formatDescription(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}",163,8,"readName:formatDescription,",55,0.26256206035614000,Beam
2216,,,38,2,,237,1.0365617950757300,0
2217,,,247,15,,2912,20.93919191757840,0
2218,,,102,6,,1260,5.112137480576830,0
2219,,,373,29,,1696,12.999873105684900,0
2220,"protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + resource.getName() + ""..."",resource,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
","protected void work(final IResource target,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + target.getName() + ""..."",target,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
",159,8,"resource:target,",4,0.05126301050186160,Beam
2221,"public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}","public static void Tram(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}",109,6,"trim:Tram,",25,0.12038344542185500,Beam
2222,,,51,5,,1002,3.5619789361953700,0
2223,"public void addCommands(PDFPage page,Matrix extra){
synchronized (commands) {
    addPush();
    if (extra != null) {
      addXform(extra);
    }
    commands.addAll(page.getCommands());
    addPop();
  }
  updateImages();
}
","public void addComs(PDFPage media,Matrix important){
synchronized (commands) {
    addPush();
    if (important != null) {
      addXform(important);
    }
    commands.addAll(media.getCommands());
    addPop();
  }
  updateImages();
}
",54,4,"extra:important,addCommands:addComs,page:media,",630,2.851521881421410,Beam
2224,"@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
","@Override public void config(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
",41,2,"update:config,",22,0.098121178150177,Beam
2226,,,29,4,,914,5.452329655488330,0
2227,"public static Charset forName(String charsetName){
  return forName(charsetName,null);
}
","public static Charset withString(String charspaceString){
  return withString(charspaceString,null);
}
",18,2,"charsetName:charspaceString,forName:withString,",84,0.3511958400408430,Beam
2228,"public static String findPreferredIDP(String realm,HttpServletRequest request){
  if (request == null) {
    return null;
  }
  String succinctID=request.getParameter(IFSConstants.PROVIDER_ID_KEY);
  if ((succinctID == null) || succinctID.length() == 0) {
    debug.message(""FSUtils.findPreferredIDP::Pref IDP not found."");
    return null;
  }
  succinctID=succinctID.trim();
  String preferredSuccinctId=null;
  StringTokenizer st=new StringTokenizer(succinctID,"" "");
  while (st.hasMoreTokens()) {
    preferredSuccinctId=st.nextToken();
    if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) {
      preferredSuccinctId=preferredSuccinctId + ""+"" + st.nextToken();
    }
  }
  preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId));
  return getProviderIDFromSuccinctID(realm,preferredSuccinctId);
}","public static String findPreferIdP(String ironm,HttpServletRequest resource){
  if (resource == null) {
    return null;
  }
  String succinctID=resource.getParameter(IFSConstants.PROVIDER_ID_KEY);
  if ((succinctID == null) || succinctID.length() == 0) {
    debug.message(""FSUtils.findPreferredIDP::Pref IDP not found."");
    return null;
  }
  succinctID=succinctID.trim();
  String preferredSuccinctId=null;
  StringTokenizer st=new StringTokenizer(succinctID,"" "");
  while (st.hasMoreTokens()) {
    preferredSuccinctId=st.nextToken();
    if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) {
      preferredSuccinctId=preferredSuccinctId + ""+"" + st.nextToken();
    }
  }
  preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId));
  return getProviderIDFromSuccinctID(ironm,preferredSuccinctId);
}",160,7,"realm:ironm,findPreferredIDP:findPreferIdP,request:resource,",435,2.7537467241287200,Beam
2229,"private long acquireWrite(boolean interruptible,long deadline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}","private long ocquireWrite(boolean interruptible,long deadline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}",672,29,"acquireWrite:ocquireWrite,",28,0.175468377272288,Beam
2230,"public void reset(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}","public void empty(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.empty();
  mNextPlayer.empty();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}",46,7,"reset:empty,",21,0.11685541073481200,Beam
2231,"public void andWith(List<QueryPredicate> predicates){
  children.addAll(predicates);
}
","public void andWith(List<QueryPredicate> predications){
  children.addAll(predications);
}
",19,3,"predicates:predications,",3,0.01430600881576540,Beam
2232,,,23,3,,205,1.4143767476081800,0
2233,"protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}","protected void un(int itemType){
  if (itemType >= 0 && itemType < getItemCount()) {
    list.un(itemType);
  }
}",30,3,"remove:un,itemPosition:itemType,",66,0.2957395911216740,Beam
2234,"public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
","public static String buildResponseString(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
",75,6,"buildResponseUrl:buildResponseString,",39,0.2126587947209680,Beam
2235,"public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}","public List<LocalTime> start(int n){
  List<LocalTime> start=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    start.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return start;
}",89,5,"top:start,",15,0.1022932489713030,Beam
2237,"public void testCase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testcase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",180,11,"testCase17:testcase17,",8,0.04317359129587810,Beam
2238,"public void start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
","public void check(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsTextCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsTextCursor,Phone.CONTENT_URI);
    mContactsTextCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
",91,7,"start:check,mContactsContractCursor:mContactsTextCursor,",138,0.6276308576265970,Beam
2240,"private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(writeFont);
  if (writeFont) {
    oos.writeObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
","private void WriteClass(ObjectOutputStream rss) throws IOException {
  rss.defaultWriteObject();
  boolean setText=(f != OMText.DEFAULT_FONT);
  rss.writeBoolean(setText);
  if (setText) {
    rss.WriteClass(f.getName());
    rss.writeInt(f.getSize());
    rss.writeInt(f.getStyle());
  }
  writeStroke(rss,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(rss,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
",94,6,"writeObject:WriteClass,oos:rss,writeFont:setText,",367,2.5046968857447300,Beam
2241,,,11,2,,133,0.6076740543047590,0
2242,"private void addFeature(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}
","private void addedFeature(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addedFeature(feat,index);
}
",80,5,"addFeature:addedFeature,",68,0.3270096103350320,Beam
2243,"protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}
","protected final void readO(ByteBuffer box,int format){
  box.put((byte)format);
}
",23,3,"buf:box,value:format,writeC:readO,",355,1.6522350311279300,Beam
2244,"void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}","void loadFiles(File resource) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(resource);
}",37,3,"readFile:loadFiles,file:resource,",62,0.2489956259727480,Beam
2245,"private void refreshChallengeCounts(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
","private void refreshChallengeCountes(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
",16,4,"refreshChallengeCounts:refreshChallengeCountes,",3,0.013780438899993900,Beam
2246,,,128,8,,285,1.1995999574661300,0
2247,"static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}","static boolean IsPackageArray(final int modifications){
  return (modifications & ACCESS_TEST) == 0;
}",19,3,"isPackageAccess:IsPackageArray,modifiers:modifications,",103,0.5253233353296920,Beam
2248,"public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());
}","public static String getQueueRedISkey(String queueName,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());
}",41,5,"constructQueueRedisKey:getQueueRedISkey,",34,0.159941565990448,Beam
2249,"private void removeGapsWithEdgeConcentration(int nodesLevel[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphMatrix[n][i] > 0) {
        if (nodesLevel[i] > nodesLevel[n] + 1) {
          int tempLevel=nodesLevel[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < nodesLevel[i] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][i]=graphMatrix[n][i];
            graphMatrix[i][tempnode]=-graphMatrix[n][i];
            graphMatrix[n][i]=0;
            graphMatrix[i][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];
          int level=nodesLevel[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
          temp3[m_nodes.size() - 1]=level;
          nodesLevel=temp3;
          level++;
          int m;
          for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
            temp3[m_nodes.size() - 1]=level;
            nodesLevel=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[i][n]=-1 * graphMatrix[n][i];
        }
      }
    }
  }
}","private void compute(int numbersList[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphMatrix[n][i] > 0) {
        if (numbersList[i] > numbersList[n] + 1) {
          int tempLevel=numbersList[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < numbersList[i] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][i]=graphMatrix[n][i];
            graphMatrix[i][tempnode]=-graphMatrix[n][i];
            graphMatrix[n][i]=0;
            graphMatrix[i][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (numbersList[i] - numbersList[tempnode] - 1)][graphMatrix.length + (numbersList[i] - numbersList[tempnode] - 1)];
          int level=numbersList[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(numbersList,0,temp3,0,numbersList.length);
          temp3[m_nodes.size() - 1]=level;
          numbersList=temp3;
          level++;
          int m;
          for (m=len; m < len + numbersList[i] - numbersList[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(numbersList,0,temp3,0,numbersList.length);
            temp3[m_nodes.size() - 1]=level;
            numbersList=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[i][n]=-1 * graphMatrix[n][i];
        }
      }
    }
  }
}",875,23,"removeGapsWithEdgeConcentration:compute,nodesLevel:numbersList,",84,0.7208481947580970,Beam
2250,"void addReporter(String textReporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
","void addReporter(String textSupporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textSupporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
",77,5,"textReporter:textSupporter,",71,0.3863683780034380,Beam
2251,,,36,3,,462,1.9892097075780200,0
2252,"public static void writeToFile(String content,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}
","public static void writeToFile(String content,File destfile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(destfile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}
",43,4,"dstFile:destfile,",48,0.15113648573557500,Beam
2253,,,29,4,,458,4.932038966814680,0
2254,,,16,3,,489,1.7313947995503700,0
2255,,,120,8,,1126,4.578222497304280,0
2256,"public void testQuorumSucceed(){
  quorum.succeed();
  quorum.fail();
  assertEquals(callbackResult.get(),0);
  quorum.fail();
  quorum.succeed();
  assertEquals(callbackResult.get(),1);
}","public void assertQuorumSumced(){
  quongo.succeed();
  quongo.fail();
  assertEquals(callbackResult.get(),0);
  quongo.fail();
  quongo.succeed();
  assertEquals(callbackResult.get(),1);
}",53,3,"testQuorumSucceed:assertQuorumSumced,quorum:quongo,",109,0.9505488395690920,Beam
2257,"private void schedulePlaylistSave(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}","private void schedulePlaylistImport(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}",43,4,"schedulePlaylistSave:schedulePlaylistImport,",4,0.019812500476837200,Beam
2258,"public boolean isValid(World world){
  return true;
}
","public boolean IsAvailable(World world){
  return true;
}
",12,2,"isValid:IsAvailable,",37,0.1679942051569620,Beam
2259,"public void onMotion(MotionEvent event,Interaction iact){
}
","public void ONMotion(MotionEvent event,Interaction iact){
}
",12,3,"onMotion:ONMotion,",7,0.024992728233337400,Beam
2260,,,51,2,,248,2.9162605961163800,0
2261,"protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){
  List<String> keys=new ArrayList<String>();
  for (int i=0; i < sortKeys.size(); i++) {
    SortKey sortKey=sortKeys.get(i);
    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? "" ASC"" : "" DESC""));
  }
  return keys;
}","protected List<String> prepareSortKeyStatations(List<SortKey> sortPoints){
  List<String> keys=new ArrayList<String>();
  for (int i=0; i < sortPoints.size(); i++) {
    SortKey sortKey=sortPoints.get(i);
    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? "" ASC"" : "" DESC""));
  }
  return keys;
}",90,6,"sortKeys:sortPoints,prepareSortKeyStatements:prepareSortKeyStatations,",102,0.5375998179117840,Beam
2262,"private static boolean compareParam(String jdiffParam,Type reflectionParamType){
  if (jdiffParam == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jdiffParam.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jdiffParam.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jdiffParam.equals(reflectionParam);
  }
  return false;
}","private static boolean compairSingle(String jviewPar,Type reflectionParamType){
  if (jviewPar == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jviewPar.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jviewPar.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jviewPar=jviewPar.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jviewPar.equals(reflectionParam);
  }
  return false;
}",113,6,"jdiffParam:jviewPar,compareParam:compairSingle,",110,0.7278319358825680,Beam
2265,"public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}","public static AttackStatus calculatePhysicalState(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalState(attacker,attacked,isMainHand,0,100,false,false);
}",34,4,"calculatePhysicalStatus:calculatePhysicalState,",67,0.3683458725611370,Beam
2266,"@Override public void addShutdownWindow(final Window window){
  if (m_isShutDown) {
    closeWindow(window);
    return;
  }
synchronized (this) {
    if (m_isShutDown) {
      closeWindow(window);
      return;
    }
    m_windowsToCloseOnShutdown.add(window);
  }
}
","@Override public void addshutDownwindow(final Window win){
  if (m_isshutdown) {
    closeWindow(win);
    return;
  }
synchronized (this) {
    if (m_isshutdown) {
      closeWindow(win);
      return;
    }
    m_windowsToCloseOnShutdown.add(win);
  }
}
",51,4,"addShutdownWindow:addshutDownwindow,window:win,m_isShutDown:m_isshutdown,",250,1.2013266921043400,Beam
2267,"@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}","@Override public String append(String resource,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(resource),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}",285,13,"path:resource,",7,0.055683016777038600,Beam
2268,"public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}
","public boolean drop(ImageInfo position){
  final int location=getLocation(position);
  final boolean removed=data.drop(position);
  notifyItemRemoved(location);
  return removed;
}
",37,5,"remove:drop,object:position,",88,0.45653186639150000,Beam
2269,"private void processUnprocessed(){
  boolean clean_processings=Boolean.getBoolean(""Archive.processings.clean"");
  logger.info(""Archives processing clean instead of recovery "" + ""(Archive.processings.clean) requested by user ("" + clean_processings + "")"");
  productService.processUnprocessed(!clean_processings);
}
","private void processUnprocessated(){
  boolean clean_processings=Boolean.getBoolean(""Archive.processings.clean"");
  logger.info(""Archives processing clean instead of recovery "" + ""(Archive.processings.clean) requested by user ("" + clean_processings + "")"");
  productService.processUnprocessated(!clean_processings);
}
",38,4,"processUnprocessed:processUnprocessated,",4,0.034608499209086100,Beam
2270,"private static MetricValue number_to_metric_value_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
","private static MetricValue number_to_metric_value_(Number selements){
  if (selements == null)   return MetricValue.EMPTY;
  final String nu=selements.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(nu));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(nu));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(nu);
}
",85,3,"elem:selements,num:nu,",233,1.488597838083900,Beam
2271,"public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}","public void join(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}",137,7,"stop:join,",9,0.047371153036753300,Beam
2272,"public void deleteVVset(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}","public void deleteVvset(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}",149,7,"deleteVVset:deleteVvset,",6,0.051247672239939400,Beam
2273,"public static double sampleSkewStandardError(int size){
  int n=size;
  return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3)));
}","public static double sampleSkewStandardError(int empty){
  int n=empty;
  return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3)));
}",51,3,"size:empty,",16,0.08270626862843830,Beam
2274,"private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(persist,file);
  persistUpdatedBundle(persist,file,updateSet,setName);
}
","private void addFromSetting(ObjectXmlPersist persist,IFile url,String packageNames) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> diffSet=loadEdgeMatchers(persist,url);
  persistUpdatedBundle(persist,url,diffSet,packageNames);
}
",43,5,"setName:packageNames,file:url,addToSet:addFromSetting,updateSet:diffSet,",923,4.363686215877530,Beam
2275,"public static BufferedImage toBufferedImage(Image img,int type){
  if (img instanceof BufferedImage) {
    return (BufferedImage)img;
  }
  BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),type);
  Graphics2D bGr=bimage.createGraphics();
  bGr.drawImage(img,0,0,null);
  bGr.dispose();
  return bimage;
}","public static BufferedImage toBufferedimage(Image im,int type){
  if (im instanceof BufferedImage) {
    return (BufferedImage)im;
  }
  BufferedImage bimage=new BufferedImage(im.getWidth(null),im.getHeight(null),type);
  Graphics2D bGr=bimage.createGraphics();
  bGr.drawImage(im,0,0,null);
  bGr.dispose();
  return bimage;
}",81,5,"img:im,toBufferedImage:toBufferedimage,",243,0.9193620721499130,Beam
2276,,,68,4,,679,3.3414566278457600,0
2277,"@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
","@Override public PollResult doQuery(PollController con){
  if (!_lifecycle.isActive()) {
    fail.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar sl=con.getSocket();
  if (sl == null) {
    fail.warning(this + "" socket empty for "" + con);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=sl.selectableChannel();
  if (selChannel == null) {
    fail.warning(this + "" no channel for "" + sl);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(con);
  return PollResult.START;
}
",126,9,"startPoll:doQuery,conn:con,log:fail,socket:sl,",1333,7.8557464480400100,Beam
2278,"private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
","private void populatedOSTContext(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
",414,4,"populateHostData:populatedOSTContext,",84,0.5816640138626100,Beam
2279,"private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}","private void addClassings(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}",64,6,"addClasses:addClassings,",87,0.4431852022806800,Beam
2280,"public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
","public boolean start(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
",46,5,"select:start,",14,0.0637121597925822,Beam
2281,,,67,5,,690,3.1862006266911800,0
2283,,,115,6,,773,3.3800453623135900,0
2284,"private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){
  if (matches(statusLine,x,y)) {
    final String filename=statusLine.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}","private static boolean addIfMatches(List<String> container,String statusBlock,char x,char y){
  if (matches(statusBlock,x,y)) {
    final String filename=statusBlock.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}",71,6,"statusLine:statusBlock,",34,0.2291564146677650,Beam
2285,"public static AttribKey forHtmlAttrib(ElKey el,String localName){
  return new AttribKey(el,HTML_NS,localName);
}
","public static AttribKey forHtmlAttrib(ElKey el,String localString){
  return new AttribKey(el,HTML_NS,localString);
}
",24,4,"localName:localString,",8,0.03676892121632890,Beam
2286,"public static void dropIndex(Connection conn,String schema,String table) throws SQLException {
  init(conn);
  PreparedStatement prep=conn.prepareStatement(""SELECT ID FROM "" + SCHEMA + "".INDEXES WHERE SCHEMA=? AND TABLE=?"");
  prep.setString(1,schema);
  prep.setString(2,table);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".INDEXES WHERE ID=?"");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(conn,schema,table,false);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".ROWS WHERE INDEXID=? AND ROWNUM<10000"");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".MAP M ""+ ""WHERE NOT EXISTS (SELECT * FROM ""+ SCHEMA+ "".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}","public static void create(Connection conn,String syma,String table) throws SQLException {
  init(conn);
  PreparedStatement prep=conn.prepareStatement(""SELECT ID FROM "" + SCHEMA + "".INDEXES WHERE SCHEMA=? AND TABLE=?"");
  prep.setString(1,syma);
  prep.setString(2,table);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".INDEXES WHERE ID=?"");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(conn,syma,table,false);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".ROWS WHERE INDEXID=? AND ROWNUM<10000"");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".MAP M ""+ ""WHERE NOT EXISTS (SELECT * FROM ""+ SCHEMA+ "".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}",217,9,"dropIndex:create,schema:syma,",138,0.5270006577173870,Beam
2288,"public static File toSLDFile(final File file){
  final String path=file.getAbsolutePath();
  final String base=path.substring(0,path.length() - 4);
  String newPath=base + "".sld"";
  File sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  newPath=base + "".SLD"";
  sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  return null;
}","public static File toSLFDiles(final File get){
  final String path=get.getAbsolutePath();
  final String base=path.substring(0,path.length() - 4);
  String newPath=base + "".sld"";
  File usld=new File(newPath);
  if (usld.exists()) {
    return usld;
  }
  newPath=base + "".SLD"";
  usld=new File(newPath);
  if (usld.exists()) {
    return usld;
  }
  return null;
}",99,6,"toSLDFile:toSLFDiles,file:get,sld:usld,",212,0.9481283704439800,Beam
2289,"@Override public int hashCode(){
  int code=0;
  if (fPublicId != null) {
    code+=fPublicId.hashCode();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.hashCode();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.hashCode();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.hashCode();
  }
  if (fNamespace != null) {
    code+=fNamespace.hashCode();
  }
  return code;
}","@Override public int hashcode(){
  int code=0;
  if (fMasterPath != null) {
    code+=fMasterPath.hashcode();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.hashcode();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.hashcode();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.hashcode();
  }
  if (fNamespace != null) {
    code+=fNamespace.hashcode();
  }
  return code;
}",97,7,"hashCode:hashcode,fPublicId:fMasterPath,",197,2.235751219590510,Beam
2290,"@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}
","@Override public Expected<T> IfOnce(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}
",40,2,"ifPresent:IfOnce,",7,0.04536977211634320,Beam
2291,"protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}","protected String computefullurl(URL baseLine,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=baseLine.getProtocol() + ""://"" + baseLine.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=baseLine.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      link=baseLine.getProtocol() + ""://"" + baseLine.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}",238,7,"computeFullUrl:computefullurl,baseUrl:baseLine,",98,1.2505803982416800,Beam
2292,"void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}
","void create(Environment viron,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}
",47,6,"write:create,env:viron,",272,1.1232604146003700,Beam
2293,"default Document putAll(Iterator<Field> fields){
  while (fields.hasNext()) {
    Field field=fields.next();
    setValue(field.getName(),field.getValue());
  }
  return this;
}
","default Document setAll(Iterator<Field> files){
  while (files.hasNext()) {
    Field field=files.next();
    setValue(field.getName(),field.getValue());
  }
  return this;
}
",49,3,"putAll:setAll,fields:files,",47,0.2357143799463910,Beam
2294,"@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}","@Override public final void readLow(int temp) throws IOException {
  build[0]=(byte)temp;
  build[1]=(byte)(temp >> 8);
  dis.write(build,0,2);
}",50,4,"writeShort:readLow,v:temp,work:build,",144,0.6287594358126320,Beam
2295,,,570,24,,2614,17.412660586834000,0
2296,,,95,6,,1409,8.651535149415330,0
2297,,,153,8,,1277,9.18353742758433,0
2298,"public void closeFile() throws IOException {
  file.close();
  file=null;
}
","public void setupFiles() throws IOException {
  folder.close();
  folder=null;
}
",19,2,"closeFile:setupFiles,file:folder,",159,0.584878933429718,Beam
2299,,,35,3,,407,2.586186873912810,0
2300,"protected Object finish(Map settings) throws WizardException {
  return provider.finish(settings);
}
","protected Object endFinish(Map rules) throws WizardException {
  return provider.endFinish(rules);
}
",19,3,"settings:rules,finish:endFinish,",82,0.40185561577479000,Beam
2301,,,27,1,,63,0.3500995477040610,0
2302,"public boolean isSessionToken(String token){
synchronized (sessionTokens) {
    return sessionTokens.contains(token);
  }
}
","public boolean areConnectionType(String token){
synchronized (sessionTokens) {
    return sessionTokens.contains(token);
  }
}
",23,3,"isSessionToken:areConnectionType,",16,0.07860353787740070,Beam
2303,"public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){
  final int nele=end - begin;
  DBIDArrayIter it=ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));
  int minInd=begin, maxInd=end - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == end - 1) {
    minInd=(begin + end) >>> 1;
  }
  return minInd;
}","public int SplitRandomally(ArrayModifiableDBIDs ind,int begin,int open,DoubleDataStore tpro,Random rest){
  final int nele=open - begin;
  DBIDArrayIter it=ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rest.nextInt(nele)));
  int minInd=begin, maxInd=open - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == open - 1) {
    minInd=(begin + open) >>> 1;
  }
  return minInd;
}",177,12,"splitRandomly:SplitRandomally,rand:rest,end:open,",916,6.6843101938565600,Beam
2304,,,52,4,,919,3.995364459355670,0
2305,,,20,2,,197,0.7846813122431440,0
2306,"public synchronized void loadFromFile(){
  entries.clear();
  Path file=Paths.get(fileName);
  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){
    String line;
    do {
      line=reader.readLine();
      AddressbookEntry parsedEntry=parseLine(line);
      if (parsedEntry != null) {
        entries.put(parsedEntry.getName(),parsedEntry);
      }
    }
 while (line != null);
  }
 catch (  IOException ex) {
    LOGGER.warning(""Error reading addressbook: "" + ex.getLocalizedMessage());
  }
  LOGGER.info(""Read "" + entries.size() + "" addressbook entries from ""+ fileName);
  scanCategories();
}
","public synchronized void readfromSourceFile(){
  entryentry.clear();
  Path file=Paths.get(fileName);
  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){
    String comment;
    do {
      comment=reader.readLine();
      AddressbookEntry parsedEntry=parseLine(comment);
      if (parsedEntry != null) {
        entryentry.put(parsedEntry.getName(),parsedEntry);
      }
    }
 while (comment != null);
  }
 catch (  IOException ex) {
    LOGGER.warning(""Error reading addressbook: "" + ex.getLocalizedMessage());
  }
  LOGGER.info(""Read "" + entryentry.size() + "" addressbook entries from ""+ fileName);
  scanCategories();
}
",131,8,"loadFromFile:readfromSourceFile,entries:entryentry,line:comment,",657,11.041721510887100,Beam
2307,"private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}
","private boolean matchesanytag(String tagName){
  return tagNames.contains(tagName);
}
",17,3,"matchesAnyTag:matchesanytag,",16,0.07296549479166670,Beam
2308,"public void add(DataSource source,boolean visible){
  add(data.size(),source,visible);
}
","public void show(DataSource source,boolean focus){
  show(data.size(),source,focus);
}
",25,4,"add:show,visible:focus,",183,0.6761159817377730,Beam
2309,,,80,6,,899,14.708855068683600,0
2310,"public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}
","public static boolean istrue(Map<String,Object> dict,String key){
  return istrue(dict,key,false);
}
",28,3,"isTrue:istrue,",6,0.025217632452646900,Beam
2311,"public IonException(Throwable cause){
  super(cause.getMessage(),cause);
}
","public IOnception(Throwable subject){
  super(subject.getMessage(),subject);
}
",19,2,"cause:subject,IonException:IOnception,",88,0.3452714443206790,Beam
2312,,,18,2,,251,0.9195421655972800,0
2314,"public void attributeUpdate(PrintServiceAttributeEvent psae){
  log.fine(""attributeUpdate - "" + psae);
}
","public void updateUpdate(PrintServiceAttributeEvent PSe){
  log.fine(""attributeUpdate - "" + PSe);
}
",18,3,"psae:PSe,attributeUpdate:updateUpdate,",60,0.2523141821225480,Beam
2315,,,58,5,,669,3.202525039513910,0
2316,"public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
","public static void last(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.last();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
",33,2,"next:last,",5,0.03160969018936160,Beam
2317,"public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}","public static int compare(Comparable c1,Comparable Ctwo,boolean nullGreater){
  if (c1 == Ctwo) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (Ctwo == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(Ctwo);
}",73,4,"c2:Ctwo,",98,0.7006348053614300,Beam
2319,"public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}","public static double[][] make(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}",352,22,"computeWeightMatrix:make,",46,0.5421918471654260,Beam
2320,"private void readHeader() throws OpenStegoException {
  this.dataHeader=new DCTDataHeader(this,this.config);
}
","private void readheader() throws OpenStegoException {
  this.dataHeader=new DCTDataHeader(this,this.config);
}
",23,1,"readHeader:readheader,",5,0.01587677796681720,Beam
2321,"public boolean isAllGranted(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;
  }
  return count == mPerms.size();
}","public boolean isALLGranted(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;
  }
  return count == mPerms.size();
}",62,5,"isAllGranted:isALLGranted,",3,0.015948041280110700,Beam
2322,"public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
","public void removeposes(Collection<Integer> posations){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(posations);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
",61,5,"removePositions:removeposes,positions:posations,",55,0.2293571392695110,Beam
2323,"public void copyText(){
  int end, start;
  end=selectedCharField.getSelectionEnd();
  start=selectedCharField.getSelectionStart();
  selectedCharField.selectAll();
  selectedCharField.copy();
  selectedCharField.select(start,end);
}
","public void copytext(){
  int end, start;
  end=selectedTextBox.getSelectionEnd();
  start=selectedTextBox.getSelectionStart();
  selectedTextBox.selectAll();
  selectedTextBox.copy();
  selectedTextBox.select(start,end);
}
",49,4,"copyText:copytext,selectedCharField:selectedTextBox,",106,0.5423013965288800,Beam
2324,"protected abstract void internalPut(int index,byte b);
","protected abstract void internalput(int index,byte d);
",12,3,"internalPut:internalput,b:d,",67,0.3521861553192140,Beam
2325,"private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
","private List<Header> defaultMetels(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
",56,3,"defaultHeaders:defaultMetels,",16,0.07054328123728430,Beam
2326,"public static boolean verify(byte[] data,byte[] signature,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && signature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(signature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(signature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}","public static boolean signity(byte[] data,byte[] scheature,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && scheature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(scheature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(scheature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}",148,6,"verify:signity,signature:scheature,",157,2.105380400021870,Beam
2327,,,31,6,,1054,3.913128121693930,0
2328,"public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}","public static void copy(DimensionsEvent aiDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aiDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}",359,5,"aeDest:aiDest,",10,0.0657453695933024,Beam
2329,,,23,3,,713,2.746643682320910,0
2330,"public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}","public boolean leaving() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}",75,6,"leave:leaving,",4,0.017948718865712500,Beam
2331,"public List<SoftWrapImpl> removeStartingFrom(int offset){
  int startIndex=getSoftWrapIndex(offset);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}","public List<SoftWrapImpl> removeBeginningAt(int start){
  int startIndex=getSoftWrapIndex(start);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}",97,6,"removeStartingFrom:removeBeginningAt,offset:start,",804,3.765524435043340,Beam
2332,"public void write(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}","public void code(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}",103,9,"write:code,",112,0.5017725666364030,Beam
2333,"public void readWwwAuthenticateHeader(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,""realm"");
    mDigest.setRealm(value);
    value=getValue(header,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(header,""qop"");
    mDigest.setQop(value);
    value=getValue(header,""nonce"");
    mDigest.setNextnonce(value);
  }
}","public void readWwwAuthenticationMessage(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,""realm"");
    mDigest.setRealm(value);
    value=getValue(header,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(header,""qop"");
    mDigest.setQop(value);
    value=getValue(header,""nonce"");
    mDigest.setNextnonce(value);
  }
}",102,5,"readWwwAuthenticateHeader:readWwwAuthenticationMessage,",39,0.16575222015380900,Beam
2334,,,73,5,,1425,5.640792985757190,0
2335,"public int syncQuery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
","public int usequery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
",50,5,"syncQuery:usequery,",44,0.22060975631078100,Beam
2336,"private static String parse(JsonValue base){
  if (!base.isString()) {
    return null;
  }
  return buildString(base.asString());
}
","private static String ize(JsonValue data){
  if (!data.isString()) {
    return null;
  }
  return buildString(data.asString());
}
",34,2,"parse:ize,base:data,",66,0.2690603852272030,Beam
2337,"protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){
  if (dropTableNames != null && !dropTableNames.isEmpty()) {
    String[] dropTableSQLS=new String[dropTableNames.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i));
    }
    execute(dropTableSQLS,db);
  }
}","protected void droptows(List<String> changeTableNames,SQLiteDatabase db){
  if (changeTableNames != null && !changeTableNames.isEmpty()) {
    String[] dropTableSQLS=new String[changeTableNames.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(changeTableNames.get(i));
    }
    execute(dropTableSQLS,db);
  }
}",85,5,"dropTables:droptows,dropTableNames:changeTableNames,",205,1.189827521642050,Beam
2338,"private void removeOurUIs(){
  for (  String uiName : UI_LIST) {
    uiDefaults.remove(uiName + ""UI"");
  }
}
","private void removeOwnURis(){
  for (  String uiName : UI_LIST) {
    uiFras.remove(uiName + ""UI"");
  }
}
",25,4,"removeOurUIs:removeOwnURis,uiDefaults:uiFras,",39,0.15489829778671300,Beam
2339,"protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=context.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put(""backColor"",backColor);
  }
  String fontName=context.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put(""fontName"",fontName);
  }
  String fontSize=context.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put(""fontSize"",fontSize);
  }
  String foreColor=context.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put(""foreColor"",foreColor);
  }
  String justification=context.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put(""justification"",justification);
  }
  String bold=context.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put(""bold"",bold);
  }
  String italic=context.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put(""italic"",italic);
  }
  String subscript=context.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put(""subscript"",subscript);
  }
  String superscript=context.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put(""superscript"",superscript);
  }
  String underline=context.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put(""underline"",underline);
  }
  String strikethrough=context.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put(""strikethrough"",strikethrough);
  }
  return declaredProperties;
}","protected FastMap<String> readDeclinedPropertyps(WidgetCreatorContext language){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=language.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put(""backColor"",backColor);
  }
  String fontName=language.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put(""fontName"",fontName);
  }
  String fontSize=language.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put(""fontSize"",fontSize);
  }
  String foreColor=language.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put(""foreColor"",foreColor);
  }
  String justification=language.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put(""justification"",justification);
  }
  String bold=language.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put(""bold"",bold);
  }
  String italic=language.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put(""italic"",italic);
  }
  String subscript=language.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put(""subscript"",subscript);
  }
  String superscript=language.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put(""superscript"",superscript);
  }
  String underline=language.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put(""underline"",underline);
  }
  String strikethrough=language.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put(""strikethrough"",strikethrough);
  }
  return declaredProperties;
}",414,14,"readDeclaredProperties:readDeclinedPropertyps,context:language,",65,0.5292160034179690,Beam
2340,,,103,15,,1662,7.822740491231280,0
2341,"public void addTestCall(GenericAccessibleObject<?> call) throws IllegalArgumentException {
  Inputs.checkNull(call);
  testMethods.add(call);
}
","public void addTestingCase(GenericAccessibleObject<?> build) throws IllegalArgumentException {
  Inputs.checkNull(build);
  testMethods.add(build);
}
",28,3,"call:build,addTestCall:addTestingCase,",56,0.22785776058832800,Beam
2342,,,135,7,,1056,5.06894478003184,0
2343,,,91,6,,179,0.614506193002065,0
2344,"public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(pem);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}","public RSAPublicKey parsePEMPublicKey(String psEM) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(psEM);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}",108,9,"pem:psEM,",10,0.059189903736114500,Beam
2345,"public int checkBookiesUp(int count,int timeout) throws Exception {
  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);
  try {
    int mostRecentSize=0;
    for (int i=0; i < timeout; i++) {
      try {
        List<String> children=zkc.getChildren(""/ledgers/available"",false);
        children.remove(""readonly"");
        mostRecentSize=children.size();
        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {
          LOG.info(""Found "" + mostRecentSize + "" bookies up, ""+ ""waiting for ""+ count);
          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {
            for (            String child : children) {
              LOG.info("" server: "" + child);
            }
          }
        }
        if (mostRecentSize == count) {
          break;
        }
      }
 catch (      KeeperException e) {
      }
      Thread.sleep(1000);
    }
    return mostRecentSize;
  }
  finally {
    zkc.close();
  }
}","public int checkBookriesUp(int count,int timeout) throws Exception {
  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);
  try {
    int mostRecentSize=0;
    for (int i=0; i < timeout; i++) {
      try {
        List<String> children=zkc.getChildren(""/ledgers/available"",false);
        children.remove(""readonly"");
        mostRecentSize=children.size();
        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {
          LOG.info(""Found "" + mostRecentSize + "" bookies up, ""+ ""waiting for ""+ count);
          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {
            for (            String child : children) {
              LOG.info("" server: "" + child);
            }
          }
        }
        if (mostRecentSize == count) {
          break;
        }
      }
 catch (      KeeperException e) {
      }
      Thread.sleep(1000);
    }
    return mostRecentSize;
  }
  finally {
    zkc.close();
  }
}",184,11,"checkBookiesUp:checkBookriesUp,",8,0.07335824569066370,Beam
2346,"public static String padRight(final String s,final int length){
  final int pad=length - s.length();
  return pad > 0 ? s + getSpaceString(pad) : s;
}","public static String PadLeft(final String ts,final int length){
  final int span=length - ts.length();
  return span > 0 ? ts + getSpaceString(span) : ts;
}",41,4,"s:ts,padRight:PadLeft,pad:span,",442,4.37089231411616,Beam
2347,,,26,3,,438,1.9155675252278600,0
2348,"private String dateToString(Date input){
  if (input == null) {
    return null;
  }
 else {
    return input.toString();
  }
}
","private String dateToDate(Date form){
  if (form == null) {
    return null;
  }
 else {
    return form.toString();
  }
}
",30,2,"dateToString:dateToDate,input:form,",88,0.35667006572087600,Beam
2349,"public synchronized void close() throws IOException {
  if (in == null)   return;
  in.close();
  in=null;
  buf=null;
}
","public synchronized void stop() throws IOException {
  if (in == null)   return;
  in.stop();
  in=null;
  buf=null;
}
",32,3,"close:stop,",5,0.03394263585408530,Beam
2351,,,133,11,,2456,12.76055765946710,0
2352,,,174,12,,2232,10.15709742307660,0
2353,"public void changeState(){
  linked=!linked;
  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();
  repaint();
}
","public void changestate(){
  linked=!linked;
  link=linked ? linkedImIncu.getImage() : unlinkedImIc.getImage();
  repaint();
}
",32,5,"changeState:changestate,linkedImIc:linkedImIncu,",27,0.09860485394795740,Beam
2354,"public void addItem(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}","public void AddElement(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}",60,4,"addItem:AddElement,",13,0.044687283039093000,Beam
2355,"private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){
  drawPaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);
  drawPaint.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPaint.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPaint);
  drawPaint.setShader(null);
}","private void drawBitmapWithShrupe(Canvas canvas,Bitmap webmap,int centerX,int centerY,float radius,Paint drawPoaint){
  drawPoaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPoaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPoaint);
  drawPoaint.setXfermode(null);
  final int halfBitmapWidth=webmap.getWidth() / 2;
  final int halfBitmapHeight=webmap.getHeight() / 2;
  BitmapShader bitmapShad=new BitmapShader(webmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=webmap.getWidth() > webmap.getHeight() ? webmap.getHeight() : webmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShad.setLocalMatrix(shaderMatrix);
  drawPoaint.setShader(bitmapShad);
  canvas.drawCircle(centerX,centerY,radius,drawPoaint);
  drawPoaint.setShader(null);
}",230,15,"drawBitmapWithStroke:drawBitmapWithShrupe,drawPaint:drawPoaint,bitmap:webmap,bitmapShader:bitmapShad,",2859,18.549786245822900,Beam
2356,"public RequirementsBuilder addRequireProperty(String name,RequirementsBuilder builder){
  addProperty(name,builder);
  requiredProperties.add(name);
  return this;
}
","public RequirementsBuilder addRequireProp(String name,RequirementsBuilder url){
  addProperty(name,url);
  requiredProperties.add(name);
  return this;
}
",29,4,"addRequireProperty:addRequireProp,builder:url,",139,0.5467380960782370,Beam
2357,,,112,6,,827,4.70252925157547,0
2358,,,87,5,,637,4.0613009611765500,0
2359,,,293,19,,2192,10.100329291820500,0
2360,"public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
","public static String encodeFromString(String plain,String charspace) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charspace));
}
",28,3,"charset:charspace,",3,0.02560183604558310,Beam
2362,"public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.startDocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.startDocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void newApplication(XMLLocator locator,String encoding,NamespaceContext workspaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=workspaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.newApplication();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.newApplication();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",107,9,"startDocument:newApplication,namespaceContext:workspaceContext,",132,0.7900311112403870,Beam
2363,"public void encode(OutputStream out) throws IOException {
  DerOutputStream tmp=new DerOutputStream();
  if (this.extensionValue == null) {
    this.extensionId=PKIXExtensions.ReasonCode_Id;
    this.critical=false;
    encodeThis();
  }
  super.encode(tmp);
  out.write(tmp.toByteArray());
}
","public void enccode(OutputStream out) throws IOException {
  DerOutputStream tmp=new DerOutputStream();
  if (this.extensionValue == null) {
    this.extensionId=PKIXExtensions.ReasonCode_Id;
    this.critical=false;
    encodeThis();
  }
  super.enccode(tmp);
  out.write(tmp.toByteArray());
}
",65,4,"encode:enccode,",12,0.05752744674682620,Beam
2364,"public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){
  return unlinkTargetVolumesFromSnapshotSession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);
}
","public TaskResourceRep unlinkTargetVolumesFromSnapsnapTarget(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){
  return unlinkTargetVolumesFromSnapsnapTarget(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);
}
",24,3,"unlinkTargetVolumesFromSnapshotSession:unlinkTargetVolumesFromSnapsnapTarget,",56,0.45147971709569300,Beam
2365,,,58,4,,742,2.9901121338208500,0
2366,"public void execute() throws IOException {
  String key=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}","public void invoke() throws IOException {
  String cert=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(cert);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}",44,3,"execute:invoke,key:cert,",73,0.3583384871482850,Beam
2367,,,25,2,,99,0.35316973527272500,0
2368,"private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}
","private void insertBefore(Instruction[] list,Instruction b){
  for (  Instruction x : list) {
    b.insertBefore(x);
  }
}
",30,4,"s:b,",15,0.06042341788609820,Beam
2369,"private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){
  int max=original.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}","private Vector<SnmpVarBind> splitComponent(Vector<SnmpVarBind> orig,int limit){
  int max=orig.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=orig.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}",110,8,"original:orig,splitFrom:splitComponent,",207,1.8878450791041100,Beam
2371,"@SuppressWarnings(""unchecked"") public void registerDefaultDeviceTypes(){
  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();
  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    try {
      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}
","@SuppressWarnings(""unchecked"") public void registerDefaultDeviceApps(){
  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();
  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    try {
      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}
",110,6,"registerDefaultDeviceTypes:registerDefaultDeviceApps,",7,0.02848849296569820,Beam
2372,"private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}","private static void pad(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}",149,9,"map:pad,",109,0.5984076857566830,Beam
2373,"public static String serializeExpression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}","public static String serializerExpStatement(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializerExpStatement(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}",173,8,"serializeExpression:serializerExpStatement,",44,0.23478105465571100,Beam
2374,,,31,3,,299,1.2202327728271500,0
2375,,,53,3,,476,2.1210604429245000,0
2376,"@Secured public void addPay_Simple(long userId,BigDecimal amount,Date created,PaymentType payType,String details,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {
  checkAccessFor_ADMIN();
  amount=amount.abs();
  long id=universal.nextSeqFor(payments);
  PaymentExt payment=PaymentExt.createSystemPayment(id,userId,amount,created,payType,details);
  BigDecimal newVal=doPayment(userId,payment,updateCache);
  log.info(""pay added: userId="" + userId + (newVal != null ? "", newBalance="" + newVal : """")+ "", req=""+ getReqInfoStr());
}
","@Secured public void addPay_Simple(long userId,BigDecimal value,Date created,PaymentType payType,String details,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {
  checkAccessFor_ADMIN();
  value=value.abs();
  long id=universal.nextSeqFor(payments);
  PaymentExt payment=PaymentExt.createSystemPayment(id,userId,value,created,payType,details);
  BigDecimal newVal=doPayment(userId,payment,updateCache);
  log.info(""pay added: userId="" + userId + (newVal != null ? "", newBalance="" + newVal : """")+ "", req=""+ getReqInfoStr());
}
",111,13,"amount:value,",4,0.04043728907903040,Beam
2377,"private int keyToLevel(String key){
  String[] token=key.split(""/"");
  return (token.length - 1);
}","private int Key2Token(String input){
  String[] token=input.split(""/"");
  return (token.length - 1);
}",30,3,"keyToLevel:Key2Token,key:input,",162,0.768097718556722,Beam
2378,"public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}
","public static <T>CompletableFuture<T> exceptionallyCompleteFuture(Throwable Throwb){
  final CompletableFuture<T> wrapper=new CompletableFuture<T>();
  wrapper.completeExceptionally(Throwb);
  return wrapper;
}
",41,3,"exceptionallyCompletedFuture:exceptionallyCompleteFuture,throwable:Throwb,future:wrapper,",164,0.7169428110122680,Beam
2379,,,62,3,,469,1.8642577330271400,0
2380,,,21,3,,423,2.4003504395484900,0
2381,,,130,11,,1638,6.422557989756270,0
2382,"private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}","private boolean canTHave(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}",113,10,"canContain:canTHave,",18,0.09040464162826540,Beam
2383,"public synchronized void show(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.show();
  mKeyguardView.requestFocus();
}
","public synchronized void stage(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.stage();
  mKeyguardView.requestFocus();
}
",113,9,"show:stage,",11,0.08872370719909670,Beam
2384,"public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
","public static void removeConnectionCollection(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
",21,2,"removeConnectionList:removeConnectionCollection,",4,0.017967140674591100,Beam
2385,"public static <T>T jsonToObject(String jsonString,Class<T> klass){
  T objectFromJson=null;
  try {
    GfJsonObject jsonObject=new GfJsonObject(jsonString);
    objectFromJson=klass.newInstance();
    Method[] declaredMethods=klass.getDeclaredMethods();
    Map<String,Method> methodsMap=new HashMap<String,Method>();
    for (    Method method : declaredMethods) {
      methodsMap.put(method.getName(),method);
    }
    int noOfFields=jsonObject.size();
    Iterator<String> keys=jsonObject.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      Method method=methodsMap.get(""set"" + capitalize(key));
      if (method != null) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          Class<?> parameterType=parameterTypes[0];
          Object value=jsonObject.get(key);
          if (isPrimitiveOrWrapper(parameterType)) {
            value=getPrimitiveOrWrapperValue(parameterType,value);
          }
 else           if (isArray(parameterType)) {
            value=toArray(value,parameterType);
          }
 else           if (isList(parameterType)) {
            value=toList(value,parameterType);
          }
 else           if (isMap(parameterType)) {
            value=toMap(value,parameterType);
          }
 else           if (isSet(parameterType)) {
            value=toSet(value,parameterType);
          }
 else {
            value=jsonToObject(value.toString(),parameterType);
          }
          method.invoke(objectFromJson,new Object[]{value});
          noOfFields--;
        }
      }
    }
    if (noOfFields != 0) {
      throw new IllegalArgumentException(""Not enough setter methods for fields in given JSON String : "" + jsonString + "" in class : ""+ klass);
    }
  }
 catch (  InstantiationException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  GfJsonException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  InvocationTargetException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
  return objectFromJson;
}","public static <T>T json2JSON(String jsonString,Class<T> kazz){
  T objectFromJson=null;
  try {
    GfJsonObject jsonData=new GfJsonObject(jsonString);
    objectFromJson=kazz.newInstance();
    Method[] declaredMethods=kazz.getDeclaredMethods();
    Map<String,Method> methodsMap=new HashMap<String,Method>();
    for (    Method method : declaredMethods) {
      methodsMap.put(method.getName(),method);
    }
    int noOfFields=jsonData.size();
    Iterator<String> keys=jsonData.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      Method method=methodsMap.get(""set"" + capitalize(key));
      if (method != null) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          Class<?> parameterType=parameterTypes[0];
          Object value=jsonData.get(key);
          if (isPrimitiveOrWrapper(parameterType)) {
            value=getPrimitiveOrWrapperValue(parameterType,value);
          }
 else           if (isArray(parameterType)) {
            value=toArray(value,parameterType);
          }
 else           if (isList(parameterType)) {
            value=toList(value,parameterType);
          }
 else           if (isMap(parameterType)) {
            value=toMap(value,parameterType);
          }
 else           if (isSet(parameterType)) {
            value=toSet(value,parameterType);
          }
 else {
            value=json2JSON(value.toString(),parameterType);
          }
          method.invoke(objectFromJson,new Object[]{value});
          noOfFields--;
        }
      }
    }
    if (noOfFields != 0) {
      throw new IllegalArgumentException(""Not enough setter methods for fields in given JSON String : "" + jsonString + "" in class : ""+ kazz);
    }
  }
 catch (  InstantiationException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + kazz,e);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + kazz,e);
  }
catch (  GfJsonException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + kazz,e);
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + kazz,e);
  }
catch (  InvocationTargetException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + kazz,e);
  }
  return objectFromJson;
}",445,15,"jsonToObject:json2JSON,klass:kazz,jsonObject:jsonData,",535,3.6222382227579800,Beam
2386,,,57,5,,666,2.5414823015530900,0
2387,,,19,2,,228,0.8499427755673730,0
2388,"private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}","private static double scale(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}",58,4,"norm:scale,",36,0.14059529701868700,Beam
2389,,,25,4,,574,3.215052243073780,0
2390,,,39,5,,514,1.8365269263585400,0
2391,,,433,5,,628,3.989590760072070,0
2392,"public void flush() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicID_);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.flush();
}","public void push() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicIdP);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.push();
}",60,4,"flush:push,publicID_:publicIdP,",172,0.6806061585744220,Beam
2393,"public void addDropItem(final String name,final double probability,final int min,final int max){
  dropsItems.add(new DropItem(name,probability,min,max));
}
","public void addMoveApp(final String name,final double proBability,final int mini,final int max){
  dropsItems.add(new DropItem(name,proBability,mini,max));
}
",39,6,"min:mini,probability:proBability,addDropItem:addMoveApp,",706,3.071888244152070,Beam
2394,,,105,4,,498,3.408327345053360,0
2395,,,40,3,,440,2.0352417190869600,0
2396,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawImage(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}","public boolean drawPicture(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawPicture(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}",206,11,"drawImage:drawPicture,",3,0.06744701067606610,Beam
2397,"public boolean isSourceModified(Resource resource){
  boolean modified=true;
  String fileName=resource.getName();
  String path=(String)templatePaths.get(fileName);
  File currentFile=null;
  for (int i=0; currentFile == null && i < paths.size(); i++) {
    String testPath=(String)paths.get(i);
    File testFile=new File(testPath,fileName);
    if (testFile.canRead()) {
      currentFile=testFile;
    }
  }
  File file=new File(path,fileName);
  if (currentFile == null || !file.exists()) {
  }
 else   if (currentFile.equals(file) && file.canRead()) {
    modified=(file.lastModified() != resource.getLastModified());
  }
  return modified;
}","public boolean isSourceModified(Resource source){
  boolean modified=true;
  String fileName=source.getName();
  String path=(String)templatePaths.get(fileName);
  File currentFile=null;
  for (int i=0; currentFile == null && i < paths.size(); i++) {
    String testPath=(String)paths.get(i);
    File testFile=new File(testPath,fileName);
    if (testFile.canRead()) {
      currentFile=testFile;
    }
  }
  File file=new File(path,fileName);
  if (currentFile == null || !file.exists()) {
  }
 else   if (currentFile.equals(file) && file.canRead()) {
    modified=(file.lastModified() != source.getLastModified());
  }
  return modified;
}",166,12,"resource:source,",3,0.03218784332275390,Beam
2398,,,53,2,,321,1.5187033653259300,0
2399,"protected JavaElementDelta createDeltaTree(IJavaElement element,JavaElementDelta delta){
  JavaElementDelta childDelta=delta;
  ArrayList ancestors=getAncestors(element);
  if (ancestors == null) {
    if (equalsAndSameParent(delta.getElement(),getElement())) {
      this.kind=delta.kind;
      this.changeFlags=delta.changeFlags;
      this.movedToHandle=delta.movedToHandle;
      this.movedFromHandle=delta.movedFromHandle;
    }
  }
 else {
    for (int i=0, size=ancestors.size(); i < size; i++) {
      IJavaElement ancestor=(IJavaElement)ancestors.get(i);
      JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor);
      ancestorDelta.addAffectedChild(childDelta);
      childDelta=ancestorDelta;
    }
  }
  return childDelta;
}","protected JavaElementDelta getElementTree(IJavaElement element,JavaElementDelta delta){
  JavaElementDelta childDelta=delta;
  ArrayList ancestors=getAncestors(element);
  if (ancestors == null) {
    if (equalsAndSameParent(delta.getElement(),getElement())) {
      this.kind=delta.kind;
      this.changeFlags=delta.changeFlags;
      this.movedToHandle=delta.movedToHandle;
      this.movedFromHandle=delta.movedFromHandle;
    }
  }
 else {
    for (int i=0, cycle=ancestors.cycle(); i < cycle; i++) {
      IJavaElement ancestor=(IJavaElement)ancestors.get(i);
      JavaElementDelta ancescorPart=new JavaElementDelta(ancestor);
      ancescorPart.addAffectedChild(childDelta);
      childDelta=ancescorPart;
    }
  }
  return childDelta;
}",145,9,"createDeltaTree:getElementTree,ancestorDelta:ancescorPart,size:cycle,",2797,12.462175563971200,Beam
2400,"public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
","public void showDroidsafeTextDrawers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextDrawers(editor);
        }
      }
    }
  }
}
",180,12,"showDroidsafeTextMarkers:showDroidsafeTextDrawers,",10,0.06469316482543950,Beam
2401,,,43,5,,1132,7.539850469430290,0
2402,"public static boolean isEmbeddedBase64Image(String uri){
  return (uri != null && uri.startsWith(""data:image/""));
}","public static boolean isEmbeddedBase62Url(String cli){
  return (cli != null && cli.startsWith(""data:image/""));
}",24,2,"isEmbeddedBase64Image:isEmbeddedBase62Url,uri:cli,",57,0.2714629292488100,Beam
2403,"public static final void writeStringArrayXml(String[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,""null"");
    out.endTag(null,""null"");
    return;
  }
  out.startTag(null,""string-array"");
  if (name != null) {
    out.attribute(null,""name"",name);
  }
  final int N=val.length;
  out.attribute(null,""num"",Integer.toString(N));
  for (int i=0; i < N; i++) {
    out.startTag(null,""item"");
    out.attribute(null,""value"",val[i]);
    out.endTag(null,""item"");
  }
  out.endTag(null,""string-array"");
}","public static final void writeStringarrayYML(String[] lit,String type,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (lit == null) {
    out.startTag(null,""null"");
    out.endTag(null,""null"");
    return;
  }
  out.startTag(null,""string-array"");
  if (type != null) {
    out.attribute(null,""name"",type);
  }
  final int N=lit.length;
  out.attribute(null,""num"",Integer.toString(N));
  for (int i=0; i < N; i++) {
    out.startTag(null,""item"");
    out.attribute(null,""value"",lit[i]);
    out.endTag(null,""item"");
  }
  out.endTag(null,""string-array"");
}",164,6,"writeStringArrayXml:writeStringarrayYML,val:lit,name:type,",566,2.210569914182030,Beam
2404,,,27,2,,219,0.8474944074948630,0
2405,,,69,6,,1249,5.131069040298460,0
2406,"private Shape decodeEdge(int width,int height){
  path.reset();
  path.moveTo(width - 2,0);
  path.lineTo(width - 2,height - 4);
  path.lineTo(width - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}","private Shape decodeEdge(int flow,int height){
  path.reset();
  path.moveTo(flow - 2,0);
  path.lineTo(flow - 2,height - 4);
  path.lineTo(flow - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}",69,4,"width:flow,",45,0.18397223154703800,Beam
2407,"public static String inflate(String name){
  return inflate(name,gPrefix);
}
","public static String infation(String name){
  return infation(name,gPrefix);
}
",18,3,"inflate:infation,",7,0.030128840605417900,Beam
2409,"protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
","protected final StringBuilder Write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
",32,4,"write:Write,",58,0.1931429425875350,Beam
2410,"protected final void firePropertyChange(PropertyChangeEvent evt){
  pcs.firePropertyChange(evt);
}
","protected final void triggerPageChanged(PropertyChangeEvent evt){
  pcs.triggerPageChanged(evt);
}
",17,3,"firePropertyChange:triggerPageChanged,",32,0.13776654799779300,Beam
2411,,,271,24,,3914,24.29895534912750,0
2412,,,105,7,,1224,6.7491250276565600,0
2413,,,31,3,,331,1.631662631034850,0
2414,"public static double normalPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}","public static double normPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}",76,5,"normalPDF:normPDF,",4,0.016082231203715000,Beam
2415,"private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}","private static void displayApplication(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}",242,18,"renderHandler:displayApplication,",142,0.5673202912012740,Beam
2416,,,87,6,,1330,6.354287087917330,0
2417,,,65,5,,946,3.944880493481950,0
2418,"public void testBytesAsSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}","public void assertBytesToJSON() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}",227,8,"testBytesAsSource:assertBytesToJSON,",20,0.0913908878962199,Beam
2419,"private synchronized boolean startDequeue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (threads > 0);
}","private synchronized boolean startDisqueue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (threads > 0);
}",114,9,"startDequeue:startDisqueue,",3,0.013371451695760100,Beam
2421,,,12,3,,468,2.640479878584540,0
2422,"public Perspective createUserPerspective(final String name,final boolean show){
  Perspective perspective=model.addPerspective(name,true);
  perspective.store(context);
  if (show) {
    showPerspective(name);
  }
  return perspective;
}
","public Perspective createUserPercepture(final String name,final boolean show){
  Perspective persceptive=model.addPerspective(name,true);
  persceptive.store(context);
  if (show) {
    showPerspective(name);
  }
  return persceptive;
}
",47,6,"createUserPerspective:createUserPercepture,perspective:persceptive,",578,2.5993945837020900,Beam
2424,"public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}","public static SortedSet<Integer> updateNumber(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}",128,8,"adjustPosition:updateNumber,",18,0.0661469578742981,Beam
2425,"protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}","protected static byte[] hkdfExpland(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}",83,7,"hkdfExpand:hkdfExpland,",4,0.02956414222717290,Beam
2426,,,65,8,,963,5.055809891223910,0
2427,"public LayoutBlock createNewLayoutBlock(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
","public LayoutBlock createNewlayoutBlock(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
",165,8,"createNewLayoutBlock:createNewlayoutBlock,",37,0.18950061798095700,Beam
2428,"private synchronized void postEvent(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}
","private synchronized void preHandler(EventInfo EventInf){
  eventQueue.add(EventInf);
  notifyAll();
}
",21,3,"postEvent:preHandler,eventInfo:EventInf,",46,0.16471769014994300,Beam
2429,"long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}","long Cleanout(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}",186,12,"cleanup:Cleanout,",5,0.04393283128738400,Beam
2430,"default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
","default Document setArray(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
",64,3,"putAll:setArray,",10,0.045985658963521300,Beam
2431,"MutableBigInteger(MutableBigInteger val){
  intLen=val.intLen;
  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);
}
","MutedBigInt(MutedBigInt b){
  intLen=b.intLen;
  value=Arrays.copyOfRange(b.value,b.offset,b.offset + intLen);
}
",34,4,"val:b,MutableBigInteger:MutedBigInt,",173,0.6651728034019470,Beam
2432,"protected void drawCenterText(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}","protected void createcenterTextColor(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}",422,21,"drawCenterText:createcenterTextColor,",55,0.22772476275761900,Beam
2433,"public final void addValidationError(String error){
  validationErrors.add(error);
}
","public final void addValidateFailure(String comment){
  validationErrors.add(comment);
}
",17,3,"error:comment,addValidationError:addValidateFailure,",71,0.25562036434809400,Beam
2434,"private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
","private static void resolveNewCompression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
",63,4,"resolveNewExpression:resolveNewCompression,",30,0.13955886761347500,Beam
2435,"private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}","private void heapifyup(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}",81,6,"heapifyUp:heapifyup,",67,0.30233355760574300,Beam
2436,,,135,5,,667,2.9479297916094500,0
2437,,,17,1,,55,0.1587610642115280,0
2438,"public static int countMatches(String string,char c){
  int n=0;
  for (  char tc : string.toCharArray()) {
    if (c == tc)     n++;
  }
  return n;
}","public static int countMatches(String number,char e){
  int n=0;
  for (  char vc : number.toCharArray()) {
    if (e == vc)     n++;
  }
  return n;
}",43,5,"string:number,c:e,tc:vc,",465,1.8696620464325000,Beam
2439,"private boolean checkMatchIp(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}","private boolean checkmatchIAddress(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}",158,5,"checkMatchIp:checkmatchIAddress,",24,0.11044805447260500,Beam
2440,"@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}","@HLEFunction(nid=0x7ED29E40,version=150) public int SceRtcSetFick(TPointer timeAttrs,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAttrs);
  return 0;
}",54,6,"sceRtcSetTick:SceRtcSetFick,timeAddr:timeAttrs,",197,0.7187381903330490,Beam
2441,"public DefaultHeatMapDataset(int xSamples,int ySamples,double minX,double maxX,double minY,double maxY){
  if (xSamples < 1) {
    throw new IllegalArgumentException(""Requires \'xSamples\' > 0"");
  }
  if (ySamples < 1) {
    throw new IllegalArgumentException(""Requires \'ySamples\' > 0"");
  }
  if (Double.isInfinite(minX) || Double.isNaN(minX)) {
    throw new IllegalArgumentException(""\'minX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(maxX) || Double.isNaN(maxX)) {
    throw new IllegalArgumentException(""\'maxX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(minY) || Double.isNaN(minY)) {
    throw new IllegalArgumentException(""\'minY\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(maxY) || Double.isNaN(maxY)) {
    throw new IllegalArgumentException(""\'maxY\' cannot be INF or NaN."");
  }
  this.xSamples=xSamples;
  this.ySamples=ySamples;
  this.minX=minX;
  this.maxX=maxX;
  this.minY=minY;
  this.maxY=maxY;
  this.zValues=new double[xSamples][];
  for (int x=0; x < xSamples; x++) {
    this.zValues[x]=new double[ySamples];
  }
}","public DefaultHeatMapDatasystem(int xSamples,int ySamples,double minX,double maxX,double miniY,double maxY){
  if (xSamples < 1) {
    throw new IllegalArgumentException(""Requires \'xSamples\' > 0"");
  }
  if (ySamples < 1) {
    throw new IllegalArgumentException(""Requires \'ySamples\' > 0"");
  }
  if (Double.isInfinite(minX) || Double.isNaN(minX)) {
    throw new IllegalArgumentException(""\'minX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(maxX) || Double.isNaN(maxX)) {
    throw new IllegalArgumentException(""\'maxX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(miniY) || Double.isNaN(miniY)) {
    throw new IllegalArgumentException(""\'minY\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(maxY) || Double.isNaN(maxY)) {
    throw new IllegalArgumentException(""\'maxY\' cannot be INF or NaN."");
  }
  this.xSamples=xSamples;
  this.ySamples=ySamples;
  this.minX=minX;
  this.maxX=maxX;
  this.miniY=miniY;
  this.maxY=maxY;
  this.zValues=new double[xSamples][];
  for (int x=0; x < xSamples; x++) {
    this.zValues[x]=new double[ySamples];
  }
}",230,8,"DefaultHeatMapDataset:DefaultHeatMapDatasystem,minY:miniY,",595,3.722814361254370,Beam
2442,"private void changeOpenAMDebugFolder(String newOpenAMDebugFolder){
  SystemPropertiesManager.initializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY,newOpenAMDebugFolder);
}
","private void changeOpenSAMDebugfolder(String newOpenAMSecurityFolder){
  SystemPropertiesManager.initializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY,newOpenAMSecurityFolder);
}
",20,2,"changeOpenAMDebugFolder:changeOpenSAMDebugfolder,newOpenAMDebugFolder:newOpenAMSecurityFolder,",191,0.8553792715072630,Beam
2443,"public String encode(){
  StringBuffer sb=new StringBuffer();
  encode(sb);
  return sb.toString();
}
","public String Enode(){
  StringBuffer lab=new StringBuffer();
  Enode(lab);
  return lab.toString();
}
",27,2,"encode:Enode,sb:lab,",143,0.5942678610483810,Beam
2446,"protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}","protected final boolean readAvailableQuocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}",102,11,"readAvailableBlocking:readAvailableQuocking,",6,0.020714290936787900,Beam
2447,,,141,6,,1124,5.953807000319160,0
2448,"public void putAll(Map<? extends K,? extends V> m){
  tryPresize(m.size());
  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   putVal(e.getKey(),e.getValue(),false);
}
","public void setALL(Map<? extends K,? extends V> h){
  tryPresize(h.size());
  for (  Map.Entry<? extends K,? extends V> e : h.entrySet())   putVal(e.getKey(),e.getValue(),false);
}
",66,3,"putAll:setALL,m:h,",54,0.5918254574139910,Beam
2449,"final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void line(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",100,7,"println:line,",9,0.034803839524587000,Beam
2450,"protected boolean isCorrectMethod(Method method,Object[] args){
  return (proxySignature.equals(method.getName()) && args.length == 1);
}","protected boolean iscorrectFunction(Method form,Object[] args){
  return (proxySignature.equals(form.getName()) && args.length == 1);
}",34,4,"isCorrectMethod:iscorrectFunction,method:form,",372,1.8026630481084200,Beam
2451,,,24,2,,91,0.3361961245536800,0
2452,"protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}","protected static int[] mercat(@Nullable int[] art,int... obj){
  int[] newArr;
  if (art == null || art.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(art,art.length + obj.length);
    System.arraycopy(obj,0,newArr,art.length,obj.length);
  }
  return newArr;
}",83,4,"concat:mercat,arr:art,",209,1.354148232936860,Beam
2453,"public boolean startsWith(CharSeq prefix){
  return str.startsWith(prefix.str);
}
","public boolean restartsAcross(CharSeq prefix){
  return str.restartsAcross(prefix.str);
}
",19,3,"startsWith:restartsAcross,",43,0.2142792026201880,Beam
2454,"private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitelist ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : templateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : templateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}","private Integer countFragmentFilencedPages(List<String> plateFragments,boolean whitseless) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitseless ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : plateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : plateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}",288,12,"countFragmentFilteredPages:countFragmentFilencedPages,templateFragments:plateFragments,whitelist:whitseless,",530,3.47076944510142,Beam
2455,"public static void threadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
","public static void ThreadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
",41,3,"threadSleep:ThreadSleep,",6,0.025081535180409700,Beam
2456,,,28,4,,208,0.8844172358512880,0
2457,"public void rollback(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
","public void RollBack(Throwable n){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ n);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    n.addSuppressed(e);
  }
}
",48,7,"rollback:RollBack,t:n,",56,0.24698490699132300,Beam
2458,,,49,4,,674,3.8918726166089400,0
2459,"public static Date parseText(String dateStr){
  try {
    return mSimpleTextFormat.parse(dateStr);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
","public static Date parseText(String dateObj){
  try {
    return mSimpleTextFormat.parse(dateObj);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
",41,4,"dateStr:dateObj,",5,0.021960759162902800,Beam
2460,"int maxLength(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}","int maxWidth(){
  FontMetrics bm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=bm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}",80,7,"maxLength:maxWidth,fm:bm,",15,0.07352555195490520,Beam
2461,"public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}
","public static boolean compareresults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareresults(controlClient,cloudClient,null,null);
}
",29,3,"compareResults:compareresults,",44,0.22243203322092700,Beam
2462,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
","@Override public boolean onPreferenceLink(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
",29,3,"onPreferenceClick:onPreferenceLink,",4,0.018173817793528200,Beam
2463,"private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
","private synchronized void persistObjectAndNotifChanges(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
",51,4,"persistProfileAndNotifyChange:persistObjectAndNotifChanges,",11,0.11758586963017800,Beam
2464,"public boolean unsetOrdering(Object first,Object second){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}
","public boolean unsetOrding(Object first,Object second){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}
",53,6,"unsetOrdering:unsetOrding,",3,0.014192708333333300,Beam
2465,"int convertMouse(MouseEvent event){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=event.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=event.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
","int convertmouse(MouseEvent error){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=error.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=error.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
",164,19,"convertMouse:convertmouse,event:error,",58,0.34071723620096800,Beam
2466,,,110,7,,1655,11.359279851118700,0
2467,,,507,21,,1675,13.46166049639380,0
2468,"private static StsdData parseStsd(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}","private static StsdData read(ParsableByteArray ilsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  ilsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=ilsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=ilsd.getPosition();
    int childAtomSize=ilsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=ilsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(ilsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(ilsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    ilsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}",455,13,"stsd:ilsd,parseStsd:read,",715,4.111803038915000,Beam
2469,"public void resetTeleMissileAttacks(){
  pendingTeleMissileAttacks.removeAllElements();
}
","public void resetTeleMissileArtack(){
  pendingTeleMissileAttacks.removeAllElements();
}
",13,2,"resetTeleMissileAttacks:resetTeleMissileArtack,",9,0.05098998546600340,Beam
2470,,,64,8,,3023,10.853602333863600,0
2471,"public void characters(char ch[],int start,int length) throws SAXException {
  m_valueBuffer.append(ch,start,length);
}
","public void characteracters(char col[],int start,int length) throws SAXException {
  m_valueBuffer.append(col,start,length);
}
",30,5,"characters:characteracters,ch:col,",108,0.5603312611579900,Beam
2472,,,23,3,,178,0.7373012701670330,0
2473,"private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
","private void validateWill(String dest,Object payloader){
  if ((dest == null) || (payloader == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
",43,3,"payload:payloader,",12,0.05190542538960780,Beam
2474,,,30,3,,554,3.2466734210650100,0
2475,"public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
","public void executed(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
",30,4,"execute:executed,",7,0.046642700831095400,Beam
2476,"protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
","protected void notonPowerchange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
",43,4,"notifyStateChange:notonPowerchange,",42,0.2748288949330650,Beam
2477,"public Channel chan(final String topic,final JsonNode payload){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{topic,payload});
  final Channel channel=new Channel(topic,payload,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}","public Channel an(final String text,final JsonNode payload){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{text,payload});
  final Channel channel=new Channel(text,payload,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}",67,5,"topic:text,chan:an,",132,0.6149992704391480,Beam
2478,,,20,1,,33,0.1065664529800420,0
2479,"@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
","@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreBlockpoint(LineByLineFileInputOperator checkpointIter,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkpointIter.getClass());
  lInput.close();
  return oper;
}
",70,6,"restoreCheckPoint:restoreBlockpoint,checkPointOper:checkpointIter,",131,0.6089311281840010,Beam
2480,"public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}","public void empty(String key,char v){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=empty(root,strkey,0,v);
}",89,8,"insert:empty,val:v,",159,0.7663112044334410,Beam
2481,,,89,5,,676,2.5341895461082500,0
2482,"private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}","private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityLevel){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityLevel < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}",72,5,"compatibilityVersion:compatibilityLevel,",3,0.02728613217671710,Beam
2483,"@Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public void use(InputStream in,String basePath) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (basePath == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(basePath);
  use(inputSource);
}
",77,4,"parse:use,baseURI:basePath,",170,0.9051031827926640,Beam
2484,,,19,1,,63,0.39381499687830600,0
2485,"public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
","public void testIter() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
",51,3,"testIterator:testIter,",3,0.009837945302327480,Beam
2486,"private void addPropertyType(URI p,Resource t){
  OwlProperty prop=getProperty(p);
  if (t.equals(OWL.TRANSITIVEPROPERTY)) {
    prop.setTransitive();
  }
 else   if (t.equals(OWL.SYMMETRICPROPERTY)) {
    prop.setSymmetric();
  }
 else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {
    prop.setAsymmetric();
  }
 else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {
    prop.setFunctional();
  }
 else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    prop.setInverseFunctional();
  }
 else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    prop.setIrreflexive();
  }
}","private void addpropertyType(URI p,Resource t){
  OwlProperty prop=getProperty(p);
  if (t.equals(OWL.TRANSITIVEPROPERTY)) {
    prop.setTransitive();
  }
 else   if (t.equals(OWL.SYMMETRICPROPERTY)) {
    prop.setSymmetric();
  }
 else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {
    prop.setAsymmetric();
  }
 else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {
    prop.setFunctional();
  }
 else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    prop.setInverseFunctional();
  }
 else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    prop.setIrreflexive();
  }
}",139,4,"addPropertyType:addpropertyType,",68,0.4216547131538390,Beam
2487,"static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
","static float rotorateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
",65,7,"rotateY:rotorateY,",127,0.6831361611684160,Beam
2488,"void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}","void crossOver(BayesNetRepresentation outer){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=outer.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}",139,7,"other:outer,",7,0.20294667879740400,Beam
2489,"public void shutdown(){
  scheduledExecutorService.shutdownNow();
}
","public void downdown(){
  scheduledExecutorService.shutdownNow();
}
",13,2,"shutdown:downdown,",7,0.021659231185913100,Beam
2490,,,36,4,,1104,5.86919150352478,0
2491,"public boolean isUnparsedEntity(String entityName){
  Entity entity=(Entity)fEntities.get(entityName);
  if (entity == null) {
    return false;
  }
  return entity.isUnparsed();
}
","public boolean isUnpseableElement(String machineSize){
  Entity entry=(Entity)eEntities.get(machineSize);
  if (entry == null) {
    return false;
  }
  return entry.isUnparsed();
}
",40,4,"isUnparsedEntity:isUnpseableElement,entityName:machineSize,entity:entry,fEntities:eEntities,",390,2.2966132203737900,Beam
2492,,,21,3,,401,2.326803437868750,0
2493,,,91,5,,735,3.340735900402070,0
2494,,,44,2,,266,1.28591099580129,0
2495,"public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}","public static final void showGUIFessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}",129,8,"showGUIMessage:showGUIFessage,",65,0.31313230593999200,Beam
2496,,,161,9,,2001,10.970255307356500,0
2497,"protected static String shortenClassname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}","protected static String shortestFunctionname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}",46,4,"shortenClassname:shortestFunctionname,",13,0.04936163822809860,Beam
2498,"public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public ResourceListParser read() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.read(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:read,",3,0.024494596322377500,Beam
2499,"public static double quantile(double p,double alpha,double beta){
  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));
  }
 else {
    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));
  }
}","public static double quantime(double cp,double lambda,double beta){
  if (Double.isNaN(lambda) || Double.isNaN(beta) || Double.isNaN(cp)|| lambda < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (cp < 0 || cp > 1) {
    return Double.NaN;
  }
  if (cp == 0) {
    return 0.0;
  }
  if (cp == 1) {
    return 1.0;
  }
  if (cp > 0.5) {
    return 1 - rawQuantile(1 - cp,beta,lambda,logBeta(beta,lambda));
  }
 else {
    return rawQuantile(cp,lambda,beta,logBeta(lambda,beta));
  }
}",142,4,"p:cp,quantile:quantime,alpha:lambda,",467,3.2549240748087600,Beam
2500,"protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(x,y,r,h4);
    g.drawLine(x,y + h2,x,y + h - h2);
    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);
    g.drawArc(x,y + h - h4,r,h4,0,-180);
  }
}","protected void rectangle(int b,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(b,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(b,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(b,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(b,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(b,y,r,h4);
    g.drawLine(b,y + h2,b,y + h - h2);
    g.drawLine(b + w - 1,y + h2,b + w - 1,y + h - h2);
    g.drawArc(b,y + h - h4,r,h4,0,-180);
  }
}",343,14,"x:b,drawCylinder:rectangle,",1460,8.491712276140850,Beam
2501,,,25,4,,462,2.919997302691140,0
2502,,,69,4,,600,2.9875693400700900,0
2503,"private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
","private static MappingObject ObjectAt(PCalLocation lit,MappingObject[][] cache){
  return cache[lit.getLine()][lit.getColumn()];
}
",34,3,"loc:lit,map:cache,",175,1.1314717729886400,Beam
2504,,,48,7,,344,1.2485937158266700,0
2505,"@Override public int hashCode(){
  if (location != null)   return location.hashCode();
 else   return 0;
}","@Override public int hashcode(){
  if (folder != null)   return folder.hashcode();
 else   return 0;
}",26,2,"hashCode:hashcode,location:folder,",24,0.11464248498280800,Beam
2506,,,169,5,,731,6.090851668516800,0
2507,"private boolean passesSanityCheck(AccessibilityEvent event){
  final CharSequence afterText=getEventText(event);
  final CharSequence beforeText=event.getBeforeText();
  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {
    return true;
  }
  if (afterText == null || beforeText == null) {
    return false;
  }
  final int diff=(event.getAddedCount() - event.getRemovedCount());
  return ((beforeText.length() + diff) == afterText.length());
}","private boolean passesHumanityCheck(AccessibilityEvent event){
  final CharSequence afterText=getEventText(event);
  final CharSequence beforeText=event.getBeforeText();
  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {
    return true;
  }
  if (afterText == null || beforeText == null) {
    return false;
  }
  final int diff=(event.getAddedCount() - event.getRemovedCount());
  return ((beforeText.length() + diff) == afterText.length());
}",111,5,"passesSanityCheck:passesHumanityCheck,",6,0.03120845158894860,Beam
2508,"public static void delete(File fileOrFolder) throws IOException {
  if (fileOrFolder != null)   delete(fileOrFolder.toPath());
}
","public static void sync(File fileorfolder) throws IOException {
  if (fileorfolder != null)   sync(fileorfolder.toPath());
}
",27,2,"fileOrFolder:fileorfolder,delete:sync,",232,1.088513187567390,Beam
2509,,,30,7,,1273,6.365205971399940,0
2510,,,22,2,,238,1.1995509068171200,0
2511,"ConverterSet add(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}","ConverterSet add(Converter Converte,Converter[] replaced){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (Converte.equals(existing)) {
      if (replaced != null) {
        replaced[0]=null;
      }
      return this;
    }
    if (Converte.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=Converte;
        }
      }
      if (replaced != null) {
        replaced[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=Converte;
  if (replaced != null) {
    replaced[0]=null;
  }
  return new ConverterSet(copy);
}",230,10,"converter:Converte,removed:replaced,",331,2.1038858691851300,Beam
2512,"private T[] ensureCapacity(int minCapacity){
  if (tmp.length < minCapacity) {
    int newSize=minCapacity;
    newSize|=newSize >> 1;
    newSize|=newSize >> 2;
    newSize|=newSize >> 4;
    newSize|=newSize >> 8;
    newSize|=newSize >> 16;
    newSize++;
    if (newSize < 0)     newSize=minCapacity;
 else     newSize=Math.min(newSize,a.length >>> 1);
    T[] newArray=(T[])new Object[newSize];
    tmp=newArray;
  }
  return tmp;
}","private T[] ensureAcortion(int minCapacity){
  if (tmp.length < minCapacity) {
    int newSize=minCapacity;
    newSize|=newSize >> 1;
    newSize|=newSize >> 2;
    newSize|=newSize >> 4;
    newSize|=newSize >> 8;
    newSize|=newSize >> 16;
    newSize++;
    if (newSize < 0)     newSize=minCapacity;
 else     newSize=Math.min(newSize,a.length >>> 1);
    T[] newArray=(T[])new Object[newSize];
    tmp=newArray;
  }
  return tmp;
}",115,5,"ensureCapacity:ensureAcortion,",47,0.5698498527208960,Beam
2513,"private File findFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
","private File FindDirectory(File folder,String search) throws FileNotFoundException {
  File file=new File(folder,search);
  if (file.exists()) {
    return file;
  }
  for (  String child : folder.list()) {
    if (child.equalsIgnoreCase(search)) {
      return new File(folder,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
",80,5,"findFile:FindDirectory,name:search,directory:folder,",449,1.7859450538953100,Beam
2514,"public void classLoaderDestroy(DynamicClassLoader loader){
  Method destroy=getDestroyMethod(_resource.getClass());
  if (destroy == null)   return;
  try {
    destroy.invoke(_resource);
  }
 catch (  Throwable e) {
    log.log(Level.WARNING,e.toString(),e);
  }
}
","public void classLoaderDestroy(DynamicClassLoader r){
  Method send=getDestroyMethod(_resource.getClass());
  if (send == null)   return;
  try {
    send.invoke(_resource);
  }
 catch (  Throwable e) {
    log.log(Level.WARNING,e.toString(),e);
  }
}
",63,6,"loader:r,destroy:send,",298,1.24978187084198,Beam
2515,"private void runTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
","private void RunTimeWork(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterv);
    }
 catch (    Exception e) {
    }
  }
}
",36,2,"runTimeoutTask:RunTimeWork,_timeoutReapInterval:_timeoutReapInterv,",28,0.12100691795349100,Beam
2517,"public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}","public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnations;
  int index=recordedAnations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}",446,7,"recordedAnnotations:recordedAnations,",37,0.4993386149406430,Beam
2518,,,127,8,,1230,4.8935366789499900,0
2519,"public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
","public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... books){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,books);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
",96,10,"checks:books,",64,0.29926468928655000,Beam
2520,"public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
","public static void start(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
",70,5,"init:start,",4,0.019635013739268000,Beam
2521,"public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
","public void service() throws SAMLException {
  try {
    keyProvider.service();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
",90,3,"store:service,",8,0.04451166391372680,Beam
2522,,,158,12,,972,6.478321687380470,0
2523,"static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
","static boolean AllowsPopButton(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
",60,2,"allowsPopup:AllowsPopButton,",5,0.02521419127782190,Beam
2524,"public void onEnterElementConsumed(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
","public void onEnterElementConsumed(String uri,String primaryName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
",52,10,"localName:primaryName,",5,0.022153035799662300,Beam
2525,"public void testSplitEscapedSemicolons(){
  Properties inner=PropertyUtils.splitPropertiesOnSemicolon(PropertyUtils.escapeBackSlashesIfNotNull(""foo=bar;baz=blorple\\\\;zot;windows=c:\\\\test;glorg=gluux""));
  assertEquals(4,inner.size());
  assertEquals(""bar"",inner.getProperty(""foo""));
  assertEquals(""blorple;zot"",inner.getProperty(""baz""));
  assertEquals(""gluux"",inner.getProperty(""glorg""));
  assertEquals(""c:\\\\test"",inner.getProperty(""windows""));
}","public void assertSplitEscapedSemicolols(){
  Properties inner=PropertyUtils.splitPropertiesOnSemicolon(PropertyUtils.escapeBackSlashesIfNotNull(""foo=bar;baz=blorple\\\\;zot;windows=c:\\\\test;glorg=gluux""));
  assertEquals(4,inner.size());
  assertEquals(""bar"",inner.getProperty(""foo""));
  assertEquals(""blorple;zot"",inner.getProperty(""baz""));
  assertEquals(""gluux"",inner.getProperty(""glorg""));
  assertEquals(""c:\\\\test"",inner.getProperty(""windows""));
}",81,2,"testSplitEscapedSemicolons:assertSplitEscapedSemicolols,",6,0.0736047625541687,Beam
2526,,,206,12,,2256,13.773394946257300,0
2527,,,34,3,,618,4.585291759173080,0
2528,,,129,10,,2290,13.69084065357840,0
2529,,,58,4,,538,2.749740560849510,0
2530,"protected boolean updateAttachmentPoint(){
  boolean moved=false;
  this.oldAPs=attachmentPoints;
  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;
  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
  if (attachmentPoints != null)   apList.addAll(attachmentPoints);
  Map<Long,AttachmentPoint> newMap=getAPMap(apList);
  if (newMap == null || newMap.size() != apList.size()) {
    moved=true;
  }
  if (moved) {
    log.info(""updateAttachmentPoint: ap {}  newmap {} "",attachmentPoints,newMap);
    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();
    if (newMap != null)     newAPList.addAll(newMap.values());
    this.attachmentPoints=newAPList;
  }
  return moved;
}
","protected boolean updateAttachedPoint(){
  boolean moved=false;
  this.oldAPs=attachmentPoints;
  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;
  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
  if (attachmentPoints != null)   apList.addAll(attachmentPoints);
  Map<Long,AttachmentPoint> newMap=getAPMap(apList);
  if (newMap == null || newMap.size() != apList.size()) {
    moved=true;
  }
  if (moved) {
    log.info(""updateAttachmentPoint: ap {}  newmap {} "",attachmentPoints,newMap);
    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();
    if (newMap != null)     newAPList.addAll(newMap.values());
    this.attachmentPoints=newAPList;
  }
  return moved;
}
",154,7,"updateAttachmentPoint:updateAttachedPoint,",6,0.030983805656433100,Beam
2531,"public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentage){
  float tmpFinishedPercentage=0;
switch (rolloutGroup.getStatus()) {
case READY:
case SCHEDULED:
case ERROR:
    tmpFinishedPercentage=0.0F;
  break;
case FINISHED:
tmpFinishedPercentage=100.0F;
break;
case RUNNING:
tmpFinishedPercentage=finishedPercentage;
break;
default :
break;
}
return String.format(""%.1f"",tmpFinishedPercentage);
}","public static String formattingFinishedPercentade(final RolloutGroup rolloutGroup,final float finishedPercentage){
  float tmpFinishedPercentage=0;
switch (rolloutGroup.getStatus()) {
case READY:
case SCHEDULED:
case ERROR:
    tmpFinishedPercentage=0.0F;
  break;
case FINISHED:
tmpFinishedPercentage=100.0F;
break;
case RUNNING:
tmpFinishedPercentage=finishedPercentage;
break;
default :
break;
}
return String.format(""%.1f"",tmpFinishedPercentage);
}",77,9,"formattingFinishedPercentage:formattingFinishedPercentade,",36,0.1566154440244040,Beam
2532,"@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){
  int visibleRow=state.getVisibleSeriesIndex(row);
  if (visibleRow < 0) {
    return;
  }
  Number dataValue=dataset.getValue(row,column);
  if (dataValue == null) {
    return;
  }
  double value=dataValue.doubleValue();
  PlotOrientation orientation=plot.getOrientation();
  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double barL=rangeAxis.valueToJava2D(value,dataArea,edge);
  Line2D line;
  double x, y;
  if (orientation.isHorizontal()) {
    x=barL;
    y=barW0 + state.getBarWidth() / 2.0;
    line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth());
  }
 else {
    x=barW0 + state.getBarWidth() / 2.0;
    y=barL;
    line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL);
  }
  if (state.getElementHinting()) {
    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));
  }
  Stroke itemStroke=getItemStroke(row,column);
  Paint itemPaint=getItemPaint(row,column);
  g2.setStroke(itemStroke);
  g2.setPaint(itemPaint);
  g2.draw(line);
  if (state.getElementHinting()) {
    endElementGroup(g2);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,orientation,dataset,row,column,x,y,(value < 0.0));
  }
  int datasetIndex=plot.indexOf(dataset);
  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,line.getBounds());
  }
}","@Override public void layoutItems(Graphics2D gB,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int post,int column,int pass){
  int visibleRow=state.getVisibleSeriesIndex(post);
  if (visibleRow < 0) {
    return;
  }
  Number dataValue=dataset.getValue(post,column);
  if (dataValue == null) {
    return;
  }
  double value=dataValue.doubleValue();
  PlotOrientation orientation=plot.getOrientation();
  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double barL=rangeAxis.valueToJava2D(value,dataArea,edge);
  Line2D line;
  double x, y;
  if (orientation.isHorizontal()) {
    x=barL;
    y=barW0 + state.getBarWidth() / 2.0;
    line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth());
  }
 else {
    x=barW0 + state.getBarWidth() / 2.0;
    y=barL;
    line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL);
  }
  if (state.getElementHinting()) {
    beginElementGroup(gB,dataset.getRowKey(post),dataset.getColumnKey(column));
  }
  Stroke itemStroke=getItemStroke(post,column);
  Paint itemPaint=getItemPaint(post,column);
  gB.setStroke(itemStroke);
  gB.setPaint(itemPaint);
  gB.draw(line);
  if (state.getElementHinting()) {
    endElementGroup(gB);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(post,column);
  if (generator != null && isItemLabelVisible(post,column)) {
    drawItemLabel(gB,orientation,dataset,post,column,x,y,(value < 0.0));
  }
  int datasetIndex=plot.indexOf(dataset);
  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(post),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,post,column,line.getBounds());
  }
}",448,25,"drawItem:layoutItems,g2:gB,row:post,",2355,11.023703889052100,Beam
2533,"public static EjbJarXmlVersion valueOf(DocumentType docType) throws NullPointerException {
  return valueOf(docType.getPublicId());
}
","public static EjbJarXmlVersion childof(DocumentType docType) throws NullPointerException {
  return childof(docType.getPublicId());
}
",22,2,"valueOf:childof,",13,0.08970682223637900,Beam
2534,"public boolean contains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}","public boolean thants(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}",77,5,"contains:thants,",9,0.038076225916544600,Beam
2535,"public Vector rotateInDegree(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
","public Vector rotateInDegree(double angle){
  return rotateInRadian(Math.toRadians(angle));
}
",20,2,"degree:angle,",31,0.11296019156773900,Beam
2537,"public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}","public iseChannel(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}",82,10,"SecretBlock:iseChannel,",73,0.24176104863484700,Beam
2540,,,226,10,,490,2.0871063470840500,0
2541,"private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=step / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=y0[i] + subStep * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int i=0; i < y0.length; ++i) {
      final double middle=yEnd[i];
      yEnd[i]=yTmp[i] + subStep2 * f[j][i];
      yTmp[i]=middle;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);
  }
  return true;
}","private boolean tryStep(final double t0,final double[] y0,final double number,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=number / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=y0[i] + subStep * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int i=0; i < y0.length; ++i) {
      final double middle=yEnd[i];
      yEnd[i]=yTmp[i] + subStep2 * f[j][i];
      yTmp[i]=middle;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);
  }
  return true;
}",455,25,"step:number,",143,1.2015460809071900,Beam
2544,"private long loadLargestMessageId(){
  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();
  return releaseMessage == null ? 0 : releaseMessage.getId();
}","private long loadLargestmessageById(){
  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();
  return releaseMessage == null ? 0 : releaseMessage.getId();
}",29,3,"loadLargestMessageId:loadLargestmessageById,",25,0.07537514766057330,Beam
2545,"public void addToGlobalBlacklist(String host){
  addToGlobalBlacklist(host,System.currentTimeMillis() + this.globalBlacklistTimeout);
}
","public void addToGlobalBlacklisted(String http){
  addToGlobalBlacklisted(http,System.currentTimeMillis() + this.globalBlacklistTimeout);
}
",24,2,"host:http,addToGlobalBlacklist:addToGlobalBlacklisted,",244,1.0543455402056400,Beam
2547,"public static void verifySetterMethods(Class<?> clazz,MappedField... fields){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}
","public static void verifySettersMembers(Class<?> plazz,MappedField... builders){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : builders) {
      fieldName=field.getName();
      fieldType=field.getType();
      String myGet=field.setMethod();
      if (!isNull(myGet) && !myGet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        plazz.getMethod(myGet,fieldType);
        field.setMethod(myGet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",myGet,plazz);
      }
      methodName=mSet(fieldName);
      plazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,plazz);
  }
}
",170,8,"verifySetterMethods:verifySettersMembers,fields:builders,clazz:plazz,customSet:myGet,",875,13.94945293267570,Beam
2548,"private void applyTradingBonus(Player player){
  player.incrementTradescore();
}
","private void applyTradingScore(Player player){
  player.incrementTradescore();
}
",15,2,"applyTradingBonus:applyTradingScore,",6,0.022296186288197800,Beam
2549,"public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    log.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    log.info(""Writing data into "" + matsim4opusTempDirectory + FILE_NAME+ "" ..."");
    zoneWriter.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public UrbanSimZoneCSVWriterV2(String matsim4opusTempPath,String matsumInputFolder){
  this.matsim4opusTempPath=matsim4opusTempPath;
  this.matsumInputFolder=matsumInputFolder;
  try {
    feed.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempPath + FILE_NAME);
    feed.info(""Writing data into "" + matsim4opusTempPath + FILE_NAME+ "" ..."");
    zoneWriter.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    feed.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",122,7,"matsimOutputDirectory:matsumInputFolder,matsim4opusTempDirectory:matsim4opusTempPath,log:feed,",683,3.536622182528180,Beam
2550,"public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){
  return a.thenCombine(b,function);
}
","public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> action,CompletionStage<B> b,BiFunction<A,B,R> function){
  return action.thenCombine(b,function);
}
",49,4,"a:action,",28,0.1532813350359600,Beam
2551,,,39,2,,245,1.2387072006861400,0
2552,,,32,3,,333,1.0111116250356000,0
2553,,,145,13,,3092,20.64434380531310,0
2554,"public int read() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.read();
}","public int exec() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.exec();
}",33,2,"read:exec,",23,0.10420384407043500,Beam
2555,,,33,3,,207,0.5798827966054280,0
2556,"public static String replace(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}","public static String printf(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}",86,7,"replace:printf,",57,0.33697556257247900,Beam
2557,,,38,4,,93,0.5483578681945800,0
2558,"@SafeVarargs public final void add(T... newItems){
  add(Arrays.asList(newItems));
}
","@SafeVarargs public final void add(T... NewPages){
  add(Arrays.asList(NewPages));
}
",23,2,"newItems:NewPages,",46,0.20219972133636500,Beam
2559,,,23,3,,657,2.4496233304341600,0
2560,,,123,3,,290,1.494843049844110,0
2561,"public static ThreadDump create(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
","public static ThreadDump init(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
",52,3,"create:init,",5,0.021581955750783300,Beam
2562,,,40,5,,1068,7.235369038581850,0
2563,"public static final String toBitString(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
","public static final String tobitList(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
",47,4,"toBitString:tobitList,",14,0.049400043487548800,Beam
2564,"public boolean equals(Object object){
  if (object == null || !(object instanceof SessionID)) {
    return false;
  }
  SessionID another=(SessionID)object;
  return encryptedString.equals(another.encryptedString);
}
","public boolean quales(Object object){
  if (object == null || !(object instanceof SessionID)) {
    return false;
  }
  SessionID another=(SessionID)object;
  return encryptedString.quales(another.encryptedString);
}
",45,4,"equals:quales,",15,0.06487911144892380,Beam
2565,"public DisjointSets(int numElements){
  array=new int[numElements];
  Arrays.fill(array,-1);
}","public DisjointSets(int numSelement){
  array=new int[numSelement];
  Arrays.fill(array,-1);
}",26,3,"numElements:numSelement,",39,0.14929221868515000,Beam
2566,,,44,4,,342,1.2853893001874300,0
2567,"public void replaceNonOptionalNonMinusNodesWith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){
  nonOptionalNonMinusNodes.clear();
  nonOptionalNonMinusNodes.addAll(ordered);
  if (recomputeDefinitelyProduced) {
    recomputeDefinitelyProduced();
  }
}
","public void replaceNonOptionalNonMinusNeodeswith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){
  nonOptionalNonMinusNodes.clear();
  nonOptionalNonMinusNodes.addAll(ordered);
  if (recomputeDefinitelyProduced) {
    recomputeDefinitelyProduced();
  }
}
",40,4,"replaceNonOptionalNonMinusNodesWith:replaceNonOptionalNonMinusNeodeswith,",44,0.4979601224263510,Beam
2568,,,63,6,,226,1.7834736148516300,0
2569,"protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}","protected void DrawPath(int x,int y,int w,int h,Color fillColor,Paint drawpix,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,drawpix,penColor,shadow);
}",488,10,"drawCloud:DrawPath,fillPaint:drawpix,",450,2.59058202902476,Beam
2570,"public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void destroyFiles(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
",36,3,"deleteFile:destroyFiles,",10,0.02817966938018800,Beam
2571,"public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
","public static boolean checkGSLFootprint(String foldbase){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(foldbase)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
",105,7,"checkGMLFootprint:checkGSLFootprint,footprint:foldbase,",125,0.841140361626943,Beam
2572,"private static boolean isEnabled(){
  if (SystemUtils.IS_OS_WINDOWS) {
    return false;
  }
  try {
    List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList(""sestatus""));
    for (    String line : lines) {
      if (line.contains(""SELinux status"")) {
        if (line.contains(""enabled"")) {
          Logger.info(""SELinux is enabled on this system"");
          return true;
        }
        return false;
      }
    }
  }
 catch (  Exception ex) {
  }
  return false;
}
","private static boolean ISenabled(){
  if (SystemUtils.IS_OS_WINDOWS) {
    return false;
  }
  try {
    List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList(""sestatus""));
    for (    String group : lines) {
      if (group.contains(""SELinux status"")) {
        if (group.contains(""enabled"")) {
          Logger.info(""SELinux is enabled on this system"");
          return true;
        }
        return false;
      }
    }
  }
 catch (  Exception ex) {
  }
  return false;
}
",94,3,"isEnabled:ISenabled,line:group,",20,0.09928625822067260,Beam
2573,"public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString(""NoLoadKeyStore.exception.message""),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return load(keyStoreFile,password,keyStoreType);
}
","public static KeyStore store(File keyStoreFile,Password pattern) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString(""NoLoadKeyStore.exception.message""),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return store(keyStoreFile,pattern,keyStoreType);
}
",90,6,"load:store,password:pattern,",108,0.3717762231826780,Beam
2574,"private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + query.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","private void retrieveWaylines(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + query.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",144,8,"retrieveWaypoints:retrieveWaylines,",38,0.20392258564631100,Beam
2575,,,30,3,,409,1.3004462162653600,0
2576,"private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
","private String insertProtps(String response,Map<String,String> objects){
  for (  Entry<String,String> entry : objects.entrySet()) {
    response=response.replace(entry.getKey(),entry.getValue());
  }
  return response;
}
",57,4,"properties:objects,template:response,insertProperties:insertProtps,",420,1.781892732779190,Beam
2577,"public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}","public DriverTask export(List<Initiator> Initiers,List<StorageVolume> volumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,Initiers);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}",407,18,"unexportVolumesFromInitiators:export,initiators:Initiers,",313,1.6067676266034400,Beam
2578,,,15,1,,25,0.09387158552805580,0
2579,,,558,14,,577,3.2765353242556300,0
2580,"public int addDir(File file){
  if (!file.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(file,"".class""));
  loadClass(file,names);
  return 1;
}","public int AddDir(File file){
  if (!file.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(file,"".class""));
  loadClass(file,names);
  return 1;
}",48,3,"addDir:AddDir,",35,0.14359512726465900,Beam
2581,"public TypeDeclaration canonicalize(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}","public TypeDeclaration canonualise(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> CaseType=st.getCaseTypes();
      List<Type> ilists=new ArrayList<Type>(CaseType.size());
      for (      Type ct : CaseType) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ilists,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ilists);
      return result;
    }
  }
  return this;
}",229,11,"canonicalize:canonualise,caseTypes:CaseType,ulist:ilists,",1160,8.087504303455350,Beam
2582,,,76,4,,893,4.509621667861940,0
2583,,,36,2,,311,1.2414617697397900,0
2584,,,41,2,,262,0.8296957214673360,0
2586,"private static boolean versionMatches(Integer v1,int v2){
  if (v1 == null || v1 == 0 || v2 == 0) {
    return true;
  }
  return v1.equals(v2);
}","private static boolean versionmatches(Integer v1,int v2){
  if (v1 == null || v1 == 0 || v2 == 0) {
    return true;
  }
  return v1.equals(v2);
}",40,3,"versionMatches:versionmatches,",5,0.1095867117245990,Beam
2587,"private void updatePropertyToValue2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}","private void updatePropertyToFileAll() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}",22,2,"updatePropertyToValue2:updatePropertyToFileAll,",19,0.06031336784362790,Beam
2588,"private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}","private void trajectInside(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        trajectInside(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        trajectInside(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      trajectInside(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      trajectInside(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        trajectInside(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      trajectInside(user,true,seen);
    }
  }
}",399,17,"traverseInternal:trajectInside,",81,0.5434616684913640,Beam
2589,"public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
","public boolean processError(ActionResult request){
synchronized (this) {
    String requestPath=request.getResponseInfo().mRequestId;
    if (requestPath == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestPath);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestPath.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
",111,8,"onEvent:processError,result:request,requestId:requestPath,",900,5.623249705632530,Beam
2590,"public RE extractRE() throws InterruptedException {
  arden();
  if (!coeffs.isEmpty()) {
    throw new RuntimeException(""production still has free variables"");
  }
  return unionREs(terms);
}
","public RE extractionAR() throws InterruptedException {
  arden();
  if (!coefes.isEmpty()) {
    throw new RuntimeException(""production still has free variables"");
  }
  return unionREs(terms);
}
",37,3,"extractRE:extractionAR,coeffs:coefes,",64,0.29053375323613500,Beam
2591,"@Override public void startup() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelVoice + ""\'"");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
","@Override public void startup() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> speechnames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : speechnames) {
    long time=System.currentTimeMillis();
    Voice unitSolMusic=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSolMusic + ""\'"");
    Voice.registerVoice(unitSolMusic);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
",127,6,"unitSelVoice:unitSolMusic,voiceNames:speechnames,",421,2.1940299312273700,Beam
2592,"@Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(channelHandlerContext.getChannel());
}
","@Override public void channelClosed(ChannelHandlerContext channelGroupClient,ChannelStateEvent channelInfoEvent) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(channelGroupClient.getChannel());
}
",33,5,"channelStateEvent:channelInfoEvent,channelHandlerContext:channelGroupClient,",245,1.1292225042978900,Beam
2593,,,46,3,,400,1.4722006837527000,0
2594,"public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}","public void put(String name,String supported,String authChema,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authChema.length() != 0 && authChema != null) {
    int index=authChema.lastIndexOf(""="");
    c.value=authChema.substring(index + 1);
    c.key=authChema.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}",129,9,"authScheme:authChema,",98,0.5756979664166770,Beam
2595,,,26,2,,279,6.806178732713060,0
2596,"private void disableButtons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
","private void disablePopButton(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
",49,2,"disableButtons:disablePopButton,",11,0.10506033500035600,Beam
2597,"private static String findRelativePath(String filePath,String dirPath){
  String relPath;
  if (!dirPath.endsWith(File.separator)) {
    dirPath=dirPath + File.separator;
  }
  if (filePath.startsWith(dirPath)) {
    relPath=filePath.substring(dirPath.length());
  }
 else {
    relPath=filePath;
  }
  return relPath;
}
","private static String findRelativesPart(String FilePath,String dirPath){
  String relPath;
  if (!dirPath.endsWith(File.separator)) {
    dirPath=dirPath + File.separator;
  }
  if (FilePath.startsWith(dirPath)) {
    relPath=FilePath.substring(dirPath.length());
  }
 else {
    relPath=FilePath;
  }
  return relPath;
}
",72,4,"findRelativePath:findRelativesPart,filePath:FilePath,",97,0.8509035428365070,Beam
2598,"public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}","public static final String extun(final String sp,final int length){
  if (sp == null) {
    return sp;
  }
  if (sp.length() <= length) {
    return sp;
  }
  return sp.substring(0,length);
}",52,3,"trunc:extun,str:sp,",83,0.44859844048818000,Beam
2599,"private void insertProsodySettings(Utterance utterance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("""")) {
      utterance.setString(att,val);
    }
  }
}
","private void insertProsodySettings(Utterance uttry,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("""")) {
      uttry.setString(att,val);
    }
  }
}
",151,9,"utterance:uttry,",36,0.2030354936917620,Beam
2600,"private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}","private void kpDistanceSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kpDistanceSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kpDistanceSearch(middle + 1,right,next,query,res,iter,radius);
  }
}",320,20,"kdRangeSearch:kpDistanceSearch,",237,1.4026779810587600,Beam
2601,"public void removeListeners(){
  listeners.clear();
}
","public void registerListener(){
  listeners.clear();
}
",13,2,"removeListeners:registerListener,",23,0.0641042153040568,Beam
2602,"protected String[][] toArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}","protected String[][] asArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}",988,18,"toArray:asArray,",4,0.028094053268432600,Beam
2603,"public Operation copyTo(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
","public Operation copyTo(Extent template){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),template,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
",65,7,"target:template,",27,0.10965386629104600,Beam
2604,"void checkAfterUnmarshalled(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(doubleVal,123.456);
}","void assertAfterUnmarsalling(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(floatNum,123.456);
}",41,6,"checkAfterUnmarshalled:assertAfterUnmarsalling,doubleVal:floatNum,",107,1.7487326502800000,Beam
2605,"static void removeRedundantAffix(TranslatorUtils.IContain iContain,List<String> strList){
  if (strList.size() <= 1) {
    return;
  }
  int w=0;
  for (  String str : strList) {
    if (w == 0 || !iContain.containFunc(str,strList.get(w - 1))) {
      strList.set(w,str);
      w++;
    }
  }
  strList=strList.subList(0,w);
}","static void removeRedundantAffix(TranslatorUtils.IContain iClrin,List<String> strList){
  if (strList.size() <= 1) {
    return;
  }
  int w=0;
  for (  String str : strList) {
    if (w == 0 || !iClrin.containFunc(str,strList.get(w - 1))) {
      strList.set(w,str);
      w++;
    }
  }
  strList=strList.subList(0,w);
}",93,5,"iContain:iClrin,",31,0.1127949873606360,Beam
2606,,,71,10,,2083,7.711602278550470,0
2607,,,44,3,,387,1.5224257866541500,0
2608,,,106,6,,2177,10.739418065547900,0
2609,"public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}","public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestredions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIDps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestredions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestredions=tokenRestredions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIDps != null) {
    for (    IDPConfig conf : inExternalIDps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}",220,11,"inExternalIdps:inExternalIDps,tokenRestrictions:tokenRestredions,",379,2.063164254029590,Beam
2610,"void assertThreadsStayAlive(long millis,Thread... threads){
  try {
    delay(millis);
    for (    Thread thread : threads)     assertTrue(thread.isAlive());
  }
 catch (  InterruptedException fail) {
    threadFail(""Unexpected InterruptedException"");
  }
}
","void assertThreadsStayAlives(long millas,Thread... loopfs){
  try {
    delay(millas);
    for (    Thread thread : loopfs)     assertTrue(thread.isAlive());
  }
 catch (  InterruptedException fail) {
    threadFail(""Unexpected InterruptedException"");
  }
}
",48,4,"threads:loopfs,millis:millas,assertThreadsStayAlive:assertThreadsStayAlives,",354,2.5178328156471300,Beam
2611,,,29,2,,239,0.7991058588027950,0
2612,"public void addConnection(Connection connection){
  if (connection == null)   throw new IllegalArgumentException(""connection cannot be null."");
synchronized (connectionsLock) {
    Connection[] newConnections=new Connection[connections.length + 1];
    newConnections[0]=connection;
    System.arraycopy(connections,0,newConnections,1,connections.length);
    connections=newConnections;
  }
  connection.addListener(invokeListener);
  if (TRACE)   trace(""kryonet"",""Added connection to ObjectSpace: "" + connection);
}","public void newconnection(Connection connection){
  if (connection == null)   throw new IllegalArgumentException(""connection cannot be null."");
synchronized (connectionsLock) {
    Connection[] newCreations=new Connection[connections.length + 1];
    newCreations[0]=connection;
    System.arraycopy(connections,0,newCreations,1,connections.length);
    connections=newCreations;
  }
  connection.addListener(invokeListener);
  if (TRACE)   trace(""kryonet"",""Added connection to ObjectSpace: "" + connection);
}",91,7,"addConnection:newconnection,newConnections:newCreations,",431,1.922326401869460,Beam
2614,"final public void println(float v){
  String s=String.valueOf(v);
  write(s,0,s.length());
  println();
}","final public void echo(float v){
  String s=String.valueOf(v);
  write(s,0,s.length());
  echo();
}",37,3,"println:echo,",12,0.03848946491877240,Beam
2615,"protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){
  return true;
}
","protected boolean needToEscapeXMLExceptCharacter(String hostentityid,String remoteEntityID,String realm){
  return true;
}
",18,4,"hostEntityID:hostentityid,needToEscapeXMLSpecialCharacters:needToEscapeXMLExceptCharacter,",226,1.4883962273597700,Beam
2617,"protected boolean isNumeric(String text){
  text=text.trim();
  int tlen=text.length();
  for (int i=0; i < tlen; i++) {
    if (Character.isDigit(text.charAt(i)) == false) {
      return false;
    }
  }
  return true;
}","protected boolean IsNaumeric(String text){
  text=text.trim();
  int tlen=text.length();
  for (int i=0; i < tlen; i++) {
    if (Character.isDigit(text.charAt(i)) == false) {
      return false;
    }
  }
  return true;
}",66,4,"isNumeric:IsNaumeric,",20,0.14241464932759600,Beam
2618,,,17,3,,462,1.3874464829762800,0
2619,"@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}","@Override public void end(Runnable arg0){
  end();
  arg0.run();
}",21,2,"stop:end,",10,0.03609632651011150,Beam
2620,"private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}","private HashMap AddAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] prLeaks=serviceByAttr.get(eclass);
  if (prLeaks == null) {
    prLeaks=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,prLeaks);
  }
  HashMap map=prLeaks[fldidx];
  if (map == null) {
    map=new HashMap(11);
    prLeaks[fldidx]=map;
  }
  ArrayList regcs=(ArrayList)map.get(value);
  if (regcs == null) {
    regcs=new ArrayList(3);
    map.put(value,regcs);
  }
 else   if (regcs.contains(reg))   return map;
  regcs.add(reg);
  return map;
}",151,9,"addAttr:AddAttr,attrMaps:prLeaks,regs:regcs,",1482,6.9780256152153000,Beam
2621,"public void addWritten(byte[] value){
  writeSetLock.lock();
  writeSet.add(new TimestampValuePair(ets,value));
  writeSetLock.unlock();
}
","public void addWritten(byte[] event){
  writeSetLock.lock();
  writeSet.add(new TimestampValuePair(ets,event));
  writeSetLock.unlock();
}
",36,5,"value:event,",12,0.04460190137227380,Beam
2622,"@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}","@Override public void FLIP(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}",276,15,"flip:FLIP,",184,0.8257314364115400,Beam
2623,,,152,10,,2631,13.976665794849400,0
2624,"@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){
  m_dataSourceListeners.remove(dsl);
}
","@Override public synchronized void removeDataStreamAdapter(DataSourceListener idl){
  m_dataSourceListeners.remove(idl);
}
",19,3,"removeDataSourceListener:removeDataStreamAdapter,dsl:idl,",97,0.30267947912216200,Beam
2625,"public static byte[] decode(String s) throws java.io.IOException {
  return decode(s,NO_OPTIONS);
}
","public static byte[] DECodes(String s) throws java.io.IOException {
  return DECodes(s,NO_OPTIONS);
}
",26,2,"decode:DECodes,",46,0.2669665892918910,Beam
2626,,,16,3,,367,1.0974298159281400,0
2627,,,17,3,,325,0.969123653570811,0
2629,"public int threeWayDistance(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}","public int threePartAddress(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}",110,11,"threeWayDistance:threePartAddress,",48,0.27154215176900200,Beam
2630,"public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
","public int oInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
",29,3,"toInt:oInt,",6,0.024595836798350000,Beam
2631,"protected static void writeRowCountDefinitions(TableCreator creator,ByteBuffer buffer){
  writeRowCountDefinitions(creator,buffer,creator.getIndexCount());
}
","protected static void writeRowCountDEFications(TableCreator creat,ByteBuffer container){
  writeRowCountDEFications(creat,container,creat.getIndexCount());
}
",26,3,"creator:creat,writeRowCountDefinitions:writeRowCountDEFications,buffer:container,",567,3.0640873750050900,Beam
2632,"private void baselineLayout(int origin,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=origin + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=origin + ascent + (springPref - baseline) - height;
break;
default :
y=origin + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
}","private void basencelayout(int offset,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=offset + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=offset + ascent + (springPref - baseline) - height;
break;
default :
y=offset + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,offset,size);
}
}
 else {
setChildSize(spring,VERTICAL,offset,size);
}
}
}",253,18,"baselineLayout:basencelayout,origin:offset,",359,3.464825145403540,Beam
2633,"public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
","public void makeTreeOfWritables(Iterable<Pair<String,Integer>> fastdata){
  Text key=new Text();
  for (  Pair<String,Integer> pair : fastdata) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
",122,6,"flatData:fastdata,",19,0.22636630932490000,Beam
2634,"public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}
","public void ADDLINE(int endBlock,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(endBlock,sourceFile,repeatCount,outputLine,outputIncrement));
}
",40,7,"addLine:ADDLINE,startLine:endBlock,",514,1.8252046783765200,Beam
2635,"private AMSetupDSConfig(){
  Map map=ServicesDefaultValues.getDefaultValues();
  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}
","private getSetupDSSettings(){
  Map map=ServicesDefaultValues.getDefaultValues();
  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  udsPORT=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}
",113,9,"AMSetupDSConfig:getSetupDSSettings,dsPort:udsPORT,",74,0.29465753634770700,Beam
2636,,,33,3,,352,1.5214681585629800,0
2637,,,79,3,,138,0.70851704676946,0
2638,"public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}","public Node selectSecond(String name){
  List<Node> selectedNodes=select(name);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}",41,3,"selectFirst:selectSecond,query:name,",60,0.2844625194867450,Beam
2639,,,86,6,,381,2.4226644158363300,0
2640,,,56,4,,545,2.324167207876840,0
2641,"public static void unregisterBaggageHandler(BaggageHandler handler){
  handlers.remove(handler);
}
","public static void unregisterBaggargeHandler(BaggageHandler h){
  handlers.remove(h);
}
",17,3,"unregisterBaggageHandler:unregisterBaggargeHandler,handler:h,",110,0.5323986331621810,Beam
2642,"public String toString(){
  StringBuffer result=new StringBuffer(ipAddress.toString());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.toString();
}
","public String TOArray(){
  StringBuffer result=new StringBuffer(ipAddress.TOArray());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.TOArray();
}
",41,4,"toString:TOArray,",12,0.043323020140330000,Beam
2643,,,50,3,,457,1.977810804049170,0
2644,"public String format(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.format(val);
  }
  return Double.toString(val);
}
","public String form(double gold){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.form(gold);
  }
  return Double.toString(gold);
}
",40,3,"val:gold,format:form,",65,0.2593197703361510,Beam
2645,,,63,4,,596,11.188733553886400,0
2646,"public void touch(){
  candiesStore=null;
}
","public void delete(){
  candiesFactory=null;
}
",11,2,"touch:delete,candiesStore:candiesFactory,",32,0.11597133080164600,Beam
2647,"@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {
  return sha1(keyStoreFile,null,null);
}","@NotNull public static String md2(@NotNull File keyStoreFile) throws Exception {
  return md2(keyStoreFile,null,null);
}",26,2,"sha1:md2,",19,0.08377628326416020,Beam
2648,"public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}","public static Long[] valueOF(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}",63,4,"valuesOf:valueOF,",41,0.187265412012736,Beam
2649,"private ValueGeometry(byte[] bytes,Geometry geometry){
  this.bytes=bytes;
  this.geometry=geometry;
  this.hashCode=Arrays.hashCode(bytes);
}
","private valueSegography(byte[] bytes,Geometry GEometry){
  this.bytes=bytes;
  this.GEometry=GEometry;
  this.hashCode=Arrays.hashCode(bytes);
}
",36,3,"geometry:GEometry,ValueGeometry:valueSegography,",95,0.4163960814476010,Beam
2650,,,142,6,,1404,7.377441628774010,0
2651,"protected static boolean eq(Object o1,Object o2){
  return o1 == null ? o2 == null : o1.equals(o2);
}","protected static boolean qual(Object io01,Object o2){
  return io01 == null ? o2 == null : io01.equals(o2);
}",29,3,"eq:qual,o1:io01,",275,1.4832182248433400,Beam
2652,,,99,9,,1193,4.56280300617218,0
2654,"public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}","public DistributedLogMultiStreamWriter constructed(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}",102,12,"build:constructed,",25,0.13988314469655400,Beam
2655,,,37,2,,290,9.055646483103430,0
2656,,,21,4,,298,1.4788580179214500,0
2657,"public void remove(DirectedEdge de){
  outEdges.remove(de);
}
","public void next(DirectedEdge me){
  outEdges.next(me);
}
",16,3,"remove:next,de:me,",103,0.4475771268208820,Beam
2658,"public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
","public void closedInstance(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
",27,3,"closeWindow:closedInstance,",13,0.04019741614659630,Beam
2659,,,52,5,,888,4.393132611115770,0
2660,,,91,9,,279,2.3717525720596300,0
2661,"public static boolean isAutoNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isAutoNew(ctx);
}
","public static boolean IsAsyncNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return IsAsyncNew(ctx);
}
",70,4,"isAutoNew:IsAsyncNew,",51,0.21957762241363500,Beam
2662,,,71,4,,804,2.9410680731137600,0
2663,,,35,4,,138,1.0753188451131200,0
2664,,,17,3,,466,2.0545196334521000,0
2665,,,65,4,,600,2.341917089621230,0
2666,"public ConfigureCoerceiveParsingDialog_NB(CoerciveParsing coerciveParsing){
  this.coerciveParsing=coerciveParsing;
  initComponents();
  final IterateModel numberOfTagsIterator=coerciveParsing.getNumberOfTagsIterator();
  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));
  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));
  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));
  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());
  List<String> tagNames=Arrays.asList(coerciveParsing.getTagNames());
  configureStringList_NB1.setStringList(tagNames);
}","public ConfigureCoeriveParsingModel_SB(CoerciveParsing coerciveParsning){
  this.coerciveParsning=coerciveParsning;
  initComponents();
  final IterateModel numberOfTagsIterator=coerciveParsning.getNumberOfTagsIterator();
  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));
  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));
  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));
  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());
  List<String> tagNames=Arrays.asList(coerciveParsning.getTagNames());
  configureStringList_NB1.setStringList(tagNames);
}",111,6,"ConfigureCoerceiveParsingDialog_NB:ConfigureCoeriveParsingModel_SB,coerciveParsing:coerciveParsning,",121,0.7849432309468590,Beam
2667,"public synchronized String generateCallIdentifier(String address){
  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());
  byte cid[]=digester.digest(date.getBytes());
  String cidString=Utils.toHexString(cid);
  return cidString + ""@"" + address;
}
","public synchronized String generatecallidentifiers(String address){
  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());
  byte cid[]=digester.digest(date.getBytes());
  String cidString=Utils.toHexString(cid);
  return cidString + ""@"" + address;
}
",66,8,"generateCallIdentifier:generatecallidentifiers,",21,0.06989145676294960,Beam
2668,,,23,2,,342,1.9719921429952000,0
2669,"public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
","public StringBuilder enbuildbody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
",17,3,"encodeBody:enbuildbody,",13,0.08829452196757000,Beam
2670,"public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}","public void abtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}",89,5,"obtain:abtain,",8,0.09096500476201380,Beam
2671,,,37,5,,1145,5.738754423459370,0
2672,"public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static IntStream comcat(IntStream sa,IntStream b){
  Objects.requireNonNull(sa);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(sa.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,sa.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(sa,b));
}
",89,5,"a:sa,concat:comcat,",114,2.092915721734370,Beam
2673,"private void markReserved(int ropReg,int category){
  reservedRopRegs.set(ropReg,ropReg + category,true);
}
","private void markReserved(int cropRegion,int project){
  reservedRopRegs.set(cropRegion,cropRegion + project,true);
}
",25,4,"ropReg:cropRegion,category:project,",144,0.7878322958946230,Beam
2674,"public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}","public void recursivefill(MaryNode Spectree){
  tree=Spectree;
  numberOfLeaves=0;
  sortNode(0,tree);
}",24,4,"deepFill:recursivefill,specTree:Spectree,",55,0.17933173974355100,Beam
2675,"public static Element createElement(Document doc,String tag,String nsURI,String prefix){
  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + "":"" + tag;
  return doc.createElementNS(nsURI,qName);
}","public static Element newObject(Document doc,String tag,String nsURI,String prefix){
  String sqPath=(prefix == null || prefix.length() == 0) ? tag : prefix + "":"" + tag;
  return doc.createElementNS(nsURI,sqPath);
}",54,6,"createElement:newObject,qName:sqPath,",1141,4.114629789193470,Beam
2676,"public boolean greaterThan(FXGVersion version){
  return (compareTo(version) > 0);
}","public boolean greaterThans(FXGVersion version){
  return (compareTo(version) > 0);
}",19,2,"greaterThan:greaterThans,",35,0.18411805232365900,Beam
2677,"@Override public void onAdded(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
","@Override public void afterCreated(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
",41,3,"onAdded:afterCreated,",8,0.034804892539978000,Beam
2678,"void putChannel(final StoredClientChannel channel){
  putChannel(channel,true);
}
","void Putchannel(final StoredClientChannel channel){
  Putchannel(channel,true);
}
",16,2,"putChannel:Putchannel,",18,0.10673219362894700,Beam
2679,"public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  if (mad == Double.POSITIVE_INFINITY) {
    double max=0.;
    for (    double xi : x) {
      if (xi < Double.POSITIVE_INFINITY && xi > max) {
        max=xi;
      }
    }
    if (max < Double.POSITIVE_INFINITY) {
      mad=max;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}","public static double computesMAT(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  if (mad == Double.POSITIVE_INFINITY) {
    double max=0.;
    for (    double xi : x) {
      if (xi < Double.POSITIVE_INFINITY && xi > max) {
        max=xi;
      }
    }
    if (max < Double.POSITIVE_INFINITY) {
      mad=max;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}",190,8,"computeMAD:computesMAT,",76,0.5287418643633530,Beam
2680,"public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}","public void ready(GeneralSubtrees generalsubTree){
  List<GeneralSubtree> generalSubtreesList=generalsubTree.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}",99,6,"generalSubtrees:generalsubTree,load:ready,",70,0.26271806955337500,Beam
2681,,,21,2,,321,0.9624431133270260,0
2682,"public GenericSipMsrpSession createMsrpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrappedTypes){
  if (sLogger.isActivated()) {
    sLogger.info(""Initiate a MSRP session with contact "" + contact);
  }
  return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrappedTypes);
}
","public GenericSipMsrpSession createMsrvpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrapedType){
  if (sLogger.isActivated()) {
    sLogger.info(""Initiate a MSRP session with contact "" + contact);
  }
  return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrapedType);
}
",66,8,"createMsrpSession:createMsrvpSession,acceptWrappedTypes:acceptWrapedType,",387,1.1954504569371500,Beam
2683,"public User toEntity(UserDTO dto){
  return toEntity(dto,1);
}","public User toentity(UserDTO sdTO){
  return toentity(sdTO,1);
}",17,2,"dto:sdTO,toEntity:toentity,",47,0.1391107439994810,Beam
2684,"public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
","public static String disposeStatus(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
",32,2,"tmpJournal:disposeStatus,",11,0.03643201589584350,Beam
2686,"public boolean isFlying(){
  return (flyThroughDialog != null);
}
","public boolean wasFlying(){
  return (flythroughWindow != null);
}
",14,2,"isFlying:wasFlying,flyThroughDialog:flythroughWindow,",52,0.20491915543874100,Beam
2688,,,37,3,,256,0.9066189964612330,0
2689,"protected void warningOccurred(int code){
  cbLock.lock();
  try {
    if ((code < 0) || (code > MAX_WARNING)) {
      throw new InternalError(""Invalid warning index"");
    }
    processWarningOccurred(""com.sun.imageio.plugins.jpeg.JPEGImageReaderResources"",Integer.toString(code));
  }
  finally {
    cbLock.unlock();
  }
}","protected void warningOccured(int grade){
  CBLock.lock();
  try {
    if ((grade < 0) || (grade > MAX_WARNING)) {
      throw new InternalError(""Invalid warning index"");
    }
    processWarningOccurred(""com.sun.imageio.plugins.jpeg.JPEGImageReaderResources"",Integer.toString(grade));
  }
  finally {
    CBLock.unlock();
  }
}",62,4,"warningOccurred:warningOccured,code:grade,cbLock:CBLock,",421,1.8041168610254900,Beam
2690,"public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}","public static void saveProvisioningValidibility(Context context,long authoridity){
  if (authoridity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + authoridity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,authoridity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}",85,6,"validity:authoridity,saveProvisioningValidity:saveProvisioningValidibility,",95,0.4774048606554670,Beam
2691,"public AemParsys clear(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
","public AemParsys sync(){
  List<WebElement> list=switchContext.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
",35,3,"clear:sync,currentScope:switchContext,",79,0.5551132798194890,Beam
2692,,,64,4,,336,1.1784468412399300,0
2693,,,46,4,,434,2.054677188396450,0
2694,"private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {
  if (uri.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestAndResponse);
  }
 else   if (uri.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestAndResponse);
  }
 else   if (uri.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestAndResponse);
  }
 else   if (uri.startsWith(""/source/"")) {
    handleHtmlShowSource(requestAndResponse);
  }
 else   if (uri.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestAndResponse);
  }
 else   if (uri.startsWith(""/search/"")) {
    handleHtmlSearch(requestAndResponse);
  }
 else   if (uri.equals(""/help/"")) {
    handleHtmlBasicHelp(requestAndResponse);
  }
 else   if (uri.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestAndResponse);
  }
 else   if (uri.startsWith(""/help/"")) {
    handleHtmlHelp(requestAndResponse);
  }
 else   if (uri.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestAndResponse);
  }
 else   if (uri.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestAndResponse);
  }
 else   if (uri.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestAndResponse);
  }
 else   if (uri.equals(""/clear/"")) {
    handleHtmlClearForm(requestAndResponse);
  }
 else   if (uri.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestAndResponse);
  }
 else   if (uri.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestAndResponse);
  }
 else   if (uri.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestAndResponse);
  }
 else   if (uri.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestAndResponse);
  }
 else   if (uri.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestAndResponse);
  }
 else   if (uri.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestAndResponse);
  }
 else   if (uri.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestAndResponse);
  }
 else   if (uri.equals(""/nothing/"")) {
    handleHtmlNothing(requestAndResponse);
  }
 else   if (uri.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestAndResponse);
  }
 else   if (uri.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);
  }
 else   if (uri.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestAndResponse);
  }
 else   if (uri.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestAndResponse);
  }
 else   if (uri.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestAndResponse);
  }
 else   if (uri.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestAndResponse);
  }
 else   if (uri.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestAndResponse);
  }
 else {
    returnHtml404(requestAndResponse);
  }
}","private void handleMultiGetCommand(RequestAndResponse requestButStatus,String uri) throws IOException, ServletException {
  if (uri.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestButStatus);
  }
 else   if (uri.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestButStatus);
  }
 else   if (uri.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestButStatus);
  }
 else   if (uri.startsWith(""/source/"")) {
    handleHtmlShowSource(requestButStatus);
  }
 else   if (uri.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestButStatus);
  }
 else   if (uri.startsWith(""/search/"")) {
    handleHtmlSearch(requestButStatus);
  }
 else   if (uri.equals(""/help/"")) {
    handleHtmlBasicHelp(requestButStatus);
  }
 else   if (uri.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestButStatus);
  }
 else   if (uri.startsWith(""/help/"")) {
    handleHtmlHelp(requestButStatus);
  }
 else   if (uri.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestButStatus);
  }
 else   if (uri.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestButStatus);
  }
 else   if (uri.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestButStatus);
  }
 else   if (uri.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestButStatus);
  }
 else   if (uri.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestButStatus);
  }
 else   if (uri.equals(""/clear/"")) {
    handleHtmlClearForm(requestButStatus);
  }
 else   if (uri.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestButStatus);
  }
 else   if (uri.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestButStatus);
  }
 else   if (uri.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestButStatus);
  }
 else   if (uri.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestButStatus);
  }
 else   if (uri.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestButStatus);
  }
 else   if (uri.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestButStatus);
  }
 else   if (uri.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestButStatus);
  }
 else   if (uri.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestButStatus);
  }
 else   if (uri.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestButStatus);
  }
 else   if (uri.equals(""/nothing/"")) {
    handleHtmlNothing(requestButStatus);
  }
 else   if (uri.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestButStatus);
  }
 else   if (uri.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestButStatus);
  }
 else   if (uri.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestButStatus);
  }
 else   if (uri.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestButStatus);
  }
 else   if (uri.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestButStatus);
  }
 else   if (uri.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestButStatus);
  }
 else   if (uri.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestButStatus);
  }
 else   if (uri.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestButStatus);
  }
 else {
    returnHtml404(requestButStatus);
  }
}",584,3,"routeSingleGetRequest:handleMultiGetCommand,requestAndResponse:requestButStatus,",114,0.5429847717285160,Beam
2695,"private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
","private void dial(String phoneMessage,boolean makeTheCall,boolean usePhoneSpeaker){
  if (phoneMessage.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(phoneMessage,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,phoneMessage);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
",149,8,"contactInformation:phoneMessage,",21,0.18196476697921800,Beam
2696,,,120,7,,1632,5.20612508058548,0
2697,"public static String toString(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
","public static String tostring(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
",27,2,"toString:tostring,",34,0.10712886253992700,Beam
2699,"public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}","public int scan() throws IOException {
  int b50=fInputFile.scan();
  if (b50 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b50)));
  }
  return b50;
}",48,3,"read:scan,b0:b50,fInputStream:fInputFile,",225,1.3079241832097400,Beam
2700,,,54,6,,672,2.716017695268000,0
2701,,,95,15,,1508,5.209288100401560,0
2702,"default B with(String key,int value){
  return with(key,Integer.toString(value));
}
","default B array(String key,int value){
  return array(key,Integer.toString(value));
}
",25,3,"with:array,",31,0.11716683705647800,Beam
2703,"private int findKeyCommentIndex(String keyName){
  for (int i=0; i < keyValComments.size(); i++) {
    String t=keyValComments.get(i);
    String targetedKey=""! "" + keyName + "": "";
    if (t.startsWith(targetedKey)) {
      return i;
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""Did not find key "" + keyName);
  }
  return -1;
}","private int findkeyCommentCode(String keyName){
  for (int i=0; i < keyValComments.size(); i++) {
    String t=keyValComments.get(i);
    String targetedKey=""! "" + keyName + "": "";
    if (t.startsWith(targetedKey)) {
      return i;
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""Did not find key "" + keyName);
  }
  return -1;
}",85,7,"findKeyCommentIndex:findkeyCommentCode,",38,0.18402019341786700,Beam
2704,,,101,8,,226,0.6472009181976320,0
2705,"public final boolean skipAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
","public final boolean skipArray(char d,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == d); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
",68,6,"skipAny:skipArray,c:d,",117,0.5429566979408270,Beam
2706,,,68,4,,535,2.1723063866297400,0
2707,,,84,8,,1181,24.204773036638900,0
2708,"@Override public void done(){
  super.done();
  if (mNumTestsExpected > mNumTestsRun) {
    handleTestRunFailed(String.format(""Test run incomplete. Expected %d tests, received %d"",mNumTestsExpected,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed(""No test results"");
  }
}
","@Override public void did(){
  super.did();
  if (mNumTestsExpected > mNumTestsRun) {
    handleTestRunFailed(String.format(""Test run incomplete. Expected %d tests, received %d"",mNumTestsExpected,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed(""No test results"");
  }
}
",49,5,"done:did,",3,0.0190299391746521,Beam
2709,,,13,1,,25,0.07269260088602700,0
2710,"public boolean equals(Object object){
  if (!(object instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)object;
  if (!name.equals(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.equals(val.getClassName());
}
","public boolean equles(Object host){
  if (!(host instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance test=(ObjectInstance)host;
  if (!name.equles(test.getObjectName()))   return false;
  if (className == null)   return (test.getClassName() == null);
  return className.equles(test.getClassName());
}
",77,5,"equals:equles,object:host,val:test,",379,2.16687198082606,Beam
2711,"private void removeAllObjects(){
  logger.debug(""CLEANING screen object list"");
  texts.clear();
}
","private void removeALLTexts(){
  logger.debug(""CLEANING screen object list"");
  texts.clear();
}
",20,3,"removeAllObjects:removeALLTexts,",15,0.04186139901479090,Beam
2712,,,31,3,,454,1.6923831701278700,0
2713,"@Override public void run(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long address=bufferAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}","@Override public void start(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferPosition,MAX_EVENT_COUNT);
      assert n > 0;
      long address=bufferPosition;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}",88,9,"run:start,bufferAddress:bufferPosition,",64,0.2017070730527240,Beam
2714,,,70,5,,1756,8.722410988807680,0
2715,"public void removeChangeListener(ChangeListener l){
  if (listeners == null)   return;
  listeners.remove(l);
}
","public void removechangeHandler(ChangeListener cl){
  if (listeners == null)   return;
  listeners.remove(cl);
}
",24,3,"l:cl,removeChangeListener:removechangeHandler,",94,0.27755164305369100,Beam
2716,"public void addMutedUsername(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}","public void addMutedUsername(final String meaning,final Date mutedTil){
  if (isUsernameMuted(meaning)) {
    removeMutedUsername(meaning);
  }
  Timestamp muteTillTs=null;
  if (mutedTil != null) {
    muteTillTs=new Timestamp(mutedTil.getTime());
  }
  s_logger.fine(""Muting username:"" + meaning);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,meaning);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + meaning + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + meaning,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}",197,8,"muteTill:mutedTil,username:meaning,",149,0.8155981421470640,Beam
2717,,,17,1,,49,0.15136419534683200,0
2718,,,43,3,,201,0.7596328099568680,0
2719,"private boolean isRelevant(Object service,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(service)) {
      flag=true;
      break;
    }
  }
  return flag;
}
","private boolean isElevant(Object item,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(item)) {
      flag=true;
      break;
    }
  }
  return flag;
}
",121,10,"isRelevant:isElevant,service:item,",88,0.49397483666737900,Beam
2720,"private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}","private double melToLinFreq(double InputFreq){
  return (700.0 * (Math.pow(10.0,(InputFreq / 2595.0)) - 1.0));
}",31,2,"inputFreq:InputFreq,",11,0.05122075875600180,Beam
2721,"private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){
  int cdcPos=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdcPos,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdcPos + 1,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdcPos + 2,spec);
}","private void addCdcColSls(ArrayList<ColumnSpec> cdcCopks,OneRowChange cdcRowUpdateChange){
  int cdcPos=cdcCopks.size();
  if (cdcColumnsInFirst)   cdcPos=0;
  ColumnSpec spec=cdcRowUpdateChange.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcCopks.add(cdcPos,spec);
  spec=cdcRowUpdateChange.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcCopks.add(cdcPos + 1,spec);
  spec=cdcRowUpdateChange.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcCopks.add(cdcPos + 2,spec);
}",189,6,"addCdcColSpecs:addCdcColSls,cdcSpecs:cdcCopks,cdcRowChangeData:cdcRowUpdateChange,cdcColumnsAtFront:cdcColumnsInFirst,",550,7.672484997908270,Beam
2722,"private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}","private ParsePosition patch(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}",26,2,"next:patch,",26,0.10098150173823000,Beam
2723,"public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}","public static String addCvDescription(String milTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (milTip == null) {
      milTip=descString;
    }
 else {
      milTip=addTextHTMLaware(milTip,"" ("" + descString + "")"");
    }
  }
 else   if (milTip == null) {
    milTip="""";
  }
  return milTip;
}",109,6,"toolTip:milTip,",63,0.30216089487075800,Beam
2725,"static Field findField(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ instance.getClass());
}
","static Field FindMember(Object array,String name) throws NoSuchFieldException {
  for (Class<?> clazz=array.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ array.getClass());
}
",100,5,"findField:FindMember,instance:array,",87,0.37850515842437700,Beam
2726,"public long startstack(){
  return Long.parseLong(fields[27]);
}","public long strfunc(){
  return Long.parseLong(levels[27]);
}",18,2,"startstack:strfunc,fields:levels,",169,1.8096535682678200,Beam
2727,,,107,7,,855,3.1478148341178900,0
2728,"@Override public int length(){
  return set.size();
}
","@Override public int read(){
  return set.size();
}
",16,2,"length:read,",15,0.04311973253885910,Beam
2729,,,16,2,,165,0.6582040786743160,0
2730,,,28,1,,37,0.12619322141011600,0
2731,"public void removeCategoriesListener(SnapshotCategoriesListener listener){
  listeners.remove(listener);
}
","public void removeCogsAdapter(SnapshotCategoriesListener catapter){
  listeners.remove(catapter);
}
",16,3,"removeCategoriesListener:removeCogsAdapter,listener:catapter,",54,0.1743140975634260,Beam
2732,,,61,5,,767,3.3789797107378600,0
2733,,,149,9,,2530,89.6986372033755,0
2734,,,30,5,,938,3.256261082490290,0
2735,"protected void processChildren(QueryNode queryTree) throws QueryNodeException {
  List<QueryNode> children=queryTree.getChildren();
  ChildrenList newChildren;
  if (children != null && children.size() > 0) {
    newChildren=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        newChildren.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);
      queryTree.set(orderedChildrenList);
    }
  finally {
      newChildren.beingUsed=false;
    }
  }
}","protected void processingMembers(QueryNode queryList) throws QueryNodeException {
  List<QueryNode> children=queryList.getChildren();
  ChildrenList sameStudents;
  if (children != null && children.size() > 0) {
    sameStudents=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        sameStudents.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(sameStudents);
      queryList.set(orderedChildrenList);
    }
  finally {
      sameStudents.beingUsed=false;
    }
  }
}",115,6,"queryTree:queryList,processChildren:processingMembers,newChildren:sameStudents,",557,2.030640757083890,Beam
2736,"private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}","private BigInteger oddModPow(BigInteger yo,BigInteger z){
  if (yo.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=yo.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}",931,36,"y:yo,",50,0.3172183911005660,Beam
2737,"private void sendCONNECTRequest() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}","private void sendCONNECTConnect() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}",163,11,"sendCONNECTRequest:sendCONNECTConnect,",6,0.024082064628601100,Beam
2738,,,62,6,,1406,7.510530018806460,0
2739,,,41,4,,695,2.223111180464430,0
2740,,,58,5,,452,2.1914034485817000,0
2741,"public Sentence asSentence(){
  return Sentence.newConjunction(sentences);
}
","public Sentence asSentencer(){
  return Sentence.newConjunction(sentences);
}
",15,2,"asSentence:asSentencer,",4,0.011560146013895700,Beam
2742,"public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}
","public static String read(POSMikheevCounter counter){
  return POSBaseLineCounter.read(counter);
}
",18,2,"write:read,",34,0.14172831773757900,Beam
2743,,,24,2,,314,1.0149278481801400,0
2744,,,20,2,,99,0.31934396425883000,0
2745,"public void cfgPackage(ConfigurationValue cfgval,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
","public void cfgPackage(ConfigurationValue givalue,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
",35,6,"cfgval:givalue,",7,0.02285441557566330,Beam
2746,"public static String arrayToHexString(byte[] array){
  return arrayToHexString(array,0,array.length);
}","public static String arrayToHexString(byte[] area){
  return arrayToHexString(area,0,area.length);
}",24,2,"array:area,",41,0.15567212502161700,Beam
2748,"public static String selectText(XPathExpression expr,Node context){
  try {
    return (String)expr.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
","public static String parseStr(XPathExpression express,Node context){
  try {
    return (String)express.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
",45,4,"selectText:parseStr,expr:express,",116,0.44830127954483000,Beam
2749,,,54,4,,819,3.839916483561200,0
2751,,,432,13,,2460,13.445566662152600,0
2752,"public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}","public static void checkHTTPRequestLength(HttpServletRequest resource) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=resource.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}",100,6,"request:resource,",3,0.02558449904123940,Beam
2753,"public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
","public ComponentConfigBuilder addItemInMultifeField(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
",69,10,"addItemInMultifield:addItemInMultifeField,",38,0.20135442018508900,Beam
2754,"public static String formatListToString(List<String> list){
  String result="""";
  for (  String s : list)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
","public static String convertlistToString(List<String> section){
  String result="""";
  for (  String s : section)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
",46,4,"list:section,formatListToString:convertlistToString,",115,0.4506966193517050,Beam
2755,,,155,8,,1191,5.655477432409920,0
2756,,,377,4,,567,4.184298400084180,0
2757,,,238,14,,3873,43.94638300736750,0
2758,"protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}","protected DateTimeData convert(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}",568,13,"parse:convert,",36,0.22162130276362100,Beam
2759,,,28,4,,321,1.1735443631808000,0
2760,,,84,5,,744,3.2772329250971500,0
2761,"static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
","static void loadSection(File file,ModuleCandidate validation) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,validation);
}
",47,5,"candidate:validation,loadDirectory:loadSection,",173,0.5331213712692260,Beam
2762,"private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivatives.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}","private void feedForward(Vec input,List<Vec> activations,List<Vec> derivative){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivative.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}",139,12,"derivatives:derivative,",34,0.1752045790354410,Beam
2763,"public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){
  final int dim=assertSameDimensionality(box1,box2);
  double overlap=1.;
  double vol1=1.;
  double vol2=1.;
  for (int i=0; i < dim; i++) {
    final double box1min=box1.getMin(i);
    final double box1max=box1.getMax(i);
    final double box2min=box2.getMin(i);
    final double box2max=box2.getMax(i);
    final double omax=Math.min(box1max,box2max);
    final double omin=Math.max(box1min,box2min);
    if (omax <= omin) {
      return 0.;
    }
    overlap*=omax - omin;
    vol1*=box1max - box1min;
    vol2*=box2max - box2min;
  }
  return overlap / (vol1 + vol2);
}","public static double computeoverline(SpatialComparable block3,SpatialComparable box2){
  final int dim=assertSameDimensionality(block3,box2);
  double overlap=1.;
  double vol1=1.;
  double vol2=1.;
  for (int i=0; i < dim; i++) {
    final double box1min=block3.getMin(i);
    final double box1max=block3.getMax(i);
    final double box2min=box2.getMin(i);
    final double box2max=box2.getMax(i);
    final double omax=Math.min(box1max,box2max);
    final double omin=Math.max(box1min,box2min);
    if (omax <= omin) {
      return 0.;
    }
    overlap*=omax - omin;
    vol1*=box1max - box1min;
    vol2*=box2max - box2min;
  }
  return overlap / (vol1 + vol2);
}",163,14,"relativeOverlap:computeoverline,box1:block3,",95,0.674450937906901,Beam
2764,"private Token toPrefixToken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}","private Token toPrefixedtoken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}",86,8,"toPrefixToken:toPrefixedtoken,",40,0.20846157073974600,Beam
2765,,,334,5,,1376,9.670776065190630,0
2766,"protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}","protected void stopWraparoundsTesting(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}",65,8,"stopWraparoundTest:stopWraparoundsTesting,",10,0.03240880568822230,Beam
2767,,,125,9,,2426,34.389810872077900,0
2768,,,78,7,,810,3.763216213385260,0
2769,,,107,6,,1281,13.412571255366000,0
2770,"public void put(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])buffer.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=buffer.getTimestamp();
    format=buffer.getFormat();
    seqNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=buffer.getVideoOrientation();
}","public void output(Buffer server){
  if (server.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])server.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=server.getTimestamp();
    format=server.getFormat();
    seqNumber=server.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(server.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=server.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=server.getVideoOrientation();
}",276,20,"put:output,buffer:server,",98,0.6730766256650290,Beam
2771,"public void flush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
","public void ush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
",32,3,"flush:ush,",28,0.09551511605580650,Beam
2772,,,80,9,,1709,11.48713774283730,0
2773,"private void pushAnnotatorsRef(String values){
  annotatorsRef.push(annotatorsRef.peek());
  setAnnotatorsRef(values);
}
","private void pushAnannotatorsReference(String values){
  annatorsReference.push(annatorsReference.peek());
  setAnnotatorsRef(values);
}
",25,3,"pushAnnotatorsRef:pushAnannotatorsReference,annotatorsRef:annatorsReference,",250,1.1899344364802000,Beam
2774,,,371,19,,1981,10.615996634960200,0
2775,"@Override public boolean add(E o){
  if (null == o) {
    throw new NullPointerException();
  }
  if (offer(o)) {
    return true;
  }
  throw new IllegalStateException();
}
","@Override public boolean push(E ko){
  if (null == ko) {
    throw new NullPointerException();
  }
  if (offer(ko)) {
    return true;
  }
  throw new IllegalStateException();
}
",43,2,"add:push,o:ko,",90,0.4425360282262170,Beam
2776,,,416,36,,1435,7.85171545346578,0
2777,"public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}","public final void eval(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}",48,6,"sample:eval,",9,0.036611390113830600,Beam
2778,,,65,4,,806,5.105496152242030,0
2779,"public void removeChildAt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}","public void getElementIt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}",68,4,"removeChildAt:getElementIt,",18,0.07998472054799400,Beam
2780,"protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
","protected void doFloodBDDP(long PINSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(PINSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(PINSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (PINSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
",250,15,"pinSwitch:PINSwitch,",72,0.38999143441518100,Beam
2781,"public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}","public void cancelAutoocomple(){
  if (inCommpletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCommpletion=false;
  }
}",39,7,"cancelAutoCompletion:cancelAutoocomple,inCompletion:inCommpletion,",27,0.11442265510559100,Beam
2782,"private void onTrackPointElementStart(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String longitude=attributes.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
","private void onTrackPointelementEnd(Attributes addractions) throws SAXException {
  String latitude=addractions.getValue(ATT_LAT);
  String longitude=addractions.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
",99,7,"onTrackPointElementStart:onTrackPointelementEnd,attributes:addractions,",76,0.4489755153656010,Beam
2783,,,74,4,,713,23.335220030943600,0
2784,"public void addMetaObject(MetaObject object){
  for (int k=0; k < MetaObjects.size(); ++k) {
    if (MetaObjects.get(k) == null) {
      MetaObjects.set(k,object);
      return;
    }
  }
  MetaObjects.add(object);
}","public void addMetData(MetaObject target){
  for (int k=0; k < MetaObjects.size(); ++k) {
    if (MetaObjects.get(k) == null) {
      MetaObjects.set(k,target);
      return;
    }
  }
  MetaObjects.add(target);
}",60,3,"addMetaObject:addMetData,object:target,",124,1.5199249068896000,Beam
2785,"public static boolean isFailure(List<Action> actions){
  return actions.isEmpty();
}
","public static boolean IsFailure(List<Action> actions){
  return actions.isEmpty();
}
",20,2,"isFailure:IsFailure,",10,0.03890825112660730,Beam
2786,,,148,14,,2645,10.626902683575900,0
2787,"public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}","public void delItems(int js,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + js + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (js > e) {
    int tmp=js;
    js=e;
    e=tmp;
  }
  if (js < 0) {
    js=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(js >= getFirstVisibleItem() && js <= getLastVisibleItem());
  for (int i=js; i <= e; i++) {
    items.removeElementAt(js);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - js) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - js + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= js && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(js - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= js) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(js,oldLastDisplayed,options);
}",549,21,"s:js,",7,0.07038021882375080,Beam
2788,"private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append(""SELECT * FROM "");
  stmt.append(conn.getDatabaseObjectName(schemaName) + ""."" + conn.getDatabaseObjectName(tableName));
  stmt.append("" WHERE "");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmt;
}
","private StringBuffer buildSelectquery(String schemaName,String databaseName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append(""SELECT * FROM "");
  stmt.append(conn.getDatabaseObjectName(schemaName) + ""."" + conn.getDatabaseObjectName(databaseName));
  stmt.append("" WHERE "");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmt;
}
",89,7,"buildSelectQuery:buildSelectquery,tableName:databaseName,",205,0.4717081626256310,Beam
2789,"public static List<String> readToList(Reader r) throws IOException {
  try (BufferedReader in=new BufferedReader(r)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
","public static List<String> readsToArray(Reader er) throws IOException {
  try (BufferedReader in=new BufferedReader(er)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
",75,5,"readToList:readsToArray,r:er,",89,0.20527135531107600,Beam
2790,"private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
","private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd imageConfig){
  Map<String,String> labels=imageConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  imageConfig.withLabels(labels);
}
",74,4,"containerConfig:imageConfig,",3,0.015609471003214500,Beam
2791,"public void writeEntry(CCacheOutputStream cos) throws IOException {
  cos.write16(adType);
  cos.write32(adData.length);
  cos.write(adData,0,adData.length);
}","public void createEnt(CCacheOutputStream coll) throws IOException {
  coll.write16(adType);
  coll.write32(adData.length);
  coll.write(adData,0,adData.length);
}",40,4,"writeEntry:createEnt,cos:coll,",91,0.17308496634165400,Beam
2792,"public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,""ITALIC"");
  }
 else {
    writeTag(STYLE,""PLAIN"");
  }
  writeTag(""size"",value.getSize());
  closeTag();
}","public void writePoint(String tag,Font value){
  startTag(tag);
  writePoint(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writePoint(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writePoint(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writePoint(STYLE,""ITALIC"");
  }
 else {
    writePoint(STYLE,""PLAIN"");
  }
  writePoint(""size"",value.getSize());
  closeTag();
}",137,4,"writeTag:writePoint,",7,0.037960278987884500,Beam
2794,"public boolean resourceSupportAR(Integer id){
  if (id == null) {
    return false;
  }
  return resourceSupportAR(id.intValue());
}
","public boolean resourcesupportIR(Integer id){
  if (id == null) {
    return false;
  }
  return resourcesupportIR(id.intValue());
}
",30,2,"resourceSupportAR:resourcesupportIR,",12,0.030325281620025600,Beam
2795,,,159,6,,175,0.7647089123725890,0
2796,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eIsSet(featureID);
}
","@Override public boolean eeIset(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eeIset(featureID);
}
",57,6,"eIsSet:eeIset,",28,0.13603848218917800,Beam
2797,"public void updateEnd(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}","public void processStop(Logger path){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (path != null) {
      path.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}",108,14,"updateEnd:processStop,log:path,",88,0.2665231386820480,Beam
2798,"public void start(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.start();
  }
}
","public void run(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.run();
  }
}
",31,2,"start:run,",4,0.01646056572596230,Beam
2799,"public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}","public void setIndexinterrange(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}",206,11,"removeIndexInterval:setIndexinterrange,",19,0.06888643503189090,Beam
2800,"public static byte[] readBinaryFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}","public static byte[] readBINBuffer(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}",91,6,"readBinaryFile:readBINBuffer,",34,0.0780882994333903,Beam
2801,"public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split("","")));
}
","public static ArrayList<String> stringToArrayList(String array){
  return new ArrayList<>(Arrays.asList(array.split("","")));
}
",32,2,"string:array,",4,0.018115413188934300,Beam
2802,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)obj;
  return uri.equals(other.getURI());
}
","public boolean Equalls(Object art){
  if (this == art) {
    return true;
  }
  if (!(art instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)art;
  return uri.Equalls(other.getURI());
}
",54,4,"equals:Equalls,obj:art,",142,0.49736862579981500,Beam
2803,,,234,10,,1874,5.312165621916450,0
2804,,,121,4,,710,1.9601360440254200,0
2805,"private void addToQueue(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}","private void addOurQue(SerialMessage customMember){
  if (customMember == null) {
    return;
  }
  if (!msgQueue.contains(customMember) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(customMember);
  }
  sendMessage();
}",50,3,"addToQueue:addOurQue,serialMessage:customMember,",63,0.13806187709172600,Beam
2806,,,67,4,,159,0.43658827940623000,0
2807,"public boolean isGerund(){
  return typeString.startsWith(VERB_GERUND);
}
","public boolean isGernd(){
  return typeString.startsWith(VERB_GERUND);
}
",15,2,"isGerund:isGernd,",3,0.010019763310750300,Beam
2808,"public void addListener(ColorMapListener listener){
  listeners.add(listener);
}
","public void addener(ColorMapListener LISTeners){
  installerers.add(LISTeners);
}
",16,3,"listener:LISTeners,addListener:addener,listeners:installerers,",141,0.2771990736325580,Beam
2809,,,163,6,,1109,3.3739195903142300,0
2810,"void removeKnownObject(ParseObject object){
synchronized (mutex) {
    knownObjects.remove(object);
  }
}
","void removeknownClass(ParseObject part){
synchronized (mutex) {
    knownObjects.remove(part);
  }
}
",21,4,"removeKnownObject:removeknownClass,object:part,",67,0.13717103401819900,Beam
2811,"public String toMatlab(){
  StringBuffer result;
  int i;
  int n;
  result=new StringBuffer();
  result.append(""["");
  for (i=0; i < getRowDimension(); i++) {
    if (i > 0) {
      result.append(""; "");
    }
    for (n=0; n < getColumnDimension(); n++) {
      if (n > 0) {
        result.append("" "");
      }
      result.append(Double.toString(get(i,n)));
    }
  }
  result.append(""]"");
  return result.toString();
}","public String toMatla(){
  StringBuffer cache;
  int i;
  int n;
  cache=new StringBuffer();
  cache.append(""["");
  for (i=0; i < getRowDimension(); i++) {
    if (i > 0) {
      cache.append(""; "");
    }
    for (n=0; n < getColumnDimension(); n++) {
      if (n > 0) {
        cache.append("" "");
      }
      cache.append(Double.toString(get(i,n)));
    }
  }
  cache.append(""]"");
  return cache.toString();
}",125,4,"toMatlab:toMatla,result:cache,",83,0.20670945644378700,Beam
2812,,,149,3,,411,1.199271027247110,0
2813,"public static int brighter(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}","public static int Brider(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}",178,7,"brighter:Brider,",38,0.2017098585764570,Beam
2814,,,39,4,,566,1.5918866753578200,0
2815,,,227,11,,1477,5.705866003036500,0
2816,"public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}","public void null(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    null(c);
  }
}",44,4,"type:null,",42,0.16120454867680900,Beam
2817,"@Override public void close() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.close();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.close();
  }
  checkException();
}","@Override public void exec() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.exec();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.exec();
  }
  checkException();
}",93,6,"close:exec,",28,0.07139806747436520,Beam
2819,"private void handleSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}","private void handlePush(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}",372,18,"handleSubscribe:handlePush,",7,0.019562451044718400,Beam
2820,,,17,3,,268,0.6416146516799930,0
2821,"private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}","private static final void waitForEditorToBeActive(IEditorPart internalFileOffice,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileOffice && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileOffice)   logger.warn(""selected editor was not activated within timout"");
}",75,6,"internalFileEditor:internalFileOffice,",5,0.025626428922017400,Beam
2822,,,183,11,,410,0.9596524318059290,0
2823,"public ShortInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){
  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);
}
","public PointInterleavingFaster(SampleModel sampleModel,DataBuffer dataBuffer,Point source){
  this(sampleModel,dataBuffer,new Rectangle(source.x,source.y,sampleModel.getWidth(),sampleModel.getHeight()),source,null);
}
",49,4,"ShortInterleavedRaster:PointInterleavingFaster,origin:source,",357,5.550077188014980,Beam
2824,"@Nullable private Operator.Kind parseOperator(TokenStream tokens){
  if (tokens.has(""="")) {
    tokens.next();
    tokens.expect(""="");
    return Operator.Kind.EQUALS;
  }
  if (tokens.has(""!"")) {
    tokens.next();
    tokens.expect(""="");
    return Operator.Kind.NOT_EQUALS;
  }
  if (tokens.has(""<"")) {
    tokens.next();
    if (tokens.has(""="")) {
      tokens.next();
      return Operator.Kind.LESS_EQUAL;
    }
    return Operator.Kind.LESS;
  }
  if (tokens.has("">"")) {
    tokens.next();
    if (tokens.has(""="")) {
      tokens.next();
      return Operator.Kind.GREATER_EQUAL;
    }
    return Operator.Kind.GREATER;
  }
  return null;
}
","@Nullable private Operator.Kind parseOpater(TokenStream tokenes){
  if (tokenes.has(""="")) {
    tokenes.next();
    tokenes.expect(""="");
    return Operator.Kind.EQUALS;
  }
  if (tokenes.has(""!"")) {
    tokenes.next();
    tokenes.expect(""="");
    return Operator.Kind.NOT_EQUALS;
  }
  if (tokenes.has(""<"")) {
    tokenes.next();
    if (tokenes.has(""="")) {
      tokenes.next();
      return Operator.Kind.LESS_EQUAL;
    }
    return Operator.Kind.LESS;
  }
  if (tokenes.has("">"")) {
    tokenes.next();
    if (tokenes.has(""="")) {
      tokenes.next();
      return Operator.Kind.GREATER_EQUAL;
    }
    return Operator.Kind.GREATER;
  }
  return null;
}
",174,2,"parseOperator:parseOpater,tokens:tokenes,",97,0.5810796618461610,Beam
2825,"public void update(List<Race> races){
  if (currentRace == null) {
    return;
  }
  if (races.contains(currentRace)) {
    setRace(races.get(races.indexOf(currentRace)));
  }
}
","public void update(List<Race> craces){
  if (currentRace == null) {
    return;
  }
  if (craces.contains(currentRace)) {
    setRace(craces.get(craces.indexOf(currentRace)));
  }
}
",48,3,"races:craces,",17,0.047285938262939500,Beam
2826,"private final void resetDTX(AffineTransform at){
  fsref=null;
  dtx=at;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}
","private final void resetDTX(AffineTransform parent){
  fsref=null;
  dtx=parent;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}
",65,6,"at:parent,",21,0.06947910785675050,Beam
2827,"private boolean isAnnotation(){
  return implInterfaces.contains(""java.lang.annotation.Annotation"");
}
","private boolean isAnotation(){
  return implInterfaces.contains(""java.lang.annotation.Annotation"");
}
",15,2,"isAnnotation:isAnotation,",5,0.01529753605524700,Beam
2828,"public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}","public byte[] ReadUTF() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}",52,4,"readBytes:ReadUTF,",16,0.0336889108022054,Beam
2829,"public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
","public static void openOtherUrri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
",40,4,"openOtherUri:openOtherUrri,",5,0.011918433507283500,Beam
2830,"public static <T>T instance(Class<T> clazz){
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}
","public static <T>T load(Class<T> slasse){
  try {
    return slasse.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}
",42,3,"instance:load,clazz:slasse,",57,0.11566971937815300,Beam
2831,"public void performActions() throws Throwable {
  for (  Throwing.Runnable action : actions) {
    action.run();
  }
}
","public void performActions() throws Throwable {
  for (  Throwing.Runnable action : flows) {
    action.run();
  }
}
",26,3,"actions:flows,",67,0.20377223889033,Beam
2832,"private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation){
  expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation);
}
","private static void expandedNumberat(String numberedString,int startIndex,WordRelation wordRelation){
  expandNumber(numberedString.substring(startIndex,numberedString.length()),wordRelation);
}
",34,4,"numberString:numberedString,expandNumberAt:expandedNumberat,",104,0.23983285427093500,Beam
2833,"private void cleanupMinidumpFile(){
  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {
    Log.w(TAG,""Unable to mark "" + mFileToUpload + "" as uploaded."");
    if (!mFileToUpload.delete()) {
      Log.w(TAG,""Cannot delete "" + mFileToUpload);
    }
  }
}
","private void cleanupMinipumperfile(){
  if (!CrashFileManager.tryMarkAsUploaded(mFileToInsert)) {
    Log.w(TAG,""Unable to mark "" + mFileToInsert + "" as uploaded."");
    if (!mFileToInsert.delete()) {
      Log.w(TAG,""Cannot delete "" + mFileToInsert);
    }
  }
}
",54,2,"cleanupMinidumpFile:cleanupMinipumperfile,mFileToUpload:mFileToInsert,",89,0.26955972115198800,Beam
2834,,,30,5,,734,2.149611540635430,0
2835,"private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException {
  kdbHeader.setFlags(dataInput.readInt());
  kdbHeader.setVersion(dataInput.readInt());
  byte[] buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setMasterSeed(buffer);
  buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setEncryptionIv(buffer);
  kdbHeader.setGroupCount(dataInput.readInt());
  kdbHeader.setEntryCount(dataInput.readInt());
  byte[] buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setContentHash(buffer32);
  buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setTransformSeed(buffer32);
  kdbHeader.setTransformRounds(dataInput.readInt());
}","private static void deserializableData(KdbHeader kdbEntry,DataInput dataInput) throws IOException {
  kdbEntry.setFlags(dataInput.readInt());
  kdbEntry.setVersion(dataInput.readInt());
  byte[] buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbEntry.setMasterSeed(buffer);
  buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbEntry.setEncryptionIv(buffer);
  kdbEntry.setGroupCount(dataInput.readInt());
  kdbEntry.setEntryCount(dataInput.readInt());
  byte[] buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbEntry.setContentHash(buffer32);
  buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbEntry.setTransformSeed(buffer32);
  kdbEntry.setTransformRounds(dataInput.readInt());
}",164,5,"deserializeHeader:deserializableData,kdbHeader:kdbEntry,",101,0.4184958140055340,Beam
2836,"public static String decode(String encoded,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (encoded == null || encoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(encoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}","public static String decode(String encoded,AMEncryption encsc){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (encoded == null || encoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(encoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encsc.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}",215,11,"encr:encsc,",5,0.10669340292612700,Beam
2837,,,166,9,,1546,5.0676095366478000,0
2838,"void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
","void pushPoint(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
",58,4,"addLocation:pushPoint,",43,0.0916114608446757,Beam
2839,,,18,1,,25,0.05008453528086340,0
2840,"public static final String toString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}
","public static final String fromString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.fromString();
}
",42,3,"toString:fromString,",38,0.08240629434585570,Beam
2842,"private boolean checkDisband(Legion legion){
  if (legion.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {
      disbandLegion(legion);
      return true;
    }
  }
  return false;
}","private boolean checkExband(Legion levison){
  if (levison.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > levison.getDisbandTime()) {
      disbandLegion(levison);
      return true;
    }
  }
  return false;
}",50,2,"legion:levison,checkDisband:checkExband,",134,0.8255834499994910,Beam
2843,"public StrBuilder replace(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}","public StrBuilder set(int partindex,int EndPoint,String replaceStr){
  EndPoint=validateRange(partindex,EndPoint);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(partindex,EndPoint,EndPoint - partindex,replaceStr,insertLen);
  return this;
}",59,5,"replace:set,startIndex:partindex,endIndex:EndPoint,",564,1.8472927570343000,Beam
2844,,,65,4,,446,1.471163566907250,0
2845,"private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
","private ODataFeed readFeedlogperf(String q,Map<String,String> plugins) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(q,plugins);
  log(Level.DEBUG,""query("" + q + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
",62,6,"readFeedLogPerf:readFeedlogperf,query:q,params:plugins,",537,1.5600905497868900,Beam
2846,,,167,10,,3407,10.246081658204400,0
2847,"private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}","private static String tramVersions(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}",46,3,"trimVersion:tramVersions,",9,0.045438249905904100,Beam
2848,"public Currency read(String symbol){
  return Currency.getInstance(symbol);
}
","public Currency read(String synletter){
  return Currency.getInstance(synletter);
}
",17,2,"symbol:synletter,",14,0.08039087851842240,Beam
2849,"public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}
","public HoltWintersModelBuilder average(double average){
  this.average=average;
  return this;
}
",18,1,"alpha:average,",4,0.024192837874094600,Beam
2850,"@Override public void paint(final PPaintContext ppc){
  final Paint paint=getPaint();
  if (paint != null) {
    final Graphics2D g2=ppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      g2.setPaint(backgroundColor);
      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      g2.setPaint(lineColor);
      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}","@Override public void ppdraw(final PPaintContext ppc){
  final Paint ppdraw=getPaint();
  if (ppdraw != null) {
    final Graphics2D gSecond=ppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      gSecond.setPaint(backgroundColor);
      gSecond.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      gSecond.setPaint(lineColor);
      gSecond.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}",183,9,"paint:ppdraw,g2:gSecond,",213,0.618983002503713,Beam
2851,,,15,2,,219,0.4638581871986390,0
2853,,,39,4,,565,3.71372526884079,0
2854,,,51,5,,982,2.6763481895128900,0
2856,,,50,4,,189,0.38789329926172900,0
2857,,,107,11,,2647,7.6809612035751300,0
2858,"public int hashCode(){
  int h=hash;
  if (h == -1) {
    try {
      h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      h=0;
    }
    hash=h;
  }
  return h;
}","public int hex32(){
  int h=hash;
  if (h == -1) {
    try {
      h=Arrays.hex32(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      h=0;
    }
    hash=h;
  }
  return h;
}",56,3,"hashCode:hex32,",14,0.03495103120803830,Beam
2859,,,47,3,,99,0.2172341545422870,0
2860,"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}","public void ReadIntern(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.ReadIntern(in);
}",206,10,"readExternal:ReadIntern,",45,0.12770423491795900,Beam
2861,,,76,8,,1450,3.1055326739947000,0
2862,"public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String formatArray(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(formatArray(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:formatArray,",12,0.03089289665222170,Beam
2863,"protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
","protected void start(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
",52,6,"reply:start,",52,0.09816751877466840,Beam
2865,"private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}","private char[] applyFormCompitching(final char[] ca4,final boolean append){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || append) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}",340,12,"applyFloatPadding:applyFormCompitching,noDigits:append,",181,0.8275305350621540,Beam
2866,,,89,4,,158,0.925524373849233,0
2867,"public Key(byte[] hash){
  if (hash.length != SHA1_HASH_LENGTH) {
    throw new IllegalArgumentException(""Invalid Hash must be 20bytes, was: "" + hash.length);
  }
  System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH);
}","public ature(byte[] block){
  if (block.length != SHA1_HASH_FLEN) {
    throw new IllegalArgumentException(""Invalid Hash must be 20bytes, was: "" + block.length);
  }
  System.arraycopy(block,0,this.block,0,SHA1_HASH_FLEN);
}",48,3,"Key:ature,hash:block,SHA1_HASH_LENGTH:SHA1_HASH_FLEN,",226,0.5915820201238000,Beam
2868,"public void testDecoder6(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}","public void testDecoding7(){
  boolean res;
  String originalAppIdName=mAppIdCode;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdCode=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdCode + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdCode.equals(pduDecoder.getValueString()));
  }
  mAppIdCode=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}",170,14,"testDecoder6:testDecoding7,mAppIdName:mAppIdCode,",650,2.7441046873728400,Beam
2870,"protected synchronized void received(int responseCode,String stream,String json){
  FollowerInfo result=parseFollowers(stream,json);
  if (result != null) {
    noError(stream);
    cached.put(stream,result);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(result);
      if (hasNewFollowers(result.followers)) {
        listener.newFollowers(result);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(result);
    }
    requested.add(stream);
  }
 else {
    String errorMessage="""";
    if (responseCode == 404) {
      errorMessage=""Channel not found."";
      error(stream,10);
    }
 else     if (responseCode == 200) {
      errorMessage=""Parse error."";
      error(stream,1);
    }
 else     if (responseCode == 401 || responseCode == 403) {
      errorMessage=""Access denied."";
      error(stream,1);
    }
 else     if (responseCode == 422) {
      errorMessage=""No data for this channel."";
      error(stream,10);
    }
 else {
      errorMessage=""Request error."";
      error(stream,1);
    }
    FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage);
    cached.put(stream,errorResult);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorResult);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorResult);
    }
  }
}","protected synchronized void ceived(int responseCode,String content,String json){
  FollowerInfo result=parseFollowers(content,json);
  if (result != null) {
    noError(content);
    cached.put(content,result);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(result);
      if (hasNewFollowers(result.followers)) {
        listener.newFollowers(result);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(result);
    }
    requested.add(content);
  }
 else {
    String errorMessage="""";
    if (responseCode == 404) {
      errorMessage=""Channel not found."";
      error(content,10);
    }
 else     if (responseCode == 200) {
      errorMessage=""Parse error."";
      error(content,1);
    }
 else     if (responseCode == 401 || responseCode == 403) {
      errorMessage=""Access denied."";
      error(content,1);
    }
 else     if (responseCode == 422) {
      errorMessage=""No data for this channel."";
      error(content,10);
    }
 else {
      errorMessage=""Request error."";
      error(content,1);
    }
    FollowerInfo errorResult=new FollowerInfo(type,content,errorMessage);
    cached.put(content,errorResult);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorResult);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorResult);
    }
  }
}",278,11,"received:ceived,stream:content,",226,0.9030431707700090,Beam
2871,"public void addListener(final ProjectorListener projectorListener){
  if (listeners == null) {
    listeners=new ArrayList<ProjectorListener>();
  }
  listeners.add(projectorListener);
}
","public void addListener(final ProjectorListener projectorerServer){
  if (listeners == null) {
    listeners=new ArrayList<ProjectorListener>();
  }
  listeners.add(projectorerServer);
}
",35,3,"projectorListener:projectorerServer,",20,0.04799368778864540,Beam
2872,"public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}","public static float m(float[] data,int startIndex,int endIndex){
  float m=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    m+=data[i];
    total++;
  }
  m/=total;
  return m;
}",142,6,"mean:m,",71,0.2477084239323930,Beam
2873,"public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}
","public static String readFileAsText(File resource) throws FileNotFoundException {
  return readFileAsText(resource.getAbsolutePath());
}
",22,2,"file:resource,readFileAsString:readFileAsText,",68,0.15190750757853200,Beam
2874,,,19,2,,286,0.5930879314740500,0
2875,"private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
","private void notifyActivityStatesChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
",105,6,"notifyActivityStateChanged:notifyActivityStatesChanged,",6,0.01715885798136390,Beam
2876,"private void analyzeClassFields(String className,int action){
  try {
    Class<?> dynamicClass=Class.forName(className);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(className,field,action);
        manyToAnyConditions(className,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);
  }
}
","private void analyzeclassFielding(String classesCode,int action){
  try {
    Class<?> dynamicClass=Class.forName(classesCode);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(classesCode,field,action);
        manyToAnyConditions(classesCode,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + classesCode);
  }
}
",99,7,"analyzeClassFields:analyzeclassFielding,className:classesCode,",201,0.5190995971361800,Beam
2877,,,34,3,,482,1.1014747659365300,0
2878,"private String partiallyEscapeAssertionValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int j=0; j < assertionValue.length(); j++) {
    char c=assertionValue.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}","private String partiallyEscapeAssertorValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int j=0; j < assertionValue.length(); j++) {
    char c=assertionValue.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}",94,5,"partiallyEscapeAssertionValue:partiallyEscapeAssertorValue,",5,0.014107521375020300,Beam
2879,"public static int putInt(byte[] bytes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}
","public static int PutFloat(byte[] codes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.PutFloat(codes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}
",53,7,"putInt:PutFloat,bytes:codes,",281,0.6394115328788760,Beam
2880,"public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
","public static void createXPath(File saveCo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveCo.getAbsolutePath(),v);
}
",73,5,"saveXStream:createXPath,saveTo:saveCo,",117,0.2674723823865260,Beam
2881,"public Object take() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
","public Object pull() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
",17,1,"take:pull,",5,0.01696666081746420,Beam
2882,"boolean removeEdge(SparseEdge e){
  boolean removedEdge=edges.remove(e);
  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));
  if (removedEdge && removedNeighbour)   return true;
 else   if (!removedEdge && !removedNeighbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
","boolean RemoveGraph(SparseEdge eve){
  boolean removedEdge=edges.remove(eve);
  boolean removedNeighbour=neighbours.remove(eve.getOpposite(this));
  if (removedEdge && removedNeighbour)   return true;
 else   if (!removedEdge && !removedNeighbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
",62,6,"removeEdge:RemoveGraph,e:eve,",134,0.39740272363026900,Beam
2883,"private static int showUrlsPrompt(Component parent,List<String> urls){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (urls.size() > 1) {
    okOption=""Open "" + urls.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (urls.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}","private static int showUrlsPrompt(Component parent,List<String> limlets){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : limlets) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (limlets.size() > 1) {
    okOption=""Open "" + limlets.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (limlets.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}",140,8,"urls:limlets,",67,0.5003035068511960,Beam
2884,"private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
","private static boolean server(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
",136,10,"test:server,",67,0.25376561482747400,Beam
2885,,,65,6,,1057,3.52712261279424,0
2886,,,78,7,,883,2.379686152935030,0
2888,,,200,14,,2188,5.58523987531662,0
2889,"protected void addTags(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
","protected void setTag(E source,Builder object){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(source.getPlatformIdent());
  object.tag(Series.TAG_AGENT_ID,String.valueOf(source.getPlatformIdent()));
  if (null != platformIdent) {
    object.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
",69,5,"data:source,addTags:setTag,builder:object,",434,1.4709942579269400,Beam
2890,"public static List seriesNameListFromDataArray(Object[][] data){
  int seriesCount=data.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}","public static List seriesNameListFromDataMatrix(Object[][] data){
  int seriesCount=data.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}",66,5,"seriesNameListFromDataArray:seriesNameListFromDataMatrix,",39,0.10856431722641000,Beam
2891,,,42,3,,523,1.177043084303540,0
2892,,,57,4,,525,2.987684937318170,0
2893,"public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<>();
  }
  return parse(str.toCharArray(),separator);
}
","public Map<String,String> transform(final String text,char magletter){
  if (text == null) {
    return new HashMap<>();
  }
  return transform(text.toCharArray(),magletter);
}
",46,3,"parse:transform,separator:magletter,str:text,",356,0.9071902354558310,Beam
2894,"public static String rightPad(String s,int minLength,char filling){
  int ln=s.length();
  if (minLength <= ln) {
    return s;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(s);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}","public static String rightShift(String ps,int minLength,char filling){
  int rl=ps.length();
  if (minLength <= rl) {
    return ps;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(ps);
  int Dif=minLength - rl;
  for (int i=0; i < Dif; i++) {
    res.append(filling);
  }
  return res.toString();
}",89,8,"s:ps,rightPad:rightShift,dif:Dif,ln:rl,",1774,5.271125586827600,Beam
2895,"GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}
","GradleException formatViolationsFor(Formatter formats,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formats,problemFiles));
}
",32,3,"formatter:formats,",19,0.051635897159576400,Beam
2896,"public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}","public Pair<Integer,List<Long>> feed(){
  try {
    classesProcessed++;
    Integer key=iterator.feed();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}",127,12,"next:feed,",18,0.057320582866668700,Beam
2897,,,40,2,,159,0.3451930046081540,0
2898,,,149,9,,2099,9.337987053394320,0
2899,"@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}","@Override public boolean inject(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}",194,10,"load:inject,",6,0.02256226142247520,Beam
2900,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean notAllow(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
",28,3,"connectionAllowed:notAllow,",21,0.12159359852472900,Beam
2901,"public QuickActionView addActions(Collection<Action> actions){
  checkShown();
  mActions.addAll(actions);
  return this;
}
","public QuickActionView addProdutons(Collection<Action> groups){
  checkShown();
  mActions.addAll(groups);
  return this;
}
",26,3,"actions:groups,addActions:addProdutons,",92,0.20038461287816400,Beam
2902,,,45,5,,673,1.3378060857454900,0
2903,"public String toString(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toString();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toString();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.toString();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}","public String TOStr(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.TOStr();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.TOStr();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.TOStr();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}",224,9,"toString:TOStr,",28,0.0940317153930664,Beam
2904,"private void decideUILookAndFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
","private void decideUILookOrFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
",78,5,"decideUILookAndFeel:decideUILookOrFeel,",5,0.016963462034861200,Beam
2905,,,282,19,,5489,16.65633660554890,0
2906,"public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
","public void deleteOBlmentation(final Obligation obluations,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obluations,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obluations);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
",113,7,"obligation:obluations,deleteObligation:deleteOBlmentation,",222,0.5460630337397260,Beam
2907,"private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}
","private void clean(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clean();
    globalConfigs.clean();
  }
}
",55,6,"clear:clean,",3,0.018633846441904700,Beam
2908,"public boolean canSpawnWorkers(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}","public boolean canSpawnSpawnards(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}",220,11,"canSpawnWorkers:canSpawnSpawnards,",15,0.05333924690882370,Beam
2909,"@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
","@Deprecated public static EpisodeMatchingResult detectepisodefromSourceFile(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
",92,6,"detectEpisodeFromFilename:detectepisodefromSourceFile,",53,0.10733894109726000,Beam
2910,"private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
","private void getAdmission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        getAdmission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        getAdmission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
",133,7,"checkPermission:getAdmission,",18,0.07523969411849980,Beam
2911,"public static double parseDoubleDefault(String s,double def){
  if (s == null) {
    return def;
  }
  try {
    return Double.parseDouble(s);
  }
 catch (  NumberFormatException e) {
    return def;
  }
}
","public static double parsedoubledefault(String f,double default){
  if (f == null) {
    return default;
  }
  try {
    return Double.parseDouble(f);
  }
 catch (  NumberFormatException e) {
    return default;
  }
}
",45,3,"parseDoubleDefault:parsedoubledefault,def:default,s:f,",463,1.0727845112482700,Beam
2912,"public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
","public addressLookups(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
",44,4,"AddressLookup:addressLookups,",69,0.12326237360636400,Beam
2913,"public List<String> listMyDBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
","public List<String> listMyMBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyMBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
",72,6,"listMyDBs:listMyMBs,",37,0.10636930863062500,Beam
2914,"public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}
","public static String pretty(String msg,Object[] arguments){
  return MessageFormat.pretty(msg,arguments);
}
",25,3,"format:pretty,message:msg,",143,0.3347026149431860,Beam
2915,,,210,11,,303,0.6942445119222010,0
2916,,,81,5,,1047,2.309479463100430,0
2917,,,31,3,,447,0.9042281786600750,0
2918,"public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}
","public void initialze(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.initialze(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.initialze(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.initialze(serializer);
  }
}
",82,7,"serialize:initialze,",6,0.05110328992207850,Beam
2920,,,17,2,,343,0.9055473248163860,0
2921,"public void deleteEntityConfig(String realm,String federationId) throws WSFederationMetaException {
  if (federationId == null) {
    return;
  }
  if (realm == null) {
    realm=""/"";
  }
  String[] objs={federationId,realm};
  try {
    Map oldAttrs=configInst.getConfiguration(realm,federationId);
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues == null || oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_config_not_exist"",objs);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);
    if (idpconfig != null) {
      removeFromCircleOfTrust(idpconfig,realm,federationId);
    }
    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);
    if (spconfig != null) {
      removeFromCircleOfTrust(spconfig,realm,federationId);
    }
    Set attr=new HashSet();
    attr.add(ATTR_ENTITY_CONFIG);
    configInst.deleteConfiguration(realm,federationId,attr);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);
    WSFederationMetaCache.putEntityConfig(realm,federationId,null);
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.deleteEntityConfig:"",e);
    String[] data={e.getMessage(),federationId,realm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
}
","public void deleteDocumentConf(String perman,String federationId) throws WSFederationMetaException {
  if (federationId == null) {
    return;
  }
  if (perman == null) {
    perman=""/"";
  }
  String[] objs={federationId,perman};
  try {
    Map oldAttrs=configInst.getConfiguration(perman,federationId);
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues == null || oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_config_not_exist"",objs);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(perman,federationId);
    if (idpconfig != null) {
      removeFromCircleOfTrust(idpconfig,perman,federationId);
    }
    SPSSOConfigElement spconfig=getSPSSOConfig(perman,federationId);
    if (spconfig != null) {
      removeFromCircleOfTrust(spconfig,perman,federationId);
    }
    Set attr=new HashSet();
    attr.add(ATTR_ENTITY_CONFIG);
    configInst.deleteConfiguration(perman,federationId,attr);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);
    WSFederationMetaCache.putEntityConfig(perman,federationId,null);
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.deleteEntityConfig:"",e);
    String[] data={e.getMessage(),federationId,perman};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
}
",280,13,"deleteEntityConfig:deleteDocumentConf,realm:perman,",90,0.437026834487915,Beam
2922,,,91,6,,176,0.37848830223083500,0
2923,"ModulePointer resolve(String modName){
  return (ModulePointer)context.get(modName);
}
","ModulePointer resolve(String modulePath){
  return (ModulePointer)context.get(modulePath);
}
",19,3,"modName:modulePath,",19,0.11336241165796900,Beam
2924,,,45,3,,497,1.0072832584381100,0
2925,"@Override public boolean equals(Object o){
  return o.hashCode() == hashCode();
}
","@Override public boolean equalsalls(Object o){
  return o.hashCode() == hashCode();
}
",22,2,"equals:equalsalls,",5,0.012466907501220700,Beam
2926,"void remove(SuperCardToast superCardToast){
  mList.remove(superCardToast);
}
","void left(SuperCardToast superCardToast){
  mList.left(superCardToast);
}
",15,3,"remove:left,",60,0.15107597510019900,Beam
2927,,,24,3,,520,1.4014764308929400,0
2928,,,26,7,,571,1.3607572833697000,0
2929,"private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){
  SSLSocketFactory oldFactory=connection.getSSLSocketFactory();
  try {
    SSLContext sc=SSLContext.getInstance(""TLS"");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory newFactory=sc.getSocketFactory();
    connection.setSSLSocketFactory(newFactory);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFactory;
}
","private static SSLSocketFactory trustALLHostls(HttpsURLConnection communication){
  SSLSocketFactory oldFactory=communication.getSSLSocketFactory();
  try {
    SSLContext cr=SSLContext.getInstance(""TLS"");
    cr.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory newFactory=cr.getSocketFactory();
    communication.setSSLSocketFactory(newFactory);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFactory;
}
",91,7,"trustAllHosts:trustALLHostls,connection:communication,sc:cr,",219,3.7638471841812100,Beam
2930,"public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}","public void resume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}",153,10,"consume:resume,",34,0.08505354722340900,Beam
2932,,,71,3,,511,1.3893954157829300,0
2933,"public void removeEventListener(ZWaveEventListener eventListener){
synchronized (zwaveEventListeners) {
    zwaveEventListeners.remove(eventListener);
  }
}
","public void removeEventAdapter(ZWaveEventListener EventHandler){
synchronized (zwaveEventListeners) {
    zwaveEventListeners.remove(EventHandler);
  }
}
",22,3,"removeEventListener:removeEventAdapter,eventListener:EventHandler,",56,0.10054733753204300,Beam
2934,,,34,4,,615,2.659293262163800,0
2935,"public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}","public void voidGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}",74,6,"testGetTableTypesOrder:voidGetTableTypesOrder,",3,0.013446227709452300,Beam
2936,,,34,3,,209,0.5161988178888960,0
2937,"public T vertexProcessor(final BiConsumer<Vertex,Map<String,Object>> vertexProcessor){
  this.vertexProcessor=Optional.ofNullable(vertexProcessor);
  return extendingClass.cast(this);
}
","public T vertexCreator(final BiConsumer<Vertex,Map<String,Object>> vertexCreator){
  this.vertexCreator=Optional.ofNullable(vertexCreator);
  return extendingClass.cast(this);
}
",39,2,"vertexProcessor:vertexCreator,",10,0.044062177340189600,Beam
2938,"protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}","protected int loadblock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}",87,9,"readBlock:loadblock,",11,0.019577964146932000,Beam
2939,,,55,5,,827,2.390519650777180,0
2940,"public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}","public void compareParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}",471,31,"computeParameters:compareParameters,",5,0.02811352014541630,Beam
2941,"private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
","private static void merge(DataObject left,DataObject rec,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> dependent){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (dependent != null && dependent.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(rec);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
",401,18,"contained:dependent,lookForChanges:merge,right:rec,",1399,5.187238943576810,Beam
2942,"public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return APPKEY;
case 2:
  return SEND_TIME;
case 3:
return LOAD_INFO;
case 4:
return STATUS;
default :
return null;
}
}","public static _Fields findByThumbRef(int FieldID){
switch (FieldID) {
case 1:
    return APPKEY;
case 2:
  return SEND_TIME;
case 3:
return LOAD_INFO;
case 4:
return STATER;
default :
return null;
}
}",45,6,"findByThriftId:findByThumbRef,fieldId:FieldID,STATUS:STATER,",372,2.546550456682840,Beam
2943,,,21,2,,185,0.44632523457209300,0
2944,"@Override public void close() throws IOException {
  try {
    out.close();
  }
  finally {
    lockFile.delete();
  }
}
","@Override public void release() throws IOException {
  try {
    bin.release();
  }
  finally {
    lockFile.delete();
  }
}
",29,3,"close:release,out:bin,",57,0.13105520009994500,Beam
2945,"public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}
","public PlaLineInt transice_BY(PlaVectorInt p_pointer){
  if (p_pointer.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.transice_BY(p_pointer);
  PlaPointInt new_b=point_b.transice_BY(p_pointer);
  return new PlaLineInt(new_a,new_b);
}
",52,6,"translate_by:transice_BY,p_vector:p_pointer,",66,0.7284451166788740,Beam
2947,"private void checkDuplicateNamesDuringDelete(List<Integer> ids){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ids) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ids.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}","private void sort(List<Integer> ins){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ins) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ins.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}",344,16,"ids:ins,checkDuplicateNamesDuringDelete:sort,",212,0.7438535173734030,Beam
2948,,,64,6,,1085,2.273156479994460,0
2949,"public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}
","public void insert(Writer server) throws Exception {
  server.insert(toString());
  server.flush();
}
",26,2,"write:insert,writer:server,",135,0.3365498264630640,Beam
2950,,,66,5,,695,4.15000729560852,0
2951,"protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){
  NamedNodeMap attNodes=currentRulePart.getAttributes();
  for (int z=0; z < attNodes.getLength(); z++) {
    Node el=attNodes.item(z);
    String currentAtt=el.getNodeName();
    String currentVal=el.getNodeValue();
    if (currentAtt.equals(""type"")) {
      if (!currentVal.startsWith(""!"")) {
        if (!prosodicPositionType.equals(currentVal))         return false;
      }
 else {
        currentVal=currentVal.substring(1,currentVal.length());
        if (prosodicPositionType.equals(currentVal))         return false;
      }
    }
  }
  return true;
}","protected boolean checkProsodicSort(Element currentGroupPart,String prosodicPositionType){
  NamedNodeMap attNodes=currentGroupPart.getAttributes();
  for (int z=0; z < attNodes.getLength(); z++) {
    Node el=attNodes.item(z);
    String currentAtt=el.getNodeName();
    String currentVal=el.getNodeValue();
    if (currentAtt.equals(""type"")) {
      if (!currentVal.startsWith(""!"")) {
        if (!prosodicPositionType.equals(currentVal))         return false;
      }
 else {
        currentVal=currentVal.substring(1,currentVal.length());
        if (prosodicPositionType.equals(currentVal))         return false;
      }
    }
  }
  return true;
}",138,8,"checkProsodicPosition:checkProsodicSort,currentRulePart:currentGroupPart,",191,1.0298887491226200,Beam
2952,,,72,4,,540,1.4633818070093800,0
2953,,,98,5,,847,2.1994293451309200,0
2954,"public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}","public static double from(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}",74,4,"max:from,",71,0.17026135524114000,Beam
2955,"public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}
","public void eval(String description,String[] baseCommand) throws BackupException {
  eval(description,baseCommand,null,null,null,false,false);
}
",33,3,"exec:eval,",53,0.12265312274297100,Beam
2956,,,65,4,,583,1.493002426624300,0
2957,,,53,4,,591,1.6144876877466800,0
2958,"public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}
","public static synchronized void indexProduct(CodeIndexDocument codeShortIndex) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeShortIndex);
  indexDocuments(queue);
  queue=null;
}
",42,3,"indexDocument:indexProduct,codeIndexDocument:codeShortIndex,",83,0.193647034962972,Beam
2959,"@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
","@Override public void bookmarksOrMenuPair(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
",70,5,"bookmarksOrHistoryPicker:bookmarksOrMenuPair,",34,0.12137395143508900,Beam
2961,"public final V extractFirst(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}","public final V extractedOne(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}",62,4,"extractFirst:extractedOne,",11,0.02675419251124060,Beam
2962,,,85,5,,277,0.49114760955174800,0
2963,"public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}","public StrBuilder insertion(int element,boolean value){
  validateIndex(element);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,element,buffer,element + 4,size - element);
    buffer[element++]='t';
    buffer[element++]='r';
    buffer[element++]='u';
    buffer[element]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,element,buffer,element + 5,size - element);
    buffer[element++]='f';
    buffer[element++]='a';
    buffer[element++]='l';
    buffer[element++]='s';
    buffer[element]='e';
    size+=5;
  }
  return this;
}",159,5,"insert:insertion,index:element,",114,0.42961109479268400,Beam
2964,,,42,3,,390,0.9435689290364580,0
2965,"private void drawHost(Graphics2D g2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      g2.setColor(rangeColor);
      g2.draw(coverage);
    }
  }
  if (drawConnections) {
    g2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  g2.setColor(hostColor);
  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    g2.setColor(highlightedNodeColor);
    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    g2.setColor(hostNameColor);
    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}","private void drawHost(Graphics2D arg2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      arg2.setColor(rangeColor);
      arg2.draw(coverage);
    }
  }
  if (drawConnections) {
    arg2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      arg2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  arg2.setColor(hostColor);
  arg2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    arg2.setColor(highlightedNodeColor);
    arg2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    arg2.setColor(hostNameColor);
    arg2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}",396,21,"g2:arg2,",13,0.08554058869679770,Beam
2967,"@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
","@SuppressWarnings(""rawtypes"") public void test2streamapi(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}",131,5,"test_streamAPI:test2streamapi,",19,0.12160304784774800,Beam
2968,,,26,4,,610,1.4803216218948400,0
2969,"public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}","public InputBuilder<T> repeatAll(int rows){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < rows; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}",58,5,"times:rows,",7,0.028105302651723200,Beam
2970,,,106,8,,1486,3.1326411445935600,0
2971,,,18,2,,252,0.5507670481999720,0
2972,"public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}","public boolean isPDFFicenses(){
  String key=getSummary();
  return key != null && key.length() > 25;
}",27,2,"isPDFLicense:isPDFFicenses,",12,0.0352240244547526,Beam
2973,"public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
","public static void queueChannelLoading(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
",156,13,"queueCubeLoad:queueChannelLoading,",228,0.4839934706687930,Beam
2974,"public synchronized static LuaState newLuaState(){
  int i=getNextStateIndex();
  LuaState L=new LuaState(i);
  states.add(i,L);
  return L;
}
","public synchronized static LuaState NewLuaSource(){
  int i=getNextStateIndex();
  LuaState L=new LuaState(i);
  states.add(i,L);
  return L;
}
",37,4,"newLuaState:NewLuaSource,",11,0.028773689270019500,Beam
2975,,,92,6,,1552,3.3266671578089400,0
2976,,,199,9,,3117,17.847408624490100,0
2978,"public void updateUI(){
  super.updateUI();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,""Label.border"");
  LookAndFeel.installColorsAndFont(this,""Label.background"",""Label.foreground"",""Label.font"");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);
  if (policy != null) {
    GUIUtils.restrictSize(this,policy);
  }
}","public void UpdateGUI(){
  super.UpdateGUI();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,""Label.border"");
  LookAndFeel.installColorsAndFont(this,""Label.background"",""Label.foreground"",""Label.font"");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy po=(SizePolicy)getClientProperty(SizePolicy.class);
  if (po != null) {
    GUIUtils.restrictSize(this,po);
  }
}",110,4,"updateUI:UpdateGUI,policy:po,",342,0.8034760117530820,Beam
2979,"private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}","private void defduleCustomer(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}",58,6,"scheduleCommercial:defduleCustomer,",46,0.11396004756291700,Beam
2981,"public void updateValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}
","public void setValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}
",142,10,"updateValue:setValue,",5,0.01817330519358320,Beam
2982,"public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}
","public static void setByte(long ptr,short lit){
  if (UNALIGNED)   UNSAFE.setByte(ptr,lit);
 else   putShortByByte(ptr,lit,BIG_ENDIAN);
}
",36,4,"addr:ptr,putShort:setByte,val:lit,",443,0.9548864444096880,Beam
2983,"private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}","private void accesBreakpointInstruction(ArrayList<Instruction> instructors,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructors.size(); i++) {
    Instruction currInst=instructors.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructors.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructors.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructors.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructors.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructors.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}",378,11,"instructions:instructors,",32,0.17559694449106900,Beam
2984,,,54,9,,3612,8.594761633872990,0
2985,,,267,15,,1508,5.0441070079803500,0
2986,"public void addIncludes(String[] definitions){
  addStrings(INCLUDES,definitions);
  addStrings(linker_more,INCLUDES,definitions);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
","public void removeSources(String[] defences){
  addStrings(INCLUDES,defences);
  addStrings(linker_more,INCLUDES,defences);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
",34,4,"addIncludes:removeSources,definitions:defences,",43,0.11170657475789400,Beam
2987,"public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean Intersectships(final PlanetModel orbitModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * orbitModel.inverseAbSquared + lineVectorY * lineVectorY * orbitModel.inverseAbSquared + lineVectorZ * lineVectorZ * orbitModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * orbitModel.inverseAbSquared + lineVectorY * y0 * orbitModel.inverseAbSquared + lineVectorZ * z0 * orbitModel.inverseCSquared);
  final double C=x0 * x0 * orbitModel.inverseAbSquared + y0 * y0 * orbitModel.inverseAbSquared + z0 * z0 * orbitModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",1041,43,"intersects:Intersectships,planetModel:orbitModel,",747,3.106876536210380,Beam
2988,,,615,7,,1045,5.033964133262630,0
2989,"public static boolean isRegistered(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}
","public static boolean ISKnown(Class<?> lasse){
  return regModules.containsKey(lasse.getName());
}
",25,3,"isRegistered:ISKnown,clazz:lasse,",39,0.12190203666687000,Beam
2990,"public void addRun(final Run run){
  runs.add(run);
  run.setId(runIdCounter++);
}
","public void addrun(final Run start){
  runs.add(start);
  start.setId(runIdCounter++);
}
",25,4,"addRun:addrun,run:start,",49,0.10493953227996800,Beam
2991,"public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}
","public static void type(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  type(is,os,closeIS,true);
}
",65,6,"copy:type,",58,0.2035679777463280,Beam
2992,"public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
","public Result doComparitionUnit(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
",194,13,"doComparisonTest:doComparitionUnit,",13,0.06833184957504270,Beam
2993,"private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}","private static int createPackedParams(SunGraphics2D sg3ds,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg3ds.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}",76,7,"sg2d:sg3ds,",11,0.09642819166183470,Beam
2994,"public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException {
  if (list == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(list.size());
    out.writeBoolean(hasLongIDs);
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongIDs) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}","public static void writeListofLongs(List cache,boolean hasLID,DataOutput out) throws IOException {
  if (cache == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(cache.size());
    out.writeBoolean(hasLID);
    for (Iterator it=cache.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLID) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}",121,6,"list:cache,writeListOfLongs:writeListofLongs,hasLongIDs:hasLID,",658,1.842815367380780,Beam
2995,"public void testAndNotNegNegFirstLonger(){
  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.andNot(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void validate(){
  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.andNot(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",240,11,"testAndNotNegNegFirstLonger:validate,",25,0.07599404255549110,Beam
2996,"@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String string,@NotNull String... prefixes){
  int offset=0;
  for (  String prefix : prefixes) {
    int prefixLen=prefix.length();
    if (!string.regionMatches(offset,prefix,0,prefixLen)) {
      return false;
    }
    offset+=prefixLen;
  }
  return true;
}","@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String slice,@NotNull String... ixs){
  int offset=0;
  for (  String prefix : ixs) {
    int prefixLen=prefix.length();
    if (!slice.regionMatches(offset,prefix,0,prefixLen)) {
      return false;
    }
    offset+=prefixLen;
  }
  return true;
}",76,6,"prefixes:ixs,string:slice,",289,1.0726686517397600,Beam
2997,"private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}","private final Object internalReplace(Object k,Object o,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=o) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=o) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}",588,25,"v:o,",39,0.17146722475687700,Beam
2998,,,148,12,,2540,10.045574867725400,0
2999,"private void showPreloadingStage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
","private void showPreloadedPage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
",48,3,"showPreloadingStage:showPreloadedPage,",19,0.06232091983159380,Beam
3000,"public void push(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
","public void channel(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
",71,10,"push:channel,",61,0.2588406006495160,Beam
3001,"public byte[] generateSignature() throws CryptoException, DataLengthException {
  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);
  if (sLen != 0) {
    random.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);
  }
  byte[] h=new byte[hLen];
  contentDigest.update(mDash,0,mDash.length);
  contentDigest.doFinal(h,0);
  block[block.length - sLen - 1- hLen- 1]=0x01;
  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);
  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);
  for (int i=0; i != dbMask.length; i++) {
    block[i]^=dbMask[i];
  }
  block[0]&=(0xff >> ((block.length * 8) - emBits));
  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);
  block[block.length - 1]=trailer;
  byte[] b=cipher.processBlock(block,0,block.length);
  clearBlock(block);
  return b;
}","public byte[] generatesignATURE() throws CryptoException, DataLengthException {
  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);
  if (sLen != 0) {
    seed.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);
  }
  byte[] h=new byte[hLen];
  contentDigest.update(mDash,0,mDash.length);
  contentDigest.doFinal(h,0);
  block[block.length - sLen - 1- hLen- 1]=0x01;
  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);
  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);
  for (int i=0; i != dbMask.length; i++) {
    block[i]^=dbMask[i];
  }
  block[0]&=(0xff >> ((block.length * 8) - emBits));
  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);
  block[block.length - 1]=trailer;
  byte[] b=cipher.processBlock(block,0,block.length);
  clearBlock(block);
  return b;
}",267,15,"generateSignature:generatesignATURE,random:seed,",1272,6.204940807819370,Beam
3002,,,157,7,,1466,14.657879968484200,0
3003,"public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);
  return results;
}","public int[] breadthFirstSection(int intialValue,IBFSTraversable<N> traVERSal,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traVERSal,nextValueIterator);
  return results;
}",110,9,"breadthFirstSearch:breadthFirstSection,traversable:traVERSal,",295,1.7312604745229100,Beam
3006,,,15,1,,53,0.3987324953079220,0
3007,"private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}","private static <T>int migrateall(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}",104,5,"migrateAll:migrateall,",34,0.1435745358467100,Beam
3008,,,86,10,,1767,18.507197304566700,0
3009,"public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){
  return parentName;
}
","public String resolveParentRelationName(String parentName,Object parent,String childType,Object child){
  return parentName;
}
",21,5,"childName:childType,",50,0.27754635413487800,Beam
3010,"public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}","public final static int caculateInSampleStyle(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}",116,9,"caculateInSampleSize:caculateInSampleStyle,",4,0.024373352527618400,Beam
3011,"private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
","private Map<URI,ExportMask> createImportMaskTable(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
",86,6,"createExportMaskMap:createImportMaskTable,",11,0.07653248310089110,Beam
3012,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}","private void loadClass(ObjectInputStream binary) throws IOException, ClassNotFoundException {
  binary.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}",35,4,"readObject:loadClass,in:binary,",149,1.0916258533795700,Beam
3013,"public synchronized void addRecentItem(T item){
  item=fromString(toString(item));
  if (m_RecentItems.size() > 0) {
    if (item.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(item);
  m_RecentItems.add(0,item);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(item);
}","public synchronized void addCurrentEntry(T container){
  container=fromString(toString(container));
  if (m_RecentItems.size() > 0) {
    if (container.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(container);
  m_RecentItems.add(0,container);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(container);
}",106,5,"item:container,addRecentItem:addCurrentEntry,",55,0.31695353984832800,Beam
3014,"public JSONObject remove(String name){
  if (name == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.remove(index);
    names.remove(index);
    values.remove(index);
  }
  return this;
}","public JSONObject pop(String id){
  if (id == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(id);
  if (index != -1) {
    table.pop(index);
    names.pop(index);
    values.pop(index);
  }
  return this;
}",65,6,"remove:pop,name:id,",105,0.5995271960894270,Beam
3015,"@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(left,leftBound),rightBound);
}","@Override public int clampViewPositionHorizontal(View child,int bottom,int dx){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(bottom,leftBound),rightBound);
}",75,9,"left:bottom,",57,0.8896584113438930,Beam
3016,"public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}","public Pair<String,String> first(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}",149,11,"next:first,",3,0.028846212228139200,Beam
3017,"public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}
","public synchronized void readframe(final Image media,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(media,totalDuration));
}
",32,5,"addFrame:readframe,image:media,",174,0.9419527053833010,Beam
3018,"private static void createOrgAuthConfig(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}","private static void upgrade(String alarmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,alarmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + alarmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=alarmName;
    if (LDAPUtils.isDN(alarmName)) {
      orgName=LDAPUtils.rdnValueFromDn(alarmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}",398,17,"createOrgAuthConfig:upgrade,realmName:alarmName,",71,0.5190011938412980,Beam
3019,,,41,4,,1139,9.75622820854187,0
3020,"public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}","public static DoubleVector rnorm(int t,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(t,mean);
  DoubleVector v=new DoubleVector(t);
  for (int i=0; i < t; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}",92,7,"n:t,",119,1.0114068229993200,Beam
3021,,,68,5,,142,0.9064583301544190,0
3022,,,277,13,,2872,19.681316840648700,0
3023,"public void cancelUnnamedTasks(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
","public void cancelUnnamedPests(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
",21,2,"cancelUnnamedTasks:cancelUnnamedPests,",7,0.04367519617080690,Beam
3024,,,29,4,,250,1.3463806549708000,0
3025,"public void addRtcpListener(RtcpEventListener listener){
  listeners.addElement(listener);
}
","public void addRpcpHandler(RtcpEventListener adder){
  listeners.addElement(adder);
}
",16,3,"addRtcpListener:addRpcpHandler,listener:adder,",49,0.2934619148572290,Beam
3026,,,106,7,,1310,12.053197626272800,0
3027,"protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}","protected void findCandidateCrossings(S2Point p,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(p,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(p,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}",93,7,"a:p,",17,0.16727556387583400,Beam
3028,"private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){
  Set<String> removeSet=new HashSet<String>();
  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);
  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();
  for (  String swcDependLocation : dependencyMap.get(swcLocation)) {
    for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) {
      if (swcDependLocation.equals(swcDependLocation2))       continue;
      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);
      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);
      if (externalScripts == null) {
        externalScripts=externalInfo.getExternalScripts(swcDependLocation);
        externalsBySwc.put(swcDependLocation,externalScripts);
      }
      if (externalScripts2 == null) {
        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);
        externalsBySwc.put(swcDependLocation2,externalScripts2);
      }
      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {
        removeSet.add(swcDependLocation);
        break;
      }
    }
  }
  Set<String> dependencySet=dependencyMap.get(swcLocation);
  dependencySet.removeAll(removeSet);
}","private static void removeDependenciesSubstrings(String swcLocation,Map<String,Set<String>> dependenceMap,SwcDependencyInfoImpl depInfo){
  Set<String> removeSet=new HashSet<String>();
  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);
  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();
  for (  String swcDependLocation : dependenceMap.get(swcLocation)) {
    for (    String swcDependLocation2 : dependenceMap.get(swcLocation)) {
      if (swcDependLocation.equals(swcDependLocation2))       continue;
      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);
      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);
      if (externalScripts == null) {
        externalScripts=externalInfo.getExternalScripts(swcDependLocation);
        externalsBySwc.put(swcDependLocation,externalScripts);
      }
      if (externalScripts2 == null) {
        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);
        externalsBySwc.put(swcDependLocation2,externalScripts2);
      }
      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {
        removeSet.add(swcDependLocation);
        break;
      }
    }
  }
  Set<String> dependencySet=dependenceMap.get(swcLocation);
  dependencySet.removeAll(removeSet);
}",241,12,"removeDependencySubsets:removeDependenciesSubstrings,dependencyMap:dependenceMap,",248,1.9727537155151400,Beam
3029,"public Iterator<String> iterateSerializers(){
  return serializers.iterator();
}
","public Iterator<String> iteratesSerializers(){
  return serializers.iterator();
}
",17,2,"iterateSerializers:iteratesSerializers,",6,0.03681202332178750,Beam
3030,"private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
","private double Roizzle(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
",34,3,"Poisson:Roizzle,",7,0.04649020433425900,Beam
3031,,,41,3,,451,2.7030028025309200,0
3033,"default B with(String key,long value){
  return with(key,Long.toString(value));
}
","default B by(String name,long value){
  return by(name,Long.toString(value));
}
",25,3,"with:by,key:name,",128,0.872068993250529,Beam
3034,"public KeyValueListParser(String pairDelimiterRegex,String keyValDelimiterRegex){
  pairDelimiter=Pattern.compile(pairDelimiterRegex);
  keyValDelimiter=Pattern.compile(keyValDelimiterRegex);
}
","public KeyListlistparser(String pairDelimiterExlex,String keyValDelimiterRegex){
  pairDelimiter=Pattern.compile(pairDelimiterExlex);
  keyValDelimiter=Pattern.compile(keyValDelimiterRegex);
}
",29,5,"KeyValueListParser:KeyListlistparser,pairDelimiterRegex:pairDelimiterExlex,",196,1.5607346177101100,Beam
3035,"private static void logOsInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
","private static void writeOsInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
",89,1,"logOsInfo:writeOsInfo,",4,0.02462876240412390,Beam
3036,"public static String noPrefix(String path,String prefix){
  Objects.requireNonNull(path,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}
","public static String noPoixed(String path,String prefix){
  Objects.requireNonNull(path,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}
",52,3,"noPrefix:noPoixed,",74,0.4654312570889790,Beam
3037,,,120,11,,807,5.213452577590940,0
3038,"private static void encode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}","private static void Enode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}",588,33,"encode:Enode,",18,0.10932606856028200,Beam
3039,,,37,3,,332,1.7030615329742400,0
3040,"default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}
","default ByteBuffer serialise(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialise(value,buffer);
  return buffer;
}
",32,3,"serialize:serialise,",3,0.017808512846628800,Beam
3041,,,94,5,,604,4.741986433664960,0
3042,"private boolean isIndexable(String term){
  return (term.length() < 30) && (term.length() > 2);
}","private boolean isindexable(String temp){
  return (temp.length() < 30) && (temp.length() > 2);
}",30,2,"term:temp,isIndexable:isindexable,",84,0.5355525890986130,Beam
3043,"private int decodeRunLength(int k){
  if ((k & 1) == 1) {
    return ((k >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;
  }
}","private int decoderunCount(int z){
  if ((z & 1) == 1) {
    return ((z >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(z << p + (31 - sp)) + 1;
  }
}",57,4,"decodeRunLength:decoderunCount,k:z,",61,0.4290943662325540,Beam
3044,"public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
","public String completeform(final String text,final String lowString){
  String ret=lowString;
  PrefixEntry lost=prefixMap.get(text);
  if (lost != null) {
    ret=lost.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (text.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
",92,8,"fullForm:completeform,str:text,found:lost,",993,7.444933426380160,Beam
3045,"static int writeVarLong(OutputStream out,long x) throws IOException {
  int len=0;
  while ((x & ~0x7f) != 0) {
    out.write((byte)(0x80 | (x & 0x7f)));
    x>>>=7;
    len++;
  }
  out.write((byte)x);
  return ++len;
}","static int writevarL(OutputStream writer,long r) throws IOException {
  int len=0;
  while ((r & ~0x7f) != 0) {
    writer.write((byte)(0x80 | (r & 0x7f)));
    r>>>=7;
    len++;
  }
  writer.write((byte)r);
  return ++len;
}",71,4,"writeVarLong:writevarL,x:r,out:writer,",534,3.4177360971768700,Beam
3046,"public void cleanStart(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  conn=null;
}","public void safeEnd(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  conn=null;
}",84,4,"cleanStart:safeEnd,",7,0.025883551438649500,Beam
3047,"public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}","public void testFilamedClassifer(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}",88,5,"testFilteredClassifier:testFilamedClassifer,",10,0.23167632420857700,Beam
3048,"public static boolean isPrimitiveDatatype(IRI datatype){
  return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.DATE)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GDAY)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.STRING)|| datatype.equals(XMLSchema.BOOLEAN)|| datatype.equals(XMLSchema.BASE64BINARY)|| datatype.equals(XMLSchema.HEXBINARY)|| datatype.equals(XMLSchema.FLOAT)|| datatype.equals(XMLSchema.DECIMAL)|| datatype.equals(XMLSchema.DOUBLE)|| datatype.equals(XMLSchema.ANYURI)|| datatype.equals(XMLSchema.QNAME)|| datatype.equals(XMLSchema.NOTATION);
}","public static boolean isPrimitiveDatataype(IRI datatime){
  return datatime.equals(XMLSchema.DURATION) || datatime.equals(XMLSchema.DATETIME) || datatime.equals(XMLSchema.TIME)|| datatime.equals(XMLSchema.DATE)|| datatime.equals(XMLSchema.GYEARMONTH)|| datatime.equals(XMLSchema.GYEAR)|| datatime.equals(XMLSchema.GMONTHDAY)|| datatime.equals(XMLSchema.GDAY)|| datatime.equals(XMLSchema.GMONTH)|| datatime.equals(XMLSchema.STRING)|| datatime.equals(XMLSchema.BOOLEAN)|| datatime.equals(XMLSchema.BASE64BINARY)|| datatime.equals(XMLSchema.HEXBINARY)|| datatime.equals(XMLSchema.FLOAT)|| datatime.equals(XMLSchema.DECIMAL)|| datatime.equals(XMLSchema.DOUBLE)|| datatime.equals(XMLSchema.ANYURI)|| datatime.equals(XMLSchema.QNAME)|| datatime.equals(XMLSchema.NOTATION);
}",182,2,"isPrimitiveDatatype:isPrimitiveDatataype,datatype:datatime,",126,1.6177119612693800,Beam
3049,,,175,11,,1289,9.657089030742650,0
3050,"public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}","public final void readInSteam(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readInSteam(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}",251,21,"readFromStream:readInSteam,",26,0.16451010704040500,Beam
3051,,,65,5,,752,4.2907469550768500,0
3052,"protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}","protected void train(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}",639,25,"adjustCanopies:train,",28,0.2055898149808250,Beam
3053,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newVal;
  count++;
  firstTime=false;
}
","@Override public void acc(Object newVal){
  if (newVal instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newVal;
  count++;
  firstTime=false;
}
",88,6,"agg:acc,",4,0.022275956471761100,Beam
3054,"public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentConstraints) {
    if (argConstraint instanceof F2A) {
      assignmentAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentAfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);
  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);
}","public ConstraintMap createAssignmentConstraint(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentConfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentConfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentConfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentConfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentConfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentConstraints) {
    if (argConstraint instanceof F2A) {
      assignmentConfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentConfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);
  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);
}",318,17,"createAssignmentConstraints:createAssignmentConstraint,assignmentAfs:assignmentConfs,",2128,17.085010941823300,Beam
3055,"public final void goToNextPage(){
  final boolean isLastPage=viewPager.getCurrentItem() == (pages.size() - 1);
  if (!isLastPage) {
    viewPager.setCurrentItem(viewPager.getCurrentItem() + 1,true);
  }
}","public final void goToLastItem(){
  final boolean isLastPage=viewPoager.getCurrentItem() == (pages.size() - 1);
  if (!isLastPage) {
    viewPoager.setCurrentItem(viewPoager.getCurrentItem() + 1,true);
  }
}",50,4,"goToNextPage:goToLastItem,viewPager:viewPoager,",185,1.1130908807118700,Beam
3057,,,16,2,,168,0.9201438824335730,0
3058,"private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}","private P filterLargeValueSorts(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}",161,13,"filterLargeValueSets:filterLargeValueSorts,",94,0.534555721282959,Beam
3059,"void repaintChildren(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
","void repillMembers(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
",25,3,"repaintChildren:repillMembers,",9,0.04583207766215010,Beam
3060,,,46,5,,1053,4.94808132648468,0
3061,,,1031,28,,1609,15.983880043029800,0
3062,"@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + listener);
  }
  notifBroadcaster.removeNotificationListener(listener);
}
","@Override public void removenotifyingServer(NotificationListener LISTler) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + LISTler);
  }
  notifBroadcaster.removenotifyingServer(LISTler);
}
",50,4,"removeNotificationListener:removenotifyingServer,listener:LISTler,",149,1.153051749865210,Beam
3063,"@Override public List chunkString(String sToChunk){
  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);
  return Arrays.asList(sRes);
}
","@Override public List SplunkArray(String sToClone){
  Integer[] iRes=splitPointsByDelimiterList(sToClone,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToClone,iRes);
  return Arrays.asList(sRes);
}
",45,4,"chunkString:SplunkArray,sToChunk:sToClone,",105,0.6122206091880800,Beam
3064,"public static <S>boolean containsAtleastOne(Collection<S> left,Collection<S> right){
  if (left == null || right == null) {
    return false;
  }
  for (  S id : left) {
    if (right.contains(id)) {
      return true;
    }
  }
  return false;
}
","public static <S>boolean containsAtastastOne(Collection<S> last,Collection<S> rap){
  if (last == null || rap == null) {
    return false;
  }
  for (  S id : last) {
    if (rap.contains(id)) {
      return true;
    }
  }
  return false;
}
",63,4,"left:last,right:rap,containsAtleastOne:containsAtastastOne,",329,2.300853721300760,Beam
3065,"static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}
","static public void loop(String input,String output,String packFileName){
  loop(new Settings(),input,output,packFileName);
}
",30,4,"process:loop,",108,0.5139775117238360,Beam
3066,"private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}","private void createBlockMirridata(String name,int numBlockMirrs) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrs; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}",150,12,"createBlockMirrorData:createBlockMirridata,numBlockMirrors:numBlockMirrs,",89,0.4756167014439900,Beam
3067,"private void initializeLayout(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}","private void initializeLi(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}",116,7,"initializeLayout:initializeLi,",3,0.020190378030141200,Beam
3068,,,12,1,,25,0.13238236904144300,0
3069,"private void reloadModelWithNewValue(final Long newValue){
  final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue;
  for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) {
    final PropertyChangeEvent event=new PropertyChangeEvent(this,""model"",getModelUpdatePeriod(),newValueAsPrimitive);
    listener.propertyChange(event);
  }
}
","private void reloadModelwithNewValue(final Long newValue){
  final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue;
  for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) {
    final PropertyChangeEvent event=new PropertyChangeEvent(this,""model"",getModelUpdatePeriod(),newValueAsPrimitive);
    listener.propertyChange(event);
  }
}
",59,6,"reloadModelWithNewValue:reloadModelwithNewValue,",6,0.029685374101003000,Beam
3070,"private void resetShapeBounds(){
  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;
  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}","private void resetShapeFounding(){
  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;
  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}",48,2,"resetShapeBounds:resetShapeFounding,",10,0.050616625944773400,Beam
3073,"private void throwArrayIndexOutOfBoundsException(int itemIndex){
  throw new ArrayIndexOutOfBoundsException(""Your item index can\'t be 0 or greater than space item size,"" + "" your items size is "" + spaceItems.size() + "", your current index is :""+ itemIndex);
}","private void throwArrayIndexOutOfBoundsException(int dimensionInd){
  throw new ArrayIndexOutOfBoundsException(""Your item index can\'t be 0 or greater than space item size,"" + "" your items size is "" + spaceItems.size() + "", your current index is :""+ dimensionInd);
}",28,3,"itemIndex:dimensionInd,",36,0.2271133542060850,Beam
3074,"public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
","public JSONObject asJml() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.asJml());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
",70,5,"toJson:asJml,",12,0.06978341341018680,Beam
3075,"public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}
","public void insert(ClassNode type,int n){
  remove(n);
  push(type);
}
",22,3,"replace:insert,",3,0.015731271107991500,Beam
3077,"public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){
  Collection<T> newCollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : mutableCollection) {
    newCollection.add(Utils.makeImmutable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}
","public static <T>Collection<T> createImmutable(Collection<T> movableContainer){
  Collection<T> newCollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)movableContainer.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : movableContainer) {
    newCollection.add(Utils.createImmutable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}
",110,6,"makeImmutable:createImmutable,mutableCollection:movableContainer,",72,0.42050742308298700,Beam
3078,"private void applyL1Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}","private void applyL1Reg(final double ta_k,Vec lex){
  if (lambda1 > 0) {
    l1U+=ta_k * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : lex) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}",173,14,"x:lex,eta_t:ta_k,",88,0.9876890500386560,Beam
3079,"public static double incompleteBetaFraction2(double a,double b,double x){
  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
  double k1, k2, k3, k4, k5, k6, k7, k8;
  double r, t, ans, z, thresh;
  int n;
  k1=a;
  k2=b - 1.0;
  k3=a;
  k4=a + 1.0;
  k5=1.0;
  k6=a + b;
  k7=a + 1.0;
  ;
  k8=a + 2.0;
  pkm2=0.0;
  qkm2=1.0;
  pkm1=1.0;
  qkm1=1.0;
  z=x / (1.0 - x);
  ans=1.0;
  r=1.0;
  n=0;
  thresh=3.0 * MACHEP;
  do {
    xk=-(z * k1 * k2) / (k3 * k4);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    xk=(z * k5 * k6) / (k7 * k8);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    if (qk != 0) {
      r=pk / qk;
    }
    if (r != 0) {
      t=Math.abs((ans - r) / r);
      ans=r;
    }
 else {
      t=1.0;
    }
    if (t < thresh) {
      return ans;
    }
    k1+=1.0;
    k2-=1.0;
    k3+=2.0;
    k4+=2.0;
    k5+=1.0;
    k6+=1.0;
    k7+=2.0;
    k8+=2.0;
    if ((Math.abs(qk) + Math.abs(pk)) > big) {
      pkm2*=biginv;
      pkm1*=biginv;
      qkm2*=biginv;
      qkm1*=biginv;
    }
    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
      pkm2*=big;
      pkm1*=big;
      qkm2*=big;
      qkm1*=big;
    }
  }
 while (++n < 300);
  return ans;
}","public static double distance(double a,double b,double x){
  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
  double k1, k2, k3, k4, k5, k6, k7, k8;
  double r, t, ans, z, thresh;
  int n;
  k1=a;
  k2=b - 1.0;
  k3=a;
  k4=a + 1.0;
  k5=1.0;
  k6=a + b;
  k7=a + 1.0;
  ;
  k8=a + 2.0;
  pkm2=0.0;
  qkm2=1.0;
  pkm1=1.0;
  qkm1=1.0;
  z=x / (1.0 - x);
  ans=1.0;
  r=1.0;
  n=0;
  thresh=3.0 * MACHEP;
  do {
    xk=-(z * k1 * k2) / (k3 * k4);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    xk=(z * k5 * k6) / (k7 * k8);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    if (qk != 0) {
      r=pk / qk;
    }
    if (r != 0) {
      t=Math.abs((ans - r) / r);
      ans=r;
    }
 else {
      t=1.0;
    }
    if (t < thresh) {
      return ans;
    }
    k1+=1.0;
    k2-=1.0;
    k3+=2.0;
    k4+=2.0;
    k5+=1.0;
    k6+=1.0;
    k7+=2.0;
    k8+=2.0;
    if ((Math.abs(qk) + Math.abs(pk)) > big) {
      pkm2*=biginv;
      pkm1*=biginv;
      qkm2*=biginv;
      qkm1*=biginv;
    }
    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
      pkm2*=big;
      pkm1*=big;
      qkm2*=big;
      qkm1*=big;
    }
  }
 while (++n < 300);
  return ans;
}",431,27,"incompleteBetaFraction2:distance,",91,0.7339569886525470,Beam
3080,,,19,2,,290,1.534196428457900,0
3081,,,167,10,,2645,19.234120988845800,0
3082,,,29,3,,523,4.034771458307900,0
3083,"synchronized boolean release(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
","synchronized boolean lease(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
",41,5,"release:lease,",17,0.09975263675053920,Beam
3084,"public ImmutableArray2<K> insert(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}","public ImmutableArray2<K> except(int ind,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (ind == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > ind && x.getAndSet(false)) {
        array[ind]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,ind);
  a2[ind]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}",167,11,"index:ind,insert:except,",271,2.292409586906430,Beam
3085,,,24,4,,378,1.7120348811149600,0
3086,"private byte[] writeCheckedBytes(MessageNano proto){
  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
  wrapper.payload=MessageNano.toByteArray(proto);
  CRC32 checksum=new CRC32();
  checksum.update(wrapper.payload);
  wrapper.checksum=checksum.getValue();
  return MessageNano.toByteArray(wrapper);
}","private byte[] writeCheingMessage(MessageNano protpo){
  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
  wrapper.payload=MessageNano.toByteArray(protpo);
  CRC32 checksum=new CRC32();
  checksum.update(wrapper.payload);
  wrapper.checksum=checksum.getValue();
  return MessageNano.toByteArray(wrapper);
}",69,4,"writeCheckedBytes:writeCheingMessage,proto:protpo,",53,0.3409725069999700,Beam
3087,,,51,3,,464,3.844116489092510,0
3088,"public static double powQuick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
","public static double poddquick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
",55,5,"powQuick:poddquick,",14,0.14715625047683700,Beam
3089,,,225,3,,559,3.4673705299695300,0
3090,"public final synchronized byte[] toByteArray(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toByteArray();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}","public final synchronized byte[] tobyteString(){
  ByteArrayOutputStream tao=null;
  DataOutputStream dos=null;
  try {
    tao=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(tao);
    game.writeToStream(dos);
    dos.flush();
    return tao.tobyteString();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (tao != null)     try {
      tao.close();
    }
 catch (    IOException ex) {
    }
  }
}",117,4,"toByteArray:tobyteString,baos:tao,",330,1.8881044705708800,Beam
3091,"public void closeFile(){
  closeFile(true);
}
","public void openResource(){
  openResource(true);
}
",12,1,"closeFile:openResource,",7,0.037345484892527300,Beam
3092,"public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
","public void ad(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.ad(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
",56,5,"add:ad,",29,0.1313651482264200,Beam
3093,"protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
","protected static boolean isCglibGetCallbacks(AnnotatedMethod ram){
  Class<?> rt=ram.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
",102,6,"am:ram,",3,0.05503137509028120,Beam
3094,"private Sha256Hash calculateHash(){
  try {
    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(bos);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private Sha256Hash calateatedSalt(){
  try {
    ByteArrayOutputStream bott=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(bott);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bott.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",57,4,"calculateHash:calateatedSalt,bos:bott,",65,0.4161389350891110,Beam
3095,"private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}","private static String ReadHeader(String form,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(form.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}",64,5,"readComment:ReadHeader,input:form,",927,4.806319729487100,Beam
3096,"@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){
  return term1.compareTo(term2);
}","@Override public int omper(NewSplitEmittedTerm TermOne,NewSplitEmittedTerm term2){
  return TermOne.compareTo(term2);
}",22,3,"term1:TermOne,compare:omper,",48,0.45288464228312200,Beam
3097,"public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}
","public static void closedQuiets(@Nullable SelectionKey rsrt){
  if (rsrt != null)   closedQuiets(rsrt.channel());
}
",27,2,"closeQuiet:closedQuiets,rsrc:rsrt,",66,0.31994611422220900,Beam
3098,,,77,5,,703,3.4537490606308000,0
3099,"public int size(){
  return _attrs.size();
}
","public int empty(){
  return _attrs.empty();
}
",14,2,"size:empty,",6,0.029793270428975400,Beam
3100,"private void writeLog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
","private void Writelog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
",86,6,"writeLog:Writelog,",13,0.07747502326965330,Beam
3101,"private void writeJarPostResource(Element postResourceEl,String path){
  postResourceEl.setAttribute(""className"",JAR_RESOURCE_SET);
  postResourceEl.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
","private void writeJarPostResource(Element postRequestEle,String path){
  postRequestEle.setAttribute(""className"",JAR_RESOURCE_SET);
  postRequestEle.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
",37,3,"postResourceEl:postRequestEle,",42,0.17271807591120400,Beam
3102,"public void disable(RichFormatterFeature feature){
  features.remove(feature);
}
","public void disabled(RichFormatterFeature section){
  features.remove(section);
}
",16,3,"feature:section,disable:disabled,",60,0.29239238500595100,Beam
3103,"private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(process,g2);
    break;
case NONE:
default :
  break;
}
}
}","private void renderDrawground(final ExecutionUnit program,final Graphics2D vgond,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(program,vgond);
    break;
case NONE:
default :
  break;
}
}
}",84,9,"g2:vgond,process:program,renderForeground:renderDrawground,",481,2.847968832651770,Beam
3104,"static void policyChanged(String serviceTypeName,PolicyEvent pe){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName);
  }
  resourceNamesMap.remove(serviceTypeName);
  Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName);
  if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) {
    return;
  }
  try {
    DEBUG.error(""PolicyEvaluator.policyChanged: enterred try block"");
    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();
    ServiceType serviceType=stm.getServiceType(serviceTypeName);
    Set resourceNamesToRemove=new HashSet();
synchronized (resourceNamesCache) {
      Enumeration resourceNames=resourceNamesCache.keys();
      while (resourceNames.hasMoreElements()) {
        String resourceName=(String)resourceNames.nextElement();
        if (resourceNamesToRemove.contains(resourceName)) {
          continue;
        }
        Set affectedResourceNames=pe.getResourceNames();
        Iterator iter=affectedResourceNames.iterator();
        while (iter.hasNext()) {
          String affectedResourceName=(String)iter.next();
          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {
            resourceNamesToRemove.add(resourceName);
          }
        }
      }
      Iterator iter1=resourceNamesToRemove.iterator();
      while (iter1.hasNext()) {
        String resourceNameToRemove=(String)iter1.next();
        resourceNamesCache.remove(resourceNameToRemove);
      }
    }
  }
 catch (  SSOException e) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",e);
  }
catch (  PolicyException pex) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",pex);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName + "", new cached resoruceNames=""+ resourceNamesMap.get(serviceTypeName));
  }
}","static void policyChanged(String serviceTypeName,PolicyEvent te){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName);
  }
  resourceNamesMap.remove(serviceTypeName);
  Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName);
  if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) {
    return;
  }
  try {
    DEBUG.error(""PolicyEvaluator.policyChanged: enterred try block"");
    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();
    ServiceType serviceType=stm.getServiceType(serviceTypeName);
    Set resourceNamesToRemove=new HashSet();
synchronized (resourceNamesCache) {
      Enumeration resourceNames=resourceNamesCache.keys();
      while (resourceNames.hasMoreElements()) {
        String resourceName=(String)resourceNames.nextElement();
        if (resourceNamesToRemove.contains(resourceName)) {
          continue;
        }
        Set affectedResourceNames=te.getResourceNames();
        Iterator iter=affectedResourceNames.iterator();
        while (iter.hasNext()) {
          String affectedResourceName=(String)iter.next();
          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {
            resourceNamesToRemove.add(resourceName);
          }
        }
      }
      Iterator iter1=resourceNamesToRemove.iterator();
      while (iter1.hasNext()) {
        String resourceNameToRemove=(String)iter1.next();
        resourceNamesCache.remove(resourceNameToRemove);
      }
    }
  }
 catch (  SSOException e) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",e);
  }
catch (  PolicyException pex) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",pex);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName + "", new cached resoruceNames=""+ resourceNamesMap.get(serviceTypeName));
  }
}",320,17,"pe:te,",6,0.07729769150416060,Beam
3105,"public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}","public static StringBuffer replaceString(StringBuffer bar,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=bar.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      bar.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return bar;
}",115,6,"buffer:bar,",19,0.14503625233968100,Beam
3106,,,16,3,,337,2.176773313681290,0
3107,,,151,5,,883,6.189952806631720,0
3108,,,18,6,,843,3.460039945443470,0
3109,"public void onStart(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}","public void OnStop(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}",51,4,"onStart:OnStop,",7,0.10740450223286900,Beam
3110,"public boolean hasNameValue(String name){
  return nameValueMap.containsKey(name.toLowerCase());
}
","public boolean hasValueVal(String part){
  return nameValueSet.containsKey(part.toLowerCase());
}
",21,3,"hasNameValue:hasValueVal,name:part,nameValueMap:nameValueSet,",266,1.39380810658137,Beam
3111,,,33,4,,451,2.543871581554410,0
3112,"public static void overwrite(long[] vector,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}","public static void overreplace(long[] iterator,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  iterator[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  iterator[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    iterator[idx + 1]&=~mask;
    iterator[idx + 1]|=(val >>> truncatedValLen);
  }
}",117,9,"overwrite:overreplace,vector:iterator,",243,1.3362245718638100,Beam
3113,,,21,3,,579,3.3510034521420800,0
3114,"private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
","private void handleAccount(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
",239,6,"onUser:handleAccount,",40,0.25292123953501400,Beam
3115,"private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}
","private synchronized void addTablelockObject(AbsoluteTableIdentifier absoluteTableSequizer){
  if (null == tableLockMap.get(absoluteTableSequizer)) {
    tableLockMap.put(absoluteTableSequizer,new Object());
  }
}
",35,3,"addTableLockObject:addTablelockObject,absoluteTableIdentifier:absoluteTableSequizer,",76,0.3914183020591740,Beam
3117,"public boolean match(MimeType other){
  if (this == other)   return true;
  if (type != null && other.type != null && !type.equals(other.type))   return false;
  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;
  return true;
}
","public boolean include(MimeType other){
  if (this == other)   return true;
  if (type != null && other.type != null && !type.equals(other.type))   return false;
  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;
  return true;
}
",71,4,"match:include,",37,0.22007460594177200,Beam
3119,"public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}","public static void NotShort(String component,String msg){
  if (component == null || component.length() == 0)   throw new IllegalArgumentException(msg);
}",34,3,"notEmpty:NotShort,string:component,",114,0.4527523080507910,Beam
3121,"@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);
  frameRate=usbCamSetupVideoExParam.framerate;
  whiteBalance=usbCamSetupVideoExParam.wb;
  saturation=usbCamSetupVideoExParam.saturation;
  brightness=usbCamSetupVideoExParam.brightness;
  contrast=usbCamSetupVideoExParam.contrast;
  sharpness=usbCamSetupVideoExParam.sharpness;
  imageEffectMode=usbCamSetupVideoExParam.effectmode;
  frameSize=usbCamSetupVideoExParam.framesize;
  evLevel=usbCamSetupVideoExParam.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}","@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupMediaEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);
  frameRate=usbCamSetupVideoExParam.framerate;
  whiteBalance=usbCamSetupVideoExParam.wb;
  saturation=usbCamSetupVideoExParam.saturation;
  brightness=usbCamSetupVideoExParam.brightness;
  contrast=usbCamSetupVideoExParam.contrast;
  sharpness=usbCamSetupVideoExParam.sharpness;
  imageEffectMode=usbCamSetupVideoExParam.effectmode;
  frameSize=usbCamSetupVideoExParam.framesize;
  evLevel=usbCamSetupVideoExParam.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}",136,15,"sceUsbCamSetupVideoEx:sceUsbCamSetupMediaEx,",4,0.023187255859375,Beam
3122,,,99,6,,266,1.3145790100097700,0
3123,,,32,5,,221,0.9380048116048180,0
3124,"public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}","public void processPage(boolean showBuffonds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBuffonds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}",190,11,"showBounds:showBuffonds,dumpIndex:processPage,",124,0.6829112251599630,Beam
3125,"public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.loadClass(name,resolve));
}","public Class<?> loadClass(String part,boolean resolve) throws ClassNotFoundException {
  int i=part.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(part.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(part)) {
    Class<?> c=findLoadedClass(part);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(part);
  }
  return (super.loadClass(part,resolve));
}",130,8,"name:part,",52,0.27254589001337700,Beam
3126,"protected void handleOrDeferMessage(DistributionMessage msg){
synchronized (startupLock) {
    if (beingSick || playingDead) {
      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
        startupMessages.add(new StartupEvent(msg));
        return;
      }
    }
    if (!processingEvents) {
      startupMessages.add(new StartupEvent(msg));
      return;
    }
  }
  dispatchMessage(msg);
}
","protected void handleOrdeferrMessage(DistributionMessage msg){
synchronized (startupLock) {
    if (beingSick || playingDead) {
      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
        startupMessages.add(new StartupEvent(msg));
        return;
      }
    }
    if (!processingEvents) {
      startupMessages.add(new StartupEvent(msg));
      return;
    }
  }
  dispatchMessage(msg);
}
",75,7,"handleOrDeferMessage:handleOrdeferrMessage,",49,0.5303635994593300,Beam
3127,,,17,1,,33,0.1479705572128300,0
3128,,,24,2,,285,1.3253377040227300,0
3129,"private int calculateMenuMargin(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}
","private int calculateMenuDivin(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_JUSTIFIC);
}
",64,6,"calculateMenuMargin:calculateMenuDivin,MENU_MARGIN_RELATIVE_MODIFIER:MENU_MARGIN_RELATIVE_JUSTIFIC,",158,0.8938976923624670,Beam
3130,"private void adjustBCIndex(Instruction barrier){
  NormalMethod source=barrier.position().method;
  if (source.isForOsrSpecialization()) {
    barrier.adjustBytecodeIndex(-source.getOsrPrologueLength());
  }
}
","private void adjustBCPosition(Instruction Barrian){
  NormalMethod source=Barrian.position().method;
  if (source.isForOsrSpecialization()) {
    Barrian.adjustBytecodeIndex(-source.getOsrPrologueLength());
  }
}
",42,3,"barrier:Barrian,adjustBCIndex:adjustBCPosition,",69,0.41405036449432400,Beam
3131,,,18,2,,271,1.2826712210973100,0
3132,,,39,5,,1024,5.925463843345640,0
3133,"public void disable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}","public void set(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.set());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}",327,10,"disable:set,",53,0.4271182616551720,Beam
3134,,,43,4,,204,0.9122450272242230,0
3135,,,192,9,,1729,14.688058745861100,0
3136,,,35,4,,596,2.9830471674601200,0
3137,"protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
","protected List<URI> se(final InputStream xml) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(xml,this);
  return groups;
}
",78,6,"load:se,in:xml,",89,0.47028342088063600,Beam
3138,"public void add(double weight,double x,double y){
  observations.add(new WeightedObservedPoint(weight,x,y));
}
","public void change(double weight,double x,double y){
  observations.change(new WeightedObservedPoint(weight,x,y));
}
",30,5,"add:change,",14,0.07698482275009160,Beam
3139,"@Override public SoftwarePIDController withTolerance(double tolerance){
  target=target.withTolerance(Math.abs(tolerance));
  return this;
}
","@Override public SoftwarePIDController withTangle(double tolerance){
  target=target.withTangle(Math.abs(tolerance));
  return this;
}
",28,3,"withTolerance:withTangle,",10,0.056019635995229100,Beam
3140,,,17,4,,301,1.4725640773773200,0
3141,"public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){
  if (compareArraySize(expected,actual)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[actual.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < actual.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(actual[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(actual));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}","public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] present){
  if (compareArraySize(expected,present)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[present.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < present.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(present[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(present));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}",185,10,"actual:present,",24,0.4980075478553770,Beam
3142,"public static String fetchClusterName(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}","public static String fetchClancerPath(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}",52,4,"fetchClusterName:fetchClancerPath,",14,0.06243139902750650,Beam
3143,"public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}","public boolean softSignIn() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}",120,5,"softSignin:softSignIn,",6,0.043303298950195300,Beam
3144,,,135,8,,311,1.8447140296300300,0
3145,"public boolean isPronoun(){
  return typeString.contains(SUFFIX_PRONOUN);
}
","public boolean ispronural(){
  return statusStr.contains(SUFFIX_PRONOUN);
}
",15,2,"isPronoun:ispronural,typeString:statusStr,",55,0.3326919198036190,Beam
3146,,,144,14,,2704,24.37485351959860,0
3147,"public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
","public BigDecimal calculateTotalCollectedPayt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
",26,3,"calculateTotalCollectedAmt:calculateTotalCollectedPayt,",51,0.48732380867004400,Beam
3148,,,152,9,,1839,31.652040163675900,0
3149,"private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}
","private void populatesTaskQueue(Volume state,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList jobLIST,String TaskType,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(jobLIST,state,TaskType,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (state.isInCG() && null != jobLIST.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(jobLIST,group,TaskType,operationType);
  }
}
",153,12,"populateTaskList:populatesTaskQueue,source:state,taskList:jobLIST,taskId:TaskType,",1330,9.002150996526080,Beam
3150,,,44,4,,828,4.4305527925491300,0
3151,"private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
","private void compileProlog(ObjectId prolog,File TempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,TempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),TempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
",63,5,"tempDir:TempDir,",19,0.10790578126907300,Beam
3152,"public void init(SocketChannel channel){
  _channel=channel;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
","public void empty(SocketChannel data){
  _channel=data;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
",29,5,"init:empty,channel:data,",79,0.36325132052103700,Beam
3153,,,66,5,,857,5.340166866779330,0
3154,"private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}","private void bpend(char ch){
  try {
    cmPack[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[cmPack.length << 1];
    System.arraycopy(cmPack,0,buff,0,cmPack.length);
    cmPack=buff;
    cmPack[mBuffIdx]=ch;
  }
}",70,5,"bappend:bpend,mBuff:cmPack,",267,2.381899889310200,Beam
3155,"static boolean isDate(Object obj){
  return obj instanceof Date && obj.getClass() == Date.class;
}
","static boolean IsDay(Object adj){
  return adj instanceof Date && adj.getClass() == Date.class;
}
",24,2,"isDate:IsDay,obj:adj,",99,0.701771080493927,Beam
3156,"public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void sphereFromEarth(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",146,9,"sphericalToWorld:sphereFromEarth,",46,0.33438374996185300,Beam
3157,,,48,4,,145,0.7574698130289710,0
3158,"@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
","@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writingObject(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
",92,4,"writeMap:writingObject,",37,0.24098490873972600,Beam
3159,,,152,6,,1413,17.838675487041500,0
3160,"public boolean isVisited(Object element){
  return myVisitedElements.containsKey(element);
}
","public boolean isVisitable(Object parent){
  return myVisitedElements.containsKey(parent);
}
",17,3,"isVisited:isVisitable,element:parent,",97,0.6936225851376850,Beam
3161,"public boolean compare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}","public boolean scate(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}",50,4,"compare:scate,",5,0.03887271086374920,Beam
3162,"void add(Object key){
  table.put(key,key);
}
","void i(Object key){
  table.put(key,key);
}
",17,3,"add:i,",18,0.10767521858215300,Beam
3164,,,56,2,,312,2.3230305194854700,0
3165,"@SuppressWarnings(""unused"") public void handleButton3Request(RequestInvocationEvent event){
  backTrail();
  try {
    String name=(String)getPageSessionAttribute(SAVE_VB_NAME);
    ViewBean vb=getViewBean(Class.forName(name));
    passPgSessionMap(vb);
    vb.forwardTo(getRequestContext());
  }
 catch (  ClassNotFoundException e) {
    debug.warning(""AbstractAuditViewBean.handleButton3Request:"",e);
  }
}","@SuppressWarnings(""unused"") public void handleButton3Message(RequestInvocationEvent event){
  backTrail();
  try {
    String name=(String)getPageSessionAttribute(SAVE_VB_NAME);
    ViewBean vb=getViewBean(Class.forName(name));
    passPgSessionMap(vb);
    vb.forwardTo(getRequestContext());
  }
 catch (  ClassNotFoundException e) {
    debug.warning(""AbstractAuditViewBean.handleButton3Request:"",e);
  }
}",75,6,"handleButton3Request:handleButton3Message,",5,0.033839933077494300,Beam
3166,"private final String loadXmlDefinition(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadXmlDefinition(stringWriter.toString());
}
","private final String loadExmlFile(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringBuilder=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringBuilder);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadExmlFile(stringBuilder.toString());
}
",68,4,"loadXmlDefinition:loadExmlFile,stringWriter:stringBuilder,",137,0.7888756553332010,Beam
3167,"public void fireEventProgrammatically(Event event){
  if (!event.isConsumed())   ripplerPane.fireEvent(event);
}
","public void fireEventProgrammatically(Event command){
  if (!command.isConsumed())   ripplerPane.fireEvent(command);
}
",25,3,"event:command,",20,0.15933611790339200,Beam
3168,,,12,1,,33,0.18145646651585900,0
3169,,,22,2,,166,0.6844343344370520,0
3170,"public void addRestrictedDomain(String domainName){
  if (StringUtils.isEmpty(domainName)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(domainName);
}
","public void addrestrictdomain(String baseNames){
  if (StringUtils.isEmpty(baseNames)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(baseNames);
}
",46,3,"domainName:baseNames,addRestrictedDomain:addrestrictdomain,",185,0.8868209878603620,Beam
3171,,,57,8,,676,3.1579251607259100,0
3172,"public T findByCommitCounter(final long commitCounter){
  if (commitCounter < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= commitCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}","public T findByCommitcounter(final long blockCounter){
  if (blockCounter < 0L)   throw new IllegalArgumentException();
  final Lock sync=readLock();
  sync.sync();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= blockCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    sync.unlock();
  }
}",140,7,"findByCommitCounter:findByCommitcounter,commitCounter:blockCounter,lock:sync,",819,4.1242260773976600,Beam
3173,"public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}","public static double dmod_d(double lcl,double rhs){
  return rhs != 0 ? lcl - rhs * Math.floor(lcl / rhs) : Double.NaN;
}",35,3,"lhs:lcl,",4,0.08528612852096560,Beam
3174,,,26,2,,64,0.3541815519332890,0
3175,,,311,11,,2475,14.726500594615900,0
3176,"protected boolean readReceiveDelay(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}","protected boolean readReceiveWaitay(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}",157,6,"readReceiveDelay:readReceiveWaitay,",4,0.050594544410705600,Beam
3177,,,23,5,,841,3.8859311898549400,0
3178,,,67,3,,79,0.44179027875264500,0
3179,,,87,3,,296,1.5620275179545100,0
3180,"public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}","public String processLine(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}",172,9,"parseFile:processLine,",39,0.1848960280418400,Beam
3181,,,196,10,,1249,7.829258143901830,0
3182,"@Override public boolean wasSuccessful(){
  return isFinished() && getCurrentPoints() >= successThreashold;
}
","@Override public boolean isCompleteished(){
  return isFinished() && getCurrentPoints() >= successThreashold;
}
",20,2,"wasSuccessful:isCompleteished,",17,0.07850897312164310,Beam
3183,"private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}","private void readFines(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}",309,12,"readBinary:readFines,",19,0.10195146799087500,Beam
3184,"public void addToExistingVolumesIfAbsent(Map<String,Integer> volumeWWNs){
  if (_existingVolumes == null) {
    _existingVolumes=new StringMap();
  }
  for (  String wwn : volumeWWNs.keySet()) {
    String normalizedWWN=BlockObject.normalizeWWN(wwn);
    if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {
      String hluStr=ExportGroup.LUN_UNASSIGNED_STR;
      Integer hlu=volumeWWNs.get(normalizedWWN);
      if (hlu != null) {
        hluStr=hlu.toString();
      }
      _existingVolumes.put(normalizedWWN,hluStr);
    }
  }
}
","public void addToExistingVolumesUnlessAbsed(Map<String,Integer> volumeWWNs){
  if (_existingVolumes == null) {
    _existingVolumes=new StringMap();
  }
  for (  String wwn : volumeWWNs.keySet()) {
    String normalizedWWN=BlockObject.normalizeWWN(wwn);
    if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {
      String hlustr=ExportGroup.LUN_UNASSIGNED_STR;
      Integer hlu=volumeWWNs.get(normalizedWWN);
      if (hlu != null) {
        hlustr=hlu.toString();
      }
      _existingVolumes.put(normalizedWWN,hlustr);
    }
  }
}
",120,8,"addToExistingVolumesIfAbsent:addToExistingVolumesUnlessAbsed,hluStr:hlustr,",526,16.053694800535800,Beam
3185,"public Identity(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}
","public idlee(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}
",25,2,"Identity:idlee,",46,0.1691371202468870,Beam
3186,,,30,2,,342,1.5276933232943200,0
3187,"@Override public void write(Buffer buffer,boolean isEnd) throws IOException {
  if (_s == null) {
    buffer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (buffer.isDirect()) {
      _totalWriteBytes+=buffer.length();
      _s.write(buffer.direct());
      return;
    }
    _totalWriteBytes+=buffer.length();
    while (buffer.length() > 0) {
      _writeBuffer.clear();
      buffer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    buffer.free();
  }
}","@Override public void flow(Buffer server,boolean isEnd) throws IOException {
  if (_s == null) {
    server.free();
    return;
  }
  try {
    _needsFlush=true;
    if (server.isDirect()) {
      _totalWriteBytes+=server.length();
      _s.flow(server.direct());
      return;
    }
    _totalWriteBytes+=server.length();
    while (server.length() > 0) {
      _readBuffer.clear();
      server.read(_readBuffer);
      _readBuffer.flip();
      _s.flow(_readBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    server.free();
  }
}",165,9,"write:flow,buffer:server,_writeBuffer:_readBuffer,",1550,9.373365767796830,Beam
3189,,,46,3,,462,3.596774633725480,0
3190,"public void interruptAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interruptAll();
  }
}
","public void interceptAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interceptAll();
  }
}
",38,4,"interruptAll:interceptAll,",5,0.033385288715362500,Beam
3191,"private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}","private void updateLtp(SingleChannelElement sCE){
  IndividualChannelStream ics=sCE.ics;
  float saved[]=sCE.saved;
  float savedLtp[]=sCE.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sCE.ltpState,1024,sCE.ltpState,0,1024);
  System.arraycopy(sCE.ret,0,sCE.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sCE.ltpState,2048,1024);
}",395,14,"sce:sCE,",11,0.175869087378184,Beam
3192,,,33,3,,97,0.5477822899818420,0
3193,"public static DMLConfig readConfigurationFile(String configPath) throws ParseException, FileNotFoundException {
  DMLConfig config=new DMLConfig();
  if (configPath != null) {
    try {
      config=new DMLConfig(configPath,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.error(""Custom config file "" + configPath + "" not found."");
      throw fnfe;
    }
catch (    ParseException e) {
      throw e;
    }
  }
 else {
    try {
      config=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.info(""Using internal default configuration settings.  If you wish to "" + ""customize any settings, please supply a `SystemML-config.xml` file."");
      config=new DMLConfig();
    }
catch (    ParseException e) {
      throw e;
    }
  }
  return config;
}
","public static DMLConfig loadConfigurationPath(String ConfigPath) throws ParseException, FileNotFoundException {
  DMLConfig config=new DMLConfig();
  if (ConfigPath != null) {
    try {
      config=new DMLConfig(ConfigPath,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.error(""Custom config file "" + ConfigPath + "" not found."");
      throw fnfe;
    }
catch (    ParseException e) {
      throw e;
    }
  }
 else {
    try {
      config=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.info(""Using internal default configuration settings.  If you wish to "" + ""customize any settings, please supply a `SystemML-config.xml` file."");
      config=new DMLConfig();
    }
catch (    ParseException e) {
      throw e;
    }
  }
  return config;
}
",126,6,"readConfigurationFile:loadConfigurationPath,configPath:ConfigPath,",102,0.5609556953112290,Beam
3194,"public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
","public static void error(String mess,Throwable t){
  debugInst.debug(IDebug.ERROR,mess,t);
}
",26,4,"msg:mess,",3,0.021454588572184200,Beam
3196,"public static void sort(long[] a){
  doSort(a,0,a.length - 1);
}","public static void round(long[] a){
  doSort(a,0,a.length - 1);
}",25,2,"sort:round,",39,0.21106263399124100,Beam
3197,"private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}","private void rendertext(int x1,int y1,int c,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[c].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[c].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[c].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[c].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}",234,14,"drawText:rendertext,s:c,",160,0.9248363494873050,Beam
3198,"public void testSignumPositive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  assertEquals(""incorrect value"",1,aNumber.signum());
}","public void assertSignumNegient(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  assertEquals(""incorrect value"",1,aNumber.signum());
}",45,4,"testSignumPositive:assertSignumNegient,",6,0.03786569436391200,Beam
3199,"private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}
","private static void clearFolder(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       clearFolder(f);
      f.delete();
    }
  }
}
",60,3,"cleanDirectory:clearFolder,",38,0.18297340075175000,Beam
3200,,,34,3,,229,1.6588238914807600,0
3201,,,14,3,,361,1.7192551096280400,0
3202,,,18,3,,397,2.008965543905890,0
3203,,,33,3,,391,2.1777175148328100,0
3205,"private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
","private void moveSingleNode(Object source,Point nextLocation){
  DisplayNode node=(DisplayNode)source;
  int deltaX=nextLocation.x - clickPoint.x;
  int deltaY=nextLocation.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
",77,8,"newPoint:nextLocation,",15,0.06573526064554850,Beam
3206,"public final boolean isCancelled(){
  if (cancelled) {
    pass(""cancelled"",cancelled);
  }
 else {
    fail(""cancelled"");
  }
  return cancelled;
}
","public final boolean iscuealed(){
  if (Cancealled) {
    pass(""cancelled"",Cancealled);
  }
 else {
    fail(""cancelled"");
  }
  return Cancealled;
}
",32,2,"isCancelled:iscuealed,cancelled:Cancealled,",31,0.1634275992711390,Beam
3207,"public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}
","public void create(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.create(manual);
}
",23,4,"init:create,",9,0.03517282803853350,Beam
3208,,,28,5,,1378,6.681243459383650,0
3209,,,25,2,,187,1.0049601793289200,0
3210,"public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}
","public final void empty(){
  if (GWT.isScript()) {
    jsArray.empty();
  }
 else {
    javaArray.empty();
  }
}
",33,3,"clear:empty,",3,0.02231231133143110,Beam
3211,,,99,11,,1660,13.46104890902840,0
3212,"protected synchronized void request(String stream){
  if (stream == null || stream.isEmpty()) {
    return;
  }
  stream=stream.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(stream);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(stream);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(stream);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
","protected synchronized void quest(String track){
  if (track == null || track.isEmpty()) {
    return;
  }
  track=track.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(track);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(track);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(track);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
",141,7,"stream:track,request:quest,",113,0.7529634197553000,Beam
3213,"public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
","public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forFrontend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forFrontend);
  }
  return result;
}
",67,6,"forBackend:forFrontend,",4,0.09775894482930500,Beam
3214,"public boolean isExpanded(int row){
  TreeUI tree=getUI();
  if (tree != null) {
    TreePath path=tree.getPathForRow(this,row);
    if (path != null) {
      Boolean value=expandedState.get(path);
      return (value != null && value.booleanValue());
    }
  }
  return false;
}
","public boolean isexpanded(int entry){
  TreeUI tree=getUI();
  if (tree != null) {
    TreePath path=tree.getPathForRow(this,entry);
    if (path != null) {
      Boolean value=expandedState.get(path);
      return (value != null && value.booleanValue());
    }
  }
  return false;
}
",70,6,"isExpanded:isexpanded,row:entry,",58,0.30919546683629400,Beam
3215,"@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}","@TCB static String stripBannedCodeunits(String a){
  int safeLimit=longestPrefixOfGoodCodeunits(a);
  if (safeLimit < 0) {
    return a;
  }
  StringBuilder sb=new StringBuilder(a);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}",53,4,"s:a,",3,0.0286934494972229,Beam
3216,,,34,3,,336,1.5170524001121500,0
3217,,,92,3,,421,1.8318187713623000,0
3218,"public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
","public void create(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
",94,7,"start:create,",16,0.06878505150477090,Beam
3220,,,32,3,,328,1.3665925780932100,0
3221,"public int next(){
  return mix(gen.getAndIncrement());
}
","public int iterator(){
  return mix(gn.getAndIncrement());
}
",17,2,"next:iterator,gen:gn,",190,1.7277214129765800,Beam
3222,"public static String plnoun(final int quantity,final String noun){
  final String enoun=fullForm(noun);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(noun);
  }
}","public static String plencoun(final int quantity,final String pronoun){
  final String enoun=fullForm(pronoun);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(pronoun);
  }
}",47,4,"plnoun:plencoun,noun:pronoun,",159,0.983414618174235,Beam
3223,,,21,2,,144,0.7973221898078920,0
3224,"public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
","public void notifyTations(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
",36,4,"notifyTasks:notifyTations,",6,0.028591748078664100,Beam
3225,,,29,4,,134,0.4400090932846070,0
3226,"public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}","public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!service.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=service.getModulus();
  BigInteger d=service.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}",119,11,"key:service,",229,1.1754613399505600,Beam
3227,"static private String calcThreshold(double scoreThreshold,double lambda){
  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);
  int maxNum=1000000;
  if (calcLogProb(maxNum,lambda) > logProbThreshold) {
    return "">1e6"";
  }
  int minNum=1;
  while (minNum < maxNum) {
    final int midNum=(maxNum + minNum) / 2;
    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;
    if (passThreshold) {
      maxNum=midNum;
    }
 else {
      if (midNum == minNum) {
        break;
      }
      minNum=midNum;
    }
  }
  return Integer.toString(maxNum);
}","static private String calctShreshold(double scoreMetolerance,double lambda){
  final double logProbThreshold=Math.log(1 - scoreMetolerance / 0.999);
  int maxNum=1000000;
  if (calcLogProb(maxNum,lambda) > logProbThreshold) {
    return "">1e6"";
  }
  int minNum=1;
  while (minNum < maxNum) {
    final int midNum=(maxNum + minNum) / 2;
    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;
    if (passThreshold) {
      maxNum=midNum;
    }
 else {
      if (midNum == minNum) {
        break;
      }
      minNum=midNum;
    }
  }
  return Integer.toString(maxNum);
}",122,8,"scoreThreshold:scoreMetolerance,calcThreshold:calctShreshold,",130,2.973780560493470,Beam
3228,"public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitDescending(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
","public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitdescension(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
",25,1,"packModifiedFirstFitDescending:packModifiedFirstFitdescension,",21,0.13251949946085600,Beam
3229,"public static String generateNativeGuid(String deviceType,String serialNumber){
  return String.format(""%s+%s"",_deviceTypeMap.get(deviceType),serialNumber);
}
","public static String generateNativeguID(String deviceType,String serialNumber){
  return String.format(""%s+%s"",_deviceTypeMap.get(deviceType),serialNumber);
}
",30,4,"generateNativeGuid:generateNativeguID,",56,1.592261759440100,Beam
3230,,,39,4,,969,4.153999316692350,0
3231,"private void stopVideoFadingEdgesScreenTimer(){
  if (null != mVideoFadingEdgesTimer) {
    mVideoFadingEdgesTimer.cancel();
    mVideoFadingEdgesTimer=null;
    mVideoFadingEdgesTimerTask=null;
  }
}
","private void stopVideoFadingEdgesScreenAnimation(){
  if (null != mVideoFadingEdgesRunner) {
    mVideoFadingEdgesRunner.cancel();
    mVideoFadingEdgesRunner=null;
    mVideoFadingEdgesTimerTask=null;
  }
}
",29,3,"stopVideoFadingEdgesScreenTimer:stopVideoFadingEdgesScreenAnimation,mVideoFadingEdgesTimer:mVideoFadingEdgesRunner,",47,0.2327829321225480,Beam
3232,"final void copyIntoLocalState(Operand[] _localState){
  localState=new Operand[_localState.length];
  System.arraycopy(_localState,0,localState,0,_localState.length);
  setLocalKnown();
}","final void copyIntoLocalState(Operand[] _localArray){
  localState=new Operand[_localArray.length];
  System.arraycopy(_localArray,0,localState,0,_localArray.length);
  setLocalKnown();
}",42,3,"_localState:_localArray,",33,0.19026634693145800,Beam
3233,"public Entry editEntry(User user,String id,String note,String quotation,boolean isPublic,Long modTime,boolean isAdmin,Errors errors){
  if (modTime == null) {
    Errors.add(errors,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (id != null && !idGenerator.isIdWellFormed(id)) {
    Errors.add(errors,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry entry=getEntryById(id);
  if (entry == null) {
    Errors.add(errors,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(user,entry,isAdmin)) {
    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (note != null) {
    note=cleanUpText(note);
  }
  if (entry.isNotebook()) {
    entry.setNotebookTitle(note);
  }
 else   if (entry.isSource()) {
    entry.setSourceTitle(note);
  }
 else {
    entry.setNote(note);
  }
  entry.setModTime(modTime);
  entry.setIsPublic(isPublic);
  if (entry.getCreateTime() > modTime.longValue()) {
    modTime=entry.getCreateTime();
  }
  if (entry.isQuotation()) {
    if (quotation != null) {
      quotation=cleanUpText(quotation);
      entry.setQuotation(quotation);
    }
  }
  return entry;
}
","public Entry editentry(User member,String pid,String note,String quotation,boolean isPublic,Long modTime,boolean isAdmin,Errors errors){
  if (modTime == null) {
    Errors.add(errors,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (member == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (pid != null && !idGenerator.isIdWellFormed(pid)) {
    Errors.add(errors,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry entry=getEntryById(pid);
  if (entry == null) {
    Errors.add(errors,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(member,entry,isAdmin)) {
    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (note != null) {
    note=cleanUpText(note);
  }
  if (entry.isNotebook()) {
    entry.setNotebookTitle(note);
  }
 else   if (entry.isSource()) {
    entry.setSourceTitle(note);
  }
 else {
    entry.setNote(note);
  }
  entry.setModTime(modTime);
  entry.setIsPublic(isPublic);
  if (entry.getCreateTime() > modTime.longValue()) {
    modTime=entry.getCreateTime();
  }
  if (entry.isQuotation()) {
    if (quotation != null) {
      quotation=cleanUpText(quotation);
      entry.setQuotation(quotation);
    }
  }
  return entry;
}
",306,12,"editEntry:editentry,user:member,id:pid,",1519,8.000084841251370,Beam
3234,,,26,2,,121,0.618437922000885,0
3236,,,82,3,,465,2.2455157160759000,0
3237,,,102,4,,425,2.597168493270870,0
3238,"boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
","boolean CheckTok(ByteWrapper token,Key nodeInfo,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=CheckTok(token,nodeInfo,ip,port,lookupKey,timestampCurrent.get()) || CheckTok(token,nodeInfo,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
",82,9,"checkToken:CheckTok,nodeId:nodeInfo,",268,3.259621500968930,Beam
3239,"public int writeAnnotation(Annotation annotation){
  int off=data.position();
  writeByte(annotation.visibility);
  writeEncodedArray(annotation.encodedAnnotation);
  return off;
}
","public int writeANnotations(Annotation annotation){
  int slave=data.position();
  writeByte(annotation.visibility);
  writeEncodedArray(annotation.encodedAnnotation);
  return slave;
}
",35,4,"writeAnnotation:writeANnotations,off:slave,",197,0.8672643621762590,Beam
3240,,,54,4,,586,6.367706739902500,0
3241,"public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}","public static StringBuffer replaceRegex(StringBuffer original,String Req,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(Req,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}",106,10,"regex:Req,",9,0.04306074380874630,Beam
3242,,,37,4,,174,0.76570539077123,0
3243,"private byte[] convertBitmapToBytes(final Bitmap bitmap){
  int size=bitmap.getRowBytes() * bitmap.getHeight();
  ByteArrayOutputStream out=new ByteArrayOutputStream(size);
  try {
    if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) {
      return out.toByteArray();
    }
    if (sLogger.isActivated()) {
      sLogger.debug(""Unable to convert bitmap, compression failed"");
    }
    return null;
  }
  finally {
    CloseableUtils.tryToClose(out);
  }
}","private byte[] convertBitMapTobytes(final Bitmap bitmap){
  int size=bitmap.getRowBytes() * bitmap.getHeight();
  ByteArrayOutputStream out=new ByteArrayOutputStream(size);
  try {
    if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) {
      return out.toByteArray();
    }
    if (sLogger.isActivated()) {
      sLogger.debug(""Unable to convert bitmap, compression failed"");
    }
    return null;
  }
  finally {
    CloseableUtils.tryToClose(out);
  }
}",95,5,"convertBitmapToBytes:convertBitMapTobytes,",24,0.09485652844111120,Beam
3244,"protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}","protected String form(ObjectMatrix1D matrix,int index,Former formater){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}",42,5,"formatter:formater,",4,0.015202422936757400,Beam
3245,"public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}","public void calculateDerive(){
  xStats.calculateDerive();
  yStats.calculateDerive();
  differencesStats.calculateDerive();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}",287,13,"calculateDerived:calculateDerive,",14,0.2934324026107790,Beam
3247,,,23,2,,229,0.9405125896135970,0
3248,,,58,4,,752,2.938784086704250,0
3249,"private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}","private static Bitmap format(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}",646,26,"transform:format,",5,0.04506700833638510,Beam
3250,,,53,3,,472,2.1498552481333400,0
3251,"public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}","public String discipher(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.discipher(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}",208,8,"decrypt:discipher,",38,0.8309090574582420,Beam
3252,"private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStamp;
    XMPDateTime binOtherDate;
    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeDigitized"",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStamp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStamp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));
  }
 catch (  XMPException e) {
    return;
  }
}","private static void fixGPSTimestamped(XMPNode exifArchmas) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifArchmas,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStramp;
    XMPDateTime binOtherDate;
    binGPSStramp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStramp.getYear() != 0 || binGPSStramp.getMonth() != 0 || binGPSStramp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exifArchmas,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exifArchmas,""exif:DateTimeDigitized"",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStramp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStramp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStramp));
  }
 catch (  XMPException e) {
    return;
  }
}",219,7,"exifSchema:exifArchmas,fixGPSTimeStamp:fixGPSTimestamped,binGPSStamp:binGPSStramp,",243,4.806714010238650,Beam
3253,"public String toString(){
  return text();
}
","public String tostring(){
  return text();
}
",12,1,"toString:tostring,",5,0.022085181872050000,Beam
3254,,,58,1,,47,0.24818312724431400,0
3255,,,99,4,,619,3.184147508939110,0
3256,,,34,3,,387,2.1911949157714800,0
3257,,,550,10,,1870,11.899112451076500,0
3258,"protected final File createDBFFDCDirectory(){
  File dbffdcDir=new File(ffdcDirectoryName);
  if (!dbffdcDir.exists()) {
    final boolean isDBFFDcDirCreated=dbffdcDir.mkdirs();
    if (isDBFFDcDirCreated) {
      dbffdcDir=new File(ffdcDirectoryName);
      return dbffdcDir;
    }
  }
 else   if (!dbffdcDir.isDirectory()) {
    return null;
  }
  return dbffdcDir;
}
","protected final File createDBFFDDCirectories(){
  File dbffdDir=new File(ffdcDirectoryName);
  if (!dbffdDir.exists()) {
    final boolean isDBFFDcDirCreated=dbffdDir.mkdirs();
    if (isDBFFDcDirCreated) {
      dbffdDir=new File(ffdcDirectoryName);
      return dbffdDir;
    }
  }
 else   if (!dbffdDir.isDirectory()) {
    return null;
  }
  return dbffdDir;
}
",73,4,"createDBFFDCDirectory:createDBFFDDCirectories,dbffdcDir:dbffdDir,",166,0.9650398294130960,Beam
3259,,,17,3,,216,0.937073802947998,0
3260,"private String fetchCharsetFromCache(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
","private String fetchCharsetIncache(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
",57,6,"fetchCharsetFromCache:fetchCharsetIncache,",73,0.2787862221399940,Beam
3261,"public EipModelWizardInitialObjectCreationPage(String pageId){
  super(pageId);
}
","public EipModelWizardInitialObjectCreationPage(String objectName){
  super(objectName);
}
",13,2,"pageId:objectName,",29,0.11853431463241600,Beam
3262,"public static boolean hasDeadStatesFromInitial(Automaton a){
  BitSet reachableFromInitial=getLiveStatesFromInitial(a);
  BitSet reachableFromAccept=getLiveStatesToAccept(a);
  reachableFromInitial.andNot(reachableFromAccept);
  return reachableFromInitial.isEmpty() == false;
}
","public static boolean hasDeadStatesInInitial(Automaton aux){
  BitSet reachableFromInitial=getLiveStatesFromInitial(aux);
  BitSet reachableFromAccept=getLiveStatesToAccept(aux);
  reachableFromInitial.andNot(reachableFromAccept);
  return reachableFromInitial.isEmpty() == false;
}
",42,4,"hasDeadStatesFromInitial:hasDeadStatesInInitial,a:aux,",154,1.065860668818160,Beam
3263,,,33,3,,466,2.1762875358263700,0
3264,"public void addListener(SpeedrunsLiveListener listener){
  listeners.add(listener);
}
","public void removeListener(SpeedrunsLiveListener listener){
  listeners.add(listener);
}
",16,3,"addListener:removeListener,",36,0.15090101957321200,Beam
3265,"@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}","@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFLush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}",34,4,"sceNetAdhocPtpFlush:sceNetAdhocPtpFLush,",3,0.012898679574330600,Beam
3266,,,56,4,,511,2.678330341974890,0
3267,"public double patience(int k,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}","public double piency(int z,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(z - 1) - p0) / (1 - p0);
}",72,7,"patience:piency,k:z,",158,0.7687974015871680,Beam
3268,,,127,4,,634,3.6793664773305300,0
3269,,,131,6,,1477,9.545049107074740,0
3270,,,138,4,,612,3.410745584964750,0
3272,"protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
","protected void addAllForRePlay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
",48,4,"addAllForReplay:addAllForRePlay,",11,0.04980679750442510,Beam
3273,"public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}
","public void send(byte[] cmd) throws IOException {
  output.send(cmd);
  bytesWritten+=cmd.length;
}
",26,4,"write:send,buf:cmd,",132,0.6155860582987470,Beam
3274,,,46,4,,1016,8.29509083032608,0
3275,,,253,13,,3349,32.46933475335440,0
3276,,,27,4,,1211,6.762470670541130,0
3277,"public static int instanceOf(Object o,Class<?> c){
  if (o == null)   return FALSE;
  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}
","public static int instanceOf(Object o,Class<?> cf){
  if (o == null)   return FALSE;
  return cf.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}
",41,5,"c:cf,",27,0.4166070540746050,Beam
3278,"@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof BubbleXYItemLabelGenerator)) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj;
  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {
    return false;
  }
  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {
    return false;
  }
  return true;
}
","@Override public boolean equALS(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof BubbleXYItemLabelGenerator)) {
    return false;
  }
  if (!super.equALS(obj)) {
    return false;
  }
  BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj;
  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {
    return false;
  }
  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {
    return false;
  }
  return true;
}
",104,4,"equals:equALS,",41,0.23979347546895300,Beam
3279,,,48,3,,378,1.8716763019561800,0
3280,"public boolean isAborted(){
  return isAborted.get();
}
","public boolean isAbjected(){
  return isAbjected.get();
}
",14,1,"isAborted:isAbjected,",3,0.027648341655731200,Beam
3282,"@SuppressWarnings(""unchecked"") public List<Boundary> populateArea(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
","@SuppressWarnings(""unchecked"") public List<Boundary> populatedRegion(final Long wardid){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardid);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
",98,11,"populateArea:populatedRegion,wardId:wardid,",96,0.5142406344413760,Beam
3283,,,94,14,,1616,8.184912550449370,0
3284,,,18,2,,1,3.6160151163737E-06,0
3285,"protected static void processGenericPropertiesCreatorProps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}","protected static void load(File promsfile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(promsfile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}",199,10,"processGenericPropertiesCreatorProps:load,propsFile:promsfile,",100,0.6430965105692550,Beam
3286,"public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}","public void bindCam(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}",143,7,"applyCamera:bindCam,",40,0.22632368008295700,Beam
3287,"protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}","protected int encast(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}",81,6,"encode:encast,",7,0.029361764589945500,Beam
3288,"public void sortPools(List<StoragePool> storagePools){
  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePools);
  Collections.sort(storagePools,_storagePoolComparator);
}
","public void orderpools(List<StoragePool> storagePapers){
  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePapers);
  Collections.sort(storagePapers,_storagePoolComparator);
}
",28,4,"sortPools:orderpools,storagePools:storagePapers,",98,0.590765384833018,Beam
3289,,,172,12,,2821,16.598670407136300,0
3291,"long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}","long loadL() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}",113,2,"readLong:loadL,",13,0.05452813307444260,Beam
3292,"private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
","private boolean releaseOrd(Order item){
  lock.lock();
  try {
    return activeOrders.add(item.getId());
  }
  finally {
    lock.unlock();
  }
}
",39,4,"lockOrder:releaseOrd,order:item,",46,0.2271873911221820,Beam
3293,"@Override public String toString(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append(""BoardPanel "");
  risul.append(""available object: itera_board"");
  return risul.toString();
}","@Override public String toNative(){
  StringBuilder nosula=new StringBuilder(1000);
  nosula.append(""BoardPanel "");
  nosula.append(""available object: itera_board"");
  return nosula.toNative();
}",39,2,"toString:toNative,risul:nosula,",41,0.2395568092664080,Beam
3294,"private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
","private boolean ifyName(LifecycleState missingState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=missingState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,missingState + "" "" + _name);
  }
  notifyListeners(state,missingState);
  return true;
}
",72,8,"toState:ifyName,newState:missingState,",89,0.6972368001937870,Beam
3295,"protected double computeAzimuthLabelOffset(double radius,double maxRadius){
  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius);
}
","protected double computeAzimuthlabelOff(double radius,double maxRadius){
  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius);
}
",24,4,"computeAzimuthLabelOffset:computeAzimuthlabelOff,",34,0.2294788956642150,Beam
3296,"private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){
  String[] t=new String[buffer.length + lastRead.length];
  System.arraycopy(buffer,0,t,0,buffer.length);
  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);
  return t;
}","private String[] combineResultsFromMultiReads(String[] buffer,String[] lastRead){
  String[] t=new String[buffer.length + lastRead.length];
  System.arraycopy(buffer,0,t,0,buffer.length);
  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);
  return t;
}",74,4,"combineResultsFromMultipleReads:combineResultsFromMultiReads,",3,0.03111418883005780,Beam
3297,"public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){
  if (!VALID_TYPES.contains(prefType)) {
    throw new IllegalArgumentException(""The specified type: "" + prefType + "" is not supported in preferences"");
  }
  this.prefType=prefType;
  return this;
}
","public PreferenceBuilder<PreferenceClass> prefToken(Class<PreferenceClass> prefToken){
  if (!VALID_TYPES.contains(prefToken)) {
    throw new IllegalArgumentException(""The specified type: "" + prefToken + "" is not supported in preferences"");
  }
  this.prefToken=prefToken;
  return this;
}
",47,1,"prefType:prefToken,",5,0.08716064691543580,Beam
3298,,,208,7,,1012,8.6847478667895,0
3299,"@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}","@Override public void swstrip(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}",54,4,"trim:swstrip,",16,0.13518476088841800,Beam
3300,"public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}","public void writeLEChars(String es) throws IOException {
  int length=es.length();
  for (int i=0; i < length; i++) {
    int c=es.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}",76,7,"s:es,",28,0.16274418036143000,Beam
3301,"public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}
","public Options patch(String header,Integer x){
  if (x == null) {
    return remove(header);
  }
  options.patch(header,x.toString());
  return this;
}
",42,4,"put:patch,option:header,value:x,",494,4.097682555516560,Beam
3302,"private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
","private void getDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        getDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
",185,12,"listDirectory:getDirectory,",7,0.04509795109430950,Beam
3303,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnPackcmap(String locked){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=locked.charAt(i++);
    char value=locked.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}",83,7,"packed:locked,zzUnpackCMap:doUnPackcmap,",54,0.36047757069269800,Beam
3304,"public void doHistory(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}","public void oSwitch(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}",125,6,"doHistory:oSwitch,",41,0.19273309310277300,Beam
3305,"public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}","public final boolean checkthetrack(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}",159,18,"check_trace:checkthetrack,",8,0.06730266412099200,Beam
3306,,,75,5,,967,6.014378515879310,0
3307,,,138,8,,299,4.219666957855230,0
3308,"private MethodDescriptor[] sortMethodDescriptors(MethodDescriptor[] methodDescriptors){
  return methodSorter != null ? methodSorter.sortMethodDescriptors(methodDescriptors) : methodDescriptors;
}
","private MethodDescriptor[] sortMethodDescributiors(MethodDescriptor[] methodDescriptors){
  return methodSorter != null ? methodSorter.sortMethodDescributiors(methodDescriptors) : methodDescriptors;
}
",27,3,"sortMethodDescriptors:sortMethodDescributiors,",48,0.20620716810226400,Beam
3309,"protected static Boolean lock(String serviceName,Object name){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(name,1000,-1);
  return Boolean.valueOf(locked);
}","protected static Boolean bind(String serviceName,Object name){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.bind(name,1000,-1);
  return Boolean.valueOf(locked);
}",46,5,"lock:bind,",35,0.11807558536529500,Beam
3310,"void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}","void popInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}",165,3,"pushInt:popInt,",5,0.023228899637858100,Beam
3311,"protected int mapDragOperationFromModifiers(MouseEvent e){
  int mods=e.getModifiersEx();
  int btns=mods & ButtonMask;
  if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) {
    return DnDConstants.ACTION_NONE;
  }
  return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions());
}","protected int getDragOperationFrommodings(MouseEvent e){
  int mods=e.getModifiersEx();
  int btns=mods & ButtonMask;
  if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) {
    return DnDConstants.ACTION_NONE;
  }
  return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions());
}",61,5,"mapDragOperationFromModifiers:getDragOperationFrommodings,",41,0.33615792195002200,Beam
3312,,,120,8,,1122,5.975152715047200,0
3313,,,52,5,,727,3.450457763671880,0
3314,"public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}","public static void notFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}",71,4,"checkFinite:notFinite,",40,0.26919025182724,Beam
3315,"public static void putLongVolatile(Object obj,long off,long val){
  UNSAFE.putLongVolatile(obj,off,val);
}
","public static void putLongvoliform(Object orb,long off,long val){
  UNSAFE.putLongvoliform(orb,off,val);
}
",27,4,"obj:orb,putLongVolatile:putLongvoliform,",184,0.9373389522234600,Beam
3316,"public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}","public static boolean installOk(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}",97,5,"installNormal:installOk,",65,0.24758978287378900,Beam
3317,,,16,2,,217,1.2107443730036400,0
3318,,,259,15,,369,1.8774455269177800,0
3319,,,13,1,,55,0.2022995670636500,0
3320,"public Edge(S src,Symbol symbol,S dest){
  this.src=src;
  this.symbol=symbol;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
","public Weight(S src,Symbol synt,S dest){
  this.src=src;
  this.synt=synt;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
",50,4,"Edge:Weight,symbol:synt,",126,0.5113901734352110,Beam
3321,,,169,6,,1719,10.461397063732100,0
3322,"public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void equals(Object objectOne,Object object2){
  checkAssertion(objectOne.equals(object2),null);
}",25,3,"object1:objectOne,",20,0.07596346139907840,Beam
3323,"private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
","private synchronized void block(boolean TF){
  if (TF) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
",51,5,"tf:TF,",10,0.07587509552637740,Beam
3325,,,26,3,,746,5.396037046114600,0
3326,,,38,4,,729,3.5352015852928200,0
3327,"public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
","public List<FileStatus> Browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
",130,8,"browse:Browse,",30,0.1489736755688990,Beam
3328,"@Override public void requestResources(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourceRequest.getPreferredHost() + "" for container ""+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int cpuCores=resourceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}","@Override public void areResource(SamzaResourceRequest addressResource){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + addressResource.getPreferredHost() + "" for container ""+ addressResource.getContainerID());
  int memoryMb=addressResource.getMemoryMB();
  int cpuCores=addressResource.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=addressResource.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(addressResource,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}",201,15,"requestResources:areResource,resourceRequest:addressResource,",97,1.124271535873410,Beam
3329,"private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
","private String encodeProduction(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
",55,4,"encodeProduct:encodeProduction,",4,0.01767799456914270,Beam
3330,,,72,4,,972,10.11771361430490,0
3331,,,14,2,,87,0.42269237438837700,0
3332,"private static Frame showInitialSplash(){
  Frame splashFrame=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      splashFrame=AWTSplashWindow.splash(image);
    }
  }
  return splashFrame;
}
","private static Frame showInitialSplashing(){
  Frame slashedWindow=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      slashedWindow=AWTSplashWindow.splash(image);
    }
  }
  return slashedWindow;
}
",78,5,"showInitialSplash:showInitialSplashing,splashFrame:slashedWindow,",193,0.8791367212931320,Beam
3333,,,35,6,,951,4.099097994963330,0
3334,"public boolean similarTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
","public boolean conformTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
",116,5,"similarTo:conformTo,",6,0.04251258770624800,Beam
3335,"public List<T> asFlatList(){
  List<T> list=new ArrayList<T>();
  for (int i=0; i < getRowCount(); i++) {
    for (int j=0; j < getColumnCount(); j++) {
      list.add(getLogicalValueAt(i,j));
    }
  }
  return list;
}","public List<T> asFlattenCollection(){
  List<T> list=new ArrayList<T>();
  for (int i=0; i < getRowCount(); i++) {
    for (int j=0; j < getColumnCount(); j++) {
      list.add(getLogicalValueAt(i,j));
    }
  }
  return list;
}",75,4,"asFlatList:asFlattenCollection,",10,0.05887693961461390,Beam
3336,"public void startObject(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}","public void startCollection(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}",60,6,"startObject:startCollection,",9,0.044936720530192100,Beam
3337,"public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
","public boolean Overlap(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
",78,8,"overlaps:Overlap,",38,0.20475186506907100,Beam
3338,"public void addFakeView(View childView){
  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());
  views.add(childView);
}","public void createfakeWidget(View childView){
  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());
  views.add(childView);
}",35,3,"addFakeView:createfakeWidget,",38,0.19284557501475000,Beam
3339,"public PatternGuardExpr(String namespace,String name,Expression[] parameters,PatternExpr guarded){
  this(namespace,name,Arrays.asList(parameters),guarded);
}
","public PatternguardExpp(String nospaced,String name,Expression[] parameters,PatternExpr guarded){
  this(nospaced,name,Arrays.asList(parameters),guarded);
}
",35,5,"PatternGuardExpr:PatternguardExpp,namespace:nospaced,",133,0.7083021362622580,Beam
3340,"public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}
","public static Operator generateBlanchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBlanchPlan(table,indexScan,indexType);
}
",68,7,"generateBranchPlan:generateBlanchPlan,",44,0.25560921827952100,Beam
3341,"public static String toKilobytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}","public static String toKilotBytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}",61,4,"toKilobytes:toKilotBytes,",21,0.14961723883946700,Beam
3342,"protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){
  TupleExpr result=null;
  if (expressions.size() > 1) {
    double lowestCardinality=Double.POSITIVE_INFINITY;
    for (    TupleExpr tupleExpr : expressions) {
      double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);
      if (cardinality < lowestCardinality || result == null) {
        lowestCardinality=cardinality;
        result=tupleExpr;
      }
    }
  }
 else {
    result=expressions.get(0);
  }
  return result;
}","protected TupleExpr getNextTitionalexpl(List<TupleExpr> expressations,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){
  TupleExpr result=null;
  if (expressations.size() > 1) {
    double lowestCardinality=Double.POSITIVE_INFINITY;
    for (    TupleExpr tupleExpr : expressations) {
      double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);
      if (cardinality < lowestCardinality || result == null) {
        lowestCardinality=cardinality;
        result=tupleExpr;
      }
    }
  }
 else {
    result=expressations.get(0);
  }
  return result;
}",129,10,"selectNextTupleExpr:getNextTitionalexpl,expressions:expressations,",450,2.843718385696410,Beam
3343,"public static String encodeToString(byte[] src){
  if (src == null) {
    return null;
  }
  if (src.length == 0) {
    return """";
  }
  String result;
  try {
    result=new String(delegate.encode(src),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return result;
}","public static String enodeAsText(byte[] source){
  if (source == null) {
    return null;
  }
  if (source.length == 0) {
    return """";
  }
  String current;
  try {
    current=new String(delegate.encode(source),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return current;
}",78,5,"encodeToString:enodeAsText,src:source,result:current,",213,0.9638991316159570,Beam
3344,"public static terminal find(String with_name){
  if (with_name == null)   return null;
 else   return (terminal)_all.get(with_name);
}
","public static terminal finding(String other_word){
  if (other_word == null)   return null;
 else   return (terminal)_all.get(other_word);
}
",31,3,"find:finding,with_name:other_word,",77,0.302386212348938,Beam
3345,"public void configure(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split("" "");
  }
}
","public void configuring(){
  if (commandPrefix != null) {
    prefix=commandPrefix.split("" "");
  }
}
",24,3,"configure:configuring,cmdPrefix:commandPrefix,",16,0.08038703203201300,Beam
3346,"@Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){
  if (!canvas.isTooltipEnabled()) {
    return;
  }
  String text=getTooltipText(canvas,e.getX(),e.getY());
  canvas.setTooltip(text,e.getScreenX(),e.getScreenY());
}
","@Override public void onMouseMoved(ChartCanvas canvas,MouseEvent e){
  if (!canvas.isTooltipEnabled()) {
    return;
  }
  String text=getTooltipText(canvas,e.getX(),e.getY());
  canvas.setTooltip(text,e.getScreenX(),e.getScreenY());
}
",66,4,"handleMouseMoved:onMouseMoved,",65,0.21574043830235800,Beam
3347,"public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmeria(inHeaders,out);
  return out;
}
","public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHosters){
  if (inHosters.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHosters.size());
  toArmeria(inHosters,out);
  return out;
}
",61,3,"inHeaders:inHosters,",3,0.021677104632059700,Beam
3348,"public static boolean isWindowsMe(){
  return osName.indexOf(""Windows"") > -1 && osVersion.equals(""4.9"");
}","public static boolean isOsMe(){
  return OSName.indexOf(""Windows"") > -1 && osVersion.equals(""4.9"");
}",26,3,"isWindowsMe:isOsMe,osName:OSName,",143,0.5616368850072230,Beam
3349,"public static String urlEncode(@Nullable String s){
  if (s == null) {
    return """";
  }
  try {
    return URLEncoder.encode(s,""UTF-8"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(""UTF-8 should be supported in every JVM"");
  }
}","public static String urlenCode(@Nullable String e){
  if (e == null) {
    return """";
  }
  try {
    return URLEncoder.encode(e,""UTF-8"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(""UTF-8 should be supported in every JVM"");
  }
}",50,2,"s:e,urlEncode:urlenCode,",81,0.5669288754463200,Beam
3350,,,98,6,,232,1.500580092271170,0
3351,,,31,5,,419,2.3028567314147900,0
3352,"@SuppressWarnings(""unchecked"") public PropagationImp(Stack<CompositeTransaction> lineage,boolean serial,long timeout){
  serial_=serial;
  lineage_=(Stack<CompositeTransaction>)lineage.clone();
  timeout_=timeout;
}
","@SuppressWarnings(""unchecked"") public PropagatorChange(Stack<CompositeTransaction> linure,boolean serial,long timeout){
  serial_=serial;
  lineage_=(Stack<CompositeTransaction>)linure.clone();
  timeout_=timeout;
}
",44,7,"PropagationImp:PropagatorChange,lineage:linure,",170,0.7369975010554000,Beam
3353,"public static CLContext createContextFromCurrentGL(){
  RuntimeException first=null;
  for (  CLPlatform platform : listPlatforms()) {
    try {
      CLContext ctx=platform.createContextFromCurrentGL();
      if (ctx != null)       return ctx;
    }
 catch (    RuntimeException ex) {
      if (first == null)       first=ex;
    }
  }
  throw new RuntimeException(""Failed to create an OpenCL context based on the current OpenGL context"",first);
}
","public static CLContext createContextAtCurrentGl(){
  RuntimeException first=null;
  for (  CLPlatform platform : listPlatforms()) {
    try {
      CLContext ctx=platform.createContextAtCurrentGl();
      if (ctx != null)       return ctx;
    }
 catch (    RuntimeException ex) {
      if (first == null)       first=ex;
    }
  }
  throw new RuntimeException(""Failed to create an OpenCL context based on the current OpenGL context"",first);
}
",71,5,"createContextFromCurrentGL:createContextAtCurrentGl,",17,0.100843878587087,Beam
3354,"protected String generateSectionLabel(PieDataset dataset,Comparable key){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,key);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}
","protected String generatSectionTab(PieDataset dataset,Comparable name){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,name);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}
",53,5,"generateSectionLabel:generatSectionTab,key:name,",182,1.1264800031979900,Beam
3355,"public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}","public static double info(int countsets[]){
  int total=0;
  double x=0;
  for (  int count : countsets) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}",50,5,"counts:countsets,",8,0.03954421679178870,Beam
3356,"public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
","public void createNote(Note comment){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(comment.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,comment.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(comment.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
",117,7,"note:comment,",6,0.038167885939280200,Beam
3357,"public boolean renameFile(File oldFile,File newFile){
synchronized (fileCache) {
    if (oldFile.renameTo(newFile)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}
","public boolean renamingFiles(File fromDir,File newFile){
synchronized (fileCache) {
    if (fromDir.renameTo(newFile)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}
",39,4,"renameFile:renamingFiles,oldFile:fromDir,",60,0.3751480539639790,Beam
3358,"public static double angle(Coordinate p0,Coordinate p1){
  double dx=p1.x - p0.x;
  double dy=p1.y - p0.y;
  return Math.atan2(dy,dx);
}","public static double dir(Coordinate P00,Coordinate P0){
  double dx=P0.x - P00.x;
  double delay=P0.y - P00.y;
  return Math.atan2(delay,dx);
}",45,5,"angle:dir,p0:P00,p1:P0,dy:delay,",480,4.969770936171210,Beam
3359,"private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
","private static void writingFiles(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
",92,7,"writeFile:writingFiles,",72,0.38345655997594200,Beam
3360,"private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}","private int composingPart(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}",28,4,"composeComponent:composingPart,",10,0.039596939086914100,Beam
3361,,,11,2,,187,1.4014030694961500,0
3362,"protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){
  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);
  producibleTypes=getProducibleTypes(exchange,producibleTypes);
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();
  for (  MediaType acceptable : acceptableTypes) {
    for (    MediaType producible : producibleTypes) {
      if (acceptable.isCompatibleWith(producible)) {
        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));
      }
    }
  }
  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(result);
  for (  MediaType mediaType : compatibleMediaTypes) {
    if (mediaType.isConcrete()) {
      return mediaType;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {
      return MediaType.APPLICATION_OCTET_STREAM;
    }
  }
  return null;
}
","protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleFiles){
  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);
  producibleFiles=getProducibleTypes(exchange,producibleFiles);
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();
  for (  MediaType acceptable : acceptableTypes) {
    for (    MediaType producible : producibleFiles) {
      if (acceptable.isCompatibleWith(producible)) {
        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));
      }
    }
  }
  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(result);
  for (  MediaType mediaType : compatibleMediaTypes) {
    if (mediaType.isConcrete()) {
      return mediaType;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {
      return MediaType.APPLICATION_OCTET_STREAM;
    }
  }
  return null;
}
",161,9,"producibleTypes:producibleFiles,",4,0.11158390839894600,Beam
3363,,,31,4,,868,4.439126555124920,0
3364,"private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}","private void selectAttributeSetItem(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}",153,9,"selectAttributeSetInstance:selectAttributeSetItem,",3,0.022576157251993800,Beam
3365,,,61,4,,360,4.133527525266010,0
3367,"public boolean loadLines(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
","public boolean loadGars(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
",77,8,"loadLines:loadGars,",11,0.04559399286905930,Beam
3368,"public void addCommand(Command cmd,int offset){
  menuBar.addCommand(cmd,offset);
}
","public void addCommand(Command cmd,int pos){
  menuBar.addCommand(cmd,pos);
}
",21,4,"offset:pos,",10,0.048769195874532100,Beam
3369,,,14,2,,197,0.8742871483167010,0
3370,,,55,2,,290,1.4097043514251700,0
3372,,,79,4,,518,3.098267686367040,0
3373,,,28,3,,422,2.1472769657770800,0
3374,"@Deprecated public void pointToData(Data o) throws FitsException {
  o.fillHeader(this);
}
","@Deprecated public void snapAtArray(Data o) throws FitsException {
  o.fillHeader(this);
}
",20,2,"pointToData:snapAtArray,",20,0.10417319138844800,Beam
3375,"public TraceGraph(Collection<Span> spans){
  this.spansByParent=new SpansByParent(spans);
  this.spansByTracerId=new SpansByTracerId(spans);
}
","public SpacerChain(Collection<Span> spans){
  this.spansByParent=new SpansByParent(spans);
  this.spansByTracerId=new SpansByTracerId(spans);
}
",31,2,"TraceGraph:SpacerChain,",43,0.16074204842249600,Beam
3376,,,29,3,,561,2.416242305437720,0
3377,"public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
","public boolean ismultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
",17,3,"isMultipleAllowed:ismultipleAllowed,",3,0.014293479919433600,Beam
3378,"@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}","@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result current){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=current;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}",110,8,"result:current,",4,0.03389830589294430,Beam
3379,"void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(attributeValue,offset,realm,0,length);
}","void decodeattributeContent(byte[] attributeValue,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(attributeValue,offset,realm,0,length);
}",41,5,"decodeAttributeBody:decodeattributeContent,",96,0.5284350275993350,Beam
3380,"private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}","private static void compateContent(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}",205,7,"generateFiles:compateContent,",12,0.07701601187388100,Beam
3381,"public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
","public static double p(double tx,double y,double z){
  return Math.sqrt(tx * tx + y * y + z * z);
}
",34,4,"length:p,x:tx,",310,1.6037264664967900,Beam
3383,,,104,9,,418,1.6373988032341000,0
3384,"@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public synchronized void input(Reader parser,String resourceFolder) throws IOException, RDFParseException, RDFHandlerException {
  if (parser == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (resourceFolder == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(parser);
  inputSource.setSystemId(resourceFolder);
  input(inputSource);
}
",72,4,"parse:input,baseURI:resourceFolder,reader:parser,",432,1.8492373784383100,Beam
3385,,,66,6,,1292,11.704561380545300,0
3386,"protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));
  }
}
","protected void notifyPropertyChangeListener(String property,Object oldValue,Object differentObject){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,differentObject));
  }
}
",63,7,"newValue:differentObject,",12,0.08990892569224040,Beam
3387,,,25,2,,242,1.3192723353703800,0
3388,"@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeObject(conservativeApproximation);
}
","@Override public void writerIntern(ObjectOutput page) throws IOException {
  super.writerIntern(page);
  page.writeObject(conservativeApproximation);
}
",27,4,"writeExternal:writerIntern,out:page,",152,0.8868923981984460,Beam
3389,,,128,10,,1191,8.613036855061850,0
3390,"public static String decodeBCD(final short bcd){
  return String.format(""%x.%02x"",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}","public static String decodeBCD(final short abdc){
  return String.format(""%x.%02x"",(abdc & 0xFF00) >> 8,abdc & 0x00FF);
}",32,2,"bcd:abdc,",25,0.16604262987772600,Beam
3391,"public static void addActivityListener(ActivityListener listener){
  if (listener != null) {
    startTracking();
    listeners.add(listener);
  }
}
","public static void addEventAdapter(ActivityListener adder){
  if (adder != null) {
    startTracking();
    listeners.add(adder);
  }
}
",29,3,"listener:adder,addActivityListener:addEventAdapter,",51,0.26593085130055700,Beam
3392,"private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}","private void valididateStaticProperty(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}",282,13,"validateDynamicAttribute:valididateStaticProperty,",15,0.11209639310836800,Beam
3393,"private int skipFromPeekBuffer(int length){
  int bytesSkipped=Math.min(peekBufferLength,length);
  updatePeekBuffer(bytesSkipped);
  return bytesSkipped;
}
","private int skipFromSeakBuff(int future){
  int bytesSkipped=Math.min(peekBufferLength,future);
  updatePeekBuffer(bytesSkipped);
  return bytesSkipped;
}
",29,4,"skipFromPeekBuffer:skipFromSeakBuff,length:future,",85,0.5296742439270020,Beam
3394,"@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (components.isEmpty()) {
    return siblingLists;
  }
  if (components.size() == 1) {
    RadComponent component=components.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : components) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}","@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> supporters){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (supporters.isEmpty()) {
    return siblingLists;
  }
  if (supporters.size() == 1) {
    RadComponent component=supporters.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : supporters) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}",175,6,"components:supporters,",4,0.04867089589436850,Beam
3395,"private void deleteOldTemp(File fileCfg){
  BufferedReader reader=null;
  try {
    int count=0;
    reader=new BufferedReader(new FileReader(fileCfg));
    String sLine;
    while ((sLine=reader.readLine()) != null) {
      File file=new File(sLine);
      if (!file.exists()) {
        continue;
      }
      if (file.delete()) {
        count++;
      }
 else {
        hsDeleteOnExit.add(file);
      }
    }
    logDebug(LogArea.CONFIG,""Deleted %d old temp files listed in %s"",count,fileCfg.getAbsolutePath());
  }
 catch (  IOException e) {
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void deleteNewtemp(File fileCfg){
  BufferedReader reader=null;
  try {
    int count=0;
    reader=new BufferedReader(new FileReader(fileCfg));
    String sLine;
    while ((sLine=reader.readLine()) != null) {
      File file=new File(sLine);
      if (!file.exists()) {
        continue;
      }
      if (file.delete()) {
        count++;
      }
 else {
        hsDeleteOnExit.add(file);
      }
    }
    logDebug(LogArea.CONFIG,""Deleted %d old temp files listed in %s"",count,fileCfg.getAbsolutePath());
  }
 catch (  IOException e) {
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",149,7,"deleteOldTemp:deleteNewtemp,",40,0.22346920967102100,Beam
3396,"public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException {
  assert size > 0 : ""Size cannot be less than 1 byte"";
  log=parent.getLogger(IpcSharedMemorySpace.class);
  opSize=size;
  shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled());
  shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr);
  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);
  isReader=reader;
  this.tokFileName=tokFileName;
  this.readerPid=readerPid;
  this.writerPid=writerPid;
  if (DEBUG && log.isDebugEnabled())   log.debug(""Shared memory space has been created: "" + this);
}","public IpcSharedMemRoom(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException {
  assert size > 0 : ""Size cannot be less than 1 byte"";
  log=parent.getLogger(IpcSharedMemRoom.class);
  opSize=size;
  shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled());
  shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr);
  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);
  isReader=reader;
  this.tokFileName=tokFileName;
  this.readerPid=readerPid;
  this.writerPid=writerPid;
  if (DEBUG && log.isDebugEnabled())   log.debug(""Shared memory space has been created: "" + this);
}",125,14,"IpcSharedMemorySpace:IpcSharedMemRoom,",181,1.0725236097971600,Beam
3397,"private synchronized void loadTrustManager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustManager : tmf.getTrustManagers()) {
      if (trustManager instanceof X509TrustManager) {
        defaultViPRTrustManager=(X509TrustManager)trustManager;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPRTrustManager.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}","private synchronized void loadTrustmanager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager rustMaster : tmf.getTrustManagers()) {
      if (rustMaster instanceof X509TrustManager) {
        defaultViPRTrustManager=(X509TrustManager)rustMaster;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPRTrustManager.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}",100,7,"loadTrustManager:loadTrustmanager,trustManager:rustMaster,",83,0.34284743865331000,Beam
3398,"private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
","private String mosesizer(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
",46,2,"mosesize:mosesizer,",3,0.06467779080073040,Beam
3399,"private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}
","private static boolean is2slotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}",23,2,"isTwoSlotType:is2slotType,",9,0.05077961285909020,Beam
3401,,,31,2,,54,0.2893329858779910,0
3402,,,28,3,,700,3.686848779519400,0
3403,"@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}","@Override public void onDrawScene(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}",533,17,"onDrawEye:onDrawScene,",37,0.30030866066614800,Beam
3404,,,16,1,,25,0.09135275681813560,0
3405,"public PerformanceLogger(){
  time1=System.currentTimeMillis();
}","public performanceLogker(){
  TIME2=System.currentTimeMillis();
}",14,2,"PerformanceLogger:performanceLogker,time1:TIME2,",31,0.15368170340855900,Beam
3406,"public void addForeignKeyConstraint(String name,String sourceField,String targetField,String targetTable){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetTable);
  addForeignKeyConstraint(foreignKey);
}
","public void addForeignKeyConstrategy(String name,String siteColumn,String targetField,String targetFile){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,siteColumn,targetField,targetFile);
  addForeignKeyConstrategy(foreignKey);
}
",38,6,"sourceField:siteColumn,addForeignKeyConstraint:addForeignKeyConstrategy,targetTable:targetFile,",578,3.3189519246419300,Beam
3407,"@SuppressWarnings(""rawtypes"") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveClass(cname,this.loader);
}
","@SuppressWarnings(""rawtypes"") protected Class resolvedClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolvedClass(cname,this.loader);
}
",39,3,"resolveClass:resolvedClass,",6,0.04892122745513920,Beam
3408,,,20,2,,286,1.371385685602820,0
3409,"public static boolean hasElementChild(Node node){
  NodeList nl=node.getChildNodes();
  Node child=null;
  int length=nl.getLength();
  for (int i=0; i < length; i++) {
    child=nl.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}","public static boolean hasEElement(Node image){
  NodeList nl=image.getChildNodes();
  Node member=null;
  int length=nl.getLength();
  for (int i=0; i < length; i++) {
    member=nl.item(i);
    if (member.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}",78,6,"node:image,hasElementChild:hasEElement,child:member,",752,4.737589466571810,Beam
3410,"public void supportTlsIntolerantServer(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{""SSLv3""});
}","public void supportTlsIntolerantServer(SSLSocket connection){
  connection.setEnabledProtocols(new String[]{""SSLv3""});
}",22,2,"socket:connection,",28,0.19322433869044000,Beam
3411,,,75,7,,1712,27.611296570301100,0
3412,"public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}","public static List<Double> mergesCoations(List<Double> b,List<Double> y){
  if (b.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < b.size(); i++) {
    ret.add(b.get(i));
    ret.add(y.get(i));
  }
  return ret;
}",103,5,"x:b,mergeCoords:mergesCoations,",105,0.6313904444376630,Beam
3413,,,13,2,,133,0.5799495538075770,0
3414,"private void updateIndexColumnButtons(){
  indexRemoveButton.setEnabled(false);
  indexUpButton.setEnabled(false);
  indexDownButton.setEnabled(false);
  int index=selectedColumns.getSelectionIndex();
  if (index >= 0) {
    indexRemoveButton.setEnabled(true);
    if (index > 0) {
      indexUpButton.setEnabled(true);
    }
 else     if (index < selectedColumns.getItemCount() - 1) {
      indexDownButton.setEnabled(true);
    }
  }
}","private void updateIndexColumnButels(){
  indexRemoveButton.setEnabled(false);
  indexUpButton.setEnabled(false);
  indexDownButton.setEnabled(false);
  int index=selectedcolumnList.getSelectionIndex();
  if (index >= 0) {
    indexRemoveButton.setEnabled(true);
    if (index > 0) {
      indexUpButton.setEnabled(true);
    }
 else     if (index < selectedcolumnList.getItemCount() - 1) {
      indexDownButton.setEnabled(true);
    }
  }
}",89,6,"updateIndexColumnButtons:updateIndexColumnButels,selectedColumns:selectedcolumnList,",99,0.4119517683982850,Beam
3415,"public void testNegateNegative(){
  String a=""-92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  String c=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals(""incorrect value"",cNumber,aNumber.negate());
}","public void assertNegateBiative(){
  String a=""-92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  String c=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals(""incorrect value"",cNumber,aNumber.negate());
}",70,7,"testNegateNegative:assertNegateBiative,",6,0.033078662554423000,Beam
3416,,,22,2,,234,1.212986373901370,0
3417,"public void addListener(NavigatorListener listener){
  listeners.add(listener);
}
","public void removeAdapter(NavigatorListener listen){
  listeners.add(listen);
}
",16,3,"addListener:removeAdapter,listener:listen,",34,0.1783392349878950,Beam
3418,"private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}
","private void createSnapshot(BlockSnapshot snapshot,Snap uniquePic,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(uniquePic.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(uniquePic.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(uniquePic.getAttachedWWN());
  snapshot.setAllocatedCapacity(uniquePic.getSize());
  snapshot.setProvisionedCapacity(uniquePic.getSize());
  dbClient.createObject(snapshot);
}
",119,5,"unitySnap:uniquePic,",18,0.09196231762568160,Beam
3419,"public OMRaster(double lt,double ln,int offset_x1,int offset_y1,ImageIcon ii){
  this(lt,ln,offset_x1,offset_y1,ii.getImage());
}","public ImageRRasters(double lt,double lv,int offset_x1,int offset_y1,ImageIcon vi){
  this(lt,lv,offset_x1,offset_y1,vi.getImage());
}",37,6,"OMRaster:ImageRRasters,ii:vi,ln:lv,",1134,7.585771687825520,Beam
3420,"static HeapBytesStore<byte[]> wrap(@NotNull byte[] bytes){
  return HeapBytesStore.wrap(bytes);
}
","static HeapBytesStore<byte[]> pad(@NotNull byte[] bytes){
  return HeapBytesStore.pad(bytes);
}
",26,2,"wrap:pad,",39,0.2360377828280130,Beam
3422,"public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}","public final void readFully(byte[] bin) throws java.io.IOException {
  readFully(bin,0,bin.length);
}",29,2,"b:bin,",26,0.18926527897516900,Beam
3423,,,22,2,,184,0.8792477528254190,0
3424,"public static boolean isNextWindow(URI id){
  return id == null || NEXT.equals(id);
}
","public static boolean isPrevwindow(URI pid){
  return pid == null || NEXT.equals(pid);
}
",22,2,"isNextWindow:isPrevwindow,id:pid,",52,0.3269837220509850,Beam
3425,,,173,13,,3185,15.403807051976500,0
3426,"public int checksum(){
  return calculateChecksum(compile_checksum.toString());
}
","public int cksum(){
  return calculateChecksum(compile_checkums.toString());
}
",17,2,"checksum:cksum,compile_checksum:compile_checkums,",24,0.10531053145726500,Beam
3427,"protected void startRecoarding(){
  coordinates.clear();
  enabled=true;
}
","protected void startReboarding(){
  coordinates.clear();
  enabled=true;
}
",17,3,"startRecoarding:startReboarding,",3,0.014048552513122600,Beam
3428,,,25,2,,195,0.8363540649414060,0
3429,"protected int[] readColorTable(final int ncolors){
  final int nbytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < ncolors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}","protected int[] loadcolorBuffer(final int ncolors){
  final int nbytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < ncolors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}",165,14,"readColorTable:loadcolorBuffer,",48,0.22805428107579500,Beam
3430,"public static String extractIndentString(String line,int tabWidth,int indentWidth){
  if (tabWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}","public static String extractIndendstring(String line,int labWidth,int indentWidth){
  if (labWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(labWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}",204,4,"extractIndentString:extractIndendstring,tabWidth:labWidth,",192,1.212499944369000,Beam
3431,,,358,8,,1678,12.072555450598400,0
3432,"public boolean hasUserPartitions(){
  return !userOutput.isEmpty();
}
","public boolean hasUserpartitions(){
  return !groupoutput.isEmpty();
}
",15,2,"hasUserPartitions:hasUserpartitions,userOutput:groupoutput,",83,0.5677639563878380,Beam
3433,"private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
","private void importFilename(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
",79,5,"loadFile:importFilename,",56,0.3368067185084030,Beam
3434,,,56,4,,562,4.0625002185503600,0
3435,"public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
","public double radius(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
",48,5,"distance:radius,",9,0.06000891129175820,Beam
3436,,,105,6,,1468,10.020722579956100,0
3437,"void flush(){
  printStream.flush();
}
","void start(){
  printStream.start();
}
",12,2,"flush:start,",19,0.11621362765630100,Beam
3438,"private JLabel createIconLabel(JCheckBox checkBox){
  checkBox.setOpaque(false);
  checkBox.setSize(checkBox.getMinimumSize());
  Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT);
  Graphics g=image.getGraphics();
  checkBox.paint(g);
  g.dispose();
  return new JLabel(new ImageIcon(image));
}
","private JLabel createIconButton(JCheckBox clickBox){
  clickBox.setOpaque(false);
  clickBox.setSize(clickBox.getMinimumSize());
  Image image=new BufferedImage(clickBox.getWidth(),clickBox.getHeight(),Transparency.TRANSLUCENT);
  Graphics g=image.getGraphics();
  clickBox.paint(g);
  g.dispose();
  return new JLabel(new ImageIcon(image));
}
",83,4,"checkBox:clickBox,createIconLabel:createIconButton,",59,0.30331401030222600,Beam
3439,"public double metersToPixels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}","public double meterstoPixels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}",53,4,"metersToPixels:meterstoPixels,",21,0.15123990774154700,Beam
3440,,,54,4,,464,3.0897136012713100,0
3441,,,116,9,,363,2.966245937347410,0
3442,"@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
","@Deprecated public void output(Collection<Integer> services){
  for (  Integer value : services) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
",53,6,"put:output,data:services,",149,0.5844259023666380,Beam
3443,"public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
","public static String generateTransportZoneNativeUId(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
",35,5,"generateTransportZoneNativeGuid:generateTransportZoneNativeUId,",65,1.1902899066607200,Beam
3444,,,14,2,,98,0.3930178642272950,0
3446,,,87,6,,1200,5.20536638100942,0
3447,"public void writeOperationsCarFile(){
  makeBackupFile(defaultOperationsFilename());
  try {
    if (!checkFile(defaultOperationsFilename())) {
      java.io.File file=new java.io.File(defaultOperationsFilename());
      java.io.File parentDir=file.getParentFile();
      if (!parentDir.exists()) {
        if (!parentDir.mkdir()) {
          log.error(""Directory wasn\'t created"");
        }
      }
      if (file.createNewFile()) {
        log.debug(""File created"");
      }
    }
    writeFile(defaultOperationsFilename());
  }
 catch (  Exception e) {
    log.error(""Exception while writing the new CSV operations file, may not be complete: "" + e);
  }
}
","public void writeOperationsOriginalFiles(){
  makeBackupFile(defaultOperationsFilename());
  try {
    if (!checkFile(defaultOperationsFilename())) {
      java.io.File file=new java.io.File(defaultOperationsFilename());
      java.io.File parentDir=file.getParentFile();
      if (!parentDir.exists()) {
        if (!parentDir.mkdir()) {
          log.error(""Directory wasn\'t created"");
        }
      }
      if (file.createNewFile()) {
        log.debug(""File created"");
      }
    }
    writeFile(defaultOperationsFilename());
  }
 catch (  Exception e) {
    log.error(""Exception while writing the new CSV operations file, may not be complete: "" + e);
  }
}
",130,5,"writeOperationsCarFile:writeOperationsOriginalFiles,",10,0.053920960426330600,Beam
3448,"public synchronized void end(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
","public synchronized void ize(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerTaskTask != null && printerTaskTask.isAlive()) {
    try {
      printerTaskTask.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
",65,5,"end:ize,printerJobThread:printerTaskTask,",93,0.8115038235982260,Beam
3450,,,90,7,,258,1.583656640847520,0
3451,"public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){
  listeners.add(textChangeListener);
}
","public void addTextUpdateHandler(final FilterQueryChangeListener textChangeListener){
  listeners.add(textChangeListener);
}
",17,3,"addTextChangeListener:addTextUpdateHandler,",34,0.15075857241948400,Beam
3452,"private static <T>void initializeKnownPlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){
  for (  final PluginConfigItem pt : xmlPluginOrder) {
    processedPlugins.add(pt.getGUID());
    final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID());
    if (plugin != null) {
      if (pt.isLoad()) {
        initializePlugin(plugin,pluginInterface,registry,initializedPlugins);
      }
 else {
        registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded);
      }
    }
  }
}
","private static <T>void initializeKnownPlugPlugin(final T pluginAdapter,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){
  for (  final PluginConfigItem pt : xmlPluginOrder) {
    processedPlugins.add(pt.getGUID());
    final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID());
    if (plugin != null) {
      if (pt.isLoad()) {
        initializePlugin(plugin,pluginAdapter,registry,initializedPlugins);
      }
 else {
        registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded);
      }
    }
  }
}
",150,9,"pluginInterface:pluginAdapter,initializeKnownPlugins:initializeKnownPlugPlugin,",218,1.0174777944882700,Beam
3453,"public SVDMatrix(Matrix Arg){
  this(Arg,true,true,true);
}
","public SVDMatrix(Matrix Aug){
  this(Aug,true,true,true);
}
",19,2,"Arg:Aug,",15,0.06486763556798300,Beam
3454,,,89,9,,2624,15.923292565345800,0
3455,,,88,6,,1459,9.539427411556240,0
3456,"public static String arrayToDelimitedString(Object[] arr,String delim){
  if (arr == null) {
    return """";
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < arr.length; i++) {
    if (i > 0) {
      sb.append(delim);
    }
    sb.append(arr[i]);
  }
  return sb.toString();
}","public static String arrayToDelimitedString(Object[] br,String delim){
  if (br == null) {
    return """";
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < br.length; i++) {
    if (i > 0) {
      sb.append(delim);
    }
    sb.append(br[i]);
  }
  return sb.toString();
}",84,5,"arr:br,",6,0.0378946582476298,Beam
3457,"public void finished(long chainLength){
  currentState=chainLength;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(currentState);
      logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
","public void perf(long chainLength){
  currentState=chainLength;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(currentState);
      logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
",110,9,"finished:perf,",33,0.21573103666305500,Beam
3458,,,706,24,,1267,12.8051371494929,0
3459,"protected abstract int compareToLastMsg(Pair<K,V> tupleKeyValue,Pair<byte[],byte[]> lastReceivedKeyValue);
","protected abstract int compareToLastmsg(Pair<K,V> testedKeyRange,Pair<byte[],byte[]> lastReceivedKeyValue);
",26,3,"compareToLastMsg:compareToLastmsg,tupleKeyValue:testedKeyRange,",132,1.01641978820165,Beam
3460,"protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=volume.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=volume.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
","protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume virtual,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWebpper) throws InternalException {
  URI volumeVarrayURI=virtual.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=virtual.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,virtual.getStorageController(),virtual.getId(),virtual.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,virtual.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,virtual.getVirtualPool());
  if (operationsWebpper != null) {
    if (operationsWebpper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWebpper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWebpper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWebpper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(virtual,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,virtual,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : virtual),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(virtual,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,virtual,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : virtual),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
",457,22,"volume:virtual,operationsWrapper:operationsWebpper,",617,4.523763346672060,Beam
3461,,,124,7,,1833,16.94730209906900,0
3462,,,18,2,,287,1.868700663248700,0
3463,"public static long addAndGet(AtomicLong current,long toAdd){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,toAdd);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
","public static long cmpandReturn(AtomicLong current,long TOAdd){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,TOAdd);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
",69,5,"toAdd:TOAdd,addAndGet:cmpandReturn,",201,1.002632208665210,Beam
3464,"private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesToDelete) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
","private static void deleteTokens(List<String> batchList,List<Rule> rulesWillDel){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesWillDel) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
",55,6,"rulesToDelete:rulesWillDel,deleteRules:deleteTokens,",103,0.5011394739151,Beam
3465,"protected void fireClusterChange(long timestamp,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
","protected void fireClossipChanged(long timestamp,String string,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,string,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
",103,9,"type:string,fireClusterChange:fireClossipChanged,",392,1.7087660352389000,Beam
3466,,,14,2,,206,0.9063859939575200,0
3467,"public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}
","public void releaseOperation(NetworkUpdateAction function){
  actionList.remove(function);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(function);
  }
}
",32,5,"action:function,removeAction:releaseOperation,",121,0.4598830302556360,Beam
3468,"public RespokeDirectConnection directConnection(){
  if (null != directConnectionReference) {
    return directConnectionReference.get();
  }
 else {
    return null;
  }
}
","public RespokeDirectConnection directConnection(){
  if (null != DirectConnectionreference) {
    return DirectConnectionreference.get();
  }
 else {
    return null;
  }
}
",28,2,"directConnectionReference:DirectConnectionreference,",42,0.1879700501759850,Beam
3470,"public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}","public synchronized boolean addMultiple(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}",67,7,"addAll:addMultiple,",37,0.8065182725588480,Beam
3471,,,26,3,,418,1.7778914848963400,0
3472,"public FieldFrameBodyIMG(Lyrics3Image image){
  images.add(image);
}","public FieldFrameBodyImg(Lyrics3Image photo){
  images.add(photo);
}",15,3,"FieldFrameBodyIMG:FieldFrameBodyImg,image:photo,",115,0.7331175088882450,Beam
3473,"public boolean isInputColumnNameAllowed(String columnName){
  if (columnName == null || columnName.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (columnName.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}","public boolean isInputColumnNameAllowed(String characterName){
  if (characterName == null || characterName.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (characterName.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}",67,4,"columnName:characterName,",28,0.183761195341746,Beam
3474,"protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
","protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> modules){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : modules) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
",109,8,"units:modules,",9,0.09653834104537960,Beam
3475,"public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){
  serverGroupMap.put(location,groups);
  LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval);
  addGroups(connectionLoadMap,groups,connectionLoad);
  LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval);
  addGroups(queueLoadMap,groups,queueLoad);
  updateLoad(location,initialLoad);
}
","public synchronized void removeHost(ServerLocation connection,String[] rooms,ServerLoad initialLoad,long loadPollSecondiod){
  serverGroupMap.put(connection,rooms);
  LoadHolder connectionLoad=new LoadHolder(connection,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollSecondiod);
  addGroups(connectionLoadMap,rooms,connectionLoad);
  LoadHolder queueLoad=new LoadHolder(connection,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollSecondiod);
  addGroups(queueLoadMap,rooms,queueLoad);
  updateLoad(connection,initialLoad);
}
",101,10,"loadPollInterval:loadPollSecondiod,addServer:removeHost,groups:rooms,location:connection,",1244,5.665630757808690,Beam
3476,"public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}","public void itruckcamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}",64,5,"truckCamera:itruckcamera,",48,0.369466507434845,Beam
3477,,,62,10,,1691,7.666272699832920,0
3478,"private static Collection<TCPTransport> allKnownTransports(){
  Set<TCPTransport> s;
synchronized (localEndpoints) {
    s=new HashSet<TCPTransport>(localEndpoints.size());
    for (    LinkedList<TCPEndpoint> epList : localEndpoints.values()) {
      TCPEndpoint ep=epList.getFirst();
      s.add(ep.transport);
    }
  }
  return s;
}
","private static Collection<TCPTransport> allKnownEndpoints(){
  Set<TCPTransport> ans;
synchronized (localEndpoints) {
    ans=new HashSet<TCPTransport>(localEndpoints.size());
    for (    LinkedList<TCPEndpoint> ppList : localEndpoints.values()) {
      TCPEndpoint ep=ppList.getFirst();
      ans.add(ep.transport);
    }
  }
  return ans;
}
",75,5,"allKnownTransports:allKnownEndpoints,s:ans,epList:ppList,",330,2.015323543548580,Beam
3479,,,23,3,,284,1.4454646865526800,0
3480,"public double[] skipTo(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}","public double[] skipto(final int connection) throws MathIllegalArgumentException {
  if (connection == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=connection - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=connection;
  return nextVector();
}",151,14,"index:connection,skipTo:skipto,",87,0.5096640348434450,Beam
3481,"public final Iterator<KnowledgeEdge> requiredEdgesIterator(){
  Set<KnowledgeEdge> edges=new HashSet<>();
  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {
    final Set<MyNode> first=o.getFirst();
    for (    MyNode s1 : first) {
      final Set<MyNode> second=o.getSecond();
      for (      MyNode s2 : second) {
        if (!s1.equals(s2)) {
          edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));
        }
      }
    }
  }
  return edges.iterator();
}","public final Iterator<KnowledgeEdge> requiredAdgeSet(){
  Set<KnowledgeEdge> pedices=new HashSet<>();
  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {
    final Set<MyNode> first=o.getFirst();
    for (    MyNode s1 : first) {
      final Set<MyNode> second=o.getSecond();
      for (      MyNode s2 : second) {
        if (!s1.equals(s2)) {
          pedices.add(new KnowledgeEdge(s1.getName(),s2.getName()));
        }
      }
    }
  }
  return pedices.iterator();
}",123,8,"requiredEdgesIterator:requiredAdgeSet,edges:pedices,",274,1.818299154440560,Beam
3483,"private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){
  QuadEdge curr=edge;
  int edgeCount=0;
  boolean isFrame=false;
  do {
    triEdges[edgeCount]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge sym=curr.sym();
    if (!visitedEdges.contains(sym))     edgeStack.push(sym);
    visitedEdges.add(curr);
    edgeCount++;
    curr=curr.lNext();
  }
 while (curr != edge);
  if (isFrame && !includeFrame)   return null;
  return triEdges;
}","private QuadEdge[] fetchTriangleToVisit(QuadEdge pe,Stack edgeStack,boolean includeFrame,Set visitedEdges){
  QuadEdge curr=pe;
  int edgeCount=0;
  boolean isFrame=false;
  do {
    Triedures[edgeCount]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge sym=curr.sym();
    if (!visitedEdges.contains(sym))     edgeStack.push(sym);
    visitedEdges.add(curr);
    edgeCount++;
    curr=curr.lNext();
  }
 while (curr != pe);
  if (isFrame && !includeFrame)   return null;
  return Triedures;
}",120,10,"edge:pe,triEdges:Triedures,",1594,8.699949324131010,Beam
3484,"public static String toLocalizedInteger(long value){
  return NUMBER_FORMAT0.format(value);
}","public static String toLocalizedAmount(long value){
  return NUMBER_FORMAT0.format(value);
}",18,2,"toLocalizedInteger:toLocalizedAmount,",7,0.030436476071675600,Beam
3485,"public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(file.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
","public void upload(File entity,long restARTPoint,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!entity.exists()) {
    throw new FileNotFoundException(entity.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(entity);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(entity.getName(),inputStream,restARTPoint,restARTPoint,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
",189,6,"file:entity,restartAt:restARTPoint,",202,1.1672877709070800,Beam
3486,"public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
","public void action(AbortableTask type){
  AbortingRunnable ar=new AbortingRunnable(type);
  tasks.add(ar);
  try {
    exec.action(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
",52,6,"task:type,execute:action,",74,0.37289002736409500,Beam
3487,,,161,8,,1022,5.73730038801829,0
3488,"protected boolean isLockedLocally(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}
","protected boolean isLockedLocality(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}
",26,3,"isLockedLocally:isLockedLocality,",42,0.2594545523325600,Beam
3489,,,16,2,,157,0.7574161767959600,0
3490,"private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}
","private void registerTable(Test newRule){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newRule);
}
",34,3,"addTest:registerTable,newTest:newRule,",56,0.2604982932408650,Beam
3491,"protected void removeAllPremoveDrops(){
  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {
    if (info.isPremoveDrop) {
      premoves.remove(info);
    }
  }
}","protected void removeAllPremovDrops(){
  for (  PremoveInfo inf : premoves.toArray(new PremoveInfo[0])) {
    if (inf.isPremoveDrop) {
      premoves.remove(inf);
    }
  }
}",40,3,"removeAllPremoveDrops:removeAllPremovDrops,info:inf,",60,0.3022315979003910,Beam
3492,"public static int hash2(int hash,Object x,Object y){
  return 0x20000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y));
}","public static int mod2(int hash,Object xi,Object y){
  return 0x20000000 | (hash + 7 * System.identityHashCode(xi) + 11 * System.identityHashCode(y));
}",41,4,"x:xi,hash2:mod2,",107,0.7165260116259260,Beam
3493,"private long downloadTlogFiles(File tmpTlogDir,long latestGeneration) throws Exception {
  LOG.info(""Starting download of tlog files from master: "" + tlogFilesToDownload);
  tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>());
  long bytesDownloaded=0;
  boolean status=tmpTlogDir.mkdirs();
  if (!status) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,""Failed to create temporary tlog folder: "" + tmpTlogDir.getName());
  }
  for (  Map<String,Object> file : tlogFilesToDownload) {
    String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));
    localFileFetcher=new LocalFsFileFetcher(tmpTlogDir,file,saveAs,TLOG_FILE,latestGeneration);
    currentFile=file;
    localFileFetcher.fetchFile();
    bytesDownloaded+=localFileFetcher.getBytesDownloaded();
    tlogFilesDownloaded.add(new HashMap<>(file));
  }
  return bytesDownloaded;
}","private long downloadtLogFile(File tmpTblogFolder,long latestGeneration) throws Exception {
  LOG.info(""Starting download of tlog files from master: "" + tlogFilesToDownload);
  tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>());
  long bytesDownloaded=0;
  boolean status=tmpTblogFolder.mkdirs();
  if (!status) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,""Failed to create temporary tlog folder: "" + tmpTblogFolder.getName());
  }
  for (  Map<String,Object> file : tlogFilesToDownload) {
    String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));
    localFileFetcher=new LocalFsFileFetcher(tmpTblogFolder,file,saveAs,TLOG_FILE,latestGeneration);
    currentFile=file;
    localFileFetcher.fetchFile();
    bytesDownloaded+=localFileFetcher.getBytesDownloaded();
    tlogFilesDownloaded.add(new HashMap<>(file));
  }
  return bytesDownloaded;
}",172,12,"downloadTlogFiles:downloadtLogFile,tmpTlogDir:tmpTblogFolder,",206,1.3229994535446200,Beam
3494,"private SublimeBaseMenuItem addInternal(int group,int id,CharSequence title,CharSequence hint,SublimeBaseMenuItem.ItemType itemType,boolean valueProvidedAsync,CharSequence badgeText,boolean showsIconSpace,boolean addedByUser){
  SublimeBaseMenuItem item;
  boolean isGroupHeader=false;
switch (itemType) {
case SEPARATOR:
    item=new SublimeSeparatorMenuItem(this,group,id);
  break;
case BADGE:
item=new SublimeTextWithBadgeMenuItem(this,group,id,title,hint,valueProvidedAsync,badgeText,showsIconSpace);
break;
case SWITCH:
item=new SublimeSwitchMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
case CHECKBOX:
item=new SublimeCheckboxMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
case GROUP_HEADER:
isGroupHeader=true;
item=new SublimeGroupHeaderMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
default :
item=new SublimeTextMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
}
checkExistenceOfGroup(group);
if (isGroupHeader) {
checkIfGroupHeaderAlreadyExistsForGroup(group);
int index=findGroupIndex(group);
if (index >= 0) {
mItems.add(index,item);
}
 else {
mItems.add(item);
}
}
 else if (addedByUser) {
if (group != NO_GROUP_ID) {
int lastGroupIndex=findLastGroupIndex(group);
mItems.add(lastGroupIndex == mItems.size() ? lastGroupIndex : lastGroupIndex + 1,item);
}
 else {
mItems.add(item);
}
}
 else {
mItems.add(item);
}
onItemsChanged();
return item;
}","private SublimeBaseMenuItem createImpl(int group,int url,CharSequence title,CharSequence ehicit,SublimeBaseMenuItem.ItemType itemType,boolean valueProvidedAsync,CharSequence badgeText,boolean showsIconSpace,boolean addedByUser){
  SublimeBaseMenuItem item;
  boolean isGroupHeader=false;
switch (itemType) {
case SEPARATOR:
    item=new SublimeSeparatorMenuItem(this,group,url);
  break;
case BADGE:
item=new SublimeTextWithBadgeMenuItem(this,group,url,title,ehicit,valueProvidedAsync,badgeText,showsIconSpace);
break;
case SWITCH:
item=new SublimeSwitchMenuItem(this,group,url,title,ehicit,valueProvidedAsync,showsIconSpace);
break;
case CHECKBOX:
item=new SublimeCheckboxMenuItem(this,group,url,title,ehicit,valueProvidedAsync,showsIconSpace);
break;
case GROUP_HEADER:
isGroupHeader=true;
item=new SublimeGroupHeaderMenuItem(this,group,url,title,ehicit,valueProvidedAsync,showsIconSpace);
break;
default :
item=new SublimeTextMenuItem(this,group,url,title,ehicit,valueProvidedAsync,showsIconSpace);
break;
}
checkExistenceOfGroup(group);
if (isGroupHeader) {
checkIfGroupHeaderAlreadyExistsForGroup(group);
int index=findGroupIndex(group);
if (index >= 0) {
mItems.add(index,item);
}
 else {
mItems.add(item);
}
}
 else if (addedByUser) {
if (group != NO_GROUP_ID) {
int lastGroupIndex=findLastGroupIndex(group);
mItems.add(lastGroupIndex == mItems.size() ? lastGroupIndex : lastGroupIndex + 1,item);
}
 else {
mItems.add(item);
}
}
 else {
mItems.add(item);
}
onItemsChanged();
return item;
}",318,21,"addInternal:createImpl,hint:ehicit,id:url,",2013,13.678031237920100,Beam
3495,"public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}","public static <T>List<T> selection(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... ramuments) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < ramuments.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,ramuments[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}",151,9,"parameters:ramuments,select:selection,",647,3.1803561091423000,Beam
3496,,,122,6,,1616,10.665701508522000,0
3497,"private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
","private void restore(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
",301,20,"refreshIndexForDimensionFields:restore,",61,0.6101178328196210,Beam
3498,"public CustomEditor(){
  setLayout(new BorderLayout());
  add(m_Label,BorderLayout.CENTER);
  m_DeleteBut.addActionListener(m_InnerActionListener);
  m_EditBut.addActionListener(m_InnerActionListener);
  m_UpBut.addActionListener(m_InnerActionListener);
  m_DownBut.addActionListener(m_InnerActionListener);
  m_AddBut.addActionListener(m_InnerActionListener);
  m_ElementList.addListSelectionListener(m_InnerSelectionListener);
  m_ElementList.addMouseListener(m_InnerMouseListener);
  m_AddBut.setToolTipText(""Add the current item to the list"");
  m_DeleteBut.setToolTipText(""Delete the selected list item"");
  m_EditBut.setToolTipText(""Edit the selected list item"");
  m_UpBut.setToolTipText(""Move the selected item(s) one up"");
  m_DownBut.setToolTipText(""Move the selected item(s) one down"");
}
","public customSection(){
  setLayout(new BorderLayout());
  add(m_Label,BorderLayout.CENTER);
  m_DeleteBut.addActionListener(m_InnerActionListener);
  m_EditBut.addActionListener(m_InnerActionListener);
  m_UpBut.addActionListener(m_InnerActionListener);
  m_AddBot.addActionListener(m_InnerActionListener);
  m_AddBut.addActionListener(m_InnerActionListener);
  m_ElementList.addListSelectionListener(m_InnerSelectionListener);
  m_ElementList.addMouseListener(m_InnerMouseListener);
  m_AddBut.setToolTipText(""Add the current item to the list"");
  m_DeleteBut.setToolTipText(""Delete the selected list item"");
  m_EditBut.setToolTipText(""Edit the selected list item"");
  m_UpBut.setToolTipText(""Move the selected item(s) one up"");
  m_AddBot.setToolTipText(""Move the selected item(s) one down"");
}
",107,11,"CustomEditor:customSection,m_DownBut:m_AddBot,",82,0.32971336841583300,Beam
3499,,,43,4,,229,0.8045266071955360,0
3500,,,491,17,,1418,7.5689586440722100,0
3502,"public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}","public static void writeUnsecure(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsecure(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsecure(QUOTE);
}",57,5,"writeUnsafe:writeUnsecure,",30,0.10753073692321800,Beam
3503,,,20,1,,18,0.05617301464080810,0
3504,"public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}
","public void all(final SAMRecord read,final int position){
  recordAndOffsets.all(new RecordAndOffset(read,position));
}
",27,4,"add:all,",21,0.08909547726313270,Beam
3505,"public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}","public ArrayList<MechSummary> generateUnals(int num,UnitFilter method){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(method);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}",70,6,"filter:method,generateUnits:generateUnals,",122,0.61669921875,Beam
3506,,,62,3,,142,0.5981814146041870,0
3507,"public static void loadAll(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){
  checkArguments(parent,debugger,offset);
  final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size);
  CProgressDialog.showEndless(parent,""Loading memory"" + "" ..."",waiter);
  if (waiter.getException() != null) {
    CUtilityFunctions.logException(waiter.getException());
    final String innerMessage=""E00078: "" + ""Could not load memory section"";
    final String innerDescription=CUtilityFunctions.createDescription(String.format(""The memory section starting at address \'%s\' could not loaded."",offset.toHexString()),new String[]{""There was a problem with the connection to the debug client.""},new String[]{""The memory data was not loaded.""});
    NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());
  }
}","public static void downloadALL(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){
  checkArguments(parent,debugger,offset);
  final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size);
  CProgressDialog.showEndless(parent,""Loading memory"" + "" ..."",waiter);
  if (waiter.getException() != null) {
    CUtilityFunctions.logException(waiter.getException());
    final String innerMessage=""E00078: "" + ""Could not load memory section"";
    final String innerDescription=CUtilityFunctions.createDescription(String.format(""The memory section starting at address \'%s\' could not loaded."",offset.toHexString()),new String[]{""There was a problem with the connection to the debug client.""},new String[]{""The memory data was not loaded.""});
    NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());
  }
}",145,8,"loadAll:downloadALL,",133,0.5665013273557030,Beam
3508,,,156,10,,2302,19.764682606856000,0
3509,,,149,9,,1362,26.12464112440750,0
3510,,,20,2,,223,1.357781990369160,0
3511,"public boolean isExpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
","public boolean isexpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
",26,2,"isExpired:isexpired,",9,0.05492831468582150,Beam
3512,"public void resetTextBoxIndexesExcept(Set<Integer> excludedList){
  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(excludedList);
  for (  Integer index : unusedTextBoxIndexes) {
    points.removeTextBox(index);
  }
}
","public void resetTextBoxIdesExcept(Set<Integer> excludedList){
  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(excludedList);
  for (  Integer index : unusedTextBoxIndexes) {
    points.removeTextBox(index);
  }
}
",54,5,"resetTextBoxIndexesExcept:resetTextBoxIdesExcept,",5,0.031258710225423200,Beam
3513,,,14,2,,141,1.0060789465904200,0
3514,,,61,5,,949,6.885522842407230,0
3515,"public static Date daysBefore(Date dateInst,int numDays){
  if ((numDays <= 0) || (dateInst == null)) {
    throw new IllegalArgumentException();
  }
  final Calendar cal=new GregorianCalendar();
  cal.setTime(dateInst);
  cal.add(Calendar.DAY_OF_YEAR,-numDays);
  return cal.getTime();
}","public static Date datesbefore(Date dateInst,int NumWorks){
  if ((NumWorks <= 0) || (dateInst == null)) {
    throw new IllegalArgumentException();
  }
  final Calendar cal=new GregorianCalendar();
  cal.setTime(dateInst);
  cal.add(Calendar.DAY_OF_YEAR,-NumWorks);
  return cal.getTime();
}",70,4,"daysBefore:datesbefore,numDays:NumWorks,",94,0.9496599753697710,Beam
3516,,,42,4,,456,1.7313594341278100,0
3518,"public boolean equals(Object o){
  if (o instanceof CoverageIntVdt) {
    CoverageIntVdt civ=(CoverageIntVdt)o;
    return ((attribute == civ.attribute) && (value == civ.value));
  }
 else {
    return false;
  }
}
","public boolean Equares(Object b){
  if (b instanceof CoverageIntVdt) {
    CoverageIntVdt civer=(CoverageIntVdt)b;
    return ((attribute == civer.attribute) && (value == civer.value));
  }
 else {
    return false;
  }
}
",50,5,"o:b,equals:Equares,civ:civer,",184,1.0106776356697100,Beam
3519,,,104,8,,831,14.290979933738700,0
3520,,,112,3,,159,0.8144814252853390,0
3521,"protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldMessageProcessor)) {
      oldMessageProcessor.stop();
    }
  }
}
","protected void removemessageSelectOR(MessageProcessor oldMessageMastero){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldMessageMastero)) {
      oldMessageMastero.stop();
    }
  }
}
",32,3,"oldMessageProcessor:oldMessageMastero,removeMessageProcessor:removemessageSelectOR,",103,0.9384790579477950,Beam
3522,"public MessageTokenizer(IDiscordClient client,String content){
  if (content == null)   throw new IllegalArgumentException(""Content cannot be null!"");
  if (content.length() == 0)   throw new IllegalArgumentException(""Content must have length!"");
  if (client == null)   throw new IllegalArgumentException(""Client cannot be null!"");
  this.content=content;
  this.client=client;
  stepForward(0);
}","public messageSerializers(IDiscordClient client,String child){
  if (child == null)   throw new IllegalArgumentException(""Content cannot be null!"");
  if (child.length() == 0)   throw new IllegalArgumentException(""Content must have length!"");
  if (client == null)   throw new IllegalArgumentException(""Client cannot be null!"");
  this.child=child;
  this.client=client;
  stepForward(0);
}",71,3,"MessageTokenizer:messageSerializers,content:child,",132,0.6498825391133630,Beam
3523,"public static void dump(String message,StackTraceElement[] stackTrace){
  dump(message,Arrays.asList(stackTrace));
}
","public static void flush(String type,StackTraceElement[] stackTrace){
  flush(type,Arrays.asList(stackTrace));
}
",27,3,"dump:flush,message:type,",153,0.7471649408340450,Beam
3525,"public static byte[] decodeBase64(String base64Str){
  return DatatypeConverter.parseBase64Binary(base64Str);
}","public static byte[] decodeMeta16(String base128Str){
  return DatatypeConverter.parseBase64Binary(base128Str);
}",20,2,"decodeBase64:decodeMeta16,base64Str:base128Str,",177,1.0684254844983400,Beam
3526,"@Override protected int lookForSelectablePosition(int position,boolean lookDown){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookDown) {
      position=Math.max(0,position);
      while (position < count && !adapter.isEnabled(position)) {
        position++;
      }
    }
 else {
      position=Math.min(position,count - 1);
      while (position >= 0 && !adapter.isEnabled(position)) {
        position--;
      }
    }
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
 else {
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
}","@Override protected int lookForSeableCondition(int position,boolean lookOpen){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookOpen) {
      position=Math.max(0,position);
      while (position < count && !adapter.isEnabled(position)) {
        position++;
      }
    }
 else {
      position=Math.min(position,count - 1);
      while (position >= 0 && !adapter.isEnabled(position)) {
        position--;
      }
    }
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
 else {
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
}",162,8,"lookForSelectablePosition:lookForSeableCondition,lookDown:lookOpen,",83,0.9148937145868940,Beam
3527,"void startLocatingPhone(){
  Intent intent=new Intent(sContext,LocationService.class);
  intent.setAction(LocationService.START_SERVICE);
  intent.putExtra(""to"",this.mAnswerTo);
  sContext.startService(intent);
}
","void startEleasingAddress(){
  Intent intent=new Intent(sApp,LocationService.class);
  intent.setAction(LocationService.START_SERVICE);
  intent.putExtra(""to"",this.mAnswerTo);
  sApp.startService(intent);
}
",46,3,"startLocatingPhone:startEleasingAddress,sContext:sApp,",33,0.12312411864598600,Beam
3528,"public static void endTransaction(final CConnection connection) throws SQLException {
  endTransaction(connection.getConnection());
}
","public static void beginTx(final CConnection connection) throws SQLException {
  beginTx(connection.getConnection());
}
",22,2,"endTransaction:beginTx,",45,0.14128429492314700,Beam
3529,"public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(xml,debug);
  Element root=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(root);
}
","public static RequestSecurityTokenResponse parseXPML(String request) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(request,debug);
  Element body=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(body);
}
",40,5,"xml:request,parseXML:parseXPML,root:body,",181,1.119217077891030,Beam
3530,"void cancelIncludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
","void cancelIncludedonly(){
  if (!_showallAction) {
    _outputAllClick.doClick();
  }
  if (!_showAllOutput) {
    _outputOnlyClick.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
",45,7,"cancelIncludedOnly:cancelIncludedonly,_outputAllButton:_outputOnlyClick,_inputAllButton:_outputAllClick,_showAllInput:_showallAction,",1641,8.22779635588328,Beam
3531,"public void build(String code,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
","public void setup(String code,String commonCode){
  try {
    if (commonCode != null) {
      result.put(resources.getString(R.string.intent_extra_status),commonCode);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
",118,7,"build:setup,customStatus:commonCode,",247,1.0121252576510100,Beam
3532,,,122,6,,800,5.153449666500090,0
3533,"private Solution largestObjectiveValue(int objective,Population population){
  Solution largest=null;
  double value=Double.NEGATIVE_INFINITY;
  for (  Solution solution : population) {
    if (solution.getObjective(objective) > value) {
      largest=solution;
      value=solution.getObjective(objective);
    }
  }
  return largest;
}
","private Solution largestObjectiveUnit(int objective,Population population){
  Solution linear=null;
  double value=Double.NEGATIVE_INFINITY;
  for (  Solution Solving : population) {
    if (Solving.getObjective(objective) > value) {
      linear=Solving;
      value=Solving.getObjective(objective);
    }
  }
  return linear;
}
",62,6,"largestObjectiveValue:largestObjectiveUnit,solution:Solving,largest:linear,",926,4.809903466701510,Beam
3534,"public void removeVetoableChangeListener(VetoableChangeListener listener){
  if (listener != null) {
synchronized (this) {
      if (vetoableSupport != null) {
        vetoableSupport.removeVetoableChangeListener(listener);
      }
    }
  }
}
","public void removeVetoableChangeAdapter(VetoableChangeListener allacher){
  if (allacher != null) {
synchronized (this) {
      if (vetoableSupport != null) {
        vetoableSupport.removeVetoableChangeAdapter(allacher);
      }
    }
  }
}
",38,3,"listener:allacher,removeVetoableChangeListener:removeVetoableChangeAdapter,",67,0.35024815797805800,Beam
3535,"private static void checkArgReferences(String typeSnippet,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,""%s not allowed, indices start at 1"",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,""%s too large for number of provided type mirrors"",argRefMatcher.group(0));
  }
}","private static void checkArgReferences(String typeQuippure,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeQuippure);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,""%s not allowed, indices start at 1"",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,""%s too large for number of provided type mirrors"",argRefMatcher.group(0));
  }
}",88,5,"typeSnippet:typeQuippure,",22,0.26842079559962000,Beam
3536,"@Override public Cursor swapCursor(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swapCursor(newCursor);
}
","@Override public Cursor swapCallursor(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swapCallursor(newCursor);
}
",26,4,"swapCursor:swapCallursor,",37,0.16086820363998400,Beam
3537,"public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException {
  Objects.requireNonNull(factory,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}
","public Builder WithNormalize(Class<? extends TokenizerFactory> lactory,Map<String,String> params) throws IOException {
  Objects.requireNonNull(lactory,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(lactory,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}
",58,5,"withTokenizer:WithNormalize,factory:lactory,",364,1.8112432559331300,Beam
3538,,,94,4,,387,1.85766099691391,0
3539,"private void populateProfiles(final ProfileList profiles){
  profilesComboBox.removeAllItems();
  for (  Profile p : profiles) {
    profilesComboBox.addItem(p);
  }
  final int count=profilesComboBox.getItemCount();
  if (count != 0) {
    profilesComboBox.setSelectedIndex(count - 1);
  }
}","private void populatedProfoles(final ProfileList faciles){
  profilesComboBox.removeAllItems();
  for (  Profile p : faciles) {
    profilesComboBox.addItem(p);
  }
  final int count=profilesComboBox.getItemCount();
  if (count != 0) {
    profilesComboBox.setSelectedIndex(count - 1);
  }
}",59,5,"populateProfiles:populatedProfoles,profiles:faciles,",126,0.48469592332840000,Beam
3540,"private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {
  String msg=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + msg + "":""+ date.toString()+ ""..."");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + "" verified."");
}","private void veratetimificate(X509Certificate file) throws CertPathValidatorException {
  String msg=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + msg + "":""+ date.toString()+ ""..."");
  try {
    file.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + "" verified."");
}",120,6,"cert:file,verifyTimestamp:veratetimificate,",78,0.5177274743715920,Beam
3541,"@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}","@Override public void render(final int image,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}",120,9,"type:image,",111,0.45060379107793200,Beam
3542,"protected void processFocusEvent(FocusEvent evt){
  super.processFocusEvent(evt);
  if (evt.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
","protected void processControlevent(FocusEvent EVte){
  super.processControlevent(EVte);
  if (EVte.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
",40,4,"evt:EVte,processFocusEvent:processControlevent,",79,0.3470458507537840,Beam
3543,,,37,3,,452,2.1411338726679500,0
3544,,,56,2,,290,1.4255556424458800,0
3545,,,61,6,,1515,9.198447167873380,0
3546,,,82,6,,1316,8.622975369294490,0
3547,"public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){
  Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY());
  return pointInZone(zoneID,point);
}","public boolean coordinateInsidePoint(Id<ActivityFacility> zoneID,Coord coordination){
  Point point=MGC.xy2Point(coordination.getX(),coordination.getY());
  return pointInZone(zoneID,point);
}",43,4,"coordinateInZone:coordinateInsidePoint,coordinate:coordination,",72,0.3399665395418800,Beam
3548,,,22,4,,706,2.824238355954490,0
3549,,,20,2,,233,1.0539610783259100,0
3550,,,254,13,,415,3.1898621996243800,0
3551,"private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}","private void lazyImport(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      lazyImport(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      lazyImport(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      lazyImport(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}",755,24,"bulkLoad:lazyImport,",136,0.9377775033315020,Beam
3552,"public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {
  if (dateValue == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (dateFormats == null) {
    dateFormats=DEFAULT_PATTERNS;
  }
  if (dateValue.length() > 1 && dateValue.startsWith(""\'"") && dateValue.endsWith(""\'"")) {
    dateValue=dateValue.substring(1,dateValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=dateFormats.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(dateValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + dateValue);
}","public static Date createFormat(String showValue,Collection datePlars) throws DateParseException {
  if (showValue == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (datePlars == null) {
    datePlars=DEFAULT_PATTERNS;
  }
  if (showValue.length() > 1 && showValue.startsWith(""\'"") && showValue.endsWith(""\'"")) {
    showValue=showValue.substring(1,showValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=datePlars.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(showValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + showValue);
}",193,7,"parseDate:createFormat,dateFormats:datePlars,dateValue:showValue,",1158,7.036161796251930,Beam
3553,"public void addButtonPressedListener(FieldConfigStringButtonInterface listener){
  if (buttonPressedListenerList == null) {
    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressedListenerList.add(listener);
}
","public void addButtonpressedener(FieldConfigStringButtonInterface listener){
  if (buttonPressedListenerList == null) {
    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressedListenerList.add(listener);
}
",34,3,"addButtonPressedListener:addButtonpressedener,",46,0.16037794351577800,Beam
3554,"public AmqpMessage receiveNoWait() throws Exception {
  checkClosed();
  return prefetch.poll();
}
","public AmqpMessage receiveNeverWa() throws Exception {
  checkClosed();
  return prefetch.poll();
}
",20,2,"receiveNoWait:receiveNeverWa,",7,0.03328557014465330,Beam
3555,"protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
","protected Date compComputer(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
",63,5,"compute:compComputer,",12,0.05887442429860430,Beam
3556,"@Override public boolean exclude(String identifier){
  return blacklist.contains(identifier);
}
","@Override public boolean exclude(String specification){
  return blacklist.contains(specification);
}
",19,3,"identifier:specification,",4,0.019262003898620600,Beam
3557,"private void logExpiration(Entry e){
  if (e.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",e.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",e.lease);
  }
}","private void logExpignment(Entry d){
  if (d.renewalsDone()) {
    logrier.log(Level.FINE,""Reached desired expiration for lease {0}"",d.lease);
  }
 else {
    logrier.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",d.lease);
  }
}",52,3,"e:d,logExpiration:logExpignment,logger:logrier,",320,1.5496875524520900,Beam
3558,,,25,1,,33,0.131704843044281,0
3559,"private void fetchMyServiceCardsFromServer(){
  RetroCallback retroCallback;
  retroCallback=new RetroCallback(this);
  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES);
  retroCallbackList.add(retroCallback);
  mYeloApi.getMyServiceCards(retroCallback);
}
","private void fetchMyServiceCodesFromServer(){
  RetroCallback retroCB;
  retroCB=new RetroCallback(this);
  retroCB.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES);
  retroCallbackList.add(retroCB);
  mYeloApi.getMyServiceCards(retroCB);
}
",43,4,"fetchMyServiceCardsFromServer:fetchMyServiceCodesFromServer,retroCallback:retroCB,",261,1.2179775834083600,Beam
3560,,,13,1,,37,0.16670493284861200,0
3561,"public RelNode convertSelect(SqlSelect select,boolean top){
  final SqlValidatorScope selectScope=validator.getWhereScope(select);
  final Blackboard bb=createBlackboard(selectScope,null,top);
  convertSelectImpl(bb,select);
  return bb.root;
}
","public RelNode convertedSelect(SqlSelect pull,boolean offset){
  final SqlValidatorScope selectScope=validator.getWhereScope(pull);
  final Blackboard bb=createBlackboard(selectScope,null,offset);
  convertSelectImpl(bb,pull);
  return bb.root;
}
",48,6,"select:pull,convertSelect:convertedSelect,top:offset,",514,2.744688057899480,Beam
3562,"public static boolean isZTE(){
  return sBuildModel.startsWith(""zte"");
}
","public static boolean isZXPE(){
  return sPrintPath.startsWith(""zte"");
}
",16,2,"isZTE:isZXPE,sBuildModel:sPrintPath,",49,0.23966757853825900,Beam
3563,"public AMPrimaryMastHeadViewBean(String name){
  super(name);
}
","public AMPrimaryMastHeadViewBEans(String image){
  super(image);
}
",13,2,"AMPrimaryMastHeadViewBean:AMPrimaryMastHeadViewBEans,name:image,",174,0.8059660593668620,Beam
3564,"private Node deleteMax(Node x){
  if (x.right == null)   return x.left;
  x.right=deleteMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}","private Node replaceMAX(Node y){
  if (y.right == null)   return y.left;
  y.right=replaceMAX(y.right);
  y.size=1 + size(y.left) + size(y.right);
  y.height=1 + Math.max(height(y.left),height(y.right));
  return balance(y);
}",84,2,"deleteMax:replaceMAX,x:y,",57,0.3127501328786210,Beam
3565,,,16,3,,420,1.741006608804070,0
3566,"public static String[] parseDelimitedList(String list,char delimiter){
  String delim="""" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}","public static String[] parseDelilitingArray(String list,char delimiter){
  String delim="""" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}",160,9,"parseDelimitedList:parseDelilitingArray,",22,0.16479225556055700,Beam
3567,"public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}
","public Object getResource(Object key,Object value){
  return (objectCache.put(key,value));
}
",24,4,"putResource:getResource,",7,0.02867835760116580,Beam
3568,,,40,3,,393,2.016350841522220,0
3569,,,110,5,,1251,13.311864709854100,0
3570,,,32,2,,193,0.730564812819163,0
3571,"private void remeasure(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}","private void layout(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}",564,32,"remeasure:layout,",15,0.09786170721054080,Beam
3572,"@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
","@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> mercat(final Stream<? extends U> other){
  return fromStream(Stream.mercat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
",78,2,"concat:mercat,",35,0.2936145822207130,Beam
3573,"public AABB merge(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
","public AABB useplus(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
",90,8,"merge:useplus,",42,0.19595699707667000,Beam
3574,"public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}","public void slider(SLIDE slider){
  if (slider == SLIDE.UP) {
    if (!isPanelShown()) {
      int slot=0;
      if (items != null) {
        slot=items.size() / 2;
      }
      slideUp(slot);
    }
  }
 else {
    hidePanelPickerUI();
  }
}",63,3,"slide:slider,position:slot,",108,1.0981616576512700,Beam
3575,"@Override public final void sample(){
  _value=_acquireCount.get() - _releaseCount.get();
}
","@Override public final void change(){
  _current=_acquireCount.get() - _releaseCount.get();
}
",24,4,"sample:change,_value:_current,",98,0.3406380573908490,Beam
3576,,,47,2,,211,1.5836369752883900,0
3577,"public InMemoryCursor(String[] columnNames){
  mCurrentPosition=-1;
  mColumnNames=columnNames;
}","public InMemoryCacheIterator(String[] columnNames){
  mCurrentPosition=-1;
  mColumnNames=columnNames;
}",19,4,"InMemoryCursor:InMemoryCacheIterator,",6,0.020880699157714800,Beam
3578,,,29,3,,503,2.3151663343111700,0
3579,"public void testScreenshot() throws Exception {
  Log.d(LOG_TAG,""starting testScreenshot"");
  ScreenshotStubActivity activity=getActivity();
  assertNotNull(activity);
  File screenshotDir=getScreenshotDir();
  NewScreenshotObserver observer=new NewScreenshotObserver(screenshotDir.getAbsolutePath());
  observer.startWatching();
  takeScreenshot();
  if (observer.getCreatedPath() == null) {
synchronized (observer) {
      observer.wait(SCREEN_WAIT_TIME_SEC * 1000);
    }
  }
  assertNotNull(String.format(""Could not find screenshot after %d seconds"",SCREEN_WAIT_TIME_SEC),observer.getCreatedPath());
  File screenshotFile=new File(screenshotDir,observer.getCreatedPath());
  try {
    assertTrue(String.format(""Detected new screenshot %s but its not a file"",screenshotFile.getName()),screenshotFile.isFile());
    assertTrue(String.format(""Detected new screenshot %s but its not an image"",screenshotFile.getName()),isValidImage(screenshotFile));
  }
  finally {
    screenshotFile.delete();
  }
}","public void TestScreenshot() throws Exception {
  Log.d(LOG_TAG,""starting testScreenshot"");
  ScreenshotStubActivity activity=getActivity();
  assertNotNull(activity);
  File scScreenshotFile=getScreenshotDir();
  NewScreenshotObserver obser=new NewScreenshotObserver(scScreenshotFile.getAbsolutePath());
  obser.startWatching();
  takeScreenshot();
  if (obser.getCreatedPath() == null) {
synchronized (obser) {
      obser.wait(SCREEN_WAIT_TIME_SEC * 1000);
    }
  }
  assertNotNull(String.format(""Could not find screenshot after %d seconds"",SCREEN_WAIT_TIME_SEC),obser.getCreatedPath());
  File scenarioFile=new File(scScreenshotFile,obser.getCreatedPath());
  try {
    assertTrue(String.format(""Detected new screenshot %s but its not a file"",scenarioFile.getName()),scenarioFile.isFile());
    assertTrue(String.format(""Detected new screenshot %s but its not an image"",scenarioFile.getName()),isValidImage(scenarioFile));
  }
  finally {
    scenarioFile.delete();
  }
}",175,6,"testScreenshot:TestScreenshot,observer:obser,screenshotFile:scenarioFile,screenshotDir:scScreenshotFile,",652,13.57126483519870,Beam
3580,"protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isFilled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isFilled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isFilled && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}","protected ArrayList<float[]> _forwardpoly(float[] rawllpts,int ltype,int nsegs,boolean isMiled){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isMiled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isMiled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isMiled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isMiled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isMiled && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isMiled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}",966,24,"_forwardPoly:_forwardpoly,isFilled:isMiled,",435,4.0310179710388200,Beam
3581,"public String toString(){
  String string=caller;
  if (level > 0 || thread != -1) {
    string+=""["";
  }
  if (level > 0) {
    string+=level;
  }
  if (thread != -1) {
    string+="","" + thread;
  }
  if (level > 0 || thread != -1) {
    string+=""]"";
  }
  string+="":"";
  if (spawnMessage) {
    string+="">"";
  }
  if (answer.length() > 0) {
    string+=answer + ""="";
  }
  if (callee.length() > 0) {
    string+=callee + ""."";
  }
  string+=message;
  if (returnsInstantly) {
    string+=""&"";
  }
  return string;
}","public String tostring(){
  String string=caller;
  if (level > 0 || thread != -1) {
    string+=""["";
  }
  if (level > 0) {
    string+=level;
  }
  if (thread != -1) {
    string+="","" + thread;
  }
  if (level > 0 || thread != -1) {
    string+=""]"";
  }
  string+="":"";
  if (spawnMessage) {
    string+="">"";
  }
  if (answer.length() > 0) {
    string+=answer + ""="";
  }
  if (callee.length() > 0) {
    string+=callee + ""."";
  }
  string+=message;
  if (returnsInstantly) {
    string+=""&"";
  }
  return string;
}",140,10,"toString:tostring,",9,0.04266131321589150,Beam
3582,,,51,4,,962,12.957090373834000,0
3584,,,81,4,,634,2.9557535886764500,0
3585,"public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generate();
}","public void provze(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.provze();
}",85,8,"generate:provze,",98,0.3647736708323160,Beam
3586,,,129,9,,243,1.1823158343633000,0
3587,"private void writeIndent(int times) throws IOException {
  for (int i=options.getBaseIndent() + times; i > 0; i--) {
    writer.write(options.getIndent());
  }
}","private void writeindention(int outs) throws IOException {
  for (int i=options.getBaseIndent() + outs; i > 0; i--) {
    writer.write(options.getIndent());
  }
}",44,5,"writeIndent:writeindention,times:outs,",66,0.29569028615951500,Beam
3588,"public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}","public static String convertFromUtf32(int[] select,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(select[i]));
  }
  return sb.toString();
}",62,6,"text:select,",21,0.10124934911727900,Beam
3589,"public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
","public boolean onSchemeASlibrary(Config config,Config runtime,IScheduler schedger,PackingPlan packing){
  boolean ret=false;
  try {
    schedger.initialize(config,runtime);
    ret=schedger.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,schedger,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    schedger.close();
  }
  return ret;
}
",85,6,"onScheduleAsLibrary:onSchemeASlibrary,scheduler:schedger,",153,1.0506336450576800,Beam
3590,"private static boolean createBooleanSetting(final Map<String,String> rawSettings,final String settingName,final boolean defaultValue){
  final String settingString=rawSettings.get(settingName);
  if (settingString == null) {
    return defaultValue;
  }
 else {
    try {
      return Boolean.parseBoolean(settingString);
    }
 catch (    final NumberFormatException exception) {
      CUtilityFunctions.logException(exception);
      return defaultValue;
    }
  }
}
","private static boolean createBoleanString(final Map<String,String> RAWettings,final String settingName,final boolean defaultValue){
  final String settingString=RAWettings.get(settingName);
  if (settingString == null) {
    return defaultValue;
  }
 else {
    try {
      return Boolean.parseBoolean(settingString);
    }
 catch (    final NumberFormatException exception) {
      CUtilityFunctions.logException(exception);
      return defaultValue;
    }
  }
}
",78,6,"rawSettings:RAWettings,createBooleanSetting:createBoleanString,",334,1.7289812763532000,Beam
3591,"public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}","public String syllABifier(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllABifier(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}",73,5,"syllabify:syllABifier,",28,0.14666181008021000,Beam
3592,"protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}","protected JsonEncoding getencode(MediaType mediaType,MultivaluedMap<String,Object> httpHeadings){
  return JsonEncoding.UTF8;
}",22,3,"findEncoding:getencode,httpHeaders:httpHeadings,",155,0.6846351742744450,Beam
3593,"public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}","public WritableRaster createWritibleChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}",201,15,"createWritableChild:createWritibleChild,",4,0.18530001640319800,Beam
3595,"public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
","public static LocalGitRepo FromCurrentDirectory(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
",195,9,"fromCurrentDir:FromCurrentDirectory,",13,0.07061487833658850,Beam
3596,"void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}","void eventPreModify(ActionType test,long position,boolean isSingle){
  if (test != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (test == ActionType.INSERT || test == ActionType.OVERWRITE) && actionExclusiveEnd() != position || test == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(test,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && test == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}",118,8,"type:test,",106,1.4331873456637100,Beam
3597,"public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}
","public int get(char cbff[],int addr,int length) throws IOException {
  return sd.get(cbff,addr,length);
}
",31,5,"read:get,cbuf:cbff,offset:addr,",839,5.2570431470871000,Beam
3598,"String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}","String decodeTextValue(byte[] text) throws IOException {
  boolean isCompressed=((text.length > 1) && (text[0] == TEXT_COMPRESSION_HEADER[0]) && (text[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(text.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < text.length) {
      if (text[dataEnd] == (byte)0x00) {
        decodeTextSegment(text,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(text,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(text,getCharset());
}",168,8,"data:text,",4,0.05919161637624110,Beam
3599,"private void initKeyboardButtons(KeyboardView view){
  mButtons=new ArrayList<>();
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));
  for (  View button : mButtons) {
    button.setOnClickListener(this);
  }
}","private void initKeyboardButtonboxes(KeyboardView view){
  mButtons=new ArrayList<>();
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));
  for (  View button : mButtons) {
    button.setOnClickListener(this);
  }
}",243,4,"initKeyboardButtons:initKeyboardButtonboxes,",39,0.2154165267944340,Beam
3600,"private void initPattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}","private void Initpattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}",174,9,"initPattern:Initpattern,",12,0.04519737164179480,Beam
3601,"public double reduceTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}","public double reducerSize(int window,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > window) {
    scale=((double)window) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}",152,8,"reduceTo:reducerSize,width:window,",403,2.53634489774704,Beam
3602,"void renderNormal(){
  glEnable(GL_DEPTH_TEST);
  glUseProgram(this.normalProgram);
  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));
  glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuffer));
  glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));
  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo);
  glEnableVertexAttribArray(0);
  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);
  glEnableVertexAttribArray(1);
  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);
  glDrawArrays(GL_TRIANGLES,0,numVertices);
  glDisableVertexAttribArray(0);
  glDisableVertexAttribArray(1);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);
  glUseProgram(0);
}","void drawNorm(){
  glEnable(GL_DEPTH_TEST);
  glUseProgram(this.normalProgram);
  glUniformMatrix4fv(viewMatrixUniform,false,viewsTransform.get(matrixBuff));
  glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuff));
  glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuff));
  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo);
  glEnableVertexAttribArray(0);
  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);
  glEnableVertexAttribArray(1);
  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);
  glDrawArrays(GL_TRIANGLES,0,numVertices);
  glDisableVertexAttribArray(0);
  glDisableVertexAttribArray(1);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);
  glUseProgram(0);
}",161,13,"renderNormal:drawNorm,matrixBuffer:matrixBuff,viewMatrix:viewsTransform,",1199,5.063715843359630,Beam
3603,"private void updateRadioLinks(){
  m_advanceDataSetFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  if (m_Exp != null) {
    if (!m_GeneratorPropertyPanel.getEditorActive()) {
      m_Exp.setAdvanceDataSetFirst(true);
    }
 else {
      m_Exp.setAdvanceDataSetFirst(m_advanceDataSetFirst.isSelected());
    }
  }
}
","private void updateNavPages(){
  m_advanceDataListFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  if (m_Exp != null) {
    if (!m_GeneratorPropertyPanel.getEditorActive()) {
      m_Exp.setAdvanceDataSetFirst(true);
    }
 else {
      m_Exp.setAdvanceDataSetFirst(m_advanceDataListFirst.isSelected());
    }
  }
}
",69,5,"updateRadioLinks:updateNavPages,m_advanceDataSetFirst:m_advanceDataListFirst,",33,0.16925498247146600,Beam
3604,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof PrincipalEntry))   return false;
  PrincipalEntry that=(PrincipalEntry)obj;
  return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName));
}
","@Override public boolean equivalent(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof PrincipalEntry))   return false;
  PrincipalEntry that=(PrincipalEntry)obj;
  return (principalClass.equivalent(that.principalClass) && principalName.equivalent(that.principalName));
}
",61,5,"equals:equivalent,",35,0.19733526706695600,Beam
3605,,,30,4,,859,3.733055285612740,0
3606,,,129,8,,1270,7.500412635008490,0
3607,"public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
","public void reind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
",41,4,"rewind:reind,",3,0.017923545837402300,Beam
3608,"public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_points.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}","public void fill___rect(PlaPointFloat[] p_points,Graphics P_ga,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)P_ga;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_points.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}",142,10,"fill_shape:fill___rect,p_g:P_ga,",463,3.5738492409388200,Beam
3610,"private void connectEqualized(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}","private void connectEqualize(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}",173,16,"connectEqualized:connectEqualize,",5,0.031097559134165400,Beam
3611,,,16,2,,136,0.7051861802736920,0
3612,,,22,2,,266,1.390488656361900,0
3613,"public static String format(final String value,String... params){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}","public static String process(final String value,String... params){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}",122,7,"format:process,",11,0.056921295324961300,Beam
3614,,,22,3,,365,1.7417550841967300,0
3615,"private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
","private static synchronized boolean isSupportedInternal(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
",131,6,"isSupportedImpl:isSupportedInternal,",9,0.05826225280761720,Beam
3616,,,114,8,,1826,12.40637985865280,0
3617,,,73,4,,886,4.330315101146700,0
3618,"public boolean isArmed(){
  return other.isArmed();
}
","public boolean isAmed(){
  return other.isAmed();
}
",14,2,"isArmed:isAmed,",4,0.02895952065785730,Beam
3619,,,86,8,,1797,8.071769913037620,0
3620,,,34,2,,180,0.9198027491569520,0
3621,,,58,4,,910,4.129875985781350,0
3622,"private static float computeSimilarity(Lane a,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=a.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}","private static float computeSimilarness(Lane a,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=a.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}",162,10,"computeSimilarity:computeSimilarness,",65,0.4288616140683490,Beam
3624,"static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){
  String s=params.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(params,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}","static String matchStringorThrow(Pattern p,ToDateParser styles,Enum<?> aEnum){
  String s=styles.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(styles,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}",72,6,"params:styles,matchStringOrThrow:matchStringorThrow,",331,2.016715081532800,Beam
3625,"@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
","@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHivedDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
",81,4,"showHiveDatabases:showHivedDatabases,",3,0.02279110352198280,Beam
3626,"public long skipBytes(long n) throws IOException {
  long count=0;
  long gotsofar=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException(""Stream closed, can\'t be reopened"");
    }
  }
  while (count < n) {
    gotsofar=inputStream.skip(n - count);
    if (gotsofar == 0) {
      Debug.error(""StreamInputReader can\'t skip "" + n + "" bytes as instructed"");
      break;
    }
    count+=gotsofar;
  }
  count((int)count);
  return count;
}","public long skippedBlocks(long n) throws IOException {
  long count=0;
  long gotsofar=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException(""Stream closed, can\'t be reopened"");
    }
  }
  while (count < n) {
    gotsofar=inputStream.skip(n - count);
    if (gotsofar == 0) {
      Debug.error(""StreamInputReader can\'t skip "" + n + "" bytes as instructed"");
      break;
    }
    count+=gotsofar;
  }
  count((int)count);
  return count;
}",107,5,"skipBytes:skippedBlocks,",39,0.20033001502354900,Beam
3627,,,16,3,,394,1.7536826570828800,0
3628,"@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeBoolean(isLeaf);
  out.writeInt(numEntries);
}
","@Override public void outputInternal(ObjectOutput up) throws IOException {
  super.outputInternal(up);
  up.writeBoolean(isLeaf);
  up.writeInt(numEntries);
}
",34,5,"writeExternal:outputInternal,out:up,",178,1.0120848695437100,Beam
3629,"public void sortMovies(){
synchronized (movies) {
    Utils.sortList(movies,MOVIE_SET_COMPARATOR);
    movieIds.clear();
    for (    Movie movie : movies) {
      movieIds.add(movie.getDbId());
    }
  }
  firePropertyChange(""movies"",null,movies);
}
","public void sortmideos(){
synchronized (movies) {
    Utils.sortList(movies,MOVIE_SET_COMPARATOR);
    movieIds.clear();
    for (    Movie mini : movies) {
      movieIds.add(mini.getDbId());
    }
  }
  firePropertyChange(""movies"",null,movies);
}
",57,4,"sortMovies:sortmideos,movie:mini,",322,1.6117750446001700,Beam
3630,,,32,2,,286,1.9260410388310800,0
3631,"public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}","public static CompiereColor parse(String addresses){
  CompiereColor cc=new CompiereColor();
  try {
    if (addresses != null && addresses.length() > 0)     cc.parseAttributres(addresses);
  }
 catch (  Exception e) {
    log.severe(""("" + addresses + "") - ""+ e.toString());
  }
  return cc;
}",69,5,"attributes:addresses,",3,0.029547441005706800,Beam
3632,,,197,12,,2103,13.295348795255000,0
3633,"private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}","private void startHideAnimationating(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}",524,15,"startHideAnimations:startHideAnimationating,",7,0.041937450567881300,Beam
3634,"protected void drawMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}","protected void drawShape(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}",183,14,"drawMark:drawShape,",6,0.03879306713740030,Beam
3635,,,136,8,,1848,13.990938635667200,0
3636,"public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",policyName);
    }
 else {
      format=String.format(""SG_%s_%d"",policyName,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}","public String generateGroupName(String rolePart,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",rolePart);
    }
 else {
      format=String.format(""SG_%s_%d"",rolePart,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",rolePart),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}",134,7,"policyName:rolePart,",43,0.3463951150576270,Beam
3637,,,39,5,,280,1.6111695488294000,0
3639,"public static Variation attemptToGetAsVariant(String part){
  try {
    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
","public static Variation attemptToGetAsvariacement(String part){
  try {
    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
",371,4,"attemptToGetAsVariant:attemptToGetAsvariacement,",18,0.15893323421478300,Beam
3640,"private int measureWidth(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
","private int measuresString(int measuredConfig){
  int result;
  int specMode=MeasureSpec.getMode(measuredConfig);
  int specSize=MeasureSpec.getSize(measuredConfig);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
",93,7,"measureWidth:measuresString,measureSpec:measuredConfig,",63,0.4086283802986150,Beam
3641,"public void addUniqueAttribute(final String elementName,final String attrName){
  if ((elementName != null) && (attrName != null)) {
    _uniqueElementAttrMap.put(elementName,attrName);
  }
}
","public void addCustomattribute(final String elementAddress,final String relationName){
  if ((elementAddress != null) && (relationName != null)) {
    _uniqueElementAttrMap.put(elementAddress,relationName);
  }
}
",39,4,"addUniqueAttribute:addCustomattribute,attrName:relationName,elementName:elementAddress,",443,2.605329692363740,Beam
3642,"public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
","public boolean action(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
",44,5,"remove:action,",46,0.2547656933466590,Beam
3643,"public void show(@IdRes final int itemId){
  map.add(itemId);
  navigation.invalidateBadge(itemId);
}
","public void show(@IdRes final int iconId){
  map.add(iconId);
  navigation.invalidateBadge(iconId);
}
",26,4,"itemId:iconId,",3,0.021971706549326600,Beam
3644,"public Format(String pFormatString){
  String formatVars[]=pFormatString.split(""/"");
  mId=Integer.parseInt(formatVars[0]);
}","public Value(String pFormatString){
  String formatVars[]=pFormatString.split(""/"");
  mId=Integer.parseInt(formatVars[0]);
}",32,4,"Format:Value,",3,0.01898205280303960,Beam
3645,,,18,3,,343,2.381295434633890,0
3646,"public static void sortFields(FieldBinding[] sortedFields,int left,int right){
  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);
}
","public static void orderObjects(FieldBinding[] sortedFields,int left,int right){
  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);
}
",31,4,"sortFields:orderObjects,",41,0.2913100163141890,Beam
3647,"public synchronized void release(){
  index.clear();
}
","public synchronized void released(){
  index.clear();
}
",14,2,"release:released,",20,0.12262258132298800,Beam
3648,"public PainterChain prependPainter(Painter p){
  Painter[] newChain=new Painter[chain.length + 1];
  System.arraycopy(chain,1,newChain,0,chain.length);
  newChain[0]=p;
  return new PainterChain(newChain);
}","public PainterChain preendpainters(Painter p){
  Painter[] NEWRing=new Painter[chain.length + 1];
  System.arraycopy(chain,1,NEWRing,0,chain.length);
  NEWRing[0]=p;
  return new PainterChain(NEWRing);
}",55,4,"prependPainter:preendpainters,newChain:NEWRing,",284,5.263735151290890,Beam
3649,"public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}","public static long[] values(Long[] function){
  long[] dest=new long[function.length];
  for (int i=0; i < function.length; i++) {
    Long v=function[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}",75,5,"array:function,",20,0.13055951197942100,Beam
3650,"@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage image=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    image=createImage(w,h,rgb.getData());
  }
  return image;
}
","@Override public BufferedImage JPEGToRGIIpe(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage image=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    image=createImage(w,h,rgb.getData());
  }
  return image;
}
",119,12,"JPEGToRGBImage:JPEGToRGIIpe,",64,0.39195855061213200,Beam
3652,"public boolean equivalent(IMFMarkerType other){
  if (other == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(other.getOffset());
  result&=label.equivalent(other.getLabel());
  return result;
}
","public boolean queivalent(IMFMarkerType union){
  if (union == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(union.getOffset());
  result&=label.queivalent(union.getLabel());
  return result;
}
",54,5,"other:union,equivalent:queivalent,",110,0.9089832862218220,Beam
3653,"public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + ""_remove_event"");
  try {
    String path=event.getId();
    String responsePath=dir + ""/"" + response_prefix+ path.substring(path.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,event.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}","public byte[] http(QueueEvent event) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + ""_remove_event"");
  try {
    String path=event.getId();
    String responsePath=dir + ""/"" + response_prefix+ path.substring(path.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,event.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}",132,10,"remove:http,",57,0.3467397212982180,Beam
3654,"protected static void printErrorMessage(Exception e){
  if (e instanceof AbortException) {
    LoggingConfiguration.setVerbose(Level.VERBOSE);
    LOG.verbose(e.getMessage());
  }
 else   if (e instanceof UnspecifiedParameterException) {
    LOG.error(e.getMessage());
  }
 else   if (e instanceof ParameterException) {
    LOG.error(e.getMessage());
  }
 else {
    LOG.exception(e);
  }
}
","protected static void printWarningDetails(Exception e){
  if (e instanceof AbortException) {
    LoggingConfiguration.setVerbose(Level.VERBOSE);
    LOG.verbose(e.getMessage());
  }
 else   if (e instanceof UnspecifiedParameterException) {
    LOG.error(e.getMessage());
  }
 else   if (e instanceof ParameterException) {
    LOG.error(e.getMessage());
  }
 else {
    LOG.exception(e);
  }
}
",88,2,"printErrorMessage:printWarningDetails,",42,0.27754422426223800,Beam
3655,"int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}","int putData(Object content) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(content);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(content);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}",145,8,"data:content,",5,0.05644149780273440,Beam
3656,"public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}","public int select(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}",339,19,"findEventPositionNearestTime:select,",15,0.1477777401606240,Beam
3657,,,97,7,,1413,17.198032307624800,0
3658,,,22,4,,187,1.3441574692726100,0
3659,,,53,5,,406,2.4091495275497400,0
3660,"private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}","private void preill(Painter p,SynthContext gm,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.preill(gfx,gm.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.preill(gfx,gm.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}",223,12,"paint:preill,ctx:gm,",361,3.6114657044410700,Beam
3661,"public void put(int fieldNumber,FieldData data){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=data;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=data;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=data;
    mSize++;
  }
}","public void st(int FIELDNum,FieldData update){
  int i=binarySearch(FIELDNum);
  if (i >= 0) {
    mData[i]=update;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=FIELDNum;
      mData[i]=update;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(FIELDNum);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=FIELDNum;
    mData[i]=update;
    mSize++;
  }
}",247,12,"put:st,fieldNumber:FIELDNum,data:update,",2972,28.13013813098270,Beam
3662,,,17,3,,327,2.918222423394520,0
3663,,,32,3,,742,6.573725092411040,0
3664,"private void initComputeProgram(){
  glUseProgram(computeProgram);
  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);
  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);
  workGroupSizeX=workGroupSize.get(0);
  workGroupSizeY=workGroupSize.get(1);
  timeUniform=glGetUniformLocation(computeProgram,""time"");
  blendFactorUniform=glGetUniformLocation(computeProgram,""blendFactor"");
  lightRadiusUniform=glGetUniformLocation(computeProgram,""lightRadius"");
  IntBuffer props=BufferUtils.createIntBuffer(1);
  IntBuffer params=BufferUtils.createIntBuffer(1);
  props.put(0,GL_BUFFER_BINDING);
  int objectsResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,""Objects"");
  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,objectsResourceIndex,props,null,params);
  objectsSsboBinding=params.get(0);
  int trianglesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,""Triangles"");
  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,trianglesResourceIndex,props,null,params);
  trianglesSsboBinding=params.get(0);
  int loc=glGetUniformLocation(computeProgram,""framebufferImage"");
  glGetUniformiv(computeProgram,loc,params);
  framebufferImageBinding=params.get(0);
  loc=glGetUniformLocation(computeProgram,""worldPositionImage"");
  glGetUniformiv(computeProgram,loc,params);
  worldPositionImageBinding=params.get(0);
  loc=glGetUniformLocation(computeProgram,""worldNormalImage"");
  glGetUniformiv(computeProgram,loc,params);
  worldNormalImageBinding=params.get(0);
  glUseProgram(0);
}","private void bind(){
  glUseProgram(compulateModule);
  IntBuffer workingGroupLength=BufferUtils.createIntBuffer(3);
  glGetProgramiv(compulateModule,GL_COMPUTE_WORK_GROUP_SIZE,workingGroupLength);
  workGroupSizeX=workingGroupLength.get(0);
  workGroupSizeY=workingGroupLength.get(1);
  timeUniform=glGetUniformLocation(compulateModule,""time"");
  blendFactorUniform=glGetUniformLocation(compulateModule,""blendFactor"");
  lightRadiusUniform=glGetUniformLocation(compulateModule,""lightRadius"");
  IntBuffer props=BufferUtils.createIntBuffer(1);
  IntBuffer params=BufferUtils.createIntBuffer(1);
  props.put(0,GL_BUFFER_BINDING);
  int objectsResourceIndex=glGetProgramResourceIndex(compulateModule,GL_SHADER_STORAGE_BLOCK,""Objects"");
  glGetProgramResourceiv(compulateModule,GL_SHADER_STORAGE_BLOCK,objectsResourceIndex,props,null,params);
  objectsSsboBinding=params.get(0);
  int trianglesResourceIndex=glGetProgramResourceIndex(compulateModule,GL_SHADER_STORAGE_BLOCK,""Triangles"");
  glGetProgramResourceiv(compulateModule,GL_SHADER_STORAGE_BLOCK,trianglesResourceIndex,props,null,params);
  trianglesSsboBinding=params.get(0);
  int loc=glGetUniformLocation(compulateModule,""framebufferImage"");
  glGetUniformiv(compulateModule,loc,params);
  framebufferImageBinding=params.get(0);
  loc=glGetUniformLocation(compulateModule,""worldPositionImage"");
  glGetUniformiv(compulateModule,loc,params);
  worldPositionImageBinding=params.get(0);
  loc=glGetUniformLocation(compulateModule,""worldNormalImage"");
  glGetUniformiv(compulateModule,loc,params);
  worldNormalImageBinding=params.get(0);
  glUseProgram(0);
}",264,18,"initComputeProgram:bind,computeProgram:compulateModule,workGroupSize:workingGroupLength,",1801,15.159122586250300,Beam
3666,"private void finishCommon(){
  if (!unknownSubjects.isEmpty()) {
    if (statements.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      log.info(""Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}"",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException(""Didn\'t get a revision id for "" + statements);
  }
  if (lastModified == null) {
    throw new ContainedException(""Didn\'t get a last modified date for "" + statements);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statements.addAll(restoredStatements);
}
","private void finishedCommon(){
  if (!unknownSubjects.isEmpty()) {
    if (statements.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      log.info(""Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}"",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException(""Didn\'t get a revision id for "" + statements);
  }
  if (lastModified == null) {
    throw new ContainedException(""Didn\'t get a last modified date for "" + statements);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statements.addAll(restoredStatements);
}
",153,11,"finishCommon:finishedCommon,",6,0.05593860944112140,Beam
3667,,,77,5,,978,7.461615240573880,0
3668,"public FileSaverDescriptor(@NotNull String title,@NotNull String description,String... extensions){
  super(true,true,true,true,false,false);
  setTitle(title);
  setDescription(description);
  this.extensions=Arrays.asList(extensions);
}
","public FileSaverDescriptutor(@NotNull String title,@NotNull String description,String... extensions){
  super(true,true,true,true,false,false);
  setTitle(title);
  setDescription(description);
  this.extensions=Arrays.asList(extensions);
}
",55,4,"FileSaverDescriptor:FileSaverDescriptutor,",3,0.029450603326161700,Beam
3669,"public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}","public static int split(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return split(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int split=StringUtil.length(list);
  if (split == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < split; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < split)   count++;
  return count;
}",173,10,"len:split,",12,0.12775853077570600,Beam
3670,"private void prepareTransfers() throws LibUsbException {
  if (mAvailableTransfers == null) {
    mAvailableTransfers=new LinkedTransferQueue<>();
    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {
      Transfer transfer=LibUsb.allocTransfer();
      if (transfer == null) {
        throw new LibUsbException(""couldn\'t allocate transfer"",LibUsb.ERROR_NO_MEM);
      }
      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);
      LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,""Buffer"",USB_TIMEOUT_US);
      mAvailableTransfers.add(transfer);
    }
  }
}","private void prepareTransformering() throws LibUsbException {
  if (mAvailableTransfers == null) {
    mAvailableTransfers=new LinkedTransferQueue<>();
    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {
      Transfer transfer=LibUsb.allocTransfer();
      if (transfer == null) {
        throw new LibUsbException(""couldn\'t allocate transfer"",LibUsb.ERROR_NO_MEM);
      }
      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);
      LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,""Buffer"",USB_TIMEOUT_US);
      mAvailableTransfers.add(transfer);
    }
  }
}",109,8,"prepareTransfers:prepareTransformering,",17,0.15387654701868700,Beam
3671,"public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}","public static Map<Object,Long> ValueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}",145,5,"valueHistogram:ValueHistogram,",6,0.051490044593811000,Beam
3672,"public static boolean isEmpty(CharSequence text){
  return text == null || text.length() == 0;
}","public static boolean isempty(CharSequence text){
  return text == null || text.length() == 0;
}",23,2,"isEmpty:isempty,",6,0.04354719320933020,Beam
3673,"static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
","static Map addElementToMap(String key,Set maps,Map intoHash){
  if ((key != null) && (intoHash != null)) {
    intoHash.put(key,maps);
  }
  return intoHash;
}
",43,4,"toMap:intoHash,values:maps,",124,0.7436329404513040,Beam
3674,,,54,3,,62,0.46405878067016600,0
3675,,,135,11,,448,3.1351462165514600,0
3676,,,36,5,,1222,10.89308610757190,0
3677,"public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}","public static EventBean[] addToArray(EventBean[] event,Collection<EventBean> EventsWillRemove){
  EventBean[] newArray=new EventBean[event.length + EventsWillRemove.size()];
  System.arraycopy(event,0,newArray,0,event.length);
  int counter=event.length;
  for (  EventBean eventToAdd : EventsWillRemove) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}",83,6,"eventsToAdd:EventsWillRemove,array:event,",99,1.1046150167783100,Beam
3678,"private String toString(Matcher m,int group){
  return (group == 0) ? """" : m.group(group);
}","private String TOString(Matcher g,int group){
  return (group == 0) ? """" : g.group(group);
}",28,3,"toString:TOString,m:g,",114,0.8452325741449990,Beam
3679,,,178,16,,3865,24.4913365483284,0
3680,"public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {
  String line=reader.readLine();
  while (line != null && line.length() > 0) {
    line=reader.readLine();
  }
}","public void readTransportSystems(final int[] columnesindice,final BufferedReader reading) throws IOException {
  String line=reading.readLine();
  while (line != null && line.length() > 0) {
    line=reading.readLine();
  }
}",51,4,"reader:reading,columnsIndices:columnesindice,",283,2.019421927134200,Beam
3681,"private void checkAndCreateDirectory(final String directoryName){
  try {
    final File dir=new File(directoryName);
    if (!dir.exists() && dir.mkdirs()) {
      _logger.debug(""Debug dump directory created successfully."");
    }
  }
 catch (  Exception ex) {
    _logger.error(""Debug dump directory creation failed due to {}"",ex.getMessage());
  }
}
","private void checkandMakeDirectory(final String folderName){
  try {
    final File dir=new File(folderName);
    if (!dir.exists() && dir.mkdirs()) {
      _logger.debug(""Debug dump directory created successfully."");
    }
  }
 catch (  Exception ex) {
    _logger.error(""Debug dump directory creation failed due to {}"",ex.getMessage());
  }
}
",67,5,"checkAndCreateDirectory:checkandMakeDirectory,directoryName:folderName,",70,0.5135342717170720,Beam
3682,,,21,2,,97,0.6854995846748350,0
3683,"void calculateCounters(){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  int total=0;
  write.lock();
  try {
    countResetFeedsAndCategories();
    total+=countFeedsWithUnread();
    countCategoriesWithUnread();
    countSpecialCategories(total);
  }
  finally {
    write.unlock();
  }
  Log.i(TAG,String.format(""Recalculated counters, total unread: %s (took %sms)"",total,(System.currentTimeMillis() - time)));
}","void calculatingCustomounters(){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  int total=0;
  write.lock();
  try {
    countResetFeedsAndCategories();
    total+=countFeedsWithUnread();
    countCategoriesWithUnread();
    countSpecialCategories(total);
  }
  finally {
    write.unlock();
  }
  Log.i(TAG,String.format(""Recalculated counters, total unread: %s (took %sms)"",total,(System.currentTimeMillis() - time)));
}",92,4,"calculateCounters:calculatingCustomounters,",8,0.06250225305557250,Beam
3684,,,42,3,,476,3.9977826635042800,0
3685,,,79,5,,977,10.181647749741900,0
3687,"protected void flip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}","protected void lipping(BufferCapabilities.FlipContents slipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.lipping(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),slipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}",69,4,"flipAction:slipAction,flip:lipping,",72,0.5391523599624630,Beam
3688,"private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
","private <T>UnaryOperator<T> composed(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
",27,3,"compose:composed,",3,0.03514539400736490,Beam
3689,"private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}","private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] psecret) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    psecret=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (psecret != null) {
      pp=new PasswordProtection(psecret);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        psecret=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          psecret=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(psecret);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,psecret);
}",265,12,"pkey:psecret,",107,1.0665955185890200,Beam
3690,"public void translate(double x,double y){
  currentTransform.translate(x,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,x,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}","public void Transate(double x,double y){
  currentTransform.Transate(x,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,x,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}",55,5,"translate:Transate,",69,0.5540528535842900,Beam
3691,,,22,5,,1079,7.937961232662200,0
3692,,,54,4,,936,6.0599367419878600,0
3693,,,72,4,,658,9.82961263259252,0
3694,"void putFile(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
","void putDir(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
",316,15,"putFile:putDir,",57,0.5175675710042320,Beam
3695,,,22,3,,82,0.5426261981328330,0
3696,,,339,13,,1486,11.365510622660300,0
3698,"protected void onProgress(int itemcount,int size){
}
","protected void Onprogress(int itemcount,int size){
}
",12,3,"onProgress:Onprogress,",12,0.07993632157643640,Beam
3699,"public static boolean isStringType(Type t){
  return t.equals(RefType.v(""java.lang.String""));
}
","public static boolean IsStringType(Type d){
  return d.equals(RefType.v(""java.lang.String""));
}
",23,2,"isStringType:IsStringType,t:d,",125,1.2416755398114500,Beam
3700,"public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
","public void setup(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
",15,2,"init:setup,",3,0.01964264710744220,Beam
3701,"protected void execute(Runnable evt){
  executor.execute(evt);
}
","protected void action(Runnable evt){
  executor.action(evt);
}
",16,3,"execute:action,",37,0.2482404112815860,Beam
3702,"public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug(""invoke static Method"");
  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);
  return invokeMethod(method,null,args);
}
","public static Object invokestaticFunction(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug(""invoke static Method"");
  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);
  return invokeMethod(method,null,args);
}
",62,6,"invokeStaticMethod:invokestaticFunction,",15,0.10482893387476600,Beam
3703,"private void clearDictionaryCache(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}","private void cleardictionaryMap(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}",75,6,"clearDictionaryCache:cleardictionaryMap,",19,0.1497594118118290,Beam
3704,,,30,4,,872,9.794879420598350,0
3705,"private static boolean isWritable(@NonNull final File file){
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}
","private static boolean IsWritutable(@NonNull final File file){
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}
",91,5,"isWritable:IsWritutable,",53,0.6219507535298670,Beam
3706,"@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
","@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String description){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (description.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
",109,7,"name:description,",13,0.11241592168808000,Beam
3707,"public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}","public static String trimOrPad(String div,int shape,char padChar){
  String result;
  if (div == null) {
    result="""";
  }
 else {
    result=div;
  }
  if (result.shape() > shape) {
    return result.substring(0,shape);
  }
  while (result.shape() < shape) {
    result+=padChar;
  }
  return result;
}",79,5,"str:div,length:shape,",275,2.954923371473950,Beam
3708,"private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
","private List<EndIsland> findSurroundINGIslands(int chunkX,int charunksX,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,charunksX + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
",105,10,"findSurroundingIslands:findSurroundINGIslands,chunkY:charunksX,",643,21.977456470330600,Beam
3709,"protected boolean arePathsContiguous(TreePath[] paths){
  if (rowMapper == null || paths.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=paths.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=paths[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (paths[counter] != null) {
        tempPath[0]=paths[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}","protected boolean arePathsCoriguous(TreePath[] contexts){
  if (rowMapper == null || contexts.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anArray, cube, min;
    int pathCount=contexts.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=contexts[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (cube=0; cube < pathCount; cube++) {
      if (contexts[cube] != null) {
        tempPath[0]=contexts[cube];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anArray=rows[0];
        if (anArray == -1 || anArray < (min - pathCount) || anArray > (min + pathCount))         return false;
        if (anArray < min)         min=anArray;
        if (!bitSet.get(anArray)) {
          bitSet.set(anArray);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (cube=min; cube < maxCounter; cube++)     if (!bitSet.get(cube))     return false;
  }
  return true;
}",250,12,"paths:contexts,arePathsContiguous:arePathsCoriguous,anIndex:anArray,counter:cube,",1962,19.8400244752566,Beam
3710,"protected Object attemptReadResponse(Connection cnx) throws Exception {
  Message msg=createResponseMessage();
  if (msg != null) {
    msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),cnx.getCommBuffer(),cnx.getStats());
    if (msg instanceof ChunkedMessage) {
      try {
        return processResponse(msg,cnx);
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnx,msg);
      }
    }
 else {
      try {
        msg.recv();
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnx,msg);
      }
      return processResponse(msg,cnx);
    }
  }
 else {
    return null;
  }
}
","protected Object attemptReaderConnection(Connection cnxe) throws Exception {
  Message msg=createResponseMessage();
  if (msg != null) {
    msg.setComms(cnxe.getSocket(),cnxe.getInputStream(),cnxe.getOutputStream(),cnxe.getCommBuffer(),cnxe.getStats());
    if (msg instanceof ChunkedMessage) {
      try {
        return processResponse(msg,cnxe);
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnxe,msg);
      }
    }
 else {
      try {
        msg.recv();
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnxe,msg);
      }
      return processResponse(msg,cnxe);
    }
  }
 else {
    return null;
  }
}
",138,3,"attemptReadResponse:attemptReaderConnection,cnx:cnxe,",73,0.6235929727554320,Beam
3711,"public static final void pause(final int milliseconds){
  if (milliseconds >= 1000 || logger.isDebugEnabled()) {
    logger.info(""Pausing for {} ms..."",milliseconds);
  }
  final long target=System.currentTimeMillis() + milliseconds;
  try {
    for (; ; ) {
      long msLeft=target - System.currentTimeMillis();
      if (msLeft <= 0) {
        break;
      }
      Thread.sleep(msLeft);
    }
  }
 catch (  InterruptedException e) {
    Assert.fail(""interrupted"",e);
  }
}","public static final void timeout(final int milliseconds){
  if (milliseconds >= 1000 || logger.isDebugEnabled()) {
    logger.info(""Pausing for {} ms..."",milliseconds);
  }
  final long target=System.currentTimeMillis() + milliseconds;
  try {
    for (; ; ) {
      long msLeft=target - System.currentTimeMillis();
      if (msLeft <= 0) {
        break;
      }
      Thread.sleep(msLeft);
    }
  }
 catch (  InterruptedException e) {
    Assert.fail(""interrupted"",e);
  }
}",101,6,"pause:timeout,",52,0.5043590903282170,Beam
3712,"public boolean isPronounceable(String word){
  String lowerCaseWord=word.toLowerCase();
  return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord));
}
","public boolean isPannouncingabled(String start){
  String upperNameWords=start.toLowerCase();
  return (prefixFSM.accept(upperNameWords) && suffenceFSLM.accept(upperNameWords));
}
",35,5,"isPronounceable:isPannouncingabled,word:start,suffixFSM:suffenceFSLM,lowerCaseWord:upperNameWords,",900,9.092617209752400,Beam
3713,"@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}
","@SafeVarargs public final void patch(int rowIndex,T... newItems){
  patch(rowIndex,Arrays.asList(newItems));
}
",28,3,"insert:patch,",31,0.22201241652170800,Beam
3714,"private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
","private SortedMap<MessageUid,MaildirMessageName> truncizeObject(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
",98,5,"truncateMap:truncizeObject,",15,0.11997888485590600,Beam
3715,,,100,6,,941,9.033752179145810,0
3716,"void queryReadResult(PreparedStatement prep) throws SQLException {
  ResultSet rs=prep.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0; i < columnCount; i++) {
      rs.getString(i + 1);
    }
  }
}","void queryGetresult(PreparedStatement pro) throws SQLException {
  ResultSet rs=pro.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int index=0; index < columnCount; index++) {
      rs.getString(index + 1);
    }
  }
}",72,6,"queryReadResult:queryGetresult,prep:pro,i:index,",485,3.196683398882550,Beam
3717,"public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}","public static int newName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}",57,4,"findName:newName,",4,0.028453524907430000,Beam
3718,"private Document parseRouteFile() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  return builder.parse(routeFile);
}
","private Document parseRuleMessage() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder slave=factory.newDocumentBuilder();
  return slave.parse(routeFile);
}
",42,4,"parseRouteFile:parseRuleMessage,builder:slave,",102,0.6284685095151270,Beam
3719,"@Override public boolean isRunning(){
  return (frame != null && frame.isVisible());
}
","@Override public boolean isPlaying(){
  return (frame != null && frame.isVisible());
}
",22,2,"isRunning:isPlaying,",6,0.04091352621714270,Beam
3720,,,61,5,,1278,15.789184033870700,0
3721,"public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}","public static String alg1oIDS(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}",25,3,"map2OID:alg1oIDS,",5,0.03136688073476160,Beam
3722,,,270,8,,274,1.9770207365353900,0
3723,,,251,14,,2097,17.86406473318740,0
3724,"private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}","private void unifyUsernameWithName(Map<String,List<LogCommitInfo>> devNameMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}",93,6,"unifyUsernameByName:unifyUsernameWithName,",3,0.026199972629547100,Beam
3725,"private boolean removeTask(Task t,int min){
  for (int i=tasks.size(); --i >= min; ) {
    if (tasks.get(i) == t) {
      tasks.remove(i);
      if (i < firstPending) {
        firstPending--;
        for (int j=threads.size(); --j >= 0; ) {
          TaskThread thread=threads.get(j);
          if (thread.task == t) {
            if (thread != Thread.currentThread())             thread.interrupt();
            break;
          }
        }
      }
      return true;
    }
  }
  return false;
}","private boolean destroyService(Task t,int only){
  for (int i=tasks.size(); --i >= only; ) {
    if (tasks.get(i) == t) {
      tasks.remove(i);
      if (i < firstPending) {
        firstPending--;
        for (int j=threads.size(); --j >= 0; ) {
          TaskThread thread=threads.get(j);
          if (thread.task == t) {
            if (thread != Thread.currentThread())             thread.interrupt();
            break;
          }
        }
      }
      return true;
    }
  }
  return false;
}",125,9,"removeTask:destroyService,min:only,",94,0.6214404106140140,Beam
3726,"private void clearRegisters(Instruction start,Instruction end){
  for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) {
    for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) {
      Operand op=ops.nextElement();
      if (op instanceof RegisterOperand) {
        RegisterOperand rOp=(RegisterOperand)op;
        clearDepGraphNodeForRegister(rOp.getRegister());
      }
    }
    if (p == end)     break;
  }
  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {
    Register r=e.nextElement();
    clearDepGraphNodeForRegister(r);
  }
}
","private void clearRegistry(Instruction start,Instruction end){
  for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) {
    for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) {
      Operand op=ops.nextElement();
      if (op instanceof RegisterOperand) {
        RegisterOperand rOp=(RegisterOperand)op;
        clearDepGraphNodeForRegister(rOp.getRegister());
      }
    }
    if (p == end)     break;
  }
  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {
    Register r=e.nextElement();
    clearDepGraphNodeForRegister(r);
  }
}
",133,10,"clearRegisters:clearRegistry,",35,0.3044569969177250,Beam
3727,,,154,6,,563,4.907007277011870,0
3728,"protected void calculateItemWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);
  CategoryDataset dataset=plot.getDataset(rendererIndex);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double space=0.0;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      space=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      space=dataArea.getWidth();
    }
    double maxWidth=space * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (rows > 1) {
      currentItemMargin=getItemMargin();
    }
    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((rows * columns) > 0) {
      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(used,maxWidth));
    }
  }
}","protected void calculatingItemStyle(CategoryPlot plot,Rectangle2D dataArea,int rendererOffset,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(plot,rendererOffset);
  CategoryDataset dataset=plot.getDataset(rendererOffset);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double space=0.0;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      space=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      space=dataArea.getWidth();
    }
    double maxWidth=space * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (rows > 1) {
      currentItemMargin=getItemMargin();
    }
    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((rows * columns) > 0) {
      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(used,maxWidth));
    }
  }
}",252,15,"calculateItemWidth:calculatingItemStyle,rendererIndex:rendererOffset,",530,4.418129165967310,Beam
3729,,,55,4,,609,17.584023384253200,0
3730,"public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}
","public void action(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.action(file);
}
",57,4,"print:action,",27,0.15424511432647700,Beam
3731,,,119,11,,697,3.7879820187886600,0
3732,,,394,13,,1731,13.062850264708200,0
3733,"private boolean hasFullEntry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entry.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}","private boolean hasFullEntry(JsonValue enter,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (enter != null) {
    short ignoreFields=0;
    if (enter.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (enter.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return enter.size() > ignoreFields;
  }
 else {
    return false;
  }
}",107,6,"entry:enter,",15,0.35648868083953900,Beam
3734,,,92,6,,942,6.171671974658970,0
3735,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnPackcMap(String encrypted){
  char[] mask=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=encrypted.charAt(i++);
    char value=encrypted.charAt(i++);
    do     mask[j++]=value;
 while (--count > 0);
  }
  return mask;
}",83,7,"packed:encrypted,zzUnpackCMap:doUnPackcMap,map:mask,",228,1.5376396417617800,Beam
3736,"protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}
","protected PrintWriter lineContentIn(Document doc){
  return lineContentIn;
}
",12,2,"lineFileOut:lineContentIn,",9,0.045956464608510300,Beam
3737,"public double nextDouble(double alpha,double lambda){
  double a=alpha;
  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;
  double gds, p, q, t, sign_u, u, v, w, x;
  double v1, v2, v12;
  if (a <= 0.0)   throw new IllegalArgumentException();
  if (lambda <= 0.0)   new IllegalArgumentException();
  if (a < 1.0) {
    b=1.0 + 0.36788794412 * a;
    for (; ; ) {
      p=b * randomGenerator.raw();
      if (p <= 1.0) {
        gds=Math.exp(Math.log(p) / a);
        if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda);
      }
 else {
        gds=-Math.log((b - p) / a);
        if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);
      }
    }
  }
 else {
    if (a != aa) {
      aa=a;
      ss=a - 0.5;
      s=Math.sqrt(ss);
      d=5.656854249 - 12.0 * s;
    }
    do {
      v1=2.0 * randomGenerator.raw() - 1.0;
      v2=2.0 * randomGenerator.raw() - 1.0;
      v12=v1 * v1 + v2 * v2;
    }
 while (v12 > 1.0);
    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);
    x=s + 0.5 * t;
    gds=x * x;
    if (t >= 0.0)     return (gds / lambda);
    u=randomGenerator.raw();
    if (d * u <= t * t * t)     return (gds / lambda);
    if (a != aaa) {
      aaa=a;
      r=1.0 / a;
      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;
      if (a > 3.686) {
        if (a > 13.022) {
          b=1.77;
          si=0.75;
          c=0.1515 / s;
        }
 else {
          b=1.654 + 0.0076 * ss;
          si=1.68 / s + 0.275;
          c=0.062 / s + 0.024;
        }
      }
 else {
        b=0.463 + s - 0.178 * ss;
        si=1.235;
        c=0.195 / s - 0.079 + 0.016 * s;
      }
    }
    if (x > 0.0) {
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (Math.log(1.0 - u) <= q)       return (gds / lambda);
    }
    for (; ; ) {
      do {
        e=-Math.log(randomGenerator.raw());
        u=randomGenerator.raw();
        u=u + u - 1.0;
        sign_u=(u > 0) ? 1.0 : -1.0;
        t=b + (e * si) * sign_u;
      }
 while (t <= -0.71874483771719);
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (q <= 0.0)       continue;
      if (q > 0.5) {
        w=Math.exp(q) - 1.0;
      }
 else {
        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;
      }
      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {
        x=s + 0.5 * t;
        return (x * x / lambda);
      }
    }
  }
}","public double sign(double gamma,double lambda){
  double a=gamma;
  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;
  double gds, p, q, t, sign_u, u, v, w, x;
  double v1, v2, v12;
  if (a <= 0.0)   throw new IllegalArgumentException();
  if (lambda <= 0.0)   new IllegalArgumentException();
  if (a < 1.0) {
    b=1.0 + 0.36788794412 * a;
    for (; ; ) {
      p=b * randomGenerator.raw();
      if (p <= 1.0) {
        gds=Math.exp(Math.log(p) / a);
        if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda);
      }
 else {
        gds=-Math.log((b - p) / a);
        if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);
      }
    }
  }
 else {
    if (a != aa) {
      aa=a;
      ss=a - 0.5;
      s=Math.sqrt(ss);
      d=5.656854249 - 12.0 * s;
    }
    do {
      v1=2.0 * randomGenerator.raw() - 1.0;
      v2=2.0 * randomGenerator.raw() - 1.0;
      v12=v1 * v1 + v2 * v2;
    }
 while (v12 > 1.0);
    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);
    x=s + 0.5 * t;
    gds=x * x;
    if (t >= 0.0)     return (gds / lambda);
    u=randomGenerator.raw();
    if (d * u <= t * t * t)     return (gds / lambda);
    if (a != aaa) {
      aaa=a;
      r=1.0 / a;
      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;
      if (a > 3.686) {
        if (a > 13.022) {
          b=1.77;
          si=0.75;
          c=0.1515 / s;
        }
 else {
          b=1.654 + 0.0076 * ss;
          si=1.68 / s + 0.275;
          c=0.062 / s + 0.024;
        }
      }
 else {
        b=0.463 + s - 0.178 * ss;
        si=1.235;
        c=0.195 / s - 0.079 + 0.016 * s;
      }
    }
    if (x > 0.0) {
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (Math.log(1.0 - u) <= q)       return (gds / lambda);
    }
    for (; ; ) {
      do {
        e=-Math.log(randomGenerator.raw());
        u=randomGenerator.raw();
        u=u + u - 1.0;
        sign_u=(u > 0) ? 1.0 : -1.0;
        t=b + (e * si) * sign_u;
      }
 while (t <= -0.71874483771719);
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (q <= 0.0)       continue;
      if (q > 0.5) {
        w=Math.exp(q) - 1.0;
      }
 else {
        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;
      }
      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {
        x=s + 0.5 * t;
        return (x * x / lambda);
      }
    }
  }
}",1113,53,"nextDouble:sign,alpha:gamma,",260,2.0426713903745000,Beam
3738,,,28,1,,49,1.3469162901242600,0
3739,,,27,2,,266,1.7214853008588200,0
3740,"public void addPutTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimeNanos(duration);
}
","public void addPutTimenones(long distance){
  putTimeNanos.addAndGet(distance);
  if (delde != null)   delde.addPutTimenones(distance);
}
",29,4,"duration:distance,addPutTimeNanos:addPutTimenones,delegate:delde,",272,1.711552349726360,Beam
3742,"public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {
  if ((groupName == null) || groupName.length() == 0) {
    groupName=SMSUtils.DEFAULT;
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  validateSCM();
  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);
  if (cEntry.isNewEntry()) {
    return;
  }
  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);
    amsdk.unassignService(serviceName);
  }
  if (!cEntry.isNewEntry()) {
    SMSEntry entry=cEntry.getClonedSMSEntry();
    entry.delete(token);
    cEntry.refresh(entry);
  }
}","public void removeOrgOrgService(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {
  if ((groupName == null) || groupName.length() == 0) {
    groupName=SMSUtils.DEFAULT;
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  validateSCM();
  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);
  if (cEntry.isNewEntry()) {
    return;
  }
  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);
    amsdk.unassignService(serviceName);
  }
  if (!cEntry.isNewEntry()) {
    SMSEntry entry=cEntry.getClonedSMSEntry();
    entry.delete(token);
    cEntry.refresh(entry);
  }
}",177,12,"removeOrganizationConfiguration:removeOrgOrgService,",78,0.39567477703094500,Beam
3743,"public String toString(Object value){
  return toPrettyString(value);
}
","public String tostring(Object property){
  return toPrettyString(property);
}
",15,2,"toString:tostring,value:property,",47,0.394208820660909,Beam
3744,"public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(importable,file,importElement,null));
}
","public void newFile(@NotNull PsiElement importable,@NotNull PsiFile book,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(importable,book,importElement,null));
}
",38,5,"file:book,addImport:newFile,",147,0.7786316394805910,Beam
3745,"@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}
","@SuppressWarnings(""unchecked"") public synchronized T FindTimer(Enum<?> typeName) throws IllegalAccessException, InstantiationException {
  T current=cache.get(typeName);
  if (current == null) {
    current=counterType.newInstance();
    cache.put(typeName,current);
  }
  return current;
}
",60,5,"findCounter:FindTimer,counterKey:typeName,counter:current,",508,2.5997299671173100,Beam
3747,"protected double currentScoreFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}","protected double CurrentSizeFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}",102,4,"currentScoreFunction:CurrentSizeFunction,",16,0.0786221702893575,Beam
3748,"Attributes parseAttributes() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
","Attributes parseCharacters() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
",38,3,"parseAttributes:parseCharacters,",4,0.018985613187154100,Beam
3749,,,141,8,,1466,11.85868284702300,0
3750,"private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}","private double[] std(double[] distances1,double[] distANCEsecond){
  if (distances1.length != distANCEsecond.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.std(distances1[i],distANCEsecond[i]);
  }
  return result;
}",91,5,"max:std,distances2:distANCEsecond,",176,1.3260558009147600,Beam
3752,"public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
","public static boolean isAdminLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
",40,4,"isOrgLevelOnly:isAdminLevelOnly,",9,0.04208655754725140,Beam
3753,,,62,10,,2553,15.007225501537300,0
3754,,,80,3,,615,3.274824837843580,0
3755,"public ByteBandedRaster(SampleModel sampleModel,Point origin){
  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);
}
","public ByteBandedPasters(SampleModel sampleModel,Point coord){
  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(coord.x,coord.y,sampleModel.getWidth(),sampleModel.getHeight()),coord,null);
}
",50,3,"ByteBandedRaster:ByteBandedPasters,origin:coord,",106,3.7150042057037400,Beam
3756,,,25,2,,286,3.473775768280030,0
3757,"public void makeGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}","public void fitLearning(File link) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(link)));
  while ((temp212=br.readLine()) != null) {
    String[] strls=temp212.split("" "");
    for (int i=0; i < strls.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strls[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}",303,17,"makeGraph:fitLearning,linkGraph:link,strs:strls,",181,1.090139917532600,Beam
3759,"private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
","private void testScenario(String ADesign,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(ADesign,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(ADesign,anExpectingAnException,myMethod);
    }
  }
}
",63,5,"aConfiguration:ADesign,",59,1.7923699220021600,Beam
3760,"void appendProgramDescription(final WrappingStringBuilder wb){
  if (!mProgramDescription.equals("""")) {
    wb.append(LS);
    wb.setWrapIndent(0);
    wb.wrapTextWithNewLines(mProgramDescription);
  }
}","void appendprogramDescription(final WrappingStringBuilder cb){
  if (!mMessageDescription.equals("""")) {
    cb.append(LS);
    cb.setWrapIndent(0);
    cb.wrapTextWithNewLines(mMessageDescription);
  }
}",42,3,"wb:cb,appendProgramDescription:appendprogramDescription,mProgramDescription:mMessageDescription,",184,1.0333034992218000,Beam
3761,"public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}","public static int roll(final float flow){
  final int bits=Float.floatToRawIntBits(flow);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)flow;
  }
}",102,7,"value:flow,round:roll,",888,5.21221491098404,Beam
3762,"private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}","private static long AddAndCompare(long pa,long b,Localizable path) throws MathRuntimeException {
  final long result=pa + b;
  if (!((pa ^ b) < 0 || (pa ^ result) >= 0)) {
    throw new MathRuntimeException(path,pa,b);
  }
  return result;
}",63,5,"addAndCheck:AddAndCompare,a:pa,pattern:path,",688,5.760159265995030,Beam
3763,"private FormatString[] parse(String s){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(s);
  for (int i=0, len=s.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(s,i,m.start());
        al.add(new FixedString(s.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(s,i,len);
      al.add(new FixedString(s.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}","private FormatString[] ize(String s){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(s);
  for (int i=0, len=s.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(s,i,m.start());
        al.add(new FixedString(s.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(s,i,len);
      al.add(new FixedString(s.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}",179,7,"parse:ize,",58,0.3994551459948220,Beam
3764,"public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}
","public JsonArray get(String description){
  vs.get(Json.description(description));
  return this;
}
",24,3,"add:get,value:description,values:vs,",349,1.6604698459307400,Beam
3765,"public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}","public static String cleanFolderStackingMarkers(String journal){
  if (!StringUtils.isEmpty(journal)) {
    Matcher m=folderStackingPattern.matcher(journal);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return journal;
}",60,4,"filename:journal,",10,0.06716233094533290,Beam
3766,,,90,5,,1162,6.329139912128450,0
3767,"public static double quantile(double p,double k,double theta,double shift){
  return Math.exp(GammaDistribution.quantile(p,k,theta)) + shift;
}
","public static double quantile(double v,double k,double theta,double shift){
  return Math.exp(GammaDistribution.quantile(v,k,theta)) + shift;
}
",38,5,"p:v,",5,0.03739467859268190,Beam
3769,"public void testGetTables() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
","public void testgetTows() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
",45,4,"testGetTables:testgetTows,",15,0.10495545864105200,Beam
3770,,,129,7,,1681,12.807343709468800,0
3771,,,34,5,,463,2.1753169854482000,0
3772,,,14,2,,306,1.4583159883817000,0
3773,,,44,3,,795,4.134090709686280,0
3775,"public boolean removeArg(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}
","public boolean addExt(final BOp ar){
  if (ar == null)   throw new IllegalArgumentException();
  if (ar == this)   throw new IllegalArgumentException();
  if (args.remove(ar)) {
    mutation();
    return true;
  }
  return false;
}
",55,3,"removeArg:addExt,arg:ar,",126,0.7875317533810930,Beam
3776,"public static String quoteIfJavaKeyword(String name){
  return JVMModuleUtil.quoteIfJavaKeyword(name);
}
","public static String quoteIfJavaAnyword(String name){
  return JVMModuleUtil.quoteIfJavaAnyword(name);
}
",18,2,"quoteIfJavaKeyword:quoteIfJavaAnyword,",36,0.2700102766354880,Beam
3777,"public synchronized void checkState(State... requiredStates) throws IllegalStateException {
  for (  State requiredState : requiredStates) {
    if (requiredState.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,""Expected states %s, but in state %s"",Lists.newArrayList(requiredStates),currentState));
}
","public synchronized void parsestate(State... requiresStates) throws IllegalStateException {
  for (  State RequiredOrder : requiresStates) {
    if (RequiredOrder.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,""Expected states %s, but in state %s"",Lists.newArrayList(requiresStates),currentState));
}
",60,4,"checkState:parsestate,requiredStates:requiresStates,requiredState:RequiredOrder,",255,1.5152857581774400,Beam
3778,"public void recordTimestamp(){
  long curTimestamp=System.currentTimeMillis();
  if (usedFields > 0) {
    long diff=curTimestamp - lastValue;
    if (usedFields == diffs.length) {
      long removedValue=diffs[curPosition];
      diffs[curPosition]=diff;
      calculateNewAverage(removedValue,diff,false);
      shiftEnd();
    }
 else {
      calculateNewAverage(0,diff,true);
      diffs[curPosition]=diff;
      shiftEnd();
    }
  }
 else   if (lastValue != -1) {
    long diff=curTimestamp - lastValue;
    currentAverage=0;
    diffs[curPosition]=diff;
    calculateNewAverage(0,diff,true);
    shiftEnd();
  }
  lastValue=curTimestamp;
}","public void updatetimace(){
  long curTimestamp=System.currentTimeMillis();
  if (usedFields > 0) {
    long patch=curTimestamp - lastValue;
    if (usedFields == diffs.length) {
      long removedValue=diffs[curPosition];
      diffs[curPosition]=patch;
      calculateNewAverage(removedValue,patch,false);
      shiftEnd();
    }
 else {
      calculateNewAverage(0,patch,true);
      diffs[curPosition]=patch;
      shiftEnd();
    }
  }
 else   if (lastValue != -1) {
    long patch=curTimestamp - lastValue;
    currentAverage=0;
    diffs[curPosition]=patch;
    calculateNewAverage(0,patch,true);
    shiftEnd();
  }
  lastValue=curTimestamp;
}",137,9,"recordTimestamp:updatetimace,diff:patch,",186,1.5555890242258700,Beam
3779,"public synchronized void increase(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}","public synchronized void Increasing(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}",89,6,"increase:Increasing,",6,0.03326083819071450,Beam
3781,"public boolean showPreviousNotification(){
  int i=getSelectedIndex();
  if (i != -1 && i > 0) {
    model.setSelectedItem(model.getElementAt(i - 1));
    return true;
  }
  return false;
}","public boolean showPrevNotifier(){
  int pri=getSelectedIndex();
  if (pri != -1 && pri > 0) {
    model.setSelectedItem(model.getElementAt(pri - 1));
    return true;
  }
  return false;
}",47,3,"showPreviousNotification:showPrevNotifier,i:pri,",107,0.6930382490158080,Beam
3782,"public void testZeroOne(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void assertzeroOne(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",141,11,"testZeroOne:assertzeroOne,",13,0.05605250597000120,Beam
3783,,,52,4,,328,1.4263529260953300,0
3784,"public void sendMessageUntilStopCount(int stopCount){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCount) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}","public void sendMessageUntilStopSize(int stopCount){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCount) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}",106,11,"sendMessageUntilStopCount:sendMessageUntilStopSize,",24,0.3180621027946470,Beam
3785,"public static void assertExpectedOutputContains(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ x+ ""\'"");
  }
}
","public static void assertExpectedOutputCompains(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ x+ ""\'"");
  }
}
",38,3,"assertExpectedOutputContains:assertExpectedOutputCompains,",6,0.06690158446629840,Beam
3786,,,17,3,,253,1.276737646261850,0
3787,,,139,8,,1759,9.991885232925420,0
3788,"public boolean equals(Object interval){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interval);
}
","public boolean Equorts(Object interbase){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interbase);
}
",28,3,"interval:interbase,equals:Equorts,",95,0.537456993261973,Beam
3789,,,70,4,,573,3.3969043413798000,0
3790,,,31,3,,161,1.8158518075943000,0
3791,"public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));
  }
}
","public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBlinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBlinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBlinder,annotatedMethods));
  }
}
",65,5,"methodBinder:methodBlinder,",3,0.023488775889078800,Beam
3792,"public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
","public void releaseService(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
",40,3,"removeListener:releaseService,",36,0.170505154132843,Beam
3793,,,71,6,,1224,8.241105584303540,0
3794,"void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
","void doHandleJavaMouseEvent(MouseEvent clickEvent){
  if (!XToolkit.isLeftMouseButton(clickEvent) && !XToolkit.isRightMouseButton(clickEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=clickEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (clickEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(clickEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
",454,10,"mouseEvent:clickEvent,",3,0.05104058583577470,Beam
3795,"public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
","public void show(char finalCh){
  initialString=initialString.append(finalCh);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
",43,3,"initialChar:finalCh,",7,0.05179440975189210,Beam
3796,"public SSLSocket createSSLSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
","public SSLSocket createWSLSSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
",87,5,"createSSLSocket:createWSLSSocket,",25,0.2794625639915470,Beam
3797,"public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}","public String tags(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}",93,8,"tag:tags,",3,0.0300453782081604,Beam
3798,"protected OkHttpClient configureHttpClient(){
  final OkHttpClient.Builder builder=new OkHttpClient.Builder();
  final CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  builder.cookieJar(new JavaNetCookieJar(cookieManager));
  builder.connectTimeout(60,TimeUnit.SECONDS);
  builder.writeTimeout(60,TimeUnit.SECONDS);
  builder.readTimeout(90,TimeUnit.SECONDS);
  return builder.build();
}","protected OkHttpClient configureHTTPClient(){
  final OkHttpClient.Builder block=new OkHttpClient.Builder();
  final CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  block.cookieJar(new JavaNetCookieJar(cookieManager));
  block.connectTimeout(60,TimeUnit.SECONDS);
  block.writeTimeout(60,TimeUnit.SECONDS);
  block.readTimeout(90,TimeUnit.SECONDS);
  return block.build();
}",89,3,"configureHttpClient:configureHTTPClient,builder:block,",32,0.18272445996602400,Beam
3799,,,16,2,,113,0.6955238342285160,0
3801,,,69,7,,1123,8.54922593832016,0
3802,"private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}","private static void runrandomTesting(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer recognoder=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    recognoder.writeWord(value);
  }
  final byte[] bytes=recognoder.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}",198,13,"runRandomTest:runrandomTesting,serializer:recognoder,",921,5.481542583306630,Beam
3803,"private String convertUserInputIntoAFullyQualifiedPath(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userInput;
  return fullPath;
}","private String convertUserInputIntoAFullyQualifiedPath(final String userId){
  if (FileUtils.denotesAbsolutePath(userId)) {
    return userId;
  }
  if (userId.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userId.length() > 1) {
      return home + userId.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userId;
  return fullPath;
}",78,4,"userInput:userId,",10,0.06987447341283160,Beam
3804,"public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}","public double wide(Prior queor,Likelihood Likeiosity) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(queor,Likeiosity,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(queor,Likeiosity,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(queor,Likeiosity,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(queor,Likeiosity,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(queor,Likeiosity,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}",945,30,"prior:queor,likelihood:Likeiosity,",393,3.9644965211550400,Beam
3805,"public Kernel(int offset,double[] values){
  this.values=Arrays.copyOf(values,values.length);
  this.offset=offset;
}
","public Knouter(int position,double[] values){
  this.values=Arrays.copyOf(values,values.length);
  this.position=position;
}
",34,3,"Kernel:Knouter,offset:position,",78,0.3911780556042990,Beam
3807,,,105,4,,413,2.0956576387087500,0
3808,"public boolean isBuiltinSoundAvailable(String soundIdentifier){
  return builtinSounds.containsKey(soundIdentifier);
}
","public boolean isBuiltInSoundsAvailable(String audioQualify){
  return builtinSounds.containsKey(audioQualify);
}
",17,3,"isBuiltinSoundAvailable:isBuiltInSoundsAvailable,soundIdentifier:audioQualify,",79,0.49599865277608200,Beam
3809,,,22,2,,111,0.5434300978978480,0
3810,"public void analyzeAllItAndWriteResults(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}","public void run(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}",283,19,"analyzeAllItAndWriteResults:run,",26,0.15701922178268400,Beam
3811,"@Override public String toString(){
  String result=""RandomSplitResultProducer: "";
  result+=getCompatibilityState();
  if (m_Instances == null) {
    result+="": <null Instances>"";
  }
 else {
    result+="": "" + Utils.backQuoteChars(m_Instances.relationName());
  }
  return result;
}
","@Override public String createstring(){
  String page=""RandomSplitResultProducer: "";
  page+=getCompatibilityState();
  if (m_Instances == null) {
    page+="": <null Instances>"";
  }
 else {
    page+="": "" + Utils.backQuoteChars(m_Instances.relationName());
  }
  return page;
}
",53,3,"toString:createstring,result:page,",88,0.508707050482432,Beam
3812,"public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}
","public void extension(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extension(other.getAlternatives());
}
",36,3,"extend:extension,",3,0.016809904575347900,Beam
3814,"private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}","private Long pid(HttpServletRequest request){
  Long pid=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    pid=Long.valueOf(idString);
  }
  return pid;
}",61,4,"id:pid,",45,0.2279792308807370,Beam
3815,"public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}","public ItemStack clearitems(ItemStack drive,ItemStack stack,int amountWeanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWeanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}",83,6,"removeItems:clearitems,amountWanted:amountWeanted,",233,1.8149568359057100,Beam
3816,"public boolean search(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}
","public boolean accept(V e){
  int h=hashMethod.hash(e);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(e);
}
",55,6,"v:e,search:accept,",96,0.5518978476524350,Beam
3817,,,22,4,,446,1.8752180814743000,0
3818,,,14,2,,286,1.230378305912020,0
3819,,,141,9,,2828,17.143549489975000,0
3820,"public void assureProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}
","public void assureXYSync(){
  if (socket.isClosed()) {
    restart();
  }
}
",21,2,"assureProxyOk:assureXYSync,",19,0.24933213790257800,Beam
3821,"public int swap(){
  if (!egl.eglSwapBuffers(eglDisplay,eglSurface)) {
    return egl.eglGetError();
  }
  return EGL10.EGL_SUCCESS;
}","public int wAP(){
  if (!egl.eglSwapBuffers(eglDisplay,eglAsface)) {
    return egl.eglGetError();
  }
  return EGL10.EGL_SUCCESS;
}",33,4,"swap:wAP,eglSurface:eglAsface,",97,0.9058062394460040,Beam
3822,"@Override public void close(){
  closing=true;
  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();
}","@Override public void shutdown(){
  closing=true;
  if (Reserveings == null || Reserveings.compareAndSet(0,-1))   doClose();
}",33,3,"close:shutdown,reservations:Reserveings,",141,0.7899853428204850,Beam
3824,"protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
","protected void command(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
",73,5,"execute:command,",37,0.17153281768163000,Beam
3825,"public static String relativeToAbsolute(String baseURL,String relativeURL){
  if (relativeURL.startsWith(""/"")) {
    return getURLProtocol(baseURL) + ""://"" + getURLHost(baseURL)+ relativeURL;
  }
 else {
    return getURLProtocol(baseURL) + ""://"" + getURLHost(baseURL)+ getURLBasePath(baseURL)+ relativeURL;
  }
}
","public static String relativeToExative(String baseFile,String relativeURL){
  if (relativeURL.startsWith(""/"")) {
    return getURLProtocol(baseFile) + ""://"" + getURLHost(baseFile)+ relativeURL;
  }
 else {
    return getURLProtocol(baseFile) + ""://"" + getURLHost(baseFile)+ getURLBasePath(baseFile)+ relativeURL;
  }
}
",62,3,"baseURL:baseFile,relativeToAbsolute:relativeToExative,",248,1.5516147891680400,Beam
3826,"public void addControlRoll(PilotingRollData control){
  controlRolls.addElement(control);
}
","public void removeContactObject(PilotingRollData cell){
  controlRolls.addElement(cell);
}
",16,3,"addControlRoll:removeContactObject,control:cell,",154,0.8354521950085960,Beam
3827,"private boolean nextItemIs(String match) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (int i=0; i < match.length(); i++) {
    if (i > 0) {
      c=buf.get();
    }
    if (c != match.charAt(i)) {
      return false;
    }
  }
  return true;
}","private boolean nextLineis(String patch) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (int i=0; i < patch.length(); i++) {
    if (i > 0) {
      c=buf.get();
    }
    if (c != patch.charAt(i)) {
      return false;
    }
  }
  return true;
}",84,5,"nextItemIs:nextLineis,match:patch,",74,0.7364304939905800,Beam
3828,"public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
","public void releaseelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
",26,3,"releaseSelections:releaseelections,",6,0.03229804436365760,Beam
3829,"public Cell(int rowspan,int colspan){
  this.rowspan=Math.max(rowspan,1);
  this.colspan=Math.max(colspan,1);
}","public ell(int viewgap,int colspan){
  this.viewgap=Math.max(viewgap,1);
  this.colspan=Math.max(colspan,1);
}",37,3,"Cell:ell,rowspan:viewgap,",578,3.2389387766520200,Beam
3830,"public static byte[] bitmapToBytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}","public static byte[] bitmapTObytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}",61,4,"bitmapToBytes:bitmapTObytes,",46,0.19546659390131600,Beam
3831,,,61,5,,656,7.302228728930160,0
3832,"public void waitForData(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
","public void waitForOutput(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
",24,1,"waitForData:waitForOutput,",5,0.0227280060450236,Beam
3833,,,58,5,,672,7.023366208871210,0
3834,,,20,3,,386,3.2984623432159400,0
3835,"public void testRandom(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}","public void testingRand(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}",95,4,"testRandom:testingRand,",8,0.04209616581598920,Beam
3836,"public static double igamma(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}","public static double igamma(double alpha,double x){
  double coef=(Math.exp(-x) * Math.pow(x,alpha)) / gamma(alpha);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(alpha) / gamma(alpha + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}",101,6,"a:alpha,",4,0.03180239200592040,Beam
3837,"public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}","public CipherParameters decrypt(byte[] conn,int keyLen){
  return decrypt(conn,0,conn.length,keyLen);
}",28,3,"in:conn,",30,0.1703943411509200,Beam
3838,,,35,3,,417,2.9507540225982700,0
3839,"public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}","public void removeribute(String string){
  if (string != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (string.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}",114,7,"name:string,removeAttribute:removeribute,",86,0.9119829734166460,Beam
3840,"private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}","private PdfObject readCompressedStream(PdfObject rootObj,int ptr,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (ptr != -1) {
    movePointer(ptr);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      ptr=-1;
    }
 else {
      ptr=pdfObject.getInt(PdfDictionary.Prev);
      if (ptr != -1 && !isCompressedStream(ptr,(int)eof)) {
        return readLegacyReferenceTable(rootObj,ptr,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}",550,23,"pointer:ptr,",4,0.06466734409332280,Beam
3842,,,67,8,,1064,6.1960318922996500,0
3844,"public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}","public static Vector2 span(Vector2 o1,Vector2 o2){
  return new Vector2(Math.span(o1.x,o2.x),Math.span(o1.z,o2.z));
}",44,3,"min:span,",32,0.25535375674565600,Beam
3845,"public static boolean isCommand(IElementType type){
  return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND;
}
","public static boolean iscommand(IElementType call){
  return call == SQFTypes.COMMAND_TOKEN || call == SQFTypes.COMMAND || call == SQFTypes.CASE || call == SQFTypes.CASE_COMMAND;
}
",35,2,"isCommand:iscommand,type:call,",69,0.4258902192115780,Beam
3847,"@Override public void addHeader(final String header,final String value){
  mHeadersOptions.add(new HeaderOption(header,value));
}
","@Override public void setHead(final String border,final String value){
  mHeadersOptions.add(new HeaderOption(border,value));
}
",29,4,"header:border,addHeader:setHead,",82,0.4005589485168460,Beam
3848,"public void resetPSRs(){
  pilotRolls.removeAllElements();
}
","public void resetPDrs(){
  pilotObjectes.removeAllElements();
}
",13,2,"resetPSRs:resetPDrs,pilotRolls:pilotObjectes,",126,0.7467320879300440,Beam
3849,"public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}","public static Map<String,Object> performsSearchList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}",229,12,"performFindList:performsSearchList,",10,0.08769690990448000,Beam
3850,"@Override public boolean equals(Object o){
  if (o instanceof Graph) {
    return string.equals(o.toString());
  }
  return false;
}
","@Override public boolean compALS(Object obj){
  if (obj instanceof Graph) {
    return string.compALS(obj.toString());
  }
  return false;
}
",34,3,"equals:compALS,o:obj,",177,1.129543693860370,Beam
3852,,,22,2,,181,1.2540104826291400,0
3853,"private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}","private ByteString scapeCharacters(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}",95,5,"escapeBytes:scapeCharacters,",10,0.0380355437596639,Beam
3854,"public static PublicKeySelector fromString(String type){
  if (type != null) {
    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {
      if (type.equalsIgnoreCase(keySelector.type)) {
        return keySelector;
      }
    }
  }
  return null;
}
","public static PublicKeySelector fromString(String style){
  if (style != null) {
    for (    PublicKeySelector keySelectOR : PublicKeySelector.values()) {
      if (style.equalsIgnoreCase(keySelectOR.style)) {
        return keySelectOR;
      }
    }
  }
  return null;
}
",50,3,"type:style,keySelector:keySelectOR,",158,0.9600584785143530,Beam
3855,"public static String valueOf(Boolean value){
  return value != null ? String.valueOf(value) : null;
}
","public static String vof(Boolean comment){
  return comment != null ? String.vof(comment) : null;
}
",24,2,"valueOf:vof,value:comment,",93,0.6012880325317380,Beam
3856,"public boolean is(String arg,boolean allowAbbr){
  if (name.equalsIgnoreCase(arg)) {
    return true;
  }
  if (allowAbbr && arg.length() == 1) {
    if (arg.charAt(0) == c) {
      return true;
    }
  }
  return false;
}","public boolean parse(String doc,boolean allowAbbr){
  if (name.equalsIgnoreCase(doc)) {
    return true;
  }
  if (allowAbbr && doc.length() == 1) {
    if (doc.charAt(0) == c) {
      return true;
    }
  }
  return false;
}",59,5,"is:parse,arg:doc,",101,0.6335446000099180,Beam
3857,,,131,11,,2559,13.4649378657341,0
3858,"int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}","int struct(Row copy,byte[] targetBuff,int sourceOffset,BlobOutputStream[] clobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=copy.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(targetBuff,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=copy.insertBlobs(buffer,rowHead,blobTail,clobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(copy);
  return rowHead;
}",145,14,"insert:struct,row:copy,sourceBuffer:targetBuff,blobs:clobs,",874,7.613238128026330,Beam
3859,"public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}","public void Initializing(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}",287,14,"initialize:Initializing,",46,0.4054903745651250,Beam
3860,"@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
","@SuppressWarnings(""rawtypes"") public static void createProjectConStraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
",158,9,"createProjectConstraint:createProjectConStraint,",4,0.0398001750310262,Beam
3861,,,18,1,,49,1.3950541893641200,0
3862,"public final void registerFileType(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){
  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedExtensions != null) {
    for (    String extension : defaultAssociatedExtensions) {
      matchers.add(new ExtensionFileNameMatcher(extension));
    }
  }
  registerFileType(type,matchers);
}
","public final void registerFileType(@NotNull FileType model,@NonNls @Nullable String... defaultAssociatedStringes){
  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedStringes != null) {
    for (    String extension : defaultAssociatedStringes) {
      matchers.add(new ExtensionFileNameMatcher(extension));
    }
  }
  registerFileType(model,matchers);
}
",69,5,"type:model,defaultAssociatedExtensions:defaultAssociatedStringes,",367,3.3649203221003200,Beam
3863,"public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
","public static EPType singleValue(Class multiValueType){
  if (multiValueType != null && multiValueType.isArray()) {
    return new ClassMultiValuedEPType(multiValueType,multiValueType.getComponentType());
  }
  return new ClassEPType(multiValueType);
}
",44,2,"singleValueType:multiValueType,",3,0.044668765862782800,Beam
3864,,,24,2,,242,1.1337253093719500,0
3865,"public static Result verify(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
","public static Result validifier(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
",128,6,"verify:validifier,",36,0.2702692270278930,Beam
3866,"public synchronized int lastIndexOf(Object object,int location){
  if (location < elementCount) {
    if (object != null) {
      for (int i=location; i >= 0; i--) {
        if (object.equals(elementData[i])) {
          return i;
        }
      }
    }
 else {
      for (int i=location; i >= 0; i--) {
        if (elementData[i] == null) {
          return i;
        }
      }
    }
    return -1;
  }
  throw arrayIndexOutOfBoundsException(location,elementCount);
}","public synchronized int elementIndexof(Object object,int model){
  if (model < elementCount) {
    if (object != null) {
      for (int i=model; i >= 0; i--) {
        if (object.equals(elementData[i])) {
          return i;
        }
      }
    }
 else {
      for (int i=model; i >= 0; i--) {
        if (elementData[i] == null) {
          return i;
        }
      }
    }
    return -1;
  }
  throw arrayIndexOutOfBoundsException(model,elementCount);
}",107,6,"lastIndexOf:elementIndexof,location:model,",106,0.787615974744161,Beam
3867,,,108,6,,1344,8.306261686484020,0
3868,,,168,6,,889,6.725986135005950,0
3869,,,65,4,,714,8.046560204029080,0
3870,,,41,2,,293,3.1487673838933300,0
3871,,,18,3,,550,3.7674145817756700,0
3872,"public VdcConfig toConfigParam(Properties vdcInfo){
  log.info(""copy {} to the sync config param"",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
","public VdcConfig toConfigParam(Properties vdiInfo){
  log.info(""copy {} to the sync config param"",vdiInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdiInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdiInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdiInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdiInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdiInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdiInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdiInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdiInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
",214,7,"vdcInfo:vdiInfo,",8,0.19536521434783900,Beam
3873,"@SuppressWarnings(""deprecation"") private static final URL toURL(String location,boolean file){
  if (file) {
    File f=new File(location);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(location);
  }
}
","@SuppressWarnings(""deprecation"") private static final URL toURL(String loc,boolean file){
  if (file) {
    File f=new File(loc);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(loc);
  }
}
",79,4,"location:loc,",67,0.5413038015365600,Beam
3874,,,24,2,,266,1.6568721930186000,0
3875,"public int search(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}","public int rep(String jp){
  int M=pat.length();
  int N=jp.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != jp.charAt(i + j)) {
        skip=Math.max(1,j - right[jp.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}",128,9,"search:rep,txt:jp,",73,0.6608431577682500,Beam
3876,,,65,7,,1044,7.704584272702540,0
3877,"public byte[] toByteArray(){
  return Arrays.copyOf(buf,cnt);
}
","public byte[] toCharString(){
  return Arrays.copyOf(rb,cnt);
}
",19,3,"toByteArray:toCharString,buf:rb,",102,0.6282349745432540,Beam
3878,"private String fmtTime(double time){
  return Utilities.pad(timeFormatter.format(time) + ""s"",10);
}","private String fmtTime(double money){
  return Utilities.pad(timeFormatter.format(money) + ""s"",10);
}",26,3,"time:money,",14,0.07945663928985600,Beam
3879,,,300,22,,2776,20.797250600655900,0
3880,"protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}","protected final void empty() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}",373,26,"init:empty,",11,0.10941422382990500,Beam
3881,"protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }","protected void write(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }",273,16,"populateStreamBlob:write,",23,0.16785104274749800,Beam
3882,"private boolean usedAllRule17Directors(Set<String> allocatedDirectors,PortAllocationContext context){
  Set<String> rule17Directors=getRule17Directors(context);
  for (  String director : allocatedDirectors) {
    rule17Directors.remove(director);
  }
  return rule17Directors.isEmpty();
}","private boolean removeAllRule17Directors(Set<String> allocatedPassories,PortAllocationContext context){
  Set<String> rule17Directors=getRule17Directors(context);
  for (  String director : allocatedPassories) {
    rule17Directors.remove(director);
  }
  return rule17Directors.isEmpty();
}",49,5,"usedAllRule17Directors:removeAllRule17Directors,allocatedDirectors:allocatedPassories,",157,1.9756813605626400,Beam
3883,"public boolean hasBeenCalled(String resourceName){
  return uris.contains(resourceName);
}
","public boolean hasBeenedStached(String resourceCode){
  return irris.contains(resourceCode);
}
",17,3,"hasBeenCalled:hasBeenedStached,resourceName:resourceCode,uris:irris,",161,1.3282645304997800,Beam
3884,,,75,3,,412,3.1526100118955000,0
3885,,,42,2,,269,1.5837521274884500,0
3886,,,80,6,,928,5.331424967447920,0
3887,"private MarshalledWrapper lookupDo(Template tmpl){
  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {
    ItemIter iter=matchingItems(tmpl);
    if (iter.hasNext())     return iter.next().service;
    return null;
  }
  List services=matchingServices(tmpl.serviceTypes);
  long now=System.currentTimeMillis();
  int slen=services.size();
  if (slen == 0)   return null;
  int srand=Math.abs(random.nextInt() % slen);
  for (int i=0; i < slen; i++) {
    SvcReg reg=(SvcReg)services.get((i + srand) % slen);
    if (reg.leaseExpiration > now && matchAttributes(tmpl,reg.item))     return reg.item.service;
  }
  return null;
}","private MarshalledWrapper lookupService(Template tmpl){
  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {
    ItemIter iter=matchingItems(tmpl);
    if (iter.hasNext())     return iter.next().service;
    return null;
  }
  List services=matchingServices(tmpl.serviceTypes);
  long now=System.currentTimeMillis();
  int slen=services.size();
  if (slen == 0)   return null;
  int srand=Math.abs(random.nextInt() % slen);
  for (int i=0; i < slen; i++) {
    SvcReg reg=(SvcReg)services.get((i + srand) % slen);
    if (reg.leaseExpiration > now && matchAttributes(tmpl,reg.item))     return reg.item.service;
  }
  return null;
}",169,10,"lookupDo:lookupService,",4,0.029208370049794500,Beam
3888,"private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
","private void parseSwitch(int insent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(insent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(insent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
",367,23,"indent:insent,",52,0.4003416816393530,Beam
3889,,,19,2,,107,0.6855206370353700,0
3890,"protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}","protected int indexOf(String data,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (data.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}",54,6,"buffer:data,",105,1.0627037723859200,Beam
3891,,,79,6,,1270,33.896299282709800,0
3893,"@SuppressWarnings(""unused"") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
","@SuppressWarnings(""unused"") public static float valuerangeBound(float value,float minPoint,float EndPoint){
  if (value < Math.min(minPoint,EndPoint))   return Math.min(minPoint,EndPoint);
  if (value > Math.max(minPoint,EndPoint))   return Math.max(minPoint,EndPoint);
  return value;
}
",70,4,"valueRangeLimit:valuerangeBound,endValue:EndPoint,startValue:minPoint,",580,4.119029692808790,Beam
3894,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
","public void addFooterView(View v,Object data,boolean isDrawible){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isDrawible=isDrawible;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
",66,8,"isSelectable:isDrawible,",77,3.2352295756340000,Beam
3895,"@Override public void sendLocationList(){
  List<Location> locationList=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location loc : locationList) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,loc));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug(""could not send train "" + loc.getName());
    }
  }
}","@Override public void sendAddressChain(){
  List<Location> locationList=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location loc : locationList) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,loc));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug(""could not send train "" + loc.getName());
    }
  }
}",88,7,"sendLocationList:sendAddressChain,",10,0.048861404259999600,Beam
3896,"private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}","private static int lookupQualSelector(XMPNode arrayNode,String qualityName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualityName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualityName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}",218,14,"qualName:qualityName,",3,0.048345907529195100,Beam
3897,,,89,7,,277,1.503793962796530,0
3899,,,74,7,,1485,12.098596247037300,0
3900,,,57,2,,321,1.8773271560668900,0
3901,,,19,2,,223,1.5749763131141700,0
3902,,,55,4,,872,4.622950287659960,0
3903,,,93,7,,350,1.6908824642499300,0
3904,,,66,6,,1278,6.358136141300200,0
3905,"private String convertTimestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
","private String converTimeestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
",40,4,"convertTimestamp:converTimeestamp,",8,0.04875598351160690,Beam
3906,"public void stop(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}","public void down(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}",40,5,"stop:down,",11,0.04972772598266600,Beam
3907,"@SuppressWarnings(""all"") final void reject(Runnable command){
  handler.rejectedExecution(command,this);
}
","@SuppressWarnings(""all"") final void prejection(Runnable task){
  handler.rejectedExecution(task,this);
}
",23,3,"reject:prejection,command:task,",58,0.3795299013455710,Beam
3909,,,25,4,,471,2.3110893845558200,0
3910,,,47,3,,359,2.415680972735090,0
3911,,,21,4,,759,3.963248332341510,0
3912,"@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
","@Override public CategoricalResults clip(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
",36,4,"clone:clip,",8,0.040812456607818600,Beam
3913,"private boolean isInThumbRange(float touchX,double normalizedThumbValue){
  return Math.abs(touchX - normalizedToScreen(normalizedThumbValue)) <= mThumbHalfWidth;
}
","private boolean isInthumbrange(float hitX,double normalizedThombImage){
  return Math.abs(hitX - normalizedToScreen(normalizedThombImage)) <= mThumbHalfWidth;
}
",27,4,"isInThumbRange:isInthumbrange,normalizedThumbValue:normalizedThombImage,touchX:hitX,",403,3.621260992685950,Beam
3914,"public void addLeaf(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}
","public void addLeaf(CatalogTreeLeaf value){
  _leaves.add(value);
}
",16,3,"leaf:value,",28,0.14173076152801500,Beam
3915,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}","public void paintedborder(Component c,Graphics msg,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=msg.getFont();
  Color origColor=msg.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  msg.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,msg,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  msg.setColor(background);
  msg.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  msg.setColor(foreground);
  SwingUtilities2.drawString(popup,msg,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(msg,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  msg.setFont(origFont);
  msg.setColor(origColor);
}",281,23,"paintBorder:paintedborder,g:msg,",244,1.6412460128466300,Beam
3916,,,17,3,,99,0.4656057357788090,0
3917,,,18,2,,266,1.3926068385442100,0
3918,"private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
","private static void checkACilege() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkACilege(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
",38,2,"checkPermission:checkACilege,",18,0.15777981281280500,Beam
3919,"private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
","private static RoadPermission roadflagComparison(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
",198,14,"roadFlagComparision:roadflagComparison,",38,0.318013596534729,Beam
3920,"public boolean expired(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}
","public boolean exerved(){
  return System.currentTimeMillis() - delay > DFLT_EXPIRATION_TIMEOUT;
}
",18,3,"expired:exerved,time:delay,",173,1.6589629530906700,Beam
3921,"boolean removeDisplay(Display display){
  return m_displays.remove(display);
}
","boolean clearView(Display component){
  return m_displays.remove(component);
}
",16,3,"display:component,removeDisplay:clearView,",50,0.2814222931861880,Beam
3922,"private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}","private Map<String,String> produceEvent(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}",135,10,"produceStream:produceEvent,",6,0.061326801776886000,Beam
3923,,,28,2,,266,1.5573652744293200,0
3924,"public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {
  debug.message(""ReplayPasswd.onLoginFailure: called"");
}
","public void onConnectLost(Map requestParamsMap,HttpServletRequest req,HttpServletResponse onse) throws AuthenticationException {
  debug.message(""ReplayPasswd.onLoginFailure: called"");
}
",24,5,"onLoginFailure:onConnectLost,res:onse,",119,0.6633551518122360,Beam
3926,,,190,7,,1401,10.526799090703300,0
3927,"protected abstract void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException ;
","protected abstract void writeSignBlockOut(byte[] signature,OutputStream out) throws IOException ;
",16,3,"writeSignatureBlock:writeSignBlockOut,",25,0.11619273821512900,Beam
3928,,,129,7,,1281,8.140271000067390,0
3929,,,445,18,,2602,16.66420898040140,0
3930,"public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}","public void debug(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}",133,6,"dump:debug,",7,0.03887814283370970,Beam
3931,,,106,8,,580,4.163022951285040,0
3932,"public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
","public double evaluate(VectorInstance xx,VectorInstance y) throws Exception {
  VectorInstance diff=xx.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
",45,6,"x:xx,",8,0.04647619326909380,Beam
3933,"private void addProtocolIfNotExists(Set<String> protocols,String protocolType){
  if (!protocols.contains(protocolType)) {
    protocols.add(protocolType);
  }
}
","private void addProtocolIfNotExists(Set<String> Protologs,String protocolType){
  if (!Protologs.contains(protocolType)) {
    Protologs.add(protocolType);
  }
}
",34,3,"protocols:Protologs,",37,0.3452277421951290,Beam
3934,,,160,12,,301,1.477535363038380,0
3935,,,39,5,,1009,7.308494301637010,0
3936,,,130,6,,1561,20.639866809050200,0
3937,,,17,2,,166,1.300049364566800,0
3938,"private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}","private boolean trride(Tree tree,NodeRef node,int[] operationNumbers,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operationNumbers != null) {
    operationNumbers[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=trride(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=trride(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}",551,35,"traverse:trride,operatorNumber:operationNumbers,",689,7.167006246248880,Beam
3939,"public FileInputReader(File f) throws IOException {
  if (Debug.debugging(""binaryfile"")) {
    Debug.output(""FileInputReader created from "" + f.getAbsolutePath());
  }
  name=f.getName();
  absolutePath=f.getAbsolutePath();
  inputFile=init(f);
}
","public FileUploadListener(File df) throws IOException {
  if (Debug.debugging(""binaryfile"")) {
    Debug.output(""FileInputReader created from "" + df.getAbsolutePath());
  }
  name=df.getName();
  absolutePath=df.getAbsolutePath();
  inputFile=init(df);
}
",57,5,"FileInputReader:FileUploadListener,f:df,",60,0.3300552487373350,Beam
3940,,,22,2,,298,1.5143120050430300,0
3941,,,39,4,,688,7.102093263467150,0
3942,"public void invalidateTitleSortable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}
","public void invalidateTitleRatCount(){
  for (  Movie plot : new ArrayList<>(movieList)) {
    plot.clearTitleSortable();
  }
}
",28,3,"invalidateTitleSortable:invalidateTitleRatCount,movie:plot,",19,0.08876694043477380,Beam
3943,,,86,8,,2211,14.193555490175900,0
3944,"public String patchFixIds(){
  return properties.getProperty(""patch.fix.ids"");
}
","public String patchfixIdls(){
  return ops.getProperty(""patch.fix.ids"");
}
",15,2,"patchFixIds:patchfixIdls,properties:ops,",33,0.19385281403859500,Beam
3945,"public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""/"")) {
    resultURL=""file:"" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL=""www."" + simpleURL + "".com"";
    }
    resultURL=""http://"" + simpleURL;
  }
  return resultURL;
}
","public String canonicalize(String singleURL){
  String resultURL=singleURL;
  if (singleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + singleURL;
  }
 else   if (singleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + singleURL;
  }
 else   if (singleURL.startsWith(""/"")) {
    resultURL=""file:"" + singleURL;
  }
 else   if (!hasProtocolName(singleURL)) {
    if (isSimpleHostName(singleURL)) {
      singleURL=""www."" + singleURL + "".com"";
    }
    resultURL=""http://"" + singleURL;
  }
  return resultURL;
}
",104,3,"simpleURL:singleURL,",4,0.05053544839223230,Beam
3946,"public Builder addSourceFolder(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
","public Builder addSourcesDirectory(@NonNull File division){
  foldersToScan.add(division);
  return this;
}
",21,3,"addSourceFolder:addSourcesDirectory,folder:division,",206,1.0956929842631000,Beam
3947,"protected void ensurePathExists(String path){
  String[] paths=path.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
","protected void ensurePathAbsits(String list){
  String[] paths=list.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
",83,6,"ensurePathExists:ensurePathAbsits,path:list,",67,0.4695769707361860,Beam
3948,,,45,7,,1766,12.345815980434400,0
3949,,,44,2,,275,2.267140718301140,0
3950,"public void drawLinesAndPoints(Graphics2D g2d,ArrayList<ComparableLabel> orderedDateSet,HashMap<ComparableLabel,Integer> dataPoints,long yMaxMark){
  int sectionWidth=this.graphWidth / orderedDateSet.size();
  int xOffset=sectionWidth / 2;
  int yPrevValue;
  int yCurrentValue;
  float prevOffsetPerc;
  float currentOffsetPerc;
  g2d.setColor(this.lineColor);
  for (int i=0; i < orderedDateSet.size(); i++) {
    if (i != 0) {
      yPrevValue=dataPoints.get(orderedDateSet.get(i - 1));
      yCurrentValue=dataPoints.get(orderedDateSet.get(i));
      prevOffsetPerc=yPrevValue / (float)yMaxMark;
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight));
    }
 else {
      yCurrentValue=dataPoints.get(orderedDateSet.get(i));
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2);
    }
  }
}","public void process(Graphics2D g2d,ArrayList<ComparableLabel> orderedDateSet,HashMap<ComparableLabel,Integer> laPoints,long yMaxMark){
  int sectionWidth=this.graphWidth / orderedDateSet.size();
  int xOffset=sectionWidth / 2;
  int yPrevValue;
  int yCurrentValue;
  float prevOffsetPerc;
  float currentOffsetPerc;
  g2d.setColor(this.lineColor);
  for (int i=0; i < orderedDateSet.size(); i++) {
    if (i != 0) {
      yPrevValue=laPoints.get(orderedDateSet.get(i - 1));
      yCurrentValue=laPoints.get(orderedDateSet.get(i));
      prevOffsetPerc=yPrevValue / (float)yMaxMark;
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight));
    }
 else {
      yCurrentValue=laPoints.get(orderedDateSet.get(i));
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2);
    }
  }
}",280,12,"drawLinesAndPoints:process,dataPoints:laPoints,",443,2.942411255836490,Beam
3952,,,19,2,,126,0.5719090620676680,0
3953,"public Dependencies resolveFromFile(File file,String className,SootClass sc){
  DexlibWrapper wrapper=cache.get(file);
  if (wrapper == null) {
    wrapper=new DexlibWrapper(file);
    cache.put(file,wrapper);
    wrapper.initialize();
  }
  Dependencies deps=wrapper.makeSootClass(sc,className);
  addSourceFileTag(sc,""dalvik_source_"" + file.getName());
  return deps;
}
","public Dependencies resolvingfromfile(File source,String className,SootClass c){
  DexlibWrapper wrapper=cache.get(source);
  if (wrapper == null) {
    wrapper=new DexlibWrapper(source);
    cache.put(source,wrapper);
    wrapper.initialize();
  }
  Dependencies deps=wrapper.makeSootClass(c,className);
  addSourceFileTag(c,""dalvik_source_"" + source.getName());
  return deps;
}
",84,7,"resolveFromFile:resolvingfromfile,file:source,sc:c,",754,4.823293479283650,Beam
3955,,,43,4,,543,3.1569487770398500,0
3956,"public void initBlockViews(){
  if (mWorkspaceView != null) {
    List<Block> rootBlocks=mWorkspace.getRootBlocks();
    ConnectionManager connManager=mWorkspace.getConnectionManager();
    for (int i=0; i < rootBlocks.size(); i++) {
      BlockGroup bg=mViewFactory.buildBlockGroupTree(rootBlocks.get(i),connManager,mTouchHandler);
      mWorkspaceView.addView(bg);
    }
  }
}","public void initblockviewses(){
  if (mWorksheetPlugin != null) {
    List<Block> rootBlocks=mWorkspace.getRootBlocks();
    ConnectionManager connManager=mWorkspace.getConnectionManager();
    for (int i=0; i < rootBlocks.size(); i++) {
      BlockGroup bg=mViewFactory.buildBlockGroupTree(rootBlocks.get(i),connManager,mTouchHandler);
      mWorksheetPlugin.addView(bg);
    }
  }
}",82,9,"initBlockViews:initblockviewses,mWorkspaceView:mWorksheetPlugin,",1989,8.679315733909610,Beam
3957,"public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}","public SignatureFakingOracle(final String documentText) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentText);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}",125,9,"documentString:documentText,",4,0.027378956476847300,Beam
3958,,,17,2,,71,0.4194560964902240,0
3959,"default FieldDeclaration addPrivateField(Class<?> typeClass,String name){
  return addField(typeClass,name,Modifier.PRIVATE);
}
","default FieldDeclaration addprivateMethod(Class<?> typeClass,String name){
  return addField(typeClass,name,Modifier.PRIVATE);
}
",27,3,"addPrivateField:addprivateMethod,",65,0.37228349049886100,Beam
3960,,,71,5,,684,4.294155065218610,0
3961,,,78,2,,99,1.6954383730888400,0
3962,"public boolean containsPoly(SootMethod method){
  return getMethod(method) != null;
}
","public boolean contincludesPoint(SootMethod method){
  return getMethod(method) != null;
}
",17,2,"containsPoly:contincludesPoint,",50,0.3189392288525900,Beam
3963,"public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=fileSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
","public static void cleanupChContents(FileSystem fileSystem,String BaseUri) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=fileSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
",83,6,"cleanupAllFiles:cleanupChContents,",40,0.2126593867937720,Beam
3964,"public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
","public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode driver,int options){
  int length=driver.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
",87,10,"mode:driver,",17,0.10045145750045800,Beam
3965,"@SuppressWarnings(""unchecked"") public static <T extends DimensionalItemObject>List<T> asTypedList(Collection<DimensionalItemObject> collection){
  List<T> list=new ArrayList<>();
  if (collection != null) {
    for (    DimensionalItemObject object : collection) {
      list.add((T)object);
    }
  }
  return list;
}
","@SuppressWarnings(""unchecked"") public static <T extends DimensionalItemObject>List<T> asTypifiedL(Collection<DimensionalItemObject> array){
  List<T> object=new ArrayList<>();
  if (array != null) {
    for (    DimensionalItemObject object : array) {
      object.add((T)object);
    }
  }
  return object;
}
",69,3,"asTypedList:asTypifiedL,collection:array,list:object,",246,1.9628517389297500,Beam
3966,,,91,7,,874,4.539250655968980,0
3967,"@Override public void applyInline(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}","@Override public void applyINner(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}",308,14,"applyInline:applyINner,",99,0.7464302102724710,Beam
3968,"public float realAbsolute(){
  return Math.abs(mLeft);
}
","public float getAbsolute(){
  return Math.abs(mLeft);
}
",15,2,"realAbsolute:getAbsolute,",3,0.014227970441182500,Beam
3969,,,117,5,,1158,8.613707494735720,0
3970,"@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageItemDetails(strClass,description,item,options,defaultOption);
}","@Override public void messageTypeResults(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageTypeResults(strClass,description,item,options,defaultOption);
}",94,9,"messageItemDetails:messageTypeResults,",82,0.6160155892372130,Beam
3971,,,17,3,,372,1.9798681616783100,0
3972,"void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}","void testSingle(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}",162,6,"testString:testSingle,",4,0.02704943815867110,Beam
3973,,,193,9,,2978,28.45711024602250,0
3975,"public float distanceToOtherCircle(Circle circle){
  return (float)Math.abs(Math.sqrt(Math.pow(circle.center.x - center.x,2) + Math.pow(circle.center.y - center.y,2)));
}","public float distanceToOtherPointle(Circle square){
  return (float)Math.abs(Math.sqrt(Math.pow(square.center.x - center.x,2) + Math.pow(square.center.y - center.y,2)));
}",57,2,"circle:square,distanceToOtherCircle:distanceToOtherPointle,",110,0.7567256093025210,Beam
3976,"public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
","public String getTSDBMetServiceAlias(){
  StringBuilder sth=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sth.append(getNamespace());
  }
  return sth.toString();
}
",49,3,"constructTSDBMetricName:getTSDBMetServiceAlias,sb:sth,",135,0.7079316298166910,Beam
3977,"public EconomyConcurrentHashMap(Map<? extends K,? extends V> m,IHashEntryHandler<K,V> handler){
  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);
  putAll(m);
}","public EconomyConcurrentVirtualPoint(Map<? extends K,? extends V> m,IHashEntryHandler<K,V> handler){
  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);
  putAll(m);
}",61,4,"EconomyConcurrentHashMap:EconomyConcurrentVirtualPoint,",76,2.32923538684845,Beam
3978,"public void testLMDirichlet() throws IOException {
  float p=(FREQ + 2000.0f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f)) / (DOC_LEN + 2000.0f);
  float a=2000.0f / (DOC_LEN + 2000.0f);
  float gold=(float)(Math.log(p / (a * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))) + Math.log(a));
  correctnessTestCore(new LMDirichletSimilarity(),gold);
}","public void testLMDirishle() throws IOException {
  float p=(FREQ + 2000.0f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f)) / (DOC_LEN + 2000.0f);
  float a=2000.0f / (DOC_LEN + 2000.0f);
  float gold=(float)(Math.log(p / (a * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))) + Math.log(a));
  correctnessTestCore(new LMDirichletSimilarity(),gold);
}",95,8,"testLMDirichlet:testLMDirishle,",8,0.3314072330792750,Beam
3979,"public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}","public static String decodedAlphaByte(final byte[] value,final int fail,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(value,fail,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",103,7,"decodeASCII:decodedAlphaByte,key:value,off:fail,",755,4.950730792681380,Beam
3980,,,34,3,,495,2.5408522923787400,0
3981,"public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}","public void position(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}",102,9,"move:position,",3,0.023718345165252700,Beam
3982,"public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}","public long exec(String fil,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(fil));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}",207,11,"copy:exec,filename:fil,",280,2.210310248533890,Beam
3983,"@Override public void paint(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}","@Override public void subpaint(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}",45,4,"paint:subpaint,",41,0.30006113052368200,Beam
3984,,,28,2,,249,1.502719791730250,0
3985,"public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){
  if (originalTypes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    TypeBinding substitutedType=substitute(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}","public static ReferenceBinding[] superstsitutes(Substitution substitution,ReferenceBinding[] originalTypes){
  if (originalTypes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    TypeBinding substitutedType=superstsitutes(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}",153,8,"substitute:superstsitutes,",76,0.7247006138165790,Beam
3986,,,77,8,,1657,9.42761125167211,0
3987,"public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}","public double unsafeSabrVariatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}",375,25,"unsafeSabrVolatility:unsafeSabrVariatility,",7,0.07636966705322270,Beam
3988,"public double calculateLogLikelihood(){
  double logL=0.0;
  for (  Statistic statistic : dataList) {
    for (int j=0; j < statistic.getDimension(); j++) {
      logL-=Math.log(statistic.getStatisticValue(j));
    }
  }
  return logL;
}","public double calculateloglikelier(){
  double logL=0.0;
  for (  Statistic statistic : dataList) {
    for (int j=0; j < statistic.getDimension(); j++) {
      logL-=Math.log(statistic.getStatisticValue(j));
    }
  }
  return logL;
}",58,5,"calculateLogLikelihood:calculateloglikelier,",24,0.1465962290763860,Beam
3989,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
  iInstant=(LocalDateTime)oos.readObject();
  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();
  iField=type.getField(iInstant.getChronology());
}
","private void readableBER(ObjectInputStream OO) throws IOException, ClassNotFoundException {
  iInstant=(LocalDateTime)OO.readableBER();
  DateTimeFieldType type=(DateTimeFieldType)OO.readableBER();
  iField=type.getField(iInstant.getChronology());
}
",49,5,"readObject:readableBER,oos:OO,",148,0.9004020015398660,Beam
3990,,,122,8,,1805,14.333132350444800,0
3991,,,20,3,,103,0.5048454840977990,0
3992,,,33,2,,266,1.7141619205474900,0
3993,"public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}
","public static Context createPendingChangeHandler(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}
",103,9,"createPendingActionContext:createPendingChangeHandler,",44,0.27963893810908000,Beam
3994,,,101,7,,1198,12.859776544570900,0
3995,"private static String guessContentType(String url){
  url=url.toLowerCase();
  if (url.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (url.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (url.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (url.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (url.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}","private static String guessMediatype(String http){
  http=http.toLowerCase();
  if (http.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (http.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (http.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (http.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (http.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}",98,2,"guessContentType:guessMediatype,url:http,",51,0.5355373183886210,Beam
3996,,,11,1,,27,0.13948543071746800,0
3997,"protected void updateRadioLinks(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
","protected void checkChartRelations(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
",119,8,"updateRadioLinks:checkChartRelations,",23,0.11204858620961500,Beam
3998,"public void unsubscribe(AWSIotMessage message) throws AWSIotException {
  try {
    unsubscribeTopic(message);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(message);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + message.getTopic());
      throw new AWSIotException(e);
    }
  }
}","public void unubscribe(AWSIotMessage log) throws AWSIotException {
  try {
    unsubscribeTopic(log);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(log);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + log.getTopic());
      throw new AWSIotException(e);
    }
  }
}",80,5,"message:log,unsubscribe:unubscribe,",79,0.7625570933024090,Beam
3999,,,12,1,,49,0.29013237555821700,0