Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,"public void addListener(Listener listener){
  mListeners.add(listener);
  notifyServiceDiscovered(mMatchingDrones);
}
","public void addListen(Listener listeners){
  mListeners.add(listeners);
  notifyServiceDiscovered(mMatchingDrones);
}
",21,2,"addListener:addListen,listener:listeners,",175,1.82,ALERT
3,"public void writeSI32(int value) throws IOException {
  flushBits();
  out.write(value & 0xff);
  out.write(value >> 8);
  out.write(value >> 16);
  out.write(value >> 24);
  bytesWritten+=4;
}","public void writeSU32(int default) throws IOException {
  flushBits();
  out.write(default & 0xff);
  out.write(default >> 8);
  out.write(default >> 16);
  out.write(default >> 24);
  bytesWritten+=4;
}",58,3,"value:default,writeSI32:writeSU32,",63,0.68,ALERT
5,,,33,3,,950,10.675182596842400,0
8,"public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}
","public boolean variate(String values,String rule){
  return (values.equalsIgnoreCase(rule));
}
",22,3,"validate:variate,value:values,",53,0.55,ALERT
9,,,24,2,,805,8.959192399183910,0
10,,,97,3,,1053,11.452646629015600,0
11,"private static String expandSystemIdStrictOn(String systemId,String baseSystemId) throws URI.MalformedURIException {
  URI systemURI=new URI(systemId,true);
  if (systemURI.isAbsoluteURI()) {
    return systemId;
  }
  URI baseURI=null;
  if (baseSystemId == null || baseSystemId.length() == 0) {
    baseURI=getUserDir();
  }
 else {
    baseURI=new URI(baseSystemId,true);
    if (!baseURI.isAbsoluteURI()) {
      baseURI.absolutize(getUserDir());
    }
  }
  systemURI.absolutize(baseURI);
  return systemURI.toString();
}","private static String expandSystemIdStrictOn(String systemId,String baseSystemId) throws URI.MalformedURIException {
  URI systemURI=new URI(systemId,true);
  if (systemURI.isAbsoluteURI()) {
    return systemId;
  }
  URI basURI=null;
  if (baseSystemId == null || baseSystemId.length() == 0) {
    basURI=getUserDir();
  }
 else {
    basURI=new URI(baseSystemId,true);
    if (!basURI.isAbsoluteURI()) {
      basURI.absolutize(getUserDir());
    }
  }
  systemURI.absolutize(basURI);
  return systemURI.toString();
}",115,5,"baseURI:basURI,",50,0.74,ALERT
12,"private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}","private void checkHeadingsHierarchy(Elements Elem,TestSolutionHandler testSolutionHandler){
  if (Elem.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=Elem.iterator();
  Element ele=iter.next();
  int indexOfReference=getHeaderIndex(ele);
  int currentPath;
  int previousIndex=indexOfReference;
  Element elementOfReference=ele;
  Element previousElement=ele;
  while (iter.hasNext()) {
    ele=iter.next();
    currentPath=getHeaderIndex(ele);
    if (currentPath != -1) {
      if (currentPath - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,ele,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentPath < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,ele,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentPath;
      previousElement=ele;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}",213,11,"element:ele,elements:Elem,currentIndex:currentPath,",135,2.53,ALERT
14,,,36,2,,383,4.078041585286460,0
15,"private static int compareLocales(Locale primary,Locale other){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(other.getLanguage())) {
    return 0;
  }
  final String country=primary.getCountry();
  if ((country == null) || !country.equals(other.getCountry())) {
    return 1;
  }
  final String variant=primary.getVariant();
  if ((variant == null) || !variant.equals(other.getVariant())) {
    return 2;
  }
  return 3;
}","private static int compareLocales(Locale primary,Locale other){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(other.getLanguage())) {
    return 0;
  }
  final String house=primary.getCountry();
  if ((house == null) || !house.equals(other.getCountry())) {
    return 1;
  }
  final String operante=primary.getVariant();
  if ((operante == null) || !operante.equals(other.getVariant())) {
    return 2;
  }
  return 3;
}",121,6,"country:house,variant:operante,",163,2.66,ALERT
16,,,106,4,,1147,14.16154572168990,0
18,"public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eCoord=e.getCoordinates();
    if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e;
    if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;
  }
  return null;
}","public Edge findEdgeInSameDirection(Coordinate p00,Coordinate p1){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eCoord=e.getCoordinates();
    if (matchInSameDirection(p00,p1,eCoord[0],eCoord[1]))     return e;
    if (matchInSameDirection(p00,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;
  }
  return null;
}",111,6,"p0:p00,",54,1.01,ALERT
19,"@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}
","@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse addFile(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.addFile(applicationName,containerId,path);
  return new HttpOk();
}
",101,4,"createDirectory:addFile,",60,1.05,ALERT
20,,,14,1,,446,4.669628274440770,0
21,"public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}","public void on(double score){
  setValue(Math.max(0,getValue() - score));
}",25,2,"value:score,damage:on,",64,0.7,ALERT
22,"void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}","void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((localsals[i].field == field) && (localsals[i].slot == slot) && (from <= localsals[i].to)&& (to >= localsals[i].from)) {
      localsals[i].from=Math.min(localsals[i].from,from);
      localsals[i].to=Math.max(localsals[i].to,to);
      return;
    }
  }
  if (len == localsals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(localsals,0,newlocals,0,len);
    localsals=newlocals;
  }
  localsals[len++]=new LocalVariable(field,slot,from,to);
}",195,9,"locals:localsals,",88,3.42,ALERT
23,"public void addScriptFinishedListener(ScriptExecutionListener l){
  m_FinishedListeners.add(l);
}
","public void addScriptFinalledHandler(ScriptExecutionListener pl){
  m_FinishedListeners.add(pl);
}
",16,2,"addScriptFinishedListener:addScriptFinalledHandler,l:pl,",364,4.06,ALERT
24,"public Hashtable<IPoint,List<ILineSegment>> intersections(Iterator<ILineSegment> it){
  Collection<ILineSegment> c=new ArrayList<ILineSegment>();
  while (it.hasNext()) {
    c.add(it.next());
  }
  return intersections(c.toArray(new ILineSegment[]{}));
}
","public Hashtable<IPoint,List<ILineSegment>> interrelations(Iterator<ILineSegment> IT){
  Collection<ILineSegment> c=new ArrayList<ILineSegment>();
  while (IT.hasNext()) {
    c.add(IT.next());
  }
  return interrelations(c.toArray(new ILineSegment[]{}));
}
",71,3,"it:IT,intersections:interrelations,",94,1.25,ALERT
25,"@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
","@Override public boolean addOutputSensor(String asectorDesign,int state){
  OutputSensor OutputConnector=new OutputSensor(asectorDesign);
  if (!OutputConnector.setState(state)) {
    return false;
  }
  _outputSensorList.add(OutputConnector);
  return true;
}
",48,4,"outputSensor:OutputConnector,sensorName:asectorDesign,",70,0.77,ALERT
26,"public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
","public IVariable[] extractRobotDebugVariants(final int stackTraceId,final Map<String,Object> newLiterable){
  final RobotDebugVariablesContext currentVariablesSupport=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesSupport);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newLiterable,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newLiterable,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesSupport,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
",123,7,"newVariables:newLiterable,currentVariablesContext:currentVariablesSupport,extractRobotDebugVariables:extractRobotDebugVariants,",136,1.78,ALERT
27,"protected void create_y_axis(int i){
  Log.e(""index vlaue"",i + """");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}","protected void create_dy2column(int iu){
  Log.e(""index vlaue"",iu + """");
  float ver_height=((graphheight / label_size) * iu) + border;
  if (iu == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - iu;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}",156,5,"i:iu,create_y_axis:create_dy2column,",59,0.96,ALERT
28,"public void emitRetainedVars(GenerateJsVisitor gen){
  if (!retainedVars.isEmpty()) {
    gen.out(""var "");
    boolean first=true;
    for (    String varName : retainedVars) {
      if (!first) {
        gen.out("","");
      }
      first=false;
      gen.out(varName);
    }
    gen.endLine(true);
    retainedVars.clear();
  }
}
","public void emitRetainVables(GenerateJsVisitor out){
  if (!retainedVars.isEmpty()) {
    out.out(""var "");
    boolean given=true;
    for (    String varName : retainedVars) {
      if (!given) {
        out.out("","");
      }
      given=false;
      out.out(varName);
    }
    out.endLine(true);
    retainedVars.clear();
  }
}
",79,4,"emitRetainedVars:emitRetainVables,gen:out,first:given,",177,2.33,ALERT
29,"public void hspan(double start,double end,Paint color,String legend){
  LegendText legendText=new LegendText(color,legend);
  comments.add(legendText);
  plotElements.add(new HSpan(start,end,color,legendText));
}
","public void vchart(double art,double order,Paint cycle,String lagender){
  LegendText legendertextew LegendText(cycle,lagender);
  comments.add(gendertext);
  plotElements.add(new HSpan(art,order,cycle,gendertext));
}
",53,6,"hspan:vchart,start:art,end:order,color:cycle,legend:lagender,legendText:gendertext,",479,7.33,ALERT
30,"public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
","public void deleteresourceDir(String ClustersType,ResourceType resourceUnit,String csName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File rmapsgetDir(getResourceConfigDirName(getClusterHome(),ClustersType,resourceUnit));
  StdelFileInfoeName=maps.getAbsolutePath() + File.separator + csName+ "".properties"";
  delFile(delFileInfo);
}
",73,6,"deleteResourceConfig:deleteresourceDir,clusterName:ClustersType,resourceType:resourceUnit,dsName:csName,resources:maps,delFileName:delFileInfo,",325,4.4,ALERT
31,"public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}
","public static String toStr(final URI server,final Charset Encasting) throws IOException {
  return IOUtils.toStr(server.toURL(),Charsets.toCharset(Encasting));
}
",36,3,"uri:server,encoding:Encasting,toString:toStr,",91,1.11,ALERT
32,,,21,2,,770,9.285068877538050,0
33,,,16,2,,673,6.7754979729652400,0
35,"public AtomicDoubleArray(int length){
  larray=new AtomicLongArray(length);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int i=0; i < length; i++)   larray.set(i,ZERO);
}","public AtomicDoubleArray(int length){
  larray=new AtomicLongArray(length);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int j=0; j < length; j++)   larray.set(j,ZERO);
}",49,4,"i:j,",44,0.49,ALERT
36,"public static String decode(AbstractMessage msg,Boolean ext,int header){
  if (ext == false) {
    return decode(msg);
  }
  return ""Bootloader Message Type: "" + header;
}
","public static String Decod(AbstractMessage bm,Boolean ext,int header){
  if (ext == false) {
    return Decod(bm);
  }
  return ""Bootloader Message Type: "" + header;
}
",35,4,"msg:bm,decode:Decod,",64,1.02,ALERT
37,"private double normalDens(double x,double mean,double stdDev){
  double diff=x - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}","private double normalPENS(double ex,double na,double stdDev){
  double mix=ex - na;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(mix * mix / (2 * stdDev * stdDev)));
}",53,5,"mean:na,normalDens:normalPENS,diff:mix,x:ex,",157,2.43,ALERT
39,,,34,3,,1144,20.749443078041100,0
40,"public static double rootMeansSquaredError(double[] real,double[] predicted){
  double ret=0.0;
  for (int i=0; i < real.length; i++) {
    ret+=Math.pow((real[i] - predicted[i]),2);
  }
  return Math.sqrt(ret / real.length);
}","public static double kMeansSquaresMass(double[] real,double[] predicted){
  double ret=0.0;
  for (int i=0; i < real.length; i++) {
    ret+=Math.pow((real[i] - predicted[i]),2);
  }
  return Math.sqrt(ret / real.length);
}",73,5,"rootMeansSquaredError:kMeansSquaresMass,",29,0.37,ALERT
41,"protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}
","protected void processEventCommand(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processEventCommand(e);
}
",51,2,"processMouseEvent:processEventCommand,",68,0.9,ALERT
42,"public void postProcess(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
","public void postConstruct(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
",37,3,"postProcess:postConstruct,",46,0.38,ALERT
43,"private static void insertValue(final Map<String,List<String>> paramsMap,final String paramVal,final String parameterName){
  if (paramVal != null) {
    List<String> list=new ArrayList<>();
    list.add(paramVal);
    paramsMap.put(parameterName,list);
  }
}
","private static void InsertValues(final Map<String,List<String>> paramList,final String paramValue,final String paramorName){
  if (paramValue != null) {
    List<String> pool=new ArrayList<>();
    lipooldd(paramValue);
    paramList.put(paramorName,pool);
  }
}
",64,5,"insertValue:InsertValues,paramsMap:paramList,paramVal:paramValue,parameterName:paramorName,list:pool,",420,4.89,ALERT
44,"public static int randGaussian(final int mean,final int sd){
  return (int)(rand.nextGaussian() * sd + mean);
}
","public static int NextSllli(final int mean,final int sd){
  return (int)(rand.nextGaussian() * sd + mean);
}
",31,3,"randGaussian:NextSllli,",27,0.32,ALERT
45,"private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
","private void onTrackpointstart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
",35,6,"onTrackPointStart:onTrackpointstart,",63,0.75,ALERT
46,"void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
","void dispose(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
",24,2,"release:dispose,",26,0.29,ALERT
47,"public FST(String fileName,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fileName);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}
","public FST(String filePath,String decoder,boolean bosity) throws IOException {
  FileInputStream bIS=new FileInputStream(filePath);
  try {
    loadHeaderlesbISis,decoder,bosity);
  }
  finally {
    bIS.close();
  }
}
",46,4,"fileName:filePath,encoding:decoder,verbose:bosity,fis:bIS,",228,2.39,ALERT
48,"@Override public void flush(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}
","@Override public void open(){
  FlushTask job;
synchronized (logRecords) {
    job=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  job.run();
}
",45,2,"flush:open,task:job,",111,1.25,ALERT
49,"private void destinationTypeChanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}","private void destributionTypechanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_DestributionFolder.lastIndexOf("".csv"");
      if (ind > -1) {
        m_DestributionFolder=m_DestributionFolder.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_DestributionFolder.lastIndexOf("".arff"");
      if (ind > -1) {
        m_DestributionFolder=m_DestributionFolder.substring(0,ind) + "".csv"";
      }
    }
    str=m_DestributionFolder;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_DestributionFolder.equals("""")) {
        irl.setOutputFile(new File(m_DestributionFolder));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_DestributionFolder.equals("""")) {
        crl.setOutputFile(new File(m_DestributionFolder));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}",437,5,"destinationTypeChanged:destributionTypechanged,m_destinationFilename:m_DestributionFolder,",209,3.47,ALERT
50,,,19,2,,785,7.414226392904920,0
51,"public void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){
  if (semiMajorAxis < 0)   throw new IllegalArgumentException(""ellipse semimajor axis can\'t be negative"");
  if (semiMinorAxis < 0)   throw new IllegalArgumentException(""ellipse semiminor axis can\'t be negative"");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * semiMajorAxis);
  double hs=factorY(2 * semiMinorAxis);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}","public void fillEllipSE(double point,double zy,double semiMinorAxor,double semiMajorAxi){
  if (semiMinorAxor < 0)   throw new IllegalArgumentException(""ellipse semimajor axis can\'t be negative"");
  if (semiMajorAxi < 0)   throw new IllegalArgumentException(""ellipse semiminor axis can\'t be negative"");
  double xs=sssleX(point);
  double ydsscaleY(zy);
  double vs=factorX(2 * semiMinorAxor);
  doublehesss=factorY(2 * semiMajorAxi);
  if (ws <=vs && hs <=hess)   pixel(point,zy);
 else   offscreen.fill(new Ellipse2D.Double(ss - vs / 2,ds - hess / 2,vs,hess));
  draw();
}",129,9,"filledEllipse:fillEllipSE,x:point,y:zy,semiMajorAxis:semiMinorAxor,semiMinorAxis:semiMajorAxi,xs:ss,ys:ds,ws:vs,hs:hess,",680,14.03,ALERT
52,"private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + "" "" + key+ ""=""+ from.getAttribute(key)+ "";"";
    }
 else {
      to.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}","private static void convertToHTML40(AttributeSet from,MutableAttributeSet or){
  Enumeration keys=from.getAttributeNames();
  String one="""";
  while (keys.hasMoreElements()) {
    Object base=keys.nextElement();
    if (base instanceof CSS.Attribute) {
      one=one + "" "" + base+ ""=""+ from.getAttribute(base)+ "";"";
    }
 else {
      or.addAttribute(base,from.getAttribute(base));
    }
  }
  if (one.length() > 0) {
    or.addAttribute(HTML.Attribute.STYLE,one);
  }
}",117,6,"key:base,value:one,to:or,",114,1.75,ALERT
53,,,14,1,,424,5.953828080495200,0
54,"public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}","public static int encodeCustomAttributes(Collection<GridClientCacheFlag> flagSet){
  int pieces=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   pieces|=1;
  return pieces;
}",36,3,"bits:pieces,encodeCacheFlags:encodeCustomAttributes,",87,1.38,ALERT
55,"private static boolean isIdentifierName(String k){
  int n=k.length();
  if (n == 0) {
    return false;
  }
  if (!Character.isJavaIdentifierStart(k.charAt(0))) {
    return false;
  }
  for (int i=1; i < n; ++i) {
    if (!Character.isJavaIdentifierPart(k.charAt(i))) {
      return false;
    }
  }
  return true;
}","private static boolean isIdentVariableText(String kid){
  int nd=kid.length();
  if (nd == 0) {
    return false;
  }
  if (!Character.isJavaIdentifierStart(kid.charAt(0))) {
    return false;
  }
  for (int i=1; i < nd; ++i) {
    if (!Character.isJavaIdentifierPart(kid.charAt(i))) {
      return false;
    }
  }
  return true;
}",89,4,"k:kid,isIdentifierName:isIdentVariableText,n:nd,",127,1.82,ALERT
56,"public synchronized void schedulePeriodicTask(TimerTask task,long period){
  try {
    m_timer.scheduleAtFixedRate(task,0,period);
  }
 catch (  IllegalStateException ie) {
    m_timer=new Timer();
    m_timer.scheduleAtFixedRate(task,0,period);
  }
}","public synchronized void schedulePerperiodicalTask(TimerTask data,long period){
  try {
    m_loop.scheduleAtFixedRate(data,0,period);
  }
 catch (  IllegalStateException ie) {
    m_loop=new Timer();
    m_loop.scheduleAtFixedRate(data,0,period);
  }
}",52,4,"schedulePeriodicTask:schedulePerperiodicalTask,task:data,m_timer:m_loop,",187,3.37,ALERT
57,"public static long firstFieldOffset(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}","public static long objectObjectName(Class Clazz){
  long minSize=roundUpTo8(headerSize(Clazz));
  while (Clazz != Object.class) {
    for (    Field f : Clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    Clazz=Clazz.getSuperclass();
  }
  return minSize;
}",95,5,"clazz:Clazz,firstFieldOffset:objectObjectName,",161,2.48,ALERT
58,"private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
","private void splitChildren(final JCriteriumTreeNode parentWriter){
  final List<JCriteriumTreeNode> opations=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> critations=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> another=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> chucarentWriter.uc();
  while (uc.hasMoreElements()) {
    final JCriteriumTreself child=(JCriteriumTreeNode)uc.nextElement();
    final ICriteriumparte=self.getCriterium();
    if (part instanceof CConditionCriterium) {
      critations.add(self);
    }
 else {
      opations.add(self);
    }
  }
  parentWriter.removeAllChildren();
  for (  final JCriteriumTreeNodeselfd : opations) {
    parentWriter.add(self);
    chselfetParent(parentWriter);
  }
  for (  final JCriteriumTreeNode self : critations) {
    parentWriter.add(self);
    chselfetParent(parentWriter);
  }
  for (  final JCriteriumTreeNode chself another) {
    parentWriter.add(self);
    chselfetParent(parentWriter);
  }
}
",204,8,"sortChildren:splitChildren,parentNode:parentWriter,operators:opations,conditions:critations,minus:another,children:uc,child:self,type:part,",549,7.3,ALERT
59,,,17,1,,435,5.483109358946480,0
60,"private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){
  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {
    LSTNode node=(LSTNode)e.nextElement();
    BasicBlock header=node.getHeader();
    BitVector loop=node.getLoop();
    if (loop == null)     continue;
    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {
      BasicBlock bb=in.nextElement();
      if (loop.get(bb.getNumber()))       continue;
      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);
      for (      Register r : liveRegisters) {
        if (r.isSymbolic()) {
          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);
          s.add(r);
        }
      }
    }
    for (int i=0; i < loop.length(); i++) {
      if (loop.get(i)) {
        BasicBlock bb=ir.getBasicBlock(i);
        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (loop.get(dest.getNumber()))           continue;
          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);
          for (          Register r : liveRegisters) {
            if (r.isSymbolic()) {
              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);
              s.add(r);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(ir,live,result);
  return result;
}","private static HashMap<BasicBlockPair,HashSet<Register>> findsplitPoint(IR nir,LiveAnalysis live,LSTGraph lst){
  HashMap<BasicBlockPair,HashSet<Register>> default=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {
    LSTNode node=(LSTNode)e.nextElement();
    BasicBlock header=node.getHeader();
    BitVector loop=node.getLoop();
    if (loop == null)     continue;
    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {
      BasicBlock bb=in.nextElement();
      if (loop.get(bb.getNumber()))       continue;
      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);
      for (      Register r : liveRegisters) {
        if (r.isSymbolic()) {
          HashSet<Register> s=findOrCreateSplitSet(default,bb,header);
          s.add(r);
        }
      }
    }
    for (int i=0; i < loop.length(); i++) {
      if (loop.get(i)) {
        BasicBlock bb=nir.getBasicBlock(i);
        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (loop.get(dest.getNumber()))           continue;
          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);
          for (          Register r : liveRegisters) {
            if (r.isSymbolic()) {
              HashSet<Register> s=findOrCreateSplitSet(default,bb,dest);
              s.add(r);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(nir,live,default);
  return default;
}",369,17,"ir:nir,result:default,findSplitPoints:findsplitPoint,",503,9.32,ALERT
61,"public static int unixTimestamp(){
  return (int)(System.currentTimeMillis() / 1000L);
}","public static int unixTimeetime(){
  return (int)(System.currentTimeMillis() / 1000L);
}",22,1,"unixTimestamp:unixTimeetime,",26,0.31,ALERT
62,,,29,3,,1162,11.699564429124200,0
63,"public void mousePressed(MouseEvent e){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);
  if (SwingUtilities.isLeftMouseButton(e)) {
    if (e.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(e);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {
        selectWord(e);
      }
    }
  }
}","public void mousePressed(MouseEvent enter){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),enter);
  if (SwingUtilities.isLeftMouseButton(enter)) {
    if (enter.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(enter);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(enter)) {
        selectWord(enter);
      }
    }
  }
}",80,3,"e:enter,",42,0.53,ALERT
64,,,26,2,,458,5.434568905830380,0
65,"public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
","public static void online(Zdiagmat D){
  online(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
",23,2,"o:online,",36,0.41,ALERT
66,"public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}","public void insertOrRefresh(final KBucketEntry nextEntity){
  if (nextEntity == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(nextEntity)) {
      existing.mergeInTimestamps(nextEntity);
      return;
    }
    if (existing.matchIPorID(nextEntity)) {
      DHT.logInfo(""new node "" + nextEntity + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (nextEntity.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,nextEntity);
      return;
    }
    if (replaceBadEntry(nextEntity))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > nextEntity.getCreationTime() || nextEntity.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,nextEntity);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(nextEntity);
}",190,5,"newEntry:nextEntity,",61,2.68,ALERT
67,"public final boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)object;
  return from.equals(pair.from) && to.equals(pair.to);
}
","public final boolean equivalent(Object inter){
  if (inter == null) {
    return false;
  }
  if (!(inter instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge airs=(KnowledgeEdge)inter;
  return from.equivalent(airs.from) && to.equivalent(airs.to);
}
",62,3,"pair:airs,object:inter,equals:equivalent,",102,1.38,ALERT
68,,,26,1,,397,4.803440117836000,0
69,,,14,1,,440,4.7387400070826200,0
70,,,357,15,,4720,78.56308834552770,0
71,"public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}","public static int ize(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}",151,7,"update:ize,",51,1.23,ALERT
72,,,147,3,,1146,21.077784140904700,0
73,"public void auditCallhome(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);
}
","public void auditeCallInfo(OperationTypeEnum auditorStyle,String operationalStatus,String description,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditorStyle,System.currentTimeMillis(),operationalStatus,description,descparams);
}
",44,5,"auditType:auditorStyle,auditCallhome:auditeCallInfo,",149,1.63,ALERT
74,"public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
","public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importImage=fileDialogs.get(title);
    if (importImage == null) {
      importImage=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importImage);
    }
    importImage.setVisible(true);
    if (importImage.getFile() != null) {
      return new File[]{new File(importImage.getDirectory(),importImage.getFile())};
    }
  }
 else {
    JFileChooser importChooker=fileChoosers.get(title);
    if (importChooker == null) {
      importChooker=new JFileChooser(Utils.getCWD());
      importChooker.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooker.setFileFilter(fileNameExtensionFilter);
      }
      importChooker.setDialogTitle(title);
      fileChoosers.put(title,importChooker);
    }
    int returnVal=importChooker.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooker.isMultiSelectionEnabled()) {
        return importChooker.getSelectedFiles();
      }
 else {
        return new File[]{importChooker.getSelectedFile()};
      }
    }
  }
  return null;
}
",258,8,"importChooser:importChooker,importDialog:importImage,",97,1.56,ALERT
75,,,122,4,,1498,19.792450066407500,0
76,,,35,2,,808,9.529555161794030,0
77,"private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}","private void DrawTitle(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}",773,10,"drawCombat:DrawTitle,",185,3.17,ALERT
78,"public static void clearAssertionInformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
","public static void clearAssERTioninformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
",18,1,"clearAssertionInformation:clearAssERTioninformation,",20,0.2,ALERT
79,"public void circle(double x,double y,double r){
  if (r < 0)   throw new IllegalArgumentException(""circle radius can\'t be negative"");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * r);
  double hs=factorY(2 * r);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}","public void angle(double ph,double dy,double w){
  if (w < 0)   throw new IllegalArgumentException(""circle radius can\'t be negative"");
  double xxsscaleX(ph);
  double yysscaleY(dy);
  double s=factorX(2 * w);
  double hops=factorY(2 * w);
  if (wss= 1 && hshops= 1)   pixel(ph,dy);
 else   offscreen.draw(new Ellipse2D.Double(xs - s / 2,ys -hopss / 2,s,hops));
  draw();
}",113,8,"circle:angle,x:ph,y:dy,r:w,ws:s,hs:hops,",412,6.78,ALERT
80,"private double[] parseVector(String s){
  String[] entries=WHITESPACE_PATTERN.split(s);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}","private double[] buildMatrix(String r){
  String[] instents=WHITESPACE_PATTERN.split(r);
  double[] dsdnew double[instents.length];
  for (int iuri0; iuri< instents.length; uri++) {
    try {
      dsdiuri=ParseUtil.parseDouble(instents[uri]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return sd;
}",89,5,"parseVector:buildMatrix,s:r,entries:instents,d:sd,i:uri,",268,3.38,ALERT
81,"public void classLoaderInit(DynamicClassLoader loader){
  EnvLoaderListener listener=_listenerRef.get();
  if (listener != null)   listener.classLoaderInit(loader);
}
","public void classWriterInit(DynamicClassLoader or){
  EnvLoaderListener latening=_listenerRef.get();
  lateningener != nulllateningener.classWriterInit(or);
}
",31,3,"classLoaderInit:classWriterInit,loader:or,listener:latening,",376,4.41,ALERT
82,"@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public int i(char bf[],int post,int val) throws IOException {
  ensureOpen();
  if ((ofpost 0) || (ofpost bf.length) || (lenval0)|| ((opost+ leval> bf.length)|| ((post + val) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (val == 0) {
    return 0;
  }
  if (pt >= count) {
    return -1;
  }
  if (pt + val > count) {
    val=count - pt;
  }
  if (val <= 0) {
    return 0;
  }
  System.arraycopy(buf,poptf,post,val);
  pt+=val;
  return val;
}",150,5,"read:i,b:bf,off:post,len:val,pos:pt,",488,10.9,ALERT
84,"public static boolean isFullCopyRestorable(Volume volume,DbClient dbClient){
  boolean result=false;
  String replicaState=volume.getReplicaState();
  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {
    ReplicationState state=ReplicationState.getEnumValue(replicaState);
    if (state != null && state == ReplicationState.SYNCHRONIZED) {
      result=true;
    }
  }
  return result;
}
","public static boolean isFullcopyRestore(Volume driver,DbClient databaseclient){
  boolean current=false;
  String replicaType=driver.getReplicaState();
  if (isVolumeFullCopy(driver,databaseclient) && replicaType != null && !replicaType.isEmpty()) {
    ReplicationStateupe=ReplicationState.getEnumValue(replicaType);
    if (up != null && up == ReplicationState.SYNCHRONIZED) {
      current=true;
    }
  }
  return current;
}
",80,6,"isFullCopyRestorable:isFullcopyRestore,volume:driver,dbClient:databaseclient,replicaState:replicaType,state:up,result:current,",684,12.71,ALERT
85,"public void writeLinkedKml(final String filename,final KmlType kml){
  if (filename.equals(""doc.kml"")) {
    throw new IllegalArgumentException(""The filename \'doc.kml\' is reserved for the primary kml."");
  }
  if (filename.equals(""main.kml"")) {
    throw new IllegalArgumentException(""The filename \'main.kml\' is reserved for the main kml."");
  }
  writeKml(filename,kml);
}
","public void writeLinkedksl(final String fn,final KmlType kml){
  if (fn.equals(""doc.kml"")) {
    throw new IllegalArgumentException(""The filename \'doc.kml\' is reserved for the primary kml."");
  }
  if (fn.equals(""main.kml"")) {
    throw new IllegalArgumentException(""The filename \'main.kml\' is reserved for the main kml."");
  }
  writeKml(fn,kml);
}
",57,3,"filename:fn,writeLinkedKml:writeLinkedksl,",93,1.25,ALERT
86,"public void testDivideRoundHalfUpPos(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=-24;
  String b=""7472334223847623782375469293018787918347987234564568"";
  int bScale=13;
  String c=""1.24390557635720517122423359799284E+53"";
  int resScale=-21;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);
  assertEquals(""incorrect value"",c,result.toString());
  assertEquals(""incorrect scale"",resScale,result.scale());
}","public void assertDivideRoundHalfUP0(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aRepeat=-24;
  String eb=""7472334223847623782375469293018787918347987234564568"";
  int bscale=13;
  String l=""1.24390557635720517122423359799284E+53"";
  int ResStep=-21;
  BigDecimal aAStringnew BigDecimal(new BigInteger(a),aRepeat);
  BigDecimal bbbNumbersnew BigDecimal(new BigInteger(eb),bscale);
  BigDecimal rresultStringr.dividebbNumbersr,ResStep,BigDecimal.ROUND_HALF_UP);
  assertEquals(""incorrect value"",l,result.toString());
  assertEquals(""incorrect scale"",ResStep,result.scale());
}",111,10,"testDivideRoundHalfUpPos:assertDivideRoundHalfUP0,aScale:aRepeat,b:eb,bScale:bscale,c:l,resScale:ResStep,aNumber:AString,bNumber:bbNumbers,",411,8.22,ALERT
87,"private void checkInteriorIntersections(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorIntersections(ss0,ss1);
    }
  }
}","private void checkInteriorinterrelations(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorinterrelations(ss0,ss1);
    }
  }
}",78,5,"checkInteriorIntersections:checkInteriorinterrelations,",98,1.32,ALERT
89,"protected String format(Object o){
  return o.toString();
}
","protected String export(Object ó){
  return ó.toString();
}
",16,2,"format:export,o:ó,",165,1.83,ALERT
90,,,74,2,,753,8.1385125319163,0
91,,,22,2,,765,7.228160798549650,0
92,"public static <T>List<T> rest(List<T> l){
  return l.subList(1,l.size());
}","public static <T>List<T> end(List<T> lv){
  return lv.subList(1,lv.size());
}",33,2,"rest:end,l:lv,",172,1.76,ALERT
93,"private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
","private JsonObject getRequest(Map<String,Object> headers,String uri,HttpMethod status,JsonObject payl){
  JsonObject request=new JsonObject();
  JsonArray jsonHEADs=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHEADs);
  request.put(""uri"",uri);
  request.put(""method"",status.toString());
  request.put(""payload"",payl)requestest.put(""payload"",payl);
  return request;
}
",89,7,"createRequest:getRequest,method:status,payload:payl,jsonHeaders:jsonHEADs,",278,2.83,ALERT
94,,,24,2,,740,7.379973276456200,0
95,"public static IKeyBuilder newInstance(int capacity,CollatorEnum collatorChoice,Locale locale,Object strength,DecompositionEnum mode){
  if (collatorChoice == CollatorEnum.ASCII) {
    return new KeyBuilder(capacity);
  }
  if (locale == null) {
    locale=Locale.getDefault();
    if (log.isInfoEnabled())     log.info(""Using default locale: "" + locale.getDisplayName());
  }
  final boolean icu=collatorChoice == CollatorEnum.ICU;
  if (icu && !DefaultKeyBuilderFactory.isICUAvailable()) {
    throw new UnsupportedOperationException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE);
  }
  final byte[] buf=createBuffer(capacity);
  final int len=0;
switch (collatorChoice) {
case ICU:
    return new KeyBuilder(new ICUSortKeyGenerator(locale,strength,mode),len,buf);
case JDK:
  return new KeyBuilder(new JDKSortKeyGenerator(locale,strength,mode),len,buf);
default :
throw new UnsupportedOperationException(""Collator not supported: "" + collatorChoice);
}
}","public static IKeyBuilder addinstance(int scale,CollatorEnum locinatorCode,Locale locne,Object processor,DecompositionEnum kind){
  if (locinatorCode == CollatorEnum.ASCII) {
    return new KeyBuilder(scale);
  }
  if (locne == null) {
    locne=Locale.getDefault();
    if (log.isInfoEnabled())     log.info(""Using default locale: "" + locne.getDisplayName());
  }
  final booleanICuitu=locinatorCode == CollatorEnum.ICU;
  if (ICuit && !DefaultKeyBuilderFactory.isICUAvailable()) {
    throw new UnsupportedOperationException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE);
  }
  final bytebcbuf=createBuffer(scale);
  final int lang=0;
switch (locinatorCode) {
case ICU:
    return new KeyBuilder(new ICUSortKeyGenerator(locne,processor,kind)langn,bc);
case JDK:
  return new KeyBuilder(new JDKSortKeyGenerator(locne,processor,kind)langn,bc);
default :
throw new UnsupportedOperationException(""Collator not supported: "" + locinatorCode);
}
}",186,9,"newInstance:addinstance,capacity:scale,collatorChoice:locinatorCode,locale:locne,strength:processor,mode:kind,icu:ICuit,buf:bc,len:lang,",910,20.16,ALERT
96,,,21,2,,782,7.865059777100880,0
97,"public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
","public void Removecolumn(Column pattern){
  if (pattern != null) {
    columns.remove(pattern);
  }
}
",24,2,"removeColumn:Removecolumn,column:pattern,",51,0.45,ALERT
98,"public void playMedia(boolean showPlayerWindow){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerWindow(showPlayerWindow);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}","public void playMedia(boolean showUserFrame){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showUserFrame(showUserFrame);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}",70,4,"showPlayerWindow:showUserFrame,",42,0.99,ALERT
100,"public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
","public boolean isLeleaf(Object nw){
  Node component=(Node)nw;
  return !component.hasChildNodes();
}
",25,3,"nd:nw,node:component,isLeaf:isLeleaf,",90,0.91,ALERT
101,,,14,1,,429,3.4106151183446200,0
102,"public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){
  join(async.getThread(),timeoutMilliseconds);
}
","public static void joined(final AsyncInvocation<?> aynchronous,final long timeoutMilleconds){
  joined(aynchronous.getThread(),timeoutMilleconds);
}
",29,3,"join:joined,async:aynchronous,timeoutMilliseconds:timeoutMilleconds,",89,0.8,ALERT
103,"public static void logStackTrace(Level level,Throwable throwable){
  logStackTrace(level,throwable,null);
}
","public static void logConsoleChaces(Level level,Throwable throwback){
  logConsoleChaces(level,throwback,null);
}
",22,3,"throwable:throwback,logStackTrace:logConsoleChaces,",59,0.5,ALERT
104,"public void printBytes(byte[] data,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}","public void setBytes(byte[] data,int frequency,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((chaultfrequency] & 0xff) << 16) + ((data[frequency + 1] & 0xff) << 8) + (data[frequency + 2] & 0xff));
    os.write(base64encode(chault >> 18));
    os.write(base64encode(chault >> 12));
    os.write(base64encode(chault >> 6));
    os.write(base64encode(chault));
    frequency+=3;
  }
  if (length == 2) {
    int chunk=chaulta[frequency] & 0xff) << 8) + (data[frequency + 1] & 0xff);
    os.write(base64encode(chault >> 12));
    os.write(base64encode(chault >> 6));
    os.write(base64encode(chault));
    os.write('=');
  }
 else   if (length == 1) {
    int chuchaultta[frequency] & 0xff;
    os.write(base64encode(chault >> 6));
    os.write(base64encode(chault));
    os.write('=');
    os.write('=');
  }
}",266,6,"printBytes:setBytes,offset:frequency,chunk:chault,",319,3.15,ALERT
105,"protected void tearDown(){
  try {
    ds.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}
","protected void tearingUp(){
  try {
    ds.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}
",29,1,"tearDown:tearingUp,",17,0.22,ALERT
106,"public InSpacePredicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
","public InSpacePredicate(Object... pages){
  _inValues=new HashSet<Object>();
  for (  Object value : pages) {
    _inValues.add(value);
  }
}
",35,3,"values:pages,",38,0.34,ALERT
107,,,61,3,,1073,22.947108495235400,0
108,,,104,10,,3359,30.32043875058490,0
109,"@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
","@Override public void loadResources(Task app,Iterable<ObjectId> projectIds,String propertyKey){
  List<Project> newProjectLine=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project p : projectsToAdd) {
    newProjectLine.add(p);
  }
  try {
    if (PropertyUtils.getProperty(app,propertyKey) != null) {
      Iterable<Project> ppacks(Iterable<Project>)PropertyUtils.getProperty(app,propertyKey);
      for (      Project p : packs) {
        newProjectLine.add(p);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(app,propertyKey,newProjectLine);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(app);
}
",168,8,"addRelations:loadResources,task:app,fieldName:propertyKey,newProjectList:newProjectLine,project:p,projects:packs,",429,5.69,ALERT
110,"public void appendSplitElement(Fragment aSplit){
  splits.add(aSplit);
}
","public void appendJoinElement(Fragment iJoin){
  splits.add(iJoin);
}
",16,2,"appendSplitElement:appendJoinElement,aSplit:iJoin,",101,1.08,ALERT
111,"public static double[] HPDInterval(double proportion,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}","public static double[] HPDInterpoint(double procome,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int df=(int)Math.round(procome * (double)x.length);
  for (int i=0; i <= (x.length - df); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + df - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + df - 1]]};
}",161,11,"diff:df,HPDInterval:HPDInterpoint,proportion:procome,",335,4.35,ALERT
112,"public Statement between(Object former,Object later){
  statement.append("" BETWEEN "");
  append(former);
  statement.append("" AND "");
  append(later);
  return this;
}
","public Statement join(Object er,Object another){
  statement.append("" BETWEEN "");
  append(er);
  statement.append("" AND "");
  append(another);
  return this;
}
",39,3,"between:join,former:er,later:another,",320,3.77,ALERT
113,,,220,6,,2030,23.73381190299990,0
114,"public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}","public static boolean ContainsIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}",77,6,"containIP:ContainsIP,",49,0.79,ALERT
115,"public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
","public final void defineWork(@NotNull TransactionRunnable project){
  myDelayedTasks.add(project);
}
",19,2,"task:project,delayTask:defineWork,",51,0.64,ALERT
116,"private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      viewMap.remove(name);
    }
    contextMap.clear();
  }
}
","private void deleteBoannels(Map<String,Object> inputCache,Map<String,ViewScopeContextObject> ContextArray){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (ContextArray != null) {
    for (    Map.Entry<String,ViewScopeContextObject> enor ContextArray.entrySet()) {
      StripassivationCapableKeyeId=or.getKey();
      Contextual cContextUALbeanManager.getPassivationCapableBean(passivationCapableKey);
      ViewScopeContextObjecontextObjectect=or.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(ContextUAL);
      conContextUALstroy(inputCache.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> RemovingNumbers=removalNameList.iterator();
    while (RemovingNumbers.hasNext()) {
      String namnamemovingNumbers.next();
      inputCache.remove(name);
    }
    ContextArray.clear();
  }
}
",174,11,"destroyBeans:deleteBoannels,viewMap:inputCache,contextMap:ContextArray,entry:or,passivationCapableId:passivationCapableKey,contextual:ContextUAL,removalNames:RemovingNumbers,",579,7.23,ALERT
117,,,103,6,,1719,28.214054636160500,0
118,"public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}","public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] spliteString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",spliteString[0],spliteString[1],portNetworkId);
}",47,4,"splitedString:spliteString,",40,0.61,ALERT
119,"private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}","private void readFinary(DataInputStream Is) throws IOException {
  if (Is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (Is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=Is.readInt();
  optimalCoupling=Is.readInt();
  extendSelections=Is.readInt();
  joinMethod=Is.readInt();
  joinWeightShift=Is.readInt();
  int weightLength=Is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=Is.readInt();
  }
  int unitsLength=Is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(Is);
  }
  int unitTypesLength=Is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(Is);
  }
  sts=new SampleSet(Is);
  mcep=new SampleSet(Is);
  int numCarts=Is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(Is);
    CART cart=CARTImpl.readFinary(Is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}",316,21,"is:Is,loadBinary:readFinary,",350,3.71,ALERT
120,"public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}
","public void configos(SwtPlatform... configches){
  configos(Arrays.asList(configches));
}
",20,2,"configs:configos,platforms:configches,",210,2.28,ALERT
121,,,38,4,,1235,14.833350809415200,0
122,,,22,1,,440,4.621931286652880,0
123,,,67,3,,932,7.262793119748430,0
124,"static CipherSuite valueOf(int id1,int id2){
  id1&=0xff;
  id2&=0xff;
  int id=(id1 << 8) | id2;
  CipherSuite c=idMap.get(id);
  if (c == null) {
    String h1=Integer.toString(id1,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite(""Unknown 0x"" + h1 + "":0x""+ h2,id);
  }
  return c;
}","static CipherSuite valueof(int idx,int id2){
  idx&=0xff;
  id2&=0xff;
  int id=(idx << 8) | id2;
  CipherSuite c=idMap.get(id);
  if (c == null) {
    String h1=Integer.toString(idx,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite(""Unknown 0x"" + h1 + "":0x""+ h2,id);
  }
  return c;
}",92,7,"valueOf:valueof,id1:idx,",198,4.45,ALERT
125,"public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}","public static String[] line(String redo,String terminrator){
  Vector neoded=new Vector();
  inupdateex=redo.indexOf(terminrator);
  while (update >= 0) {
neodedodes.addElement(redo.substring(0,update));
    redo=redo.substring(inupdate terminrator.length());
  updateex=redo.indexOf(terminrator);
  }
  nodes.addElement(redoneodedodes.addElement(redo);
  String[] rdefnew String[neoded.size()];
  for (int iip0; iip< neoded.size(); ip++) {
    rdefiip=(String)neoded.elementAt(ip);
  }
  return def;
}",139,7,"split:line,original:redo,separator:terminrator,nodes:neoded,index:update,ret:def,i:ip,",360,3.7,ALERT
127,"public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException(""Client not connected"");
    }
    if (!authenticated) {
      throw new IllegalStateException(""Client not authenticated"");
    }
    communication.sendFTPCommand(""MDTM "" + path);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
    String[] messages=r.getMessages();
    if (messages.length != 1) {
      throw new FTPIllegalReplyException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(messages[0]);
      }
 catch (      ParseException e) {
        throw new FTPIllegalReplyException();
      }
    }
  }
}","public Date modStr(String path) throws IllegalStateException, IOException, FTPIlLegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException(""Client not connected"");
    }
    if (!authenticated) {
      throw new IllegalStateException(""Client not authenticated"");
    }
    communication.sendFTPCommand(""MDTM "" + path);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
    String[] messlements=r.getMessages();
    if (messlements.length != 1) {
      throw new FTPIlLegalReplyException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(messlements[0]);
      }
 catch (      ParseException e) {
        throw new FTPIlLegalReplyException();
      }
    }
  }
}",148,7,"modifiedDate:modStr,messages:messlements,FTPIllegalReplyException:FTPIlLegalReplyException,",153,1.49,ALERT
128,"private static void _trustAllHttpsCertificates(){
  SSLContext context;
  if (_trustManagers == null) {
    _trustManagers=new TrustManager[]{new FakeX509TrustManager()};
  }
  try {
    context=SSLContext.getInstance(""SSL"");
    context.init(null,_trustManagers,new SecureRandom());
  }
 catch (  GeneralSecurityException gse) {
    throw new IllegalStateException(gse.getMessage());
  }
  HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());
}","private static void _trustAllHttpsCertifiades(){
  SSLContext ctx;
  if (_certPassurers == null) {
    _certPassurers=new TrustManager[]{new FakeX509TrustManager()};
  }
  try {
    ctx=SSLContext.getInstance(""SSL"");
    ctx.init(null,_certPassurers,new SecureRandom());
  }
 catch (  GeneralSecurityException gse) {
    throw new IllegalStateException(gse.getMessage());
  }
  HttpsURLConnection.setDefaultSSLSocketFactory(ctx.getSocketFactory());
}",87,3,"_trustAllHttpsCertificates:_trustAllHttpsCertifiades,context:ctx,_trustManagers:_certPassurers,",516,14.94,ALERT
129,"public GetBufferedRandomAccessSource(IRandomAccessSource source){
  this.source=source;
  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}","public GetBufferedRandomAccessSource(IRandomAccessSource object){
  this.object=object;
  this.getCache=new byte[(int)Math.min(Math.max(object.length() / 4,1),4096)];
  this.GetSourcePart=-1;
  this.GetBufferend=-1;
}",61,4,"source:object,getBuffer:getCache,getBufferStart:GetSourcePart,getBufferEnd:GetBufferend,",160,1.39,ALERT
130,"public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
","public static byte[] RandomByte(int size){
  byte[] runs=new byte[size];
  seededRandom.nextBytes(runs);
  return runs;
}
",33,3,"bytes:runs,randomBytes:RandomByte,",83,0.83,ALERT
131,"String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException {
  Date source=null;
  if (obj instanceof Date) {
    source=(Date)obj;
  }
 else   if (obj instanceof String) {
    try {
      source=parse((String)obj);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((obj == null) ? ""null"" : obj.toString());
  }
  return format(source,toAppendTo);
}
","String export(Object fn,StringBuffer toAddEndTO) throws IllegalArgumentException {
  Date fe=null;
  if (fn instanceof Date) {
   fee=(Date)fn;
  }
 else   if (fn instanceof String) {
    try {
     fee=parse((String)fn);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (fe == null) {
    throw new IllegalArgumentException((fn == null) ? ""null"" : fn.toString());
  }
  return export(fe,toAddEndTO);
}
",108,4,"format:export,obj:fn,toAppendTo:toAddEndTO,source:fe,",399,5.09,ALERT
132,"public void register(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}
","public void task(GridCacheTtlManager mdr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mdr);
  }
}
",32,2,"mgr:mdr,register:task,",60,0.65,ALERT
133,"void purgeLastArticles(int amountToPurge){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  String query=""_id IN ( SELECT _id FROM "" + TABLE_ARTICLES + "" WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET ""+ (Utils.ARTICLE_LIMIT - amountToPurge + "")"");
  safelyDeleteArticles(query,null);
  Log.d(TAG,""purgeLastArticles took "" + (System.currentTimeMillis() - time) + ""ms"");
}","void purgePreviousCartues(int amountToMerage){
  if (!isDBAvailable())   return;
  long data=System.currentTimeMillis();
  String qeries""_id IN ( SELECT _id FROM "" + TABLE_ARTICLES + "" WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET ""+ (Utils.ARTICLE_LIMIT - amountToMerage + "")"");
  safelyDeleteArticles(eries,null);
  Log.d(TAG,""purgeLastArticles took "" + (System.currentTimeMillis() - data) + ""ms"");
}",73,4,"purgeLastArticles:purgePreviousCartues,amountToPurge:amountToMerage,time:data,query:eries,",865,20.29,ALERT
134,,,40,3,,1106,13.866021080811800,0
135,"@Override public void processNewLines(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}","@Override public void processNewFlocations(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}",202,9,"processNewLines:processNewFlocations,",50,0.59,ALERT
136,"private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
","private static void addItemsFromArray(int StartIndex,int EndPosition){
  for (int i=SriartIndex; i <riEndPosition; ri++) {
    values.add(new Integer(ri));
  }
}
",40,4,"addItemsToList:addItemsFromArray,startIndex:StartIndex,endIndex:EndPosition,i:ri,",173,1.83,ALERT
137,"public static String toRegex(String glob,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegex(glob,separator.charAt(0));
}","public static String toRegex(String Globs,String internationalacer){
  checkNotNull(internationalacer,""separator must be non-null"");
  checkArgument(internationalacer.length() == 1,""separator must be a single character: %s"",internationalacer);
  return toRegex(Globs,internationalacer.charAt(0));
}",48,3,"separator:internationalacer,glob:Globs,",68,0.9,ALERT
138,"static Object ensureNotNull(Location location,Object value){
  if (value == null) {
    throw new EvalException(location,""Snippet runtime does not support null values."");
  }
  return value;
}
","static Object enspectNonNone(Location feature,Object anything){
  if (anything == null) {
    throw new EvalException(feature,""Snippet runtime does not support null values."");
  }
  return anything;
}
",32,3,"ensureNotNull:enspectNonNone,location:feature,value:anything,",619,7.41,ALERT
139,,,45,5,,1792,17.684719892342900,0
140,"public void testSetNull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}","public void testTestnull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}",105,2,"testSetNull:testTestnull,",36,1.21,ALERT
141,,,13,1,,457,8.563093308607740,0
142,"public boolean canGetInt(){
  return canGet(int.class);
}
","public boolean cangetInt(){
  return canGet(int.class);
}
",15,1,"canGetInt:cangetInt,",26,0.31,ALERT
143,"public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}","public String fadeAudio(String path,String error,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(error)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + error);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(error);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}",236,11,"type:error,",68,1.36,ALERT
144,"@SneakyThrows public void addKeyToKeystore(KeyStore keyStore,X509Certificate cert,RSAPrivateKey privateKey,String alias,String password){
  KeyStore.PasswordProtection pass=new KeyStore.PasswordProtection(password.toCharArray());
  Certificate[] certificateChain={cert};
  keyStore.setEntry(alias,new KeyStore.PrivateKeyEntry(privateKey,certificateChain),pass);
}","@SneakyThrows public void addKeyTokeybase(KeyStore keyService,X509Certificate trust,RSAPrivateKey privatekey,String alias,String words){
  KeyStore.PasswordProtectifass=new KeyStore.PasswordProtection(words.toCharArray());
  Certificate[] ccertificatechain{trust};
  keyService.setEntry(alias,new KeyStore.PrivateKeyEntry(privatekcertificatechainain),f);
}",68,8,"addKeyToKeystore:addKeyTokeybase,keyStore:keyService,cert:trust,privateKey:privatekey,password:words,pass:f,certificateChain:certificatechain,",514,4.51,ALERT
146,"public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){
  if (companyId < 0 || 0xFFFF < companyId) {
    String message=String.format(""\'companyId\' is out of the valid range: %d"",companyId);
    throw new IllegalArgumentException(message);
  }
  if (builder == null) {
    return;
  }
  Integer key=Integer.valueOf(companyId);
  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);
  if (builders == null) {
    builders=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(key,builders);
  }
  builders.add(0,builder);
}","public void registerManufacturersCustomBuilder(int companyID,ADManufacturerSpecificBuilder adder){
  if (companyID < 0 || 0xFFFF < companyID) {
    String language=String.format(""\'companyId\' is out of the valid range: %d"",companyID);
    throw new IllegalArgumentException(language);
  }
  if (adder == null) {
    return;
  }
  Integer by=Integer.valueOf(companyID);
  List<ADManufacturerSpecificBuilder>errorss=mMSBuilders.get(by);
  if (errors == null) {
    errors=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(by,errors);
  }
errorsrs.add(0,adder);
}",112,6,"registerManufacturerSpecificBuilder:registerManufacturersCustomBuilder,companyId:companyID,builder:adder,message:language,key:by,builders:errors,",503,8.94,ALERT
147,"public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}","public static boolean comports(boolean[] element1,boolean[] key1){
  if (element1 == null || element1.length == 0) {
    return key1 == null || key1.length == 0;
  }
 else {
    return Arrays.comports(element1,key1);
  }
}",55,3,"field1:element1,field2:key1,equals:comports,",99,1.42,ALERT
148,"final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void rint(char iv){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(iv);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",72,3,"v:iv,println:rint,",93,0.91,ALERT
149,"protected void cutSelectedBean(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
","protected void cutSelectedSeans(){
  if (Debug.debugging(""beanbox""))   Debug.output(""Enter> cutSelectedBean"");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBean="" + selectedBean);
    if (Debug.debugging(""beanbox""))     Debug.output(""selectedBeanLocation="" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging(""beanbox""))     Debug.output(""Exit> copySelectedBean"");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging(""beanbox""))   Debug.output(""Exit> cutSelectedBean"");
}
",165,4,"cutSelectedBean:cutSelectedSeans,",31,0.33,ALERT
150,,,18,1,,419,4.905335116386410,0
151,"public String render(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
","public String render(ValueExpr theexpr) throws Exception {
  theexpr.visit(this);
  return mBuffer.toString();
}
",25,2,"theExpr:theexpr,",35,0.37,ALERT
152,"public boolean isNumericalRun(String pin){
  final int len=pin.length();
  int prevDigit=Character.digit(pin.charAt(0),10);
  int prevDiff=Integer.MAX_VALUE;
  boolean isRun=true;
  for (int i=1; isRun && i < len; i++) {
    final int digit=Character.digit(pin.charAt(i),10);
    final int diff=digit - prevDigit;
    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {
      isRun=false;
    }
    prevDiff=diff;
    prevDigit=digit;
  }
  return isRun;
}","public boolean isNumeristicLength(String ruby){
  final int llnruby.length();
  int pviousSigniteCharacter.dbetaruby.charAt(0),10);
  int viousDiff=Integer.MAX_VALUE;
  boolean isCore=true;
  for (intiui=1; iisCore&&iui < ln; iu++) {
    final int dibetaharacter.dibetauby.charAt(iu),10);
    final int diextraigbetaviousSignite;
    if (viousDiff != Integer.MAX_VALUE && dextra!= viousDiff) {
      isCore=false;
    }
    viousDiff=extra;
    viousSignite=beta;
  }
  return isCore;
}",121,9,"isNumericalRun:isNumeristicLength,pin:ruby,len:ln,prevDigit:viousSignite,prevDiff:viousDiff,i:iu,isRun:isCore,digit:beta,diff:extra,",994,18.98,ALERT
153,"public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}","public final ArrayList<Move> removenonoptimum(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int BestGrade=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > BestGrade) {
        optimalMoves.clear();
        optimalMoves.add(m);
        BestGrade=score;
      }
 else       if (score == BestGrade) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}",310,13,"bestScore:BestGrade,removeNonOptimal:removenonoptimum,",416,13.65,ALERT
154,,,23,2,,442,3.9374366720517500,0
156,"public void waitForDecodingToFinish(){
  while (isDecoding) {
    try {
      Thread.sleep(100);
    }
 catch (    final InterruptedException e) {
      LogWriter.writeLog(""Exception: "" + e.getMessage());
      isDecoding=false;
    }
  }
}","public void waitForDecoderTOStart(){
  while (isRecode) {
    try {
      Thread.sleep(100);
    }
 catch (    final InterruptedException e) {
      LogWriter.writeLog(""Exception: "" + e.getMessage());
      isRecode=false;
    }
  }
}",48,2,"waitForDecodingToFinish:waitForDecoderTOStart,isDecoding:isRecode,",161,2.12,ALERT
157,"public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}","public static void drawVerticalMarginnerSignicators(Graphics2D gc,String translation,int x,int y1,int Ytwo){
  if (y1 > Ytwo) {
    int temp=y1;
    y1=Ytwo;
    Ytwo=temp;
  }
  if (translation == null) {
    gc.drawLine(x,y1,x,Ytwo);
    gc.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    gc.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    gc.drawLine(x,Ytwo,x - CONNECTION_ARROW_SIZE,Ytwo - CONNECTION_ARROW_SIZE);
    gc.drawLine(x,Ytwo,x + CONNECTION_ARROW_SIZE,Ytwo - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  gc.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(translation,gc);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((Ytwo - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    gc.drawLine(x,y1,x,Ytwo);
    gc.drawString(translation,(int)(x - bounds.getWidth() / 2) + offset,Ytwo - h - padding);
    gc.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    gc.drawLine(x - CONNECTION_ARROW_SIZE,Ytwo,x + CONNECTION_ARROW_SIZE,Ytwo);
  }
 else {
    gc.drawLine(x,y1,x,y1 + h);
    gc.drawLine(x,Ytwo - h,x,Ytwo);
    gc.drawString(translation,(int)(x - bounds.getWidth() / 2),Ytwo - h - padding);
    gc.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    gc.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    gc.drawLine(x,Ytwo,x - CONNECTION_ARROW_SIZE,Ytwo - CONNECTION_ARROW_SIZE);
    gc.drawLine(x,Ytwo,x + CONNECTION_ARROW_SIZE,Ytwo - CONNECTION_ARROW_SIZE);
  }
}",430,14,"g:gc,y2:Ytwo,text:translation,drawVerticalMarginIndicator:drawVerticalMarginnerSignicators,",476,5.26,ALERT
158,,,77,2,,777,11.130197397867800,0
160,"@Override public void readExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}
","@Override public void readExternal(ObjectInput resource) throws IOException {
  path=Ipathtils.readPath(resource);
  blockSblockSizerce.readInt();
  grpBlogrpcBlocksSizerce.readLong();
  len=relenrce.readLong();
  props=propsdStringMap(resource);
  accessaccessTimerce.readLong();
  modifimodificationTimerce.readLong();
  flags=flagsrce.readByte();
}
",79,10,"in:resource,grpBlockSize:grpcBlocksSize,",297,4.79,ALERT
161,,,20,1,,405,4.036881176630660,0
162,"private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_S < 1 || blockSize_L < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSize_S + "" or blockSize_L: ""+ blockSize_L);
  }
  int s=r.read(blockSize_S);
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart part=new DiffPart(DiffAction.INSERT);
  part.setStart(s);
  part.setText(output.toString(WIKIPEDIA_ENCODING));
  return part;
}","private DiffPart DeccodeAdd(final int blockSizeECs,final int blockSize_CL) throws UnsupportedEncodingException, DecodingException {
  if (blockSizeECs < 1 || blockSize_CL < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSizeECs + "" or blockSize_L: ""+ blockSize_CL);
  }
  int sblocksr.read(blockSizeECs);
  int lvr.read(blockSize_CL);
  ByteArrayOutputStream write=new ByteArrayOutputStream();
  for (int info=0; info < v; info++) {
    write.write(r.readByte());
  }
  DiffPart player=new DiffPart(DiffAction.INSERT);
  part.playertart(blocks);
 playert.setText(write.toString(WIKIPEDIA_ENCODING));
  return player;
}",131,8,"decodeAdd:DeccodeAdd,blockSize_S:blockSizeECs,blockSize_L:blockSize_CL,s:blocks,l:v,output:write,i:info,part:player,",476,4.79,ALERT
163,"private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){
  int w=Math.abs(x2 - x1);
  int h=Math.abs(z2 - z1);
  if (bAllowDiags) {
    if (w < h)     w=0;
 else     h=0;
  }
  return w + h + 1;
}","private int distAcrosspoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){
  int ow=Math.abs(x2 - x1);
  int k=Math.abs(z2 - z1);
  if (bAllowDiags) {
    if (ow < k)     ow=0;
 else     k=0;
  }
  return ow + k + 1;
}",73,8,"w:ow,h:k,distBetweenPoints:distAcrosspoints,",210,5.03,ALERT
164,"public static int countCSSPrimitiveNames(){
  return ALL_PRIMITIVE_PROPERTY_NAMES.size();
}
","public static int countCSSPrimitiveNumbers(){
  return ALL_PRIMITIVE_PROPERTY_NAMES.size();
}
",15,1,"countCSSPrimitiveNames:countCSSPrimitiveNumbers,",26,0.3,ALERT
165,,,45,7,,2312,27.213277530670200,0
166,,,31,2,,813,11.780477035045600,0
167,"private void loadManifest(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifest=_jarPath.getManifest();
      if (_manifest == null)       return;
      Attributes attr=_manifest.getMainAttributes();
      if (attr != null)       addManifestPackage("""",attr);
      Map<String,Attributes> entries=_manifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
","private void loadCommit(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifest=_jarPath.getManifest();
      if (_manifest == null)       return;
      Attributes act=_manifest.getMainAttributes();
      if (act != null)       addManifestPackage("""",act);
      Map<String,Attributes> entries=_manifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        act=entry.getValue();
        if (act == null)         continue;
        addManifestPackage(pkg,act);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
",163,6,"attr:act,loadManifest:loadCommit,",190,1.31,ALERT
168,"protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
","protected void readValue(String SValue){
  try {
    value=Byte.parseByte(SValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
",36,3,"sValue:SValue,loadValue:readValue,",67,0.52,ALERT
169,"private void addReplicationFactor(Operation op){
  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);
}
","private void addreplicationsRequest(Operation op){
  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);
}
",22,2,"addReplicationFactor:addreplicationsRequest,",28,0.32,ALERT
170,"public void add(int index,int element){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=element;
  size++;
}","public void post(int eight,int element){
  checkRangeIncludingEndpoint(eight);
  ensureCapacity(max + 1);
  int numtomove=max - eight;
  System.arraycopy(parent,eight,parent,eight + 1,numtomove);
  parent[eight]=element;
  max++;
}",58,6,"index:eight,array:parent,size:max,add:post,",196,3.64,ALERT
171,"public void centerHorizontal(ArrayList<Integer> nodes){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(nodes));
  }
  int nMinY=-1;
  int nMaxY=-1;
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nY=getPositionY(nodes.get(iNode));
    if (nY < nMinY || iNode == 0) {
      nMinY=nY;
    }
    if (nY > nMaxY || iNode == 0) {
      nMaxY=nY;
    }
  }
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nNode=nodes.get(iNode);
    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);
  }
}","public void centerhorical(ArrayList<Integer> eays){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(eays));
  }
  int nMaxHeight=-1;
  int nMAXy=-1;
  for (intIChane=0;IChane < eays.size(); IChan++) {
    intnXY=getPositionY(eays.get(IChan));
    if (nY < nXaxHeight || IChan == 0) {
      nMaxHeight=nX;
    }
    if (nX > nMAXy || IChan == 0) {
      nMAXy=nX;
    }
  }
  for (intIChane=0;IChane < eays.size(); IChan++) {
    intnNodee=eays.get(IChan);
    m_nPositionY.set(nNodenNodexHeight + nMAXy) / 2);
  }
}",149,7,"centerHorizontal:centerhorical,nodes:eays,nMinY:nMaxHeight,nMaxY:nMAXy,iNode:IChan,nY:nX,",390,6.64,ALERT
172,,,50,4,,610,22.7054145137469,0
173,,,161,7,,2093,29.02938826481500,0
174,"public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
","public static String fromWorkML(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String replyValue="""";
  try (StringWriter writer=new StringWriter()){
    fromWorkML(toConvert,writer,prettyXml);
    replyValue=writer.toString();
    return replyValue;
  }
 }
",55,4,"retVal:replyValue,toXml:fromWorkML,",123,1.08,ALERT
175,"@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);
}
","@Override public boolean dradAt(Selector pt,Selector DestObject,int seconds) throws UiObjectNotFoundException, NotImplementedException {
  return dradAt(device.findObject(pt.toUiSelector()),DestObject,seconds);
}
",40,4,"dragTo:dradAt,obj:pt,destObj:DestObject,steps:seconds,",368,6.79,ALERT
176,"QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
","QName toQname(Class<?> inputPackage){
  String localpart;
  String namespacedIRI;
  if (inputPackage.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement aannalogueinputPackage.getAnnotation(XmlRootElement.class);
    localpart=annalogue.name();
    namespacedIRI=annalogue.namespace();
  }
 else   if (inputPackage.isAnnotationPresent(XmlType.class)) {
    XmlType aannalogueinputPackage.getAnnotation(XmlType.class);
    localpart=annalogue.name();
    namespacedIRI=annalogue.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + inputPackage + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localpart)) {
    llocalpartClassUtils.getShortNameAsProperty(inputPackage);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespacedIRI)) {
    Package ooutputFileGAinputPackage.getPackage();
    if (outputFileGA != null && outputFileGA.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annalogue=outputFileGA.getAnnotation(XmlSchema.class);
      namespacedIRI=annalogue.namespace();
    }
 else {
      namespacedIRI=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespacedIRI,localpart);
}
",211,6,"toQName:toQname,outputClass:inputPackage,localPart:localpart,namespaceUri:namespacedIRI,annotation:annalogue,outputClassPackage:outputFileGA,",1171,15.3,ALERT
177,,,74,1,,436,7.7789277791976900,0
178,"private void updateLegends(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}","private void updateLegends(){
  if (M__element == null) {
    M__element=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  M__element.setPreferredSize(new Dimension(M__element.getPreferredSize().width,(m_plots.size() + 1) * 20));
  M__element.setMaximumSize(new Dimension(M__element.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  M__element.removeAll();
  padder.setLayout(gb);
  M__element.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(M__element,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    M__element.add(tmp,constraints);
  }
}",412,17,"m_span:M__element,",115,1.15,ALERT
179,"public void testAddServletWithNameAndJspFile() throws Exception {
  String xml=WEBAPP_TEST_HEADER + """" + ""</web-app>"";
  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes(""UTF-8"")),getEntityResolver());
  WebXmlUtils.addJspFile(webXml,""s1"",""s1.jsp"");
  assertTrue(WebXmlUtils.hasServlet(webXml,""s1""));
}","public void testAddServletWithNameAndJSpFiles() throws Exception {
  String ext=WEBAPP_TEST_HEADER + """" + ""</web-app>"";
  WebXml webxm=WebXmlIo.parseWebXml(new ByteArrayInputStream(ext.getBytes(""UTF-8"")),getEntityResolver());
  WebXmlUtils.addJspFile(webxm,""s1"",""s1.jsp"");
  assertTrue(WebXmlUtils.hasServlet(webxm,""s1""));
}",64,3,"testAddServletWithNameAndJspFile:testAddServletWithNameAndJSpFiles,xml:ext,webXml:webxm,",253,4.01,ALERT
181,,,17,2,,816,7.960844373703000,0
182,"public static int unionSize(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}","public static int sectionsize(long[] px,long[] vy){
  final int ilx=px.length, lo=vy.length;
  final int min=(ilx < lo) ? ilx : lo;
  int ip=0, resh=0;
  for (; ip < min; ip++) {
    resh+=Long.bitCount(px[ip] | vy[ip]);
  }
  for (; ip < ilx; ip++) {
    resh+=Long.bitCount(px[ip]);
  }
  for (; ip < lo; ip++) {
    resh+=Long.bitCount(vy[ip]);
  }
  return resh;
}",134,8,"i:ip,res:resh,y:vy,x:px,lx:ilx,ly:lo,unionSize:sectionsize,",263,6.69,ALERT
183,"public boolean containsCategory(String category){
  return !hiddenBugCategorySet.contains(category);
}
","public boolean containscategory(String ticket){
  return !hiddenBugCategorySet.contains(ticket);
}
",18,2,"category:ticket,containsCategory:containscategory,",58,0.74,ALERT
184,,,34,2,,357,3.223828371365870,0
185,"public void testEmptyOrNullBlob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}","public void insertEmptyOrNullblOB() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}",254,4,"testEmptyOrNullBlob:insertEmptyOrNullblOB,",49,0.73,ALERT
186,"protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}","protected double computeStdDev(Instance e,Matrix ke) throws Exception {
  double kappa=m_kernel.eval(-1,-1,e) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double tf=0;
    for (int bj=0; bj < n; bj++) {
      tf-=ke.get(bj,0) * (i > bj ? m_L[i][bj] : m_L[bj][i]);
    }
    s+=tf * ke.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}",154,10,"inst:e,j:bj,t:tf,k:ke,",218,3.3,ALERT
188,,,49,4,,1452,12.791108481089300,0
189,"public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}","public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput inner;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    inner=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
inner=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
inner=_hessianFactory.createHessian2Input(is);
inner.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
inner.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,inner,out);
}
  finally {
inner.close();
out.close();
if (isDebug) os.close();
}
}",252,11,"in:inner,",83,4.32,ALERT
190,"@NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){
  if (isAssignable(target,source))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target);
  if (directConversion.isPresent())   return directConversion;
  Optional<TypeConversion> arrayConversion=findArrayConversion(source,target);
  if (arrayConversion.isPresent())   return arrayConversion;
  Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target);
  if (optionalConversion.isPresent())   return optionalConversion;
  Optional<TypeConversion> enumConversion=findEnumConversion(target);
  if (enumConversion.isPresent())   return enumConversion;
  return Optional.empty();
}
","@NotNull private Optional<TypeConversion> findConversionFromCacheValues(@NotNull Type it,@NotNull Type master){
  if (isAssignamasterrget,it))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversion> DirectConformation=typeConversionRegistry.findConversionFromCacheValues(it,master);
  if (DirectConformation.isPresent())   return DirectConformation;
  Optional<TypeConversiarrayCanversionsion=findArrayConversion(it,master);
  if (arrayCanversion.isPresent())   return arrayCanversion;
  Optional<TypeConversienumConsvisionsion=findOptionalConversion(it,master);
  if (enumConsvision.isPresent())   return enumConsvision;
  Optional<TypeConversion> integerConolution=findEnumConversion(master);
  if (integerConolution.isPresent())   return integerConolution;
  return Optional.empty();
}
",145,7,"findConversionFromDbValue:findConversionFromCacheValues,source:it,target:master,directConversion:DirectConformation,arrayConversion:arrayCanversion,optionalConversion:enumConsvision,enumConversion:integerConolution,",512,7.7,ALERT
191,,,26,3,,1159,12.402420703570000,0
192,,,28,2,,794,8.104441050688430,0
193,"public Optional<BlazeVertex> vertex(final String vertexId){
  try (final CloseableIterator<Vertex> it=vertices(vertexId)){
    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException(""Multiple vertices found with id: "" + vertexId);
    }
    return v;
  }
 }
","public Optional<BlazeVertex> verices(final String tentexid){
  try (final CloseableIterator<Vertex> it=vertices(tentexid)){
    final Optional<BlazeVertex> x=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException(""Multiple vertices found with id: "" + tentexid);
    }
    return x;
  }
 }
",84,3,"vertex:verices,v:x,vertexId:tentexid,",82,1.24,ALERT
194,,,23,2,,783,9.937588445345560,0
195,,,70,1,,435,4.8325832962989800,0
196,"public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}","public void iolimize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackComponent=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.iolimize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.iolimize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.iolimize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.iolimize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.iolimize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.iolimize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}",438,17,"mHapticFeedbackController:mHapticFeedbackComponent,initialize:iolimize,",411,4.84,ALERT
199,"public static String parseDiskString(String input){
  String delims=""[ ]+"";
  String[] tokens=input.split(delims);
  return tokens[0];
}","public static String parseTempSection(String request){
  String deloms=""[ ]+"";
  String[] toitokenequest.split(deloms);
  return itoken[0];
}",33,4,"parseDiskString:parseTempSection,input:request,delims:deloms,tokens:itoken,",235,3.37,ALERT
200,"public void append(String string){
  for (int i=0; i < string.length(); i++)   append(string.charAt(i));
}","public void append(String string){
  for (int abi=0; abi < string.length(); abi++)   append(string.charAt(abi));
}",37,3,"i:abi,",41,0.54,ALERT
201,,,18,2,,786,15.865855419635800,0
202,"void hideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
","void HideRegion(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
",37,2,"hideBorder:HideRegion,",23,0.25,ALERT
203,"public void recordBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordBeginning(mModuleName,mRunId);
}
","public void RecordBegin(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.RecordBegin(mModuleName,mRunId);
}
",42,2,"recordBeginning:RecordBegin,",27,0.31,ALERT
204,"public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String addTags(ByteArrayTag as){
  StringBuilder usher=new StringBuilder();
  usher.append(ARRAY_START);
  boolean use=true;
  for (  byteparte : as.getValue()) {
    ByteTagbaseb=new ByteTag(part);
    if (use) {
      use=false;
    }
 else {
      usher.append(ELEMENT_SEPERATOR);
    }
    usher.append(addTags(base));
  }
  usher.append(ARRAY_END);
  return usher.toString();
}
",96,6,"fromTag:addTags,tag:as,builder:usher,value:part,b:base,start:use,",1066,13.62,ALERT
205,"public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}","public String run(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}",60,5,"random:run,",40,0.49,ALERT
206,"public void add(String methodName,List<Expression> parameters){
  chain.add(new DotExpressionItem(methodName,parameters,false));
}
","public void param(String functionNames,List<Expression> paramams){
  chain.param(new DotExpressionItem(functionNames,paramams,false));
}
",30,3,"add:param,methodName:functionNames,parameters:paramams,",146,1.61,ALERT
207,,,38,2,,786,8.316958006223040,0
208,"public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}","public boolean equalsValue(){
  return (Double.doubleToLongBits(value) == 0);
}",19,1,"equalsDefault:equalsValue,",17,0.21,ALERT
209,"@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
","@Override public List<String> latestKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
",78,4,"allKeys:latestKeys,",28,0.34,ALERT
210,"@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
","@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager fm : new_pts.values()) {
    fm.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
",40,3,"im:fm,",37,0.36,ALERT
211,"public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
","public ResourcesPoet newFloat(String version,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",version);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
",58,4,"name:version,addInteger:newFloat,",52,0.47,ALERT
212,,,97,5,,1512,11.397423919042000,0
213,"public void remove(IAdaptable a){
  children.remove(a);
}
","public void remove(IAdaptable e){
  children.remove(e);
}
",16,2,"a:e,",36,0.38,ALERT
214,,,223,6,,923,21.62606472969060,0
215,"public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
","public static void upgradeServiceinstance(SSOToken ssoToken,String containerType,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,containerType);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
",102,8,"upgradeServerInstance:upgradeServiceinstance,instanceName:containerType,",107,0.97,ALERT
216,"protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
","protected void deleteInstanceVerite(AtlasVertex instanceverite,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteInstanceVerite(instanceverite,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceverite));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
",68,4,"instanceVertex:instanceverite,deleteTypeVertex:deleteInstanceVerite,",99,0.89,ALERT
217,"private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> inceptures,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  inceptures.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  inceptures.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  inceptures.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  inceptures.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  inceptures.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}",221,12,"instructions:inceptures,",73,5.62,ALERT
218,,,21,1,,424,4.303293291727700,0
219,"public void forward(HttpServerRequest request){
  forward(request,null);
}
","public void url(HttpServerRequest x){
  url(x,null);
}
",16,2,"forward:url,request:x,",260,2.26,ALERT
220,"protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
","protected boolean matchesFilter(final String query,final String[] cache){
  for (  final String match : cache) {
    if (!query.contains(match))     return false;
  }
  return true;
}
",42,4,"input:query,filter:cache,",80,0.78,ALERT
221,"public CompletableFuture<NewFile> run(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}","public CompletableFuture<NewFile> thread(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}",85,4,"run:thread,",37,0.35,ALERT
222,"final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void rint(double k){
  Writer server=this.server;
  if (server == null)   return;
  print(k);
  try {
    server.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,3,"out:server,v:k,println:rint,",92,0.96,ALERT
223,"private static void updateWindowUI(Window window){
  SwingUtilities.updateComponentTreeUI(window);
  Window ownedWins[]=window.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    updateWindowUI(ownedWin);
  }
}
","private static void setWinFlow(Window parent){
  SwingUtilities.updateComponentTreeUI(parent);
  Window ownedWins[]=parent.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    setWinFlow(ownedWin);
  }
}
",42,4,"updateWindowUI:setWinFlow,window:parent,",122,1.05,ALERT
224,"protected boolean isServerTransaction(){
  return this instanceof SIPServerTransaction;
}
","protected boolean isClientConnection(){
  return this instanceof SIPServerTransaction;
}
",12,1,"isServerTransaction:isClientConnection,",26,0.29,ALERT
225,"public int countArray(String[] array){
  return array.length;
}
","public int nextArray(String[] Array){
  return Array.length;
}
",16,2,"countArray:nextArray,array:Array,",50,0.43,ALERT
226,,,31,3,,1031,11.53513601620990,0
227,,,113,3,,944,13.070832987626400,0
228,"public void addPreferencesButton(){
  JButton prefsButton=new JButton(""Prefs"");
  prefsButton.setHideActionText(true);
  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefsButton);
}
","public void addPreffsChannel(){
  JButton prefsFactory=new JButton(""Prefs"");
  prefsFactory.setHideActionText(true);
  prefsFactory.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefsFactory);
}
",42,2,"addPreferencesButton:addPreffsChannel,prefsButton:prefsFactory,",471,4.27,ALERT
229,"private View fillFromSelection(int selectedLeft,int childrenLeft,int childrenRight){
  if (DEBUG)   Log.i(TAG,""fillFromSelection() selectedLeft: "" + selectedLeft + "" childrenLeft: ""+ childrenLeft+ CHILDREN_RIGHT+ childrenRight+ M_FIRST_POSITION+ mFirstPosition);
  final int fadingEdgeLength=getHorizontalFadingEdgeLength();
  final int selectedPosition=mSelectedPosition;
  final int numRows=mNumRows;
  final int horizontalSpacing=mHorizontalSpacing;
  int columnStart;
  int columnEnd=-1;
  if (!mStackFromBottom) {
    columnStart=selectedPosition - (selectedPosition % numRows);
  }
 else {
    int invertedSelection=mItemCount - 1 - selectedPosition;
    columnEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numRows));
    columnStart=Math.max(0,columnEnd - numRows + 1);
  }
  View sel;
  View referenceView;
  int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,columnStart);
  int rightSelectionPixel=getRightSelectionPixel(childrenRight,fadingEdgeLength,numRows,columnStart);
  sel=makeColumn(mStackFromBottom ? columnEnd : columnStart,selectedLeft,true);
  mFirstPosition=columnStart;
  referenceView=mReferenceView;
  adjustForLeftFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel);
  adjustForRightFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel);
  if (!mStackFromBottom) {
    fillLeft(columnStart - numRows,referenceView.getLeft() - horizontalSpacing);
    adjustViewsLeftOrRight();
    fillRight(columnStart + numRows,referenceView.getRight() + horizontalSpacing);
  }
 else {
    fillRight(columnEnd + numRows,referenceView.getRight() + horizontalSpacing);
    adjustViewsLeftOrRight();
    fillLeft(columnStart - 1,referenceView.getLeft() - horizontalSpacing);
  }
  return sel;
}","private View fillfromSllect(int selectLeft,int childrenleft,int selectionRight){
  if (DEBUG)   Log.i(TAG,""fillFromSelection() selectedLeft: "" + selectLeft + "" childrenLeft: ""+ childrenleft+ CHILDREN_RIGHT+ selectionRight+ M_FIRST_POSITION+ mLastOrder);
  final int fadingLineWidth=getHorizontalFadingEdgeLength();
  final int renderedPosition=mSelectedPosition;
  final int numFOWS=mNumRows;
  final int horicalFilling=mHorizontalSpacing;
  int forwardOffset;
  int columnId=-1;
  if (!mStackFromBottom) {
    forwardOffset=renderedPosition - (renderedPosition % numFOWS);
  }
 else {
    int invertedSlection=mItemCount - 1 - renderedPosition;
    columnId=mItemCount - 1 - (invertedSlection - (invertedSlection % numFOWS));
    forwardOffset=Math.max(0,columnId - numFOWS + 1);
  }
  View val;
  View primaryVIEW;
  int lleftSelectChargetLeftSelectionPixel(childrenleft,fadingLineWidth,forwardOffset);
  int rirightSelectedPositionetRightSelectionPixel(selectionRight,fadingLineWidth,numFOWS,forwardOffset);
 vall=makeColumn(mStackFromBottom ? columnId forwardOffsetrt,selectLeft,true);
  mFmLastOrderorwardOffset;
  primaryVIEW=mReferenceView;
  adjustForLeftFadingEdge(primaryVIEW,leftSelectChar,rightSelectedPosition);
  adjustForRightFadingEdge(primaryVIEW,leftSelectChar,rightSelectedPosition);
  if (!mStackFromBottom) {
    fillLeforwardOffsetart - numFOprimaryVIEWiew.getLeft() - horicalFilling);
    adjustViewsLeftOrRight();
    fillRigforwardOffsetart + numFOprimaryVIEWiew.getRight() + horicalFilling);
  }
 else {
    fillRigcolumnIdEnd + numFOprimaryVIEWiew.getRight() + horicalFilling);
    adjustViewsLeftOrRight();
    fillLeforwardOffsetart -primaryVIEWiew.getLeft() - horicalFilling);
  }
  return val;
}",291,16,"fillFromSelection:fillfromSllect,selectedLeft:selectLeft,childrenLeft:childrenleft,childrenRight:selectionRight,fadingEdgeLength:fadingLineWidth,selectedPosition:renderedPosition,numRows:numFOWS,horizontalSpacing:horicalFilling,columnStart:forwardOffset,columnEnd:columnId,invertedSelection:invertedSlection,sel:val,referenceView:primaryVIEW,leftSelectionPixel:leftSelectChar,rightSelectionPixel:rightSelectedPosition,mFirstPosition:mLastOrder,",3088,53.53,ALERT
230,"private boolean hasNext(Pattern pattern){
  if (!hasNext()) {
    return false;
  }
  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));
  return matcher.find();
}
","private boolean hasLast(Pattern type){
  if (!hasLast()) {
    return false;
  }
  Matcher Matcher=type.Matcher(gserValue.substring(pos,length));
  return Matcher.find();
}
",45,3,"hasNext:hasLast,pattern:type,matcher:Matcher,",90,2.55,ALERT
231,"private void updateStateView(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
","private void UpdateModelview(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
",31,3,"updateStateView:UpdateModelview,",28,0.84,ALERT
232,,,20,1,,434,4.970678389072420,0
233,"protected static Long convertUuidToLong(UUID uuid){
  if (uuid == null) {
    return null;
  }
  Long convertedUuid;
  if (uuid.version() == 1) {
    convertedUuid=uuid.timestamp();
  }
 else {
    convertedUuid=uuid.getMostSignificantBits();
  }
  return convertedUuid;
}","protected static Long convertUidToLarge(UUID uud){
  if (uud == null) {
    return null;
  }
  Long convertedUuid;
  if (uud.version() == 1) {
    convertedUuid=uud.timestamp();
  }
 else {
    convertedUuid=uud.getMostSignificantBits();
  }
  return convertedUuid;
}",58,3,"convertUuidToLong:convertUidToLarge,uuid:uud,",65,0.96,ALERT
234,,,81,2,,698,6.589880136648810,0
235,"public void init(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    init(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + url + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
","public void use(String resource,java.net.URL rl){
  try {
    java.io.InputStreamdocn=rl.openStream();
    Properties profps=new Properties();
    pprofpsload(doc);
    use(getLayers(resource,profps));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + rl + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
",97,5,"init:use,prefix:resource,url:rl,in:doc,props:profps,",861,10.34,ALERT
236,"private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}","private void growSpine(){
  splines=new int[(splines.length << 1) + 1];
  threshold=(int)(splines.length * loadFactor);
  Arrays.fill(splines,-1);
  for (int xi=0; xi < size; xi++) {
    insert(objs[xi],xi);
  }
}",72,4,"i:xi,spine:splines,",73,0.78,ALERT
237,"public Tasker addTask(Task task){
  tasks.add(task);
  lastAddedTask=task;
  return this;
}
","public Tasker addtask(Task job){
  tasks.add(job);
  lastAddedAttempt=job;
  return this;
}
",23,3,"task:job,lastAddedTask:lastAddedAttempt,addTask:addtask,",73,0.74,ALERT
238,,,55,8,,2776,34.86288512150450,0
239,,,106,18,,6187,71.61288522084550,0
240,"private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}","private void pathThemeCompat(String show,String base){
  if (show == null) {
    return;
  }
  if (show.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(show,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (base != null) {
    try {
      off=Float.parseFloat(base) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}",213,11,"style:show,offset:base,pathStyleHelper:pathThemeCompat,",126,1.51,ALERT
241,"public static Format generateFormat(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
","public static Format GenerateFile(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
",25,2,"generateFormat:GenerateFile,",28,0.31,ALERT
242,"public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}","public double calculateExcitatoryratios(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}",39,2,"calculateExcitatoryRatio:calculateExcitatoryratios,",29,0.41,ALERT
243,"public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}
","public void tracking(File layer,Object Markester,FileDeleteStrategy deleteStrategy){
  if (layer == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(layer.getPath(),Markester,deleteStrategy);
}
",43,4,"file:layer,marker:Markester,track:tracking,",90,0.86,ALERT
244,"public synchronized void reloadConfiguration(){
  properties=null;
  finalParameters.clear();
}
","public synchronized void restloadProperty(){
  properties=null;
  finalParameters.clear();
}
",18,2,"reloadConfiguration:restloadProperty,",54,0.5,ALERT
245,"protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
","protected void arraycopy(byte[] buf,int pos,int loc){
  mMessage.write(buf,pos,loc);
  mPosition=mPosition + loc;
}
",34,5,"length:loc,",42,0.43,ALERT
246,,,154,6,,2104,24.711628103256200,0
247,,,25,1,,438,3.824935495853420,0
248,"public static String[] parseTitle(String title){
  String v[]={"""",""""};
  if (title == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}","public static String[] processHeader(String str){
  String string[]={"""",""""};
  if (str == null)   return string;
  Pattern proc=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher pmoc=p.matcher(str);
  if (m.find()) {
    string[0]=m.group(1);
    string[1]=m.group(2);
  }
 else {
  string v[0]=str;
  }
  return string;
}",103,5,"parseTitle:processHeader,title:str,v:string,p:proc,",315,3.78,ALERT
249,"private Element createIDPEntityDescriptor(boolean exportPrivateData) throws Exception {
  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String id=idmClient.getEntityID(tenantName);
  String alias=idmClient.getLocalIDPAlias(tenantName);
  if (id == null) {
    id=tenantName;
  }
  entEle.setAttribute(SAMLNames.ENTID,id);
  Element idpSSO=createIDPSSODescriptor(exportPrivateData);
  entEle.appendChild(idpSSO);
  if (exportPrivateData) {
    if (alias == null || alias.isEmpty()) {
      alias=id;
    }
    Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH);
    entEle.appendChild(orgEle);
  }
  return entEle;
}
","private Element createIDPEntityDescriptor(boolean exportPrivatedata) throws Exception {
  Element ottele=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String aid=idmClient.getEntityID(tenantName);
  String alias=idmClient.getLocalIDPAlias(tenantName);
  if (aid == null) {
    aid=tenantName;
  }
  ottele.setAttribute(SAMLNames.ENTID,aid);
  Element idpSSO=createIDPSSODescriptor(exportPrivatedata);
  ottele.appendChild(idpSSO);
  if (exportPrivatedata) {
    if (alias == null || alias.isEmpty()) {
      alias=aid;
    }
    Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH);
    ottele.appendChild(orgEle);
  }
  return ottele;
}
",133,7,"exportPrivateData:exportPrivatedata,id:aid,entEle:ottele,",145,1.6,ALERT
250,"public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
","public Iterable<ServiceDescriptor> registerServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
",47,3,"listServices:registerServices,",22,0.2,ALERT
251,"private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}","private double[][] xPrime(int t){
  double[][] pe=new double[1][getNumLags() * numVars];
  for (int ii=0; ii < getNumLags(); ii++) {
    double[][] yPrime=yPrime(t - ii - 1);
    System.arraycopy(yPrime[0],0,pe[0],ii * numVars,numVars);
  }
  return pe;
}",93,5,"i:ii,x:pe,",76,2.43,ALERT
252,"boolean destroyVolume(boolean force){
  NaElement elem=new NaElement(""volume-destroy"");
  elem.addNewChild(""force"",Boolean.toString(force));
  elem.addNewChild(""name"",name);
  try {
    server.invokeElem(elem);
    return true;
  }
 catch (  Exception e) {
    String msg=""Failed to destroy volume: "" + name;
    log.error(msg,e);
    throw new NetAppException(msg,e);
  }
}
","boolean DestroyVolume(boolean mount){
  NaElement ehem=new NaElement(""volume-destroy"");
  ehem.addNewChild(""force"",Boolean.toString(mount));
  ehem.addNewChild(""name"",name);
  try {
    server.invokeElem(ehem);
    return true;
  }
 catch (  Exception e) {
    String gen=""Failed to destroy volume: "" + name;
    log.error(gen,e);
    throw new NetAppException(gen,e);
  }
}
",85,4,"destroyVolume:DestroyVolume,force:mount,elem:ehem,msg:gen,",395,3.52,ALERT
253,"public synchronized void checkAccess(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}","public synchronized void updateAuth(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}",187,4,"checkAccess:updateAuth,",27,1.78,ALERT
254,"private void shutdown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
","private void shutDown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
",49,1,"shutdown:shutDown,",13,0.15,ALERT
255,"@Override public IChatMessage sendMessage(final String text) throws RemoteException {
  if (TextUtils.isEmpty(text)) {
    throw new ServerApiIllegalArgumentException(""GroupChat message must not be null or empty!"");
  }
  int messageLength=text.length();
  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();
  if (messageLength > maxMessageLength) {
    throw new ServerApiIllegalArgumentException(""chat message length: "" + messageLength + "" exceeds max group chat message length: ""+ maxMessageLength+ ""!"");
  }
  if (!isAllowedToSendMessage()) {
    throw new ServerApiPermissionDeniedException(""Not allowed to send GroupChat message on the connected IMS server!"");
  }
  try {
    mImService.removeGroupChatComposingStatus(mChatId);
    long timestamp=System.currentTimeMillis();
    final ChatMessage msg=ChatUtils.createTextMessage(null,text,timestamp,timestamp);
    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),text,msg.getMimeType(),mChatId,Direction.OUTGOING);
    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);
    if (!mChatService.isGroupChatActive(mChatId)) {
      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);
    }
    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);
    return new ChatMessageImpl(persistedStorage);
  }
 catch (  ServerApiBaseException e) {
    if (!e.shouldNotBeLogged()) {
      sLogger.error(ExceptionUtil.getFullStackTrace(e));
    }
    throw e;
  }
catch (  Exception e) {
    sLogger.error(ExceptionUtil.getFullStackTrace(e));
    throw new ServerApiGenericException(e);
  }
}
","@Override public IChatMessage createmessage(final String connection) throws RemoteException {
  if (TextUtils.isEmpty(connection)) {
    throw new ServerApiIllegalArgumentException(""GroupChat message must not be null or empty!"");
  }
  int messageLength=connection.length();
  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();
  if (messageLength > maxMessageLength) {
    throw new ServerApiIllegalArgumentException(""chat message length: "" + messageLength + "" exceeds max group chat message length: ""+ maxMessageLength+ ""!"");
  }
  if (!isAllowedToSendMessage()) {
    throw new ServerApiPermissionDeniedException(""Not allowed to send GroupChat message on the connected IMS server!"");
  }
  try {
    mImService.removeGroupChatComposingStatus(mChatId);
    long timestamp=System.currentTimeMillis();
    final ChatMessage msg=ChatUtils.createTextMessage(null,connection,timestamp,timestamp);
    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),connection,msg.getMimeType(),mChatId,Direction.OUTGOING);
    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);
    if (!mChatService.isGroupChatActive(mChatId)) {
      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);
    }
    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);
    return new ChatMessageImpl(persistedStorage);
  }
 catch (  ServerApiBaseException e) {
    if (!e.shouldNotBeLogged()) {
      sLogger.error(ExceptionUtil.getFullStackTrace(e));
    }
    throw e;
  }
catch (  Exception e) {
    sLogger.error(ExceptionUtil.getFullStackTrace(e));
    throw new ServerApiGenericException(e);
  }
}
",281,7,"sendMessage:createmessage,text:connection,",68,0.71,ALERT
257,"public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}
","public String[] writeConfig(File xmlString) throws SAXException, IOException {
  Document dodocumentationuilder.parse(xmlString);
  return (writeConfig(documentation));
}
",33,3,"parseConfiguration:writeConfig,xmlFile:xmlString,document:documentation,",151,1.44,ALERT
259,"public UidRange[] parseUidRange() throws DecodingException {
  CharacterValidator validator=new MessageSetCharValidator();
  String nextWord=consumeWord(validator,true);
  int commaPos=nextWord.indexOf(',');
  if (commaPos == -1) {
    return new UidRange[]{parseUidRange(nextWord)};
  }
  ArrayList<UidRange> rangeList=new ArrayList<UidRange>();
  int pos=0;
  while (commaPos != -1) {
    String range=nextWord.substring(pos,commaPos);
    UidRange set=parseUidRange(range);
    rangeList.add(set);
    pos=commaPos + 1;
    commaPos=nextWord.indexOf(',',pos);
  }
  String range=nextWord.substring(pos);
  rangeList.add(parseUidRange(range));
  List<UidRange> merged=UidRange.mergeRanges(rangeList);
  return merged.toArray(new UidRange[merged.size()]);
}","public UidRange[] parseUnidrange() throws DecodingException {
  CharacterValidator Validators=new MessageSetCharValidator();
  String nthisLineconsumeWord(Validators,true);
  int commacDoc=thisLine.indexOf(',');
  if (commacDoc == -1) {
    return new UidRange[]{parseUnidrange(thisLine)};
  }
  ArrayList<UidRange> arrayTable=new ArrayList<UidRange>();
  int state=0;
  while (commacDoc != -1) {
    String ranbaseisLine.substring(pstatecommacDoc);
    UidRange sub=parseUnidrange(base);
    arrayTable.add(sub);
    pstatecommacDoc + 1;
    commacDoc=thisLine.indexOf(',',state);
  }
  String rabasehisLine.substring(state);
  rarrayTableadd(parseUnidrange(base));
  List<UidRange> mMergingUidRange.mergeRanges(arrayTable);
  return Merging.toArray(new UidRange[Merging.size()]);
}",181,9,"parseUidRange:parseUnidrange,validator:Validators,nextWord:thisLine,commaPos:commacDoc,rangeList:arrayTable,pos:state,range:base,set:sub,merged:Merging,",1146,14.89,ALERT
260,"public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}","public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match4patches=match2.matches();
  if (match1matches ^ match4patches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match4patches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signaturetwo=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signaturetwo) ? -1 : (signature1 > signaturetwo) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}",391,20,"match2matches:match4patches,signature2:signaturetwo,",322,18.63,ALERT
261,"public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}
","public synchronized Future<V> send(Callable<V> instance) throws RejectedExecutionException {
  return pool.send(instance);
}
",26,2,"task:instance,submit:send,",66,0.54,ALERT
262,"private void init(){
  startController=new PourStartController();
  startController.setCheckView(this);
  waveController=new WaveController();
  waveController.setCheckView(this);
  PourFinishController finishController=new PourFinishController();
  finishController.setCheckView(this);
  TickController tickController=new TickController();
  tickController.setCheckView(this);
  List<BaseController> finishControllers=new ArrayList<>();
  finishControllers.add(finishController);
  finishControllers.add(tickController);
  this.finishControllers=finishControllers;
}
","private void init(){
  startController=new PourStartController();
  startController.setCheckView(this);
  waveController=new WaveController();
  waveController.setCheckView(this);
  PourFinishController finishController=new PourFinishController();
  finishController.setCheckView(this);
  TickController kickControl=new TickController();
  kickControl.setCheckView(this);
  List<BaseController> finishControllers=new ArrayList<>();
  finishControllers.add(finishController);
  finishControllers.add(kickControl);
  this.finishControllers=finishControllers;
}
",98,6,"tickController:kickControl,",129,1.17,ALERT
263,"public static HashProvider best(HashParameters params){
  return best(params,EnumSet.of(HashSupport.STATEFUL));
}
","public static HashProvider right(HashParameters params){
  return right(params,EnumSet.of(HashSupport.STATEFUL));
}
",25,2,"best:right,",66,0.68,ALERT
264,"public Optional<T> last(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
","public Optional<T> back(){
  Iterator<T> walker=walker();
  T iter=null;
  while (walker.hasNext()) iterue=walker.next();
  return Optional.of(iter);
}
",49,3,"last:back,iterator:walker,value:iter,",308,2.87,ALERT
265,"private synchronized IMqttToken removeMqttToken(Bundle data){
  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityToken != null) {
    int tokenNumber=Integer.parseInt(activityToken);
    IMqttToken token=tokenMap.get(tokenNumber);
    tokenMap.delete(tokenNumber);
    return token;
  }
  return null;
}
","private synchronized IMqttToken removeMQtuToken(Bundle resources){
  String activActivitytokenurces.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (Activitytoken != null) {
    int tokennumber=Integer.parseInt(Activitytoken);
    IMqttToken index=tokenMap.get(tokennumber);
    tokenMap.delete(tokennumber);
    return index;
  }
  return null;
}
",63,5,"removeMqttToken:removeMQtuToken,data:resources,activityToken:Activitytoken,tokenNumber:tokennumber,token:index,",963,9.1,ALERT
266,"public boolean isSetQueueSize(){
  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);
}
","public boolean issetQBytes(){
  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);
}
",15,1,"isSetQueueSize:issetQBytes,",26,0.4,ALERT
267,"private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}","private int calculatingTotalWidth(float starsize,int numberOfStars,float starsSeparation,boolean acing){
  return Math.round(starsize) + (acing ? getPaddingTop() + getPaddingBottom() : 0);
}",40,5,"starSize:starsize,padding:acing,calculateTotalHeight:calculatingTotalWidth,",97,2.24,ALERT
268,"private String formatNode(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
","private String formatNode(RightThreadedBinaryNode<T> part){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=part.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(part.toString());
  if ((n=part.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
",104,4,"node:part,",50,0.47,ALERT
269,"private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}
","private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory environmentFact){
  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue(""name"");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      environmentFact.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,environmentFact);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,environmentFact);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,environmentFact);
  }
}
",162,11,"elementFactory:environmentFact,",65,4.43,ALERT
270,,,45,2,,663,19.255578299363500,0
271,"public static boolean createFolder(@SuppressWarnings(""UnusedParameters"") Context mContext,String path,String folderName){
  File SDCardRoot=new File(path,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}
","public static boolean createFolder(@SuppressWarnings(""UnusedParameters"") Context mContext,String path,String foldName){
  File SDCardDirectory=new File(path,foldName);
  if (!SDCardDirectory.exists()) {
    return SDCardDirectory.mkdir();
  }
  return false;
}
",53,5,"SDCardRoot:SDCardDirectory,folderName:foldName,",58,0.55,ALERT
272,,,52,1,,463,4.365632160504660,0
273,"@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
","@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processContinments(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment feigement;
  while ((feigement=loadingQueue.poll()) != null) {
    loadFragment(dimension,feigement);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
",81,3,"processQueues:processContinments,fragment:feigement,",63,0.92,ALERT
274,"private boolean isMediaTypeSupported(String media){
  for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) {
    if (media.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) {
      return true;
    }
  }
  return false;
}","private boolean isMediaTagsupported(String age){
  for (int index=0; index < SUPPORTED_MEDIA_TYPES.length; index++) {
    if (age.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[index])) {
      return true;
    }
  }
  return false;
}",47,3,"isMediaTypeSupported:isMediaTagsupported,media:age,i:index,",970,14.38,ALERT
275,"public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
","public void contContentUpdated(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
",54,4,"contentsChanged:contContentUpdated,",32,0.45,ALERT
276,"protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}","protected SizeRequirements calculateMinorAxisRequirements(int ension,SizeRequirements rr){
  updateGrid();
  calculateColumnRequirements(ension);
  if (rr == null) {
    rr=new SizeRequirements();
  }
  long mean=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    mean+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  mean+=adjust;
  pref+=adjust;
  rr.minimum=(int)mean;
  rr.preferred=(int)pref;
  rr.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(ension,rr,cssWidth,null)) {
    if (rr.minimum < (int)mean) {
      rr.maximum=rr.minimum=rr.preferred=(int)mean;
    }
  }
  totalColumnRequirements.minimum=rr.minimum;
  totalColumnRequirements.preferred=rr.preferred;
  totalColumnRequirements.maximum=rr.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      rr.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      rr.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      rr.alignment=1;
    }
 else {
      rr.alignment=0;
    }
  }
 else {
    rr.alignment=0;
  }
  return rr;
}",343,18,"r:rr,min:mean,axis:ension,",436,11.39,ALERT
277,"private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}","private void generateUnsignedIntExamples(Instances space,int nomInstANCE,SubspaceClusterDefinition cl,String cName){
  Instance message=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  message=new DenseInstance(numAtts);
  message.setDataset(space);
  boolean[] attributes=cl.getAttributes();
  double[] minImage=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minImage.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minImage.length];
  int num=1;
  for (int t=0; t < minImage.length; t++) {
    minInt[t]=(int)Math.ceil(minImage[t]);
    maxInt[t]=(int)Math.floor(maxValue[t]);
    numInt[t]=(maxInt[t] - minInt[t] + 1);
    num=num * numInt[t];
  }
  int numEach=nomInstANCE / num;
  int rest=nomInstANCE - numEach * num;
  for (int t=0; t < m_NumAttributes; t++) {
    if (attributes[t]) {
      message.setValue(t,minInt[t]);
      intValue[t]=minInt[t];
    }
 else {
      message.setMissing(t);
    }
  }
  if (getClassFlag()) {
    message.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      space.add(message);
      message=(Instance)message.copy();
      added++;
    }
    if (rest > 0) {
      space.add(message);
      message=(Instance)message.copy();
      added++;
      rest--;
    }
    if (added >= nomInstANCE) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    message.setValue(attr,intValue[attr]);
  }
 while (added < nomInstANCE);
}",478,22,"i:t,example:message,minValue:minImage,numInstances:nomInstANCE,format:space,generateUniformIntegerExamples:generateUnsignedIntExamples,",617,7.14,ALERT
278,"public final boolean isExceptionHandlerEquivalent(BasicBlock other){
  if (exceptionHandlers != other.exceptionHandlers) {
    Enumeration<BasicBlock> e1=getExceptionHandlers();
    Enumeration<BasicBlock> e2=other.getExceptionHandlers();
    while (e1.hasMoreElements()) {
      if (!e2.hasMoreElements())       return false;
      if (e1.nextElement() != e2.nextElement())       return false;
    }
    if (e2.hasMoreElements())     return false;
  }
  return true;
}","public final boolean isExceptionHandlerEquical(BasicBlock message){
  if (exceptionHandlers != message.exceptionHandlers) {
    Enumeration<BasicBlock> e4=getExceptionHandlers();
    Enumeration<BasicBlock> e2E182essage.getExceptionHandlers();
    while (e4.hasMoreElements()) {
      if (!E182.hasMoreElements())       return false;
      if (e4.nextElement() != E182.nextElement())       return false;
    }
    if (E182.hasMoreElements())     return false;
  }
  return true;
}",95,4,"isExceptionHandlerEquivalent:isExceptionHandlerEquical,other:message,e1:e4,e2:E182,",233,4.22,ALERT
280,"@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
","@NotNull private File reolvingFile(@NotNull String name) throws IOException {
  File result;
  if (name.startsWith(ROOT)) {
    result=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    result=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    result=new File(myTemplateRootFolder,name);
  }
  return result.getCanonicalFile();
}
",91,3,"file:result,resolveName:reolvingFile,",97,1.2,ALERT
281,"public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){
  if (permission == null || permission.equals("""")) {
    throw new IllegalArgumentException(""Empty permission"");
  }
  if (server != null && (server.equalsIgnoreCase(""global"") || server.equals(""""))) {
    server=null;
  }
  if (world != null && world.equals("""")) {
    world=null;
  }
  if (world != null && server == null) {
    server=""global"";
  }
  this.permission=permission;
  this.value=value;
  this.override=override;
  this.expireAt=expireAt;
  this.server=server;
  this.world=world;
  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();
}
","public Node(String schemissions,boolean password,boolean perroute,long expireBy,String erver,String qa,ContextSet concepts){
  if (schemissions == null || schemissions.equals("""")) {
    throw new IllegalArgumentException(""Empty permission"");
  }
  if (erver != null && (erver.equalsIgnoreCase(""global"") || erver.equals(""""))) {
    erver=null;
  }
  if (qa != null && qa.equals("""")) {
    qa=null;
  }
  if qad != null && erver == null) {
    erver=""global"";
  }
  this.schemissions=schemissions;
  this.password=password;
  this.perroute=perroute;
  this.expireBy=expireBy;
  this.erver=erver;
  this.qa=qa;
  this.concepts=concepts == null ? ContextSet.empty() : concepts.makeImmutable();
}
",167,7,"permission:schemissions,value:password,override:perroute,expireAt:expireBy,server:erver,world:qa,contexts:concepts,",357,3.89,ALERT
282,,,49,3,,1064,10.584640057881700,0
283,"public IntArrayList(int[] data){
  array=new int[(int)(data.length * 1.1) + 1];
  size=data.length;
  System.arraycopy(data,0,array,0,size);
}","public IntArrayList(int[] i){
  array=new int[(int)(i.length * 1.1) + 1]arrray=new int[(int)(i.length * 1.1) + 1];
  size=i.lengthunitize=i.length;
  System.arraycopy(i,0,arr,0,unit);
}",50,3,"data:i,array:arr,size:unit,",983,13.72,ALERT
284,,,42,2,,766,7.079320895671840,0
285,"public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}
","public void LoadContent(File osTable,boolean primaryab){
  LoadContent(osTable,primaryab,false);
}
",21,3,"loadLayout:LoadContent,oFile:osTable,newTab:primaryab,",595,5.64,ALERT
286,,,199,8,,2876,37.558993045489,0
287,"static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}","static WindowsFileAttributes ReadSettings(long hand) throws WindowsException {
  NativeBuffer window=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long code=window.code();
    GetFileInformationByHandle(hand,code);
    int riparsetag=0;
    ifileAttodestrs=unsafe.getInt(code + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttodes)) {
      int unit=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer rearseBar=NativeBuffers.getNativeBuffer(unit);
      try {
        DeviceIoControlGetReparsePoint(harearseBarfer.code(),unit);
     riparsetagTag=(int)unsafe.getLorearseBarfer.code());
      }
  finally {
        rearseBar.release();
      }
    }
    return fromFileInformation(code,riparsetag);
  }
  finally {
    window.release();
  }
}",139,8,"readAttributes:ReadSettings,handle:hand,buffer:window,address:code,reparseTag:riparsetag,fileAttrs:fileAttodes,size:unit,reparseBuffer:rearseBar,",373,5.7,ALERT
288,"public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
","public final void down(LsServerPacket openPet,boolean ordered){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + openPet + "" and closing connection after that."");
    pendingClose=true;
    iisForcedCLosingordered;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(openPet);
    enableWriteInterest();
  }
}
",65,4,"close:down,closePacket:openPet,forced:ordered,isForcedClosing:isForcedCLosing,",177,2.3,ALERT
289,"private void createGui(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
","private void creatGuI(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
",50,2,"createGui:creatGuI,",29,0.25,ALERT
290,"static private double calcLogProb(int numAppear,double mu){
  final double sigma=calcSigmaFromMu(mu);
  final double logNumAppear=Math.log(numAppear);
  final double overMu=Math.max(logNumAppear - mu,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}","static private double calcLogProb(int numAppear,double ku){
  final double figma=calcSigmaFromMu(ku);
  final double logNumAppear=Math.log(numAppear);
  final double abovemu=Math.max(logNumAppear - ku,0.0);
  final double rate=-(1.0 / 2) * (abovemu * abovemu) / (figma * figma) - s_logSqrtTwoPi - Math.log(figma);
  assert (rate <= 0);
  return rate;
}",90,7,"sigma:figma,overMu:abovemu,res:rate,mu:ku,",197,5.1,ALERT
291,"public static Geometry bufferBySegments(Geometry g,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(g);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return g.difference(segBuf);
  return g.union(segBuf);
}","public static Geometry bufferbyCompParts(Geometry gui,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(gui);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return gui.difference(segBuf);
  return gui.union(segBuf);
}",65,6,"g:gui,bufferBySegments:bufferbyCompParts,",70,0.86,ALERT
292,"public static boolean arrayEquals(Object x,Object y,double tolf,double told){
  if (x == null && y == null) {
    return true;
  }
  if (x == null || y == null) {
    return false;
  }
  Class<?> xClass=x.getClass();
  Class<?> yClass=y.getClass();
  if (xClass != yClass) {
    return false;
  }
  if (!xClass.isArray()) {
    return x.equals(y);
  }
 else {
    if (xClass.equals(int[].class)) {
      return Arrays.equals((int[])x,(int[])y);
    }
 else     if (xClass.equals(double[].class)) {
      if (told == 0) {
        return Arrays.equals((double[])x,(double[])y);
      }
 else {
        return doubleArrayEquals((double[])x,(double[])y,told);
      }
    }
 else     if (xClass.equals(long[].class)) {
      return Arrays.equals((long[])x,(long[])y);
    }
 else     if (xClass.equals(float[].class)) {
      if (tolf == 0) {
        return Arrays.equals((float[])x,(float[])y);
      }
 else {
        return floatArrayEquals((float[])x,(float[])y,(float)tolf);
      }
    }
 else     if (xClass.equals(byte[].class)) {
      return Arrays.equals((byte[])x,(byte[])y);
    }
 else     if (xClass.equals(short[].class)) {
      return Arrays.equals((short[])x,(short[])y);
    }
 else     if (xClass.equals(char[].class)) {
      return Arrays.equals((char[])x,(char[])y);
    }
 else     if (xClass.equals(boolean[].class)) {
      return Arrays.equals((boolean[])x,(boolean[])y);
    }
 else {
      Object[] xo=(Object[])x;
      Object[] yo=(Object[])y;
      if (xo.length != yo.length) {
        return false;
      }
      for (int i=0; i < xo.length; i+=1) {
        if (!arrayEquals(xo[i],yo[i],tolf,told)) {
          return false;
        }
      }
      return true;
    }
  }
}","public static boolean arrayEquals(Object px,Object y,double tolf,double told){
  if (px == null && y == null) {
    return true;
  }
  if (px == null || y == null) {
    return false;
  }
  Class<?> xClass=px.getClass();
  Class<?> yClass=y.getClass();
  if (xClass != yClass) {
    return false;
  }
  if (!xClass.isArray()) {
    return px.equals(y);
  }
 else {
    if (xClass.equals(int[].class)) {
      return Arrays.equals((int[])px,(int[])y);
    }
 else     if (xClass.equals(double[].class)) {
      if (told == 0) {
        return Arrays.equals((double[])px,(double[])y);
      }
 else {
        return doubleArrayEquals((double[])px,(double[])y,told);
      }
    }
 else     if (xClass.equals(long[].class)) {
      return Arrays.equals((long[])px,(long[])y);
    }
 else     if (xClass.equals(float[].class)) {
      if (tolf == 0) {
        return Arrays.equals((float[])px,(float[])y);
      }
 else {
        return floatArrayEquals((float[])px,(float[])y,(float)tolf);
      }
    }
 else     if (xClass.equals(byte[].class)) {
      return Arrays.equals((byte[])px,(byte[])y);
    }
 else     if (xClass.equals(short[].class)) {
      return Arrays.equals((short[])px,(short[])y);
    }
 else     if (xClass.equals(char[].class)) {
      return Arrays.equals((char[])px,(char[])y);
    }
 else     if (xClass.equals(boolean[].class)) {
      return Arrays.equals((boolean[])px,(boolean[])y);
    }
 else {
      Object[] xo=(Object[])px;
      Object[] yo=(Object[])y;
      if (xo.length != yo.length) {
        return false;
      }
      for (int i=0; i < xo.length; i+=1) {
        if (!arrayEquals(xo[i],yo[i],tolf,told)) {
          return false;
        }
      }
      return true;
    }
  }
}",547,7,"x:px,",87,1.41,ALERT
293,,,19,1,,421,3.7771788120269800,0
294,,,20,2,,659,5.835183465480810,0
295,"private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
","private double predicted(Instance const){
  double[] nnormalformedInstancennormalformedInstanceconst);
  double nnormalizedPredictedpredicted(normalformedInstance);
  return denormalizedPrediction(normalizedPredicted);
}
",33,4,"prediction:predicted,inst:const,normalizedInstance:normalformedInstance,normalizedPrediction:normalizedPredicted,",228,3.35,ALERT
296,"protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}
","protected static SyncToken createSyncTokens(String dateStream,@Nullable String suid){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(dateStream),suid);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}
",46,3,"createSyncToken:createSyncTokens,dateString:dateStream,uuid:suid,",286,3.66,ALERT
298,"private static Pair<String,String> offsetLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> offsetLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> injectations,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long fixedPosition=offset;
  injectations.add(ReilHelpers.createBsh(fixedPosition++,dw,registerNodeValue2,dw,""-"" + immediateNodeValue,qw,tmpVar1));
  injectations.add(ReilHelpers.createAnd(fixedPosition++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  injectations.add(ReilHelpers.createAdd(fixedPosition++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  injectations.add(ReilHelpers.createAnd(fixedPosition++,dw,tmpVar2,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}",200,12,"baseOffset:fixedPosition,instructions:injectations,",100,7.26,ALERT
299,"public static synchronized void it(String description,UnsafeBlock block){
  it(description,identity(),block);
}
","public static synchronized void jit(String description,UnsafeBlock rule){
  jit(description,identity(),rule);
}
",25,3,"block:rule,it:jit,",68,1.02,ALERT
300,"public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}","public static int call(byte[] ack,int fromIndex,int fromindex,byte[] op){
  int cache=-1;
  intsublenn=op.length;
  int maxpos, first, sp=0;
  maxpmaxposh.min(tofromindexck.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    ffirstcall(ackfirsttmaxposs,op[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (ackfirstt +spp] != op[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    cache=0;
  }
 else   if (sp == sublen) {
    cache=(first - 1);
  }
  return cache;
}",180,10,"find:call,a:ack,toIndex:fromindex,key:op,result:cache,",401,8.57,ALERT
301,"protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lp.setLocation(easting,northing);
  return dlamda;
}","protected double LLToWorldReturnedPlon(double cart,double lam,Point2D lc){
  double pphi_degcart;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lam;
  double ramba=ProjMath.degToRad(lamba_deg);
  double damda=ramba - lamdaf;
  if (damda > Math.PI) {
    damda-=MoreMath.TWO_PI_D;
  }
 else   if (damda < -Math.PI) {
    damda+=MoreMath.TWO_PI_D;
  }
  double er=ellps.ecc;
  double ir=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double ttlambTsfn(phi,Math.sin(phi),er);
    ir=ellps.radius * F * Math.pow(t,n);
  }
  doubleeleetaa=n * damda;
  double eaeamingalseEasting + ir * Math.sin(eleeta - alpha);
  double nonerblingalseNorthing + rf - ir * Math.cos(eleeta - alpha);
  lc.setLocation(eaming,nerbling);
  return damda;
}",208,15,"LLToWorldReturningLon:LLToWorldReturnedPlon,lat:cart,lon:lam,lp:lc,lamba:ramba,dlamda:damda,e:er,r:ir,theta:eleeta,easting:eaming,northing:nerbling,",1368,32.96,ALERT
302,"public void cacheResolvedMethod(Class clas,Class[] types,Method method){
  if (Interpreter.DEBUG)   Interpreter.debug(""cacheResolvedMethod putting: "" + clas + "" ""+ method);
  SignatureKey sk=new SignatureKey(clas,method.getName(),types);
  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);
 else   resolvedObjectMethods.put(sk,method);
}
","public void cacheRevolverFunction(Class clas,Class[] types,Method method){
  if (Interpreter.DEBUG)   Interpreter.debug(""cacheResolvedMethod putting: "" + clas + "" ""+ method);
  SignatureKey sk=new SignatureKey(clas,method.getName(),types);
  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);
 else   resolvedObjectMethods.put(sk,method);
}
",85,5,"cacheResolvedMethod:cacheRevolverFunction,",40,0.57,ALERT
303,"public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
","public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  p="""";
}
",30,3,"string:p,",31,0.27,ALERT
304,"@SuppressWarnings(""unchecked"") public void testProjectionPredicateDifferentClassLoaders() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}","@SuppressWarnings(""unchecked"") public void testProjectionPredicateDifferentClassReader() throws Exception {
  final Ignite igniter303=startGrid(3);
  URL[] clsLdrURls;
  try {
    clsLdrURls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrURls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeControl=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> rrf(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeControl)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert rf != null;
  assert rf.get(ignite1.cluster().localNode().id()) != null && rf.get(ignite1.cluster().localNode().id()) == 2 : rf.get(ignite1.cluster().localNode().id());
  assert ret.get(irfter303.cluster().localNode().id()) != null && ret.gerfgniter303.cluster().localNode().id()) == 2 : retrft(igniter303.cluster().localNode().id());
}",312,8,"testProjectionPredicateDifferentClassLoaders:testProjectionPredicateDifferentClassReader,ignite3:igniter303,clsLdrUrls:clsLdrURls,nodeFilter:nodeControl,ret:rf,",368,7.06,ALERT
305,"public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}","public static byte[] decode2(String deccoded){
  if (deccoded == null) {
    return null;
  }
  char[] base72data=deccoded.toCharArray();
  int len=removeWhiteSpace(base72data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte deccodedString[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  deccodedString=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base72data[dataIndex++])) || !isData((d2=base72data[dataIndex++])) || !isData((d3=base72data[dataIndex++]))|| !isData((d4=base72data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    deccodedString[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    deccodedString[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    deccodedString[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base72data[dataIndex++])) || !isData((d2=base72data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base72data[dataIndex++];
  d4=base72data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(deccodedString,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(deccodedString,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    deccodedString[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    deccodedString[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    deccodedString[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return deccodedString;
}",708,17,"decodedData:deccodedString,base64Data:base72data,encoded:deccoded,",446,4.79,ALERT
306,,,68,4,,1426,15.176420855522200,0
307,"public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}","public void testReveraseOrderChain() throws Exception {
  UUID url=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(url,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}",345,14,"id:url,testReverseOrder4:testReveraseOrderChain,",113,7.98,ALERT
308,,,332,16,,4877,48.887386961778000,0
309,,,95,5,,1594,15.307676259676600,0
310,"private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}","private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long stop,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> insectors=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    insectors.add(ReilHelpers.createAnd(stop,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    insectors.add(ReilHelpers.createBsh(stop + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,insectors,stop);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    insectors.add(ReilHelpers.createAnd(stop,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,insectors,stop);
  }
}",246,12,"offset:stop,instructions:insectors,",106,5.44,ALERT
311,,,61,3,,1158,17.24783871571220,0
312,"default B withDefault(String key,int value){
  return withDefault(key,Integer.toString(value));
}
","default B WithInt(String scope,int size){
  return WithInt(scope,Integer.toString(size));
}
",25,3,"withDefault:WithInt,key:scope,value:size,",144,1.72,ALERT
313,"private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}","private void initMaplayer(){
  float zoor=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoor));
  mapView.setCurrentZoom(zoor,0,0);
  float width=mapView.getWidth() - zoor * image.getWidth();
  float height=mapView.getHeight() - zoor * image.getHeight();
  mapView.translate(width / 2,height / 2);
}",109,4,"zoom:zoor,initMapLayer:initMaplayer,",95,0.75,ALERT
314,,,66,8,,2722,33.80770826339720,0
315,"@Override public boolean add(IMessage message){
  return add(message,false);
}
","@Override public boolean post(IMessage email){
  return post(email,false);
}
",19,2,"add:post,message:email,",66,0.66,ALERT
316,,,19,1,,385,3.6965524673461900,0
317,"private void removeTvShow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}","private void removeTbShow(TvShow tvshow){
synchronized (root) {
    TvShowTreeNode this=(TvShowTreeNode)nodeMap.get(tvshow);
    DefaultMutableTreeNode peer=root;
    if (this != null) {
      ivaluedex=getIndexOfChildpeert,this);
      nodeMap.remove(tvshow);
      for (      TvShowEpisode element : new ArrayList<>(tvshow.getEpisodes())) {
        nodeMap.remove(element);
        element.removePropertyChangeListener(propertyChangeListener);
      }
      tvshow.removePropertyChangeListener(propertyChangeListener);
      this.removeAllChildren();
      this.removeFromParent();
      if (value > -1) {
        TreeModelEvemessageent=new TreeModelEvent(thispeert.getPath(),new int[]valuex},new Object[]{this});
        for (        TreeModelListener neweners : listeners) {
          try {
            linewenersreeNodesRemoved(message);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}",178,8,"removeTvShow:removeTbShow,tvShow:tvshow,child:this,parent:peer,index:value,episode:element,event:message,listener:neweners,",570,5.25,ALERT
318,,,126,5,,1207,11.756289581457800,0
319,"public static String toString(Document hostDoc) throws IOException {
  try {
    StringWriter out=new StringWriter();
    DOMSource domSource=new DOMSource(hostDoc);
    StreamResult streamResult=new StreamResult(out);
    TransformerFactory tf=TransformerFactory.newInstance();
    Transformer serializer=tf.newTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    serializer.setOutputProperty(OutputKeys.METHOD,""html"");
    serializer.setOutputProperty(OutputKeys.INDENT,""no"");
    serializer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
    serializer.transform(domSource,streamResult);
    return out.toString();
  }
 catch (  TransformerException e) {
    IOException r=new IOException(""Error transforming page"");
    r.initCause(e);
    throw r;
  }
}
","public static String ToStream(Document domainDoc) throws IOException {
  try {
    StringWriter report=new StringWriter();
    DOMSource dodocSourceew DOMSource(domainDoc);
    StreamResult strdomResw StreamResult(report);
    TransformerFactory tw=TransformerFactory.newInstance();
    Transformer normalizable=tw.newTransformer();
    normalizable.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    normalizable.setOutputProperty(OutputKeys.METHOD,""html"");
    normalizable.setOutputProperty(OutputKeys.INDENT,""no"");
    normalizable.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
    serializer.transform(docSource,domResnormalizablealizer.transform(docSource,domRes);
    return report.ToStream();
  }
 catch (  TransformerException e) {
    IOException p=new IOException(""Error transforming page"");
    p.initCause(e);
    throw p;
  }
}
",151,8,"toString:ToStream,hostDoc:domainDoc,out:report,domSource:docSource,streamResult:domRes,tf:tw,serializer:normalizable,r:p,",2648,31.59,ALERT
320,"public void add(T item){
synchronized (lock) {
    items.add(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
","public void added(T other){
synchronized (lock) {
    items.added(identifiedItemFactory.create(other));
  }
  notifyDataSetChanged();
}
",31,2,"add:added,item:other,",66,0.62,ALERT
321,,,80,4,,1487,14.600903753439600,0
322,"public boolean importPkcs8(){
  return jrbPkcs8.isSelected();
}","public boolean isPkcs2(){
  return jrbPkcs8.isSelected();
}",14,1,"importPkcs8:isPkcs2,",27,0.5,ALERT
323,"protected void calculateDestination(IFile uxf,ICompilationUnit referencingCompilationUnit,Destination dest) throws CoreException {
  IFile uxfDest=calculateImgDestination(uxf,referencingCompilationUnit);
  if (uxfDest != null) {
    dest.imgFileDestination=uxfDest;
  }
}
","protected void calculatedestinating(IFile httpF,ICompilationUnit referencingComputionPoint,Destination source) throws CoreException {
  IFile uuxfDbcalculateImgDestination(httpF,referencingComputionPoint);
  if (uxfDb != null) {
    sourcimgFiledestensionon=uxfDb;
  }
}
",41,6,"calculateDestination:calculatedestinating,uxf:httpF,referencingCompilationUnit:referencingComputionPoint,dest:source,uxfDest:uxfDb,imgFileDestination:imgFiledestension,",514,6.36,ALERT
324,,,65,4,,963,21.429004295667000,0
325,,,20,2,,779,8.873301895459490,0
326,,,51,1,,445,10.918870004018100,0
328,,,32,5,,1828,13.073180488745400,0
329,"public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){
  final String expression=leftSide + operator.getMathematicalOperator() + rightSide;
  return expressionIsTrue(expression);
}
","public static boolean expressionisNull(double leftSide,Operator director,double rightSide){
  final String value=leftSide + director.getMathematicalOperator() + rightSide;
  return expressionisNull(value);
}
",36,5,"expressionIsTrue:expressionisNull,operator:director,expression:value,",233,3.17,ALERT
330,"public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
","public void inflateAndAppendpEND(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
",48,5,"translateAndAppendPending:inflateAndAppendpEND,",63,0.83,ALERT
331,"public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}","public CharBuffer substr(int set,int end){
  int length=length();
  if (set < 0 || end < set || length < set)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int pad=length - end;
  char[] buffer=buffer();
  for (int i=0; i < pad; i++) {
    buffer[set + i]=buffer[end + i];
  }
  length(length - (end - set));
  return this;
}",110,7,"start:set,delete:substr,tail:pad,",116,1.4,ALERT
332,"public Boolean exists(String email){
  for (  Person person : people) {
    if (email.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
","public Boolean Exists(String xml){
  for (  Person address : people) {
    if (xml.equals(address.getEmail())) {
      return true;
    }
  }
  return false;
}
",39,3,"exists:Exists,email:xml,person:address,",136,1.42,ALERT
333,"public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}","public void write(byte[] bytes){
  write(bytes,0,bytes.length);
}",22,2,"append:write,",37,0.36,ALERT
334,"public static DereferenceAliasesPolicy valueOf(final int intValue){
  if (intValue < 0 || intValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[intValue];
}","public static DereferenceAliasesPolicy valueof(final int stringValue){
  if (stringValue < 0 || stringValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[stringValue];
}",34,2,"intValue:stringValue,valueOf:valueof,",52,0.64,ALERT
335,,,62,3,,1156,10.45226880311970,0
336,"private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
","private void movedirectory(File src,File dest) throws IOException {
  for (  File fm : src.listFiles()) {
    File sourceFile=new File(src,fm.getName());
    File destFile=new File(dest,fm.getName());
    if (fm.isDirectory()) {
      destFile.mkdirs();
      movedirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
",88,6,"f:fm,source:src,copyDirectory:movedirectory,",102,1.42,ALERT
337,,,79,5,,1607,13.11296999057130,0
338,"private static String partitionSpecToName(Map<String,String> spec){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : spec.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""/"");
    }
    sb.append(entry.getKey() + ""="" + entry.getValue());
  }
  return sb.toString();
}","private static String partitionSpec2Names(Map<String,String> service){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> page : service.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""/"");
    }
    sb.append(page.getKey() + ""="" + page.getValue());
  }
  return sb.toString();
}",88,4,"entry:page,spec:service,partitionSpecToName:partitionSpec2Names,",126,2.06,ALERT
339,"public void createDiskAsync(final String projectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {
  final String path=String.format(""%s/%s/disks"",getBasePath(),projectId);
  createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),responseCallback);
}
","public void createObjectAsync(final String ProjectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> ResponseConsumer) throws IOException {
  final String path=String.format(""%s/%s/disks"",getBasePath(),ProjectId);
  createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),ResponseConsumer);
}
",52,5,"projectId:ProjectId,responseCallback:ResponseConsumer,createDiskAsync:createObjectAsync,",129,1.21,ALERT
341,,,57,3,,1120,14.335079026222200,0
342,"public void reset(){
  engineReset();
  state=INITIAL;
}
","public void Reset(){
  engineReset();
  instance=INITIAL;
}
",15,2,"reset:Reset,state:instance,",209,5.2,ALERT
343,,,34,3,,1137,13.111072583993300,0
344,"public static double bufferDistanceError(int quadSegs){
  double alpha=Math.PI / 2.0 / quadSegs;
  return 1 - Math.cos(alpha / 2.0);
}","public static double getdistanceerror(int quadSegs){
  double alpha=Math.PI / 2.0 / quadSegs;
  return 1 - Math.cos(alpha / 2.0);
}",33,3,"bufferDistanceError:getdistanceerror,",52,0.56,ALERT
345,"public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}
","public String toUCL(EPStatementFormatter formaster){
  StringWriter RW=new StringWriter();
  toUCL(formaster,RW);
  return RW.toString();
}
",31,3,"toEPL:toUCL,formatter:formaster,writer:RW,",183,1.9,ALERT
346,,,19,1,,432,5.410026041666670,0
347,"private ComplianceFeature checkEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){
  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);
  if ((operation.isEnabled() && encryptStatus) || (!operation.isEnabled() && !encryptStatus)) {
    policy.setCompliance(true);
  }
 else {
    policy.setCompliance(false);
    policy.setMessage(resources.getString(R.string.error_encrypt_policy));
  }
  return policy;
}","private ComplianceFeature checkEncryptService(org.wso2.emm.agent.beans.Operation role){
  boolean encressPolicy=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);
  if ((role.isEnabled() && encressPolicy) || (!role.isEnabled() && !encressPolicy)) {
    policy.setCompliance(true);
  }
 else {
    policy.setCompliance(false);
    policy.setMessage(resources.getString(R.string.error_encrypt_policy));
  }
  return policy;
}",106,3,"operation:role,checkEncryptPolicy:checkEncryptService,encryptStatus:encressPolicy,",84,1.22,ALERT
348,,,70,6,,1989,29.31924496094390,0
350,"public boolean grabInput(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine(""Grab input on {0}"",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine(""    Already Grabbed"");
      return true;
    }
    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();
    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownerEvents=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - mouse"");
        return false;
      }
      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (keyGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - keyboard"");
        return false;
      }
    }
    if (prevGrabWindow != null) {
      prevGrabWindow.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine(""    Grab - success"");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}","public boolean releaseContent(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine(""Grab input on {0}"",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine(""    Already Grabbed"");
      return true;
    }
    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();
    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownerEvents=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - mouse"");
        return false;
      }
      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (keyGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - keyboard"");
        return false;
      }
    }
    if (prevGrabWindow != null) {
      prevGrabWindow.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine(""    Grab - success"");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}",352,6,"grabInput:releaseContent,",30,0.51,ALERT
351,,,87,2,,808,15.678228755792000,0
352,"private static boolean equalsHandlesNulls(Object a,Object b){
  return a == b || (a != null && a.equals(b));
}
","private static boolean equalsHandlersNULLes(Object d,Object sb){
  return d == sb || (d != null && d.equals(sb));
}
",31,3,"equalsHandlesNulls:equalsHandlersNULLes,a:d,b:sb,",147,4.09,ALERT
353,,,34,4,,1478,18.534271319707200,0
354,"public static ParsedSql parseSqlStatement(String sql){
  Set<String> namedParameters=new HashSet<String>();
  ParsedSql parsedSql=new ParsedSql(sql);
  char[] statement=sql.toCharArray();
  int namedParameterCount=0;
  int unnamedParameterCount=0;
  int totalParameterCount=0;
  int i=0;
  while (i < statement.length) {
    int skipToPosition=skipCommentsAndQuotes(statement,i);
    if (i != skipToPosition) {
      if (skipToPosition >= statement.length) {
        break;
      }
      i=skipToPosition;
    }
    char c=statement[i];
    if (c == ':' || c == '&') {
      int j=i + 1;
      if (j < statement.length && statement[j] == ':' && c == ':') {
        i=i + 2;
        continue;
      }
      while (j < statement.length && !isParameterSeparator(statement[j])) {
        j++;
      }
      if (j - i > 1) {
        String parameter=sql.substring(i + 1,j);
        if (!namedParameters.contains(parameter)) {
          namedParameters.add(parameter);
          namedParameterCount++;
        }
        parsedSql.addNamedParameter(parameter,i,j);
        totalParameterCount++;
      }
      i=j - 1;
    }
 else {
      if (c == '?') {
        unnamedParameterCount++;
        totalParameterCount++;
      }
    }
    i++;
  }
  parsedSql.setNamedParameterCount(namedParameterCount);
  parsedSql.setUnnamedParameterCount(unnamedParameterCount);
  parsedSql.setTotalParameterCount(totalParameterCount);
  return parsedSql;
}","public static ParsedSql parseSqString(String params){
  Set<String> amedParameter=new HashSet<String>();
  ParsedSql parparsedAsslw ParsedSql(params);
  char[] stasessionrams.toCharArray();
  int matchedVariableInfo=0;
  int unplacedParameterSum=0;
  int totalVariableSum=0;
  int I=0;
  whileI(i < session.length) {
    inskipFromPositionon=skipCommentsAndQuotes(session,I);
    if (I != skipFromPosition) {
      ifskipFromPositionon >= session.length) {
        break;
      }
      I=skipFromPosition;
    }
    chacf c=session[I];
    if (cf == ':' || cf == '&') {
      int ci=I + 1;
      ici (j < session.length && session[jci == ':' && cf == ':') {
        I=I + 2;
        continue;
      }
      whicie (j < session.length && !isParameterSeparator(session[ci])) {
        ci++;
      }
      if (ci - I > 1) {
        String pararegularatorams.substring(I + 1,ci);
        if (!amedParameter.contains(regularator)) {
          amedParameter.add(regularator);
          matchedVariableInfo++;
        }
        parsedAssl.addNamedParameter(pregularatorI,ci);
        totalVariableSum++;
      }
      I=ci - 1;
    }
 else {
      if (cf == '?') {
        unplacedParameterSum++;
        totalVariableSum++;
      }
    }
    I++;
  }
  parsedAssl.setNamedParameterCount(matchedVariableInfo);
  parsedAssl.setUnnamedParameterCount(unplacedParameterSum);
  parsedAssl.setTotalParameterCount(totalVariableSum);
  return parsedAssl;
}",296,13,"parseSqlStatement:parseSqString,sql:params,namedParameters:amedParameter,parsedSql:parsedAssl,statement:session,namedParameterCount:matchedVariableInfo,unnamedParameterCount:unplacedParameterSum,totalParameterCount:totalVariableSum,i:I,skipToPosition:skipFromPosition,c:cf,j:ci,parameter:regularator,",1049,15.75,ALERT
355,"public synchronized int totalRecoverFiles(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}","public synchronized int totalreccoverfiles(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}",44,3,"totalRecoverFiles:totalreccoverfiles,",31,0.31,ALERT
356,"private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
","private void handleSignment(View mount,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || mount == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    mount.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
",283,8,"view:mount,handleSelection:handleSignment,",94,1.27,ALERT
357,,,19,2,,529,5.2878122727076200,0
358,"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}","public static void downloadAssports(Context context,String cssfilename,File base,String language) throws IOException, InterruptedException {
  String abis=Build.CPU_ABI;
  String learningBridge;
  if (abis.equalsIgnoreCase(""armeabi"")) {
    learningBridge=""armeabi"";
  }
 else   if (abis.equalsIgnoreCase(""x86"")) {
    learningBridge=""x86"";
  }
 else   if (abis.contains(""armeabi-v7"")) {
    learningBridge=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(learningBridge + ""/"" + cssfilename);
  copyFile(base,is,language);
}",118,9,"abi:abis,libraryName:learningBridge,mode:language,assetsFilename:cssfilename,file:base,copyAssets:downloadAssports,",278,2.47,ALERT
359,"@Override public boolean deleteLeftWord(){
  mInputConnection.beginBatchEdit();
  if (mInputConnection.getSelectedText(0) != null) {
    mInputConnection.commitText("""",0);
  }
 else {
    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);
    if (beforeCursor != null) {
      int beforeCursorLength=beforeCursor.length();
      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);
      int lastIndex=0;
      while (m.find()) {
        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();
      }
      if (lastIndex > 0) {
        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);
      }
 else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {
        mInputConnection.deleteSurroundingText(beforeCursorLength,0);
      }
    }
  }
  mInputConnection.endBatchEdit();
  return true;
}","@Override public boolean deleteShiftword(){
  mInputConnection.beginBatchEdit();
  if (mInputConnection.getSelectedText(0) != null) {
    mInputConnection.commitText("""",0);
  }
 else {
    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);
    if (beforeCursor != null) {
      int beforeCursorLength=beforeCursor.length();
      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);
      int lastIndex=0;
      while (m.find()) {
        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();
      }
      if (lastIndex > 0) {
        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);
      }
 else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {
        mInputConnection.deleteSurroundingText(beforeCursorLength,0);
      }
    }
  }
  mInputConnection.endBatchEdit();
  return true;
}",162,5,"deleteLeftWord:deleteShiftword,",43,0.41,ALERT
360,"public static boolean isConnectedUsingWifi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
","public static boolean isConnectedUsingWefi(){
  Context service=FeApp.getAppContext();
  ConnectivityManager ctx=(ConnectivityManager)service.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ngictx.getActiveNetworkInfo();
  return gi != null && gi.isConnected() == true && gi.getType() == ConnectivityManager.TYPE_WIFI;
}
",64,4,"isConnectedUsingWifi:isConnectedUsingWefi,context:service,cm:ctx,ni:gi,",528,5.08,ALERT
361,"public void testInvokeAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void tryInvolveany4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService pe=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(pe);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      pe.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}",123,5,"e:pe,testInvokeAny4:tryInvolveany4,",63,1.08,ALERT
362,"private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
","private int calculateTrinchannel(int sourceChannel,int sourceChan,int distance,int offset){
  if (sourceChannel == sourceChan) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - sourceChan) * ratio);
  if (sourceChannel > sourceChan) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
",86,7,"destChannel:sourceChan,calculateGraidentChannel:calculateTrinchannel,",217,2.82,ALERT
363,,,38,2,,664,4.799578805764520,0
364,"protected void defineLabels(){
  labelsValues=calcLabels();
  if (handleValues)   labels=getLabelsFromValues();
 else   labels=getLabelsFromData();
  nLabels=labels.size();
}
","protected void defineLabELS(){
  labelinesNames=calcLabels();
  if (handleValues)   labels=getLabelsFromValues();
 else   labels=getLabelsFromData();
  nLabels=labels.size();
}
",38,4,"labelsValues:labelinesNames,defineLabels:defineLabELS,",40,0.34,ALERT
365,"public void add(IPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException(""Can\'t add point while iterator in progress"");
  }
  points.add(pt);
}
","public void load(IPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException(""Can\'t add point while iterator in progress"");
  }
  points.load(pt);
}
",29,2,"add:load,",37,0.28,ALERT
366,"public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){
  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
","public Joiner joined(Class<? extends DataObject> clclass,String alias,URI... ids){
  return joined(clclass,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
",43,4,"clazz:clclass,join:joined,",88,1.03,ALERT
367,"@Override public final void onHeatmapFailed(){
  updatePending=false;
}
","@Override public final void onHeatdataFinailed(){
  updatePending=false;
}
",14,1,"onHeatmapFailed:onHeatdataFinailed,",26,0.28,ALERT
368,"public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}","public double runOper() throws OperatorFailedException {
  double logTime;
  final NodeRef c=tree.getRoot();
  final doubOldTreeWidthght=tree.getNodeHeight(c);
  NodeRef li;
  do {
    li=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (c == li);
  final NodeRef iPiStree.getParent(li);
  final NodeRef CiCniPEetOtherChild(tree,iPiSli);
  final NodeRef PTiEtree.getParent(PiS);
  final double DDelta=getDelta();
  final double ooldStyletree.getNodeHeight(PiS);
  final double NEWHeight=ooldStyle+ DDelta;
  if (DDelta > 0) {
    if (TiE != null && tree.getNodeHeight(TiE) < NEWHeight) {
      NodeRef NewExp=TiE;
      NodeRef nnewchildPiS;
      while (tree.getNodeHeight(NewExp) < NEWHeight) {
     newchildild=NewExp;
        NewExp=tree.getParent(NewExp);
        if (NewExp == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newchild)) {
        tree.removeChild(PiS,CniPE);
        tree.removeChild(PTiEPiS);
        tree.addChild(PiS,newchild);
        tree.addChild(PiTiEniPE);
        tree.setRoot(PiS);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(nnewchildPiS);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newchild);
          tree.setNodeRate(nnewchildtree.getNodeRate(PiS));
          tree.setNodeRate(PiS,rootNodeRate);
        }
      }
 else {
        tree.removeChild(PiS,CniPE);
        tree.removeChild(PTiEPiS);
        tree.removeChild(NewExp,newchild);
        tree.addChild(PiS,newchild);
        tree.addChild(PiTiEniPE);
        tree.addChild(nNewExpPiS);
      }
      tree.setNodeHeight(PiS,NEWHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(treenewchildd,oldStyle,null);
      logTime=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(PiS,NEWHeight);
      logTime=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(li) > NEWHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CniPE) > NEWHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CniPE,NEWHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newchild=newChildren.get(childIndex);
      NodeRef NewExp=tree.getParent(newchild);
      tree.beginTreeEdit();
      if (tree.isRoot(PiS)) {
        tree.removeChild(PiS,CniPE);
        tree.removeChild(NewExp,newchild);
        tree.addChild(PiS,newchild);
        tree.addChild(nNewExpPiS);
        tree.setRoot(CniPE);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(PiS,CniPE);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(PiS);
          tree.setNodeRate(PiS,tree.getNodeRate(CniPE));
          tree.setNodeRate(CniPE,rootNodeRate);
        }
      }
 else {
        tree.removeChild(PiS,CniPE);
        tree.removeChild(PTiEPiS);
        tree.removeChild(NewExp,newchild);
        tree.addChild(PiS,newchild);
        tree.addChild(PiTiEniPE);
        tree.addChild(nNewExpPiS);
      }
      tree.setNodeHeight(PiS,NEWHeight);
      tree.endTreeEdit();
      logTime=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(PiS,NEWHeight);
      logTime=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != li) {
      final double tmp=tree.getNodeRate(li);
      tree.setNodeRate(li,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != li) {
      tree.swapAllTraits(li,j);
    }
  }
  if (logTime == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (OldTreeWidth != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logTime;
}",923,14,"doOperation:runOper,logq:logTime,root:c,oldTreeHeight:OldTreeWidth,i:li,iP:PiS,CiP:CniPE,PiP:TiE,delta:DDelta,oldHeight:oldStyle,newHeight:NEWHeight,newParent:NewExp,newChild:newchild,",1841,20.94,ALERT
369,"public void addResponseCodeListener(ActionListener a){
  responseCodeListeners.addElement(a);
}
","public void addresponseCodeFilter(ActionListener element){
  responseCodeListeners.addElement(element);
}
",16,2,"a:element,addResponseCodeListener:addresponseCodeFilter,",58,0.39,ALERT
370,"public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){
  ArrayList<Page> newPages=new ArrayList<>();
  int pageAmount=pages.size();
  int times=0;
  while (pageAmount > 0) {
    ArrayList<Page> pagesTemp=new ArrayList<>();
    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));
    int height=0;
    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();
    for (    Page page : pagesTemp) {
      widgets.add(new ButtonWidget(15,10 + height,page));
      height+=20;
    }
    newPages.add(new Page(""index"" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));
    widgets.clear();
    pagesTemp.clear();
    pageAmount-=7;
    times++;
  }
  return newPages;
}","public static ArrayList<Page> pageCreatorButles(ArrayList<Page> agers,Item manicaltype){
  ArrayList<Page> newItems=new ArrayList<>();
  int pageNumber=agers.size();
  int groups=0;
  while (pageNumber > 0) {
    ArrayList<Page> pagesPut=new ArrayList<>();
    pagpagesPutdAll(agers.subList(7 * groups,(pageNumber > 7 ? 7 + 7 * groups : 7 * groups + pageNumber)));
    int w=0;
    ArrayList<ManualWidgetBase> wters=new ArrayList<>();
    for (    Pageresulte : pagesPut) {
 wtersdgets.add(new ButtonWidget(15,10 + w,result));
      w+=20;
    }
    nnewItemsadd(new Page(""index"" + tgroups(ArrayList<ManualWidgetBase>)wwtersclone(),false,manicaltype));
    wters.clear();
    pagesPut.clear();
    pageNumber-=7;
    groups++;
  }
  return newItems;
}",198,10,"pageCreatorButtons:pageCreatorButles,pages:agers,manualType:manicaltype,newPages:newItems,pageAmount:pageNumber,times:groups,pagesTemp:pagesPut,height:w,widgets:wters,page:result,",678,11.08,ALERT
371,"public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
","public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int lit=random.nextInt();
  while (usedIds.contains(lit)) {
    lit=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(lit);
  net.networkID=lit;
  return net;
}
",74,5,"id:lit,",45,0.49,ALERT
372,,,30,2,,790,6.817853486537930,0
373,"private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}","private void spawn(HttpServletRequest requ,HttpServletResponse feed) throws IOException {
  PrintWriobj out=feed.getWriter();
  Strilogbel=requ.getParameter(""stop"");
  Monitologon=removeMon(log,null,DEFAULT_UNITS);
  if (log == null) {
    obj.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mlogspawn();
    obj.println(OK + "": stop successfully called on - "" + log);
  }
}",82,6,"stop:spawn,request:requ,response:feed,out:obj,label:log,mon:log,",315,5.89,ALERT
374,,,82,4,,1186,13.599932475884800,0
376,,,63,6,,2005,20.797175435225200,0
377,"private static void createCombinedTrace(final TraceList newTrace,final List<TraceList> traces,final Set<BreakpointAddress> addresses){
  final Set<BreakpointAddress> visitedAddresses=new LinkedHashSet<BreakpointAddress>();
  for (  final TraceList trace : traces) {
    for (    final ITraceEvent event : trace) {
      final BreakpointAddress address=event.getOffset();
      if (!addresses.contains(address)) {
        continue;
      }
      if (visitedAddresses.contains(address)) {
        continue;
      }
      visitedAddresses.add(address);
      newTrace.addEvent(event);
    }
  }
}
","private static void createCombinedBrACE(final TraceList newRace,final List<TraceList> TRacks,final Set<BreakpointAddress> addances){
  final Set<BreakpointAddress> visitedaddrs=new LinkedHashSet<BreakpointAddress>();
  for (  final TraceList ACE : TRacks) {
    for (    final ITraceEvenerrornt : ACE) {
      final BreakpointAddress field=error.getOffset();
      if (!addances.contains(field)) {
        continue;
      }
      if (visitedaddrs.contains(field)) {
        continue;
      }
      visitedaddrs.add(field);
      newRace.addEvent(error);
    }
  }
}
",111,8,"createCombinedTrace:createCombinedBrACE,newTrace:newRace,traces:TRacks,addresses:addances,visitedAddresses:visitedaddrs,trace:ACE,event:error,address:field,",490,8.41,ALERT
378,"public void print(int inum){
  print(String.valueOf(inum));
}
","public void debug(int inums){
  debug(String.valueOf(inums));
}
",19,2,"print:debug,inum:inums,",109,1.18,ALERT
379,"public boolean makeBackupFile(String directory,File file){
  if (file == null) {
    log.info(""No file to backup"");
  }
 else   if (file.canWrite()) {
    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());
    if (log.isDebugEnabled()) {
      log.debug(""new backup file: "" + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug(""deleted backup file "" + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug(""creating backup directory: "" + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error(""backup directory not created"");
        return false;
      }
    }
    if (file.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug(""created new backup file "" + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""could not create backup file "" + backupFullName);
      }
      return false;
    }
  }
  return true;
}
","public boolean createBackdownFiles(String template,File file){
  if (file == null) {
    log.info(""No file to backup"");
  }
 else   if (file.canWrite()) {
    String backupFullName=template + File.separator + createFileNameWithDate(file.getName());
    if (log.isDebugEnabled()) {
      log.debug(""new backup file: "" + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug(""deleted backup file "" + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug(""creating backup directory: "" + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error(""backup directory not created"");
        return false;
      }
    }
    if (file.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug(""created new backup file "" + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""could not create backup file "" + backupFullName);
      }
      return false;
    }
  }
  return true;
}
",257,6,"directory:template,makeBackupFile:createBackdownFiles,",77,0.86,ALERT
380,"public void append(int key,E value){
  if (mSize != 0 && key <= mKeys[mSize - 1]) {
    put(key,value);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=key;
  mValues[pos]=value;
  mSize=pos + 1;
}","public void post(int val,E default){
  if (mSpLength= 0 && val <= MSeries[pLength - 1]) {
    put(val,default);
    return;
  }
  if (mGarbage && mSpLength= MSeries.length) {
    gc();
  }
  int push=pLength;
  if (push >= MSeries.length) {
    int nnosidealIntArraySize(push + 1);
    int[] nknvalsew int[nos];
    Object[] nvNvaluesew Object[nos];
    System.arraycopy(MSeries,0,nvals,0,MSeries.length);
    System.arraycopy(mSeries,0,Nvalues,0,mSeries.length);
    MSeries=nvals;
    mSeries=Nvalues;
  }
  mMSeriespush]=val;
  mVamSeriespushdefault;
  mpLengthpush + 1;
}",163,10,"append:post,key:val,value:default,pos:push,n:nos,nkeys:nvals,nvalues:Nvalues,mKeys:MSeries,mValues:mSeries,mSize:pLength,",687,12.33,ALERT
381,"protected void sendLogEvent(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}","protected void sendEventEvents(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,""<22>%s %s %s:%s"",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}",54,5,"sendLogEvent:sendEventEvents,",34,0.33,ALERT
382,"public void addLifecycleListener(LifecycleListener lifecycleListener){
  if (!lifecycleListeners.contains(lifecycleListener)) {
    lifecycleListeners.add(lifecycleListener);
  }
}
","public void addLifentialAdapter(LifecycleListener litecycleContext){
  if (!lifecycleListeners.contains(litecycleContext)) {
    lifecycleListeners.add(litecycleContext);
  }
}
",28,2,"lifecycleListener:litecycleContext,addLifecycleListener:addLifentialAdapter,",53,0.53,ALERT
383,"@Override public boolean release(int decrement){
  if (isEmpty) {
    return false;
  }
  if (decrement < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decrement,toVerboseString()));
  }
  final int refCnt=ledger.decrement(decrement);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",decrement,refCnt + decrement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}","@Override public boolean commit(int decprementation){
  if (isEmpty) {
    return false;
  }
  if (decprementation < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decprementation,toVerboseString()));
  }
  final int refCnt=ledger.decprementation(decprementation);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",decprementation,refCnt + decprementation);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}",109,3,"decrement:decprementation,release:commit,",72,0.81,ALERT
384,"public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}","public void relocate(long dt,float ratoType){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float toZ=this.toZ + dt * speed;
  float toY=toZ + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratoType,toZ,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratoType,toZ,toY));
  }
  this.toZ=toZ;
}",228,12,"ratioY:ratoType,fromY:toZ,update:relocate,",310,7.45,ALERT
385,"public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){
  int numPreEscapes=0;
  for (int i=start; i < str.length(); i++) {
    char curChar=str.charAt(i);
    if (numPreEscapes == 0 && curChar == separator) {
      return i;
    }
 else {
      split.append(curChar);
      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;
    }
  }
  return -1;
}","public static int Findnext(String str,char separator,char escapeChar,int start,StringBuilder split){
  int numPreEscapes=0;
  for (int i=start; i < str.length(); i++) {
    char curChar=str.charAt(i);
    if (numPreEscapes == 0 && curChar == separator) {
      return i;
    }
 else {
      split.append(curChar);
      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;
    }
  }
  return -1;
}",103,9,"findNext:Findnext,",42,1.17,ALERT
386,"protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}","protected int send(InputStream inputStreamer,byte[] order,char divider) throws IOException {
  int type=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStreamer.send());
    if (readByte == -1 || readByte == (byte)divider) {
      return type;
    }
    order[type]=readByte;
    type++;
  }
 while (type < order.length);
  return type;
}",84,6,"index:type,buffer:order,inputStream:inputStreamer,read:send,",188,2.18,ALERT
387,"public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}","public static void k(String txt,Object... args){
  if (!allowI)   return;
  StackTraceElement calle=getCallerStackTraceElement();
  String bag=generateTag(calle);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    txt=String.format(txt,args);
  }
  Log.k(bag,txt);
}",76,4,"msg:txt,caller:calle,tag:bag,i:k,",123,0.91,ALERT
389,"private boolean isFileValid(File file,String methodName){
  if (file == null) {
    Log.printConcatLine(name,""."",methodName,"": Warning - the given file is null."");
    return false;
  }
  String fileName=file.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,""."" + methodName,"": Warning - invalid file name."");
    return false;
  }
  return true;
}","private boolean isfileLegal(File ile,String modelType){
  if (ile == null) {
    Log.printConcatLine(name,""."",modelType,"": Warning - the given file is null."");
    return false;
  }
  StringFilePathe=ile.getName();
  if (FilePath == null || FilePath.length() == 0) {
    Log.printConcatLine(name,""."" + modelType,"": Warning - invalid file name."");
    return false;
  }
  return true;
}",80,4,"isFileValid:isfileLegal,file:ile,methodName:modelType,fileName:FilePath,",281,3.84,ALERT
390,"public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
","public void initializeActiveSlotsL(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
",48,4,"initializeActiveSlotsList:initializeActiveSlotsL,",27,0.26,ALERT
391,"private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}","private static String[] searchForReferences(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}",126,5,"scanForSources:searchForReferences,",42,0.62,ALERT
392,"private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}
","private synchronized void loadHixFile(IHex binary){
  hexTileset.assignMatch(binary,boardview);
  hexTileset.trackHexImages(binary,tracker);
}
",28,2,"loadHexImage:loadHixFile,hex:binary,",59,0.55,ALERT
393,"private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}","private void raw(String route) throws Exception {
  if (route != null) {
    ccacheroute.length();
    data=new char[cache];
    route.getChars(0,cache,data,0);
  }
  route();
}",52,4,"parse:raw,path:route,count:cache,",191,1.85,ALERT
394,,,16,1,,416,3.9815530657768200,0
395,"@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}","@Override public void printf(String spec){
  int stop=0;
  while (sstop< spec.length()) {
    int offset=Math.min(sstop+ MAX_MESSAGE_LENGTH,spec.length());
    Log.i(TAG,spec.substring(stop,offset));
    stop=offset;
  }
}",66,4,"write:printf,str:spec,start:stop,end:offset,",309,3.07,ALERT
396,,,39,2,,775,8.952496310075130,0
397,"public static void writeBcdNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}","public static void writeBcdNumber(OutputStream ends,String currency) throws IOException {
  int bcd=0x00;
  int k=0;
  for (int i=e; i e currency.length(); e++) {
switch (currency.charAt(e)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
k++;
if (k == 2) {
ends.write(bcd);
k=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (k == 1) {
bcd|=0xF0;
ends.write(bcd);
}
}",234,6,"os:ends,number:currency,n:k,i:e,",391,3.85,ALERT
398,"EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}","EgDemandDetails insertPenalty(final BigDecimal chqBouncepenancy,final Module system){
  EgDemandDetails demandDetail=null;
  if (chqBouncepenancy != null && chqBouncepenancy.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(system);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,system);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,system);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncepenancy,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}",118,7,"module:system,chqBouncePenalty:chqBouncepenancy,",83,1.8,ALERT
399,"public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}","public void rederishUrl(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}",230,5,"rederiveColor:rederishUrl,",55,0.86,ALERT
400,"public static int calculateRMSLevel(short[] audioData,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}","public static int calculateRMSLevel(short[] audioData,int numcycles){
  long lSum=0;
  int humwalk=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    humwalk++;
    if (humwalk == numcycles)     break;
  }
  double dAvg=lSum / numcycles;
  double sumMeanSquare=0d;
  humwalk=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    humwalk++;
    if (humwalk == numcycles)     break;
  }
  double averageMeanSquare=sumMeanSquare / numcycles;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}",126,10,"numread:humwalk,numframes:numcycles,",93,1.95,ALERT
401,"protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
","protected void generateFields(){
  for (Iterator<Element> walker=mElements.walker(); walker.hasNext(); ) {
    Element element=walker.next();
    if (!element.used) {
      walker.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      walker.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
",157,7,"iterator:walker,",55,0.55,ALERT
402,"public void initializeOwnerReferencesForField(StateManager sm,FieldMetaData fmd){
  if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {
    Collection<?> collection=(Collection<?>)sm.fetch(fmd.getIndex());
    if (collection != null) {
      for (      Object item : collection) {
        if (item != null) {
          _relationsManager.setOwnerStateManagerForPersistentInstance(item,sm,fmd);
        }
      }
    }
  }
 else   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE || fmd.isEmbeddedPC()) {
    Object value=sm.fetch(fmd.getIndex());
    if (value != null) {
      _relationsManager.setOwnerStateManagerForPersistentInstance(value,sm,fmd);
    }
  }
}
","public void initializeOwnerReferencesForField(StateManager bm,FieldMetaData fcmd){
  if (fcmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {
    Collection<?> sequence=(Collection<?>)bm.fetch(fcmd.getIndex());
    if (sequence != null) {
      for (      Object item : sequence) {
        if (item != null) {
          _relationsManager.setOwnerStateManagerForPersistentInstance(item,bm,fcmd);
        }
      }
    }
  }
 else   if (fcmd.getAssociationType() == FieldMetaData.ONE_TO_ONE || fcmd.isEmbeddedPC()) {
    Object value=bm.fetch(fcmd.getIndex());
    if (value != null) {
      _relationsManager.setOwnerStateManagerForPersistentInstance(value,bm,fcmd);
    }
  }
}
",139,6,"fmd:fcmd,sm:bm,collection:sequence,",115,1.28,ALERT
403,,,30,2,,693,5.169919673601790,0
404,"private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}","private boolean validateCooldownSetting(String browserId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(browserId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + browserId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + browserId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + browserId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}",193,10,"appId:browserId,",59,2.43,ALERT
405,,,30,3,,1140,11.148445089658100,0
407,"public double[] arrayCopy(){
  double[] array=new double[length()];
  for (  IndexValue iv : this)   array[iv.getIndex()]=iv.getValue();
  return array;
}
","public double[] ArrayNew(){
  double[] function=new double[length()];
  for (  IndexValue iv corethis)   function[core.gesetOffset]=core.getValue();
  return function;
}
",47,4,"arrayCopy:ArrayNew,array:function,iv:core,getIndex:setOffset,",152,1.62,ALERT
408,"public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}
","public static String default(final String title){
  return isHidden(title) ? title : HIDDEN_PREFIX.concat(title);
}
",26,2,"key:title,hide:default,",64,0.73,ALERT
409,"public boolean isNetworkConnected(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}
","public boolean isServiceAdapted(){
  ConnectivityManager connecticationManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo neconnectionInfonnecticationManager.getActiveNetworkInfo();
  return connectionInf != null && connectionInf.isConnectedOrConnecting();
}
",38,3,"isNetworkConnected:isServiceAdapted,connectivityManager:connecticationManager,networkInfo:connectionInf,",255,2.39,ALERT
411,"public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}","public void lead(){
  if (inter.hasNext()) {
    View currentUser=inter.lead();
    if (isUsingDefaultListener())     currentUser.setOnClickListener(null);
    if (inter.nextIndex() < mViews.size()) {
      View NextLayer=mViews.get(inter.nextIndex());
      if (isUsingDefaultListener())       NextLayer.setOnClickListener(listener);
      ControllerAnimator animener=getDefaultForwardAnimation();
      animener.setOldView(currentUser);
      aanimenersetNewView(NextLayer);
      currentUser.startAnimation(animener);
      if (inter.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        inter=mViews.listIterator();
        View NextLayer=mViews.get(0);
        if (mUseDefaultListener)         NextLayer.setOnClickListener(listener);
        ControllerAnimator animener=getDefaultForwardAnimation();
        animener.setOldView(currentUser);
        aanimenersetNewView(NextLayer);
        currentUser.startAnimation(animener);
      }
    }
  }
}",204,5,"next:lead,currentView:currentUser,nextView:NextLayer,animator:animener,iterator:inter,",405,4.44,ALERT
413,"public void testCompareNegNeg2(){
  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};
  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  int aSign=-1;
  int bSign=-1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  assertEquals(1,aNumber.compareTo(bNumber));
}","public void assertCompareNegAbs2(){
  byte abytes[]={10,20,30,40,50,60,70,10,20,30};
  byte bByte[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  int aBig=-1;
  int cPart=-1;
  BigIntegersaBERr=new BigInteger(aBig,abytes);
  BigIntegeraBERr=new BigIntegercPartn,bByte);
  assertEquals(1,saBER.compareTo(aBER));
}",118,7,"testCompareNegNeg2:assertCompareNegAbs2,aBytes:abytes,bBytes:bByte,aSign:aBig,bSign:cPart,aNumber:saBER,bNumber:aBER,",729,9.63,ALERT
414,"@Override public Node item(int index){
  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;
}
","@Override public Node test(int value){
  return (nodes != null && value < nodes.size()) ? (Node)(nodes.get(value)) : null;
}
",40,2,"item:test,index:value,",116,0.96,ALERT
415,"public void test_simplePrematureClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int i=0;
  while (iter.hasNext()) {
    iter.next();
    if (++i == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(i == 10);
}","public void test_simplePrematureClose(){
  Striterator source=new Striterator(m_data.iterator());
  int i=0;
  while (source.hasNext()) {
    source.next();
    if (++i == 10) {
      source.close();
      assertTrue(!source.hasNext());
    }
  }
  assertTrue(!source.isOpen());
  assertTrue(i == 10);
}",83,3,"iter:source,",42,1.11,ALERT
417,"public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
","public static <T>ArrayList<T> in(InputStream lineStreamer,String chalsetName,ITransformer<String,T> ransformer) throws FileNotFoundException {
  Scanner sccanNERew Scanner(lineStreamer,chalsetName);
  ArrayList<T> pool=new ArrayList<>();
  while (canNER.hasNextLine()) {
    Stringlinese=canNER.nextLine();
   poolt.add(ransformer.transform(lines));
  }
  canNER.close();
  return pool;
}
",93,7,"read:in,fileStream:lineStreamer,charsetName:chalsetName,transformer:ransformer,scanner:canNER,list:pool,line:lines,",754,9.46,ALERT
418,"public static float between(float val,float min,float max){
  return Math.max(Math.min(val,max),min);
}
","public static float between(float val,float min,float p){
  return Math.p(Math.min(val,p),min);
}
",33,4,"max:p,",41,0.38,ALERT
419,"private String pickCharset(){
  if (charset != null) {
    return charset;
  }
 else   if (utf8Supported) {
    return ""UTF-8"";
  }
 else {
    return System.getProperty(""file.encoding"");
  }
}","private String getchactersET(){
  if (charset != null) {
    return charset;
  }
 else   if (utf8Supported) {
    return ""UTF-8"";
  }
 else {
    return System.getProperty(""file.encoding"");
  }
}",39,1,"pickCharset:getchactersET,",27,0.28,ALERT
420,,,17,1,,447,3.9845504721005800,0
421,"protected int checkKnownCookie(){
  int retVal=0;
  debug.message(""{}.checkKnownCookie:"",ADAPTIVE);
  HttpServletRequest req=getHttpServletRequest();
  if (req != null) {
    Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName);
    if (cookie != null) {
      if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {
        retVal=knownCookieScore;
      }
    }
  }
  if (knownCookieValue == null) {
    knownCookieValue=""1"";
  }
  if (knownCookieSave) {
    postAuthNMap.put(""COOKIENAME"",knownCookieName);
    postAuthNMap.put(""COOKIEVALUE"",knownCookieValue);
  }
  if (!knownCookieInvert) {
    retVal=knownCookieScore - retVal;
  }
  return retVal;
}","protected int checkKnownCookerve(){
  int rtVAL=0;
  debug.message(""{}.checkKnownCookie:"",ADAPTIVE);
  HttpServletRequest ctr=getHttpServletRequest();
  if (ctr != null) {
    Cookie helper=CookieUtils.getCookieFromReq(ctr,knownCookieName);
    if (helper != null) {
      if (knownCookVersion.equalsIgnoreCase(CookieUtils.getCookieValue(helper))) {
        rtVAL=knownCookieScore;
      }
    }
  }
  if (knownCookVersion == null) {
    knownCookVersion=""1"";
  }
  if (knownCookieSave) {
    postAuthNMap.put(""COOKIENAME"",knownCookieName);
    postAuthNMap.put(""COOKIEVALUE"",knownCookVersion);
  }
  if (!knownCookieInvert) {
    rtVAL=knownCookieScore - rtVAL;
  }
  return rtVAL;
}",128,5,"checkKnownCookie:checkKnownCookerve,retVal:rtVAL,req:ctr,cookie:helper,knownCookieValue:knownCookVersion,",620,23.83,ALERT
422,"public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
","public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countryails=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countryails,CountryRO.class,Country.class);
}
",55,5,"countries:countryails,",39,0.46,ALERT
423,"protected void writeExternalForeignKeyDropStmt(Table table,ForeignKey foreignKey,StringBuilder ddl){
  writeTableAlterStmt(table,ddl);
  ddl.append(""DROP CONSTRAINT "");
  printIdentifier(getForeignKeyName(table,foreignKey),ddl);
  printEndOfStatement(ddl);
}
","protected void writeExternalForeignKeyDropStmt(Table master,ForeignKey foreignKey,StringBuilder bbls){
  writeTableAlterStmt(master,bbls);
  bbls.append(""DROP CONSTRAINT "");
  printIdentifier(getForeignKeyName(master,foreignKey),bbls);
  printEndOfStatement(bbls);
}
",46,4,"table:master,ddl:bbls,",73,0.86,ALERT
424,,,67,5,,1160,19.956036833922100,0
425,,,119,6,,1587,16.06868226925530,0
426,"public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}","public static String escapeComex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}",29,3,"escapeRegex:escapeComex,",28,0.56,ALERT
427,,,27,3,,601,10.116645256678300,0
428,"static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=collector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}","static MethodHandle makeCollectCallArgs(MethodHandle target,MethodHandle collector,int collectArgDef,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collecterTy=collector.type();
  incollectArgCountnt=collecterTy.parameterCount();
  Class<?collectValueTypepe=collecterTy.returnType();
  int cocollectVarCountcollectValueType == void.class ? 0 : 1);
  MethodType rcTypes=targetType.dropParameterTypes(collectArgDef,collectArgDef + collectVarCount);
  if (!retainOriginalArgs) {
  rcTypesprcTypespe.insertParameterTypes(collectArgDef,collecterTy.parameterList());
  }
  MethodType daTyp=rcTypes.invokerType();
  Naframesnames=arguments(2,daTyp);
  final int ccollectNamePosframes.length - 2;
  final int ttargetParamPositionframes.length - 1;
  Name[] ccollectorArgsArrays.copyOfRange(frames,1 + collectArgDef,1 + collectArgDef + collectArgCount);
  frames[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArDef=0;
  int Chunc=collectArgDef;
  System.arraycopy(frames,inputArgPos,targetArgs,targetArDef,Chunc);
  inputArgPos+=Chunc;
  targetArDef+=Chunc;
  if (collectValueType != void.class) {
    ttargetArgsttargetArDef+]=frames[collectNamePos];
  }
  Chunc=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(frames,inputArgPos,targetArgs,targetArDef,Chunc);
    targetArDef+=Chunc;
  }
  inputArgPos+=Chunc;
 Chunck=targetArgs.length - targetArDef;
  System.arraycopy(frames,inputArgPos,targetArgs,targetArDef,Chunc);
  assert (inputArgPos + Chunc == collectNamePos);
  frames[targetParamPosition]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",daTyp.parameterCount(),frames);
  return SimpleMethodHandle.make(rcTypes,form);
}",373,21,"makeCollectArguments:makeCollectCallArgs,collectArgPos:collectArgDef,collectorType:collecterTy,collectValType:collectValueType,collectValCount:collectVarCount,srcType:rcTypes,lambdaType:daTyp,names:frames,targetNamePos:targetParamPosition,targetArgPos:targetArDef,chunk:Chunc,",1479,16.74,ALERT
429,"private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}","private void deselect(final int index,final boolean shouldTriggerevents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem page=selection.remove(index);
  if (shouldTriggerevents) {
    fireSelectionEvent(page);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  page.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(page);
  if (shouldTriggerevents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}",104,5,"item:page,shouldFireEvents:shouldTriggerevents,",70,0.73,ALERT
430,"public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}","public String toChars(int[] indexents){
  StringBuilder s=new StringBuilder(indexents.length);
  for (int i=0; i < indexents.length; i++)   s.append(toChar(indexents[i]));
  return s.toString();
}",58,4,"indices:indexents,",44,0.46,ALERT
431,"public void addSplitEdges(List edgeList){
  addEndpoints();
  Iterator it=iterator();
  EdgeIntersection eiPrev=(EdgeIntersection)it.next();
  while (it.hasNext()) {
    EdgeIntersection ei=(EdgeIntersection)it.next();
    Edge newEdge=createSplitEdge(eiPrev,ei);
    edgeList.add(newEdge);
    eiPrev=ei;
  }
}
","public void addSplitAdices(List edgeLibrary){
  addEndpoints();
  Iterator sit=iterator();
  EdgeIntersection eeniPtr(EdgeIntersection)sit.next();
  while (sit.hasNext()) {
    EdgeIntersection eedi(EdgeIntersection)sit.next();
    Edge nNewedgecreateSplitEdge(eniPtr,edi);
    edgeLibrary.add(Newedge);
    eniPtr=edi;
  }
}
",75,6,"addSplitEdges:addSplitAdices,edgeList:edgeLibrary,it:sit,eiPrev:eniPtr,ei:edi,newEdge:Newedge,",1091,11.99,ALERT
432,"public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
","public void renclose(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
",93,2,"reconnect:renclose,",21,0.26,ALERT
433,,,49,3,,1131,12.416646178563400,0
434,,,54,1,,446,4.938176389535270,0
435,,,71,4,,1493,16.667827955881800,0
436,"public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}","public Point2D invertedMatrix(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.invertedMatrix(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}",74,3,"inverseTransform:invertedMatrix,",43,0.41,ALERT
437,,,19,2,,356,3.29235569636027,0
438,"private static String extractClientName(String clientId,String host){
  String hostExcludedId="""";
  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {
    hostExcludedId=clientId.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}","private static String extractClientName(String clientId,String server){
  String hostExcludedId="""";
  if ((isIPv6(server) || isIPv4(server)) && clientId.startsWith(server)) {
    hostExcludedId=clientId.substring(server.length());
  }
 else {
    int firstDotIndex=server.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=server.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}",183,12,"host:server,",71,3.0,ALERT
439,"private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
","private void immituntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
",100,4,"emitUntil:immituntil,",33,0.39,ALERT
440,,,38,1,,428,4.013521603743240,0
441,"private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){
  int targetPage;
  if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=velocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=velocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + pageOffset + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastItem=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}","private int determinetargetpage(int currentPage,float pageOffset,int valocity,int deltaX){
  int targetPage;
  if (Math.abs(deltaX) > flingDistance && Math.abs(valocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=valocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=valocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + pageOffset + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastItem=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}",194,9,"determineTargetPage:determinetargetpage,velocity:valocity,",119,1.41,ALERT
442,,,68,4,,1515,14.871478950977300,0
443,,,29,3,,1137,9.960952591896060,0
444,"public void testEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}","public void testEmptySearch() throws Exception {
  IndexSearcher ctx=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term(""contents"",""foo""));
  Sort sort=new Sort();
  TopDocs td=ctx.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=ctx.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""int"",SortField.Type.INT),SortField.FIELD_DOC);
  td=ctx.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string"",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=ctx.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""string_val"",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=ctx.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField(""float"",SortField.Type.FLOAT),new SortField(""string"",SortField.Type.STRING));
  td=ctx.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}",305,5,"empty:ctx,testEmptyIndex:testEmptySearch,",88,2.58,ALERT
445,,,30,1,,450,4.512689872582750,0
446,,,95,3,,1063,14.563336698214200,0
447,"public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){
  if (maxNumScaleMarkers < 2) {
    maxNumScaleMarkers=2;
  }
  int scale=calcScale(proteinLength,maxNumScaleMarkers);
  StringBuilder sb=new StringBuilder(""0"");
  int index=0;
  int numRemaining=proteinLength;
  while (index <= proteinLength) {
    index+=scale;
    numRemaining-=scale;
    sb.append("","");
    if ((numRemaining > 0) && (numRemaining < scale)) {
      if (numRemaining < (scale / 2)) {
        sb.append(proteinLength);
        break;
      }
    }
    if (index >= proteinLength) {
      sb.append(proteinLength);
    }
 else {
      sb.append(index);
    }
  }
  return sb.toString();
}","public static String generateScaleHeadors(int processinglength,int maxNumSizeMarkERS){
  if (maxNumSizeMarkERS < 2) {
    maxNumSizeMarkERS=2;
  }
  int sccalealcScale(processinglength,maxNumSizeMarkERS);
  StringBuilder bd=new StringBuilder(""0"");
  int position=0;
  int numnremailingocessinglength;
  while (indposition processinglength) {
   positionx+=cale;
   nremailingg-=cale;
    bd.append("","");
    if (nremailingg > 0) && nremailingg < cale)) {
      if nremailingg < (cale / 2)) {
        sb.bdpend(processinglength);
        break;
      }
    }
    if (indposition processinglength) {
      sb.bdpend(processinglength);
    }
 else {
      bd.append(position);
    }
  }
  return bd.toString();
}",146,7,"generateScaleMarkers:generateScaleHeadors,proteinLength:processinglength,maxNumScaleMarkers:maxNumSizeMarkERS,scale:cale,sb:bd,index:position,numRemaining:nremailing,",641,7.28,ALERT
448,"Builder addLenient(String line){
  int index=line.indexOf("":"",1);
  if (index != -1) {
    return addLenient(line.substring(0,index),line.substring(index + 1));
  }
 else   if (line.startsWith("":"")) {
    return addLenient("""",line.substring(1));
  }
 else {
    return addLenient("""",line);
  }
}","Builder addPatuous(String one){
  intxx=one.indexOf("":"",1);
  if (x != -1) {
    return addPatuous(one.substring(0xx),one.substring(x + 1));
  }
 else   if (one.startsWith("":"")) {
    return addPatuous("""",one.substring(1));
  }
 else {
    return addPatuous("""",one);
  }
}",87,3,"addLenient:addPatuous,line:one,index:x,",162,2.04,ALERT
449,"public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(path),lowercase);
}
","public static Set<String> readStopWORStream(Path p,boolean lowcases) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(p),lowcases);
}
",31,3,"readStopwordsPath:readStopWORStream,path:p,lowercase:lowcases,",339,2.76,ALERT
450,"private void loadUserInfoIntoActionBar(){
  if (!TextUtils.isEmpty(mWithUserImage)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}
","private void loadUserInfoIntintoActionbar(){
  if (!TextUtils.isEmpty(mWithUserImage)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}
",38,1,"loadUserInfoIntoActionBar:loadUserInfoIntintoActionbar,",26,0.26,ALERT
451,"public void removeRegion(Region r){
  regions.remove(r);
}
","public void clearCountry(Region or){
  regions.remove(or);
}
",16,2,"removeRegion:clearCountry,r:or,",236,1.25,ALERT
452,"public static boolean looksLikeAListStyleType(String val){
  return LIST_TYPES.indexOf(val) >= 0;
}","public static boolean looksLikeAListstyleName(String func){
  return LIST_TYPES.indexOf(func) >= 0;
}",20,2,"looksLikeAListStyleType:looksLikeAListstyleName,val:func,",537,4.08,ALERT
453,,,35,2,,638,3.1184019684791600,0
455,,,18,1,,462,8.23532429933548,0
456,,,22,2,,802,3.5402889768282600,0
457,,,54,4,,673,4.64078410466512,0
458,,,45,4,,1144,6.948870793978370,0
459,"public void randomize(){
  randomizeIncomingWeights();
  normalizeIncomingWeights();
}
","public void Randomizer(){
  randomizeIncomingWeights();
  normalizeIncomingWeights();
}
",15,1,"randomize:Randomizer,",17,0.14,ALERT
460,"public static void saveX509Cert(String certStr,File certFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));
  writer.write(BEGIN_CERT);
  writer.newLine();
  writer.write(certStr);
  writer.newLine();
  writer.write(END_CERT);
  writer.newLine();
  writer.close();
}","public static void saveX500Str(String tempstr,File Certfile) throws IOException {
  BufferedWriter e=new BufferedWriter(new FileWriter(Certfile));
  e.write(BEGIN_CERT);
  e.newLine();
  e.write(tempstr);
  e.newLine();
  e.write(END_CERT);
  e.newLine();
  e.close();
}",73,4,"saveX509Cert:saveX500Str,certStr:tempstr,certFile:Certfile,writer:e,",453,2.92,ALERT
461,"public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
","public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> source=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    source.addAll(newQual);
  }
 else {
    source.addAll(map.get(key));
    source.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(source));
}
",97,5,"result:source,",49,0.32,ALERT
462,"public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}","public void addall(int i,int[] append){
  int daslicelenppend.length;
  if (slicelen == 0) {
    return;
  }
  int nnextcapssize+ (int)(slicelen * 1.1) + 1;
  ensureCapacity(nextcap);
  System.arraycopy(array,i,array,slicelenasizesize - i);
  System.arraycappenddata,0,array,i,slicelen);
  ssize=slicelen;
}",90,6,"addAll:addall,index:i,data:append,dataLen:slicelen,newcap:nextcap,",240,2.4,ALERT
463,,,35,2,,775,4.6823363979657500,0
464,,,17,2,,802,4.08610113064448,0
465,"final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void output(long video){
  Writer object=this.object;
  if (object == null)   return;
  print(video);
  try {
    object.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,3,"out:object,v:video,println:output,",92,0.6,ALERT
466,"public boolean packageHasAnnotation(Annotation annotation){
  try {
    Package pkg=type.getPackage();
    if (pkg == null) {
      return false;
    }
    String className=pkg.getName() + "".package-info"";
    Class<?> packageType=Class.forName(className);
    AnnotationAccessor accessor=new AnnotationAccessor(supportedAnnotations,packageType,ignoreAnnotationFailure);
    return accessor.typeHas(annotation);
  }
 catch (  ClassNotFoundException e) {
    return false;
  }
}
","public boolean packageHasANotation(Annotation ansor){
  try {
    Package gp=type.getPackage();
    if (gp == null) {
      return false;
    }
    Stringfilenamee=gp.getName() + "".package-info"";
    Class<?>sourceTypee=Class.forName(filename);
    AnnotationAccessoraccesserr=new AnnotationAccessor(supportedAnnotations,sourceType,ignoreAnnotationFailure);
    reaccesseressor.typeHas(ansor);
  }
 catch (  ClassNotFoundException e) {
    return false;
  }
}
",87,6,"packageHasAnnotation:packageHasANotation,annotation:ansor,pkg:gp,className:filename,packageType:sourceType,accessor:accesser,",1094,9.85,ALERT
467,"public static Set<URI> fetchRPTargetVirtualPools(DbClient dbClient){
  Set<URI> rpProtectedTargetVPools=new HashSet<URI>();
  try {
    List<URI> vpoolProtectionSettingsURIs=dbClient.queryByType(VpoolProtectionVarraySettings.class,true);
    Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsURIs,true);
    while (vPoolProtectionSettingsItr.hasNext()) {
      VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next();
      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {
        rpProtectedTargetVPools.add(rSetting.getVirtualPool());
      }
    }
  }
 catch (  Exception ex) {
    _log.error(""Exception occurred while fetching RP enabled virtualpools"",ex);
  }
  return rpProtectedTargetVPools;
}
","public static Set<URI> fetchRPTargetVirtualPagers(DbClient obClient){
  Set<URI> rpProtectedTargetEPool=new HashSet<URI>();
  try {
    List<URI> vpoolProtectionSettingsERI=obClient.queryByType(VpoolProtectionVarraySettings.class,true);
    Iterator<VpoolProtectionVarraySettings>vPoolProtectionSettingItRr=obClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsERI,true);
    while (vPoolProtectionSettingItR.hasNext()) {
      VpoolProtectionVarraySettingsRsettingg=vPoolProtectionSettingItR.next();
      if (null != Rsetting && !NullColumnValueGetter.isNullURI(Rsetting.getVirtualPool())) {
        rpProtectedTargetEPool.add(Rsetting.getVirtualPool());
      }
    }
  }
 catch (  Exception ex) {
    _log.error(""Exception occurred while fetching RP enabled virtualpools"",ex);
  }
  return rpProtectedTargetEPool;
}
",135,6,"fetchRPTargetVirtualPools:fetchRPTargetVirtualPagers,dbClient:obClient,rpProtectedTargetVPools:rpProtectedTargetEPool,vpoolProtectionSettingsURIs:vpoolProtectionSettingsERI,vPoolProtectionSettingsItr:vPoolProtectionSettingItR,rSetting:Rsetting,",552,4.62,ALERT
468,,,17,2,,723,4.38735869328181,0
469,,,45,2,,768,6.183303960164390,0
470,"protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.start();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}","protected synchronized void run(long curveGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
   infosinfos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curveGen) {
      assert myPrimaryGen < curveGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curveGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.run();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curveGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}",1015,10,"start:run,curPrimaryGen:curveGen,",446,2.76,ALERT
471,"private static boolean checkValue(String val) throws MalformedObjectNameException {
  if (val == null)   throw new NullPointerException(""Invalid value (null)"");
  final int len=val.length();
  if (len == 0)   return false;
  final char[] s=val.toCharArray();
  final int[] result=parseValue(s,0);
  final int endValue=result[0];
  final boolean value_pattern=result[1] == 1;
  if (endValue < len)   throw new MalformedObjectNameException(""Invalid character in value: `"" + s[endValue] + ""\'"");
  return value_pattern;
}","private static boolean printText(String l) throws MalformedObjectNameException {
  if (l == null)   throw new NullPointerException(""Invalid value (null)"");
  final inlocen=l.length();
  if (loc == 0)   return false;
  final char[abs s=l.toCharArray();
  final int[] rearrayarseValue(abs,0);
  final intstartValuee=array[0];
  final booleanvalue_patn=array[1] == 1;
  if (enstartValue loc)   throw new MalformedObjectNameException(""Invalid character in value: `"" + abs[startValue] + ""\'"");
  return value_pat;
}",112,7,"checkValue:printText,val:l,len:loc,s:abs,result:array,endValue:startValue,value_pattern:value_pat,",905,7.24,ALERT
472,"public static final double calcNiceNumber(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}","public static final double calcBigMoney(final double RRA,final boolean Rounding){
  double quickBract;
  doublexpancent=Math.floor(Math.log10(RRA));
  doubbidelityion=RRA / Math.pow(10,expance);
  if (Rounding) {
    if (Double.compare(bidelity,1.5) < 0) {
      quickBract=1;
    }
 else     if (Double.compare(bidelity,3) < 0) {
      quickBract=2;
    }
 else     if (Double.compare(bidelity,7) < 0) {
      quickBract=5;
    }
 else {
      quickBract=10;
    }
  }
 else {
    if (Double.compare(bidelity,1) <= 0) {
      quickBract=1;
    }
 else     if (Double.compare(bidelity,2) <= 0) {
      quickBract=2;
    }
 else     if (Double.compare(bidelity,5) <= 0) {
      quickBract=5;
    }
 else {
      quickBract=10;
    }
  }
  return quickBract * Math.pow(10,expance);
}",201,6,"calcNiceNumber:calcBigMoney,RANGE:RRA,ROUND:Rounding,niceFraction:quickBract,exponent:expance,fraction:bidelity,",653,14.88,ALERT
473,,,22,2,,803,4.765095480283100,0
475,"private void calculateD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}","private void calculateD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int kn=0; kn < length; kn++) {
    mD[kn]=b[kn] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(kn)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}",86,5,"k:kn,",48,0.71,ALERT
477,"public String toString(){
  final StringBuffer s=new StringBuffer();
  final int size=size();
  for (int i=0; i < size; i++)   s.append(getInt(i));
  return s.toString();
}","public String TOString(){
  final StringBuffer ings=new StringBuffer();
  final int c=c();
  for (int I=0; I < sizc++I   ings.append(getInt(I));
  return ings.TOString();
}",55,4,"toString:TOString,s:ings,size:c,i:I,",1062,6.34,ALERT
478,"public Set<WordToken> nearestWords(final int distance,final WordToken... start){
  return nearestWords(distance,null,Arrays.asList(start));
}
","public Set<WordToken> neatherWord(final int draw,final WordToken... style){
  return neatherWord(draw,null,Arrays.asList(style));
}
",33,3,"nearestWords:neatherWord,distance:draw,start:style,",596,5.12,ALERT
479,"public static boolean isResourceReference(String str){
  return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0);
}","public static boolean isresourceReferences(String p){
  return p.startsWith(BIG_QUOTE_LEFT) && p.endsWith(BIG_QUOTE_RIGHT) && p.charAt(1) == AT.charAt(0);
}",39,2,"isResourceReference:isresourceReferences,str:p,",204,1.64,ALERT
480,"public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}","public static int append(String where,Object[] args,V ists,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,ists);
  }
  return -1;
}",108,5,"sets:ists,update:append,",100,0.97,ALERT
481,,,14,1,,437,2.2900230487187700,0
482,,,28,2,,692,5.451001600424450,0
483,,,151,4,,1245,8.082718189557390,0
484,,,14,1,,430,3.550768538316090,0
485,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (requestID == null && localName.equals(""batchRequest"")) {
    requestID=attributes.getValue(""requestID"");
  }
  super.startElement(uri,localName,qName,attributes);
}
","@Override public void StartTag(String uri,String localNode,String qName,Attributes atrib) throws SAXException {
  if (requestID == null && localNode.equals(""batchRequest"")) {
    requestID=atrib.getValue(""requestID"");
  }
  super.StartTag(uri,localNode,qName,atrib);
}
",59,6,"localName:localNode,attributes:atrib,startElement:StartTag,",102,0.6,ALERT
486,"protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
","protected void trigger(Exception excpection,String title,String application){
  Utils.handleError(getShell(),excpection,title,application);
}
",30,4,"exception:excpection,handle:trigger,message:application,",95,0.66,ALERT
487,,,84,3,,1136,12.156573804219600,0
488,,,50,2,,532,2.8000863512357100,0
489,,,71,5,,1265,39.28672341505690,0
490,"public synchronized void init(){
  init=true;
  for (  String mapName : store.getMapNames()) {
    if (mapName.startsWith(""temp."")) {
      MVMap<Object,Integer> temp=openTempMap(mapName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openTransactions.set(transactionId);
      }
    }
  }
}","public synchronized void init(){
  init=true;
  for (  String tableName : store.getMapNames()) {
    if (tableName.startsWith(""temp."")) {
      MVMap<Object,Integer> temp=openTempMap(tableName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openTransactions.set(transactionId);
      }
    }
  }
}",102,5,"mapName:tableName,",133,0.94,ALERT
491,"public static void closeQuietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
","public static void closeQuicitly(final Closeable Closeability){
  if (Closeability != null) {
    try {
      Closeability.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
",47,2,"closeable:Closeability,closeQuietly:closeQuicitly,",57,0.6,ALERT
492,,,71,5,,1816,10.545249060789700,0
493,,,556,13,,3194,26.239977677663200,0
494,"private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZones,Map<String,StoragePort> initiatorPortsMap){
  Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>();
  Zone zone=null;
  List<Zone> zones=null;
  for (  String initiatorWwn : wwnToZones.keySet()) {
    for (    String portWwn : initiatorPortsMap.keySet()) {
      zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZones.get(initiatorWwn));
      if (zone != null) {
        zones=filteredMap.get(initiatorWwn);
        if (zones == null) {
          zones=new ArrayList<>();
          filteredMap.put(initiatorWwn,zones);
        }
        zones.add(zone);
      }
    }
  }
  return filteredMap;
}
","private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZipones,Map<String,StoragePort> initiatorPortsApp){
  Map<String,List<Zone>> filpletedMap=new HashMap<String,List<Zone>>();
  Zone zone=null;
  List<Zone> zenoned=null;
  for (  String ininitiaterWwyn wwnToZipones.keySet()) {
    for (    String portWenn : initiatorPortsApp.keySet()) {
      zozonenetworkScheduler.selectExistingZoneForInitiatorPort(network,ininitiaterWwynorportWennnToZipones.get(initiaterWwyn));
      if (zone != null) {
        zzenonedfilpletedMap.get(initiaterWwyn);
        if (zenoned == null) {
          zenoned=new ArrayList<>();
          filpletedMap.put(ininitiaterWwynenoned);
        }
        zenoned.add(zone);
      }
    }
  }
  return filpletedMap;
}
",172,9,"wwnToZones:wwnToZipones,initiatorPortsMap:initiatorPortsApp,filteredMap:filpletedMap,zones:zenoned,initiatorWwn:initiaterWwyn,portWwn:portWenn,",580,6.68,ALERT
495,"@Override public boolean open(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}
","@Override public boolean en(String format){
  if (format.equals(""r"")) {
    try {
      giStreamer=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(giStreamer);
      giStreamer.close();
      giStreamer=null;
    }
 catch (    IOException e) {
      try {
        giStreamer.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.en(format));
}
",101,5,"iStream:giStreamer,access:format,open:en,",105,0.72,ALERT
496,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenee != null || !eventName.equals(""instance"")) {
    return false;
  }
  return true;
}
","@Override public boolean applicationForowing(String EventType){
  if (m_listenee != null || !EventType.equals(""instance"")) {
    return false;
  }
  return true;
}
",33,2,"eventName:EventType,connectionAllowed:applicationForowing,",51,0.53,ALERT
498,"public boolean isValidTemplate(){
  return isValidTemplate(template);
}
","public boolean isInvalidPage(){
  return isInvalidPage(template);
}
",13,1,"isValidTemplate:isInvalidPage,",35,0.21,ALERT
499,"static void removeAllPhis(IR ir){
  for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {
    nextInstr=s.nextInstructionInCodeOrder();
    if (Phi.conforms(s))     s.remove();
  }
}
","static void removeallPhIs(IR rr){
  for (Instruction core=rr.firstInstructionInCodeOrder(), sentinsentissastInstructionInCodeOrder(), nextInnextINcr core != sensentissaore=nextINcr) {
    nexnextINcrre.nextInstructionInCodeOrder();
    if (Phi.conforms(core))     core.remove();
  }
}
",65,5,"removeAllPhis:removeallPhIs,ir:rr,s:core,sentinel:sentissa,nextInstr:nextINcr,",530,5.9,ALERT
500,,,58,1,,411,2.8091930667559300,0
501,,,133,7,,2457,21.473027328650200,0
502,,,53,3,,1172,11.936708879470800,0
503,"@Override protected void tearDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
","@Override protected void tearsUp() throws NamingException, JMSException {
  NamingEnumeration<Binding> walker=context.listBindings("""");
  while (walker.hasMore()) {
    Binding binding=walker.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
",62,5,"iter:walker,tearDown:tearsUp,",54,0.52,ALERT
504,"public static boolean isPlaceAction(InventoryAction action){
switch (action) {
case SWAP_WITH_CURSOR:
case PLACE_ONE:
case PLACE_ALL:
case PLACE_SOME:
    return true;
}
return false;
}
","public static boolean isplaceOperation(InventoryAction this){
switch (this) {
case SWAP_WITH_CURSOR:
case PLACE_ONE:
case PLACE_ALL:
case PLACE_SOME:
    return true;
}
return false;
}
",34,2,"isPlaceAction:isplaceOperation,action:this,",53,0.32,ALERT
505,,,203,9,,2961,33.41769090096160,0
506,"public static Calendar reduceCalendar(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}","public static Calendar reduceGlc(Calendar schec){
  schec.set(Calendar.MILLISECOND,0);
  schec.set(Calendar.SECOND,0);
  schec.set(Calendar.MINUTE,0);
  schec.set(Calendar.HOUR,0);
  schec.set(Calendar.HOUR_OF_DAY,0);
  return schec;
}",68,2,"calendar:schec,reduceCalendar:reduceGlc,",63,1.19,ALERT
507,,,49,2,,785,4.833844983577730,0
508,"public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains("".mappingTable."")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}","public HubLinkMapping(String FileDir,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (FileDir.contains("".mappingTable."")) {
    readMappingTable(FileDir);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(FileDir);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}",216,10,"fileName:FileDir,",216,1.27,ALERT
509,"static void appendToPointerHierarchy(final BaseType type,final BaseType pointer){
  Preconditions.checkNotNull(type,""Error: type argument can not be null."");
  Preconditions.checkNotNull(pointer,""Error: pointer argument can not be null."");
  Preconditions.checkArgument(type != pointer,""Error: Can not establish pointer relation between identical types."");
  Preconditions.checkArgument(pointer.pointedToBy != type,""Error: Can not establish circular pointer relation."");
  Preconditions.checkArgument(type.pointsTo != pointer,""Error: Can not establish circular pointer relation."");
  pointer.pointsTo=type;
  type.pointedToBy=pointer;
}
","static void appendToPointerHibliory(final BaseType parent,final BaseType letter){
  Preconditions.checkNotNull(parent,""Error: type argument can not be null."");
  Preconditions.checkNotNull(letter,""Error: pointer argument can not be null."");
  Preconditions.checkArgument(parent != letter,""Error: Can not establish pointer relation between identical types."");
  Preconditions.checkArgument(poletteropointedToPort= parent,""Error: Can not establish circular pointer relation."");
  Preconditions.checkArgument(parentpointstoo != letter,""Error: Can not establish circular pointer relation."");
  poletteropointstoarent;
  parentpointedToPorty=letter;
}
",81,5,"appendToPointerHierarchy:appendToPointerHibliory,type:parent,pointer:letter,pointsTo:pointsto,pointedToBy:pointedToPort,",704,5.89,ALERT
510,"private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}","private double empiricHSEC(TetradMatrix Oh,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Oh.times(Kx);
  TetradMatrix Kyz=Oh.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}",359,17,"Ky:Oh,empiricalHSIC:empiricHSEC,",141,5.97,ALERT
511,"public void testConfigFileProperty() throws Exception {
  File configHome=new File(configuration.getHome());
  assertTrue(""Could not find a proper configuration home."",configHome.exists() && configHome.isDirectory());
  File existingFile=createFile(configHome,""existingfile"",""helloworld"");
  assertEquals(""helloworld"",readFile(existingFile));
  String fileName=""testConfigfile"";
  String fileContents=""Hello @message@ "";
  File file=createFile(configFileDirectory,fileName,fileContents);
  FileConfig configFile=new FileConfig();
  configFile.setFile(getAbsolutePath(file));
  configFile.setToFile(""existingfile"");
  configFile.setOverwrite(false);
  configFile.setConfigfile(false);
  configuration.setProperty(""message"",""world"");
  configuration.setConfigFileProperty(configFile);
  configuration.doConfigure(null);
  File copiedFile=new File(configuration.getHome() + ""/existingfile"");
  assertTrue(""Cannot find the expected copied file"",copiedFile.exists());
  assertEquals(""Hello world "",readFile(copiedFile));
}
","public void testConfigFilesproperty() throws Exception {
  File configHome=new File(configuration.getHome());
  assertTrue(""Could not find a proper configuration home."",configHome.exists() && configHome.isDirectory());
  File existingFile=createFile(configHome,""existingfile"",""helloworld"");
  assertEquals(""helloworld"",readFile(existingFile));
  String fileName=""testConfigfile"";
  String fileContents=""Hello @message@ "";
  File file=createFile(configFileDirectory,fileName,fileContents);
  FileConfig configFile=new FileConfig();
  configFile.setFile(getAbsolutePath(file));
  configFile.setToFile(""existingfile"");
  configFile.setOverwrite(false);
  configFile.setConfigfile(false);
  configuration.setProperty(""message"",""world"");
  configuration.setConfigFileProperty(configFile);
  configuration.doConfigure(null);
  File copiedFile=new File(configuration.getHome() + ""/existingfile"");
  assertTrue(""Cannot find the expected copied file"",copiedFile.exists());
  assertEquals(""Hello world "",readFile(copiedFile));
}
",181,8,"testConfigFileProperty:testConfigFilesproperty,",47,0.54,ALERT
512,,,108,2,,693,4.734767226378120,0
513,,,16,1,,416,3.6383551557858800,0
514,"public void addColumn(int idx,Column column){
  if (column != null) {
    columns.add(idx,column);
  }
}
","public void setField(int Idct,Column header){
  if (header != null) {
    columns.add(Idct,header);
  }
}
",29,3,"addColumn:setField,idx:Idct,column:header,",76,0.46,ALERT
515,"public Builder deleteEntitlements(){
  deleteFields.add(""entitlements"");
  return this;
}
","public Builder deleteAdditleements(){
  deleteFields.add(""entitlements"");
  return this;
}
",17,1,"deleteEntitlements:deleteAdditleements,",26,0.15,ALERT
516,"protected abstract void bindItem(DataBoundViewHolder<T> holder,int position,List<Object> payloads);
","protected abstract void mapItem(DataBoundViewHolder<T> load,int condition,List<Object> Payments);
",21,4,"bindItem:mapItem,holder:load,position:condition,payloads:Payments,",153,1.04,ALERT
517,"public boolean isLastInvoice(){
  String cm=getCostingMethod();
  return cm != null && cm.equals(COSTINGMETHOD_LastInvoice);
}
","public boolean isLastRevocation(){
  String gm=getCostingMethod();
  return gm != null && gm.equals(COSTINGMETHOD_LastInvoice);
}
",26,2,"cm:gm,isLastInvoice:isLastRevocation,",59,0.45,ALERT
518,"public Object assignIdValue(Object data,Number val,ObjectCache objectCache) throws SQLException {
  Object idVal=dataPersister.convertIdNumber(val);
  if (idVal == null) {
    throw new SQLException(""Invalid class "" + dataPersister + "" for sequence-id ""+ this);
  }
 else {
    assignField(data,idVal,false,objectCache);
    return idVal;
  }
}
","public Object assignIDNumber(Object valid,Number arr,ObjectCache objectCollection) throws SQLException {
  Object IDObj=dataPersister.convertIdNumber(arr);
  if (IDObj == null) {
    throw new SQLException(""Invalid class "" + dataPersister + "" for sequence-id ""+ this);
  }
 else {
    assignField(valid,idValIDObje,objectCollection);
    return IDObj;
  }
}
",65,5,"assignIdValue:assignIDNumber,data:valid,val:arr,objectCache:objectCollection,idVal:IDObj,",239,1.73,ALERT
519,"protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}","protected final void writeS(ByteBuffer bd,String editor){
  if (editor == null) {
    bd.putChar('\\000');
  }
 else {
    final int len=editor.length();
    for (int ip=0; ip < len; ip++) {
      bd.putChar(editor.charAt(ip));
    }
    bd.putChar('\\000');
  }
}",76,5,"text:editor,i:ip,buf:bd,",107,0.65,ALERT
520,"public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException {
  MathUtils.checkNotNull(v1);
  MathUtils.checkNotNull(v2);
  field=v1.getField();
  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();
  data=MathArrays.buildArray(field,v1Data.length + v2.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(v2,0,data,v1Data.length,v2.length);
}","public ArrayFieldVector(FieldVector<T> valOne,T[] iv1) throws NullArgumentException {
  MathUtils.checkNotNull(valOne);
  MathUtils.checkNotNull(iv1);
  fielspaceOne.getField();
  final T[] v1Data=(valOv6datatanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)valOne).dataemptyalOne.toArray();
  demptyMathArrays.buildArray(fspacevv6datalength + iv1.length);
  System.arraycopy(v6data,0,empty,0,v6data.length);
  System.arraycopy(iv1,0,demptyvv6datalength,iv1.length);
}",123,5,"v1:valOne,v2:iv1,field:space,v1Data:v6data,data:empty,",492,4.62,ALERT
521,,,30,3,,1157,7.933187234401700,0
522,,,30,2,,766,5.626545242468520,0
523,"@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
","@Override public void Error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.Error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
",71,5,"error:Error,",95,1.13,ALERT
524,"public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}","public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode mA : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> go=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(mA);
    final SubtractAction r2=new SubtractAction(mA);
    final SubtractAction r3=new SubtractAction(mA);
    final CompletableFuture<Integer> fst=fFirst ? f : go;
    final CompletableFuture<Integer> snd=!fFirst ? f : go;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=mA.thenAcceptBoth(f,go,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=mA.thenAcceptBoth(f,go,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=mA.thenAcceptBoth(f,go,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}",330,18,"m:mA,g:go,",124,3.12,ALERT
525,"private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}","private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int season=0; season < 12; season++) {
      int length=months[season];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}",213,14,"month:season,",86,0.81,ALERT
526,"public void mouseWheelMoved(MouseWheelEvent e){
  boolean accepted=checkModifiers(e);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}","public void mouseWheelmoused(MouseWheelEvent e){
  boolean cceded=checkModifiers(e);
  if (cceded == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}",173,7,"mouseWheelMoved:mouseWheelmoused,accepted:cceded,",76,2.42,ALERT
527,"private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){
  result.add(new GraphEdge(head,tail,original.getRelation()));
}
","private void addSyntheticArc(Collection<GraphEdge> future,GraphEdge author,GraphNode view,GraphNode test){
  future.add(new GraphEdgviewatestil,author.getRelation()));
}
",40,5,"addSyntheticEdge:addSyntheticArc,result:future,original:author,head:view,tail:test,",354,3.53,ALERT
528,"private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}
","private int append(FileSystem flow,Configuration conf,Path source,PrintWriter writer,int currentrecordNo) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(flow.open(source)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith(""Recno:: "")) {
        line=""Recno:: "" + currentrecordNo++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentrecordNo;
  }
  finally {
    reader.close();
  }
}
",106,8,"currentRecordNumber:currentrecordNo,fs:flow,src:source,",113,0.91,ALERT
529,"public void writeGolomb(int divisor,int value){
  int q=value / divisor;
  for (int i=0; i < q; i++) {
    writeBit(1);
  }
  writeBit(0);
  int r=value - q * divisor;
  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);
  if (r < ((2 << bit) - divisor)) {
    bit--;
  }
 else {
    r+=(2 << bit) - divisor;
  }
  for (; bit >= 0; bit--) {
    writeBit((r >>> bit) & 1);
  }
}","public void writeBolob(int divisiored,int value){
  int q=vqtlvaluedivisiored;
  for (int iI0; iI< qt; I++) {
    writeBit(1);
  }
  writeBit(0);
  int r=vanvalueq *qtdivisiored;
  int bitpart - Integer.numberOfLeadingZeros(divisiored - 1);
  if (r <n((2 << bitpart divisiored)) {
    part--;
  }
 else {
    r+=n2 << bitpart divisiored;
  }
  for (; part >= 0; part--) {
    writeBit((n >>> part) & 1);
  }
}",125,7,"writeGolomb:writeBolob,divisor:divisiored,q:qt,i:I,r:n,bit:part,",392,4.94,ALERT
530,"public void handleRequest(RequestContext rc) throws CLIException {
  super.handleRequest(rc);
  ldapLogin();
  SSOToken adminSSOToken=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String realm=getStringOptionValue(IArgument.REALM_NAME);
  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String filter=getStringOptionValue(IArgument.FILTER);
  if (patternType == null) {
    patternType="""";
  }
  if ((filter == null) || (filter.length() == 0)) {
    filter=""*"";
  }
  String[] params={realm,patternType,filter};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,""ATTEMPT_LIST_AGENTS"",params);
  try {
    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);
    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        if (!matchType(amid,patternType)) {
          i.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString(""format-search-agent-results""),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString(""search-agent-no-entries""));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,""SUCCEED_LIST_AGENTS"",params);
  }
 catch (  IdRepoException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}","public void HandleResource(RequestContext rc) throws CLIException {
  super.HandleResource(rc);
  ldapLogin();
  SSOToken adminSSOToken=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String realm=getStringOptionValue(IArgument.REALM_NAME);
  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String filter=getStringOptionValue(IArgument.FILTER);
  if (patternType == null) {
    patternType="""";
  }
  if ((filter == null) || (filter.length() == 0)) {
    filter=""*"";
  }
  String[] params={realm,patternType,filter};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,""ATTEMPT_LIST_AGENTS"",params);
  try {
    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);
    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        if (!matchType(amid,patternType)) {
          i.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString(""format-search-agent-results""),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString(""search-agent-no-entries""));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,""SUCCEED_LIST_AGENTS"",params);
  }
 catch (  IdRepoException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}",470,13,"handleRequest:HandleResource,",315,2.47,ALERT
531,,,29,1,,414,2.5695374369621300,0
532,"private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){
  byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumKeyEx1(int hKey,int subSecretPosition,int maxValuelength){
  byte[] result=WresultRegEnumKeyEx(hKey,subSecretPosition,maxValuelength);
  if (result != null) {
    return result;
  }
 else {
    long wakeTimeout=INIT_SLEEP_TIME;
    for (int n=0; n < MAX_ATTEMPTS; n++) {
      try {
        Thread.sleep(wakeTimeout);
      }
 catch (      InterruptedException e) {
        return result;
      }
      wakeTimeout*=2;
      result=WresultRegEnumKeyEx(hKey,subSecretPosition,maxValuelength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,7,"subKeyIndex:subSecretPosition,maxKeyLength:maxValuelength,sleepTime:wakeTimeout,i:n,",388,4.78,ALERT
534,,,17,1,,441,3.1951030691464700,0
535,"private void stretchViewVertically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}","private void stretchSquareVerically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}",79,5,"stretchViewVertically:stretchSquareVerically,",39,0.24,ALERT
536,"private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}","private void storelastUse(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}",25,1,"storeLastUsed:storelastUse,",26,0.17,ALERT
537,,,316,10,,3026,17.308050644397700,0
538,,,58,7,,1959,11.824450540542600,0
539,"public static boolean isJavaScriptEnabled(HttpServletRequest request){
  HttpSession session=request.getSession();
  Boolean javaScriptEnabled=(Boolean)session.getAttribute(""javaScriptEnabled"");
  if (javaScriptEnabled != null) {
    return javaScriptEnabled.booleanValue();
  }
  return false;
}
","public static boolean isjavacriptActive(HttpServletRequest url){
  HttpSessesssion=url.getSession();
  BooljaScriptEnabledbled=(Boolean)ess.getAttribute(""javaScriptEnabled"");
  if (jaScriptEnabled != null) {
    return jaScriptEnabled.booleanValue();
  }
  return false;
}
",50,4,"isJavaScriptEnabled:isjavacriptActive,request:url,session:ess,javaScriptEnabled:jaScriptEnabled,",254,2.06,ALERT
540,"public static String serializeDigestResponse(Map<String,String> paramMap){
  StringBuilder sb=new StringBuilder(""Digest "");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      sb.append("", "");
    }
    sb.append(entry.getKey());
    sb.append(""="");
    sb.append(entry.getValue());
  }
  return sb.toString();
}
","public static String serializedigestresponse(Map<String,String> paramMap){
  StringBuilder BB=new StringBuilder(""Digest "");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      BB.append("", "");
    }
    BB.append(entry.getKey());
    BB.append(""="");
    BB.append(entry.getValue());
  }
  return BB.toString();
}
",106,5,"sb:BB,serializeDigestResponse:serializedigestresponse,",130,0.8,ALERT
541,"public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}","public static String[] decodedArray(String encodeMap){
  String[] items=encodeMap.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}",110,6,"encodedArray:encodeMap,decodeArray:decodedArray,",194,1.47,ALERT
542,"@Category(FlakyTest.class) @Test public void test_FPAmetadataFetch(){
  final Host host=Host.getHost(0);
  VM server1=host.getVM(0);
  VM server2=host.getVM(1);
  VM server3=host.getVM(2);
  VM server4=host.getVM(3);
  Boolean simpleFPR=false;
  final int portLocator=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
  final String hostLocator=NetworkUtils.getServerHostName(server1.getHost());
  final String locator=hostLocator + ""["" + portLocator+ ""]"";
  server3.invoke(null);
  try {
    List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q1"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q2"",false,3));
    Integer port1=(Integer)server1.invoke(null);
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q3"",true,3));
    Integer port2=(Integer)server2.invoke(null);
    fpaList.clear();
    createClientWithLocator(hostLocator,portLocator);
    putIntoPartitionedRegionsThreeQs();
    getFromPartitionedRegionsFor3Qs();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    int totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    int currentRedundancy=1;
    verifyMetadata(totalBucketOnServer,currentRedundancy);
    updateIntoSinglePRFor3Qs();
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q4"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q2"",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q1"",false,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition(""Q3"",false,3));
    Integer port4=(Integer)server4.invoke(null);
    Wait.pause(2000);
    putIntoPartitionedRegions();
    getFromPartitionedRegions();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    server4.invoke(null);
    totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    totalBucketOnServer+=(Integer)server4.invoke(null);
    updateIntoSinglePR();
  }
  finally {
    server3.invoke(null);
  }
}","@Category(FlakyTest.class) @Test public void test_FPAmetadataFetch(){
  final Host host=Host.getHost(0);
  VM server1=host.getVM(0);
  VM server2=host.getVM(1);
  VM server3=host.getVM(2);
  VM server4=host.getVM(3);
  Boolean simpleFPR=false;
  final int portLocator=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
  final String hostLocator=NetworkUtils.getServerHostName(server1.getHost());
  final String locator=hostLocator + ""["" + portLocator+ ""]"";
  server3.invoke(null);
  try {
    List<FixedPartitionAttributes> fPaSt=new ArrayList<FixedPartitionAttributes>();
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q1"",true,3));
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q2"",false,3));
    Integer port1=(Integer)server1.invoke(null);
    fPaSt.clear();
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q3"",true,3));
    Integer port2=(Integer)server2.invoke(null);
    fPaSt.clear();
    createClientWithLocator(hostLocator,portLocator);
    putIntoPartitionedRegionsThreeQs();
    getFromPartitionedRegionsFor3Qs();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    int totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    int currentRedundancy=1;
    verifyMetadata(totalBucketOnServer,currentRedundancy);
    updateIntoSinglePRFor3Qs();
    fPaSt.clear();
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q4"",true,3));
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q2"",true,3));
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q1"",false,3));
    fPaSt.add(FixedPartitionAttributes.createFixedPartition(""Q3"",false,3));
    Integer port4=(Integer)server4.invoke(null);
    Wait.pause(2000);
    putIntoPartitionedRegions();
    getFromPartitionedRegions();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    server4.invoke(null);
    totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    totalBucketOnServer+=(Integer)server4.invoke(null);
    updateIntoSinglePR();
  }
  finally {
    server3.invoke(null);
  }
}",483,14,"fpaList:fPaSt,",78,1.43,ALERT
543,,,14,1,,427,2.3531375726064000,0
544,,,14,1,,408,2.177070991198220,0
545,"public static boolean isAttribute(Object objValue){
  if (objValue instanceof String) {
    String stringValue=(String)objValue;
    if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {
      return true;
    }
  }
  return false;
}
","public static boolean areAttribute(Object objObject){
  if (objObject instanceof String) {
    String sactualValue(String)objObject;
    if (actualValue.startsWith(ATTRIBUTE_START) && actualValue.endsWith(ATTRIBUTE_END)) {
      return true;
    }
  }
  return false;
}
",50,3,"isAttribute:areAttribute,objValue:objObject,stringValue:actualValue,",238,1.87,ALERT
546,"public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}","public static void renderFlattenedANnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage photo=AnnotationFactory.getIcon(form);
  if (photo != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=photo.getHeight();
    final int iconWidth=photo.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,photo,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}",666,13,"image:photo,renderFlattenedAnnotation:renderFlattenedANnotation,",197,1.51,ALERT
547,"void onItemDismissed(final int position){
  final T removed=mData.get(position);
  final boolean wasRemoved=remove(position);
  if (wasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(removed,position);
  }
}
","void onItemDismissed(final int job){
  final T renerved=mData.get(job);
  final boolean WasRemoved=remove(job);
  if (WasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(renerved,job);
  }
}
",48,4,"removed:renerved,position:job,wasRemoved:WasRemoved,",89,0.61,ALERT
548,"public void ensureCapacity(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}","public void enssureCompflow(int mincap){
  if (mincap > array.length) {
    int Newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[Newcap < mincap ? mincap : Newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}",73,5,"newcap:Newcap,ensureCapacity:enssureCompflow,",94,1.9,ALERT
549,"static long checkPreambleSize(Memory mem){
  final long cap=mem.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=mem.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return pre0;
}","static long checkPreamleSize(Memory mp){
  final longactp=mp.getCapacity();
  if (act < 8) {
    throwNotBigEnough(act,8);
  }
  final longpostee0=mp.getLong(0);
  final int prprelongsint)(postee & 0X3FL);
  final int covered=Math.max(prelongs << 3,8);
  if (act < covered) {
    throwNotBigEnough(act,covered);
  }
  return postee;
}",91,6,"checkPreambleSize:checkPreamleSize,mem:mp,cap:act,pre0:postee,preLongs:prelongs,required:covered,",362,5.89,ALERT
550,"public Object pack(){
  if (collection) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}
","public Object pack(){
  if (collection) {
    List list=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,list.size());
      list.toArray(o);
      return o;
    }
  }
  return value;
}
",68,3,"l:list,",39,0.53,ALERT
551,"public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  setMBeanServer(server);
  if (name == null) {
    name=new ObjectName(server.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}
","public ObjectName postReg(MBeanServer master,ObjectName name) throws Exception {
  setMBeanServer(master);
  if (name == null) {
    name=new ObjectName(master.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}
",56,4,"preRegister:postReg,server:master,",87,0.43,ALERT
552,,,11,2,,818,9.080849385261540,0
553,"public static double max(double[] data){
  double max=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(max) || data[i] > max)     max=data[i];
  }
  return max;
}","public static double div(double[] data){
  double div=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(div) || data[i] > div)     div=data[i];
  }
  return div;
}",77,3,"max:div,",79,1.02,ALERT
554,"private void drawArc(Canvas canvas){
  if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) {
    mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed;
    if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) {
      mnIndeterminateStartPosition=0;
    }
    Rect currRect=new Rect();
    getLocalVisibleRect(currRect);
    float nRingBoundaryInner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2);
    mArcRect.set(mnViewCenter - nRingBoundaryInner,mnViewCenter - nRingBoundaryInner,mnViewCenter + nRingBoundaryInner,mnViewCenter + nRingBoundaryInner);
    mPaint.setColor(mArcColor);
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeWidth(mnArcWidth);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
    canvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint);
  }
}","private void drawArc(Canvas canvas){
  if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) {
    mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed;
    if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) {
      mnIndeterminateStartPosition=0;
    }
    Rect currRect=new Rect();
    getLocalVisibleRect(currRect);
    float nRingBoundnerinner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2);
    mArcRect.set(mnViewCenter - nRingBoundnerinner,mnViewCenter - nRingBoundnerinner,mnViewCenter + nRingBoundnerinner,mnViewCenter + nRingBoundnerinner);
    mPaint.setColor(mArcColor);
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeWidth(mnArcWidth);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
    canvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint);
  }
}",154,5,"nRingBoundaryInner:nRingBoundnerinner,",48,0.23,ALERT
555,"private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}
","private void imInsert(LinkedList<Integer> lr,int iu){
  lr.add(iu);
}
",22,3,"myAdd:imInsert,l:lr,i:iu,",131,0.92,ALERT
556,,,54,5,,1789,16.110992244879400,0
557,"private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
","private String replaceAsuffence(String function,String toReplace,String changeTo){
  String vvalue;
  if ((function == null) || (toReplace == null) || (changeTo == null)) {
    return function;
  }
  vvalue=removeSuffix(function,toReplace);
  if (function.equals(vvalue)) {
    return function;
  }
 else {
    return vvalue + changeTo;
  }
}
",74,5,"value:function,replaceSuffix:replaceAsuffence,",130,1.05,ALERT
558,,,122,8,,2710,20.825525470574700,0
559,"public static boolean isSnapshotFullCopySupported(URI blockSnapURI,DbClient dbClient){
  BlockSnapshot blockObj=dbClient.queryObject(BlockSnapshot.class,blockSnapURI);
  StorageSystem storage=dbClient.queryObject(StorageSystem.class,blockObj.getStorageController());
  return (storage != null && (storage.deviceIsType(Type.openstack) || storage.deviceIsType(Type.vnxblock) || storage.deviceIsType(Type.ibmxiv)|| storage.deviceIsType(Type.vmax)));
}
","public static boolean isSnapshotfullcopySupport(URI blockSnapID,DbClient dbClient){
  BlockSnapshotcopyobjjdbClientt.queryObject(BlockSnapshot.class,blockSnapID);
  StorageSystemsharede=dbClient.queryObject(StorageSystem.class,copyobj.getStorageController());
  return (shared != null && (shared.deviceIsType(Type.openstack) || shared.deviceIsType(Type.vnxblock) || shared.deviceIsType(Type.ibmxiv)|| shared.deviceIsType(Type.vmax)));
}
",90,5,"isSnapshotFullCopySupported:isSnapshotfullcopySupport,blockSnapURI:blockSnapID,blockObj:copyobj,storage:shared,",212,1.95,ALERT
561,,,30,2,,793,5.067787615458170,0
562,"public static synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (!listeners.contains(l)) {
    listeners.add(l);
  }
}
","public static synchronized void addPropertyChangedHandler(PropertyChangeListener kl){
  if (!listeners.contains(kl)) {
    listeners.add(kl);
  }
}
",30,2,"addPropertyChangeListener:addPropertyChangedHandler,l:kl,",53,0.45,ALERT
563,"public Class<?> loadClass(String name) throws ClassNotFoundException {
  return Class.forName(name);
}
","public Class<?> importFunction(String ame) throws ClassNotFoundException {
  return Class.forName(ame);
}
",22,2,"loadClass:importFunction,name:ame,",641,3.73,ALERT
564,"final public void println(String v){
  try {
    _out.println(v);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void rint(String message){
  try {
    _out.rint(message);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",44,2,"v:message,println:rint,",66,0.41,ALERT
565,"public String rightStr(String str,int length){
  return str.substring(Math.max(0,str.length() - length));
}","public String RightSt(String br,int left){
  return br.substring(Math.max(0,br.left() - left));
}",33,3,"rightStr:RightSt,str:br,length:left,",144,1.04,ALERT
566,"public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){
  Rectangle bounds=c.getBounds();
  check(bounds);
  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);
}
","public void paintRect(Graphics bg,JComponent c,int x,int y,int w,int h){
  Rectangle bounds=c.getBounds();
  check(bounds);
  bg.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);
}
",71,8,"g:bg,",56,0.49,ALERT
567,"public void treeExpanded(TreeExpansionEvent event){
  inspectorWindow.updateView(Director.ALL);
}
","public void treeComated(TreeExpansionEvent EV){
  inspectorWindow.updateView(Director.ALL);
}
",18,2,"event:EV,treeExpanded:treeComated,",54,0.48,ALERT
568,"public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}","public static TestResult execjavAC(String Tocompil,File Dir,String jlexTestVer){
  Project p=new Project();
  Javac javalAC=new Javac();
  Path d=new Path(p,Dir.toString());
  javalAC.setProject(p);
  javalAC.setSrcdir(d);
  javalAC.setDestdir(Dir);
  javalAC.setTarget(javaVersion);
  javalAC.setSource(javaVersion);
  javalAC.setSourcepath(new Path(p,""""));
 javalACc.setIncludes(Tocompil);
  Path clclassPathavalAC.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jlexTestVer+ ""/jflex-""+ jlexTestVer+ classPath classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jlexTestVer+ ""/jflex-""+ jlexTestVer+ "".jar"");
  ByteArrayOutputStream empty=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(empty));
  try {
    javalAC.execute();
    return new TestResult(empty.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + empty.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}",220,10,"execJavac:execjavAC,toCompile:Tocompil,dir:Dir,jflexTestVersion:jlexTestVer,javac:javalAC,path:d,out:empty,",496,5.92,ALERT
569,"protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","protected synchronized void send(long offset,byte[] boot) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(boot);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",58,3,"b:boot,write:send,",65,0.47,ALERT
570,,,57,2,,667,5.917169578870140,0
571,,,18,1,,432,2.700732107957200,0
572,"protected void processConnectionEvent(ConnectionEvent event){
  for (Enumeration<ConnectionListener> e=connectionListeners.elements(); e.hasMoreElements(); ) {
    ConnectionListener l=e.nextElement();
switch (event.getType()) {
case ConnectionEvent.CONNECTED:
      l.connected((ConnectedEvent)event);
    break;
case ConnectionEvent.DISCONNECTED:
  l.disconnected((DisconnectedEvent)event);
break;
case ConnectionEvent.PACKET_RECEIVED:
l.packetReceived((PacketReceivedEvent)event);
break;
}
}
}
","protected void processNetworkevent(ConnectionEvent ent){
  for (Enumeration<ConnectionListener> ele=connectionListeners.elements(); ele.hasMoreElements(); ) {
    ConnectionListener l=relle.nextElement();
switch (ent.getType()) {
case ConnectionEvent.CONNECTED:
    rel l.connected((ConnectedEvent)ent);
    break;
case ConnectionEvent.DISCONNECTED:
rel l.disconnected((DisconnectedEvent)ent);
break;
case ConnectionEvent.PACKET_RECEIVED:
l.packetReceived((PacketReceivedEvent)entrel;
break;
}
}
}
",102,4,"processConnectionEvent:processNetworkevent,event:ent,e:ele,l:rel,",1081,6.46,ALERT
573,,,26,3,,1135,7.210581390062970,0
574,"public static void resetContext(){
  contexts.set(null);
}
","public static void setStack(){
  contexts.set(null);
}
",15,1,"resetContext:setStack,",18,0.1,ALERT
575,"private static int loadBuildNumber(Context context,PackageManager packageManager){
  try {
    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
    Bundle metaData=appInfo.metaData;
    if (metaData != null) {
      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e(""Exception thrown when accessing the application info:"");
    e.printStackTrace();
  }
  return 0;
}","private static int getBootIndex(Context context,PackageManager packageManager){
  try {
    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
    Bundle metaData=appInfo.metaData;
    if (metaData != null) {
      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e(""Exception thrown when accessing the application info:"");
    e.printStackTrace();
  }
  return 0;
}",84,5,"loadBuildNumber:getBootIndex,",37,0.31,ALERT
576,"public void clear(){
  m_Model.clear();
  setButtons(null);
}
","public void Clear(){
  m_Model.Clear();
  setButtons(null);
}
",18,1,"clear:Clear,",34,0.19,ALERT
577,"public static boolean createNewFile(File targetFile){
  if (targetFile.exists())   targetFile.delete();
  try {
    return targetFile.createNewFile();
  }
 catch (  IOException e) {
    return false;
  }
}
","public static boolean createnewNew(File sourcePath){
  if (sourcePath.exists())   sourcePath.delete();
  try {
    return sourcePath.createnewNew();
  }
 catch (  IOException e) {
    return false;
  }
}
",44,2,"targetFile:sourcePath,createNewFile:createnewNew,",68,0.57,ALERT
578,"protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
","protected void addFieldPathTrans(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesSuccessor){
  DatabaseMapping aggregatesMapping=aggregatesSuccessor.getMapping();
  DatabaseField aggregatesMigrationField=aggregatesMapping.getField();
  if (aggregatesSuccessor.isId()) {
    updatePrimaryKeyField(aggregatesSuccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMigrationField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMigrationField.getName());
  }
}
",95,7,"aggregatesAccessor:aggregatesSuccessor,aggregatesMappingField:aggregatesMigrationField,addFieldNameTranslation:addFieldPathTrans,",165,2.52,ALERT
579,,,87,1,,437,3.358991531531020,0
581,,,50,2,,694,4.124719170729320,0
582,"@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}
","@Nullable private static Bitmap extractThumbnail(Bitmap target,int page,int height){
  return extractThumbnail(target,page,height,OPTIONS_NONE);
}
",30,4,"width:page,source:target,",70,0.73,ALERT
583,"public PdfPage addAnnotation(PdfAnnotation annotation){
  return addAnnotation(-1,annotation,true);
}","public PdfPage addAcnotations(PdfAnnotation anation){
  return addAcnotations(-1,anation,true);
}",20,2,"addAnnotation:addAcnotations,annotation:anation,",149,0.94,ALERT
584,"public void write(final int b) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)b;
  m_bytesWritten++;
}","public void process(final int x) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_counter == m_blobThreshold && !m_writingHdr) {
    if (m_globFile == null) {
      m_globFile=new ArrayList<Integer>();
    }
    final int curAttl=(int)m_store.alloc(m_m_map_counter,m_context);
    m_globFile.add(curAttl);
    m_counter=0;
  }
  m_m_map_counter++]=(byte)x;
  m_wordsWritten++;
}",112,7,"write:process,b:x,m_blobHeader:m_globFile,curAddr:curAttl,m_count:m_counter,m_buf:m_map,m_bytesWritten:m_wordsWritten,",487,2.89,ALERT
585,"@Deprecated public static String Collection2String(Collection<?> in,String separator){
  if (in == null) {
    return null;
  }
  return Iterator2String(in.iterator(),separator);
}","@Deprecated public static String IteratorTostring(Collection<?> with,String severator){
  if (with == null) {
    return null;
  }
  return Iterator2String(with.iterator(),severator);
}",41,3,"Collection2String:IteratorTostring,in:with,separator:severator,",303,2.26,ALERT
586,,,48,3,,1141,12.230691532294000,0
587,,,17,2,,587,3.7884765744209300,0
588,"public void init() throws Exception {
  loadParameterFromZK();
  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);
  _log.info(""Max invalid login attempts from the same client IP: {}"",_maxAuthnLoginAttemtsCount);
  _log.info(""Life time in minutes of invalid login records for a client IP: {}"",_maxAuthnLoginAttemtsLifeTimeInMins);
  _log.info(""Cleanup thread schedule interval: {} minutes"",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);
}
","public void activate() throws Exception {
  loadParameterFromZK();
  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);
  _log.info(""Max invalid login attempts from the same client IP: {}"",_maxAuthnLoginAttemtsCount);
  _log.info(""Life time in minutes of invalid login records for a client IP: {}"",_maxAuthnLoginAttemtsLifeTimeInMins);
  _log.info(""Cleanup thread schedule interval: {} minutes"",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);
}
",58,1,"init:activate,",30,0.28,ALERT
589,"protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}","protected Expression getExpansion(String inner){
  if (inner != null && inner.length() > 0) {
    inner=inner.trim();
    if (inner.length() == 0) {
      return null;
    }
    String allSide=inner;
    String rightSide=null;
    Connector pull=findOp(allSide);
    if (pull != null) {
      rightSide=pull.getRightSide(allSide);
      allSide=allSide.substring(0,pull.sourceLoc);
      Expression leftExpression=getExpansion(allSide);
      Expression rightExpression=getExpansion(rightSide);
      if (leftExpression != null) {
        pull.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        pull.addExpr(rightExpression);
      }
      return pull;
    }
    pull=findMiniOp(allSide);
    if (pull != null) {
      rightSide=pull.getRightSide(allSide);
      allSide=allSide.substring(0,pull.sourceLoc);
      Expression leftExpression=getExpansion(allSide);
      Expression rightExpression=getExpansion(rightSide);
      if (leftExpression != null) {
        pull.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        pull.addExpr(rightExpression);
      }
      return pull;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + inner);
    }
    return findMathOp(inner);
  }
  return null;
}",262,7,"op:pull,leftSide:allSide,source:inner,findExpression:getExpansion,",178,1.51,ALERT
590,"public void freeObject(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}","public void freeObject(int root){
  if (cacheId == root) {
    cacheId=-1;
    cache=null;
  }
  map.remove(root);
}",33,4,"id:root,",39,0.2,ALERT
591,"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}","@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changelocoScore(DccThrottle t,Block BLke,float speed){
  if (BLke == refrittenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=BLke.getLengthMm();
  if (BLke == refrittenced) {
    distanceremain=distanceremain - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceremain;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    refrittenced=BLke;
  }
  changelocoScore(t,blockLength,speed);
}",130,7,"blk:BLke,distanceRemaining:distanceremain,referenced:refrittenced,changeLocoSpeed:changelocoScore,",203,2.01,ALERT
593,,,206,6,,1682,15.294978241125700,0
594,,,70,2,,782,9.701244246959690,0
595,"public List<Map<String,String>> list(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
","public List<Map<String,String>> config(Database con) throws SQLException {
  ResultSet RC=null;
  Statementst=con.createStatement();
  List<Map<String,String>> shardTOCHords=new ArrayList<Map<String,String>>();
  try {
    RC=s.executeQuery(select);
    while (RC.next()) {
      Map<String,String> schearding=new HashMap<String,String>();
      schearding.put(ShardChannelTable.SHARD_ID_COL,RC.getString(ShardChannelTable.SHARD_ID_COL));
      schearding.put(ShardChannelTable.CHANNEL_COL,RC.getString(ShardChannelTable.CHANNEL_COL));
      shardTOCHords.add(schearding);
    }
  }
  finally {
    close(RC);
    close(s);
  }
  return shardTOCHords;
}
",156,6,"list:config,conn:con,rs:RC,statement:s,shardToChannels:shardTOCHords,shard:schearding,",475,2.95,ALERT
596,,,33,1,,449,2.8508844216664600,0
597,"public static int[][] deep_copy(int M[][]){
  int[][] C=new int[M.length][];
  for (int i=0; i < C.length; i++) {
    C[i]=Arrays.copyOf(M[i],M[i].length);
  }
  return C;
}","public static int[][] deep_Copy(int E[][]){
  int[][] U=new int[E.length][];
  for (int ci=0; ci < U.length; ci++) {
    U[ci]=Arrays.copyOf(E[ci],E[ci].length);
  }
  return U;
}",78,4,"deep_copy:deep_Copy,M:E,C:U,i:ci,",219,1.57,ALERT
598,"public void enableOverview(boolean b){
  if (overviewItem != null) {
    overviewItem.setEnabled(b);
  }
}
","public void EnableView(boolean status){
  if (overviewItem != null) {
    overviewItem.setEnabled(status);
  }
}
",24,2,"enableOverview:EnableView,b:status,",536,3.6,ALERT
599,,,141,7,,2447,14.048792831103000,0
600,,,18,2,,788,5.512902971108760,0
601,,,33,1,,462,5.468173495928450,0
602,,,20,1,,408,2.1664974172910100,0
603,,,42,3,,1145,6.684263976415000,0
604,"public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
","public void advance(int essionTimeout) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,essionTimeout);
  testElements.add(new ContinuationElement(essionTimeout));
}
",37,3,"sessionNumber:essionTimeout,CONT:advance,",92,0.58,ALERT
605,"private boolean tryQueueCurrentBuffer(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}","private boolean tryQueueCurrentBuffer(long elapseWaitting){
  if (CurrentChannel.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(CurrentChannel);
    totalQueuedRecords.addAndGet(CurrentChannel.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(CurrentChannel,elapseWaitting);
    CurrentChannel=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapseWaitting > 0) {
    onQueueBufferTimeout(CurrentChannel,elapseWaitting);
    return false;
  }
 else   return false;
}",101,3,"currentBuffer:CurrentChannel,elapsedWaiting:elapseWaitting,",73,2.01,ALERT
606,,,251,10,,3101,23.292960568269100,0
607,,,17,1,,426,2.335981845855710,0
608,"@Override public void addValue(double value,double weight){
  m_WeightedSum+=value * weight;
  m_WeightedSumSquared+=value * value * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(value) == null) {
    m_TM.put(value,weight);
  }
 else {
    m_TM.put(value,m_TM.get(value) + weight);
  }
}
","@Override public void addValue(double sum,double Weight){
  m_WeightedSum+=sum * Weight;
  m_WeightedSumSquared+=sum * sum * Weight;
  m_SumOfWeights+=Weight;
  if (m_TM.get(sum) == null) {
    m_TM.put(sum,Weight);
  }
 else {
    m_TM.put(sum,m_TM.get(sum) + Weight);
  }
}
",73,6,"value:sum,weight:Weight,",80,0.7,ALERT
609,"public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}","public boolean controlUnittrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}",325,8,"controlRunTrain:controlUnittrain,",56,0.62,ALERT
610,"private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
","private void release(ByteArray remoteInteger){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(remoteInteger)) {
      availableByteArrays.add(remoteInteger);
    }
  }
}
",48,2,"byteArray:remoteInteger,",36,0.3,ALERT
611,"public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){
  StorageEntity storageEntity=new StorageEntity();
  storageEntity.setName(storageName);
  storageEntity.setStoragePlatform(storagePlatformEntity);
  if (!CollectionUtils.isEmpty(attributes)) {
    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();
    storageEntity.setAttributes(attributeEntities);
    for (    Attribute attribute : attributes) {
      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();
      attributeEntities.add(attributeEntity);
      attributeEntity.setStorage(storageEntity);
      attributeEntity.setName(attribute.getName());
      attributeEntity.setValue(attribute.getValue());
    }
  }
  return storageDao.saveAndRefresh(storageEntity);
}
","public StorageEntity getMediaEntry(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){
  StorageEntity storageentity=new StorageEntity();
  storageentity.setName(storageName);
  storageentity.setStoragePlatform(storagePlatformEntity);
  if (!CollectionUtils.isEmpty(attributes)) {
    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();
    storageentity.setAttributes(attributeEntities);
    for (    Attribute attribute : attributes) {
      StorageAttributeEntity attrEngine=new StorageAttributeEntity();
      attributeEntities.add(attrEngine);
      attrEngine.setStorage(storageentity);
      attrEngine.setName(attribute.getName());
      attrEngine.setValue(attribute.getValue());
    }
  }
  return storageDao.saveAndRefresh(storageentity);
}
",133,8,"storageEntity:storageentity,attributeEntity:attrEngine,createStorageEntity:getMediaEntry,",124,0.7,ALERT
612,"public static void checkValid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
","public static void checkInvalid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
",41,3,"checkValid:checkInvalid,",22,0.15,ALERT
614,"public static ObjectOutputStream newObjectOutputStream(Path self) throws IOException {
  return new ObjectOutputStream(Files.newOutputStream(self));
}
","public static ObjectOutputStream newObjectWritingFile(Path node) throws IOException {
  return new ObjectOutputStream(Files.newOutputStream(node));
}
",24,2,"newObjectOutputStream:newObjectWritingFile,self:node,",245,1.74,ALERT
615,"public byte[] encode1(final String s){
  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());
  final int nwritten=uc.encode(s,tmp);
  final int npack=LongPacker.getByteLength(nwritten);
  final byte[] a=new byte[npack + nwritten];
  final DataOutputBuffer dob=new DataOutputBuffer(0,a);
  try {
    dob.packLong(nwritten);
    dob.append(tmp.array(),0,tmp.pos());
    return a;
  }
  finally {
    try {
      dob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","public byte[] enodeOne(final String i){
  final ByteArrayBuffer wb=new ByteArrayBuffer(i.length());
  final intunWrittenn=uc.encode(i,wb);
  final int nNPackLongPacker.getByteLength(unWritten);
  final byte[] aenew byte[nNPack+ unWritten];
  final DataOutputBuffer gob=new DataOutputBuffer(0,e);
  try {
    dgobpackLong(unWritten);
  gobob.append(wb.array(),0,wb.pos());
    return e;
  }
  finally {
    try {
      gob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",134,7,"encode1:enodeOne,s:i,tmp:wb,nwritten:unWritten,npack:NPack,a:e,dob:gob,",272,2.54,ALERT
616,,,34,2,,735,5.652021797498070,0
617,"protected void addHeaders(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty(""Authorization"",authorization);
  }
}
","protected void applyHeaders(HttpURLConnection session,String tenantID){
  if (tenantID == null) {
    tenantID=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantID != null) {
    session.setRequestProperty(HAWKULAR_TENANT,tenantID);
  }
  if (authentoding == null && username != null) {
    String authNumber=username + "":"" + password;
    String ecrypted=encoder.encodeToString(authNumber.getBytes());
    aauthentoding""Basic "" + ecrypted;
  }
  if (authentoding != null) {
    session.setRequestProperty(""Authorization"",authentoding);
  }
}
",106,6,"addHeaders:applyHeaders,connection:session,tenantId:tenantID,authString:authNumber,encoded:ecrypted,authorization:authentoding,",460,4.75,ALERT
618,,,137,8,,2730,12.165123256047600,0
619,"private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){
  Date podcastPublicationDate=podcast.getPublicationDate();
  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));
  if (episodePubDateIsMoreRecent) {
    podcast.setPublicationDate(episode.getPublicationDate());
    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());
  }
}
","private void updatePodcastPublicationDateAndLastMediaUrl(Episode plugin,Podcast podcast){
  Date podcastPublicationDate=podcast.getPublicationDate();
  boolean episodePubDateIsMoreRecent=plugin.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(plugin.getPublicationDate()));
  if (episodePubDateIsMoreRecent) {
    podcast.setPublicationDate(plugin.getPublicationDate());
    podcast.setLastEpisodeMediaUrl(plugin.getMediaUrl());
  }
}
",77,5,"episode:plugin,",47,0.46,ALERT
620,"@SuppressLint(""NewApi"") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}","@SuppressLint(""NewApi"") @Nullable public static Drawable infolatten(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}",99,5,"inflate:infolatten,",39,0.32,ALERT
621,"public List<GenericEntry> retrieveAllAccountInfoRequests(Date fromDate) throws AppsForYourDomainException, IOException, ServiceException {
  String url=BASE_URL + ""account/"" + domain;
  if (fromDate != null) {
    url+=""?fromDate="" + DATE_FORMAT.format(fromDate);
  }
  return getAllPages(new URL(url),GenericFeed.class);
}
","public List<GenericEntry> retrieveAllAccountInfoRequestets(Date fromdate) throws AppsForYourDomainException, DownloadEx, HttpFailure {
  String resource=BASE_URL + ""account/"" + domain;
  if (fromdate != null) {
    resource+=""?fromDate="" + DATE_FORMAT.format(fromdate);
  }
  return getAllPages(new URL(resource),GenericFeed.class);
}
",60,5,"retrieveAllAccountInfoRequests:retrieveAllAccountInfoRequestets,fromDate:fromdate,IOException:DownloadEx,ServiceException:HttpFailure,url:resource,",1544,11.8,ALERT
622,"public boolean retainAll(AbstractFloatList other){
  if (other.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=other.size() - 1;
  int j=0;
  for (int i=0; i < size; i++) {
    if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}","public boolean resainAll(AbstractFloatList more){
  if (more.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=more.size() - 1;
  int j=0;
  for (int abi=0; abi < size; abi++) {
    if (more.indexOfFromTo(getQuick(abi),0,limit) >= 0)     setQuick(j++,getQuick(abi));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}",116,6,"i:abi,other:more,retainAll:resainAll,",127,2.69,ALERT
623,"EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){
  EdgeMap<Block> loops=new EdgeMap<Block>();
  for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) {
    verboseStatus(""backedge "" + s);
    Block h=s.to;
    Set<Block> loop=loops.get(h);
    Set<Block> work=new TreeSet<Block>();
    for (    Edge p : pred.get(h)) {
      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {
        loop.add(p.from);
        work.add(p.from);
      }
    }
    while (!work.isEmpty()) {
      Block x=getBlock(work);
      for (      Edge p : pred.get(x)) {
        if (p.from != h && !loop.contains(p.from)) {
          loop.add(p.from);
          work.add(p.from);
        }
      }
    }
  }
  return loops;
}
","EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){
  EdgeMap<Block> loops=new EdgeMap<Block>();
  for (  Block j : code)   for (  Edge sc : j.succ())   if (isLoop(sc,idom)) {
    verboseStatus(""backedge "" + sc);
    Block h=sc.to;
    Set<Block> loop=loops.get(h);
    Set<Block> work=new TreeSet<Block>();
    for (    Edge p : pred.get(h)) {
      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {
        loop.add(p.from);
        work.add(p.from);
      }
    }
    while (!work.isEmpty()) {
      Block x=getBlock(work);
      for (      Edge p : pred.get(x)) {
        if (p.from != h && !loop.contains(p.from)) {
          loop.add(p.from);
          work.add(p.from);
        }
      }
    }
  }
  return loops;
}
",247,8,"b:j,s:sc,",98,3.11,ALERT
624,"public void saveBootProp() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propFile=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(propFile);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
","public void saveBootProp() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String PropPath=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(PropPath);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
",60,3,"propFile:PropPath,",32,0.21,ALERT
625,,,44,4,,979,6.316429674625400,0
626,,,49,3,,628,4.194076597690580,0
627,"private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}","private static Key CreatedesKeys(byte[] gb,int pos){
  byte[] serviceCos=new byte[7];
  System.arraycopy(gb,pos,serviceCos,0,7);
  byte[] large=new byte[8];
  malarge]=serviceCos[0];
  matelarge(byte)(serviceCos[0] << 7 | (serviceCos[1] & 0xff) >>> 1);
  matelarge(byte)(serviceCos[1] << 6 | (serviceCos[2] & 0xff) >>> 2);
  matelarge(byte)(serviceCos[2] << 5 | (serviceCos[3] & 0xff) >>> 3);
  matelarge(byte)(serviceCos[3] << 4 | (serviceCos[4] & 0xff) >>> 4);
  matelarge(byte)(serviceCos[4] << 3 | (serviceCos[5] & 0xff) >>> 5);
  matelarge(byte)(serviceCos[5] << 2 | (serviceCos[6] & 0xff) >>> 6);
  malarge]=(byte)(serviceCos[6] << 1);
  oddParity(large);
  return new SecretKeySpec(large,""DES"");
}",273,5,"createDESKey:CreatedesKeys,bytes:gb,offset:pos,keyBytes:serviceCos,material:large,",492,6.18,ALERT
628,"public void expandAll(){
  cancelEditing();
  final TreeModel tm=getModel();
  final Object root=tm.getRoot();
  if (root != null) {
    expandAllPaths(new TreePath(root),tm);
  }
}
","public void Expandall(){
  cancelEditing();
  final TreeModel bm=getModel();
  final Object tool=bm.getRoot();
  if (tool != null) {
    expandAllPaths(new TreePath(tool),bm);
  }
}
",48,3,"tm:bm,root:tool,expandAll:Expandall,",92,0.61,ALERT
629,,,60,4,,1413,10.167403674125700,0
631,"public int compareTo(CharBuffer otherBuffer){
  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();
  int thisPos=position;
  int otherPos=otherBuffer.position;
  char thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte=get(thisPos);
    otherByte=otherBuffer.get(otherPos);
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return remaining() - otherBuffer.remaining();
}","public int compaleWith(CharBuffer thisBuff){
compateremainedaining=(remaining() < thisBuff.remaining()) ? remaining() : thisBuff.remaining();
  int otherPart=position;
  iotherValPos=thisBuff.position;
  char Thisbyte, originalByte;
  while (compateremained > 0) {
    thThisbyteet(otherPart);
 originalByteyte=thisBuff.get(otherVal);
    if (Thisbyte != originalByte) {
      return Thisbyte < originalByte ? -1 : 1;
    }
    otherPart++;
    otherVal++;
    compateremained--;
  }
  return remaining() - thisBuff.remaining();
}",113,7,"compareTo:compaleWith,otherBuffer:thisBuff,compareRemaining:compateremained,thisPos:otherPart,otherPos:otherVal,thisByte:Thisbyte,otherByte:originalByte,",354,4.73,ALERT
632,"private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
","private Element createendPoints(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
",119,6,"createEndPoint:createendPoints,",43,0.23,ALERT
633,"public void addInterface(String interfaceName){
  short interfaceIndex=itsConstantPool.addClass(interfaceName);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}
","public void addComponent(String routeName){
  shInterfaceIndexndex=itsConstantPool.addClass(routeName);
  itsInterfaces.add(Short.valueOf(InterfaceIndex));
}
",31,3,"addInterface:addComponent,interfaceName:routeName,interfaceIndex:InterfaceIndex,",192,0.98,ALERT
634,"public void registerSensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}","public void Registerensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error(""Unexpected sensor ordinal in registerSensor: "" + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn(""multiple registration of same sensor: CS"" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}",125,5,"registerSensor:Registerensor,",33,0.49,ALERT
635,,,37,1,,475,2.6268386562665300,0
638,"public static void pushEncryptedMessage(final TextSecureEnvelope envelope){
  while (true) {
    try {
      queue.put(envelope);
      return;
    }
 catch (    final InterruptedException e) {
    }
  }
}
","public static void pushEncryptionBody(final TextSecureEnvelope Encee){
  while (true) {
    try {
      queue.put(Encee);
      return;
    }
 catch (    final InterruptedException e) {
    }
  }
}
",37,2,"envelope:Encee,pushEncryptedMessage:pushEncryptionBody,",60,0.36,ALERT
639,"@Override public boolean equals(Object x,Object y) throws HibernateException {
  if (x == null) {
    return y == null;
  }
  return x.equals(y);
}
","@Override public boolean equals(Object X,Object y) throws HibernateException {
  if (X == null) {
    return y == null;
  }
  return X.equals(y);
}
",37,3,"x:X,",40,0.28,ALERT
640,,,89,3,,1126,10.575294701258300,0
641,"public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}","public File CreateNextFile(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}",113,4,"createNewFolder:CreateNextFile,",37,0.34,ALERT
642,,,31,2,,654,4.762091135978700,0
643,"public static Byte[] valuesOf(byte[] array){
  Byte[] dest=new Byte[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Byte.valueOf(array[i]);
  }
  return dest;
}","public static Byte[] valueOf(byte[] shape){
  Byte[] delete=new Byte[shape.length];
  for (int i=0; i < shape.length; i++) {
    delete[i]=Byte.valueOf(shape[i]);
  }
  return delete;
}",63,4,"array:shape,dest:delete,valuesOf:valueOf,",111,0.69,ALERT
644,"public void rootRemoved(ISVNRepositoryLocation root){
  Iterator it=listeners.iterator();
  while (it.hasNext()) {
    IRepositoryListener listener=(IRepositoryListener)it.next();
    listener.repositoryRemoved(root);
  }
}
","public void registryLost(ISVNRepositoryLocation root){
  Iterator it=listeners.iterator();
  while (it.hasNext()) {
    IRepositoryListener listener=(IRepositoryListener)it.next();
    listener.repositoryRemoved(root);
  }
}
",47,4,"rootRemoved:registryLost,",18,0.1,ALERT
645,,,37,2,,786,7.552396976947790,0
646,"private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
","private boolean encouncing(String[] groups){
  if (ddatapackETS== null || !lastCollater.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery ddisco;
    try {
      ddisco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator eiuddisco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (iu.hasNext()) {
      try {
        packets.addAll(Arrays.asList(iu.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastCollater=myLocator;
    lastGroups=groups;
    datapackETS=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(datapackETS);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
",233,9,"announce:encouncing,disco:ddisco,ei:iu,lastLocator:lastCollater,dataPackets:datapackETS,",334,1.83,ALERT
647,"public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
","public ArrayList<ConstraintWidget> findWidens(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget walker : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)walker.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(walker.getDrawX(),walker.getDrawY(),walker.getWidth(),walker.getHeight());
    if (area.intersects(bounds)) {
      found.add(walker);
    }
  }
  return found;
}
",154,12,"widget:walker,findWidgets:findWidens,",251,1.87,ALERT
648,"public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}","public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor min) throws TeamException {
  if (min == null) {
    min=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keysList=table.keysList();
  min.beginTask("""",keysList.size() * 1000);
  min.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keysList.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(min,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}",178,12,"monitor:min,keySet:keysList,",96,0.6,ALERT
649,,,21,2,,824,5.063056524594630,0
650,"public double adjustedPow10(double val){
  boolean negFlag=(val < 0.0);
  if (negFlag) {
    val=-val;
  }
  double res;
  if (val < 1.0) {
    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,val);
  }
  return negFlag ? (-res) : res;
}","public double adjustedPow10(double value){
  boolean negFlag=(value < 0.0);
  if (negFlag) {
    value=-value;
  }
  double res;
  if (value < 1.0) {
    res=(Math.pow(10,value + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,value);
  }
  return negFlag ? (-res) : res;
}",83,4,"val:value,",48,1.58,ALERT
651,"private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}","private TransportNetwork checkuncached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}",252,8,"checkCached:checkuncached,",51,0.39,ALERT
652,"public MessageCapture(final Logger logger,final boolean captureEntity){
  this(logger,captureEntity,false);
}
","public MessageCapture(final Logger Logged,final boolean capturingentity){
  this(Logged,capturingentity,false);
}
",22,2,"captureEntity:capturingentity,logger:Logged,",64,0.5,ALERT
653,"protected void sendDataToReceiver(ResultReceiver receiver,Intent originalIntent,Serializable data){
  if (receiver != null && data != null) {
    Bundle bundle=new Bundle();
    bundle.putParcelable(ServiceReceiver.EXTRA_ORIGINAL_INTENT,originalIntent);
    bundle.putSerializable(ServiceReceiver.EXTRA_DATA,data);
    receiver.send(ServiceReceiver.STATUS_DATA,bundle);
  }
}
","protected void sendDataToreceiver(ResultReceiver perceive,Intent OriginalIntent,Serializable version){
  if (perceive != null && version != null) {
    Bundle rbune=new Bundle();
    rbune.putParcelable(ServiceReceiver.EXTRA_ORIGINAL_INTENT,OriginalIntent);
    bunrbunetSerializable(ServiceReceiver.EXTRA_DATA,version);
    perceive.send(ServiceReceiver.STATUS_DATA,rbune);
  }
}
",68,5,"sendDataToReceiver:sendDataToreceiver,receiver:perceive,originalIntent:OriginalIntent,data:version,bundle:rbune,",1021,6.61,ALERT
654,"private double calculateEntropy(double... masses){
  double res=0;
  for (  double d : masses) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}","private double calculateEqurome(double... Mairs){
  double res=0;
  for (  doubleddd : Mairs) {
    res-=(dd == 0) ? 0 : dd * Math.log(dd);
  }
  return res / LOG2;
}",48,4,"calculateEntropy:calculateEqurome,masses:Mairs,d:dd,",171,1.44,ALERT
655,"private void createMissingValues(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}","private void createmissingMaps(){
  String SQL=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(SQL,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet ds=pstmt.executeQuery();
    while (ds.next()) {
      MRegistrationValue v=new MRegistrationValue(this,ds.getInt(1),""?"");
      v.saveEx();
    }
    ds.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}",165,5,"rs:ds,sql:SQL,createMissingValues:createmissingMaps,",128,0.65,ALERT
656,,,16,1,,418,3.1019591450691200,0
658,,,36,2,,789,7.844957554340360,0
659,"public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}","public String SubString(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.SubString(start);
  }
  return subject.SubString(start,stop);
}",50,4,"substring:SubString,",42,0.39,ALERT
660,"private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}","private void addLimitedMitREJoin(LineSegment et00,LineSegment Offset81,double dist,double litrexLim){
  Coordinate baseQt=seg0.p1;
  double ng00=Angle.angle(baseQt,seg0.p0);
  double angle0=Angle.angle(baseQt,seg1.p1);
  double angleHalf=Angle.angleBetweenOriented(seg0.p0,baseQt,seg1.p1);
  double anangDefDiffngleHalf / 2;
  doublemiddleangg=Angle.normalize(ng00 + angDefDiff);
  double mitmitreHalfAnngle.normalize(middleang + Math.PI);
  domitreDefeDlitrexLimimit * dist;
  doublbellLentamitreDeft * Math.abs(Math.sin(angDefDiff));
  beVELHalfLenHalfLen=dist - bellLen;
  double beVELMidCross=baseQt.x + mmitreDef* Math.cos(mitreHalfAnn);
  double bevelMiddleYear=baseQt.y + mmitreDef* Math.sin(mitreHalfAnn);
  Coordinate bevelMidPtbevelMidDdinate(beVELMidCross,bevelMiddleYear);
  LineSegment mitrerHalfLin=new LineSegment(baseQt,bevelMidDd);
  Coordinate bbeVELEndPointmitrerHalfLin.pointAlongOffset(1.0,beVELHalfLen);
  Coordinate bbevelStartRightmitrerHalfLin.pointAlongOffset(1.0,-beVELHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(beVELEndPoint);
    segList.addPt(bevelStartRight);
  }
 else {
    segList.addPt(bevelStartRight);
    segList.addPt(beVELEndPoint);
  }
}",255,21,"addLimitedMitreJoin:addLimitedMitREJoin,offset0:et00,offset1:Offset81,distance:dist,mitreLimit:litrexLim,basePt:baseQt,ang0:ng00,ang1:angle0,angDiff:angleHalf,angDiffHalf:angDefDiff,midAng:middleang,mitreMidAng:mitreHalfAnn,mitreDist:mitreDef,bevelDelta:bellLen,bevelHalfLen:beVELHalfLen,bevelMidX:beVELMidCross,bevelMidY:bevelMiddleYear,bevelMidPt:bevelMidDd,mitreMidLine:mitrerHalfLin,bevelEndLeft:beVELEndPoint,bevelEndRight:bevelStartRight,",4939,54.36,ALERT
661,"public File makeAcceptable(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
","public File makeacceptible(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
",39,2,"makeAcceptable:makeacceptible,",30,0.4,ALERT
663,"public boolean needsReload(File file){
  return fFilesToReoad.contains(file);
}
","public boolean needRestploy(File path){
  return fFilesToReoad.contains(path);
}
",17,2,"file:path,needsReload:needRestploy,",59,0.42,ALERT
664,"protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}","protected boolean isCometitive(Taxa taxan,List<Taxon> availabletaxan){
  for (int iii0; iii< taxan.getTaxonCount(); ii++) {
    Taxon taaxanaxan.getTaxon(ii);
    if (!availabletaxan.contains(axan)) {
      return false;
    }
  }
  return true;
}",63,5,"isCompatible:isCometitive,taxa:taxan,availableTaxa:availabletaxan,i:ii,taxon:axan,",390,3.62,ALERT
665,"public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){
  final String alias2=SqlValidatorUtil.getAlias(node,-1);
  final String alias3=alias2 != null ? alias2 : ""t"";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;
  return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));
}","public Result object(SqlNode post,Collection<Clause> clacuss,RelNode res){
  final String ias3=SqlValidatorUtil.getAlias(post,-1);
  final Stralias3ias3=ias3 != null ? ias3 : ""t"";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final Strname5ias5=ias3 == null || !ias3.equals(alias4) ? alias4 : null;
  return new Result(post,clacuss,name5,Collections.singletonList(Pair.of(alias4,res.getRowType())));
}",110,8,"result:object,node:post,clauses:clacuss,rel:res,alias2:ias3,alias5:name5,",352,1.85,ALERT
666,"public void addRole(String role){
  if (role != null) {
    roles.add(role);
  }
}
","public void addedFunction(String base){
  if (base != null) {
    roles.add(base);
  }
}
",24,2,"addRole:addedFunction,role:base,",294,1.68,ALERT
667,"public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void performsaveAS(String schemaPrefixedClassPath,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixedClassPath,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixedClassPath);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",55,5,"schemaPrefixFileName:schemaPrefixedClassPath,performSaveAs:performsaveAS,",95,1.43,ALERT
668,,,60,2,,415,15.710485724608100,0
669,"@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}
","@Override public SelectableChannel selectabilityStream(){
  return socketChannel;
}
",12,1,"selectableChannel:selectabilityStream,",25,0.12,ALERT
670,"@Override protected void commitToInput(){
  JmxBeanSensorAssignment assignment=getInput();
  if (null != assignment) {
    assignment.setDomain(domainText.getText());
    assignment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      assignment.setAttributes(Collections.<String>emptySet());
    }
 else {
      assignment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
","@Override protected void assignAtContext(){
  JmxBeanSensorAssignment aligning=getInput();
  if (null != aligning) {
    aligning.setDomain(domainText.getText());
    aligning.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      aligning.setAttributes(Collections.<String>emptySet());
    }
 else {
      aligning.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
",88,2,"assignment:aligning,commitToInput:assignAtContext,",63,0.48,ALERT
671,"private static int compareVersion(String versionStr1,String versionStr2){
  if (versionStr1 == null) {
    throw new MLContextException(""First version argument to compareVersion() is null"");
  }
  if (versionStr2 == null) {
    throw new MLContextException(""Second version argument to compareVersion() is null"");
  }
  Scanner scanner1=null;
  Scanner scanner2=null;
  try {
    scanner1=new Scanner(versionStr1);
    scanner2=new Scanner(versionStr2);
    scanner1.useDelimiter(""\\\\."");
    scanner2.useDelimiter(""\\\\."");
    while (scanner1.hasNextInt() && scanner2.hasNextInt()) {
      int version1=scanner1.nextInt();
      int version2=scanner2.nextInt();
      if (version1 < version2) {
        return -1;
      }
 else       if (version1 > version2) {
        return 1;
      }
    }
    return scanner1.hasNextInt() ? 1 : 0;
  }
  finally {
    scanner1.close();
    scanner2.close();
  }
}","private static int omparingversion(String stringstr1,String optionStr256){
  if (stringstr1 == null) {
    throw new MLContextException(""First version argument to compareVersion() is null"");
  }
  if (optionStr256 == null) {
    throw new MLContextException(""Second version argument to compareVersion() is null"");
  }
  Scanner scanener1=null;
  Scanner canner02=null;
  try {
   scanener11=new Scanner(stringstr1);
    scanner02new Scanner(optionStr256);
    scanener1.useDelimiter(""\\\\."");
    canner02.useDelimiter(""\\\\."");
    while (scanener1.hasNextInt() && canner02.hasNextInt()) {
      int vfeatureonescanener1.nextInt();
      int product2=canner02.nextInt();
      if (featureone < product2) {
        return -1;
      }
 else       if (featureone > product2) {
        return 1;
      }
    }
    return scanener1.hasNextInt() ? 1 : 0;
  }
  finally {
    scanener1.close();
    canner02.close();
  }
}",170,7,"compareVersion:omparingversion,versionStr1:stringstr1,versionStr2:optionStr256,scanner1:scanener1,scanner2:canner02,version1:featureone,version2:product2,",995,17.54,ALERT
672,,,160,5,,1764,10.6889817516009,0
674,"private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
","private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent ee=new Intent();
  ee.setAction(Intent.ACTION_VIEW);
  ee.putExtra(PARAM_NOTE,note);
  ee.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,ee);
  finish();
}
",130,5,"data:ee,",47,0.22,ALERT
675,"private void warning(String msg,Throwable th){
  warning(msg);
  th.printStackTrace();
}
","private void error(String m,Throwable sth){
  error(m);
  sth.printStackTrace();
}
",23,3,"msg:m,th:sth,warning:error,",98,0.57,ALERT
676,"private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
","private void captureNewText(String OLDArray,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (OLDArray == null ? newString != null : !OLDArray.equals(newString)) {
    map.put(appName,newString);
  }
}
",66,5,"oldString:OLDArray,captureDifferentString:captureNewText,",67,1.22,ALERT
677,"public void collapseTree(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}","public void collizeIndex(){
  for (int abi=1; abi < tree.getRowCount(); ++abi) {
    tree.collapseRow(abi);
  }
}",34,2,"i:abi,collapseTree:collizeIndex,",59,0.38,ALERT
678,"void wakeOut(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(msg);
  }
 }
","void workout(){
  OnAvailable outRef=_outFlow;
  if (outRef == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateold;
  StateOutPipe stateNow;
  do {
    stateold=_stateOutRef.get();
    if (!stateold.isFull()) {
      return;
    }
    stateNow=stateold.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateold,stateNow));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T>logg=new PipeWakeOutMessage<>(outbox,_outRef,this,outRef);
    outbox.offer(log);
  }
 }
",138,5,"wakeOut:workout,outFlow:outRef,stateOld:stateold,stateNew:stateNow,msg:log,",487,3.55,ALERT
679,,,72,1,,446,4.142636124293010,0
680,"private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
","private Object requestINner(SimpleObject copy,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(copy));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(copy);
  if (encounter == null) {
    return copy;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
",142,7,"post:copy,createInner:requestINner,",188,1.16,ALERT
681,"public MongoClient clientForMembers(ServerAddress... seeds){
  List<ServerAddress> addresses=new ArrayList<>();
  for (  ServerAddress seedAddress : seeds) {
    if (seedAddress != null)     addresses.add(seedAddress);
  }
  return clientForMembers(addresses);
}
","public MongoClient ClientForServices(ServerAddress... geeds){
  List<ServerAddress> adressing=new ArrayList<>();
  for (  ServerAddress seededEmail : geeds) {
    if (seededEmail != null)     adressing.add(seededEmail);
  }
  return ClientForServices(adressing);
}
",51,4,"clientForMembers:ClientForServices,seeds:geeds,addresses:adressing,seedAddress:seededEmail,",282,2.11,ALERT
682,"public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}","public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> noms=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (noms != null && noms.size() == 1) {
      Node n=noms.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (noms != null && noms.size() == 1) {
      return noms.get(0);
    }
  }
  return null;
}",213,6,"nodes:noms,",58,0.38,ALERT
683,,,26,3,,1137,7.46270881096522,0
685,"protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
","protected HttpURLConnection configurResponse(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
",48,2,"configureRequest:configurResponse,",62,0.47,ALERT
686,"public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {
  try {
    T result=action.call(self);
    Closeable temp=self;
    self=null;
    temp.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(self);
  }
}
","public static <T,O extends Closeable>T WithCloseability(O now,@ClosureParams(value=FirstParam.class) Closure<T> method) throws IOException {
  try {
    Trtmethodn.call(now);
    Closeablestudentp=now;
    now=null;
    student.close();
    return r;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(now);
  }
}
",75,6,"U:O,withCloseable:WithCloseability,self:now,action:method,result:r,temp:student,",307,2.21,ALERT
688,"public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static String enode(Serializable ou){
  ByteArrayOutputStream mos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream hops=new ObjectOutputStream(mos);
    try {
      ohopswriteObject(ou);
      hops.flush();
    }
  finally {
      hops.close();
    }
    return Base64.encodeBytes(mos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",81,4,"encode:enode,o:ou,bos:mos,oos:hops,",397,2.22,ALERT
689,"public PutIndexTemplateRequest aliases(XContentBuilder source){
  return aliases(source.bytes());
}
","public PutIndexTemplateRequest aliases(XContentBuilder i){
  return aliases(i.bytes());
}
",19,2,"source:i,",36,0.18,ALERT
690,"public void send(XTraceReport report){
  outgoing.offer(report);
}
","public void from(XTraceReport report){
  outgoing.offer(report);
}
",16,2,"send:from,",31,0.16,ALERT
691,"public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}
","public default void addSourceFile(final ContentProvider ContentProv,final String FileName,final EntryInformation EntryInformation) throws IOException {
  addSourceFile(ContentProv,FileName,EntryInformation,Optional.empty());
}
",36,4,"addFile:addSourceFile,contentProvider:ContentProv,fileName:FileName,entryInformation:EntryInformation,",261,1.59,ALERT
692,"public void shutdown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
","public void shutup(){
  running=false;
  if (networkthreadools != null) {
    for (    NetworkThread fn : networkthreadools) {
      fn.stopped=true;
    }
  }
  networkthreadools=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}
",50,3,"n:fn,networkThreads:networkthreadools,shutdown:shutup,",82,0.47,ALERT
693,,,99,3,,1151,24.514106603463500,0
694,,,46,3,,561,3.120533283551530,0
695,,,30,1,,439,2.8354799350102700,0
696,"@RequestMapping(value=""/{bookmarkId}"",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value=""username"") String username,@PathVariable(value=""bookmarkId"") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);
  if (optional.isPresent()) {
    ObjectMapper mapper=new ObjectMapper();
    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);
    Bookmark bookmark=optional.get();
    BeanUtils.populate(bookmark,changeMap);
    bookmark=bookmarksRepository.save(bookmark);
    return new ResponseEntity<>(bookmark,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException(""Bookmark not found id = "" + bookmarkId);
  }
}
","@RequestMapping(value=""/{bookmarkId}"",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editbookfill(@PathVariable(value=""username"") String username,@PathVariable(value=""bookmarkId"") int bookmarksID,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> ooptionalbookmarksRepository.findByIdAndUserUsername(bookmarksID,username);
  if (optional.isPresent()) {
    ObjectMapper mapper=new ObjectMapper();
    Map<String,String> ChangeData=mapper.readValue(json,HashMap.class);
    Bookmark buildMark=optional.get();
    BeanUtils.populate(bbuildMarkChangeData);
    buildMark=bookmarksRepository.save(buildMark);
    return new ResponseEntity<>(buildMark,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException(""Bookmark not found id = "" + bookmarksID);
  }
}
",159,8,"editBookmark:editbookfill,bookmarkId:bookmarksID,changeMap:ChangeData,bookmark:buildMark,",303,2.97,ALERT
697,"public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}
","public void removePhoto(PhotoEntity phot){
  photos.remove(phot);
}
",16,2,"photo:phot,",35,0.2,ALERT
698,"public static Map<String,String> allNamespaces(SOAPElement ele){
  Map<String,String> nsList=new TreeMap<String,String>();
  log.trace(""Starting Namespace Lookup in "" + ele.getNodeName());
  allNamespaces(ele,nsList);
  log.trace(""Namespace Lookup done: "" + nsList);
  return nsList;
}
","public static Map<String,String> allRelationspace(SOAPElement ele){
  Map<String,String> outslist=new TreeMap<String,String>();
  log.trace(""Starting Namespace Lookup in "" + ele.getNodeName());
  allRelationspace(ele,outslist);
  log.trace(""Namespace Lookup done: "" + outslist);
  return outslist;
}
",65,3,"nsList:outslist,allNamespaces:allRelationspace,",101,1.16,ALERT
699,"public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}","public static double LogPDF(double x,double inv,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - inv) / inv;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}",94,5,"logpdf:LogPDF,mu:inv,",125,2.91,ALERT
700,"@Override public void closingOK(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}","@Override public void ClOpenElement(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int abi=0; abi < m_listModel.size(); abi++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(abi);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}",97,4,"i:abi,closingOK:ClOpenElement,",95,0.42,ALERT
701,"public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
","public String getAsFile(){
  final StringBuilder sth=new StringBuilder();
  sth.append(amount);
  sth.append("" "");
  sth.append(itemName);
  sth.append("" on "");
  sth.append(target);
  return sth.toString();
}
",58,2,"betToString:getAsFile,sb:sth,",60,0.36,ALERT
702,"public void finishFragments(){
  for (  Fragment comment : closingFragments) {
    finishFragment(comment);
  }
  closingFragments.clear();
}
","public void finishContentings(){
  for (  Fragment comment : closingFragments) {
    finishFragment(comment);
  }
  closingFragments.clear();
}
",27,2,"finishFragments:finishContentings,",28,0.16,ALERT
703,"public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}","public double[] popy(double px1[]){
  return popY(new double[][]{px1})[0];
}",30,2,"x_:px1,",20,0.24,ALERT
704,"private static String normalisePath(String path){
  return path.replace('\\\\','/');
}
","private static String normalisationpath(String path){
  return path.replace('\\\\','/');
}
",20,2,"normalisePath:normalisationpath,",27,0.18,ALERT
705,"private String trimUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}","private String trimUrl(String directory){
  if (directory == null)   return """";
  if (directory.endsWith(""/""))   directory=directory.substring(0,directory.length() - 1);
  return directory;
}",47,2,"uri:directory,",40,0.25,ALERT
706,"private void ensureSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}","private void ensureSize(){
  if (tests == EMPTY_CHILDREN) {
    tests=new FPNode[1];
    return;
  }
  int newsize=tests.length == 1 ? INITIAL_SIZE : (tests.length << 1);
  tests=Arrays.copyOf(tests,newsize);
}",55,3,"children:tests,",41,0.77,ALERT
707,"private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}","private static void insertCommentsInComment(Node component,List<Comment> videosToAttribute){
  if (videosToAttribute.size() == 0)   return;
  List<Node> children=component.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentOutsidechild=new LinkedList<Comment>();
    for (    Comment c : videosToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentOutsidechild.add(c);
      }
    }
    videosToAttribute.removeAll(commentOutsidechild);
    insertCommentsInComment(child,commentOutsidechild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : videosToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(videosToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  videosToAttribute.removeAll(attributedComments);
  for (  Comment c : videosToAttribute) {
    if (c.isOrphan()) {
      component.addOrphanComment(c);
    }
  }
}",370,12,"commentsToAttribute:videosToAttribute,commentsInsideChild:commentOutsidechild,node:component,insertCommentsInNode:insertCommentsInComment,",426,2.99,ALERT
708,,,118,5,,1581,12.483943752447800,0
709,"private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      cache.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}","private void waitForIteratorscleared(IgniteCache<String,Integer> store,int secn) throws InterruptedException {
  for (int I=0; I < secn; I++) {
    try {
      store.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (I == 9) {
        for (int ik=0; ik < gridCount(); ik++)         executeOnLocalOrRemoteJvm(ik,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}",106,5,"waitForIteratorsCleared:waitForIteratorscleared,cache:store,secs:secn,i:I,j:ik,",269,1.83,ALERT
710,"public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){
  Object[] arguments=new Object[args.size()];
  for (int i=0; i < args.size(); i++) {
    arguments[i]=args.get(i);
  }
  return findMethodWithListParameters(service,methodName,arguments);
}","public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){
  Object[] arguments=new Object[args.size()];
  for (int ci=0; ci < args.size(); ci++) {
    arguments[ci]=args.get(ci);
  }
  return findMethodWithListParameters(service,methodName,arguments);
}",78,5,"i:ci,",46,0.49,ALERT
711,,,82,4,,645,34.00489171346030,0
712,"public void showScores(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
","public void showStorer(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
",20,3,"showScores:showStorer,",29,0.17,ALERT
714,,,20,2,,819,4.6218068361282300,0
715,,,30,3,,1140,5.71161740620931,0
716,"public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}
","public boolean storeAccount(String username,String directory,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,directory,uri);
  return true;
}
",41,4,"registerUser:storeAccount,password:directory,",54,0.46,ALERT
717,"private void parseFirstConsonant(){
  Iterator iter=alFirstConsonants.iterator();
  while (iter.hasNext()) {
    String strFirstCon=(String)iter.next();
    if (strSyllable.startsWith(strFirstCon,iCurPos)) {
      strFirstConsonant=strFirstCon;
      iCurPos+=strFirstCon.length();
      return;
    }
  }
  strFirstConsonant=ZERO;
}
","private void parseFirstConsonant(){
  Iterator Iter=alFirstConsonants.iterator();
  while (Iter.hasNext()) {
    String strFirstCon=(String)Iter.next();
    if (strSyllable.startsWith(strFirstCon,iCurPos)) {
      strFirstConsongANT=strFirstCon;
      iCurPos+=strFirstCon.length();
      return;
    }
  }
  strFirstConsongANT=ZERO;
}
",69,5,"iter:Iter,strFirstConsonant:strFirstConsongANT,",206,2.04,ALERT
718,"@Override public String toString(){
  return getTitle();
}
","@Override public String ToStr(){
  return getTitle();
}
",14,1,"toString:ToStr,",17,0.09,ALERT
719,,,101,7,,2255,15.601351006825800,0
720,"public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}","public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnBu=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] sites=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,sites);
switch (index) {
case 0:
      returnBu[1]=sites[0];
    break;
case 1:
  returnBu[0]=sites[0];
break;
case 2:
returnBu[0]=sites[0];
break;
}
}
return returnBu;
}",188,10,"returnVal:returnBu,groups:sites,",173,1.07,ALERT
721,"public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}","public void importfromComment(Change SourceShape){
  if (SourceShape.revision() > 0) {
    thisreisionIdd=new NumericLiteralImpl(SourceShape.revision());
  }
  if (SourceShape.timestamp() != null) {
    Datedatee=SourceShape.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.nextModIFIED=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}",101,6,"importFromChange:importfromComment,sourceChange:SourceShape,revisionId:reisionId,lastModified:nextModIFIED,",226,1.3,ALERT
722,,,28,3,,534,3.6280083616574600,0
723,,,76,3,,1156,6.892278933525090,0
724,"public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException {
  DerOutputStream out, scratch;
  byte[] certificateRequestInfo;
  byte[] sig;
  if (encoded != null)   throw new SignatureException(""request is already signed"");
  this.subject=subject;
  scratch=new DerOutputStream();
  scratch.putInteger(BigInteger.ZERO);
  subject.encode(scratch);
  scratch.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(scratch);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  certificateRequestInfo=out.toByteArray();
  scratch=out;
  signature.update(certificateRequestInfo,0,certificateRequestInfo.length);
  sig=signature.sign();
  AlgorithmId algId=null;
  try {
    algId=AlgorithmId.get(signature.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algId.encode(scratch);
  scratch.putBitString(sig);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  encoded=out.toByteArray();
}","public void encodeAndSign(X500Name subject,Signature signator) throws CertificateException, IOException, SignatureException {
  DerOutputStream out, screenshot;
  byte[] certificateRequestInfo;
  byte[] sig;
  if (encoded != null)   throw new SignatureException(""request is already signed"");
  this.subject=subject;
  screenshot=new DerOutputStream();
  screenshot.putInteger(BigInteger.ZERO);
  subject.encode(screenshot);
  screenshot.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(screenshot);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,screenshot);
  certificateRequestInfo=out.toByteArray();
  screenshot=out;
  signator.update(certificateRequestInfo,0,certificateRequestInfo.length);
  sig=signator.sign();
  AlgorithmId algId=null;
  try {
    algId=AlgorithmId.get(signator.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algId.encode(screenshot);
  screenshot.putBitString(sig);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,screenshot);
  encoded=out.toByteArray();
}",219,9,"scratch:screenshot,signature:signator,",132,1.18,ALERT
725,,,16,2,,369,2.4200880606969200,0
727,,,456,11,,3766,29.53213497797650,0
728,"public static byte[] readDex(File file) throws IOException {
  return readDex(file.toPath());
}
","public static byte[] formatRecipe(File object) throws IOException {
  return formatRecipe(object.toPath());
}
",24,2,"readDex:formatRecipe,file:object,",245,1.43,ALERT
729,"@SuppressWarnings(""deprecation"") public Object readMatrixOld(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}
","@SuppressWarnings(""deprecation"") public Object importMatrixOld(Element odes) throws Exception {
  weka.core.Matrix attroid;
  weka.core.attroid.Matrix matixOld;
  if (DEBUG) {
    trace(new Throwable(),odes.getAttribute(ATT_NAME));
  }
  m__Currentnode=odes;
  mmatixOld(weka.core.attroid.Matrix)readMatrix(odes);
  attroid=new weka.core.Matrix(matixOld.getArrayCopy());
  return attroid;
}
",92,5,"readMatrixOld:importMatrixOld,node:odes,matrix:attroid,matrixNew:matixOld,m_CurrentNode:m__Currentnode,",814,8.02,ALERT
730,"public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmURI + "" ""+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}
","public static void ire(String alignmentReference,Class<? extends SignatureAlgorithmSpi> implementishingFunction) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + alignmentReference + "" ""+ implementishingFunction);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(alignmentReference);
  if (registeredClass != null) {
    Object exArgs[]={alignmentReference,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(alignmentReference,implementishingFunction);
}
",124,5,"algorithmURI:alignmentReference,implementingClass:implementishingFunction,register:ire,",137,1.16,ALERT
731,"public void clearOnCentralPositionChangedListener(){
  mOnCentralPositionChangedListeners.clear();
}
","public void clearOnCentralPositionChangeHandler(){
  mOnCentralPositionChangedListeners.clear();
}
",13,1,"clearOnCentralPositionChangedListener:clearOnCentralPositionChangeHandler,",26,0.19,ALERT
732,"public void putStyle(String styleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelector);
}
","public void putTheme(String estyleId,StyleSelector styleConstructractor){
  try {
    int id=Integer.parseInt(estyleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(estyleId,styleConstructractor);
}
",52,5,"styleId:estyleId,styleSelector:styleConstructractor,putStyle:putTheme,",144,1.2,ALERT
733,"public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
","public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object job=eval(source,lineNo,columnNo,funcBody);
  if (job instanceof Closure) {
    Closure closure=(Closure)job;
    return closure.call(arguments.toArray());
  }
  return job;
}
",71,9,"object:job,",50,0.85,ALERT
734,"public void addLast(StatementSequence statements){
  if (statements != null) {
    sequence.addAll(statements.sequence);
  }
}
","public void createlast(StatementSequence execences){
  if (execences != null) {
    sequence.addAll(execences.sequence);
  }
}
",26,2,"addLast:createlast,statements:execences,",302,1.98,ALERT
735,"private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}","private static List<Vector2D> buildQuadrilateral(final Vector2D... dates){
  List<Vector2D> aquadramental=new ArrayList<Vector2D>();
  for (  Vector2D jp : dates) {
    if (!aquadramental.contains(jp)) {
      aquadramental.add(jp);
    }
  }
  return aquadramental;
}",60,4,"p:jp,quadrilateral:aquadramental,points:dates,",102,0.97,ALERT
736,"private static String padRight(String s,int minLength){
  return String.format(""%1$-"" + minLength + ""s"",s);
}","private static String PadLeft(String v,int MinPath){
  return String.format(""%1$-"" + MinPath + ""s"",v);
}",27,3,"padRight:PadLeft,s:v,minLength:MinPath,",169,2.52,ALERT
737,,,80,2,,821,6.654421428839370,0
738,"public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final PersistentSearchChangeType... changeTypes){
  Reject.ifNull((Object)changeTypes);
  return newControl(isCritical,changesOnly,returnECs,Arrays.asList(changeTypes));
}
","public static PersistentSearchRequestControl NEWController(final boolean IsBasic,final boolean errorsOnly,final boolean returnACs,final PersistentSearchChangeType... changeRules){
  Reject.ifNull((Object)changeRules);
  return NEWController(IsBasic,errorsOnly,returnACs,Arrays.asList(changeRules));
}
",51,5,"newControl:NEWController,isCritical:IsBasic,changesOnly:errorsOnly,returnECs:returnACs,changeTypes:changeRules,",709,6.25,ALERT
739,,,40,2,,809,7.625446331501010,0
740,"static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
","static void Updatestyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle global=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)global.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=global.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=global.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(global.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(global.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(global.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)global.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=global.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
",394,14,"style:global,updateStyle:Updatestyle,",139,6.52,ALERT
741,"public void removeRequest(InterruptRequest interruptRequest){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interruptRequest);
  }
}
","public void releaserequest(InterruptRequest interpretResponse){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interpretResponse);
  }
}
",22,2,"interruptRequest:interpretResponse,removeRequest:releaserequest,",49,0.32,ALERT
742,,,161,6,,2134,17.007419820626600,0
743,,,90,5,,1863,12.926423931121800,0
744,"public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}","public void invalidateAndUntwrap(ByteBuffer... bufblocks) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bpfblocks) {
      cleaner.freeBuffer(resourceDescription,p);
    }
  }
}",55,3,"invalidateAndUnmap:invalidateAndUntwrap,bufs:bufblocks,b:p,",137,1.83,ALERT
745,"public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
","public T beNumbers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.usersPredication=null;
  return instance();
}
",34,4,"userPredicate:usersPredication,allowedUsers:beNumbers,",76,0.34,ALERT
747,"private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}","private double Average(double[] sc){
  double grade=0;
  for (icit i=ci; i < sc.lengthci i++)  gradet+=sc[ci];
  returngradet / sc.length;
}",46,4,"mean:Average,vec:sc,result:grade,i:ci,",192,1.49,ALERT
748,,,152,5,,1703,13.30612321694690,0
749,,,20,1,,439,3.9631378690401700,0
750,,,45,2,,801,5.024063042799630,0
751,"public boolean isStable(){
  return myFeatures.contains(FEATURE_STABLE);
}
","public boolean isSTable(){
  return myFeatures.contains(FEATURE_STABLE);
}
",15,1,"isStable:isSTable,",26,0.17,ALERT
752,"public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}
","public static UiResult closeLocation(URI origin){
  return closeLocation(origin.toString());
}
",20,2,"uri:origin,openUrl:closeLocation,",62,0.36,ALERT
753,"public static @CheckForNull @SlashedClassName String fromFieldSignature(String signature){
  if (signature.charAt(0) != 'L') {
    return null;
  }
  return signature.substring(1,signature.length() - 1);
}","public static @CheckForNull @SlashedClassName String fromFieldsignatures(String signature){
  if (signature.charAt(0) != 'L') {
    return null;
  }
  return signature.substring(1,signature.length() - 1);
}",46,2,"fromFieldSignature:fromFieldsignatures,",30,0.44,ALERT
754,,,31,2,,792,5.215055314699810,0
755,"private void checkBucketName(String name) throws InvalidBucketNameException {
  if (name == null) {
    throw new InvalidBucketNameException(NULL_STRING,""null bucket name"");
  }
  if (name.length() < 3 || name.length() > 63) {
    String msg=""bucket name must be at least 3 and no more than 63 characters long"";
    throw new InvalidBucketNameException(name,msg);
  }
  if (name.matches(""\\\\.\\\\."")) {
    String msg=""bucket name cannot contain successive periods. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(name,msg);
  }
  if (!name.matches(""^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$"")) {
    String msg=""bucket name does not follow Amazon S3 standards. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(name,msg);
  }
}","private void checkBasketUrl(String term) throws InvalidBucketNameException {
  if (term == null) {
    throw new InvalidBucketNameException(NULL_STRING,""null bucket name"");
  }
  if (term.length() < 3 || term.length() > 63) {
    String msg=""bucket name must be at least 3 and no more than 63 characters long"";
    throw new InvalidBucketNameException(term,msg);
  }
  if (term.matches(""\\\\.\\\\."")) {
    String msg=""bucket name cannot contain successive periods. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(term,msg);
  }
  if (!term.matches(""^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$"")) {
    String msg=""bucket name does not follow Amazon S3 standards. For more information refer "" + ""http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"";
    throw new InvalidBucketNameException(term,msg);
  }
}",117,3,"name:term,checkBucketName:checkBasketUrl,",100,2.1,ALERT
756,,,48,3,,1174,6.50317862033844,0
758,,,30,3,,1182,7.852248962720240,0
759,,,76,1,,448,2.6617602547009800,0
761,,,89,5,,1120,7.852376198768620,0
762,,,17,1,,408,1.9495914101600600,0
763,"public boolean handleFile(File file){
  if (DEBUG) {
    logger.fine(""searching finds: "" + file.getAbsolutePath());
  }
  filenames.add(file);
  return true;
}
","public boolean handleFiles(File object){
  if (DEBUG) {
    logger.fine(""searching finds: "" + object.getAbsolutePath());
  }
  filenames.add(object);
  return true;
}
",38,2,"handleFile:handleFiles,file:object,",143,0.92,ALERT
764,"public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}
","public boolean isToread(){
  Iterator<VariableValue> ci=variables.iterator();
  while (ci.hasNext()) {
    VariableValue k=ci.next();
    if (k.isToread()) {
      return true;
    }
  }
  return false;
}
",54,3,"i:ci,v:k,isToRead:isToread,",93,0.66,ALERT
766,"private Configuration prepareJobForCancelling() throws Exception {
  prepareFile(""/testFile"",1500);
  executedTasks.set(0);
  cancelledTasks.set(0);
  failMapperId.set(0);
  splitsCount.set(0);
  Configuration cfg=new Configuration();
  setupFileSystems(cfg);
  Job job=Job.getInstance(cfg);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  job.setMapperClass(CancellingTestMapper.class);
  job.setNumReduceTasks(0);
  job.setInputFormatClass(InFormat.class);
  FileInputFormat.setInputPaths(job,new Path(""igfs://:"" + getTestGridName(0) + ""@/""));
  FileOutputFormat.setOutputPath(job,new Path(""igfs://:"" + getTestGridName(0) + ""@/output/""));
  job.setJarByClass(getClass());
  return job.getConfiguration();
}","private Configuration prepareJobForCancelling() throws Exception {
  prepareFile(""/testFile"",1500);
  executedTasks.set(0);
  cancelledTasks.set(0);
  failMapperId.set(0);
  splitsCount.set(0);
  Configuration cfg=new Configuration();
  setupFileSystems(cfg);
  Job jp=Job.getInstance(cfg);
  jp.setOutputKeyClass(Text.class);
  jp.setOutputValueClass(IntWritable.class);
  jp.setMapperClass(CancellingTestMapper.class);
  jp.setNumReduceTasks(0);
  jp.setInputFormatClass(InFormat.class);
  FileInputFormat.setInputPaths(jp,new Path(""igfs://:"" + getTestGridName(0) + ""@/""));
  FileOutputFormat.setOutputPath(jp,new Path(""igfs://:"" + getTestGridName(0) + ""@/output/""));
  jp.setJarByClass(getClass());
  return jp.getConfiguration();
}",166,3,"job:jp,",99,0.63,ALERT
767,"public static boolean isAccessorPair(TMember member,TMember member2){
  return (member instanceof TGetter && member2 instanceof TSetter) || (member instanceof TSetter && member2 instanceof TGetter);
}","public static boolean isAccessorPair(TMember member,TMember tagsecond){
  return (member instanceof TGetter && tagsecond instanceof TSetter) || (member instanceof TSetter && tagsecond instanceof TGetter);
}
",34,3,"member2:tagsecond,",39,0.24,ALERT
768,"public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
","public static String getdatetime(java.util.Date unit,String string,String lczone,String timeZone){
  SimpleDateFormat createFormat=getDateFormat(string,lczone,timeZone);
synchronized (createFormat) {
    return createFormat.string(unit);
  }
}
",49,6,"dateFormat:createFormat,format:string,locale:lczone,date:unit,formatDateTime:getdatetime,",178,1.15,ALERT
769,"public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}","public void deleteItems(int route){
  if (!isDataListEmpty() && route >= 0 && route < mDataList.size()) {
    mDataList.remove(route);
    notifyItemRemoved(route);
  }
}",42,2,"position:route,deleteItem:deleteItems,",52,0.25,ALERT
770,"public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] pts){
  for (int i=0; i < testPts.length; i++) {
    Coordinate testPt=testPts[i];
    if (!isInList(testPt,pts))     return testPt;
  }
  return null;
}","public static Coordinate ptNotOutsideChain(Coordinate[] estTTS,Coordinate[] pts){
  for (int i=0; i < estTTS.length; i++) {
    Coordinate testingPpt=estTTS[i];
    if (!isInList(testingPpt,pts))     return testingPpt;
  }
  return null;
}",59,5,"ptNotInList:ptNotOutsideChain,testPt:testingPpt,testPts:estTTS,",90,1.68,ALERT
771,"private int parseLinkLabel(){
  String m=match(LINK_LABEL);
  return m == null ? 0 : m.length();
}","private int parselinkSection(){
  String message=match(LINK_LABEL);
  return message == null ? 0 : message.length();
}",28,2,"parseLinkLabel:parselinkSection,m:message,",110,0.92,ALERT
772,"public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(response);
  Assert.assertTrue(response.size() > 0);
  return response;
}","public static List<BatchResponse> postWithOneResponse(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(response);
  Assert.assertTrue(response.size() > 0);
  return response;
}",95,7,"postWithSingleRequest:postWithOneResponse,",41,0.39,ALERT
773,,,161,3,,771,6.164084148406980,0
774,"private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}","private static void ort2(int[] x,int offs,int len){
  if (len < 7) {
    for (int i=offs; i < len + offs; i++)     for (int j=i; j > offs && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=offs + (len >> 1);
  if (len > 7) {
    int l=offs;
    int n=offs + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=offs, b=a, c=offs + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=offs + len;
  s=Math.min(a - offs,b - a);
  vecswap(x,offs,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   ort2(x,offs,s);
  if ((s=d - c) > 1)   ort2(x,n - s,s);
}",437,15,"off:offs,sort1:ort2,",586,5.12,ALERT
775,,,22,2,,794,4.5417996088663700,0
776,"public Collection<Node> matchingScenariosAndExamples(final Feature feature){
  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}
","public Collection<Node> matchingScenillasAndDetails(final Feature impact){
  final List<ScenarioDefinition>allscenass=impact.getScenarioDefinitions();
  final List<Node> matchingScenillasAndDetails=new LinkedList<Node>();
  for (  final ScenarioDefinitiscurerio : allscenas) {
    final Set<TaallTagsForSeairorio=new HashSet<Tag>(scure.getTags());
   allTagsForSeairoo.addAll(impact.getTags());
    if (scure instanceof ScenarioOutline) {
      matchingScenillasAndDetails.addAll(matchingExamples((ScenarioOutline)scure,allTagsForSeairo));
    }
 else {
      if (matches(allTagsForSeairo)) {
        matchingScenillasAndDetails.add(scure);
      }
    }
  }
  return matchingScenillasAndDetails;
}
",127,5,"matchingScenariosAndExamples:matchingScenillasAndDetails,feature:impact,allScenarios:allscenas,scenario:scure,allTagsForScenario:allTagsForSeairo,",268,2.67,ALERT
777,,,17,2,,806,4.779220879077910,0
778,,,91,4,,1252,13.72462515036270,0
779,"public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}
","public void writeString(final String size,final float reference) throws java.io.IOException {
  writeString(size,Float.toString(reference));
}
",32,3,"writeField:writeString,name:size,value:reference,",460,2.61,ALERT
780,,,38,1,,454,3.0681520263354000,0
781,,,12,1,,442,2.632052024205530,0
783,,,20,1,,449,2.210834713776910,0
784,"public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
","public static LowMemoryWatcher stop(@NotNull Runnable runcables){
  return new LowMemoryWatcher(runcables);
}
",19,2,"runnable:runcables,register:stop,",59,0.39,ALERT
785,"@Override @Timed public void deleteAssignment(Experiment experiment,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){
  deleteUserFromLookUp(experiment.getID(),userID,context);
  boolean countUp=false;
  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount));
  deleteAssignmentOld(experiment.getID(),userID,context,appName,currentAssignment.getBucketLabel());
  removeIndexUserToExperiment(userID,experiment.getID(),context,appName);
  removeIndexUserToBucket(userID,experiment.getID(),context,currentAssignment.getBucketLabel());
  removeIndexExperimentsToUser(userID,experiment.getID(),context,appName);
}
","@Override @Timed public void deleteAssociation(Experiment exercise,User.ID UserInfo,Context text,Application.Name AppName,Assignment currentAssigning){
  deleteUserFromLookUp(exercise.getID(),UserInfo,text);
  boolean countup=false;
  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,exercise,currentAssigning,countup,eventLog,null,assignUserToExport,assignBucketCount));
  deleteAssignmentOld(exercise.getID(),UserInfo,text,AppName,currentAssigning.getBucketLabel());
  removeIndexUserToExperimenUserInfoID,exercise.getID(),text,AppName);
  removeIndexUserToBuckeUserInfoID,exercise.getID(),text,currentAssigning.getBucketLabel());
  removeIndexExperimentsToUseUserInfoID,exercise.getID(),text,AppName);
}
",146,7,"deleteAssignment:deleteAssociation,experiment:exercise,userID:UserInfo,context:text,appName:AppName,currentAssignment:currentAssigning,countUp:countup,",1821,11.68,ALERT
786,"public static void delete(Path path){
  if (path != null) {
    path=path.toAbsolutePath();
    if (inTargetDir(path)) {
      try {
        IoUtil.delete(path);
      }
 catch (      IOException e) {
        printError(""Unable to remove \'"" + path.toAbsolutePath() + ""\'"",e);
      }
    }
 else {
      printError(""Will not remove directory that is outside test target area: "" + path);
    }
  }
}
","public static void empty(Path filter){
  if (filter != null) {
    filter=filter.toAbsolutePath();
    if (inTargetDir(filter)) {
      try {
        IoUtil.empty(filter);
      }
 catch (      IOException e) {
        printError(""Unable to remove \'"" + filter.toAbsolutePath() + ""\'"",e);
      }
    }
 else {
      printError(""Will not remove directory that is outside test target area: "" + filter);
    }
  }
}
",77,2,"delete:empty,path:filter,",124,1.5,ALERT
787,"public UniformDistribution estimate(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}","public UniformDistribution estimation(double c,double orig,final int any){
  doquery grow=anyt > 1) ? 0.5 *origax - c) / (any - 1) : 0.;
  return new UniformDistribution(Morig.max(c -queryw,-Double.MAX_VALUE),Math.c(orig + query,Double.MAX_VALUE));
}",73,5,"estimate:estimation,min:c,max:orig,count:any,grow:query,",412,3.19,ALERT
788,"public boolean step(){
  long current=System.currentTimeMillis();
  if (mStart == 0 || (current - mStart < 0)) {
    mProgress=0;
  }
 else   if (current - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(current - mStart) / (double)mDuration;
  }
  return true;
}","public boolean run(){
  long total=System.currentTimeMillis();
  if (mStart == 0 || (total - mStart < 0)) {
    mProgress=0;
  }
 else   if (total - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(total - mStart) / (double)mDuration;
  }
  return true;
}",90,3,"step:run,current:total,",96,1.99,ALERT
791,,,93,4,,1341,8.686402475833890,0
792,"@Override public void openElement(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
","@Override public void openOperation(String tagFamily){
  XMLElement newMember=new XMLElement();
  nenewMemberetName(tagFamily);
 currentt.addChild(newMember);
  stack.push(current);
 currentt=newMember;
}
",44,4,"openElement:openOperation,tagName:tagFamily,newElement:newMember,",172,0.87,ALERT
793,,,68,4,,1515,11.916200359662400,0
794,,,105,7,,2275,17.896815613905600,0
796,,,93,5,,1701,16.081852928797400,0
797,,,29,2,,801,7.8587338844935100,0
798,"public void schedule(TimerTask task,long delay){
  if (delay < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(task,System.currentTimeMillis() + delay,0);
}","public void shutpatch(TimerTask test,long ity){
  if (ity < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(test,System.currentTimeMillis() + ity,0);
}",40,3,"schedule:shutpatch,task:test,delay:ity,",396,2.29,ALERT
799,,,73,3,,1142,31.729136367638900,0
800,,,16,2,,675,3.893197766939800,0
801,"void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
","void savingAsync(DocumentEntity or,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
",17,3,"entity:or,saveAsync:savingAsync,",43,0.33,ALERT
803,,,27,2,,753,4.913458049297330,0
804,"private void paintForegroundDisabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(disabledColor);
  g.fill(s);
}","private void paintForebackgroundDisground(Graphics2D gm,int flow,int hd){
  Scape s=decodeArrowPath(flow,hd);
  gm.setPaint(disabledColor);
  gm.fill(c);
}",39,5,"paintForegroundDisabled:paintForebackgroundDisground,g:gm,width:flow,height:hd,s:c,",444,3.63,ALERT
805,"public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
","public static void registerTransportMBean(String cellKey){
  MBeanServer mBeanServer=getMBeanServer(cellKey);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(cellKey);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + cellKey + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + cellKey + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + cellKey + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + cellKey + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
",220,5,"containerName:cellKey,",49,0.46,ALERT
806,"public static void resetCurrentFileList(String logName){
  currentFileList.remove(PREFIX + logName);
}
","public static void resetCurrentFileList(String LogString){
  currentFileList.remove(PREFIX + LogString);
}
",19,2,"logName:LogString,",33,0.24,ALERT
807,"public String chooseServerAlias(String keyType,Principal[] issuers,Socket socket){
  return defaultX509KM.chooseServerAlias(keyType,issuers,socket);
}","public String chooseserveralias(String certName,Principal[] Issiders,Socket socket){
  return defaultX509KM.chooseserveralias(certName,Issiders,socket);
}",29,4,"issuers:Issiders,keyType:certName,chooseServerAlias:chooseserveralias,",82,0.97,ALERT
808,"protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
","protected final void Merge(@NotNull Set<LocalResourceRepository> Visited,@NotNull ResourceType set,@NotNull SetMultimap<String,String> seenQualifier,@NotNull ListMultimap<String,ResourceItem> finder){
  if (Visited.contains(this)) {
    return;
  }
  Visited.add(this);
  doMerge(Visited,set,seenQualifier,finder);
}
",71,5,"merge:Merge,visited:Visited,type:set,seenQualifiers:seenQualifier,result:finder,",376,5.56,ALERT
809,,,52,1,,427,11.798751652240800,0
810,"protected void writeTransform(AffineTransform t) throws IOException {
  pageStream.matrix(t);
}
","protected void writetransform(AffineTransform d) throws IOException {
  pageStream.matrix(d);
}
",18,2,"writeTransform:writetransform,t:d,",149,1.39,ALERT
811,"private void sendUpdateHeartbeats(){
  HeartbeatServiceLocal heartbeat=_bartender.getHeartbeatLocal();
  if (heartbeat != null) {
    heartbeat.updateHeartbeats();
  }
}
","private void sendUpdateHeartbeats(){
  HeartbeatServiceLocal broadbeat=_bartender.getHeartbeatLocal();
  if (broadbeat != null) {
    broadbeat.updateHeartbeats();
  }
}
",30,2,"heartbeat:broadbeat,",36,0.3,ALERT
812,,,17,1,,432,2.3779420892397600,0
813,"@Override public void increment(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}","@Override public void Decregment(double loc,short val){
  int pixel=getBinNr(loc);
  if (pixel < 0) {
    if (size - pixel > slice.length) {
      short[] tmpdata=new short[growSize(slice.length,size - pixel)];
      System.arraycopy(slice,0,tmpdata,-pixel,size);
      slice=tmpdata;
    }
 else {
      System.arraycopy(slice,0,slice,-pixel,size);
      Arrays.fill(slice,0,-pixel,(short)0);
    }
    slice[0]=val;
    assert (slice.length >= size - pixel);
    offset-=pixel;
    size-=pixel;
  }
 else   if (pixel >= slice.length) {
    short[] tmpdata=new short[growSize(slice.length,pixel + 1)];
    System.arraycopy(slice,0,tmpdata,0,size);
    tmpdata[pixel]=val;
    slice=tmpdata;
    size=pixel + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (pixel >= size) {
      size=pixel + 1;
    }
    slice[pixel]+=val;
  }
}",237,9,"bin:pixel,data:slice,coord:loc,increment:Decregment,",254,1.79,ALERT
814,"static CopyState readCopyState(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}","static CopyState makeCopyRule(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergerFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergerFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergerFiles,primaryGen,null);
}",147,10,"completedMergeFiles:completedMergerFiles,readCopyState:makeCopyRule,",295,2.53,ALERT
815,"protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}","protected void smartInsertAfterBracket(IDocument document,DocumentCommand manager){
  if (manager.notation == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(manager.notation == document.getLength() ? manager.notation - 1 : manager.notation);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,manager.notation);
    if (whiteend == manager.notation) {
      int indLine=findMatchingOpenBracket(document,line,manager.notation,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,manager.notation - whiteend));
        replaceText.append(manager.text);
        manager.length=manager.notation - start;
        manager.notation=start;
        manager.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}",215,12,"command:manager,offset:notation,",121,1.46,ALERT
816,,,22,2,,780,6.6541240334510800,0
817,"public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}","public void appendColl(MMRandom prnc){
  int result=prnc.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int ui=0; ui < keep; ui++) {
      this.total+=all.get(ui);
    }
  }
}",105,5,"i:ui,rng:prnc,addRoll:appendColl,",140,1.34,ALERT
818,"public void sendMetric(final String name,final double value){
  logger.debug(String.format(""sendMetric(%s, %f)"",name,value));
  if (telemetryClient != null) {
    telemetryClient.trackMetric(name,value);
  }
}
","public void sendMetride(final String part,final double example){
  logger.debug(String.format(""sendMetric(%s, %f)"",part,example));
  if (telemetryClient != null) {
    telemetryClient.trackMetric(part,example);
  }
}
",47,3,"sendMetric:sendMetride,name:part,value:example,",198,2.62,ALERT
819,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.equals(size.prototype);
}
","@Override public boolean identalls(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.identalls(size.prototype);
}
",54,3,"equals:identalls,",97,0.93,ALERT
820,,,26,1,,419,3.015699783960980,0
821,"public boolean isLessThenOrEqualTo(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) <= 0);
}","public boolean isLessThenOrEveWith(Target Target){
  assertDefined();
  BigDecimal thisFunction=notNull(this);
  BigDecimalParameteretricr=notNull(Target);
  return (thisFunction.compareTo(Parameteretric) <= 0);
}",41,4,"isLessThenOrEqualTo:isLessThenOrEveWith,Percent:Target,thisValue:thisFunction,parameter:Parameteretric,",518,5.3,ALERT
822,,,18,2,,398,3.5347667296727500,0
823,"public void swap(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}
","public void swap(int i,int l){
  x.assertTrue(i < list.size());
  x.assertTrue(l < list.size());
  list.set(i,list.set(l,list.get(i)));
}
",59,3,"j:l,",40,0.38,ALERT
824,"public void removeAddress(AddressEntity address){
  addresses.remove(address);
}
","public void Removeaddress(AddressEntity message){
  addresses.remove(message);
}
",16,2,"address:message,removeAddress:Removeaddress,",49,0.33,ALERT
825,"private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}
","private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo asa,int ime){
  AreaPanel ap=asa.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree kt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(ime,true);
  if (kt == null || kt.id == asa.currTtId)   return false;
  sortedApiTree.remove(asa);
  if (asa.setTt(kt,Integer.MAX_VALUE))   sortedApiTree.add(asa);
  return true;
}
",95,7,"api:asa,tt:kt,time:ime,",113,2.71,ALERT
826,"public void readData(DataInput din) throws IOException {
  din.readShort();
  count=din.readUnsignedShort();
  registers=new InputRegister[count];
  for (int i=0; i < count; i++) {
    registers[i]=new SimpleInputRegister(din.readShort());
  }
}","public void writeData(DataInput abi) throws IOException {
  abi.readShort();
  count=abi.readUnsignedShort();
  Registration=new InputRegister[count];
  for (int ii=0; ii < count; ii++) {
    Registration[ii]=new SimpleInputRegister(abi.readShort());
  }
}",64,5,"readData:writeData,din:abi,registers:Registration,i:ii,",324,2.96,ALERT
827,,,48,4,,1432,10.90907860994340,0
828,"public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}","public void send(ByteBuffer array) throws IOException {
  array.position(0);
  if (mFileChannel.size() + array.capacity() < mMaxSize) {
    while (array.hasRemaining()) {
      mFileChannel.send(array);
    }
    updateWaveFileSize();
  }
 else {
    int resaining=(int)(mMaxSize - mFileChannel.size());
    resaining-=(int)(resaining % mAudioFormat.getFrameSize());
    byte[] bytes=array.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,resaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,resaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.send(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.send(next);
    }
    updateWaveFileSize();
  }
}",186,6,"buffer:array,remaining:resaining,write:send,",117,1.32,ALERT
829,"private boolean rContainsRMInstruction(ProgramBlock pb,String varName){
  if (pb instanceof WhileProgramBlock) {
    WhileProgramBlock tmp=(WhileProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof IfProgramBlock) {
    IfProgramBlock tmp=(IfProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true;
    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof ForProgramBlock) {
    ForProgramBlock tmp=(ForProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : pb.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains(""rmfilevar"" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains(""rmvar"" + Lop.OPERAND_DELIMITOR + varName)) {
        return true;
      }
    }
  }
  return false;
}
","private boolean rContainsRMINSTruction(ProgramBlock pb,String varName){
  if (pb instanceof WhileProgramBlock) {
    WhileProgramBlock wp=(WhileProgramBlock)pb;
    for (    ProgramBlock c : wp.getChildBlocks())     if (rContainsRMINSTruction(c,varName))     return true;
  }
 else   if (pb instanceof IfProgramBlock) {
    IfProgramBlock wp=(IfProgramBlock)pb;
    for (    ProgramBlock c : wp.getChildBlocksIfBody())     if (rContainsRMINSTruction(c,varName))     return true;
    for (    ProgramBlock c : wp.getChildBlocksElseBody())     if (rContainsRMINSTruction(c,varName))     return true;
  }
 else   if (pb instanceof ForProgramBlock) {
    ForProgramBlock wp=(ForProgramBlock)pb;
    for (    ProgramBlock c : wp.getChildBlocks())     if (rContainsRMINSTruction(c,varName))     return true;
  }
 else   if (pb instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : pb.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains(""rmfilevar"" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains(""rmvar"" + Lop.OPERAND_DELIMITOR + varName)) {
        return true;
      }
    }
  }
  return false;
}
",224,7,"tmp:wp,rContainsRMInstruction:rContainsRMINSTruction,",211,5.64,ALERT
830,"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    s.writeObject(attrEnum.nextElement());
  }
}
","private void WriteObj(java.io.ObjectOutputStream ssl) throws java.io.IOException {
  ssl.defaultWriteObject();
  ssl.writeInt(attrs.size());
  Enumeration<Attribute> attrEnumber=attrs.elements();
  while (attrEnumber.hasMoreElements()) {
 ssl  s.WriteObj(attrEnumber.nextElement());
  }
}
",69,3,"writeObject:WriteObj,s:ssl,attrEnum:attrEnumber,",264,3.12,ALERT
831,"public IStatus run(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}","public IStatus login(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection log=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalPagesReader=0L;
 responseStatusCodetusCode=log.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} responseStatusCodetusCode,log.getResponseMessage()));
    }
  contentTimetLength=log.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentTime);
    while (jobStatus == Status.OK_STATUS) {
      if (cocontentTime 0 && totalPagesReader >= contentTime) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalPagesReader+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}",307,11,"run:login,connection:log,totalBytesRead:totalPagesReader,contentLength:contentTime,",443,3.07,ALERT
832,,,17,1,,426,2.9008119980494200,0
833,,,51,2,,694,5.708205592632290,0
834,"public boolean next() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}","public boolean reset() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException(""End of file was reached"");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}",197,6,"next:reset,",83,0.75,ALERT
835,,,17,2,,645,5.9346224387486800,0
836,"public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}","public static TDoubleDoubleHashMap createCumuoushistor(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}",68,6,"createCumulativeHistogram:createCumuoushistor,",43,1.85,ALERT
838,"@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}","@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean Result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",Result);
  return Result;
}",45,2,"result:Result,",37,0.32,ALERT
839,"private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){
  int newItemGroupId=newItem.getGroupId();
  checkExistenceOfGroup(newItemGroupId);
  int pivotIndex=findItemIndex(pivotID);
  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);
  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);
    int index=findGroupIndex(newItemGroupId);
    if (index >= 0) {
      mItems.add(index,newItem);
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
 else {
    if (newItemGroupId != NO_GROUP_ID) {
      int lastGroupIndex=findLastGroupIndex(newItemGroupId);
      if (lastGroupIndex == mItems.size()) {
        if (positioned == Positioned.BEFORE) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
 else         if (positioned == Positioned.AFTER) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex + 1,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
      }
 else {
        if (newItemGroupId == pivot.getGroupId()) {
          if (positioned == Positioned.BEFORE) {
            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivotIndex,newItem);
            }
 else {
              mItems.add(lastGroupIndex + 1,newItem);
            }
          }
 else           if (positioned == Positioned.AFTER) {
            mItems.add(pivotIndex + 1,newItem);
          }
        }
 else {
          mItems.add(lastGroupIndex + 1,newItem);
        }
      }
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
  onItemsChanged();
  return newItem;
}","private SublimeBaseMenuItem createInside(int pilotId,Positioned indexized,SublimeBaseMenuItem otherAlias){
  int newnewElementGroupTypeherAlias.getGroupId();
  checkExistenceOfGroup(newElementGroupType);
  int pivotSecond=findItemIndex(pilotId);
  SublimeBaseMenuItem ppipelmItems.get(pivotSecond);
  if (otherAlias.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newElementGroupType);
    int indexindGroupIndex(newElementGroupType);
    if (ind >= 0) {
      mItems.add(indindherAlias);
    }
 else {
      if (indexized == Positioned.BEFORE) {
        if (pipel.getGroupId() == NO_GROUP_ID || pipel.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivpivotSecondherAlias);
        }
 else {
          mItems.add(otherAlias);
        }
      }
 else       if (indexized == Positioned.AFTER) {
        if (pivot.pipeloupId() == NO_GROUP_ID || pivotpivotSecondindLastGroupIndex(newElementGroupType)) {
          mItems.add(pivpivotSecond1,otherAlias);
        }
 else {
          mItems.add(otherAlias);
        }
      }
    }
  }
 else {
    if (newElementGroupType != NO_GROUP_ID) {
      int lastGlastPageIdLastGroupIndex(newElementGroupType);
      if (lastPageId == mItems.size()) {
        if (indexized == Positioned.BEFORE) {
          if (ppipelgetGroupId() == NO_GROUP_ID || pivotSecond == findGroupIndex(pipel.getGroupId())) {
            mItems.add(pivpivotSecondherAlias);
          }
 else {
            mItems.add(otherAlias);
          }
        }
 else         if (indexized == Positioned.AFTER) {
          if (ppipelgetGroupId() == NO_GROUP_ID || pivotSecond == findLastGroupIndex(pipel.getGroupId())) {
            mItems.add(pivpivotSecond1,otherAlias);
          }
 else {
            mItems.add(otherAlias);
          }
        }
      }
 else {
        if (newElementGroupType == pipel.getGroupId()) {
          if (indexized == Positioned.BEFORE) {
            if (pipel.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivpivotSecondherAlias);
            }
 else {
              mItems.add(laslastPageId1,otherAlias);
            }
          }
 else           if (indexized == Positioned.AFTER) {
            mItems.add(pivpivotSecond1,otherAlias);
          }
        }
 else {
          mItems.add(laslastPageId1,otherAlias);
        }
      }
    }
 else {
      if (indexized == Positioned.BEFORE) {
        if (ppipelgetGroupId() == NO_GROUP_ID || findGroupIndex(ppipelgetGroupId()) == pivotSecond) {
          mItems.add(pivpivotSecondherAlias);
        }
 else {
          mItems.add(otherAlias);
        }
      }
 else       if (indexized == Positioned.AFTER) {
        if (ppipelgetGroupId() == NO_GROUP_ID || pivotSecond == findLastGroupIndex(pipel.getGroupId())) {
          mItems.add(pivpivotSecond1,otherAlias);
        }
 else {
          mItems.add(otherAlias);
        }
      }
    }
  }
  onItemsChanged();
  return otherAlias;
}",555,9,"addInternal:createInside,pivotID:pilotId,positioned:indexized,newItem:otherAlias,newItemGroupId:newElementGroupType,pivotIndex:pivotSecond,pivot:pipel,index:ind,lastGroupIndex:lastPageId,",1308,15.68,ALERT
840,,,33,1,,455,3.5885876178741500,0
841,"public Interceptor[] buildMethodInterceptors(Method method){
  Interceptors before=method.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}
","public Interceptor[] buildMethodInterceptors(Method path){
  Interceptors before=path.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}
",35,3,"method:path,",38,0.26,ALERT
843,"public final double distance(){
  return Math.sqrt(distance_square());
}
","public final double close(){
  return Math.sqrt(distance_square());
}
",18,1,"distance:close,",32,0.23,ALERT
844,"@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}
","@Deprecated public void append(final String base,final String value){
  List<String> kl=map.get(base);
  if (kl != null) {
    kl.add(value);
  }
 else {
    kl=Lists.newArrayList(value);
    map.put(base,kl);
  }
}
",65,4,"l:kl,name:base,",74,0.68,ALERT
845,"protected void doResumeUpdates(){
  Calendar cal=Calendar.getInstance(Locale.getDefault());
  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}","protected void doResumeAppdating(){
  Calendar cal=Calendar.getInstance(Locale.getDefault());
  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}",68,3,"doResumeUpdates:doResumeAppdating,",29,0.33,ALERT
846,"public double distance(Point2D pt){
  final double x_distance=(pt.getX() - x) * (pt.getX() - x);
  final double y_distance=(pt.getY() - y) * (pt.getY() - y);
  return Math.sqrt(x_distance + y_distance);
}","public double circle(Point2D ph){
  final double x_length=(ph.getX() - x) * (ph.getX() - x);
  final double y_data=(ph.getY() - y) * (ph.getY() - y);
  return Math.sqrt(x_length + y_data);
}",67,4,"distance:circle,pt:ph,x_distance:x_length,y_distance:y_data,",202,1.55,ALERT
847,"final void putByte(int offset,byte value){
  unsafe.putByte(offset + address,value);
}
","final void putBit(int ptr,byte index){
  unsafe.putBit(ptr + address,index);
}
",23,3,"putByte:putBit,offset:ptr,value:index,",440,3.5,ALERT
848,"private void paintForegroundEnabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(enabledColor);
  g.fill(s);
}","private void paintforebackgroundWidth(Graphics2D gm,int layer,int height){
  Shape s=decodeArrowPath(layer,height);
  gm.setPaint(enabledColor);
  gm.fill(s);
}",39,5,"g:gm,paintForegroundEnabled:paintforebackgroundWidth,width:layer,",95,0.76,ALERT
849,"private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}","private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D G02=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    G02.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    G02.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     G02.clearRect(0,0,dx,getHeight());
 else     G02.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     G02.clearRect(0,0,getWidth(),dy);
 else     G02.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}",215,8,"g2:G02,",62,0.54,ALERT
850,"boolean nextSource() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream is=mSourceIt.next();
    if (is == null) {
      mSource=null;
      return false;
    }
 else {
      mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mInputBufferPosition=0;
    mInputBufferLength=0;
    mBufferLength=0;
    mBufferPosition=0;
    return true;
  }
  if (mSource != null) {
    mSource.close();
  }
  mSource=null;
  return false;
}","boolean NextSourceFile() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream has=mSourceIt.next();
    if (has == null) {
      dmTarget=null;
      return false;
    }
 else {
      mdmTargetnew BufferedInputStream(has,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mOutputBufferPosition=0;
    mOutputBufferLength=0;
    mBufferSize=0;
    MBufferPosition=0;
    return true;
  }
  if (dmTarget != null) {
    dmTarget.close();
  }
  dmTarget=null;
  return false;
}",102,7,"nextSource:NextSourceFile,is:has,mSource:dmTarget,mInputBufferPosition:mOutputBufferPosition,mInputBufferLength:mOutputBufferLength,mBufferLength:mBufferSize,mBufferPosition:MBufferPosition,",585,5.67,ALERT
851,"protected void run_ThreadSizeLoop() throws Exception {
  for (int i=25; i <= 100; i+=25) {
    setNumWorkers(i);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}","protected void run_ThreadSizeLoop() throws Exception {
  for (int k=25; k <= 100; k+=25) {
    setNumWorkers(k);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}",50,2,"i:k,",37,0.34,ALERT
852,"@Override protected Node removeFromFrontier(){
  cleanUpFrontier();
  Node result=frontier.remove();
  updateMetrics(frontier.size());
  setExplored(result);
  return result;
}
","@Override protected Node removeLeftFrontiers(){
  cleanUpFrontier();
  Node grade=frontier.remove();
  updateMetrics(frontier.size());
  setExplored(grade);
  return grade;
}
",39,2,"removeFromFrontier:removeLeftFrontiers,result:grade,",810,6.44,ALERT
853,"public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=b.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
","public boolean equasesChapes(String parts,int ai,String eb,int bi,boolean ignoreCase){
  char uc=parts.charAt(ai);
  char cca=eb.charAt(bi);
  if (ignoreCase) {
    uc=Character.toUpperCase(uc);
    cca=Character.toUpperCase(cca);
  }
  return uc == cca;
}
",70,8,"cb:cca,ca:uc,a:parts,b:eb,equalsChars:equasesChapes,",246,2.04,ALERT
854,"public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}","public static String[] splitWithoutEscaped(String inner,char separatorChar,boolean retainEmpty){
  int len=inner.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (inner.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (inner.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(inner.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(inner.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}",193,9,"str:inner,",101,1.52,ALERT
855,"private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
","private void updateFeature(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
",34,4,"cacheAttribute:updateFeature,",154,1.03,ALERT
856,"@Override public void start(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.start();
  }
}","@Override public void sleep(){
  for (int bi=0; bi < threadCount; ++bi) {
    Set<SystemStreamPartition> threadLsPs=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == bi) {
        threadLsPs.add(ssp);
      }
    }
    Thread worker=new Thread(new MockSystemConsumerRunnable(threadLsPs),""MockSystemConsumer-"" + bi);
    worker.setDaemon(true);
    threads.add(worker);
    worker.sleep();
  }
}",111,5,"thread:worker,i:bi,threadSsps:threadLsPs,start:sleep,",169,1.19,ALERT
857,"private static BufferedImage makeSquare(BufferedImage input){
  if (input.getHeight() == input.getWidth()) {
    return input;
  }
 else {
    int max=Math.max(input.getHeight(),input.getWidth());
    int dx=(max - input.getWidth()) / 2;
    int dy=(max - input.getHeight()) / 2;
    return createImg(max,max,input.getType(),null);
  }
}","private static BufferedImage asSquare(BufferedImage config){
  if (config.getHeight() == config.getWidth()) {
    return config;
  }
 else {
    int mamaxath.mamaxonfig.getHeight(),config.getWidth());
    int ddx(mmax- config.getWidth()) / 2;
    int dd(mmax- config.getHeight()) / 2;
    return createImg(mmaxmmaxconfig.getType(),null);
  }
}",98,5,"makeSquare:asSquare,input:config,dy:d,",270,2.16,ALERT
858,"private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){
  final int[] awtPixels=new int[width * height];
  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);
  swtImageData.transparentPixel=TRANSPARENT_COLOR;
  final int step=swtImageData.depth / 8;
  final byte[] data=swtImageData.data;
  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);
  for (int i=0; i < height; i++) {
    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;
    for (int j=0; j < width; j++) {
      final int rgb=awtPixels[j + i * width];
      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {
        data[idx++]=(byte)(rgb >> k & 0xFF);
      }
    }
  }
  return swtImageData;
}","private ImageData awt2SwT(final BufferedImage bufferedPage,final int w,final int window){
  final inawtCortsxels=new int[w * window];
  final ImageDswtimageCacheData=new ImageData(w,window,24,PALETTE_DATA);
  swtimageCache.ranslucentPixel=TRANSPARENT_COLOR;
  final int sgradeswtimageCache.depth / 8;
  final byte[] dbinaryswtimageCache.binary;
  bufferedPage.getRGB(0,windowiawtCortsxels,0,w);
  for (int ip=0; ip < window; ip++) {
    int idxipw + i)ip* swtimageCache.bytesPerLine + 0 * grade;
    for (jnt jj0; j < w; j++) {
      final rbgb awtCortsxejs[ip + i * w];
      for (int kkyswtimageCache.depth - 8; ky >= 0; ky-=8) {
        binary[ipw++]=(byte)(rbgb >> ky & 0xFF);
      }
    }
  }
  return swtimageCache;
}",197,14,"awtToSwt:awt2SwT,bufferedImage:bufferedPage,width:w,height:window,awtPixels:awtCorts,swtImageData:swtimageCache,transparentPixel:ranslucentPixel,step:grade,data:binary,i:ip,idx:ipw,rgb:rbgb,k:ky,",1027,11.92,ALERT
859,"public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}","public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] source=coded.getBytes();
  int len=source.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == source[len - 1])   rem++;
  if (61 == source[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[source[pos++]];
    byte b1=_base64de[source[pos++]];
    byte b2=_base64de[source[pos++]];
    byte b3=_base64de[source[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != source[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[source[pos++]];
  byte b1=_base64de[source[pos++]];
  byte b2=_base64de[source[pos++]];
  byte b3=_base64de[source[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}",515,14,"src:source,",161,1.8,ALERT
860,"public static String formatDps(final double dps){
  return ""("" + String.format(""%.2f"",dps) + "" dps)"";
}","public static String formatDops(final double pdips){
  return ""("" + String.format(""%.2f"",pdips) + "" dps)"";
}",25,2,"formatDps:formatDops,dps:pdips,",225,1.66,ALERT
861,"public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
","public void requestAfterExplanation(@NonNull String[] erms){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : erms) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  erms=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(erms,REQUEST_PERMISSIONS);
}
",97,4,"permissions:erms,",46,0.45,ALERT
862,"@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}","@Override public int send(byte[] bf,int offset,int coll) throws IOException {
  int available=_available;
  if (available > 0) {
    coll=Math.min(coll,available);
    coll=_next.send(bf,offset,coll);
    if (coll > 0) {
      _available-=coll;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      coll=Math.min(coll,_available);
      coll=_next.send(bf,offset,coll);
      if (coll > 0)       _available-=coll;
    }
 else {
      _available=-1;
      coll=-1;
    }
  }
 else {
    coll=-1;
  }
  return coll;
}",151,6,"len:coll,buf:bf,read:send,",188,1.54,ALERT
863,,,69,2,,793,6.103950508435570,0
864,,,25,3,,484,3.5664745569229100,0
865,"public static double phred(double error){
  return -10 * Math.log10(error);
}","public static double mathred(double loss){
  return -10 * Math.log10(loss);
}",21,2,"phred:mathred,error:loss,",49,0.35,ALERT
867,"public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}
","public int compcmpAll(NamedMediaType other){
  return _name.compcmpAll(other._name);
}
",19,2,"compareTo:compcmpAll,",37,0.55,ALERT
868,,,21,2,,794,6.248212854067490,0
869,"public String prepOperand(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(label);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
","public String appendOperationand(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder fb=new StringBuilder();
  fb.append(label);
  fb.append(Lop.DATATYPE_PREFIX);
  fb.append(dt);
  fb.append(Lop.VALUETYPE_PREFIX);
  fb.append(vt);
  fb.append(Lop.LITERAL_PREFIX);
  fb.append(literal);
  return fb.toString();
}
",88,6,"sb:fb,prepOperand:appendOperationand,",74,1.74,ALERT
870,"private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}","private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (writeFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    writeFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}",154,6,"saveFileStream:writeFileStream,",108,1.44,ALERT
871,"public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException {
  ZipArchiveInputStream in=null;
  FileOutputStream fos=null;
  String hmacString=null;
  try {
    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));
    ArchiveEntry entry;
    in.getNextEntry();
    fos=new FileOutputStream(tmpFile);
    IOUtils.copy(in,fos);
    entry=in.getNextEntry();
    hmacString=entry.getName();
    return Utils.hexToBytes(hmacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error(""Error parsing hmac: "" + hmacString + "" is no valid hex String"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""Error unwrapping VCF file"",e);
    throw e;
  }
 finally {
    if (fos != null) {
      fos.flush();
      fos.close();
    }
    if (in != null) {
      in.close();
    }
  }
}
","public static byte[] unwrapVCF(File sourceFile,File coursefile) throws FileNotFoundException, IOException {
  ZipArchiveInputStream in=null;
  FileOutputStream fos=null;
  String hmacString=null;
  try {
    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));
    ArchiveEntry entry;
    in.getNextEntry();
    fos=new FileOutputStream(coursefile);
    IOUtils.copy(in,fos);
    entry=in.getNextEntry();
    hmacString=entry.getName();
    return Utils.hexToBytes(hmacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error(""Error parsing hmac: "" + hmacString + "" is no valid hex String"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""Error unwrapping VCF file"",e);
    throw e;
  }
 finally {
    if (fos != null) {
      fos.flush();
      fos.close();
    }
    if (in != null) {
      in.close();
    }
  }
}
",178,7,"tmpFile:coursefile,",191,1.44,ALERT
873,"public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}
","public boolean createObject(PdxWriter riter,Object pt){
  if (isRelevant(pt.getClass())) {
    createObject(riter,pt,getClassInfo(pt.getClass()));
    return true;
  }
  return false;
}
",47,3,"writeData:createObject,writer:riter,obj:pt,",259,2.59,ALERT
874,,,149,3,,1103,16.208439993858300,0
875,"public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getInt(index);
  }
  return value;
}","public static int readInt(final JSONArray javascriptarray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return javascriptarray.getInt(index);
  }
  if (notNull && javascriptarray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!javascriptarray.isNull(index)) {
    value=javascriptarray.getInt(index);
  }
  return value;
}",99,6,"jsonArray:javascriptarray,",51,0.68,ALERT
876,"private void loadTranslationsCacheIfEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
","private void loadTranslationsCacheIFPresent(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
",91,3,"loadTranslationsCacheIfEmpty:loadTranslationsCacheIFPresent,",35,0.45,ALERT
877,,,31,2,,753,5.9992499351501500,0
878,"public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""""))   return;
  readConfig(new FileReader(filename));
}
","public void readFile(String content) throws FileNotFoundException {
  if (content == null || content.equals(""""))   return;
  readFile(new FileReader(content));
}
",35,2,"readConfig:readFile,filename:content,",105,0.76,ALERT
879,"public void sort(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.sort(values,0,size);
    sorted=true;
  }
}","public void size(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.size(values,0,size);
    sorted=true;
  }
}",33,1,"sort:size,",34,0.31,ALERT
880,,,103,4,,1498,22.916895886262300,0
881,"public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
","public void prepentParents(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
",62,4,"ascendTree:prepentParents,",35,0.33,ALERT
882,,,46,3,,1154,10.702529668808000,0
884,"private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){
  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gb == 0.0) {
    beforeRootT=tb;
    beforeRootG=gb;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gb >= ga);
    return true;
  }
}","private boolean createParent(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gpu){
  check(ga == 0.0 || gpu == 0.0 || (ga > 0.0 && gpu < 0.0) || (ga < 0.0 && gpu > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gpu == 0.0) {
    beforeRootT=tb;
    beforeRootG=gpu;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gpu >= ga);
    return true;
  }
}",545,15,"findRoot:createParent,gb:gpu,",242,3.81,ALERT
885,"@Override public boolean isArmed(){
  return other.isArmed();
}
","@Override public boolean isArMed(){
  return other.isArMed();
}
",16,1,"isArmed:isArMed,",34,0.46,ALERT
886,"public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
","public static void issumetrue(BooleanSupplier assumptionSupposer,Supplier<String> messageAppller) throws TestAbortedException {
  if (!assumptionSupposer.getAsBoolean()) {
    throwTestAbortedException(messageAppller.get());
  }
}
",38,3,"assumptionSupplier:assumptionSupposer,messageSupplier:messageAppller,assumeTrue:issumetrue,",90,1.92,ALERT
887,"private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + ip);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + ip,nfe);
  }
  return parts.length;
}","private static int ipTObytes(String part,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=part.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + part);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + part);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + part,nfe);
  }
  return parts.length;
}",157,7,"ip:part,ipToBytes:ipTObytes,",140,1.32,ALERT
888,"protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}","protected int read(SpeechRecord recorder,byte[] reference){
  int layer=reference.length;
  int numofParts=recorder.read(reference,0,layer);
  int status=getStatus(numofParts,layer);
  if (status == 0) {
    System.arraycopy(reference,0,mRecording,mRecordedLength,numofParts);
    mRecordedLength+=layer;
  }
  return status;
}",75,7,"buffer:reference,len:layer,numOfBytes:numofParts,",142,1.52,ALERT
889,"protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
","protected void prepate(){
  for (  ProcessInfoParameter parA : getParameter()) {
    String i=parA.getParameterName();
    if (parA.getParameter() == null)     ;
 else     if (i.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=parA.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + i);
  }
  p_C_InvoicePageId=getRecord_ID();
}
",76,5,"prepare:prepate,para:parA,name:i,p_C_Invoice_ID:p_C_InvoicePageId,",173,1.7,ALERT
890,"public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}
","public int size(long fileOffset,byte[] result,int type,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.size(result,type,length);
}
",41,5,"buffer:result,offset:type,read:size,",132,1.03,ALERT
891,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mBitmapShader == null)   return;
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDurationText=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);
  canvas.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    canvas.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    canvas.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    canvas.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  canvas.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  canvas.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  canvas.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}","@Override protected void doRender(Canvas conner){
  super.doRender(conner);
  if (mBitmapShader == null)   return;
  conner.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  conner.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDistanceTime=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDistanceTime,0,mDistanceTime.length(),mRectDuration);
  conner.drawText(mDistanceTime,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    conner.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    conner.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    conner.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  conner.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  conner.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  conner.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}",372,3,"onDraw:doRender,mDurationText:mDistanceTime,canvas:conner,",100,2.92,ALERT
892,"public static Query newPrefixQuery(String field,InetAddress value,int prefixLength){
  if (value == null) {
    throw new IllegalArgumentException(""InetAddress must not be null"");
  }
  if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {
    throw new IllegalArgumentException(""illegal prefixLength \'"" + prefixLength + ""\'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges"");
  }
  byte lower[]=value.getAddress();
  byte upper[]=value.getAddress();
  for (int i=prefixLength; i < 8 * lower.length; i++) {
    int m=1 << (7 - (i & 7));
    lower[i >> 3]&=~m;
    upper[i >> 3]|=m;
  }
  try {
    return newRangeQuery(field,InetAddress.getByAddress(lower),InetAddress.getByAddress(upper));
  }
 catch (  UnknownHostException e) {
    throw new AssertionError(e);
  }
}","public static Query newPreixRange(String f,InetAddress message,int paddingLeft){
  if (message == null) {
    throw new IllegalArgumentException(""InetAddress must not be null"");
  }
  if (prpaddingLeft 0 || prpaddingLeft 8 * message.getAddress().length) {
    throw new IllegalArgumentException(""illegal prefixLength \'"" + paddingLeft + ""\'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges"");
  }
  byte lolayer=message.getAddress();
  byte upfixed=message.getAddress();
  for (intcii=paddingLeft; ci < 8 * layer.length; ci++) {
    int mv1 << (7 - (ci & 7));
    layer[ci >> 3]&=~v;
    fixed[ci >> 3]|=v;
  }
  try {
    return newRangeQuery(f,InetAddress.getByAddress(layer),InetAddress.getByAddress(fixed));
  }
 catch (  UnknownHostException e) {
    throw new AssertionError(e);
  }
}",177,8,"newPrefixQuery:newPreixRange,field:f,value:message,prefixLength:paddingLeft,lower:layer,upper:fixed,i:ci,m:v,",974,11.25,ALERT
893,"public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){
  registerOperators(name,operatorsXML,classLoader,null);
}
","public static void RegisterOperands(String name,InputStream operancesMLML,ClassLoader clloader){
  RegisterOperands(name,operancesMLML,clloader,null);
}
",27,4,"classLoader:clloader,operatorsXML:operancesMLML,registerOperators:RegisterOperands,",88,1.06,ALERT
894,"public void save() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
","public void post() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
",58,1,"save:post,",30,0.31,ALERT
895,,,36,1,,466,3.8226513187090600,0
896,,,12,2,,772,5.547504587968190,0
899,"public void testSortsAccordingNumberOfAttributes() throws Exception {
  XppDom dom1=XppFactory.buildDom(""<dom/>"");
  XppDom dom2=XppFactory.buildDom(""<dom a=\'1\'/>"");
  assertEquals(-1,comparator.compare(dom1,dom2));
  assertEquals(""/dom::count(@*)"",xpath.get());
  assertEquals(1,comparator.compare(dom2,dom1));
  assertEquals(""/dom::count(@*)"",xpath.get());
}","public void assertSortsByNoOfTimes() throws Exception {
  XppDom dim3=XppFactory.buildDom(""<dom/>"");
  XppDom dom2=XppFactory.buildDom(""<dom a=\'1\'/>"");
  assertEquals(-1,comparator.compare(dim3,dom2));
  assertEquals(""/dom::count(@*)"",xpath.get());
  assertEquals(1,comparator.compare(dom2,dim3));
  assertEquals(""/dom::count(@*)"",xpath.get());
}",80,3,"dom1:dim3,testSortsAccordingNumberOfAttributes:assertSortsByNoOfTimes,",60,0.54,ALERT
900,"@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){
  checkSasHandleGood(sasCore);
  grainSamples=grain;
  return 0;
}","@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int cASHandle,int grain){
  checkSasHandleGood(cASHandle);
  grainSamples=grain;
  return 0;
}",39,4,"sasCore:cASHandle,",36,0.89,ALERT
901,"public static RepositoryMetaData readFrom(StreamInput in) throws IOException {
  String name=in.readString();
  String type=in.readString();
  Settings settings=Settings.readSettingsFromStream(in);
  return new RepositoryMetaData(name,type,settings);
}
","public static RepositoryMetaData createForm(StreamInput serv) throws IOException {
  String nanameerv.readString();
  String tytypeerv.readString();
  Settings sesettingsettings.readSettingsFromStream(serv);
  return new RepositoryMetaData(name,type,settings);
}
",51,5,"readFrom:createForm,in:serv,",211,1.81,ALERT
902,"private void assertDescribedResource(final BigdataValue describedResource,final IDescribeCache describeCache,final TestHelper h){
  final Graph actualGraph=describeCache.lookup(describedResource.getIV());
  assertNotNull(actualGraph);
  final Set<Statement> expectedGraph=getExpectedDescription(describedResource,h);
  h.compareGraphs(new HashSet<Statement>(actualGraph),expectedGraph);
  for (  Statement stmt : actualGraph) {
    assertTrue(stmt instanceof BigdataStatement);
    final BigdataStatement st=(BigdataStatement)stmt;
    assertNotNull(st.s());
    assertNotNull(st.p());
    assertNotNull(st.o());
    if (st.getContext() != null) {
      assertNotNull(st.c());
    }
  }
}
","private void assertDescribedResource(final BigdataValue identifiedFile,final IDescribeCache describeCache,final TestHelper h){
  final Graph existingGraph=describeCache.lookup(identifiedFile.getIV());
  assertNotNull(existingGraph);
  final Set<Statement> expectedGraph=getExpectedDescription(identifiedFile,h);
  h.compareGraphs(new HashSet<Statement>(existingGraph),expectedGraph);
  for (  Statement stmt : existingGraph) {
    assertTrue(stmt instanceof BigdataStatement);
    final BigdataStatement ust=(BigdataStatement)stmt;
    assertNotNull(ust.s());
    assertNotNull(ust.p());
    assertNotNull(ust.o());
    if (ust.getContext() != null) {
      assertNotNull(ust.c());
    }
  }
}
",141,8,"describedResource:identifiedFile,st:ust,actualGraph:existingGraph,",225,3.72,ALERT
903,"void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
","void generilewhile(Tree.WhileStatement expression){
  Tree.WhileClause whileCwhileClausession.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder u : vars) {
    u.forget();
  }
}
",61,5,"generateWhile:generilewhile,that:expression,v:u,",211,5.25,ALERT
904,,,144,5,,1426,15.012090380986500,0
905,"public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}","public static double toDegrees(double dx){
  if (Double.isInfinite(dx) || dx == 0.0) {
    return dx;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(dx);
  double xb=dx - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}",72,6,"x:dx,",52,0.48,ALERT
908,,,260,10,,1843,16.189227255185400,0
909,,,15,1,,448,5.406283835570020,0
910,"protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}
","protected String scanWith(final String target,String start){
  return scanWith(target,null,start);
}
",23,3,"searchFor:scanWith,",32,0.36,ALERT
911,"void deriveConfidenceValue(double baseCount){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) {
    m_confidence=m_recordCount / baseCount;
  }
}","void deriveConfidenceCorrection(double BaseSize){
  if (Utils.isMissingValum_classce) && !Utils.isMissingValue(BaseSize) && BaseSize > 0) {
   m_classe=m_recordCount / BaseSize;
  }
}",37,3,"deriveConfidenceValue:deriveConfidenceCorrection,baseCount:BaseSize,m_confidence:m_class,",368,4.03,ALERT
912,"private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}","private long conver2Gb(int omegaParts){
  long bytes=omegaParts;
  bytes=bytes * 1024 * 1024;
  return bytes;
}",25,3,"megaBytes:omegaParts,convertToBytes:conver2Gb,",56,0.51,ALERT
913,"public void test_getPutByteArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}","public void test_getFixedbyteA(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}",211,7,"test_getPutByteArray:test_getFixedbyteA,",58,0.81,ALERT
914,"private void updateTrafficProjections(){
  List<AirMapTraffic> updated=new ArrayList<>();
  for (  AirMapTraffic traffic : allTraffic) {
    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {
      allTraffic.remove(traffic);
      Coordinate projected=projectedCoordinate(traffic);
      traffic.setCoordinate(projected);
      traffic.setShowAlert(false);
      allTraffic.add(traffic);
      updated.add(traffic);
    }
  }
  notifyUpdated(updated);
}","private void updateTraiffPortors(){
  List<AirMapTraffic> updated=new ArrayList<>();
  for (  AirMapTraffic translict : allTraffic) {
    if (translict.getGroundSpeedKt() > -1 && translict.getTrueHeading() > -1) {
      allTraffic.remove(translict);
      Coordinate projected=projectedCoordinate(translict);
      translict.setCoordinate(projected);
      translict.setShowAlert(false);
      allTraffic.add(translict);
      updated.add(translict);
    }
  }
  notifyUpdated(updated);
}",99,4,"traffic:translict,updateTrafficProjections:updateTraiffPortors,",128,1.49,ALERT
915,"public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
","public void base(String fileznFile) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(fileznFile,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
",62,4,"flagzDirectory:fileznFile,init:base,",87,0.75,ALERT
916,"public void close() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}","public void commit() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputCamera != null)     inputCamera.commit();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputCamera=null;
}",68,2,"close:commit,inputStream:inputCamera,",67,0.53,ALERT
917,"public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}","public static String morpa(String translation,boolean tags){
  if (translation.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(translation);
  StringBuilder view=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpa=new Morpha(new StringReader(textPart),tags);
      if (view.length() != 0) {
        view.append("" "");
      }
      view.append(morpa.next());
    }
  }
 catch (  Error e) {
    return translation;
  }
catch (  java.io.IOException e) {
    return translation;
  }
  return view.toString();
}",134,6,"text:translation,result:view,morpha:morpa,",111,1.09,ALERT
918,"private void extractWeightValues(List<Synapse> synapses){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}","private void extractWeightPoints(List<Synapse> synapses){
  int exWeights=0;
  int inWirds=0;
  for (  Synapse n : synapses) {
    double kw=n.getStrength();
    if (kw > 0) {
      exWeights++;
    }
 else {
      inWirds++;
    }
  }
  features[0]=new double[exWeights];
featurests[1]=new double[inWirds];
  exWeights=0;
  inWirds=0;
  if (features[0].length != 0) {
    for (    Synapse n : synapses) {
      double kw=n.getStrength();
      if (kw > 0) {
        wfeatures0][exWeights++]=kw;
      }
 else {
       featuress[1][inWirds++]=kw;
      }
    }
  }
}",151,7,"extractWeightValues:extractWeightPoints,inWeights:inWirds,s:n,w:kw,weights:features,",295,3.27,ALERT
919,"public static float parseFloat(String s){
  if (POSITIVE_INFINITY.equals(s)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(s)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(s)) {
    return Float.NaN;
  }
 else {
    s=trimPlusSign(s);
    return Float.parseFloat(s);
  }
}
","public static float getFloat(String signed){
  if (POSITIVE_INFINITY.equals(signed)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(signed)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(signed)) {
    return Float.NaN;
  }
 else {
    signed=trimPlusSign(signed);
    return Float.getFloat(signed);
  }
}
",78,2,"parseFloat:getFloat,s:signed,",199,1.73,ALERT
920,,,26,3,,967,9.891296156247460,0
921,"@Override public Iterator<Profile> iterator(){
  return profiles.iterator();
}
","@Override public Iterator<Profile> ter(){
  return profiles.ter();
}
",19,1,"iterator:ter,",34,0.24,ALERT
922,,,24,3,,902,10.25981631676360,0
923,"protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}","protected void openPart(float[] inputs,int inputOffset,float[] outputs,int outputStart){
  float input=inputs[inputOffset];
  for (int io=0; io < getNumOutputs(); io++) {
    outputs[io + outputStart]=getC0(io) + (float)(Math.pow(input,getN()) * (getC1(io) - getC0(io)));
  }
}",88,7,"i:io,outputOffset:outputStart,doFunction:openPart,",170,1.82,ALERT
924,"public void remove(String btxn){
synchronized (filterMap) {
    FilterProcessor oldfp=filterMap.get(btxn);
    if (oldfp != null) {
      globalExclusionFilters.remove(oldfp);
      btxnFilters.remove(oldfp);
    }
  }
}
","public void del(String btrn){
synchronized (filterMap) {
    FilterProcessor oldfp=filterMap.get(btrn);
    if (oldfp != null) {
      globalExclusionFilters.del(oldfp);
      btxnFilters.del(oldfp);
    }
  }
}
",47,3,"remove:del,btxn:btrn,",71,0.95,ALERT
925,"protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}","protected int __offset(int vtable67error){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable67error < bb.getShort(vtable) ? bb.getShort(vtable + vtable67error) : 0;
}",42,3,"vtable_offset:vtable67error,",39,0.35,ALERT
926,"public void test_nonEmptyJournal() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult snapshotResult=f.get();
        final File snapshotFile=snapshotResult.getFile();
        try {
          final Journal tmp=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}","public void test_nonEmptyJournal() throws IOException, InterruptedError, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult snapshotResult=f.get();
        final File snapshotFile=snapshotResult.getFile();
        try {
          final Journal output=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),output.getRootBlockView());
          output.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}",217,10,"InterruptedException:InterruptedError,tmp:output,",357,7.53,ALERT
927,"public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}","public IElementType creaturesstring(){
  CharSequence buffer=getBuffer();
  int currentlyPosition=getTokenEnd();
  setTokenStart(currentlyPosition);
  int bufferEnd=getBufferEnd();
  char openSpace=buffer.charAt(currentlyPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openSpace);
  boolean quotesDiffer=openSpace != closeQuote;
  boolean isescaped=false;
  int quoteDeep=0;
  currentlyPosition++;
  while (currentlyPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentlyPosition);
    if (!isescaped && quoteDeep == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isescaped && quotesDiffer) {
      if (currentChar == openSpace) {
        quoteDeep++;
      }
 else       if (currentChar == closeQuote) {
        quoteDeep--;
      }
    }
    isescaped=!isescaped && currentChar == '\\\\';
    currentlyPosition++;
  }
  if (currentlyPosition < bufferEnd) {
    currentlyPosition++;
  }
  setTokenEnd(currentlyPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}",194,11,"currentPosition:currentlyPosition,isEscaped:isescaped,quotesDepth:quoteDeep,openQuote:openSpace,captureString:creaturesstring,",352,4.12,ALERT
928,"private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
","private List<NameValuePair> buildIPTPparameter(Ipt iper,String OrganizationType){
  List<NameValuePair> entry=new ArrayList<NameValuePair>();
  if (iper != null && OrganizationType != null) {
    dentryadd(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(OrganizationType)));
    dentryadd(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(iper.getName())));
    dentryadd(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(iper.getDescription())));
    dentryadd(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(iper.getPrimaryContactType())));
    dentryadd(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(iper.getPrimaryContactName())));
    dentryadd(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(iper.getPrimaryContactEmail())));
    entry.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    entry.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return entry;
}
",210,4,"buildIPTParameters:buildIPTPparameter,ipt:iper,organisationKey:OrganizationType,data:entry,",703,6.54,ALERT
929,"public boolean fireMapMouseClicked(MouseEvent evt){
  if (DEBUG) {
    logger.fine(""MapMouseSupport: fireMapMouseClicked"");
  }
  clickHappened=true;
  boolean consumed=false;
  evt=new MapMouseEvent(getParentMode(),evt);
  if (priorityListener != null && evt.getClickCount() > 1) {
    priorityListener.mouseClicked(evt);
    consumed=true;
  }
  priorityListener=null;
  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {
    Iterator<MapMouseListener> it=iterator();
    while (it.hasNext() && !consumed) {
      MapMouseListener target=it.next();
      consumed=target.mouseClicked(evt) && consumeEvents;
      if (consumed) {
        priorityListener=target;
      }
    }
  }
  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));
  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {
    proxy.mouseClicked(evt);
    consumed=true;
  }
  return consumed;
}","public boolean fireMapmouseclickED(MouseEvent evt){
  if (DEBUG) {
    logger.fine(""MapMouseSupport: fireMapMouseClicked"");
  }
  clickHappened=true;
  boolean Consumed=false;
  evt=new MapMouseEvent(getParentMode(),evt);
  if (priorityListener != null && evt.getClickCount() > 1) {
    priorityListener.mouseClicked(evt);
    Consumed=true;
  }
  priorityListener=null;
  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {
    Iterator<MapMouseListener> it=iterator();
    while (it.hasNext() && !Consumed) {
      MapMouseListener target=it.next();
      Consumed=target.mouseClicked(evt) && consumeEvents;
      if (Consumed) {
        priorityListener=target;
      }
    }
  }
  boolean ignoreConsumed=!Consumed || (Consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));
  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {
    proxy.mouseClicked(evt);
    Consumed=true;
  }
  return Consumed;
}",200,7,"consumed:Consumed,fireMapMouseClicked:fireMapmouseclickED,",206,1.79,ALERT
930,"public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
","public static void copyRealmPrivilegesFromParent(SSOToken manager,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(manager,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(manager,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(manager,sName);
        AMIdentity newId=new AMIdentity(manager,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
",450,16,"token:manager,",81,0.9,ALERT
931,"private static String createJsMethodInvocationExpression(String methodName,boolean isStatic,String... paramNames){
  StringBuilder sb=new StringBuilder();
  sb.append(isStatic ? WND : THIS);
  sb.append(""."");
  sb.append(methodName);
  sb.append(""("");
  for (int i=0; i < paramNames.length; i++) {
    if (i != 0) {
      sb.append("", "");
    }
    sb.append(paramNames[i]);
  }
  sb.append("");"");
  return sb.toString();
}","private static String createJsMethodInvokeExaration(String methodLine,boolean isstatic,String... ParameterNames){
  StringBuilder sk=new StringBuilder();
  sk.append(isstatic ? WND : THIS);
  sk.append(""."");
  sk.append(methodLine);
  sk.append(""("");
  for (int i=0;xii < xiarameterNames.length; xi++) {
    if (xi != 0) {
      sk.append("", "");
    }
    sb.askend(ParameterNames[xi]);
  }
  sk.append("");"");
  return sk.toString();
}",114,6,"createJsMethodInvocationExpression:createJsMethodInvokeExaration,methodName:methodLine,isStatic:isstatic,paramNames:ParameterNames,sb:sk,i:xi,",1202,14.56,ALERT
932,,,54,2,,802,5.54222838083903,0
933,,,41,5,,1160,18.23449633518860,0
934,"private synchronized boolean _restart() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
","private synchronized boolean _rearts() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
",35,1,"_restart:_rearts,",24,0.27,ALERT
935,"public static void runFinalization(){
  RUNTIME.runFinalization();
}
","public static void RunEndize(){
  RUNTIME.RunEndize();
}
",14,1,"runFinalization:RunEndize,",34,0.35,ALERT
936,"public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}","public void modifier(SSOToken info,String obPath,ModificationItem[] files) throws SMSException, SSOException {
  if ((obPath == null) || (obPath.length() == 0) || (files == null)|| (files.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  StringObjIdy=obPath.toLowerCase();
  String fhandle=null;
  mRWLock.readRequest();
  try {
   fhandleh=mNameMap.getProperty(ObjId);
    if (fhandle == null) {
      Stringerrmailg=""SMSFlatFileObject.modify: object "" + obPath + "" not found."";
      mDebug.error(errmail);
      throw new ServiceNotFoundException(errmail);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
   fhandleh=mNameMap.getProperty(ObjId);
    if (fhandle == null) {
      Stringerrmailg=""SMSFlatFileObject.modify: object "" + obPath + "" not found."";
      mDebug.error(errmail);
      throw new ServiceNotFoundException(errmail);
    }
    Fileworkhandlee=new File(fhandle);
    if (!workhandle.isFile()) {
      Stringerrmailg=""SMSFlatFileObject.modify: Attributes file for object "" + obPath + "" not found."";
      mDebug.error(errmail);
      throw new ServiceNotFoundException(errmail);
    }
    Propertiescompbss=loadPropertiesworkhandlee,obPath);
    boolean hhasSunXmlPropertyUnit(compbs.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < files.length; i++) {
      modifyValues(obPath,files[i],compbs);
    }
    savePropertiescompbssworkhandlee,obPath);
    if (!hasSunXmlPropertyUnit) {
      hhasSunXmlPropertyUnit(compbs.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlPropertyUnit) {
      deleteSunXmlKeyValFiles(workhandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,compbs.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(workhandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}",377,11,"modify:modifier,token:info,objName:obPath,mods:files,objKey:ObjId,filepath:fhandle,errmsg:errmail,filehandle:workhandle,props:compbs,hasSunXmlKeyValue:hasSunXmlPropertyUnit,",648,6.0,ALERT
937,"public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
","public static NativePage createNativepageforurl(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativepageforurl(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
",42,6,"createNativePageForURL:createNativepageforurl,",42,0.4,ALERT
938,"public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}","public void fill_ellipse_arr(PlaEllipse[] p_ellippe_all,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellippe_all.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellippe_all) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}",260,15,"p_ellipse_arr:p_ellippe_all,",81,2.91,ALERT
939,"public final <T>void removeInternal(List<T> list,int position){
  if (hasHeaderView() && position == 0)   return;
  if (enableLoadMore() && position == getItemCount() - 1)   return;
  if (list.size() > 0) {
synchronized (mLock) {
      list.remove(hasHeaderView() ? position - 1 : position);
    }
    removeNotifyExternal(position);
    notifyItemRemoved(position);
  }
}","public final <T>void removeExternal(List<T> list,int option){
  if (hasHeaderView() && option == 0)   return;
  if (enableLoadMore() && option == getItemCount() - 1)   return;
  if (list.size() > 0) {
synchronized (mLock) {
      list.remove(hasHeaderView() ? option - 1 : option);
    }
    removeNotifyExternal(option);
    notifyItemRemoved(option);
  }
}",90,3,"removeInternal:removeExternal,position:option,",57,0.49,ALERT
940,"public void addListener(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}
","public void removeListener(CircularProgressViewListener adderver){
  if (adderver != null)   listeners.add(adderver);
}
",22,2,"addListener:removeListener,listener:adderver,",139,0.92,ALERT
941,"private void fillXMLAttribute(Attributes att,int index){
  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));
  String type=att.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));
}
","private void fillXmlribute(Attributes info,int thread){
  fillQName(fAttributeQName,info.getURI(thread),info.getLocalName(thread),info.getQName(thread));
  String type=info.getType(thread);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,info.getValue(thread));
}
",74,4,"att:info,index:thread,fillXMLAttribute:fillXmlribute,",131,1.12,ALERT
942,"public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
","public boolean replicateDickyReading(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
",28,2,"indicateDirtyRead:replicateDickyReading,",30,0.31,ALERT
943,"public boolean checkModifiers(MouseEvent e){
  return e.getModifiers() == modifiers;
}
","public boolean testMODifiers(MouseEvent me){
  return me.getModifiers() == modifiers;
}
",18,2,"checkModifiers:testMODifiers,e:me,",383,6.09,ALERT
945,"public double elasticity(final double spot){
  final double val=value();
  final double del=delta(spot);
  if (val > Constants.QL_EPSILON)   return del / val * spot;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}","public double elasticity(final double delay){
  final double aval=value();
  final double del=delta(delay);
  if (aval > Constants.QL_EPSILON)   return del / aval * delay;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}",77,4,"val:aval,spot:delay,",104,1.3,ALERT
946,"private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
","private void updateZonalTable(UnManagedExportMask task,List<Initiator> initiators,List<StoragePort> storagePortipes){
  ZoneInfoMap zhivingPub=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePortipes);
  for (  ZoneInfo zoneInfo : zhivingPub.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  task.setZoningMap(zhivingPub);
}
",84,6,"mask:task,zoningMap:zhivingPub,storagePorts:storagePortipes,updateZoningMap:updateZonalTable,",188,2.05,ALERT
947,,,27,1,,443,4.348231911659240,0
948,"private void nukeSymbols(){
  _count=0;
  _longestCollisionList=0;
  Arrays.fill(_mainHash,0);
  Arrays.fill(_mainNames,null);
  Arrays.fill(_collList,null);
  _collCount=0;
  _collEnd=0;
}","private void nukeSymbols(){
  _length=0;
  _longestCollisionList=0;
  Arrays.fill(_mainHash,0);
  Arrays.fill(_mainNames,null);
  Arrays.fill(_collList,null);
  _collSum=0;
  _collEnd=0;
}",50,5,"_count:_length,_collCount:_collSum,",33,1.26,ALERT
949,"public Enumeration<String> enumerateMeasures(){
  Vector<String> newVector=new Vector<String>(1);
  newVector.addElement(""measureNumIterations"");
  return newVector.elements();
}","public Enumeration<String> enumerationMeasuring(){
  Vector<String> newString=new Vector<String>(1);
  newString.addElement(""measureNumIterations"");
  return newString.elements();
}",39,2,"enumerateMeasures:enumerationMeasuring,newVector:newString,",158,1.18,ALERT
950,,,53,5,,774,6.32286905447642,0
951,"public AnnotationDrawer(final AnnotationsModel model,final ProcessRendererModel rendererModel){
  this.model=model;
  this.rendererModel=rendererModel;
  this.displayCache=new HashMap<>();
  this.cachedID=new HashMap<>();
  pane=new JEditorPane(""text/html"","""");
  pane.setBorder(null);
  pane.setOpaque(false);
}
","public AnnotationDrawer(final AnnotationsModel type,final ProcessRendererModel endererFile){
  this.type=type;
  this.endererFile=endererFile;
  this.displayMap=new HashMap<>();
  this.cashedID=new HashMap<>();
  pale=new JEditorPane(""text/html"","""");
  pale.setBorder(null);
  pale.setOpaque(false);
}
",71,5,"model:type,rendererModel:endererFile,displayCache:displayMap,cachedID:cashedID,pane:pale,",824,5.24,ALERT
952,"public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}","public double percentile(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> closed=new TreeSet<Constant>();
  Constant before=null;
  for (  Constant pkt : sorted) {
    if (range.contaipktpct))     closed.add(pkt);
 else     if (closed.isEmpty())     before=pkt;
  }
  if (closed.size() == 0)   return 0.0;
  double prevPrevPercentore == null ? 0.0 : pcts.get(before);
  return pcts.get(closed.last()) - PrevPercent;
}",119,7,"percentage:percentile,contained:closed,prev:before,pct:pkt,prevPercent:PrevPercent,",318,3.59,ALERT
953,,,47,1,,389,3.0081318656603500,0
954,"public void despawn(VisibleObject object){
  despawn(object,true);
}
","public void despaense(VisibleObject e){
  despaense(e,true);
}
",16,2,"object:e,despawn:despaense,",66,0.71,ALERT
955,"private static CharHandler parseUnprintableExtCodes(String[] codeStrings){
  if (codeStrings.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  byte[] bytes=codesToBytes(codeStrings[0],true);
  if (bytes.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  return new UnprintableExtCharHandler(bytes[0]);
}","private static CharHandler parseUnprintableExtLocategories(String[] codeSTRers){
  if (codeSTRers.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeSTRers));
  }
  byte[]ipss=codesToBytes(codeSTRers[0],true);
  if (ips.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeSTRers));
  }
  return new UnprintableExtCharHandler(ips[0]);
}",85,3,"parseUnprintableExtCodes:parseUnprintableExtLocategories,codeStrings:codeSTRers,bytes:ips,",409,4.99,ALERT
956,"static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
","static public void endall(List<String> p,String[] array){
  for (  String hop : array)   p.add(hop);
}
",32,4,"list:p,addAll:endall,item:hop,",83,0.77,ALERT
957,,,47,4,,1502,18.525186808904000,0
958,"private void initializeMessages(List<String> messages){
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(messages);
  _currentTip=-1;
}","private void initialisemessages(List<String> ramagers){
  ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  ramagers.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(ramagers);
  _selectedPosition=-1;
}",182,3,"initializeMessages:initialisemessages,messages:ramagers,_currentTip:_selectedPosition,",928,8.66,ALERT
960,"protected final void firePropertyChange(String propertyName,long oldValue,long newValue){
  firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}
","protected final void fireIntegerChanged(String prototypeName,long andValue,long oldValues){
  fireIntegerChanged(prototypeName,Long.valueOf(andValue),Long.valueOf(oldValues));
}
",35,4,"firePropertyChange:fireIntegerChanged,propertyName:prototypeName,oldValue:andValue,newValue:oldValues,",231,4.3,ALERT
962,"private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}","private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode slave : top) {
    Collection<HadoopInputSplit> split=mappers.get(slave.id());
    int weight=reducerNodeWeight(slave,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(slave.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode slave : nodes) {
    slave.floatWeight=((float)slave.weight * reducerCnt) / totalWeight;
    slave.weight=Math.round(slave.floatWeight);
    totalAdjustedWeight+=slave.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode slave=iter.previous();
      if (slave.weight > 0) {
        slave.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode slave=iter.next();
      if (slave.floatWeight > 0.0f) {
        slave.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode slave : nodes) {
    if (slave.weight > 0) {
      int[] arr=new int[slave.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(slave.nodeId,arr);
    }
  }
  return reducers;
}",444,13,"node:slave,",117,3.9,ALERT
963,"@SuppressWarnings(""unchecked"") private void expungeStaleEntries(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}","@SuppressWarnings(""unchecked"") private void expungeStaggedEntrations(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}",75,4,"expungeStaleEntries:expungeStaggedEntrations,",124,0.83,ALERT
964,"private void SaveGCMData(){
  try {
    SharedPreferences preferences=getSharedPreferences();
    SharedPreferences.Editor editor=preferences.edit();
    editor.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId);
    editor.putString(PREFS_PUSHER_URL_KEY,mPusherUrl);
    editor.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag);
    editor.commit();
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,""SaveGCMData failed "" + e.getLocalizedMessage());
  }
}
","private void SaveGCMData(){
  try {
    SharedPreferences preferences=getSharedPreferences();
    SharedPreferences.Editor attr=preferences.edit();
    attr.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId);
    attr.putString(PREFS_PUSHER_URL_KEY,mPusherUrl);
    attr.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag);
    attr.commit();
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,""SaveGCMData failed "" + e.getLocalizedMessage());
  }
}
",83,3,"editor:attr,",40,0.74,ALERT
965,"public static String formatLong(long number){
  return intFormat.format(number);
}
","public static String FormatBig(long amount){
  return intFormat.format(amount);
}
",18,2,"formatLong:FormatBig,number:amount,",101,0.73,ALERT
966,,,61,5,,1442,9.718754096825920,0
967,"public boolean removeShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (hook == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(hook);
  }
}","public boolean removeShutdownHook(Thread log){
  SecurityManager bm=System.getSecurityManager();
  if (bm != null) {
    bm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (log == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(log);
  }
}",76,3,"sm:bm,hook:log,",69,0.56,ALERT
968,"protected void paintContentBorderTopEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){
  if (isContentBorderPainted) {
    g.setColor(selectHighlight);
    g.fillRect(x,y,w - 1,1);
  }
}","protected void paintContentBorderFirstCell(Graphics gm,int ix,int d,int i,int oh,boolean drawBroatten,Rectangle closePoly,boolean isContentborderpainted){
  if (isContentborderpainted) {
    gm.setColor(selectHighlight);
    gm.fillRect(ix,d,i - 1,1);
  }
}",58,9,"paintContentBorderTopEdge:paintContentBorderFirstCell,g:gm,x:ix,y:d,w:i,h:oh,drawBroken:drawBroatten,selRect:closePoly,isContentBorderPainted:isContentborderpainted,",1724,16.91,ALERT
969,"public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){
  IgniteLogger log=logRef.get();
  if (log == null) {
    logRef.compareAndSet(null,ctx.log(obj.getClass()));
    log=logRef.get();
  }
  return log;
}
","public static IgniteLogger Logger(GridKernalContext cache,AtomicReference<IgniteLogger> coreReference,Object job){
  IgniteLogger log=coruserference.get();
  if (user == null) {
    locoreReferenceompareAndSet(null,cache.user(job.getClass()));
    log=coruserference.get();
  }
  return user;
}
",65,5,"logger:Logger,ctx:cache,logRef:coreReference,obj:job,log:user,",613,4.54,ALERT
970,,,26,1,,448,3.2903000871340400,0
971,"private void refreshDoneButton(boolean done){
  butDone.setText(done ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
","private void refetchDoneButton(boolean done){
  butDone.setText(done ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
",30,2,"refreshDoneButton:refetchDoneButton,",20,0.29,ALERT
972,"public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}","public synchronized void trackHexImages(IHex orig,MediaTracker tracker){
  Image base=hexToImageCache.get(orig);
  List<Image> superImgs=hexToImageListCache.get(orig);
  List<Image> orthoImgs=orthoListCache.get(orig);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}",146,7,"hex:orig,",55,1.3,ALERT
973,"private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}","private static String formatsamplePercent(int sample){
  return MHZ_FORMATTER.format((double)sample / 1E6d);
}",23,2,"rate:sample,formatSampleRate:formatsamplePercent,",57,0.46,ALERT
974,,,58,4,,749,7.012413410345710,0
975,"public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){
  if (argIndex < 0 || argIndex >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,argIndex + 1);
    if (argValue != null) {
      args.remove(argIndex + 1);
    }
  }
  args.remove(argIndex);
  return argIndex;
}","public static int removeArgsAndReturnInsertionsIndex(List<String> args,int armPosition,boolean tryRemovingArgValue){
  if (armPosition < 0 || armPosition >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,armPosition + 1);
    if (argValue != null) {
      args.remove(armPosition + 1);
    }
  }
  args.remove(armPosition);
  return armPosition;
}",83,4,"argIndex:armPosition,removeArgsAndReturnInsertionIndex:removeArgsAndReturnInsertionsIndex,",67,1.12,ALERT
976,,,17,2,,810,12.566012446085600,0
977,"public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}","public void writeNoScale(Image ctx,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (ctx.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(ctx,x,y,ctx.getWidth(null),ctx.getHeight(null),null);
  }
}",94,5,"c:ctx,",43,0.31,ALERT
978,"public boolean isLessThen(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) < 0);
}","public boolean isLessThen(Average Average){
  assertDefined();
  BigDecimal ThisUnit=notNull(this);
  BigDecimal parameter=notNull(Average);
  return (ThisUnit.compareTo(parameter) < 0);
}",41,4,"Percent:Average,thisValue:ThisUnit,",64,0.46,ALERT
979,"public void close() throws IOException {
  rrdFile.close();
}
","public void closed() throws IOException {
  rrdFile.closed();
}
",15,1,"close:closed,",34,0.33,ALERT
980,"public void testInvokeAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void testInvuteAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}",84,4,"testInvokeAll2:testInvuteAll2,",60,0.75,ALERT
981,,,24,1,,442,3.8364047686259000,0
982,,,17,2,,802,5.864181383450830,0
984,"private void changeAnnotationDocumentState(SourceDocument aSourceDocument,User aUser,AnnotationDocumentStateTransition aAnnotationDocumentStateTransition){
  AnnotationDocument annotationDocument=repository.getAnnotationDocument(aSourceDocument,aUser);
  annotationDocument.setState(AnnotationDocumentStateTransition.transition(aAnnotationDocumentStateTransition));
  try {
    repository.createAnnotationDocument(annotationDocument);
  }
 catch (  IOException e) {
    LOG.info(""Unable to get the LOG file"");
  }
}
","private void changeAnotationdocumentStates(SourceDocument aInputCollection,User saUSER,AnnotationDocumentStateTransition aAnnotationDocumentStateTranseal){
  AnnotationDocument anannnotationocumentepository.getAnnotationDocument(aInputCollection,saUSER);
annnotationocumentnt.setState(AnnotationDocumentStateTransition.transition(aAnnotationDocumentStateTranseal));
  try {
    repository.createAnnotationDocument(annnotationocument);
  }
 catch (  IOException e) {
    LOG.info(""Unable to get the LOG file"");
  }
}
",63,5,"changeAnnotationDocumentState:changeAnotationdocumentStates,aSourceDocument:aInputCollection,aUser:saUSER,aAnnotationDocumentStateTransition:aAnnotationDocumentStateTranseal,annotationDocument:annnotationocument,",570,5.63,ALERT
985,"public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void ExternalEntityStruct(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.ExternalEntityStruct(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",79,5,"externalEntityDecl:ExternalEntityStruct,",41,0.56,ALERT
986,,,58,3,,1156,9.887975482145950,0
987,,,64,4,,1055,7.362915035088860,0
988,"private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        resolveFiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}","private void Resolvefiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        Resolvefiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}",141,8,"resolveFiles:Resolvefiles,",60,1.62,ALERT
989,,,30,1,,448,4.044399750232700,0
990,"protected void processBytes(byte[] buf,int off,int len){
  nBytesIn+=len;
  if (len < 1 || state.isDone())   return;
  if (state == State.ROW_READY)   throw new PngjInputException(""this should only be called if waitingForMoreInput"");
  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException(""should not happen"");
  inf.setInput(buf,off,len);
  if (isCallbackMode()) {
    while (inflateData()) {
      int nextRowLen=processRowCallback();
      prepareForNextRow(nextRowLen);
      if (isDone())       processDoneCallback();
    }
  }
 else   inflateData();
}","protected void processingData(byte[] buf,int off,int len){
  nBytesIn+=len;
  if (len < 1 || state.isDone())   return;
  if (state == State.ROW_READY)   throw new PngjInputException(""this should only be called if waitingForMoreInput"");
  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException(""should not happen"");
  inf.setInput(buf,off,len);
  if (isCallbackMode()) {
    while (inflateData()) {
      int nextRowLen=processRowCallback();
      prepareForNextRow(nextRowLen);
      if (isDone())       processDoneCallback();
    }
  }
 else   inflateData();
}",126,6,"processBytes:processingData,",80,0.74,ALERT
991,,,31,2,,801,9.419411691029870,0
992,"public int findStartOfColumn(int column){
  if (column == mColumns)   return getSpaceUsed();
  int currentColumn=0;
  int currentCharIndex=0;
  while (true) {
    int newCharIndex=currentCharIndex;
    char c=mText[newCharIndex++];
    boolean isHigh=Character.isHighSurrogate(c);
    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;
    int wcwidth=WcWidth.width(codePoint);
    if (wcwidth > 0) {
      currentColumn+=wcwidth;
      if (currentColumn == column) {
        while (newCharIndex < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newCharIndex])) {
            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {
              newCharIndex+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newCharIndex]) <= 0) {
            newCharIndex++;
          }
 else {
            break;
          }
        }
        return newCharIndex;
      }
 else       if (currentColumn > column) {
        return currentCharIndex;
      }
    }
    currentCharIndex=newCharIndex;
  }
}","public int findstartOfcolumn(int position){
  if (position == mColumns)   return getSpaceUsed();
  int currentColumn=0;
  int currentCharIndex=0;
  while (true) {
    int newByteOffset=currentCharIndex;
    char c=mText[newByteOffset++];
    boolean isHigh=Character.isHighSurrogate(c);
    int codePoint=isHigh ? Character.toCodePoint(c,mText[newByteOffset++]) : c;
    int wcwidth=WcWidth.width(codePoint);
    if (wcwidth > 0) {
      currentColumn+=wcwidth;
      if (currentColumn == position) {
        while (newByteOffset < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newByteOffset])) {
            if (WcWidth.width(Character.toCodePoint(mText[newByteOffset],mText[newByteOffset + 1])) <= 0) {
              newByteOffset+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newByteOffset]) <= 0) {
            newByteOffset++;
          }
 else {
            break;
          }
        }
        return newByteOffset;
      }
 else       if (currentColumn > position) {
        return currentCharIndex;
      }
    }
    currentCharIndex=newByteOffset;
  }
}",213,9,"newCharIndex:newByteOffset,column:position,findStartOfColumn:findstartOfcolumn,",211,7.36,ALERT
993,"public static File searchPaths(Iterable<? extends File> paths,String relFile){
  for (  File path : paths) {
    File f=new File(path,relFile);
    if (f.exists()) {
      return path;
    }
  }
  return null;
}
","public static File searchChildrenFiles(Iterable<? extends File> Pathions,String RelFiles){
  for (  File patfolderPathions) {
    File f=ngw File(pfolderRelFiles);
    if (g.exists()) {
      return folder;
    }
  }
  return null;
}
",54,5,"searchPaths:searchChildrenFiles,paths:Pathions,relFile:RelFiles,path:folder,f:g,",394,4.31,ALERT
994,"@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
","@Override public long createMem(long windowId) throws IOException {
  long page=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return page;
}
",40,3,"size:page,freeMemory:createMem,",53,0.37,ALERT
995,"private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}","private static int deccodeoctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}",98,5,"decodeOctets:deccodeoctets,",70,0.66,ALERT
996,"public void labelDistances(Hypergraph<V,E> graph,V root){
  labelDistances(graph,Collections.singleton(root));
}
","public void labelContance(Hypergraph<V,E> growth,V root){
  labelContance(growth,Collections.singleton(root));
}
",29,3,"labelDistances:labelContance,graph:growth,",68,0.88,ALERT
997,"public void beginUpdateMemoryUsed(long bytesUsed,boolean willSendEvent);
","public void beginUpdateTimeAvailable(long bytesFree,boolean WillSendEvents);
",11,3,"beginUpdateMemoryUsed:beginUpdateTimeAvailable,bytesUsed:bytesFree,willSendEvent:WillSendEvents,",109,1.66,ALERT
998,,,68,6,,2015,15.056880287329400,0
999,"public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}","public void calculateMin(double mini){
  if (this.mini == -1) {
    this.mini=mini;
  }
 else {
    this.mini=Math.mini(this.mini,mini);
  }
}",44,2,"min:mini,",41,0.93,ALERT
1000,"public ObjectMapper nextLevel(ObjectMapper level){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(level);
  return previous;
}
","public ObjectMapper nextLevel(ObjectMapper level){
  ObjectMapper Previous=levelStack.peek();
  levelStack.push(level);
  return Previous;
}
",28,3,"previous:Previous,",31,0.55,ALERT
1001,"private List<double[]> initializeWeightsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    weights.add(weight);
  }
  while (weights.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    weights.add(weight);
    candidates.remove(weight);
  }
  return weights;
}","private List<double[]> initializeWeightsLR(){
  int NT=50;
  List<double[]> cvalidplatesnew ArrayList<double[]>(numberOfPoints * NT);
  for (int ii0; ii< numberOfPoints * NT; i++) {
    double[] size=new double[numberOfObjectives];
    for (int e=0; e < numberOfObjectives; e++) {
      size[e]=PRNG.nextDouble();
    }
    doublseum=StatUtilseum(size);
    for (int e=0; e < numberOfObjectives; e++) {
      size[e]/=se;
    }
    validplates.add(size);
  }
  List<double[]> wwsnew ArrayList<double[]>(numberOfPoints * NT);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] size=new double[numberOfObjectives];
    size[i]=1.0;
  wsts.add(size);
  }
  while (ws.size() < numberOfPoints) {
    double[] size=null;
    double depth=Double.NEGATIVE_INFINITY;
    for (int ii0; ii< validplates.size(); i++) {
      double dad=Double.POSITIVE_INFINITY;
      for (int e=0; e < ws.size(); e++) {
 dad      d=Madadh.min(d,MathArrdepthance(validplates.get(i),ws.get(e)));
      }
      idad (d > depth) {
        wsizevalidplates.get(i);
        depth=dad;
      }
    }
  wsts.add(size);
    validplates.remove(size);
  }
  return ws;
}",335,10,"initializeWeightsND:initializeWeightsLR,N:NT,candidates:validplates,weight:size,j:e,sum:se,weights:ws,distance:depth,d:dad,",470,4.08,ALERT
1002,"public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
","public static Object desynchronized(String Filepath){
  ObjectInputStream cms=null;
  try {
    cms=new ObjectInputStream(new FileInputStream(Filepath));
    Object oinocms.readObject();
    cms.close();
    return ino;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(cms);
  }
}
",106,4,"deserialization:desynchronized,filePath:Filepath,in:cms,o:ino,",501,4.68,ALERT
1003,"public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
","public boolean ensTo(Name n){
  if (n instanceof CompoundName) {
    return (impl.ensTo(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
",43,2,"endsWith:ensTo,",28,0.32,ALERT
1004,"public void testOtherToStringDefault(){
  NumberConverter converter=makeConverter();
  assertEquals(""Default Convert "",""ABC"",converter.convert(String.class,new StringBuffer(""ABC"")));
}
","public void assertOtherToStringDouble(){
  NumberConverter conputters=makeConverter();
  assertEquals(""Default Convert "",""ABC"",conputters.convert(String.class,new StringBuffer(""ABC"")));
}
",36,2,"converter:conputters,testOtherToStringDefault:assertOtherToStringDouble,",53,0.55,ALERT
1005,"public static String pad(String string,int n,String padding,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}","public static String patch(String string,int n,String packing,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (packing == null || packing.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=packing.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}",178,8,"pad:patch,padding:packing,",185,2.49,ALERT
1007,"private InputStream findTemplate(String path,String template){
  try {
    File file=new File(path,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
","private InputStream readtemplate(String cache,String template){
  try {
    File file=new File(cache,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}
",67,4,"path:cache,findTemplate:readtemplate,",116,0.9,ALERT
1009,"private void cmd_import(){
  JFileChooser jc=new JFileChooser();
  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  jc.setDialogType(JFileChooser.OPEN_DIALOG);
  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}","private void cmd_import(){
  JFileChooser cgi=new JFileChooser();
  cgi.setDialogTitle(Msg.getMsg(Env.getCtx(),""Import""));
  cgi.setDialogType(JFileChooser.OPEN_DIALOG);
  cgi.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (cgi.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(cgi.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""HTMLEditor.import"" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}",175,6,"jc:cgi,",52,0.38,ALERT
1010,"@RequestMapping(value=""/SAML2/IDPSSO/{tenant:.*}"") public void ssoBindingError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""IDP SSO binding error! The client locale is "" + locale.toString() + "", tenant is ""+ tenant);
  ssoDefaultTenantError(locale,response);
}","@RequestMapping(value=""/SAML2/IDPSSO/{tenant:.*}"") public void ssoBbindingService(Locale formales,@PathVariable(value=""tenant"") String constants,HttpServletResponse tree) throws IOException {
  logger.info(""IDP SSO binding error! The client locale is "" + formales.toString() + "", tenant is ""+ constants);
  ssoDefaultTenantError(formales,tree);
}",55,4,"ssoBindingError:ssoBbindingService,locale:formales,tenant:constants,response:tree,",542,5.11,ALERT
1011,"private void writePkgInfo() throws BuildException {
  File pkgInfo=new File(mContentsDir,""PkgInfo"");
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo)));
    writer.print(bundleProperties.getCFBundlePackageType());
    writer.println(bundleProperties.getCFBundleSignature());
    writer.flush();
  }
 catch (  IOException ex) {
    throw new BuildException(""Cannot create PkgInfo file: "" + ex);
  }
 finally {
    mFileUtils.close(writer);
  }
}
","private void writePkgInfo() throws BuildException {
  File cpInfo=new File(mContentsDir,""PkgInfo"");
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(new BufferedWriter(new FileWriter(cpInfo)));
    writer.print(bundleProperties.getCFBundlePackageType());
    writer.println(bundleProperties.getCFBundleSignature());
    writer.flush();
  }
 catch (  IOException ex) {
    throw new BuildException(""Cannot create PkgInfo file: "" + ex);
  }
 finally {
    mFileUtils.close(writer);
  }
}
",98,3,"pkgInfo:cpInfo,",36,0.33,ALERT
1012,"public static double[] lsf2lpc(double[] lsf){
  MathUtils.quickSort(lsf);
  int P=lsf.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsf[0]);
  }
  for (i=1; i < P; i++) {
    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ lsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}","public static double[] lsf2lpc(double[] slrf){
  MathUtils.quickSort(slrf);
  int PIslrf.length;
  int half_orders=I / 2;
  int iu, j;
  double xf, zz;
  double[] af=new double[I / 2 + 1];
  double[] alpha2=new double[I / 2 + 1];
  double[] p02=new double[I / 2 + 1];
  double[] b=new double[I / 2 + 1];
  double[] b01=new double[I / 2 + 1];
  double[] b2=new double[I / 2 + 1];
  double[] p=new double[I / 2];
  double[] q=new double[I / 2];
  double[] oneMinusA=new double[I + 1];
  oneMinusA[0]=1.;
  if ((slrf[0] <= 0.0) || (slrf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + slrf[0]);
  }
  for (iu=1; iu < I; iu++) {
    if (slrf[iiu <= slrf[iu - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((slrf[i]iu<= 0.0) || (slrf[iiu >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + iiu+ ""] = ""+ slrf[iu]);
  }
  for (iiu0; iiu< half_orders; iu++) {
    p[ipu=-2 * Math.cos(MathUtils.TWOPI * slrf[2 * iu]);
    q[iqu=-2 * Math.cos(MathUtils.TWOPI * slrf[2 * iu + 1]);
  }
  xf=0.0;
  for (iu=0; iu <= I; iu++) {
    if (iu == 0)     zz=1.0;
 else     zz=0.0;
    af[0]=zz + xf;
    b[0]=zz - xf;
    xf=zz;
    for (jj0; jj< half_orders; j++) {
      af[j + 1]=af[j] + p[j] p alpha2[j] + p02[j];
      b[j + 1]=b[j] + qqj] * b01[j] + b2[j];
      a2[jp02alpha2[j];
      aalpha2j]=af[j];
      bb2j]=b01[j];
      b01[j]=b[j];
    }
    if (i iu 0)     oneMoneMinusAu0.5 * (a[afalf_orders] + bbhalf_orders]);
  }
  return oneMinusA;
}",545,17,"lsf:slrf,P:I,half_order:half_orders,i:iu,xx:zz,a:af,a1:alpha2,a2:p02,b1:b01,",666,6.46,ALERT
1013,"public void add(final CertificateValidity certificateValidity){
  certificateValidityList.add(certificateValidity);
}
","public void and(final CertificateValidity certityCality){
  certificateValidityList.and(certityCality);
}
",17,2,"add:and,certificateValidity:certityCality,",66,0.52,ALERT
1014,"protected void parseCommand(final String... args){
  for (  String arg : args) {
    final Command command=Command.valueOfName(arg);
    if (command != null) {
      setCommand(command);
      break;
    }
  }
}
","protected void secommand(final String... args){
  for (  String arg : args) {
    final Command command=Command.valueOfName(arg);
    if (command != null) {
      setCommand(command);
      break;
    }
  }
}
",46,3,"parseCommand:secommand,",22,0.19,ALERT
1015,"private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){
  if (slice != null) {
    Collection<Replica> allReplicasForShard=slice.getReplicas();
    if (allReplicasForShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""No replicas found  in shard/collection: "" + shard + ""/""+ collectionName);
    }
    if (allReplicasForShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There is only one replica available in shard/collection: "" + shard + ""/""+ collectionName+ "". Cannot delete that."");
    }
    if (allReplicasForShard.size() <= count) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There are lesser num replicas requested to be deleted than are available in shard/collection : "" + shard + ""/""+ collectionName+ "" Requested: ""+ count+ "" Available: ""+ allReplicasForShard.size()+ ""."");
    }
  }
}","private void validateReplicasavailability(Slice slice,String slarding,String collectionNames,int more){
  if (slice != null) {
    Collection<Replica> allReplicasByShard=slice.getReplicas();
    if (allReplicasByShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""No replicas found  in shard/collection: "" + slarding + ""/""+ collectionNames);
    }
    if (allReplicasByShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There is only one replica available in shard/collection: "" + slarding + ""/""+ collectionNames+ "". Cannot delete that."");
    }
    if allReplicasByShardd.size() <= more) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,""There are lesser num replicas requested to be deleted than are available in shard/collection : "" + slarding + ""/""+ collectionNames+ "" Requested: ""+ more+ "" Available: ""+ allReplicasByShard.size()+ ""."");
    }
  }
}",143,6,"validateReplicaAvailability:validateReplicasavailability,shard:slarding,collectionName:collectionNames,count:more,allReplicasForShard:allReplicasByShard,",306,6.03,ALERT
1016,"public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}","public void void_getPutBytesObject(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] assuming=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(assuming);
    buf.put(pos,assuming);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,assuming.length,assuming,pos,assuming.length,buf.array()));
    final byte[] actual=new byte[assuming.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(assuming,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}",211,7,"expected:assuming,test_getPutByteArray:void_getPutBytesObject,",239,2.09,ALERT
1017,"public void updatePoint(float x,float y){
  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(x,-y));
  }
}","public void setFunction(float xp,float m){
  if (Math.sqrt(xp * xp + m * m) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(xp,-m));
  }
}",50,3,"y:m,x:xp,updatePoint:setFunction,",85,0.72,ALERT
1018,"public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}","public static String write(String styles,int width,char fillChar){
  if (styles.length() >= width) {
    return styles;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - styles.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(styles);
  return sb.toString();
}",82,6,"s:styles,right:write,",191,1.76,ALERT
1019,"@Override public void makeImmutable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeImmutable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}
","@Override public void makeMututable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeMututable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}
",90,5,"makeImmutable:makeMututable,",46,0.34,ALERT
1020,,,67,4,,1478,12.836187410354600,0
1021,"public RhythmGroup addOverlays(Collection<RhythmOverlay> overlays){
  mOverlays.addAll(overlays);
  if (mCurrentOverlayIndex == NO_OVERLAY) {
    selectOverlay(0);
  }
  return this;
}","public RhythmGroup addOverlays(Collection<RhythmOverlay> overLayers){
  mOverlays.addAll(overLayers);
  if (mCurrentOverlayIndex == NO_OVERLAY) {
    selectOverlay(0);
  }
  return this;
}",35,2,"overlays:overLayers,",35,0.31,ALERT
1022,"private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}","private synchronized boolean startStatsPekers(Destination port){
  statsMessageListener.setDestination(port);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(port) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(port),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}",98,3,"queue:port,pollStatsBroker:startStatsPekers,",63,0.43,ALERT
1023,"private static Object add(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}","private static Object mod(final Object ion,final int type,final Object element,final Class<?> clss){
  if (ion == null) {
    if (type != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + type + "", Length: 0"");
    }
    Object joiningarray=Array.newInstance(clss,1);
    Array.set(joiningarray,0,element);
    return joiningarray;
  }
  inshapeth=Array.getLength(ion);
  if (type >shapeh || type < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + type + "", Length: ""+ shape);
  }
  Objectroott=Array.newInstance(clss,shape + 1);
  System.arraycopy(ion,0roott,0,type);
  Array.setroott,type,element);
  if (type < shape) {
    System.arraycopy(ion,tyrootult,type + 1shapeh - type);
  }
  return root;
}",184,8,"add:mod,array:ion,index:type,joinedArray:joiningarray,length:shape,result:root,",497,8.29,ALERT
1024,"private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}","private String extractorSpanned(String splaces,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(splaces);
  assert (start >= offset);
  assert (end >= offset);
  splaces+=HTML_OPEN_SPAN;
  int substart=getSpanPos(splaces,start - offset);
  int subend=getSpanPos(splaces,end - offset + 1);
  return splaces.substring(substart,subend);
}",79,7,"extractSpan:extractorSpanned,spans:splaces,",156,2.09,ALERT
1025,"public EventBean[] toArray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}","public EventBean[] makearray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] breaks=new EventBean[1 + additionalEvents.size()];
  breaks[0]=firstEvent;
  int call=1;
  for (  EventBean thevent : additionalEvents) {
    breaks[call]=thevent;
    call++;
  }
  return breaks;
}",92,4,"toArray:makearray,events:breaks,count:call,theEvent:thevent,",288,3.22,ALERT
1026,"private boolean checkForCarry(final char[] ca1,final int icarry){
  boolean carry=false;
  if (icarry < ca1.length) {
    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9') {
      carry=true;
    }
 else     if (ca1[icarry] == '5') {
      int ii=icarry + 1;
      for (; ii < ca1.length; ii++) {
        if (ca1[ii] != '0') {
          break;
        }
      }
      carry=ii < ca1.length;
      if (!carry && icarry > 0) {
        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');
      }
    }
  }
  return carry;
}","private boolean checkforScary(final char[] icainf,final int iclor){
  boolean coll=false;
  if (icaicloricainf.length) {
    if (icainf[icarry] =iclor|| icainf[icarryiclor7' || icainf[icaiclor= '8' || icainf[iclor] == '9') {
      coll=true;
    }
 else     if (icainf[iclor] == '5') {
      intkui=iclor + 1;
      for (; ii kuicainf.length; ku++) {
        if (icainf[ku] != '0') {
          break;
        }
      }
      carcoll kuicainf.length;
      if (colly && iclor > 0) {
        carry=(icacollcarry - 1] iclor || icainf[icarry - iclor'3' || icainf[icarryiclor== '5' || icainf[icaiclor1] == '7' || icainf[iclor - 1] == '9');
      }
    }
  }
  return coll;
}",184,5,"checkForCarry:checkforScary,ca1:icainf,icarry:iclor,ii:ku,carry:coll,",468,16.99,ALERT
1027,"public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}","public void renabelEditLabel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}",87,5,"renameEditorPanel:renabelEditLabel,",62,1.8,ALERT
1028,"public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){
  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());
}
","public static float generaterandomFloatbetween(float upperlimit,float upperLimit){
  return upperlimit + ((upperLimit - upperlimit) * _r.nextFloat());
}
",30,3,"lowerLimit:upperlimit,generateRandomFloatBetween:generaterandomFloatbetween,",52,0.48,ALERT
1029,,,77,4,,1494,24.227632761001600,0
1030,"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readExternal(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
","@Override public void readObject(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readObject(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
",38,4,"readExternal:readObject,",34,0.37,ALERT
1031,,,19,2,,763,7.152585466702780,0
1032,"public boolean isValidNumber(PhoneNumber number){
  String regionCode=getRegionCodeForNumber(number);
  return isValidNumberForRegion(number,regionCode);
}
","public boolean IsInvalidAddress(PhoneNumber result){
  String RegionCode=getRegionCodeForNumber(result);
  return isValidNumberForRegion(result,RegionCode);
}
",25,3,"isValidNumber:IsInvalidAddress,number:result,regionCode:RegionCode,",252,2.92,ALERT
1033,"private float checkSaturationValid(final float val){
  float tempval=val;
  if (val > 1) {
    tempval=1;
  }
  if (val < 0) {
    tempval=0;
  }
  return tempval;
}","private float checksaturatedInvalid(final float scale){
  float tetemValcale;
  if (scale > 1) {
    temVal=1;
  }
  if (scale < 0) {
    temVal=0;
  }
  return temVal;
}",42,3,"checkSaturationValid:checksaturatedInvalid,val:scale,tempval:temVal,",147,1.59,ALERT
1034,"static boolean isRefreshNotificationRegistered(NotificationListener client,RefreshNotificationType type){
  boolean isRegistered=false;
  Map<RefreshNotificationType,Integer> notifications=null;
synchronized (refreshClients) {
    notifications=(Map<RefreshNotificationType,Integer>)refreshClients.get(client);
  }
  if (notifications != null) {
    Integer timerNotificationId=notifications.get(type);
    if (timerNotificationId != null) {
      isRegistered=true;
    }
  }
  return isRegistered;
}
","static boolean isRefreshnotificationEnabled(NotificationListener client,RefreshNotificationType role){
  boolean Isregistered=false;
  Map<RefreshNotificationType,Integer> annotifies=null;
synchronized (refreshClients) {
    annotifies=(Map<RefreshNotificationType,Integer>)refreshClients.get(client);
  }
  if (annotifies != null) {
    IntegtimerNotifyIdnId=annotifies.get(role);
    if (timerNotifyId != null) {
      Isregistered=true;
    }
  }
  return Isregistered;
}
",83,6,"isRefreshNotificationRegistered:isRefreshnotificationEnabled,type:role,notifications:annotifies,timerNotificationId:timerNotifyId,isRegistered:Isregistered,",303,3.75,ALERT
1035,,,265,9,,3249,33.33363580703740,0
1036,"@Override protected void addChooserFilters(JFileChooser chooser){
  javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage(""FileFilterLabel"",""*.dfm, *.hex""),""dmf"",""hex"");
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Digitrax Mangled Firmware (*.dmf)"",""dmf""));
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Intel Hex Format Firmware (*.hex)"",""hex""));
  chooser.addChoosableFileFilter(filter);
  chooser.setFileFilter(filter);
}
","@Override protected void addChooserfilers(JFileChooser chooser){
  javax.swing.filechooser.FileNameExtensionFilter format=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage(""FileFilterLabel"",""*.dfm, *.hex""),""dmf"",""hex"");
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Digitrax Mangled Firmware (*.dmf)"",""dmf""));
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(""Intel Hex Format Firmware (*.hex)"",""hex""));
  chooser.addChoosableFileFilter(format);
  chooser.setFileFilter(format);
}
",95,3,"addChooserFilters:addChooserfilers,filter:format,",146,1.42,ALERT
1037,"public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}","public Matrix4 multiplBySc(double xScale,double yScale,double zRepeat){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zRepeat;
  m[6]*=zRepeat;
  m[10]*=zRepeat;
  m[14]*=zRepeat;
  return this;
}",111,5,"zScale:zRepeat,multiplyByScale:multiplBySc,",127,1.15,ALERT
1039,"public boolean boundScroll(){
  float curScroll=getStackScroll();
  float newScroll=getBoundedStackScroll(curScroll);
  if (Float.compare(newScroll,curScroll) != 0) {
    setStackScroll(newScroll);
    return true;
  }
  return false;
}","public boolean boundScroll(){
  float curScroll=getStackScroll();
  float nowScroll=getBoundedStackScroll(curScroll);
  if (Float.compare(nowScroll,curScroll) != 0) {
    setStackScroll(nowScroll);
    return true;
  }
  return false;
}",48,3,"newScroll:nowScroll,",36,0.37,ALERT
1040,,,85,2,,763,9.44233455657959,0
1041,"protected Instance specifier(int i){
  return m_Specifiers.get(i);
}
","protected Instance specifier(int uri){
  return m_Specifiers.get(uri);
}
",17,2,"i:uri,",35,0.25,ALERT
1042,"public boolean containsWindow(Class<?> windowClass){
  return (getWindow(windowClass) != null);
}
","public boolean contatchesPackage(Class<?> widgetType){
  return (getWindow(widgetType) != null);
}
",22,2,"containsWindow:contatchesPackage,windowClass:widgetType,",98,1.14,ALERT
1043,,,14,1,,413,3.8115461707115200,0
1044,"@SuppressWarnings(""unchecked"") @Test public void innerEnum(){
  Class<?> pc=PlayingCard.class;
  List<Enum<?>> include=new ArrayList<>();
  List<Enum<?>> exclude=new ArrayList<>();
  for (  Class<?> c : pc.getDeclaredClasses()) {
    int mods=c.getModifiers();
    if (c.isEnum()) {
      if (Modifier.isPublic(mods)) {
        include.addAll(asList(c.getEnumConstants()));
      }
 else {
        exclude.addAll(asList(c.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> actual=getConcreteOperations(pc);
  assertEquals(""number of statements"",include.size() + 5,actual.size());
  for (  Enum<?> e : include) {
    assertTrue(""enum constant "" + e.name() + "" should occur"",actual.contains(createEnumOperation(e)));
  }
  for (  Enum<?> e : exclude) {
    assertFalse(""enum constant "" + e.name() + "" should not occur"",actual.contains(createEnumOperation(e)));
  }
}","@SuppressWarnings(""unchecked"") @Test public void checkEncumber(){
  Class<?> pc=PlayingCard.class;
  List<Enum<?>> include=new ArrayList<>();
  List<Enum<?>> enclude=new ArrayList<>();
  for (  Class<?> c : pc.getDeclaredClasses()) {
    int mods=c.getModifiers();
    if (c.isEnum()) {
      if (Modifier.isPublic(mods)) {
        include.addAll(asList(c.getEnumConstants()));
      }
 else {
        enclude.addAll(asList(c.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> actual=getConcreteOperations(pc);
  assertEquals(""number of statements"",include.size() + 5,actual.size());
  for (  Enum<?> element : include) {
    assertTrue(""enum constant "" + element.name() + "" should occur"",actual.contains(createEnumOperation(element)));
  }
  for (  Enum<?> element : enclude) {
    assertFalse(""enum constant "" + element.name() + "" should not occur"",actual.contains(createEnumOperation(element)));
  }
}",233,8,"e:element,exclude:enclude,innerEnum:checkEncumber,",263,2.33,ALERT
1045,"private static void removeLoopSafepoint(StructuredGraph graph){
  LoopBeginNode loopBegin=findFirstLoop(graph);
  loopBegin.disableSafepoint();
}
","private static void removeLoopSafewoint(StructuredGraph model){
  LoopBeginNode loopBeginning=findFirstLoop(model);
  loopBeginning.disableSafepoint();
}
",24,3,"removeLoopSafepoint:removeLoopSafewoint,graph:model,loopBegin:loopBeginning,",246,4.08,ALERT
1046,,,17,1,,411,2.9174694776535000,0
1047,,,244,9,,2667,48.12800718148550,0
1048,"public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
","public void runCommand(Reader source) throws IOException, SQLException {
  try {
    boolean originalSyncCommitter=connection.getAutoCommit();
    try {
      if (originalSyncCommitter != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runCommand(connection,source);
    }
  finally {
      connection.setAutoCommit(originalSyncCommitter);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
",94,3,"originalAutoCommit:originalSyncCommitter,reader:source,runScript:runCommand,",93,0.63,ALERT
1049,"public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}","public static byte[] Combine(final List<byte[]> dataPartunk){
  int tokenLength=0;
  for (  final byte[] dsplitPart: dataPartunk) {
    tokenLength+=splitPart.length;
  }
  final byte[] dastartew byte[tokenLength];
  int part=0;
  for (  final byte[] dsplitPart: dataPartunk) {
    System.arraycopy(splitPart,0,dstartipartsplitPart.length);
    ipart=splitPart.length;
  }
  return start;
}",96,6,"combine:Combine,dataChunks:dataPartunk,totalSize:tokenLength,dataPart:splitPart,data:start,index:part,",547,6.39,ALERT
1050,"protected void recoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
","protected void reccoverprimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
",434,7,"recoverPrimary:reccoverprimary,",63,1.41,ALERT
1051,"public void addColumn(String name,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    addColumn(name,ex);
  }
}
","public void addedMember(String error,String xx){
  Expressiorxex=ExpressionParser.parse(xx);
  Throwable r=ExpressionParser.getError();
  if (r != null) {
    throw new RuntimeException(r);
  }
 else {
    addedMember(error,rx);
  }
}
",56,5,"addColumn:addedMember,name:error,expr:xx,ex:rx,t:r,",213,1.72,ALERT
1052,"public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
","public String resolve(File files,JSON m){
  try {
    Template template=getTemplate(files);
    if (template != null) {
      StringWriter worker=new StringWriter();
      BufferedWriter writer=new BufferedWriter(worker);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return worker.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
",103,6,"w:worker,file:files,parse:resolve,",195,1.67,ALERT
1053,"public static void discard(){
  current.remove();
}
","public static void Discarded(){
  current.remove();
}
",14,1,"discard:Discarded,",17,0.15,ALERT
1054,,,104,8,,2577,22.73735167980190,0
1056,,,60,5,,1112,11.866118427117700,0
1057,"protected void addToGUI(JPanel gui,JTextField b,String cmd){
  b.setActionCommand(cmd);
  b.addActionListener(this);
  gui.add(b);
}
","protected void addTOgui(JPanel gb,JTextField b,String func){
  b.setActionCommand(func);
  b.addActionListener(this);
  gb.add(b);
}
",36,4,"gui:gb,cmd:func,addToGUI:addTOgui,",123,1.14,ALERT
1058,,,18,2,,732,7.349894714355470,0
1059,,,30,1,,428,3.6937422156333900,0
1060,"public void makeClass(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless);
}","public void createCLASS(String stri,boolean safite){
  for (int i=I; i I ststriength(); iI+)   createCLASS(stri.charAI(i),safite);
}
",42,4,"makeClass:createCLASS,str:stri,caseless:safite,i:I,",471,4.26,ALERT
1061,"public static Function<Value,Value> ofValue(){
  return VALUE;
}
","public static Function<Value,Value> OFRule(){
  return VALUE;
}
",16,1,"ofValue:OFRule,",13,0.17,ALERT
1062,"public static String encodeUrl(final String str){
  return encode(str,""%20"");
}","public static String encodeUrl(final String exp){
  return encode(exp,""%20"");
}",19,2,"str:exp,",35,0.53,ALERT
1063,"public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(reader),sw,timeout);
  sw.close();
  return sw.toString();
}","public static String Tostring(Reader url,long timeout) throws IOException {
  StringWriter wp=new StringWriter(512);
  copy(toBufferedReader(url),wp,timeout);
  wp.close();
  return wp.Tostring();
}",49,4,"toString:Tostring,sw:wp,reader:url,",99,0.79,ALERT
1064,"public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}","public void ready(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer prev=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        prev.put(buffer);
        buffer=prev;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}",170,4,"load:ready,next:prev,",199,1.5,ALERT
1065,"@Override public String dumpWindowHierarchy(boolean compressed){
  device.setCompressedLayoutHeirarchy(compressed);
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    device.dumpWindowHierarchy(os);
    os.close();
    return os.toString(""UTF-8"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    device.setCompressedLayoutHeirarchy(false);
  }
  return null;
}","@Override public String dumpWindowFirarchy(boolean compacted){
  device.setCompressedLayoutHeirarchy(compacted);
  try {
    ByteArrayOutputStream outs=new ByteArrayOutputStream();
    device.dumpWindowFirarchy(outs);
    outs.close();
    return outs.toString(""UTF-8"");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    device.setCompressedLayoutHeirarchy(false);
  }
  return null;
}",89,3,"dumpWindowHierarchy:dumpWindowFirarchy,compressed:compacted,os:outs,",142,1.24,ALERT
1066,"private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}","private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int p){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < p; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}",122,11,"ru:p,",64,2.6,ALERT
1067,"public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}","public static String replace(String a,String b,String ctx){
  StringBuilder result=new StringBuilder(ctx.length());
  int i=0;
  int j=ctx.indexOf(a);
  while (j >= i) {
    result.append(ctx.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=ctx.indexOf(a,i);
  }
  result.append(ctx.substring(i,ctx.length()));
  return result.toString();
}",119,7,"c:ctx,",62,0.5,ALERT
1068,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
","@Override public void actionPerformed(ActionEvent source){
  String command=source.getActionCommand();
  if (command.equals(""BackgroundPaint"")) {
    attemptModifyBackgroundPaint();
  }
}
",35,3,"event:source,",37,0.24,ALERT
1069,"private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}","private void sendResources(final UUID cuID,final Object resource,final long angle,final InputStream es) throws IOException {
  assert cuID != null;
  assert resource != null;
  assert angle >= 0;
  assert es != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(angle);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long codessum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(es),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      codessum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(codessum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + cuID + "", resource=""+ resource+ "", length=""+ angle+ "", checksum=""+ codessum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}",386,16,"checksum:codessum,length:angle,is:es,uuid:cuID,sendResource:sendResources,",462,4.16,ALERT
1070,"private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : ast.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}
","private static IAbstractNode convertOr(final CommonTree asting) throws RecognitionException {
  final List<IAbstractNode> ools=new ArrayList<IAbstractNode>();
  for (  final Object childObject : asting.getChildren()) {
    ools.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(ools);
}
",62,4,"children:ools,ast:asting,",91,1.22,ALERT
1071,"public List<String> makeURLList(String shard){
  List<String> urls=StrUtils.splitSmart(shard,""|"",true);
  for (int i=0; i < urls.size(); i++) {
    urls.set(i,buildUrl(urls.get(i)));
  }
  if (urls.size() > 1)   Collections.shuffle(urls,r);
  return urls;
}","public List<String> makeURLSister(String sharding){
  List<String> URLids=StrUtils.splitSmart(sharding,""|"",true);
  for (int i=0; i < URLids.size(); i++) {
    URLids.set(i,buildUrl(URLids.get(i)));
  }
  if (URLids.size() > 1)   Collections.shuffle(URLids,r);
  return URLids;
}",88,4,"urls:URLids,shard:sharding,makeURLList:makeURLSister,",119,1.35,ALERT
1072,"public void and(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}","public void with(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}",69,4,"and:with,",40,0.44,ALERT
1073,,,17,1,,394,2.694428527355190,0
1074,,,20,2,,656,21.1107918381691,0
1075,,,54,2,,799,7.168614848454790,0
1076,"public boolean offer(E event,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(event)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(event));
    done=true;
    return true;
  }
 else   return false;
}
","public boolean future(E expected,int Taskid) throws InterruptedException {
  assertNotDone();
  if (predicate.match(expected)) {
    this.controlled[Taskid]=true;
    for (    boolean match : controlled) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(expected));
    done=true;
    return true;
  }
 else   return false;
}
",77,5,"taskId:Taskid,offer:future,matched:controlled,event:expected,",146,1.33,ALERT
1079,,,51,4,,1175,12.040351800123900,0
1080,"protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}","protected void removeMarkers(){
  for (int j=markerImage.size(); j > 0; j--) {
    LocoIcon ol=markerImage.get(j - 1);
    if ((ol != null) && (ol.isActive())) {
      markerImage.remove(j - 1);
      ol.remove();
      ol.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}",93,3,"i:j,il:ol,",74,0.7,ALERT
1081,"private int determineMaxLevelRec(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);
  }
  return newLevel;
}","private int determineMaxDepthrec(int level,Node v){
  int newLevel=level;
  for (Edge ef=v.getFirstOutEdge(); ef != null; ef=v.getNextOutEdge(ef)) {
    newLevel=Math.max(newLevel,determineMaxDepthrec(level,ef.getTarget()) + 1);
  }
  return newLevel;
}",68,5,"determineMaxLevelRec:determineMaxDepthrec,e:ef,",233,4.47,ALERT
1082,"public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
","public Decimal subtract(Decimal decim){
  assertDefined();
  if (null == m_value) {
    return (decim);
  }
  BigDecimal value=m_value.subtract(decim.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
",49,3,"decimal:decim,",39,0.35,ALERT
1083,,,33,8,,2349,21.41155964533490,0
1084,"public void removeEventListener(SIPTransactionEventListener oldListener){
  eventListeners.remove(oldListener);
}
","public void removeeventAdapter(SIPTransactionEventListener OLDStreamer){
  eventListeners.remove(OLDStreamer);
}
",16,2,"removeEventListener:removeeventAdapter,oldListener:OLDStreamer,",309,1.97,ALERT
1085,,,39,2,,662,4.679275731245680,0
1086,"public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
","public boolean condition(final Direction order,final boolean facing){
  if (this.order != order) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= inpiring) {
    return false;
  }
  inpiring=now + DELAY;
  return true;
}
",70,5,"check:condition,expiration:inpiring,dir:order,",93,0.71,ALERT
1087,"private static long signFromBit_antiCyclic(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}","private static long bitsFromBit_antiCycyclik(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}",24,2,"signFromBit_antiCyclic:bitsFromBit_antiCycyclik,",29,0.29,ALERT
1088,"public boolean hasParameter(String name){
  return _parameters.hasParameter(name);
}
","public boolean includesReference(String name){
  return _parameters.includesReference(name);
}
",17,2,"hasParameter:includesReference,",32,0.26,ALERT
1089,,,17,2,,695,4.114213112990060,0
1090,,,39,6,,1839,12.7244895418485,0
1091,,,43,4,,1377,9.011444520950320,0
1092,,,24,1,,428,3.656468717257180,0
1093,"public Future<?> execute(CameraCommand command){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(command));
  }
}
","public Future<?> evaluate(CameraCommand project){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mClutor == null) {
      mClutor=mExecutorProvider.get();
    }
    checkNotNull(mClutor);
    return mClutor.submit(new CommandRunnable(project));
  }
}
",65,3,"execute:evaluate,command:project,mExecutor:mClutor,",334,2.54,ALERT
1094,,,53,3,,905,9.259084888299310,0
1095,"public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}
","public static void interbeat(final Thread worker){
  if (worker != null) {
    worker.interbeat();
  }
}
",25,2,"thread:worker,interrupt:interbeat,",65,0.67,ALERT
1097,"private boolean isValidEngine(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}","private boolean isSupportedMode(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append(""Flags:"" + serverSettings);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append(""Invalid Engine type for support vehicle engines!"");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append(""Rating:"" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    serverSettings|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString(""Engine.invalidCompactLarge""));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString(""Engine.invalidSphereOnly""));
return false;
}
break;
default :
problem.append(""Type:"" + engineType);
return false;
}
return true;
}",287,2,"engineFlags:serverSettings,isValidEngine:isSupportedMode,",47,0.46,ALERT
1098,,,51,3,,526,4.232219568888350,0
1099,"public ArrayList<String> GetElementList(String xPathExpression){
  try {
    ArrayList<String> values=new ArrayList<String>();
    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression);
    Iterator<?> iter=nodeList.iterator();
    while (iter.hasNext()) {
      org.jdom.Element element=(org.jdom.Element)iter.next();
      values.add(element.getText());
    }
    return values;
  }
 catch (  Exception ex) {
    LOG.error(""Error in handler: "" + ex.getMessage(),ex);
    return null;
  }
}
","public ArrayList<String> GetElementList(String xpathExExp){
  try {
    ArrayList<String> values=new ArrayList<String>();
    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xpathExExp);
    Iterator<?> walker=nodeList.iterator();
    while (walker.hasNext()) {
      org.jdom.Element element=(org.jdom.Element)walker.next();
      values.add(element.getText());
    }
    return values;
  }
 catch (  Exception ex) {
    LOG.error(""Error in handler: "" + ex.getMessage(),ex);
    return null;
  }
}
",127,6,"iter:walker,xPathExpression:xpathExExp,",75,0.75,ALERT
1100,"private List extractColumnKeys(String line){
  List keys=new java.util.ArrayList();
  int fieldIndex=0;
  int start=0;
  for (int i=0; i < line.length(); i++) {
    if (line.charAt(i) == this.fieldDelimiter) {
      if (fieldIndex > 0) {
        String key=line.substring(start,i);
        keys.add(removeStringDelimiters(key));
      }
      start=i + 1;
      fieldIndex++;
    }
  }
  String key=line.substring(start,line.length());
  keys.add(removeStringDelimiters(key));
  return keys;
}","private List extractedRowValues(String part){
  List by=new java.util.ArrayList();
  int fieldIndex=0;
  int start=0;
  for (int i=0; i < part.length(); i++) {
    if (part.charAt(i) == this.fieldDelimiter) {
      if (fieldIndex > 0) {
        String entry=part.substring(start,i);
        by.add(removeStringDelimiters(entry));
      }
      start=i + 1;
      fieldIndex++;
    }
  }
  String entry=part.substring(start,part.length());
  by.add(removeStringDelimiters(entry));
  return by;
}",134,7,"extractColumnKeys:extractedRowValues,line:part,keys:by,key:entry,",331,2.67,ALERT
1101,,,15,2,,812,5.225333778063460,0
1102,"public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}","public static double xp(double px,double clip,double scale,double factor){
  if (px <= 0)   return 0.0;
  final double a=Math.exp(clip * Math.log(scale) - (clip + 1) * Math.log(px) - (scale / px) - GammaFunction.lnGamma(clip));
  return factor * a;
}",77,6,"x:px,shape:clip,pdf:xp,",195,1.67,ALERT
1103,"public static void sortSeqs(List<String> seqs){
  Collections.sort(seqs,null);
}
","public static void sortSeences(List<String> seqs){
  Collections.sort(seqs,null);
}
",22,2,"sortSeqs:sortSeences,",27,0.22,ALERT
1104,,,130,6,,1950,15.701762108008100,0
1105,"final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void rint(double string){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(string);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",77,4,"v:string,print:rint,",128,0.84,ALERT
1106,"private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSchedule.arrivals);
    LOG.debug(""Original departures: {}"",originalSchedule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}","private TripSchedule rearrouteTrapSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSchedule.arrivals);
    LOG.debug(""Original departures: {}"",originalSchedule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}",429,14,"rerouteTripSchedule:rearrouteTrapSchedule,",138,3.36,ALERT
1107,,,42,3,,1109,8.026408922672270,0
1108,"default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}
","default Filterable<T> RemoveALL(final T... values){
  return RemoveALL(Stream.of(values));
}
",25,2,"removeAll:RemoveALL,",30,0.25,ALERT
1109,,,287,17,,5866,244.58411304950700,0
1110,,,132,4,,1450,28.05734703540800,0
1111,"protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}
","protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceEntrylist=new ArrayList<>();
    evidenceEntrylist.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceEntrylist);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}
",73,6,"evidenceElementList:evidenceEntrylist,",48,1.29,ALERT
1112,"public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}","public static double computesPad(double[] xp,double hanman){
  for (int iin0; iin< xp.length; in++) {
    xp[iin=Math.abs(xp[in] - hanman);
  }
  double mdaQuickSelect.mhanmanxp);
  if (!(da > 0.)) {
    double m=Double.POSITIVE_INFINITY;
    for (    double xsi: xp) {
      ifsixi > 0. &sixi < m) {
        m=si;
      }
    }
    if (m < Double.POSITIVE_INFINITY) {
      da=m;
    }
 else {
      da=1.0;
    }
  }
  return da;
}",127,7,"computeMAD:computesPad,x:xp,median:hanman,i:in,mad:da,min:m,xi:si,",404,6.49,ALERT
1113,"public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions){
  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size());
  HashSet<String> previousIds=new HashSet<String>();
  for (  ExecutionEntity execution : executions) {
    if (execution.getParentId() == null) {
      orderedList.add(execution);
      previousIds.add(execution.getId());
    }
  }
  while (orderedList.size() < executions.size()) {
    for (    ExecutionEntity execution : executions) {
      if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {
        orderedList.add(execution);
        previousIds.add(execution.getId());
      }
    }
  }
  return orderedList;
}
","public static List<ExecutionEntity> orderFromRoot2LERoot(Collection<ExecutionEntity> executions){
  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size());
  HashSet<String> preferredIdxs=new HashSet<String>();
  for (  ExecutionEntity execution : executions) {
    if (execution.getParentId() == null) {
      orderedList.add(execution);
      preferredIdxs.add(execution.getId());
    }
  }
  while (orderedList.size() < executions.size()) {
    for (    ExecutionEntity execution : executions) {
      if (!preferredIdxs.contains(execution.getId()) && preferredIdxs.contains(execution.getParentId())) {
        orderedList.add(execution);
        preferredIdxs.add(execution.getId());
      }
    }
  }
  return orderedList;
}",161,5,"orderFromRootToLeaf:orderFromRoot2LERoot,previousIds:preferredIdxs,",80,0.83,ALERT
1114,,,25,1,,438,4.639023685455320,0
1115,,,130,6,,1322,12.106957650184600,0
1116,"public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null)   return false;
  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}","public static boolean matchExtend(String undle,Collection<String> intions){
  if (undle == null)   return false;
  iintionsons == null intionsons.isEmpty())   return indexOfExtension(undle) == -1;
  StrilocalObjExt=getExtension(undle);
  for (  StriExtionion : intions) {
    if (localObj.equals(Extion))     return true;
  }
  return false;
}",78,5,"isExtension:matchExtend,filename:undle,extensions:intions,fileExt:localObj,extension:Extion,",474,8.04,ALERT
1118,"public static void sessionStop(){
  if (mProcess == null)   return;
  mProcess.destroy();
  mProcess=null;
}
","public static void sessionKill(){
  if (MConsole == null)   return;
  MConsole.destroy();
  MConsole=null;
}
",26,2,"mProcess:MConsole,sessionStop:sessionKill,",51,0.35,ALERT
1119,"public void paint(Graphics g){
  try {
    super.paint(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}","public void plaints(Graphics gui){
  try {
    super.plaints(gui);
  }
 catch (  Exception e) {
  }
  int ocusedCell=getFocusedRow(true);
  if (ocusedCell != -1 && ocusedCell < getRowCount()) {
    Border rowContainer=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowContainer != null) {
      Rectangle prot=getCellRect(ocusedCell,0,true);
      prot.padding=getWidth();
      rorowContaineraintBorder(this,gui,prot.x,prot.y,prot.padding,prot.height);
    }
  }
}",112,6,"paint:plaints,g:gui,focusedRow:ocusedCell,rowBorder:rowContainer,rect:prot,width:padding,",529,6.34,ALERT
1120,"private void addExprToTLA(TLAExpr expr){
  Vector sv=expr.toStringVector();
  Vector exprMapping=expr.toMappingVector();
  int indent=tlacodeNextLine.length();
  int nextLine=0;
  if (indent != 0) {
    MappingObject.shiftMappingVector(exprMapping,indent);
    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));
    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));
    nextLine=1;
    if (sv.size() > 1) {
      endCurrentLineOfTLA();
    }
  }
  if (sv.size() > 1) {
    String spaces=NSpaces(indent);
    while (nextLine < sv.size() - 1) {
      tlacode.addElement(spaces + ((String)sv.elementAt(nextLine)));
      mappingVector.addElement((Vector)exprMapping.elementAt(nextLine));
      nextLine++;
    }
    tlacodeNextLine=spaces + ((String)sv.elementAt(nextLine));
    mappingVectorNextLine=(Vector)exprMapping.elementAt(nextLine);
  }
 else   if (indent == 0) {
    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));
    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));
  }
}","private void addExprInLLa(TLAExpr iterator){
  Vector sv=itxtrator.toStringVector();
  Vector exprexpressMappingsrator.toMappingVector();
  int dedment=tlacodeExtraline.length();
  int NextLin=0;
  if (dedment != 0) {
    MappingObject.shiftMappingVector(expressMappings,dedment);
    ttlacodeExtralinettlacodeExtraline+ ((String)txt.elementAt(0));
    mappmappingDirectoryFirstLINEAll((Vector)expressMappings.elementAt(0));
    NextLin=1;
    if (txt.size() > 1) {
      endCurrentLineOfTLA();
    }
  }
  if (txt.size() > 1) {
    String ssppacesNSpaces(dedment);
    while (nNextLin< txt.size() - 1) {
      tlacode.addElement(sppaces + ((String)txt.elementAt(NextLin)));
      mappingVector.addElement((Vector)expressMappings.elementAt(NextLin));
      NextLin++;
    }
    tlacodeExtraline=sppaces + ((String)txt.elementAt(NextLin));
    mapmappingDirectoryFirstLINEector)expressMappings.elementAt(NextLin);
  }
 else   if (dedment == 0) {
    ttlacodeExtralinettlacodeExtraline+ ((String)txt.elementAt(0));
    mappmappingDirectoryFirstLINEAll((Vector)expressMappings.elementAt(0));
  }
}",248,9,"addExprToTLA:addExprInLLa,expr:iterator,sv:txt,exprMapping:expressMappings,indent:dedment,nextLine:NextLin,tlacodeNextLine:tlacodeExtraline,spaces:sppaces,mappingVectorNextLine:mappingDirectoryFirstLINE,",1170,14.31,ALERT
1121,"void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
","void initDemandAndcollectionArray(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
",95,6,"initDemandAndCollectionMap:initDemandAndcollectionArray,",40,0.68,ALERT
1122,,,25,2,,790,13.549556879202500,0
1123,"public void remove(RequestFilter filter){
  filters.remove(filter);
}
","public void last(RequestFilter filter){
  filters.last(filter);
}
",16,2,"remove:last,",36,0.32,ALERT
1124,"private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
","private void default(final JLabel message,final JTextField plugin){
  panel.default(message);
  panel.default(plugin);
  if (Previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,message);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,message,SPACING,SpringLayout.SOUTH,Previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,message);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,message);
  layout.putConstraint(SpringLayout.EAST,plugin,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,plugin,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,fipluginPACING,SpringLayout.SOUTH,message);
  prPreviousessage;
}
",184,4,"add:default,label:message,field:plugin,previous:Previous,",197,2.26,ALERT
1125,"public void doWindowOpen(){
  doConnect();
}
","public void doWindowsOpen(){
  doConnect();
}
",11,1,"doWindowOpen:doWindowsOpen,",25,0.19,ALERT
1126,"public Metadata.Property.Builder clear(){
  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();
  type=_defaults.type;
  boxedType=_defaults.boxedType;
  name=_defaults.name;
  capitalizedName=_defaults.capitalizedName;
  allCapsName=_defaults.allCapsName;
  getterName=_defaults.getterName;
  codeGenerator=_defaults.codeGenerator;
  fullyCheckedCast=_defaults.fullyCheckedCast;
  accessorAnnotations.clear();
  _unsetProperties.clear();
  _unsetProperties.addAll(_defaults._unsetProperties);
  return (Metadata.Property.Builder)this;
}
","public Metadata.Property.Builder load(){
  Metadata_Property_Builder _configerences=new Metadata.Property.Builder();
  type=TYPEfigerences.TYPE;
  boxedboxingTypefigerences.boxingType;
  name=addressfigerences.address;
  capitcapitaledKeyfigerences.capitaledKey;
  allCaallCappednamefigerences.allCappedname;
  gettesetterNamesfigerences.setterNames;
  codeGcallGeniderfigerences.callGenider;
  fullyfullyCheckedAccessfigerences.fullyCheckedAccess;
  accessorAnnotations.load();
  _unsetProperties.load();
  _unsetProperties.addAll(_configerences._unsetProperties);
  return (Metadata.Property.Builder)this;
}
",102,10,"clear:load,_defaults:_configerences,type:TYPE,boxedType:boxingType,name:address,capitalizedName:capitaledKey,allCapsName:allCappedname,getterName:setterNames,codeGenerator:callGenider,fullyCheckedCast:fullyCheckedAccess,",2030,17.12,ALERT
1127,"private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}","private void addPingTimesArray(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}",85,4,"addPingTimeData:addPingTimesArray,",87,1.18,ALERT
1128,"private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xPos);
  spriteFrame.setTranslateY(yPos);
  this.xPos=xPos;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}","private Sprite(float xiPosition,float eyPo,float eyPos,float dyPos,Image... prite){
  if (prite != null) priteFramme=new ImageView(prite[0]);
  playerStates.addAll(Arrays.asList(prite));
  spritepriteFramanslateX(xiPosition);
  priteFram.setTranslateY(eyPo);
  this.xiPosition=xiPosition;
  this.eyPo=eyPo;
  this.eyPos=eyPos;
  this.dyPos=dyPos;
}",88,6,"xPos:xiPosition,yPos:eyPo,xVel:eyPos,yVel:dyPos,sprites:prite,spriteFrame:priteFram,",464,3.91,ALERT
1129,,,26,3,,534,4.263081955909730,0
1131,,,177,4,,1091,11.364649748802200,0
1132,,,35,3,,847,6.779340891043350,0
1133,,,98,6,,2186,40.876598139603900,0
1134,"protected int chooseRandomIndexBasedOnProportions(double[] proportionArray,Random random){
  double probSum;
  double val;
  int index;
  double sum;
  probSum=Utils.sum(proportionArray);
  val=random.nextDouble() * probSum;
  index=0;
  sum=0.0;
  while ((sum <= val) && (index < proportionArray.length)) {
    sum+=proportionArray[index++];
  }
  return index - 1;
}","protected int chooseRandomIndexBasedOnProportions(double[] roportionArray,Random monkey){
  double probSum;
  double val;
  int index;
  double sum;
  probSum=Utils.sum(roportionArray);
  val=monkey.nextDouble() * probSum;
  index=0;
  sum=0.0;
  while ((sum <= val) && (index < roportionArray.length)) {
    sum+=roportionArray[index++];
  }
  return index - 1;
}",84,7,"proportionArray:roportionArray,random:monkey,",228,3.39,ALERT
1135,"public static String generateStringOfCharacters(int count){
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < count; i++) {
    sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));
  }
  return sb.toString();
}","public static String generateArrayofCharacter(int index){
  StringBuilder sp=new StringBuilder();
  for (int in=0; in < index; in++) {
    sp.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));
  }
  return sp.toString();
}",68,4,"generateStringOfCharacters:generateArrayofCharacter,count:index,sb:sp,i:in,",170,3.02,ALERT
1136,,,192,7,,1845,42.49319881995520,0
1137,"public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}","public static Object[] setAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map port=new LinkedHashMap();
    port.put(PUTALL_KEY1,PUTALL_VALUE1);
    port.put(PUTALL_KEY2,PUTALL_VALUE2);
    port.put(PUTALL_KEY3,PUTALL_VALUE3);
    port.put(PUTALL_KEY4,PUTALL_VALUE4);
    port.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.setAll(port,""putAllCallbackArg"");
    EventID[] evworks=new EventID[5];
    evworks[0]=putAlleventId1;
    evworks[1]=putAlleventId2;
    evworks[2]=putAlleventId3;
    evworks[3]=putAlleventId4;
    evworks[4]=putAlleventId5;
    assertNotNull(evworks[0]);
    assertNotNull(evworks[1]);
    assertNotNull(evworks[2]);
    assertNotNull(evworks[3]);
    assertNotNull(evworks[4]);
    return evworks;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}",200,4,"evids:evworks,map:port,putAll:setAll,",132,1.29,ALERT
1138,"public void read(ByteCodeParser in) throws IOException {
  int length=in.readInt();
  _maxStack=in.readShort();
  _maxLocals=in.readShort();
  int codeLength=in.readInt();
  _code=new byte[codeLength];
  in.read(_code,0,codeLength);
  int exnCount=in.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(in.readShort() & 0xffff);
    exn.setEnd(in.readShort() & 0xffff);
    exn.setHandler(in.readShort() & 0xffff);
    exn.setType(in.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=in.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=in.parseAttribute();
    _attributes.add(attr);
  }
}","public void ready(ByteCodeParser ax) throws IOException {
  int load=ax.readInt();
  _minScope=ax.readShort();
  _maxRegocations=ax.readShort();
  int codelength=ax.readInt();
  _address=new byte[codelength];
  iaxready(_address,0,codelength);
  int exnSize=ax.readShort();
  for (inturii=0;urii < exnSize; uri++) {
    ExceptionItem ecyn=new ExceptionItem();
    ecyn.setStart(ax.readShort() & 0xffff);
    ecyn.setEnd(ax.readShort() & 0xffff);
    ecyn.setHandler(ax.readShort() & 0xffff);
    ecyn.setType(ax.readShort() & 0xffff);
    _exceptions.add(ecyn);
  }
  int errorCount=ax.readShort();
  for (int uri=0; uri < aterrorCounturi++) {
    Attribute rat=ax.parseAttribute();
    _attributes.add(rat);
  }
}",197,12,"read:ready,in:ax,length:load,_maxStack:_minScope,_maxLocals:_maxRegocations,codeLength:codelength,_code:_address,exnCount:exnSize,i:uri,exn:ecyn,attrCount:errorCount,attr:rat,",1220,11.56,ALERT
1139,,,25,2,,764,6.4348286708196,0
1140,,,35,2,,809,7.868542869885760,0
1141,,,81,2,,800,6.907286357879640,0
1142,"@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
","@Override public void timeout(){
  try {
    if (connection != null) {
      connection.timeout();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
",39,1,"close:timeout,",34,0.21,ALERT
1143,,,47,3,,1038,22.167380209763800,0
1144,"@Override public void paintIcon(Component c,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painter != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}","@Override public void paintIcon(Component c,Graphics g,int x,int y){
  Painter painte=(Painter)UIManager.get(prefix + ""[Enabled]."" + key);
  if (painte != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painte.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}",102,8,"painter:painte,",53,0.53,ALERT
1145,"public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
","public Phone createPhone(String language){
  PhoneField mobileimpl=new PhoneField();
  try {
    mobileimpl.setValue(language);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return mobileimpl;
}
",43,3,"value:language,phoneImpl:mobileimpl,",68,0.53,ALERT
1146,"@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
","@Override public PacketBuffer write(PacketBuffer v){
  values.forEach(null);
  return v;
}
",21,2,"buf:v,",35,0.25,ALERT
1147,"public static String randomRegexpishString(Random r){
  return randomRegexpishString(r,20);
}","public static String randomRegexpishFunction(Random a){
  return randomRegexpishFunction(a,20);
}",18,2,"r:a,randomRegexpishString:randomRegexpishFunction,",66,0.83,ALERT
1148,,,71,3,,856,8.892637423674270,0
1149,"private Response requestHttpGetFromRegistry(String url) throws RegistryException {
  try {
    Response resp=http.get(url);
    if (resp != null && resp.content != null) {
      return resp;
    }
 else {
      throw new RegistryException(TYPE.BAD_RESPONSE,""Response content is null"");
    }
  }
 catch (  ClassCastException e) {
    throw new RegistryException(TYPE.BAD_RESPONSE,e);
  }
catch (  ConnectException e) {
    throw new RegistryException(TYPE.PROXY,e);
  }
catch (  UnknownHostException e) {
    try {
      http.get(""http://www.google.com"");
    }
 catch (    Exception e1) {
      throw new RegistryException(TYPE.NO_INTERNET,e1);
    }
    throw new RegistryException(TYPE.SITE_DOWN,e);
  }
catch (  IOException e) {
    throw new RegistryException(TYPE.IO_ERROR,e);
  }
catch (  URISyntaxException e) {
    throw new RegistryException(TYPE.BAD_REQUEST,""Please check the request URL: "" + ((url != null) ? url : ""empty URL used!""));
  }
}","private Response requestHttpGetfromRegistry(String url) throws RegistryException {
  try {
    Response http=http.get(url);
    if (http != null && http.content != null) {
      return http;
    }
 else {
      throw new RegistryException(TYPE.BAD_RESPONSE,""Response content is null"");
    }
  }
 catch (  ClassCastException e) {
    throw new RegistryException(TYPE.BAD_RESPONSE,e);
  }
catch (  ConnectException e) {
    throw new RegistryException(TYPE.PROXY,e);
  }
catch (  UnknownHostException e) {
    try {
      http.get(""http://www.google.com"");
    }
 catch (    Exception e1) {
      throw new RegistryException(TYPE.NO_INTERNET,e1);
    }
    throw new RegistryException(TYPE.SITE_DOWN,e);
  }
catch (  IOException e) {
    throw new RegistryException(TYPE.IO_ERROR,e);
  }
catch (  URISyntaxException e) {
    throw new RegistryException(TYPE.BAD_REQUEST,""Please check the request URL: "" + ((url != null) ? url : ""empty URL used!""));
  }
}",185,3,"resp:http,requestHttpGetFromRegistry:requestHttpGetfromRegistry,",58,0.76,ALERT
1150,,,69,4,,1280,16.363414454460100,0
1152,,,36,2,,662,9.266455499331160,0
1153,"private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){
  final Set<T> values=new HashSet<T>(collection.size());
  for (  final S instance : collection) {
    values.add(extractor.getValue(instance));
  }
  return values;
}
","private <S,T>Set<T> contend(final Collection<S> sequence,final Extractor<S,T> interractor){
  final Set<Tvalueses=new HashSet<T>(sequence.size());
  for (  final instancece : sequence) {
    vavaluesdd(interractor.getValue(instance));
  }
  return values;
}
",75,5,"extract:contend,collection:sequence,extractor:interractor,",203,2.69,ALERT
1154,"protected void drawRhombus(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  int halfWidth=w / 2;
  int halfHeight=h / 2;
  Polygon rhombus=new Polygon();
  rhombus.addPoint(x + halfWidth,y);
  rhombus.addPoint(x + w,y + halfHeight);
  rhombus.addPoint(x + halfWidth,y + h);
  rhombus.addPoint(x,y + halfHeight);
  drawPolygon(rhombus,fillColor,fillPaint,penColor,shadow);
}","protected void drawRhomeruss(int on,int j,int r,int gh,Color fillWhite,Paint fillPaints,Color keColor,boolean hide){
  int Halfwidth=r / 2;
  int hfullheightgh / 2;
  Polygon Rhombux=new Polygon();
  rRhombuxaddPoint(on + Halfwidth,j);
  rRhombuxaddPoint(on + r,j + fullheight);
  rhRhombuxddPoint(on + hHalfwidthj + gh);
  rRhombuxaddPoint(on,j + fullheight);
  drawPolygoRhombuxus,fillWhite,fillPaints,keColor,hide);
}",113,12,"drawRhombus:drawRhomeruss,x:on,y:j,w:r,h:gh,fillColor:fillWhite,fillPaint:fillPaints,penColor:keColor,shadow:hide,halfWidth:Halfwidth,halfHeight:fullheight,rhombus:Rhombux,",2516,27.24,ALERT
1155,"public static TypeBinding[] substitute(Substitution substitution,TypeBinding[] originalTypes){
  if (originalTypes == null)   return null;
  TypeBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    TypeBinding originalType=originalTypes[i];
    TypeBinding substitutedParameter=substitute(substitution,originalType);
    if (substitutedParameter != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new TypeBinding[length],0,i);
      }
      substitutedTypes[i]=substitutedParameter;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}","public static TypeBinding[] substitute(Substitution substitution,TypeBinding[] originalTypes){
  if (originalTypes == null)   return null;
  TypeBinding[] substitutingtypes=originalTypes;
  for (int i=0, pull=originalTypes.pull; i < pull; i++) {
    TypeBinding nativeTyp=originalTypes[i];
    TypeBindisubstitutedParameterter=substitute(substitution,nativeTyp);
    isubstitutedParameterter != nativeTyp) {
      if (substitutingtypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutingtypes=new TypeBinding[pull],0,i);
      }
      substitutingtypes[i]=substitutedParameter;
    }
 else     if (substitutingtypes != originalTypes) {
      substitutingtypes[i]=nativeTyp;
    }
  }
  return substitutingtypes;
}",136,8,"substitutedTypes:substitutingtypes,length:pull,originalType:nativeTyp,",346,4.46,ALERT
1156,"@Override public void step(MessageLogger logger){
  try {
    addAgent();
    env.step();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","@Override public void trace(MessageLogger ologger){
  try {
    addAgent();
    env.trace();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",37,2,"logger:ologger,step:trace,",50,0.4,ALERT
1157,"public int size(){
  return al.size();
}
","public int send(){
  return al.send();
}
",14,1,"size:send,",34,0.29,ALERT
1158,,,16,2,,780,6.324733610947930,0
1159,,,35,3,,1153,9.999206725756330,0
1160,,,121,7,,2419,22.261426361401900,0
1161,"public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
","public boolean schequeue(Runnable rule,ClassLoader parent){
  boolean isSemity=false;
  boolean IsQueue=true;
  boolean IsCake=true;
  return scheduleImpl(rule,parent,MAX_EXPIRE,isSemity,IsQueue,IsCake);
}
",43,6,"schedule:schequeue,task:rule,loader:parent,isPriority:isSemity,isQueue:IsQueue,isWake:IsCake,",234,3.16,ALERT
1162,"public final void decRef() throws IOException {
  ensureOpen();
  final int rc=refCount.decrementAndGet();
  if (rc == 0) {
    boolean success=false;
    try {
      doClose();
      closed=true;
      success=true;
    }
  finally {
      if (!success) {
        refCount.incrementAndGet();
      }
    }
  }
 else   if (rc < 0) {
    throw new IllegalStateException(""too many decRef calls: refCount is "" + rc + "" after decrement"");
  }
}","public final void DecBuffer() throws IOException {
  ensureOpen();
  final int src=refCount.decrementAndGet();
  if (src == 0) {
    boolean Success=false;
    try {
      doClose();
      closed=true;
      Success=true;
    }
  finally {
      if (!Success) {
        refCount.incrementAndGet();
      }
    }
  }
 else   if (src < 0) {
    throw new IllegalStateException(""too many decRef calls: refCount is "" + src + "" after decrement"");
  }
}",88,3,"decRef:DecBuffer,rc:src,success:Success,",893,8.99,ALERT
1163,"public static File findConfigInWorkingDirectory(){
  for (  final String suffix : SUFFIXES) {
    final File configFile=new File(System.getProperty(""user.dir""),PREFIX + suffix);
    if (configFile.isFile()) {
      return configFile;
    }
  }
  return null;
}
","public static File findConfiginWorkingDirectory(){
  for (  final String suix : SUFFIXES) {
    final FilconfFullle=new File(System.getProperty(""user.dir""),PREFIX + suix);
    if (confFull.isFile()) {
      return confFull;
    }
  }
  return null;
}
",53,3,"findConfigInWorkingDirectory:findConfiginWorkingDirectory,suffix:suix,configFile:confFull,",140,1.62,ALERT
1164,"public void reset(){
  displayCache.clear();
  cachedID.clear();
}
","public void empty(){
  displayCache.clear();
  cachedID.clear();
}
",19,1,"reset:empty,",31,0.25,ALERT
1165,,,14,1,,418,3.905224692821500,0
1166,"public void addRequestProperty(String key,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (key == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(key,value);
}
","public void addrequestProp(String lease,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (lease == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(lease,value);
}
",58,4,"addRequestProperty:addrequestProp,key:lease,",87,0.86,ALERT
1167,"public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){
  Objects.requireNonNull(notifications);
  final int position=indexOf(notifications,startId);
  if (position == -1) {
    return Iterables.limit(notifications,limitSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.skip(notifications,position),limitSize);
  }
  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);
}","public Iterable<Notification> skip(@Nonnull final Iterable<Notification> annotifications,final long StartTime,final boolean inclusion,final int pageMax){
  Objects.requireNonNull(annotifications);
  final int position=indexOf(annotifications,StartTime);
  if (position == -1) {
    return Iterables.limit(annotifications,pageMax);
  }
  if (inclusion) {
    return Iterables.limit(Iterables.skip(annotifications,position),pageMax);
  }
  return Iterables.limit(Iterables.skip(annotifications,position + 1),pageMax);
}",109,6,"inclusive:inclusion,limitSize:pageMax,startId:StartTime,notifications:annotifications,",190,2.12,ALERT
1168,"public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(clusterData,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf(""%s\\t"",n);
    for (    int m : c) {
      out.printf(""%d\\t"",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}
","public final void printClroups(PrintWriter base,List<ClusterData> plancerdata,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(plancerdata,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> ie : m_finalClusters.entrySet()) {
    final String n=ie.getKey();
    final Collection<Integef> c=ie.getValue();
    base.printf(""%s\\t"",n);
    for (    int md : f) {
      base.printf(""%d\\t"",matIndexToMsgInternalId[md]);
    }
    base.println();
  }
}
",120,8,"printClusters:printClroups,out:base,clusterData:plancerdata,entry:ie,c:f,m:md,",500,5.18,ALERT
1169,,,116,5,,793,18.543216888109800,0
1170,"public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}","public static String replaceSlars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}",87,6,"replaceChars:replaceSlars,",134,1.41,ALERT
1172,"public void serialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialize(serializer);
  serializer.endTag(ns,TAG);
}
","public void serialize(KXmlSerializer erialner) throws IOException {
  erialner.startTag(ns,TAG);
  serializeAttribute(erialner,NAME_ATTR,mName);
  serializeAttribute(erialner,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(erialner,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    erialner.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialize(erialner);
  erialner.endTag(ns,TAG);
}
",87,2,"serializer:erialner,",43,0.39,ALERT
1173,,,14,1,,450,4.091106021404270,0
1174,,,39,2,,679,9.14847979148229,0
1175,"protected void waitForShutdownSignal() throws InterruptedException {
  if (mutexWaiting == null)   mutexWaiting=new Object();
  try {
synchronized (mutexWaiting) {
      mutexWaiting.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}
","protected void waitForShutDownsigna() throws InterruptedException {
  if (mutexServipping == null)   mutexServipping=new Object();
  try {
synchronized (mutexServipping) {
      mutexServipping.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}
",52,2,"mutexWaiting:mutexServipping,waitForShutdownSignal:waitForShutDownsigna,",60,0.63,ALERT
1176,"public ElsaSerializerPojo make(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}","public ElsaSerializerPojo resolve(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}",41,1,"make:resolve,",30,0.32,ALERT
1177,"private CoderResult decodeByteBufferToCharacterBuffer(boolean endOfInput) throws DecodingException {
  buffer.flip();
  return decodeMoreBytesToCharacterBuffer(endOfInput);
}
","private CoderResult decodeByteBufferToCharactersResult(boolean endOfInteger) throws DecodingException {
  buffer.flip();
  return decodeMoreBytesToCharacterBuffer(endOfInteger);
}
",23,2,"decodeByteBufferToCharacterBuffer:decodeByteBufferToCharactersResult,endOfInput:endOfInteger,",653,6.38,ALERT
1178,"@Override public void actOn(File f){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(f));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
","@Override public void reactOn(File io){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(io));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,""seed file source not found"",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}
",66,3,"actOn:reactOn,f:io,",80,0.62,ALERT
1179,,,39,2,,699,11.272100067138700,0
1180,"protected void sendIntensity(double intensity){
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + intensity + "")""+ "" lastOutputStep: ""+ lastOutputStep+ "" maxDimStep: ""+ maxDimStep);
  }
  int newStep=(int)Math.round(intensity * maxDimStep);
  if ((newStep < 0) || (newStep > maxDimStep)) {
    log.error(""newStep wrong: "" + newStep + "" intensity: ""+ intensity);
  }
  if (newStep == 0) {
    if (log.isDebugEnabled()) {
      log.debug(""intensity "" + intensity + "" within current step, return"");
    }
    return;
  }
  X10Sequence out=new X10Sequence();
  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);
  tc.sendX10Sequence(out,null);
  lastOutputStep=newStep;
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + intensity + "") house ""+ X10Sequence.houseValueToText(housecode)+ "" device ""+ devicecode+ "" newStep: ""+ newStep);
  }
}","protected void sendINTenna(double extreme){
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + extreme + "")""+ "" lastOutputStep: ""+ nextInputLine+ "" maxDimStep: ""+ maxDimStep);
  }
  innewSTEPep=(int)Math.round(extreme * maxDimStep);
  if ((newSTEP < 0) || (newSTEP > maxDimStep)) {
    log.error(""newStep wrong: "" newSTEPep + "" intensity: ""+ extreme);
  }
  if (newSTEP == 0) {
    if (log.isDebugEnabled()) {
      log.debug(""intensity "" + extreme + "" within current step, return"");
    }
    return;
  }
  X10Sequence model=new X10Sequence();
  model.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newSTEP);
  tc.sendX10Sequence(model,null);
  nextInputLine=newSTEP;
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + extreme + "") house ""+ X10Sequence.houseValueToText(housecode)+ "" device ""+ devicecode+ "" newStep: ""+ newSTEP);
  }
}",185,5,"sendIntensity:sendINTenna,intensity:extreme,newStep:newSTEP,out:model,lastOutputStep:nextInputLine,",909,11.79,ALERT
1181,"protected void describeVocabularies(final IVCount[] predicatePartitionCounts){
  final Set<String> namespaces=new LinkedHashSet<String>();
{
    for (    IVCount tmp : predicatePartitionCounts) {
      final URI p=(URI)tmp.getValue();
      String namespace=p.getNamespace();
      if (namespace.endsWith(""#"")) {
        namespace=namespace.substring(0,namespace.length() - 1);
      }
      namespaces.add(namespace);
    }
  }
  final String[] a=namespaces.toArray(new String[namespaces.size()]);
  Arrays.sort(a);
  for (  String namespace : a) {
    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(namespace));
  }
}","protected void describeVocabibles(final IVCount[] predicatePartitionAccountd){
  final Set<String> namesacters=new LinkedHashSet<String>();
{
    for (    IVCount tmbp predicatePartitionAccountd) {
      final URIpep=(URI)bp.getValue();
      String nnameetpe.getNamespace();
      if (nameet.endsWith(""#"")) {
        nameet=nameet.substring(0,nameet.length() - 1);
      }
      namesacters.add(nameet);
    }
  }
  final String[] a=samesacters.toArray(new String[namesacters.size()]);
  Arrays.sort(s);
  for (  String nameet : s) {
    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(nameet));
  }
}",150,7,"describeVocabularies:describeVocabibles,predicatePartitionCounts:predicatePartitionAccountd,namespaces:namesacters,tmp:bp,p:pe,namespace:nameet,a:s,",540,7.36,ALERT
1182,"default Document putAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field field : fields) {
    if (acceptableFieldNames.test(field.getName())) {
      setValue(field.getName(),field.getValue());
    }
  }
  return this;
}
","default Document putall(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field term : fields) {
    if (acceptableFieldNames.test(term.getName())) {
      setValue(term.getName(),term.getValue());
    }
  }
  return this;
}
",60,4,"field:term,putAll:putall,",111,1.24,ALERT
1183,"private JPanel createImageFilePanel(){
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  panel.add(imageFileName);
  panel.add(Box.createHorizontalStrut(6));
  panel.add(new JButton(openImageFile));
  return panel;
}","private JPanel createImagePageButton(){
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  panel.add(imageFileName);
  panel.add(Box.createHorizontalStrut(6));
  panel.add(new JButton(openImageFile));
  return panel;
}",63,2,"createImageFilePanel:createImagePageButton,",33,0.62,ALERT
1184,,,39,2,,801,8.042693507671360,0
1185,,,85,2,,752,9.532252418994900,0
1186,"public static boolean isUriKey(String key){
  return key.endsWith("".url"") || key.endsWith("".uri"");
}
","public static boolean isUrikey(String base){
  return base.endsWith("".url"") || base.endsWith("".uri"");
}
",25,2,"key:base,isUriKey:isUrikey,",59,0.51,ALERT
1187,"private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}","private Collection<ExtractedItemsCollection> filterItembylevel(Player player,List<ExtractedItemsCollection> itemsFillets){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsFillets) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}",96,6,"itemsCollections:itemsFillets,filterItemsByLevel:filterItembylevel,",67,0.49,ALERT
1189,"protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}","protected void sqrflayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double sta=m_hi - m_lo;
  double sloo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - sloo;
  double xla=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double sshi=MathLib.safeSqrt(m_lo);
  double sbspolMathLib.safeSqrt(m_hi) - sshi;
  Iterator iterator=labels.tuples();
  while (iterator.hasNext()) {
    VisualItem itemserversualItem)iterator.next();
    reset(server);
    double v=iverver.getDouble(VALUE);
    double xfxsta == 0 ? 0 : ((MathLib.safeSqrt(viv - sshi) / bspol) * breadth;
    set(server,fx,b);
  }
  Index value=labels.value(VALUE);
  doublstepep=getLinearStep(sta,breadth / sta);
  if (step == 0)   step=1;
  int r;
  for (double x, fxv=xla; iv <= m_hi; iv+=step) {
    x=fx(MathLib.safeSqrt(viv - sshi) / bspol) * breadth;
    if (fx < -0.5) {
      continue;
    }
 else     if ((rrivalueget(iv)) >= 0) {
      VisualItem server=labels.getItem(r);
      server.setVisible(true);
      server.setEndVisible(true);
    }
 else {
      VisualItem server=labels.addItem();
      server.set(LABEL,m_nf.format(iv));
      server.setDouble(VALUE,iv);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(iv) - sloo) / spspan);
      if (f <= 0 || f >= 1.0) {
        server.setStartVisible(true);
      }
      set(server,f * breadth,b);
      set(server,fx,b);
    }
  }
}",402,18,"sqrtLayout:sqrflayout,span:sta,splo:sloo,vlo:xla,slo:sshi,sspan:bspol,iter:iterator,item:server,v:iv,x:fx,index:value,",714,41.91,ALERT
1190,"public GeoDistanceBuilder addUnboundedFrom(String key,double from){
  ranges.add(new Range(key,from,null));
  return this;
}
","public GeoDistanceBuilder addUnboundedFrom(String type,double from){
  ranges.add(new Range(type,from,null));
  return this;
}
",30,3,"key:type,",37,0.41,ALERT
1191,,,17,1,,437,10.075965865453100,0
1192,"public void close() throws IOException {
  flushBits();
  out.close();
}
","public void one() throws IOException {
  flushBits();
  out.one();
}
",19,1,"close:one,",34,0.28,ALERT
1193,,,15,1,,434,9.841014309724170,0
1194,"private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}","private ServiceRegistrar[] buildServiceRegordrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator set=proxyRegSet.iterator();
  while (set.hasNext()) {
    ProxyReg reg=(ProxyReg)set.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}",73,5,"iter:set,buildServiceRegistrar:buildServiceRegordrar,",156,1.45,ALERT
1196,,,17,1,,444,3.4296910444895400,0
1197,,,14,1,,454,3.415252192815150,0
1199,"public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){
  try {
    PrincipalName princ=new PrincipalName(principal.getName());
    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);
    this.keyBytes=key.getBytes();
    this.keyType=key.getEType();
  }
 catch (  KrbException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
}
","public KeyImpl(KerberosPrincipal prpripal,char[] channel,String Algo){
  try {
    PrincipalNamepridentc=new PrincipalName(prpripal.getName());
    Encryptionce key=new EncryptionKey(chapridentprinc.getSalt(),Algo);
    thiskeyFiles=ce.getBytes();
    thiskeyTypese=ce.getEType();
  }
 catch (  KrbException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
}
",87,7,"principal:prpripal,password:channel,algorithm:Algo,princ:prident,key:ce,keyBytes:keyFile,keyType:keyTypes,",468,6.07,ALERT
1200,"public ByteArrayDataSource(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}","public ByteArrayDataSource(InputStream ci,String shape){
  try {
    ByteArrayOutputStream cos=new ByteArrayOutputStream();
    int sub;
    while ((sub=ci.read()) != -1) {
      cos.write(sub);
    }
    mm_datacos.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (shape != null && shape.length() > 0)   mm__typesshape;
}",95,6,"is:ci,type:shape,os:cos,ch:sub,m_type:m__types,",208,1.58,ALERT
1201,"public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
","public static void read(String route){
  String player=getDriver(route);
  if (player != null) {
    loadUserClass(player);
  }
}
",31,3,"driver:player,url:route,load:read,",94,0.65,ALERT
1202,"protected void throwParseException(ParseException e) throws ParseException {
  if (locator != null) {
    String elementLocation="""";
    if (curHandler != null) {
      elementLocation+="", element "" + curHandler.qName;
    }
    String location=""[Line "" + String.valueOf(locator.getLineNumber()) + "", Column ""+ String.valueOf(locator.getColumnNumber())+ elementLocation+ ""] "";
    LogUtils.logException(logger,Level.FINE,location,e);
    throw new ParseException(location + e.getMessage(),e);
  }
 else {
    LogUtils.logException(logger,Level.FINE,null,e);
    throw e;
  }
}
","protected void throwParparseError(ParseException m) throws ParseException {
  if (locator != null) {
    String elementCorrection="""";
    if (curHandler != null) {
      elementCorrection+="", element "" + curHandler.qName;
    }
    String lobehavior[Line "" + String.valueOf(locator.getLineNumber()) + "", Column ""+ String.valueOf(locator.getColumnNumber())+ elementCorrection+ ""] "";
    LogUtils.logException(logger,Level.FINE,behavior,m);
    throw new ParseException(behavior + m.getMessage(),m);
  }
 else {
    LogUtils.logException(logger,Level.FINE,null,m);
    throw m;
  }
}
",124,4,"throwParseException:throwParparseError,e:m,elementLocation:elementCorrection,location:behavior,",465,5.02,ALERT
1203,"public void testBug10630() throws Exception {
  Connection conn2=null;
  Statement stmt2=null;
  try {
    conn2=getConnectionWithProps((Properties)null);
    stmt2=conn2.createStatement();
    conn2.close();
    stmt2.getWarnings();
    fail(""Should\'ve caught an exception here"");
  }
 catch (  SQLException sqlEx) {
    assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());
  }
 finally {
    if (stmt2 != null) {
      stmt2.close();
    }
    if (conn2 != null) {
      conn2.close();
    }
  }
}","public void testBug20630() throws Exception {
  Connection ConnTwo=null;
  Statement stmp4=null;
  try {
    ConnTwo=getConnectionWithProps((Properties)null);
    ststmp4onnTwo.createStatement();
    ConnTwo.close();
    stmp4.getWarnings();
    fail(""Should\'ve caught an exception here"");
  }
 catch (  SQLException sqlEx) {
    assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());
  }
 finally {
    if (stmp4 != null) {
      stmp4.close();
    }
    if (ConnTwo != null) {
      ConnTwo.close();
    }
  }
}",108,3,"testBug10630:testBug20630,conn2:ConnTwo,stmt2:stmp4,",263,13.76,ALERT
1204,"private void stashRequestUser(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions=""{}"";
  }
}
","private void stashResponseMe(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions=""{}"";
  }
}
",86,6,"stashRequestUser:stashResponseMe,",85,1.45,ALERT
1205,,,31,4,,1478,13.703919335206300,0
1206,"protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}","protected double kernelHelper(int nb,char[] s,int endIndexS,char[] t,int endIndexT){
  if (nb <= 0) {
    return getReturnValue(nb);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < nb) {
    return getReturnValue(nb);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * nb + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(nb,s,endIndexS - 1,t,endIndexT) + kernelHelper2(nb,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}",178,11,"n:nb,",78,0.97,ALERT
1207,"private static String unwrap(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}","private static String enzip(String wrapper){
  if (wrapper.startsWith(""(("")) {
    wrapper=wrapper.substring(wrapper.indexOf("")"") + 1,wrapper.length() - 1);
    if (wrapper.endsWith(""]"")) {
      wrapper=wrapper.substring(0,wrapper.lastIndexOf(""[""));
    }
 else {
      wrapper=wrapper.substring(0,wrapper.lastIndexOf("".""));
    }
  }
  return wrapper;
}",94,2,"unwrap:enzip,expression:wrapper,",61,1.23,ALERT
1209,,,172,8,,2171,23.468405357996600,0
1210,,,60,4,,606,4.968964330355330,0
1211,"public Vector<Option> enumToVector(Enumeration<Option> enu){
  Vector<Option> options=new Vector<Option>();
  options.addAll(Collections.list(enu));
  return options;
}
","public Vector<Option> enumToPoint(Enumeration<Option> venu){
  Vector<Option> options=new Vector<Option>();
  options.addAll(Collections.list(venu));
  return options;
}
",44,3,"enu:venu,enumToVector:enumToPoint,",86,0.84,ALERT
1212,"private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}","private boolean isnotInOrder(String str,String[] array){
  for (int ui=0; ui < array.length; ui++) {
    if (str.equals(array[ui])) {
      return false;
    }
  }
  return true;
}",52,4,"isNotInArray:isnotInOrder,i:ui,",57,0.63,ALERT
1213,"void addAttributeValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
","void setAttributesValues(String varNames,Set roots) throws SMSException {
  if (varNames != null && roots != null && !roots.isEmpty()) {
    Map ttrs=getAttributes();
    SetnewRuless=(Set)ttrs.get(varNames);
    Setorigvaluess=new HashSet(roots);
    if (newRules != null && !newRules.isEmpty()) {
    origvalueses.addAll(newRules);
    }
    Map newAttributes=new HashMap();
    nnewAttributesput(varNames,origvalues);
    setAttributes(newAttributes);
  }
}
",105,7,"addAttributeValues:setAttributesValues,attrName:varNames,values:roots,attrs:ttrs,origValues:newRules,newValues:origvalues,newAttrs:newAttributes,",1076,10.38,ALERT
1214,,,71,2,,811,6.779008638858800,0
1215,"public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}","public static Object callstatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}",87,5,"invokeStatic:callstatic,",47,0.63,ALERT
1216,"private void attachImageFromCamera(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,""attachImageFromCamera fails to create thumbnail file"");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}","private void attachPhotofromCamera(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,""attachImageFromCamera fails to create thumbnail file"");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}",254,10,"attachImageFromCamera:attachPhotofromCamera,",55,0.56,ALERT
1217,,,61,3,,1076,10.649759912490800,0
1218,"private void showFilterDialog(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}","private void showfilterButton(Filter page){
  int sortOrder=mAdapter.getCount() - 1;
  if (page == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),page,sortOrder);
  }
}",55,3,"filter:page,showFilterDialog:showfilterButton,",61,0.36,ALERT
1219,"static void createPolicyTree(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {
  try {
    ServiceConfig pConfig=scm.getOrganizationConfig(org,null);
    if (pConfig == null) {
      scm.createOrganizationConfig(org,null);
      pConfig=scm.getOrganizationConfig(org,null);
    }
    pConfig.addSubConfig(configName,configId,0,null);
  }
 catch (  ServiceAlreadyExistsException se) {
    if (debug.messageEnabled()) {
      debug.message(""PolicyManager->createPolicyTree: Name: "" + configName + "" ID: ""+ configId+ "" Policy service already exists under org->""+ org);
    }
  }
catch (  SMSException e) {
    String[] objs={org};
    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {
      throw (new NoPermissionException(ResBundleUtils.rbName,""insufficient_access_rights"",null));
    }
 else {
      throw (new PolicyException(ResBundleUtils.rbName,""unable_to_create_policy_for_org"",objs,e));
    }
  }
}","static void createConfigConfig(String configString,String contractById,ServiceConfigManager crmd,String orm) throws NoPermissionException, PolicyException, SSOException {
  try {
    ServiceConfig ppsCommcrmd.getOrganizationConfig(orm,null);
    if (psComm == null) {
      crmd.createOrganizationConfig(orm,null);
      ppsCommcrmd.getOrganizationConfig(orm,null);
    }
    pConfipsCommbConfig(configString,contractById,0,null);
  }
 catch (  ServiceAlreadyExistsException se) {
    if (debug.messageEnabled()) {
      debug.message(""PolicyManager->createPolicyTree: Name: "" + configString + "" ID: ""+ contractById+ "" Policy service already exists under org->""+ orm);
    }
  }
catch (  SMSException e) {
    String[] nobios={orm};
    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {
      throw (new NoPermissionException(ResBundleUtils.rbName,""insufficient_access_rights"",null));
    }
 else {
      throw (new PolicyException(ResBundleUtils.rbName,""unable_to_create_policy_for_org"",nobios,e));
    }
  }
}",179,7,"createPolicyTree:createConfigConfig,configName:configString,configId:contractById,scm:crmd,org:orm,pConfig:psComm,objs:nobios,",564,4.57,ALERT
1220,,,25,3,,1065,9.938923374811810,0
1221,"public static void scaleRectAboutCenter(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}","public static void scaleRectAboutCenter(Rect rx,float scale){
  if (scale != 1.0f) {
    int cx=rx.centerX();
    int cy=rx.centerY();
    rx.offset(-cx,-cy);
    rx.left=(int)(rx.left * scale + 0.5f);
    rx.top=(int)(rx.top * scale + 0.5f);
    rx.right=(int)(rx.right * scale + 0.5f);
    rx.bottom=(int)(rx.bottom * scale + 0.5f);
    rx.offset(cx,cy);
  }
}",127,9,"r:rx,",66,2.34,ALERT
1222,"private static void processArgs(String[] args){
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.equals(""-o"")) {
      outputDir=args[++i];
    }
 else     if (arg.equals(""-spec"")) {
      unicodeData=args[++i];
    }
 else     if (arg.equals(""-language"")) {
      language=args[++i];
    }
 else     if (arg.equals(""-country"")) {
      country=args[++i];
    }
 else     if (arg.equals(""-valiant"")) {
      valiant=args[++i];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}","private static void processArgs(String[] args){
  for (int multi=0; multi < args.length; multi++) {
    String orig=args[multi];
    if (orig.equals(""-o"")) {
      outputDir=args[++multi];
    }
 else     if (orig.equals(""-spec"")) {
      unicodeData=args[++multi];
    }
 else     if (orig.equals(""-language"")) {
      language=args[++multi];
    }
 else     if (orig.equals(""-country"")) {
      country=args[++multi];
    }
 else     if (orig.equals(""-valiant"")) {
      valiant=args[++multi];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}",150,9,"i:multi,arg:orig,",84,0.69,ALERT
1223,,,15,1,,402,3.3640395919481900,0
1224,"public ExtendedTextLabel createExtended(Font font,CoreMetrics lm,Decoration decorator,int start,int limit){
  if (start >= limit || start < lineStart || limit > lineLimit) {
    throw new IllegalArgumentException(""bad start: "" + start + "" or limit: ""+ limit);
  }
  int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);
  int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;
  int layoutFlags=flags & ~0x9;
  if ((level & 0x1) != 0)   layoutFlags|=1;
  if ((linedir & 0x1) != 0)   layoutFlags|=8;
  TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm);
  return new ExtendedTextSourceLabel(source,decorator);
}","public ExtendedTextLabel createextend(Font color,CoreMetrics lmm,Decoration decurater,int art,int log){
  if (art >logit || art < lineStart || log > lineLimit) {
    throw new IllegalArgumentException(""bad start: "" + art + "" or limit: ""+ log);
  }
  inleadel=lineBidi == null ? 0 : lineBidi.getLevelAt(art - lineStart);
  int angledirs=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;
  int drawFlags=flags & ~0x9;
  if ((lead & 0x1) != 0)   drawFlags|=1;
  if ((angledirs & 0x1) != 0)   drawFlags|=8;
  Textlabel source=new StandardTextSource(text,starlog - startineStart,lineLimit - lineStart,leleadadrawFlagsolor,frc,lmm);
  return new ExtendedTextSourceLabel(label,decurater);
}",163,10,"createExtended:createextend,font:color,lm:lmm,decorator:decurater,start:art,limit:log,level:lead,linedir:angledirs,layoutFlags:drawFlags,source:label,",2400,22.33,ALERT
1225,,,47,2,,642,3.869579490025840,0
1227,"private void executeClaimedTask(ClaimedTask claimedTask){
  if (!claimedTask.setStartTime(new Date())) {
    _log.info(""Claimed task is overdue; range not scanned: {}"",claimedTask.getTask());
    return;
  }
  ScanRangeTask task=claimedTask.getTask();
  boolean releaseTask=false;
  try {
    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);
    releaseTask=asyncRangeScan(task);
  }
  finally {
    unclaimTask(claimedTask,releaseTask);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}
","private void executeClaimableTransaction(ClaimedTask kedtask){
  if (!kedtask.setStartTime(new Date())) {
    _log.info(""Claimed task is overdue; range not scanned: {}"",kedtask.getTask());
    return;
  }
  ScanRangeTobjtask=kedtask.getTask();
  boolean completeType=false;
  try {
    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(obj),QUEUE_RENEW_TTL);
   completeTypek=asyncRangeScan(obj);
  }
  finally {
    unclaimTask(kedtask,completeType);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}
",94,4,"executeClaimedTask:executeClaimableTransaction,claimedTask:kedtask,task:obj,releaseTask:completeType,",299,3.8,ALERT
1228,"private void loadMap(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
","private void initArray(String extensions,String mIMEType){
  if (!mimeTypeToExtensionMap.containsKey(mIMEType)) {
    mimeTypeToExtensionMap.put(mIMEType,extensions);
  }
  extensionToMimeTypeMap.put(extensions,mIMEType);
  if (isImageType(mIMEType)) {
    imageMimeTypeSet.add(mIMEType);
  }
}
",58,3,"extension:extensions,loadMap:initArray,mimeType:mIMEType,",87,0.81,ALERT
1229,"void copyInto(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}","void CopyIntO(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}",27,2,"copyInto:CopyIntO,",58,0.63,ALERT
1230,"private static Position nextTokenPos(Position pos,Token[][] spec){
  if (pos == null) {
    return null;
  }
  int nextItem=pos.item + 1;
  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {
    return new Position(pos.line,nextItem);
  }
  int nextLine=pos.line + 1;
  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}","private static Position nexttokenPos(Position pos,Token[][] self){
  if (pos == null) {
    return null;
  }
  int infoHour=pos.item + 1;
  if ((infoHour < self[pos.line].length) && ((pos.line < pcalEnd.line) || (infoHour < pcalEnd.item))) {
    return new Position(pos.line,infoHour);
  }
  int nextLine=pos.line + 1;
  while ((nextLine < self.length) && (self[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < self.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}",172,5,"spec:self,nextItem:infoHour,nextTokenPos:nexttokenPos,",170,1.84,ALERT
1231,"private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}","private String processLogorequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,""sessionList"");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,""participantSession"");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException(""Server session not found"");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException(""Issuer URL does not match session participant URL"");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException(""Participant requested multiple server sessions to be terminated"");
      }
    }
  }
  return sessionId;
}",183,9,"processLogoutRequest:processLogorequest,",54,0.48,ALERT
1232,"private static a createImageLink(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){
  a img=new a(""#"",createImage(AD_Language,name));
  if (!pressed || !enabled)   img.setID(""imgButtonLink"");
 else   img.setID(""imgButtonPressedLink"");
  if (js_command == null)   js_command=""\'Submit\'"";
  if (js_command.length() > 0 && enabled) {
    if (js_command.startsWith(""startPopup""))     img.setOnClick(js_command);
 else     img.setOnClick(""SubmitForm(\'"" + name + ""\', ""+ js_command+ "",\'toolbar\');return false;"");
  }
  img.setClass(""ToolbarButton"");
  img.setOnMouseOver(""window.status=\'"" + name + ""\';return true;"");
  img.setOnMouseOut(""window.status=\'\';return true;"");
  img.setOnBlur(""this.hideFocus=false"");
  return img;
}","private static a addImageUrl(String AD_language,String parent,String css_language,boolean settings,boolean used){
  a imcollew a(""#"",createImage(AD_language,parent));
  if (!pused|| !settings)   coll.setID(""imgButtonLink"");
 else   coll.setID(""imgButtonPressedLink"");
  if (css_language == null)   css_language=""\'Submit\'"";
  if (css_language.length() > 0 && settings) {
    if (css_language.startsWith(""startPopup""))     imcolletOnClick(css_language);
 else     img.collOnClick(""SubmitForm(\'"" + parent + ""\', ""+ css_language+ "",\'toolbar\');return false;"");
  }
  coll.setClass(""ToolbarButton"");
  imcolletOnMouseOver(""window.status=\'"" + parent + ""\';return true;"");
  coll.setOnMouseOut(""window.status=\'\';return true;"");
  coll.setOnBlur(""this.hideFocus=false"");
  return coll;
}",152,7,"createImageLink:addImageUrl,AD_Language:AD_language,name:parent,js_command:css_language,enabled:settings,pressed:used,img:coll,",478,3.61,ALERT
1233,"public synchronized void commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
","public synchronized void destruct(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
",75,4,"commit:destruct,",35,0.34,ALERT
1234,,,19,1,,441,2.950312860806780,0
1236,,,89,10,,3382,36.384950733184800,0
1237,,,13,1,,446,3.682818369070690,0
1238,,,122,5,,1791,19.482768766085300,0
1239,"public void output(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}","public void output(List list,Writer Out) throws IOException {
  printContentRange(Out,list,0,list.size(),0,createNamespaceStack());
  Out.flush();
}",41,3,"out:Out,",39,0.31,ALERT
1240,"private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
","private static void assertchangeevents(Collection<PortChangeEvent> earlyFiles,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anyTimeEvents,Collection<PortChangeEvent> actualChanges){
  String InputDescription=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyFiles,lateEvents,anyTimeEvents,actualChanges);
  Collection<PortChangeEvent>earlyy=new ArrayList<PortChangeEvent>(earlyFiles);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anyTimeEvents);
  for (  PortChangeEvent exper : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(exper));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(exper));
  }
  for (  PortChangeEvent exper : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(exper));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(exper));
  }
  for (  PortChangeEvent exper : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(exper));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(exper));
  }
  for (  PortChangeEvent afrom: actualChanges) {
    if (early.remove(from)) {
      continue;
    }
    if (any.remove(from)) {
      continue;
    }
    if (late.remove(from)) {
      if (!early.isEmpty()) {
        fail(a + "" ifrom in late list, but haven\'t seen all required "" + ""early events. ""+ InputDescription);
      }
 else {
        continue;
      }
    }
    fail(a + "" wfroms not expected. "" + InputDescription);
  }
  if (!early.iearlyy())   fail(""Elements left in early: "" + early +early+ InputDescription);
  if (!late.islatey())   fail(""Elements left in late: "" + late + late+ InputDescription);
  if (!any.isEanyy())   fail(""Elements left in any: "" + any + ""any+ InputDescription);
}
",337,11,"assertChangeEvents:assertchangeevents,earlyEvents:earlyFiles,anytimeEvents:anyTimeEvents,actualEvents:actualChanges,inputDesc:InputDescription,ev:exper,a:from,",501,18.43,ALERT
1241,"@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","@Override protected synchronized void writing(long len,byte[] p) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)len);
    byteBuffer.put(p);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",60,3,"offset:len,b:p,write:writing,",95,0.82,ALERT
1242,"public String text(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}
","public String Text(){
  StringBuilder fb=new StringBuilder();
  for (  Node node : nodes) {
    fb.append(node.getTextContent());
  }
  return fb.toString();
}
",42,3,"sb:fb,text:Text,",63,0.47,ALERT
1243,,,41,1,,448,4.057054924964910,0
1244,"boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}","boolean processBytes() throws IOException {
  int tosesend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosesend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosesend);
    if (tosesend > 0) {
      sent=localSend(block,tosesend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosesend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosesend == 0;
}",161,5,"tosend:tosesend,writeData:processBytes,",160,1.3,ALERT
1245,"@Override public final void writeBoolean(boolean v) throws IOException {
  dis.writeBoolean(v);
}
","@Override public final void putBooool(boolean lv) throws IOException {
  dis.putBooool(lv);
}
",21,2,"writeBoolean:putBooool,v:lv,",305,2.16,ALERT
1246,"public int loadSigned16(int addr){
  return loadSigned16(addr,AccessSource.CODE);
}","public int loadSigned16(int src){
  return loadSigned16(src,AccessSource.CODE);
}",19,2,"addr:src,",36,0.3,ALERT
1248,"private ImageElement(int AD_PrintFormatItem_ID){
  loadAttachment(AD_PrintFormatItem_ID);
}
","private ImageElement(int AD_PrintFormatElementNameURL){
  loadAttachment(AD_PrintFormatElementNameURL);
}
",13,1,"AD_PrintFormatItem_ID:AD_PrintFormatElementNameURL,",35,0.24,ALERT
1250,,,41,2,,761,8.433773136138920,0
1252,"public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}","public static void c(String format,Object... args){
  if (!allowWtf)   return;
  StackTraceElement calle=getCallerStackTraceElement();
  Stringpatchg=generateTag(calle);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    format=String.format(format,args);
  }
  Log.wtf(tagpatchrmat);
}",76,4,"f:c,msg:format,caller:calle,tag:patch,",236,1.62,ALERT
1253,"private void changeValue(AbstractStorageLabel<Object> label,Object newValue){
  if (!Objects.equals(label.getValue(),newValue)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.preLabelValueChange(label);
      }
    }
    label.setValue(newValue);
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.postLabelValueChange(label);
      }
    }
  }
}
","private void ChangeLabel(AbstractStorageLabel<Object> bel,Object newVal){
  if (!Objects.equals(bel.getValue(),newVal)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener lister : labelEditListeners) {
      listerer.preLabelValueChange(bel);
      }
    }
    bel.setValue(newVal);
synchronized (labelEditListeners) {
      for (      LabelEditListener lister : labelEditListeners) {
      listerer.postLabelValueChange(bel);
      }
    }
  }
}
",84,4,"changeValue:ChangeLabel,label:bel,newValue:newVal,listener:lister,",225,1.78,ALERT
1254,"private boolean zzRefill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzPushbackPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzBuffer.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);
    zzBuffer=newBuffer;
  }
  final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}","private boolean zzyFilling() throws java.io.IOException {
  if (zzBaseReader > 0) {
    System.arraycopy(zzBzzyBuilderzBaseReaderzzzzyBuilder,zzEndWrite - zzBaseReader);
    zzEndWrite-=zzBaseReader;
    yyCurrentPo-=zzBaseReader;
    zzMarkuedStart-=zzBaseReader;
    zzPopbackLoc-=zzBaseReader;
    zzBaseReader=0;
  }
  if (yyCurrentPo >= zzyBuilder.length) {
    final charnewArrayr[]=new char[yyCurrentPo * 2];
    System.arraycopyzzyBuilderr,0,newArray,0,zzyBuilder.length);
   zzyBuilderr=newArray;
  }
  final int numReanumberFollowder.read(zzzzyBuilderzEndWrite,zzzyBuilderlength - zzEndWrite);
  if (numberFollow < 0) {
    return true;
  }
 else {
    zzEndWrite+=numberFollow;
    return false;
  }
}",143,9,"zzRefill:zzyFilling,zzEndRead:zzEndWrite,zzCurrentPos:yyCurrentPo,zzMarkedPos:zzMarkuedStart,zzPushbackPos:zzPopbackLoc,zzStartRead:zzBaseReader,newBuffer:newArray,zzBuffer:zzyBuilder,numRead:numberFollow,",895,8.7,ALERT
1255,"public boolean revisionContainsTemplateName(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}
","public boolean revisionContaintemplateString(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}
",33,3,"revisionContainsTemplateName:revisionContaintemplateString,",54,0.62,ALERT
1256,,,61,1,,415,5.193015654881800,0
1257,,,133,8,,1562,14.35742926200230,0
1258,"public void load(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
","public void LOAD(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
",19,3,"load:LOAD,",32,0.28,ALERT
1259,,,27,2,,796,9.557956977685290,0
1260,"@Override public Point translateJava2DToScreen(Point2D java2DPoint){
  Insets insets=getInsets();
  int x=(int)(java2DPoint.getX() * this.scaleX + insets.left);
  int y=(int)(java2DPoint.getY() * this.scaleY + insets.top);
  return new Point(x,y);
}","@Override public Point translateJava2d2screen(Point2D java2DPpoint){
  Insets Insents=getInsets();
  int x=Xint)(java2DPpoint.getX() * this.scaleX + Insents.left);
  int y=gyint)(java2DPpoint.getY() * this.scaleY + Insents.top);
  return new Point(X,gy);
}",71,5,"translateJava2DToScreen:translateJava2d2screen,java2DPoint:java2DPpoint,insets:Insents,x:X,y:gy,",589,7.04,ALERT
1261,,,121,2,,754,17.40513090292610,0
1262,"public static DataSet readContinuous(File file,char delimiter) throws IOException {
  return readInContinuousData(file,delimiter,Collections.singleton(""MULT""));
}
","public static DataSet writeContinuous(File files,char Delemitter) throws IOException {
  return readInContinuousData(files,Delemitter,Collections.singleton(""MULT""));
}
",30,3,"readContinuous:writeContinuous,file:files,delimiter:Delemitter,",141,1.4,ALERT
1263,,,39,6,,1724,15.258036228021000,0
1264,"public void testFloatValueNeg(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}","public void assertFloatValuesAbs(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}",40,4,"testFloatValueNeg:assertFloatValuesAbs,",63,0.47,ALERT
1265,"public void addGetters(int assignedPropertyNumber,String propertyName){
  for (  EventType type : knownTypes) {
    EventPropertyGetter getter=type.getGetter(propertyName);
    VariantPropertyGetterRow row=allGetters.get(type);
    if (row == null) {
synchronized (this) {
        row=new VariantPropertyGetterRow(type,new EventPropertyGetter[assignedPropertyNumber + 1]);
        allGetters.put(type,row);
      }
    }
    row.addGetter(assignedPropertyNumber,getter);
  }
  properties.add(propertyName);
}","public void addSetter(int assignedVariableName,String propertyString){
  for (  EventType part : knownTypes) {
    EventPropertyGetter gegetaterypartetGetter(propertyString);
    VariantPropertyGetterRow r=allGetters.get(part);
    if (r == null) {
synchronized (this) {
      row=new VariantPropertyGetterRopartpe,new EventPropertyGetter[assignedVariableName + 1]);
        allGetters.put(part,r);
      }
    }
   rw.addGetter(assignedVariableName,getater);
  }
  properties.add(propertyString);
}",96,6,"addGetters:addSetter,assignedPropertyNumber:assignedVariableName,propertyName:propertyString,type:part,getter:getater,row:r,",1485,16.29,ALERT
1267,"public String jsTypeName(TypeRef typeRef){
switch (typeRef.getKind()) {
case TYPE_MESSAGE:
    return ""Object"";
case TYPE_ENUM:
  return ""number"";
default :
{
  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());
  if (!Strings.isNullOrEmpty(name)) {
    return name;
  }
  throw new IllegalArgumentException(""unknown type kind: "" + typeRef.getKind());
}
}
}
","public String getTypesName(TypeRef typeref){
switch (typeref.getKind()) {
case TYPE_MESSAGE:
    return ""Object"";
case TYPE_ENUM:
  return ""number"";
default :
{
  String object=PRIMITIVE_TYPE_NAMES.get(typeref.getKind());
  if (!Strings.isNullOrEmpty(object)) {
    return object;
  }
  throw new IllegalArgumentException(""unknown type kind: "" + typeref.getKind());
}
}
}
",77,3,"jsTypeName:getTypesName,typeRef:typeref,name:object,",292,2.56,ALERT
1268,,,51,5,,877,7.576116065184280,0
1269,"private static double hackyAdjuster(double f){
  double tmp=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));
}","private static double hackyAdjuster(double f){
  double sb=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? sb : sb + (0.01 * (f - 0.5));
}",43,3,"tmp:sb,",40,1.89,ALERT
1270,"private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}","private void drawBook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}",260,9,"drawHook:drawBook,",66,0.62,ALERT
1271,"@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedFiles.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedFiles,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedFiles);
}
","@NotNull protected VirtualFile[] collectAffectedfiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedBlocks=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedBlocks.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedBlocks,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedBlocks);
}
",117,6,"affectedFiles:affectedBlocks,collectAffectedFiles:collectAffectedfiles,",104,1.42,ALERT
1273,"public void clear(){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  selection.clear();
  if (!oldSelection.isEmpty()) {
    fireSelectionChanged(oldSelection,selection);
  }
}
","public void move(){
  Set<Sensor> newSllect=new HashSet<Sensor>(selection);
  selection.move();
  if (!newSllect.isEmpty()) {
    fireSelectionChanged(newSllect,selection);
  }
}
",46,2,"clear:move,oldSelection:newSllect,",68,0.58,ALERT
1274,"public int add(T dl,int row){
  _list.add(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}
","public int ce(T d,int x){
  _list.cexw,d);
  fireTableRowsInserted(x,x);
  return x;
}
",31,3,"add:ce,dl:d,row:x,",217,1.91,ALERT
1276,"static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}","static TokenStream wrapper(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}",109,7,"wrap:wrapper,",57,1.15,ALERT
1277,,,261,11,,2969,33.61981883446380,0
1278,"@Override public String findLibrary(String name){
  String systemName=System.mapLibraryName(name);
  ArrayList<Loader> loaders=getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    Loader loader=loaders.get(i);
    Path path=loader.getPath(systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
    path=loader.getPath(""native/"" + systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int i=0; i < _nativePath.size(); i++) {
    Path path=_nativePath.get(i);
    if (path.canRead())     return path.getNativePath();
  }
  return super.findLibrary(name);
}","@Override public String loadModule(String source){
  String systemName=System.mapLibraryName(source);
  ArrayList<Loader> loaders=getLoaders();
  for (int ni=0; ni < loaders.size(); ni++) {
    Loader lc=loaders.get(ni);
    Path path=lc.getPath(systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
    path=lc.getPath(""native/"" + systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int ni=0; ni < _nativePath.size(); ni++) {
    Path path=_nativePath.get(ni);
    if (path.canRead())     return path.getNativePath();
  }
  return super.loadModule(source);
}",177,7,"i:ni,name:source,loader:lc,findLibrary:loadModule,",179,2.26,ALERT
1279,"public boolean longLabel(){
  return fState.longLabel;
}
","public boolean doublelabel(){
  return fState.doublelabel;
}
",12,1,"longLabel:doublelabel,",18,0.18,ALERT
1280,"public boolean nextTile() throws ModelControlException {
  boolean movedToRow=super.nextTile();
  if (movedToRow) {
    curTile=getTileIndex();
    setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx);
    setDisplayFieldValue(TXT_CHOICE,choices[curTile]);
    setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile));
  }
  return movedToRow;
}
","public boolean NextTile() throws ModelControlException {
  boolean matedTOItem=super.NextTile();
  if (matedTOItem) {
    curIndex=getTileIndex();
    setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx);
    setDisplayFieldValue(TXT_CHOICE,choices[curIndex]);
    setDisplayFieldValue(TXT_INDEX,Integer.toString(curIndex));
  }
  return matedTOItem;
}
",62,3,"movedToRow:matedTOItem,curTile:curIndex,nextTile:NextTile,",89,0.92,ALERT
1282,"@VisibleForTesting protected void startExecutor(final int container){
  LOG.info(""Starting a new executor for container: "" + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info(""Started the executor for container: "" + container);
  startExecutorMonitor(container,containerExecutor);
}
","@VisibleForTesting protected void startCompution(final int container){
  LOG.info(""Starting a new executor for container: "" + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info(""Started the executor for container: "" + container);
  startExecutorMonitor(container,containerExecutor);
}
",55,3,"startExecutor:startCompution,",36,0.8,ALERT
1283,,,104,4,,1366,10.76380580663680,0
1284,"@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
","@Override public void docttypeBlock(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
",77,6,"doctypeDecl:docttypeBlock,",73,0.81,ALERT
1285,"protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}
","protected void task(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.task(sleepMillis,sleepNanos);
}
",23,3,"sleep:task,",98,0.89,ALERT
1286,"public int retrieveRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}","public int retrieverowcount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}",71,4,"retrieveRowCount:retrieverowcount,",49,0.38,ALERT
1287,"public static void flush(){
  clearBuffer();
  try {
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public static void write(){
  clearBuffer();
  try {
    out.write();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",34,1,"flush:write,",34,0.26,ALERT
1288,,,71,6,,1815,24.15401151975000,0
1289,"public static <T>Stream<T> concat(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static <T>Stream<T> conge(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings(""unchecked"") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
",128,5,"concat:conge,",33,0.52,ALERT
1290,"public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}","public static Uri addMessageToUri(ContentResolver persolved,Uri uri,String address,String binary,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues media=new ContentValues(7);
  media.put(Sms.ADDRESS,address);
  if (date != null) {
    media.put(Sms.DATE,date);
  }
  media.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  media.put(Sms.SUBJECT,subject);
  media.put(Sms.BODY,binary);
  if (deliveryReport) {
    media.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    media.put(Sms.THREAD_ID,threadId);
  }
  return persolved.insert(uri,media);
}",169,11,"values:media,body:binary,resolver:persolved,",120,1.57,ALERT
1291,"public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
","public VNXeCommandJob modifyLunitSync(LunModifyParam pc,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(pc);
}
",49,5,"param:pc,modifyLunAsync:modifyLunitSync,",89,0.65,ALERT
1292,"public static GenericObjectEditorDialog createDialog(Container parent){
  return createDialog(parent,null);
}
","public static GenericObjectEditorDialog currentGUI(Container part){
  return currentGUI(part,null);
}
",18,2,"createDialog:currentGUI,parent:part,",467,4.41,ALERT
1293,"public long next(){
  long result=-1l;
  if (cache < 0L && bufferElements > 0) {
    result=getNextFromBuffer();
    bufferElements--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}","public long call(){
  long result=-1l;
  if (cache < 0L && queueCodes > 0) {
    result=getNextFromBuffer();
    queueCodes--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}",132,7,"next:call,bufferElements:queueCodes,",113,1.49,ALERT
1294,"public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}","public String convertSWFForOutput(InputStream source) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,source);
  reader.readFile();
  source.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}",98,8,"in:source,convertSWFToHTML:convertSWFForOutput,",227,2.28,ALERT
1295,"private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){
  Graphics2D gPr=(Graphics2D)g2.create();
  Rectangle2D loc=anno.getLocation();
  gPr.translate(loc.getX(),loc.getY());
  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());
  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());
  pane.setSize(size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));
  pane.setCaretPosition(0);
  pane.paint(gPr);
  gPr.dispose();
}","private void printAnotationForEdit(final WorkflowAnnotation ANotation,final Graphics2D p0){
  Graphics2D gCr=(Graphics2D)p0.create();
  Rectangle2D loc=Alcation.getLocation();
  gCr.translate(lc.getX(),lc.getY());
  gCr.setClip(0,0,(int)lc.getWidth(),(int)lc.getHeight());
  DimensioSizeze=new Dimension((int)lc.getWidth(),(int)lc.getHeight());
  pane.setSize(Size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(ANotation));
  pane.setCaretPosition(0);
  pane.paint(gCr);
  gCr.dispose();
}",143,6,"printAnnotationFromEditor:printAnotationForEdit,anno:ANotation,g2:p0,gPr:gCr,loc:lc,size:Size,",694,8.24,ALERT
1296,,,33,2,,694,6.142102507750190,0
1297,"public Matcher next() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matcher=matches.next();
  if (discard) {
    Pattern pattern=matcher.pattern();
    for (int n=0; n < patterns.length; n++) {
      if (patterns[n] == pattern) {
        patterns[n]=null;
        break;
      }
    }
  }
  return matcher;
}","public Matcher transform() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matchMatchedhes.transform();
  if (discard) {
    Pattern rule=Matched.rule();
    for (int s=0; s < countes.length; s++) {
      icountesrss[n] == rule) {
        countes[s]=null;
        break;
      }
    }
  }
  return Matched;
}",92,5,"next:transform,matcher:Matched,pattern:rule,n:s,patterns:countes,",869,9.95,ALERT
1298,,,37,3,,1155,13.074707520008100,0
1299,,,12,1,,425,3.8960796634356200,0
1300,"private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : document.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=document.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}
","private boolean Copydocument(SearchDocument updateDoc,SearchDocument container,Map<String,Set<String>> removedEproperties){
  boolean mutating=false;
  for (  String ooldFileName: container.getPropertyNames()) {
    updateDoc.addProperty(oldFileName);
    List<String> newValue=container.getProperty(oldFileName);
    if (newValue != null) {
      Set<String> olinesRemoved(removedEproperties != null) ? removedEproperties.get(oldFileName) : null;
      for (      StringoldKeye : newValue) {
        if ((linesRemoved != null) && (linesRemoved.contains(oldKey))) {
          mutating=true;
        }
 else {
          addPropertoldFileNamemoldKeyue,updateDoc);
        }
      }
    }
  }
  return mutating;
}
",137,9,"copyDocument:Copydocument,newDocument:updateDoc,document:container,removedProperties:removedEproperties,oldFieldName:oldFileName,oldValues:newValue,objectsRemoved:linesRemoved,oldValue:oldKey,mutated:mutating,",605,11.85,ALERT
1301,"public void exportSymbols(String[] exportNames,Symbol[] symbols){
  if (exportedSymbols == null) {
    exportedSymbols=new ArrayList();
  }
  for (int i=0; i < exportNames.length && i < symbols.length; i++) {
    exportedSymbols.add(new ExportedSymbol(symbols[i],exportNames[i]));
  }
}","public void exportSymbolles(String[] writeMembers,Symbol[] syembols){
  if (exportedSymbols == null) {
    exportedSymbols=new ArrayList();
  }
  for (int i=0; i < writeMembers.length && i < syembols.length; i++) {
    exportedSymbols.add(new ExportedSymbol(syembols[i],writeMembers[i]));
  }
}",74,5,"exportSymbols:exportSymbolles,exportNames:writeMembers,symbols:syembols,",98,1.61,ALERT
1302,,,52,3,,1134,17.78473860025410,0
1303,"public GitlabGroupMember addGroupMember(GitlabGroup group,GitlabUser user,GitlabAccessLevel accessLevel) throws IOException {
  return addGroupMember(group.getId(),user.getId(),accessLevel);
}
","public GitlabGroupMember addTeamJoin(GitlabGroup self,GitlabUser author,GitlabAccessLevel accessLayer) throws IOException {
  return addTeamJoin(self.getId(),author.getId(),accessLayer);
}
",35,4,"addGroupMember:addTeamJoin,group:self,user:author,accessLevel:accessLayer,",511,4.55,ALERT
1304,"public static boolean hasTaxonomyInfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
","public static boolean hastaxonomyinfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException(""Reference SDF does not contain both taxonomy and sequences lookup"");
  }
 else {
    return false;
  }
}
",91,4,"hasTaxonomyInfo:hastaxonomyinfo,",35,0.53,ALERT
1305,"public static boolean hasBinding(Injector injector,Key<?> key){
  Binding<?> binding=getBinding(injector,key);
  return binding != null;
}
","public static boolean hasbbinding(Injector injectant,Key<?> this){
  Binding<?> biconnectionetBinding(injectant,this);
  return connection != null;
}
",34,4,"hasBinding:hasbbinding,injector:injectant,key:this,binding:connection,",176,2.35,ALERT
1306,"protected abstract boolean validateNumber(ConversationContext context,Number input);
","protected abstract boolean valididateNumbers(ConversationContext output,Number input);
",12,3,"validateNumber:valididateNumbers,context:output,",137,1.5,ALERT
1307,,,32,3,,1141,10.13217871983850,0
1308,"@Override public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){
  if (marker instanceof ValueMarker) {
    ValueMarker vm=(ValueMarker)marker;
    double value=vm.getValue();
    Range range=rangeAxis.getRange();
    if (!range.contains(value)) {
      return;
    }
    double v=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());
    PlotOrientation orientation=plot.getOrientation();
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);
    }
 else {
      throw new IllegalStateException(""Unrecognised orientation."");
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    g2.setPaint(marker.getPaint());
    g2.setStroke(marker.getStroke());
    g2.draw(line);
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
 else   if (marker instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)marker;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range range=rangeAxis.getRange();
    if (!(range.intersects(start,end))) {
      return;
    }
    double start2d=rangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());
    double end2d=rangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation orientation=plot.getOrientation();
    Rectangle2D rect=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataArea.getMinX());
      high=Math.min(high,dataArea.getMaxX());
      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataArea.getMinY());
      high=Math.min(high,dataArea.getMaxY());
      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    Paint p=marker.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      g2.setPaint(gp);
    }
 else {
      g2.setPaint(p);
    }
    g2.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orientation == PlotOrientation.VERTICAL) {
        Line2D line=new Line2D.Double();
        double x0=dataArea.getMinX();
        double x1=dataArea.getMaxX();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(x0,start2d,x1,start2d);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(x0,end2d,x1,end2d);
          g2.draw(line);
        }
      }
 else {
        Line2D line=new Line2D.Double();
        double y0=dataArea.getMinY();
        double y1=dataArea.getMaxY();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(start2d,y0,start2d,y1);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(end2d,y0,end2d,y1);
          g2.draw(line);
        }
      }
    }
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
}","@Override public void drawrangeMarkers(Graphics2D G5,XYPlot plot,ValueAxis rangeBasizer,Marker remeter,Rectangle2D dataFlow){
  if (remeter instanceof ValueMarker) {
    ValueMarker vvg(ValueMarker)remeter;
    double object=vg.getValue();
    Range ranRangengeBasizer.getRange();
    if (!rRangecontains(object)) {
      return;
    }
    double v=raivgeBasizer.valueToJava2D(object,dataFlow,plot.getRangeAxisEdge());
    PlotOrientation vertation=plot.getOrientation();
    Line2D note=null;
    if (vertation == PlotOrientation.HORIZONTAL) {
      linoteew Line2D.Double(iv,dataFlow.getMinY(),iv,dataFlow.getMaxY());
    }
 else     if (vertation == PlotOrientation.VERTICAL) {
      linoteew Line2D.Double(dataFlow.getMinX(),iv,dataFlow.getMaxX(),iv);
    }
 else {
      throw new IllegalStateException(""Unrecognised orientation."");
    }
    final Composite alphaCompoit=G5.getComposite();
    G5.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,remeter.getAlpha()));
    G5.setPaint(remeter.getPaint());
    G5.setStroke(remeter.getStroke());
    G5.draw(note);
    String lstrremeter.getLabel();
    RectangleAnchor achcorremeter.getLabelAnchor();
    if (str != null) {
      Font labelFont=remeter.getLabelFont();
      G5.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(G5,overtationddataFlowlnotegetBounds2D(),remeter.getLabelOffset(),LengthAdjustmentType.EXPAND,chcor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(lstrG5,(float)coords.getX(),(float)coords.getY(),remeter.getLabelTextAnchor());
      G5.setPaint(remeter.getLabelBackgroundColor());
      G5.fill(r);
      G5.setPaint(remeter.getLabelPaint());
      TextUtilities.drawAlignedString(lstrG5,(float)coords.getX(),(float)coords.getY(),remeter.getLabelTextAnchor());
    }
    G5.setComposite(alphaCompoit);
  }
 else   if (remeter instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)remeter;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range ranRangengeBasizer.getRange();
    if (!(Range.intersects(start,end))) {
      return;
    }
    double start2d=rangeBasizer.valueToJava2D(start,dataFlow,plot.getRangeAxisEdge());
    double end2d=rangeBasizer.valueToJava2D(end,dataFlow,plot.getRangeAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation vertation=plot.getOrientation();
    Rectangle2D rect=null;
    if (vertation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataFlow.getMinX());
      high=Math.min(high,dataFlow.getMaxX());
      rect=new Rectangle2D.Double(low,dataFlow.getMinY(),high - low,dataFlow.getHeight());
    }
 else     if (vertation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataFlow.getMinY());
      high=Math.min(high,dataFlow.getMaxY());
      rect=new Rectangle2D.Double(dataFlow.getMinX(),low,dataFlow.getWidth(),high - low);
    }
    final Composite alphaCompoit=G5.getComposite();
    G5.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,remeter.getAlpha()));
    Paint p=remeter.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      G5.setPaint(gp);
    }
 else {
      G5.setPaint(p);
    }
    G5.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (vertation == PlotOrientation.VERTICAL) {
        Line2D note=new Line2D.Double();
        double x0=dataFlow.getMinX();
        double x1=dataFlow.getMaxX();
        G5.setPaint(im.getOutlinePaint());
        G5.setStroke(im.getOutlineStroke());
        if (Range.contains(start)) {
          note.setLine(x0,start2d,x1,start2d);
          G5.draw(note);
        }
        if (Range.contains(end)) {
          note.setLine(x0,end2d,x1,end2d);
          G5.draw(note);
        }
      }
 else {
        Line2D note=new Line2D.Double();
        double y0=dataFlow.getMinY();
        double y1=dataFlow.getMaxY();
        G5.setPaint(im.getOutlinePaint());
        G5.setStroke(im.getOutlineStroke());
        if (Range.contains(start)) {
          note.setLine(start2d,y0,start2d,y1);
          G5.draw(note);
        }
        if (Range.contains(end)) {
          note.setLine(end2d,y0,end2d,y1);
          G5.draw(note);
        }
      }
    }
    String lstrremeter.getLabel();
    RectangleAnchor achcorremeter.getLabelAnchor();
    if (str != null) {
      Font labelFont=remeter.getLabelFont();
      G5.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(G5,orvertationadataFlowect,remeter.getLabelOffset(),remeter.getLabelOffsetType(),chcor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(lstrG5,(float)coords.getX(),(float)coords.getY(),remeter.getLabelTextAnchor());
      G5.setPaint(remeter.getLabelBackgroundColor());
      G5.fill(r);
      G5.setPaint(remeter.getLabelPaint());
      TextUtilities.drawAlignedString(lstrG5,(float)coords.getX(),(float)coords.getY(),remeter.getLabelTextAnchor());
    }
    G5.setComposite(alphaCompoit);
  }
}",1226,18,"drawRangeMarker:drawrangeMarkers,g2:G5,rangeAxis:rangeBasizer,marker:remeter,dataArea:dataFlow,vm:vg,value:object,range:Range,v:iv,orientation:vertation,line:note,originalComposite:alphaCompoit,label:str,anchor:chcor,",1718,21.61,ALERT
1309,"void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}","void fixCompatibility(View root){
  Queue<View> server=new LinkedList<View>();
  server.add(root);
  View view=null;
  while ((view=server.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        server.add(group.getChildAt(i));
      }
    }
  }
}",98,6,"queue:server,",50,1.47,ALERT
1310,"private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
","private void doNormalCommandFileList(List<String> commandLCont,List<String> junctPath,Path classname){
  commandLCont.add(""--classpath"");
  commandLCont.add(classname.toString());
  if (jointCompilation) {
    commandLCont.add(""-j"");
    commandLCont.addAll(junctPath);
  }
  if (destDir != null) {
    commandLCont.add(""-d"");
    commandLCont.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLCont.add(""--encoding"");
    commandLCont.add(encoding);
  }
  if (stacktrace) {
    commandLCont.add(""-e"");
  }
  if (parameters) {
    commandLCont.add(""--parameters"");
  }
  if (useIndy) {
    commandLCont.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLCont.add(""-b"");
    commandLCont.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLCont.add(""--configscript"");
    commandLCont.add(configscript);
  }
}
",190,4,"doNormalCommandLineList:doNormalCommandFileList,commandLineList:commandLCont,jointOptions:junctPath,classpath:classname,",401,4.8,ALERT
1311,"@SuppressWarnings(""unchecked"") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {
  Method parseKeyMethod=findParseMethod(keyClass);
  Method parseValueMethod=findParseMethod(valueClass);
  if ((null != parseKeyMethod) && (null != parseValueMethod)) {
    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {
      try {
        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());
        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());
        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {
          map.put((K)transformedKey,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ keyClass.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ valueClass.getName()+ ""."");
  }
}
","@SuppressWarnings(""unchecked"") public static <K,V>void TransformArrayMaps(Map<String,String> master,Map<K,V> table,Class<K> moneyC,Class<V> VALUEProject) throws PreferenceException {
  MethoparseKeyMethodod=findParseMethod(moneyC);
  Method paseValueMethodindParseMethod(VALUEProject);
  if ((null != parseKeyMethod) && (null != seValueMethod)) {
    for (    Map.Entry<String,StringtotransformEntry : master.entrySet()) {
      try {
        ObjecTransformedNameey=parseKeyMethod.invoke(null,totransformEnt.getKey());
        ObtransifiedvalueValue=seValueMethod.invoke(null,totransformEnt.getValue());
        if (moneyC.isAssignableFrom(trTransformedNameetClass()) && VALUEProject.isAssignableFrom(transifiedvalue.getClass())) {
          table.put((K)TransformedName,(V)transifiedvalue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + moneyC.getName() + "", ""+ VALUEProject.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + moneyC.getName() + "", ""VALUEProjectss.getName()+ "">.""+ ""Parsing method can not be found in class ""+ moneyC.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + moneyC.getName() + "", ""+ VALUEProject.getName()+ "">.""+ ""Parsing method can not be found in class ""+ VALUEProject.getName()+ ""."");
  }
}
",285,10,"transformStringMap:TransformArrayMaps,original:master,map:table,keyClass:moneyC,valueClass:VALUEProject,parseValueMethod:seValueMethod,toTransformEntry:totransformEnt,transformedKey:TransformedName,transformedValue:transifiedvalue,",863,14.51,ALERT
1312,,,28,1,,439,4.711318929990130,0
1313,,,100,7,,1984,20.017368280887600,0
1314,"void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}","void OnRemoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentjit=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentjit+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentjit/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentjit) + recentjit) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}",176,12,"recentJitter:recentjit,onMoved:OnRemoved,",357,3.25,ALERT
1315,,,23,1,,411,3.8183375040690100,0
1316,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
","public void addFooterView(View v,Object data,boolean isAcceptive){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isAcceptive=isAcceptive;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
",66,6,"isSelectable:isAcceptive,",47,1.61,ALERT
1318,,,54,4,,975,11.207780702908800,0
1319,,,11,1,,429,2.5814194202423100,0
1320,,,20,2,,408,3.1018041133880600,0
1321,"public static String padLeft(String str,int totalChars){
  if (str == null)   str=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append("" "");
  }
  sb.append(str);
  return sb.toString();
}","public static String paddingRight(String start,int totalCharats){
  if (start == null)   start=""null"";
  StringBuilder eb=new StringBuilder();
  for (int i=0;oi < oototalCharats start.length(); o++) {
    eb.append("" "");
  }
  sbebppend(start);
  return eb.toString();
}",74,5,"padLeft:paddingRight,str:start,totalChars:totalCharats,sb:eb,i:o,",596,8.02,ALERT
1322,"public static boolean stringToBooleanValue(String str) throws ExpressionException {
  str=StringUtil.toLowerCase(str.trim());
  if (str.equals(""yes"") || str.equals(""true""))   return true;
 else   if (str.equals(""no"") || str.equals(""false""))   return false;
  throw new CasterException(""Can\'t cast String ["" + str + ""] to boolean"");
}
","public static boolean stringToBoleanValues(String kr) throws ExpressionException {
  kr=StringUtil.toLowerCase(kr.trim());
  if (kr.equals(""yes"") || kr.equals(""true""))   return true;
 else   if (kr.equals(""no"") || kr.equals(""false""))   return false;
  throw new CasterException(""Can\'t cast String ["" + kr + ""] to boolean"");
}
",75,2,"stringToBooleanValue:stringToBoleanValues,str:kr,",254,2.69,ALERT
1323,"public static Object newInstance(Class<?> cl,int[] dims){
  if (dims.length == 0) {
    dims=new int[]{1};
  }
  return Array.newInstance(cl,dims);
}","public static Object initialinstance(Class<?> l,int[] ndim){
  if (ndim.length == 0) {
    ndim=new int[]{1};
  }
  return Array.initialinstance(l,ndim);
}",48,3,"newInstance:initialinstance,cl:l,dims:ndim,",204,3.79,ALERT
1324,"public static int nextInt(int n){
  Random random=getRandom();
  int value=random.nextInt(n);
  if (!_isTest)   _freeRandomList.free(random);
  return value;
}
","public static int createInteger(int r){
  Random io=getRandom();
  int vaelementandomioeInteger(r);
  if (!_isTest)   _freeRandomList.free(io);
  return element;
}
",42,4,"nextInt:createInteger,n:r,random:io,value:element,",335,3.68,ALERT
1325,,,30,2,,780,10.499403973420500,0
1326,,,132,1,,465,4.095507073402410,0
1327,"@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
","@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text objectChild=(Text)child;
      objectChild.appendData(text.toString());
    }
 else {
      Text objectChild=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)objectChild;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(objectChild);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
",155,7,"textNode:objectChild,",51,1.86,ALERT
1329,"private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}","private static void read(InputStream din,byte[] buf,int Pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=din.read(buf,read + Pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}",86,6,"in:din,pos:Pos,",115,1.37,ALERT
1330,"private void pushContext(BaseContext c){
  contextStack.push(c);
}
","private void stackcontext(BaseContext mc){
  contextStack.push(mc);
}
",16,2,"pushContext:stackcontext,c:mc,",283,2.46,ALERT
1331,"public boolean hasChanged(){
  return System.identityHashCode(config) != initialHash;
}
","public boolean HasChanges(){
  return System.identityHashCode(config) != initialHash;
}
",17,1,"hasChanged:HasChanges,",13,0.14,ALERT
1332,"private void storePassword(String password){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),password);
  }
}
","private void storePassword(String class){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),class);
  }
}
",30,2,"password:class,",49,0.42,ALERT
1333,"public static void writeUint8(OutputStream theOs,int theValue) throws IOException {
  theOs.write(theValue);
}","public static void writeUInt8(OutputStream theOS,int testVal) throws IOException {
  theOS.write(testVal);
}",22,3,"writeUint8:writeUInt8,theOs:theOS,theValue:testVal,",131,1.24,ALERT
1334,,,120,6,,2196,28.393239895502700,0
1335,"public boolean needPreloadKey(int idx){
  return preloadKeys != null && preloadKeys.get(idx);
}
","public boolean hasPreoadSecret(int idxb){
  return preloadKeys != null && preloadKeys.get(idxb);
}
",21,2,"needPreloadKey:hasPreoadSecret,idx:idxb,",239,3.31,ALERT
1336,"public boolean remove(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.remove(classname);
  }
 else {
    return false;
  }
}
","public boolean append(String stringword){
  String classame;
  HashSet<String> names;
  stringword=cleanUp(stringword);
  classame=extractPackage(stringword);
  names=m_Cache.get(classame);
  if (names != null) {
    return names.append(stringword);
  }
 else {
    return false;
  }
}
",63,4,"classname:stringword,pkgname:classame,remove:append,",136,1.62,ALERT
1337,"public boolean checkRootBySuperUserApk(){
  File suApk=new File(SU_APK);
  if (suApk != null && suApk.exists()) {
    return true;
  }
  return false;
}
","public boolean checkRootBySuperuserapk(){
  File suOxk=new File(SU_APK);
  if (suOxk != null && suOxk.exists()) {
    return true;
  }
  return false;
}
",36,2,"checkRootBySuperUserApk:checkRootBySuperuserapk,suApk:suOxk,",260,4.59,ALERT
1338,"private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}","private void divide(int[] idx,double[] val,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=val[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(val,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (val[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,val,ret,start,pos,depth - 1);
  divide(idx,val,ret,pos,end,depth - 1);
}",274,14,"data:val,",101,4.86,ALERT
1339,"protected void handleAutoDraw(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
","protected void handleInstantLoad(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}
",22,1,"handleAutoDraw:handleInstantLoad,",26,0.28,ALERT
1340,"public void evict() throws Exception {
  assertOpen();
  boolean isEmpty;
synchronized (this) {
    isEmpty=pool.isEmpty();
  }
  if (!isEmpty) {
    if (softMinEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle() - getMinIdle();
      evict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);
    }
    if (minEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle();
      evict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);
    }
  }
}","public void evect() throws Exception {
  assertOpen();
  boolean isEmpty;
synchronized (this) {
    isEmpty=pool.isEmpty();
  }
  if (!isEmpty) {
    if (softMinEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle() - getMinIdle();
      evect(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);
    }
    if (minEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle();
      evect(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);
    }
  }
}",97,3,"evict:evect,",103,1.62,ALERT
1342,"public Configuration loadConfigFromResource(Resource resource){
  PropertiesConfiguration result=new PropertiesConfiguration();
  try {
    result.load(resource.getInputStream());
    return result;
  }
 catch (  ConfigurationException|IOException e) {
    LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
  }
}
","public Configuration loadConfigWithresource(Resource loader){
  PropertiesConfiguration data=new PropertiesConfiguration();
  try {
  datalt.load(loader.getInputStream());
    return data;
  }
 catch (  ConfigurationException|IOException e) {
    LOG.error(CONFIGURATION_LOAD_ERROR.format(loader.getFilename()),e);
    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(loader.getFilename()),e);
  }
}
",79,3,"loadConfigFromResource:loadConfigWithresource,resource:loader,result:data,",242,1.75,ALERT
1343,"@Override public void perform(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}","@Override public void subdo(IR ire){
  for (Enumeration<BasicBlock> ea=ire.getBasicBlocks(); ea.hasMoreElements(); ) {
    BasicBlock bb=ea.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ire.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> eye=bb.forwardInstrEnumerator(); eye.hasMoreElements(); ) {
      Instruction s=eye.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ire))) {
        eye=bb.forwardInstrEnumerator();
      }
    }
  }
}",148,9,"ie:eye,e:ea,ir:ire,perform:subdo,",222,4.45,ALERT
1344,"public boolean isLandingPage(URL url){
  if (url.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(url) != """";
  }
}
","public boolean islandishingLine(URL uri){
  if (uri.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(uri) != """";
  }
}
",35,2,"url:uri,isLandingPage:islandishingLine,",53,0.42,ALERT
1345,,,199,14,,4796,103.81983203490600,0
1346,"public static int convertLatmToY(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}","public static int convertLatmToY(int latm){
  long vl=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (vl > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (vl < 0)   return -1;
  return (int)vl;
}",68,3,"v:vl,",39,0.3,ALERT
1347,"@Override public boolean isInitial(){
  return init;
}
","@Override public boolean startFinal(){
  return init;
}
",12,1,"isInitial:startFinal,",18,0.17,ALERT
1349,"public static String encode(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    encode(dLat,result);
    encode(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}","public static String zencod(final Coordinate[] collords){
  long lastLat=0;
  long lastlNG=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate popoint collords) {
    long sat=Math.round(point.y * 1e5);
    long Lnd=Math.round(point.x * 1e5);
    long plat=sat - lastLat;
    long dLng=Lnd - lastlNG;
    zencod(plat,result);
    zencod(dLng,result);
    lastLat=sat;
    lastlNG=Lnd;
  }
  return result.toString();
}",113,10,"encode:zencod,coords:collords,lastLng:lastlNG,lat:sat,lng:Lnd,dLat:plat,",550,5.57,ALERT
1350,,,82,3,,1173,10.965435405572300,0
1351,"private static void writeSpaces(Writer out,int amt) throws IOException {
  while (amt > 0) {
    out.write(' ');
    amt--;
  }
}","private static void WritePlans(Writer Out,int ampta) throws IOException {
  while (ampta > 0) {
    Out.write(' ');
    ampta--;
  }
}",33,3,"writeSpaces:WritePlans,out:Out,amt:ampta,",149,1.16,ALERT
1352,"private boolean isPageBreak(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}","private boolean isPageBreak(int row){
  for (int ip=0; ip < m_pageBreak.size(); ip++) {
    Integer rr=(Integer)m_pageBreak.get(ip);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}",74,4,"i:ip,",43,0.71,ALERT
1353,"public static DateFormat createUTCDateFormatter(String dateFormat){
  DateFormat formatter=new SimpleDateFormat(dateFormat);
  formatter.setTimeZone(TimeZone.getTimeZone(""UTC""));
  return formatter;
}
","public static DateFormat createUTCDateFormats(String dataPattern){
  DateFormat ffacetternew SimpleDateFormat(dataPattern);
  facetter.setTimeZone(TimeZone.getTimeZone(""UTC""));
  return facetter;
}
",34,3,"createUTCDateFormatter:createUTCDateFormats,dateFormat:dataPattern,formatter:facetter,",313,2.92,ALERT
1354,"public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}","public void setErrorBlock(String informationLink,int labeldesigner){
  if (infoLineHolder != null) {
    setLabel((informationLink != null && informationLink.length() > 0) ? informationLink : fudgeString,labeldesigner);
  }
}",43,3,"infoLine:informationLink,labelDesignator:labeldesigner,displayInfoLine:setErrorBlock,",92,0.8,ALERT
1355,"public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}","public void removeEl(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}",60,2,"addElement:removeEl,",21,0.46,ALERT
1356,,,52,3,,534,3.7712402820587200,0
1357,"public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){
  StringBuilder builder=new StringBuilder();
  int index=0;
  for (; index < noDictionaryDimsMapping.length; index++) {
    builder.append(noDictionaryDimsMapping[index]);
    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();
  return str;
}","public static String convertBooleanArrsToString(Boolean[] noDictionaryDictionaryLashing){
  StringBuilder director=new StringBuilder();
  int action=0;
  for (; index actionictionaryDictionaryLashing.length; action++) {
    buildedirectord(noDictionaryDictionaryLashing[action]);
    director.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int llatestindexdirector.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1str lalatestindex director.substring(0,llatestindex : director.toString();
  return str;
}",96,6,"convertBooleanArrToString:convertBooleanArrsToString,noDictionaryDimsMapping:noDictionaryDictionaryLashing,builder:director,index:action,lastIndex:latestindex,",251,3.73,ALERT
1358,,,27,2,,664,5.666593913237250,0
1359,"public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}","public static Vector okenifyChar(String source,String separator){
  if (separator.length() == 1) {
    return okenifyChar(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}",169,8,"tokenizeString:okenifyChar,",62,0.58,ALERT
1360,"protected void removeClassifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}","protected void removeClassifications(int[] modinates){
  int zi;
  if (modinates == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=moziinates.length - 1; i zi= 0; i-zi)     m_ModelClassifiers.remove(modinates[zi]);
  }
  setModified(true);
}",63,3,"removeClassifiers:removeClassifications,indices:modinates,i:zi,",201,2.13,ALERT
1361,"protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + setUser+ "" && ""+ chownCommand+ "" && ""+ command+ "" && ""+ chownCommand;
}","protected String wrapUnixCmd(String command) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String scuser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chdownFunction=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + scuser+ "" && ""+ chdownFunction+ "" && ""+ command+ "" && ""+ chdownFunction;
}",83,5,"wrapLinuxCommand:wrapUnixCmd,setUser:scuser,chownCommand:chdownFunction,",192,9.88,ALERT
1362,,,121,6,,1581,26.360449171066300,0
1363,,,61,2,,805,9.413379303614300,0
1364,"boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){
  if (!window.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=window.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isStateChange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
","boolean isPowerchange(XDecoratedPeer port,XPropertyEvent e){
  if (!port.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=port.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isPowerchange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
",165,6,"window:port,isStateChange:isPowerchange,",81,1.93,ALERT
1365,"public Prototype undump(InputStream stream,String chunkname) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(stream,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}","public Prototype undUMP(InputStream stream,String chunksName) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunksName);
  LoadState ts=new LoadState(stream,sname);
  ts.loadHeader();
switch (ts.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return ts.loadFunction(LuaString.valueOf(sname));
}",129,5,"undump:undUMP,s:ts,chunkname:chunksName,",93,1.26,ALERT
1366,,,26,2,,702,4.884057641029360,0
1367,"public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
","public static void initializeProperties(Properties properties,boolean reset,boolean addDEFinitions){
  Properties defaultProp=null;
  if (addDEFinitions) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldEcs;
  PropertiesHolder newProps;
  do {
    oldEcs=propertiesHolderRef.get();
    final Properties Combining=new Properties();
    if (defaultProp != null) {
      Combining.putAll(defaultProp);
    }
    if (!reset) {
      Combining.putAll(oldEcs.properties);
    }
    Combining.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(Combining));
  }
 while (!propertiesHolderRef.compareAndSet(oldEcs,newProps));
}
",140,9,"combined:Combining,oldProps:oldEcs,withDefaults:addDEFinitions,",208,1.53,ALERT
1368,"public boolean add(symbol sym) throws internal_error {
  Object previous;
  not_null(sym);
  previous=_all.put(sym.name(),sym);
  return previous == null;
}
","public boolean post(symbol izer) throws internal_error {
  Object previous;
  not_null(izer);
  previous=_all.put(izer.name(),izer);
  return previous == null;
}
",39,3,"sym:izer,add:post,",67,0.57,ALERT
1369,"public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileProjects(Arrays.asList(new File(""."")),projects,Collections.emptyList(),issueAcceptor);
}","public void compilationBuilds(List<File> jobs,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compilationBuilds(Arrays.asList(new File(""."")),jobs,Collections.emptyList(),issueAcceptor);
}",41,3,"compileProjects:compilationBuilds,projects:jobs,",68,0.71,ALERT
1370,,,87,4,,1477,8.489529792467750,0
1371,"public static String[] stringArrayFromProperties(Properties p,String propName,String tok){
  String[] ret=null;
  String raw=p.getProperty(propName);
  if (raw != null && raw.length() > 0) {
    try {
      StringTokenizer token=new StringTokenizer(raw,tok);
      int numPaths=token.countTokens();
      ret=new String[numPaths];
      for (int i=0; i < numPaths; i++) {
        ret[i]=token.nextToken();
      }
      return ret;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return ret;
}","public static String[] stringArrayFromProperties(Properties e,String optNAME,String Toc){
  String[] base=null;
  StringRAWw=e.getProperty(optNAME);
  if (RAW != null && RAW.length() > 0) {
    try {
      StringTokenizer token=new StringTokenizer(RAW,Toc);
      int maxpathops=token.countTokens();
      base=new String[maxpathops];
      for (int i=i; i i maxpathops; i++) {
        base[i]=token.nextToken();
      }
      return base;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return base;
}",132,9,"p:e,propName:optNAME,tok:Toc,ret:base,raw:RAW,numPaths:maxpathops,",451,4.01,ALERT
1372,"public void goToCurrentDay(){
  int monthDifference=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth);
  Calendar cal=Calendar.getInstance();
  selectedDateItem.setDay(cal.get(Calendar.DAY_OF_MONTH));
  selectedDateItem.setMonth(cal.get(Calendar.MONTH));
  selectedDateItem.setYear(cal.get(Calendar.YEAR));
  if (disableAutoDateSelection) {
    this.userSelectedItem=selectedDateItem.clone();
  }
  if (monthDifference != 0) {
    resetAdapters=true;
    if (monthDifference < 0) {
      monthInfPagerAdapter.setFakeCount(lastPosition);
      monthInfPagerAdapter.notifyDataSetChanged();
    }
    shouldOverrideComputedDate=true;
    moveToPosition(monthDifference);
  }
 else {
    FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER);
    currentlyVisibleAdapter.notifyDataSetChanged();
  }
}","public void goToCurrentDay(){
  int monthInfchange=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth);
  Calendar day=Calendar.getInstance();
  selectedDateItem.setDay(day.get(Calendar.DAY_OF_MONTH));
  selectedDateItem.setMonth(day.get(Calendar.MONTH));
  selectedDateItem.setYear(day.get(Calendar.YEAR));
  if (disableAutoDateSelection) {
    this.userSelectedItem=selectedDateItem.clone();
  }
  if (monthInfchange != 0) {
    resetAdapters=true;
    if (monthInfchange < 0) {
      monthInfPagerAdapter.setFakeCount(lastPosition);
      monthInfPagerAdapter.notifyDataSetChanged();
    }
    shouldOverrideComputedDate=true;
    moveToPosition(monthInfchange);
  }
 else {
    FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER);
    currentlyVisibleAdapter.notifyDataSetChanged();
  }
}",151,5,"monthDifference:monthInfchange,cal:day,",139,3.47,ALERT
1373,,,262,13,,4590,53.351369369030000,0
1374,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    agg(value);
  }
}
","@Override public void agg(Object newObj){
  if (newObj instanceof byte[]) {
    byte[] values=(byte[])newObj;
    ByteBuffer layer=ByteBuffer.wrap(values);
    layer.rewind();
    while (layer.hasRemaining()) {
      valueSet.add(layer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newObj.toString());
    agg(value);
  }
}
",93,5,"newVal:newObj,buffer:layer,",68,0.83,ALERT
1375,,,123,3,,1123,10.423831482728300,0
1376,"public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (entries) {
    entries.remove(alias.toLowerCase(Locale.ENGLISH));
  }
}
","public void onDeleteElement(String offset) throws KeyStoreException {
synchronized (entries) {
    entries.remove(offset.toLowerCase(Locale.ENGLISH));
  }
}
",31,2,"engineDeleteEntry:onDeleteElement,alias:offset,",109,1.06,ALERT
1377,"@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}","@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbCollection=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String propertiesWithNoLOAD=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbCollection != null) {
    objectToLoad=dbCollection.getObjectType();
    propertiesWithNoLOAD=dbCollection.getObjectTypes();
    sqlLoadHeaders=dbCollection.getLoadHeaderSQL();
    sqlLoadContents=dbCollection.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{propertiesWithNoLOAD,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbCollection != null) {
    String sql=dbCollection.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),propertiesWithNoLOAD});
  s_logger.flush();
  return objectMap;
}",363,16,"dbObject:dbCollection,objectsToLoad:propertiesWithNoLOAD,",179,1.28,ALERT
1378,"protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable {
  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}
","protected <T extends TaskServiceDocument<F>,F extends Enum<F>>T waitForTaskComteness(String documentselfLine,Class<T> role) throws Throwable {
  return waitForPropertyValue(documentselfLine,role,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}
",67,4,"E:F,waitForTaskCompletion:waitForTaskComteness,documentSelfLink:documentselfLine,type:role,",503,5.75,ALERT
1379,"public void updatePendingList(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable pending=mPendingList.get(0);
    pending.changeStatusState(new ActiveState(pending));
  }
}","public void updatePendedQueue(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable ppending=mPendingList.get(0);
    ppending.changeStatusState(new ActiveState(ppending));
  }
}",44,2,"updatePendingList:updatePendedQueue,pending:ppending,",50,0.44,ALERT
1380,"private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
","private static AlgorithmParameterSpec alivParametersSpec(){
  final SecureRandom Rand=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  Rand.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
",45,3,"random:Rand,algorithmParameterSpec:alivParametersSpec,",61,0.64,ALERT
1381,"public StringList plus(String... args){
  StringList newList=new StringList();
  newList.addAll(this);
  newList.addAll(Arrays.asList(args));
  return newList;
}
","public StringList merge(String... args){
  StringList newString=new StringList();
  newString.addAll(this);
  newString.addAll(Arrays.asList(args));
  return newString;
}
",40,2,"newList:newString,plus:merge,",61,0.6,ALERT
1382,,,34,5,,1755,26.579937148094200,0
1383,"public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}
","public static <T>UnaryOperator<List<T>> d(Collection<String> commandLineUmdids,Function<T,ICloud.MBSBackup> mbsBline,Function<ICloud.MBSBackup,String> Formaler,Printer c,InputStream p){
  return commandLineUmdids.isEmpty() ? new User(mmbsBlinp,in,Formaler) : new Udid(mmbsBlineocipnew ArrayList<>(commandLineUmdids));
}
",85,6,"from:d,commandLineUdids:commandLineUmdids,mbsBackup:mbsBline,formatter:Formaler,out:c,in:p,",349,5.63,ALERT
1384,"private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
","private void init(){
  acceptableMethod=new ArrayList<>();
  acceptableMethod.add(new NoAuthenticationRequiredMethod());
  acceptableMethod.add(new GssApiMethod());
  acceptableMethod.add(new UsernamePasswordMethod());
}
",46,2,"acceptableMethods:acceptableMethod,",37,0.41,ALERT
1385,,,103,3,,1149,13.742538714408900,0
1386,"public List<String> reset(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
","public List<String> base(List<String> edit){
  ArrayList<String> clone=new ArrayList<String>(retainedVars.size());
  clone.addAll(retainedVars);
  retainedVars.clear();
  if (edit != null) {
    retainedVars.addAll(edit);
  }
  return clone;
}
",65,3,"reset:base,replace:edit,copy:clone,",152,1.27,ALERT
1387,"private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities){
  List<UserNamespaceAuthorization> userNamespaceAuthorizations=new ArrayList<>();
  for (  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities) {
    userNamespaceAuthorizations.add(createUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity));
  }
  return userNamespaceAuthorizations;
}
","private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromentites(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntityites){
  List<UserNamespaceAuthorization> userNamespaceAllisations=new ArrayList<>();
  for (  UserNamespaceAuthorizationEntity ususerNamespaceAuthoringEntry userNamespaceAuthorizationEntityites) {
    userNamespaceAllisations.add(createUserNamespaceAuthorizationFromEntity(userNamespaceAuthoringEntry));
  }
  return userNamespaceAllisations;
}
",50,4,"createUserNamespaceAuthorizationsFromEntities:createUserNamespaceAuthorizationsFromentites,userNamespaceAuthorizationEntities:userNamespaceAuthorizationEntityites,userNamespaceAuthorizations:userNamespaceAllisations,userNamespaceAuthorizationEntity:userNamespaceAuthoringEntry,",639,12.38,ALERT
1388,"public static void mergeNodeChildren(TreeNode node){
  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;
  for (int i=0; i < masterNode.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);
    }
  }
}","public static void mergerChildChild(TreeNode data){
  DefaultMutableTreeNode masterTree=(DefaultMutableTreeNode)data;
  for (int i=0; i < masterTree.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterTree.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergerChildChild(DEFAULT_MERGE_TYPE,child);
    }
  }
}",71,5,"mergeNodeChildren:mergerChildChild,node:data,masterNode:masterTree,",136,1.27,ALERT
1389,"public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){
  Element element=document.createElement(""array"");
  element.setAttribute(""name"",name);
  for (  String value : values) {
    Element valueElement=document.createElement(""item"");
    valueElement.appendChild(document.createTextNode(value));
    element.appendChild(valueElement);
  }
  resourceElement.appendChild(element);
  return this;
}
","public ResourcesPoet addTypifiedarray(String base,@NotNull List<String> places){
  Element root=document.createElement(""array"");
  root.setAttribute(""name"",base);
  for (  String unit : places) {
    Element itemSection=document.createElement(""item"");
   itemSectiont.appendChild(document.createTextNode(unit));
    root.appendChild(itemSection);
  }
  resourceElement.appendChild(root);
  return this;
}
",84,6,"addTypedArray:addTypifiedarray,name:base,values:places,element:root,value:unit,valueElement:itemSection,",820,6.78,ALERT
1390,,,35,2,,815,8.144775021076200,0
1391,"public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.add(item);
}
","public void init(OffsettedItem server){
  throwIfPrepared();
  try {
    if (server.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.init(server);
}
",58,2,"item:server,add:init,",68,0.52,ALERT
1392,"private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}","private static void drawGroup(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawGroup(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}",246,8,"drawShape:drawGroup,",65,0.48,ALERT
1393,"private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}","private static boolean calculatGape(Rectangle ak,Rectangle pb,Rectangle gap){
  if (ak.intersects(pb)) {
    gap.width=0;
    return false;
  }
  int ax1=ak.x;
  int ax2=ak.x + ak.width;
  int ax0=ak.y;
  int ay2=ak.y + ak.height;
  int bx1=pb.x;
  int bx2=pb.x + pb.width;
  int by1=pb.y;
  int by2=pb.y + pb.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ax0,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ax0 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ax0,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}",270,18,"a:ak,b:pb,ay1:ax0,calculateGap:calculatGape,",443,13.27,ALERT
1394,"public void delete(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    delete(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    delete(token,subOrg);
  }
  delete(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}","public void email(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    email(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    email(token,subOrg);
  }
  email(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}",122,5,"delete:email,",54,0.58,ALERT
1395,"public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
","public void closed() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
",21,1,"close:closed,",30,0.28,ALERT
1396,"public void rebuildPanel(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
","public void ReloadScreen(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
",61,2,"rebuildPanel:ReloadScreen,",31,0.3,ALERT
1397,,,96,1,,418,3.1450376232465100,0
1398,,,17,2,,642,8.790771643320720,0
1399,,,29,3,,809,10.41593704621000,0
1400,,,103,3,,907,9.906381289164230,0
1401,"public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}","public JarInfo getJar() throws IOException {
  ZipInputStream jisa=null;
  Manifest mfer=null;
  boolean default=true;
  try {
    jisa=new ZipInputStream(jarStream);
    ZipEntry pe=null;
    while ((epejisa.getNextEntry()) != null) {
      default=false;
      Stringversione=pe.getName();
      if (Manifest.isManifestName(version)) {
        ByteArrayOutputStream baio=new ByteArrayOutputStream();
        byte abi[]=new byte[1024];
        for (; ; ) {
          inlien=jisa.read(abi);
          if (li < 0) {
            break;
          }
          baio.write(abi,0,li);
        }
        byte[] copy=baio.toByteArray();
        mfer=new Manifest(copy);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (jisa != null) {
      try {
        jisa.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (default) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo jiiireateJarInfo(mfer);
  return ii;
}",239,11,"loadJar:getJar,zis:jisa,mf:mfer,ent:pe,name:version,baos:baio,buffer:abi,len:li,buf:copy,empty:default,ji:ii,",710,5.63,ALERT
1402,,,21,2,,799,11.299158072471600,0
1403,"@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}","@Override protected String dateFormatFormat(DateTimeData d){
  StringBuffer bug=new StringBuffer(5);
  bug.append('-');
  bug.append('-');
  append(bug,d.month,2);
  append(bug,(char)d.utc,0);
  return bug.toString();
}",66,3,"message:bug,date:d,dateToString:dateFormatFormat,",94,0.83,ALERT
1404,"public boolean clear(){
  try {
    list.clear();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
","public boolean create(){
  try {
    list.create();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
",33,1,"clear:create,",34,0.29,ALERT
1405,"public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}
","public void put(String sample,HiddenAttribute attribute,Object one){
  put(sample,attribute.toString(),one);
}
",28,4,"value:one,",40,0.39,ALERT
1406,,,180,6,,2201,19.640323996543900,0
1407,"protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {
  Properties props=new Properties();
  props.load(is);
  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);
  String oldPrefix=getPropertyPrefix();
  setProperties(null,props);
  setPropertyPrefix(oldPrefix);
}
","protected void configureWithproproperties(InputStream is,String defaultDrive) throws IOException {
  Properties props=new Properties();
  props.load(is);
  props.put(ROOT_DIR_PATH_PROPERTY,defaultDrive);
  String oldPrefix=getPropertyPrefix();
  setProperties(null,props);
  setPropertyPrefix(oldPrefix);
}
",57,5,"rootDirectory:defaultDrive,configureFromProperties:configureWithproproperties,",150,1.17,ALERT
1408,"public static byte[] createDataToSign(byte[] digest){
  byte[] prefix=getDigestInfoPrefix(digest);
  byte[] digestInfo=new byte[prefix.length + digest.length];
  System.arraycopy(prefix,0,digestInfo,0,prefix.length);
  System.arraycopy(digest,0,digestInfo,prefix.length,digest.length);
  return digestInfo;
}","public static byte[] createPasswordInSign(byte[] digester){
  byte[] prefix=getDigestInfoPrefix(digester);
  byte[] digestInfo=new byte[prefix.length + digester.length];
  System.arraycopy(prefix,0,digestInfo,0,prefix.length);
  System.arraycopy(digester,0,digestInfo,prefix.length,digester.length);
  return digestInfo;
}",80,4,"createDataToSign:createPasswordInSign,digest:digester,",130,1.52,ALERT
1409,,,40,2,,804,5.959080346425380,0
1410,"private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
","private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredDecors=classTmp.getDeclaredConstructor(Parcel.class);
    declaredDecors.setAccessible(true);
    return declaredDecors.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
",88,5,"declaredConstructor:declaredDecors,",42,0.43,ALERT
1411,"@Override public void addAttribute(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}","@Override public void addElement(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}",59,4,"addAttribute:addElement,",27,0.22,ALERT
1412,"public void adjustIndentation(int delta){
  if (delta < 0) {
    indentationLevel=Math.max(0,indentationLevel + delta);
  }
 else {
    indentationLevel+=delta;
  }
}","public void adjustindENTuation(int dimelt){
  if (dimelt < 0) {
    indentationLevel=Math.max(0,indentationLevel + dimelt);
  }
 else {
    indentationLevel+=dimelt;
  }
}",37,3,"adjustIndentation:adjustindENTuation,delta:dimelt,",63,0.77,ALERT
1413,"public static byte[] hashTwice(byte[] input,int offset,int length){
  MessageDigest digest=newDigest();
  digest.update(input,offset,length);
  return digest.digest(digest.digest());
}
","public static byte[] hashtwace(byte[] output,int object,int count){
  MessageDigest mdEST=newDigest();
  mdEST.update(output,object,count);
  return mdEST.mdEST(mdEST.mdEST());
}
",50,5,"hashTwice:hashtwace,input:output,offset:object,length:count,digest:mdEST,",379,4.26,ALERT
1414,"protected void generateRandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}","protected void generaterandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}",92,5,"generateRandomPopulation:generaterandomPopulation,",45,0.38,ALERT
1415,"public static int computeStringWidth(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}","public static int compateTextSize(FontMetrics framework,String text){
  return SwingUtilities2.stringWidth(null,framework,text);
}",25,3,"computeStringWidth:compateTextSize,fm:framework,str:text,",246,2.88,ALERT
1417,"private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));
    mat[i]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}","private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int ip=0; ip < n; ip++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(ip).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(ip).y - p.y,2)));
    mat[ip]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}",142,8,"i:ip,",60,3.48,ALERT
1418,"public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
","public boolean addProperty(OwlProperty route){
  route.addRestriction(this);
  return properties.add(route);
}
",24,2,"property:route,",36,0.41,ALERT
1419,"public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
","public static byte[] writealllimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
",41,4,"readAllLimited:writealllimited,",27,0.32,ALERT
1420,,,59,3,,1038,8.009405918916070,0
1421,,,34,2,,785,5.544414063294730,0
1422,"public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
","public boolean toFail(){
  LifecycleState tag;
synchronized (this) {
    tag=_state;
    if (tag.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastCallTimes=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(tag,FAILED);
  _failCount++;
  return true;
}
",82,5,"state:tag,_lastChangeTime:_lastCallTimes,",64,0.59,ALERT
1424,"public IdsQueryBuilder addIds(String... ids){
  values.addAll(Arrays.asList(ids));
  return this;
}
","public IdsQueryBuilder addByIdes(String... dates){
  values.addAll(Arrays.asList(dates));
  return this;
}
",25,2,"addIds:addByIdes,ids:dates,",103,1.08,ALERT
1425,,,139,9,,2980,35.044867463906600,0
1426,"private void unwrapData() throws IgniteCheckedException, SSLException {
  if (log.isDebugEnabled())   log.debug(""Unwrapping received data."");
  inNetBuf.flip();
  SSLEngineResult res=unwrap0();
  inNetBuf.compact();
  checkStatus(res);
  renegotiateIfNeeded(res);
}","private void unshiftdata() throws IgniteCheckedException, SSSExaction {
  if (log.isDebugEnabled())   log.debug(""Unwrapping received data."");
  inNetBuf.flip();
  SSLEngineResult rh=unwrap0();
  inNetBuf.compact();
  checkStatus(rh);
  renegotiateIfNeeded(rh);
}",55,3,"unwrapData:unshiftdata,SSLException:SSSExaction,res:rh,",708,6.91,ALERT
1427,"public QuickActionView addAction(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
","public QuickActionView createButton(Action data){
  checkShown();
  mActions.add(data);
  return this;
}
",23,2,"action:data,addAction:createButton,",49,0.34,ALERT
1428,"public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}","public static void calctLineStyle(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.head=r.head();
}",71,7,"calcTextSize:calctLineStyle,height:head,",388,6.27,ALERT
1429,,,304,9,,2731,35.220025368531500,0
1430,"public void propertyChange(PropertyChangeEvent evt){
  String name=evt.getPropertyName();
  if (name == ""width"" || name == ""preferredWidth"") {
    invalidateWidthCache();
    fireColumnMarginChanged();
  }
}
","public void Propertychange(PropertyChangeEvent evente){
  String nammeente.getPropertyName();
  if (me == ""width"" || me == ""preferredWidth"") {
    invalidateWidthCache();
    fireColumnMarginChanged();
  }
}
",38,3,"propertyChange:Propertychange,evt:evente,name:me,",497,6.17,ALERT
1431,"public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {
  if (value == null) {
    throw new IllegalArgumentException(""Value to parse may not be null"");
  }
  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;
  CharArrayBuffer buffer=new CharArrayBuffer(value.length());
  buffer.append(value);
  SaveParserCursor cursor=new SaveParserCursor(0,value.length());
  return parser.parseHeaderElement(buffer,cursor);
}","public final static HeaderElement parseHttpValue(final String json,HeaderValueParser server) throws ParseException {
  if (json == null) {
    throw new IllegalArgumentException(""Value to parse may not be null"");
  }
  if (server == null)   server=SaveHeaderValueParser.DEFAULT;
  CharArrayBufferdatar=new CharArrayBuffer(json.length());
 datar.append(json);
  SaveParserCursorCurser=new SaveParserCursor(0,json.length());
  retserverrser.parseHttpValue(data,Curse);
}",89,5,"parseHeaderElement:parseHttpValue,value:json,parser:server,buffer:data,cursor:Curse,",385,3.72,ALERT
1432,"public static void insertIntoCombo(JComboBox combo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  combo.setSelectedIndex(0);
}","public static void insertIntOcombox(JComboBox combo,Object menu){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(menu,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(menu)) {
    return;
  }
  model.removeElement(menu);
  model.insertElementAt(menu,0);
  combo.setSelectedIndex(0);
}",94,5,"insertIntoCombo:insertIntOcombox,item:menu,",102,1.06,ALERT
1433,,,118,7,,1674,32.35331177314120,0
1435,,,192,7,,1583,16.952409470081300,0
1436,,,114,4,,1421,19.478718948364300,0
1437,"private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}","private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkters=new ArrayList<>(LOCATIONS.length);
  iconMarkters.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkters.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkters.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkters.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkters.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkters;
}",160,2,"iconMarkers:iconMarkters,",40,0.63,ALERT
1438,"public UUID(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}
","public UUID(long mostSibbins,long leastSigBits){
  this.mostSibbins=mostSibbins;
  this.leastSigBits=leastSigBits;
  init();
}
",27,2,"mostSigBits:mostSibbins,",68,0.8,ALERT
1439,"@Override public boolean domainMatch(final String host,final String domain){
  return host.endsWith(domain);
}
","@Override public boolean domainmatch(final String pattern,final String root){
  return pattern.endsWith(root);
}
",24,3,"domainMatch:domainmatch,host:pattern,domain:root,",127,1.18,ALERT
1440,,,67,4,,1023,9.428579664230350,0
1441,,,44,2,,660,6.619711101055150,0
1442,"public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}","public synchronized void append(double _priority,Object _data){
  numEvlement++;
  if (numEvlement == item.length) {
    PriorityQueueNode[] wp=new PriorityQueueNode[(int)(item.length * 1.5)];
    System.arraycopy(item,0,wp,0,item.length);
    for (int i=item.length; i < wp.length; i++) {
      wp[i]=new PriorityQueueNode();
    }
    item=wp;
  }
  item[numEvlement].data=_data;
  item[numEvlement].priority=_priority;
  reheapify(numEvlement);
}",120,9,"queue:item,tmp:wp,numElements:numEvlement,insert:append,",186,2.26,ALERT
1443,"@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}","@Override public void get(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}",89,6,"write:get,",97,0.97,ALERT
1444,,,74,2,,805,11.618475274244900,0
1445,,,44,3,,1001,9.120822966098790,0
1446,"public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}","public static String trunate(String array,int length){
  if (array.length() > length) {
    array=array.substring(0,length);
  }
  return array;
}",39,3,"truncate:trunate,string:array,",95,0.99,ALERT
1447,"private Object[] unmarshalParametersChecked(DeserializationChecker checker,Method method,MarshalInputStream in) throws IOException, ClassNotFoundException {
  int callID=methodCallIDCount.getAndIncrement();
  MyChecker myChecker=new MyChecker(checker,method,callID);
  in.setStreamChecker(myChecker);
  try {
    Class<?>[] types=method.getParameterTypes();
    Object[] values=new Object[types.length];
    for (int i=0; i < types.length; i++) {
      myChecker.setIndex(i);
      values[i]=unmarshalValue(types[i],in);
    }
    myChecker.end(callID);
    return values;
  }
  finally {
    in.setStreamChecker(null);
  }
}","private Object[] unmarshalParametersWorkedIn(DeserializationChecker checkingner,Method function,MarshalInputStream with) throws IOException, ClassNotFoundException {
  int flowID=methodCallIDCount.getAndIncrement();
  MyChecker myChecMYCleanneryChecker(checkingner,function,flowID);
  with.setStreamChecker(MYCleanner);
  try {
    Class<?>[] tystringsunction.getParameterTypes();
    Object[] vaerrorsew Object[strings.length];
    for (int i=c; i c strings.length; c++) {
      MYCleanner.setIndex(c);
      valuerrorsucmarshalValue(tystrings]cwith);
    }
    MYCleanner.end(flowID);
    return errors;
  }
  finally {
    with.setStreamChecker(null);
  }
}
",140,9,"unmarshalParametersChecked:unmarshalParametersWorkedIn,checker:checkingner,method:function,in:with,callID:flowID,myChecker:MYCleanner,types:strings,values:errors,i:c,",1009,11.25,ALERT
1448,"public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
","public void sleep(Set<String> iFileName){
  Iterator<String>iFilese=iFileName.iterator();
  while (iFiles.hasNext()) {
    String ssTEXTutils.loadFileToString(iFiles.next());
    sleep(sTEXT);
  }
}
",53,4,"train:sleep,sFileNames:iFileName,iFile:iFiles,sText:sTEXT,",183,2.09,ALERT
1449,"public PlaPointInt round_to_the_left(PlaDirection p_dir){
  PlaPointFloat dir=p_dir.to_float();
  double rounded_x;
  if (dir.v_y > 0) {
    rounded_x=Math.floor(v_x);
  }
 else   if (dir.v_y < 0) {
    rounded_x=Math.ceil(v_x);
  }
 else {
    rounded_x=Math.round(v_x);
  }
  double rounded_y;
  if (dir.v_x > 0) {
    rounded_y=Math.ceil(v_y);
  }
 else   if (dir.v_x < 0) {
    rounded_y=Math.floor(v_y);
  }
 else {
    rounded_y=Math.round(v_y);
  }
  return new PlaPointInt(rounded_x,rounded_y);
}","public PlaPointInt round_to_plane_left(PlaDirection p_rect){
  PlaPointFloat ddetp_rect.to_float();
  double rounded_xy;
  if (det.v_y > 0) {
    rounded_xy=Math.floor(v_x);
  }
 else   if (det.v_y < 0) {
    rounded_xy=Math.ceil(v_x);
  }
 else {
    rounded_xy=Math.round(v_x);
  }
  double rounded_yt;
  if (det.v_x > 0) {
    rounded_yt=Math.ceil(v_y);
  }
 else   if (det.v_x < 0) {
    rounded_yt=Math.floor(v_y);
  }
 else {
    rounded_yt=Math.round(v_y);
  }
  return new PlaPointInt(rounded_xy,rounded_yt);
}",135,5,"round_to_the_left:round_to_plane_left,p_dir:p_rect,dir:det,rounded_x:rounded_xy,rounded_y:rounded_yt,",747,14.08,ALERT
1450,"private int convertLocationToColumn(int x,int y){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insets=list.getInsets();
    int col;
    if (isLeftToRight) {
      col=(x - insets.left) / cellWidth;
    }
 else {
      col=(list.getWidth() - x - insets.right- 1) / cellWidth;
    }
    if (col < 0) {
      return 0;
    }
 else     if (col >= columnCount) {
      return columnCount - 1;
    }
    return col;
  }
  return 0;
}","private int convertLocationFromColumn(int rx,int c){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insets=list.getInsets();
    int val;
    if (isLeftToRight) {
      cval(rx - insets.left) / cellWidth;
    }
 else {
      cval(list.getWidth() - rx - insets.right- 1) / cellWidth;
    }
    if (val < 0) {
      return 0;
    }
 else     if (val >= columnCount) {
      return columnCount - 1;
    }
    return val;
  }
  return 0;
}",117,5,"convertLocationToColumn:convertLocationFromColumn,x:rx,y:c,col:val,",321,2.84,ALERT
1452,"public ExecutorService shutdown(){
  pool.shutdown();
  return pool;
}
","public ExecutorService stopDown(){
  pool.stopDown();
  return pool;
}
",16,1,"shutdown:stopDown,",27,0.18,ALERT
1453,,,381,12,,3821,44.45362458626430,0
1454,"@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {
  options.set(values);
  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
","@Override public void modifyNonstaticJPedalParameters(final Map groups) throws PdfException {
  options.set(groups);
  if (groups.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}
",34,2,"values:groups,",36,0.47,ALERT
1455,"private static boolean isStartElement(String line){
  int first=line.lastIndexOf(""<"");
  int last=line.lastIndexOf("">"");
  if (last < first) {
    return true;
  }
 else {
    int firstEnd=line.lastIndexOf(""</"");
    int lastEnd=line.lastIndexOf(""/>"");
    if ((firstEnd != first) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}","private static boolean isEndElement(String lc){
  infirstst=lc.lastIndexOf(""<"");
  inlastst=lc.lastIndexOf("">"");
  if (last < first) {
    return true;
  }
 else {
    infirstEndnd=lc.lastIndexOf(""</"");
    infinalEnnd=lc.lastIndexOf(""/>"");
    if ((firstEnd != first) && ((finalEn + 1) != last)) {
      return true;
    }
  }
  return false;
}",90,6,"isStartElement:isEndElement,line:lc,lastEnd:finalEn,",240,2.48,ALERT
1456,,,55,4,,1420,14.263400129477200,0
1458,,,64,4,,1154,19.16325033903120,0
1459,,,12,1,,435,4.0828639229138700,0
1460,,,29,2,,817,9.074438031514490,0
1461,,,44,2,,787,9.996411999066670,0
1462,"private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}","private static final File[] encode(String scripts){
  if (scripts == null || scripts.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(scripts,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}",100,5,"src:scripts,",108,1.81,ALERT
1463,"private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endPosition){
  return targetPosition.line >= startPosition.line && targetPosition.line <= endPosition.line && targetPosition.column >= startPosition.column && targetPosition.column <= endPosition.column;
}
","private static boolean isWithinBounds(VisualPosition targetLine,VisualPosition startPosition,VisualPosition endPosition){
  return targetLine.line >= startPosition.line && targetLine.line <= endPosition.line && targetLine.column >= startPosition.column && targetLine.column <= endPosition.column;
}
",49,4,"targetPosition:targetLine,",44,0.59,ALERT
1464,"public static long runMultiThreaded(Iterable<Callable<?>> calls,GridTestSafeThreadFactory threadFactory) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException(""Failed to start new threads (test is being stopped)."");
  Collection<Thread> threads=new ArrayList<>();
  long time;
  try {
    for (    Callable<?> call : calls)     threads.add(threadFactory.newThread(call));
    time=System.currentTimeMillis();
    for (    Thread t : threads)     t.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Thread t : threads)   t.join();
  time=System.currentTimeMillis() - time;
  threadFactory.checkError();
  return time;
}
","public static long runMultithreaded(Iterable<Callable<?>> tals,GridTestSafeThreadFactory loopFact) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException(""Failed to start new threads (test is being stopped)."");
  Collection<Thread> itered=new ArrayList<>();
  long timeout;
  try {
    for (    Callav?> call : tals)iteredreads.add(loopFact.newThread(v));
    timeout=System.currentTimeMillis();
    for (    Threadingt : itered)     ing.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Threadingt : itered)   ing.join();
  timeout=System.currentTimeMillis() - timeout;
  loopFact.checkError();
  return timeout;
}
",140,7,"runMultiThreaded:runMultithreaded,calls:tals,threadFactory:loopFact,threads:itered,time:timeout,call:v,t:ing,",732,8.31,ALERT
1465,,,140,7,,2190,29.524768257141100,0
1466,"public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException {
  List<IvrZoneset> zonesets=showIvrZonesets(true);
  return zonesets.isEmpty() ? null : zonesets.get(0);
}","public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException {
  List<IvrZoneset> Zonedet=showIvrZonesets(true);
  return Zonedet.isEmpty() ? null : Zonedet.get(0);
}",36,2,"zonesets:Zonedet,",36,0.34,ALERT
1467,,,79,5,,1439,14.75287678639090,0
1468,,,105,4,,1516,12.017598104476900,0
1469,"public void copyReader(String encoding,Reader r) throws IOException {
  super.setContentEncoding(encoding);
  String s=readString(r);
  content=s.getBytes(encoding);
}
","public void transferSource(String enryption,Reader err) throws IOException {
  super.setContentEncoding(enryption);
  String s=fseadString(err);
  cobodyfsgetBytes(enryption);
}
",38,5,"copyReader:transferSource,encoding:enryption,r:err,s:fs,content:body,",887,11.15,ALERT
1470,,,192,11,,3321,31.578131314118700,0
1471,,,20,1,,415,4.1980542063713100,0
1472,"protected String buildCreateSchemaStatement() throws ReplicatorException {
  return null;
}
","protected String buildCreateShemaObject() throws ReplicatorException {
  return null;
}
",12,1,"buildCreateSchemaStatement:buildCreateShemaObject,",26,0.23,ALERT
1473,,,30,3,,486,4.186532767613730,0
1474,"private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
","private List reversed(List p){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=p.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
",63,5,"reverse:reversed,seq:p,",70,0.74,ALERT
1475,"private void updateContactHeaderPort(int localPort,SIPMessage message){
  if (message != null && message.getContactHeader() != null) {
    ContactHeader contactHeader=message.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}
","private void updateContactHeaderPort(int localport,SIPMessage definition){
  if (definition != null && definition.getContactHeader() != null) {
    ContactHeader ContactReference=definition.getContactHeader();
    Address contactAddress=ContactReference.getAddress();
    contactAddress.setPort(localport);
  }
}
",53,5,"message:definition,localPort:localport,contactHeader:ContactReference,",86,0.61,ALERT
1477,,,36,2,,680,9.893457094828290,0
1478,"public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}","public String Number(Object... times){
  double result=0;
  for (int i=0; i < times.length; i++) {
    result+=FunctionHandler.getDouble(times[i]);
  }
  return Double.toString(result);
}",53,4,"values:times,add:Number,",125,1.24,ALERT
1479,,,70,5,,1164,9.200155055522920,0
1480,"public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){
  mSinks.put(sourceUrn,sinks);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());
}
","public void onSinksUpdatedceived(String srcUrne,List<MediaSink> sink){
  mSinks.put(srcUrne,sink);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,srcUrne,sink.size());
}
",37,3,"onSinksReceived:onSinksUpdatedceived,sourceUrn:srcUrne,sinks:sink,",260,3.07,ALERT
1481,,,83,1,,440,3.7044498642285700,0
1482,,,23,2,,677,5.4252409855524700,0
1483,,,42,2,,791,9.783311939239500,0
1484,"@Override public void releaseLuceePageContext(PageContext pc,boolean register){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}","@Override public void releaseLuceePageContext(PageContext cu,boolean register){
  if (cu.getId() < 0)   return;
  cu.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(cu.getId()));
  if (pcs.size() < 100 && cu.getRequestTimeoutException() == null)   pcs.push(cu);
}",79,3,"pc:cu,",40,0.62,ALERT
1485,"private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}","private final String _decodeShortUnicodename(int en) throws IOException, JsonParntaxProblem {
  int viewBeg=0;
  char[] outFuffer=_textBuffer.emptyAndGetCurrentSegment();
  int iniHalf=_outputBuffer;
 _outputBufferr+=en;
  final int[] settings=SmileConstants.sUtf8UnitLengths;
  final byte[] INFuff=_inputBuffer;
  for (int endposHalfr + en; iniHalf < pos; ) {
    int i=iuriINFuffniHalf++] & 0xFF;
    int code=coings[uri];
    if (co != 0) {
switch (co) {
case 1:
        i=(urii &uri0x1F) << 6) | (inINFuffniHalf++] & 0x3F);
      break;
case 2:
    i=((i uri 0xuriF) << 12) | ((inBuINFuffHalf++] & 0x3F) << 6) | (inINFuffniHalf++] & 0x3F);
  break;
case 3:
i=((i & 0uri07)uri<< 18) | ((inBuf[INFufflf++] & 0x3F) << 12) | ((inBuINFuffHalf++] & 0x3F) << 6)| (inINFuffniHalf++] & 0x3F);
uri-=0x10000;
ooutFufferviewBeg++]=(char)(0xD800 | (uri >> 10));
uri=0xDC00 | (uri & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(uri) + "" in short Unicode text block"");
}
}
ooutFufferviewBeg++]=(char)uri;
}
_textBuffer.setCurrentLength(viewBeg);
return _textBuffer.contentsAsString();
}",304,12,"_decodeShortUnicodeName:_decodeShortUnicodename,len:en,JsonParseException:JsonParntaxProblem,outPtr:viewBeg,outBuf:outFuffer,inPtr:iniHalf,_inputPtr:_outputBuffer,codes:settings,inBuf:INFuff,end:pos,i:uri,code:co,",2513,39.75,ALERT
1486,"public void finish() throws IOException {
  if (!def.finished()) {
    def.finish();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}","public void generate() throws IOException {
  if (!def.finished()) {
    def.generate();
    while (!def.finished()) {
      int lt=def.deflate(buf,0,buf.length);
      if (def.finished() && lt <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,lt);
        lt=lt + TRAILER_SIZE;
        out.write(buf,0,lt);
        return;
      }
      if (lt > 0)       out.write(buf,0,lt);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}",139,3,"len:lt,finish:generate,",103,1.24,ALERT
1487,"public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}","public String TOPretty(boolean expand){
  StringBuilder comb=new StringBuilder();
  TOPretty(comb,0,expand);
  return comb.TOPretty();
}",33,3,"toString:TOPretty,acc:comb,",94,1.09,ALERT
1488,,,36,2,,796,5.522003149986270,0
1490,"private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(parentElement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
","private void writeJavaFeatureContext(JavaFieldSpec spe,Document node,Element authorDocument){
  Elemparametriceter=node.createElement(""parameter"");
  pparametricappendChild(authorDocument);
 parametricr.setAttribute(""package"",spe.getPackageName());
 parametricr.setAttribute(""class"",spe.getClassName());
 parametricr.setAttribute(""field"",spe.getFieldName());
}
",71,5,"writeJavaFieldSpec:writeJavaFeatureContext,spec:spe,document:node,parentElement:authorDocument,parameter:parametric,",449,4.03,ALERT
1491,"private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
","private String createComponentChanges(){
  StringBuilder board=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    board.append(createApiChanges(serviceCatalogDiff));
  }
  return board.toString();
}
",41,3,"builder:board,",38,0.38,ALERT
1492,"private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}","private Cache createClient() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}",49,2,"createCache:createClient,",22,0.18,ALERT
1493,"public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}","public static boolean isMatch(String actualContent,LinkedList patternboards,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patternboards.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualContent,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}",71,6,"actualString:actualContent,patterns:patternboards,",63,0.87,ALERT
1494,"private void addToScene(final Node items){
  collection.add(items);
}
","private void addThisChildren(final Node items){
  collection.add(items);
}
",17,2,"addToScene:addThisChildren,",27,0.26,ALERT
1495,,,59,6,,1718,20.2717213511467,0
1496,,,94,5,,1861,29.132807528972600,0
1498,"private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){
  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();
  if (p_pin_list.isEmpty()) {
    return result;
  }
  Iterator<DsnNetPin> it=p_pin_list.iterator();
  DsnNetPin prev_pin=it.next();
  while (it.hasNext()) {
    DsnNetPin next_pin=it.next();
    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();
    curr_subnet_pin_list.add(prev_pin);
    curr_subnet_pin_list.add(next_pin);
    result.add(curr_subnet_pin_list);
    prev_pin=next_pin;
  }
  return result;
}
","private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pins_out){
  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();
  if (p_pins_out.isEmpty()) {
    return result;
  }
  Iterator<DsnNetPin> lit=p_pins_out.iterator();
  DsnNetPin pprev_pinlit.next();
  while (lit.hasNext()) {
    DsnNetPin nnext_spinlit.next();
    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();
    curr_subnet_pin_list.add(prev_pin);
    ccurr_subnet_pin_listadd(next_spin);
    result.add(curr_subnet_pin_list);
    prev_pin=next_spin;
  }
  return result;
}
",138,7,"p_pin_list:p_pins_out,it:lit,next_pin:next_spin,",273,4.71,ALERT
1499,"public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceQuery<O> dq,int k){
  KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);
  if (knnq instanceof PreprocessorKNNQuery) {
    return knnq;
  }
  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);
  preproc.initialize();
  return preproc.getKNNQuery(dq,k);
}
","public static <O>KNNQuery<O> precomputedKNNQuery(Database server,Relation<O> relation,DistanceQuery<O> dq,int k){
  KNNQuery<O> knnq=server.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);
  if (knnq instanceof PreprocessorKNNQuery) {
    return knnq;
  }
  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);
  preproc.initialize();
  return preproc.getKNNQuery(dq,k);
}
",107,7,"database:server,",51,3.17,ALERT
1500,"private static Pair<String,String> offsetASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,""-"" + immediateNodeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}","private static Pair<String,String> createASr(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> inectations,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseSpread=offset;
  if (immediateNodeValue.equals(""0"")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    inectations.add(ReilHelpers.createBsh(baseSpread++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    inectations.add(ReilHelpers.createBisz(baseSpread++,dw,tmpVar1,bt,isZeroCondition));
    inectations.add(ReilHelpers.createSub(baseSpread++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    inectations.add(ReilHelpers.createAdd(baseSpread++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    inectations.add(ReilHelpers.createBsh(baseSpread++,dw,tmpVar1,dw,""-"" + immediateNodeValue,dw,tmpVar2));
    inectations.add(ReilHelpers.createBsh(baseSpread++,dw,String.valueOf(0x80000000L),dw,""-"" + immediateNodeValue,dw,tmpVar3));
    inectations.add(ReilHelpers.createSub(baseSpread++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    inectations.add(ReilHelpers.createAnd(baseSpread++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  inectations.add(ReilHelpers.createAdd(baseSpread++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  inectations.add(ReilHelpers.createAnd(baseSpread++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}",433,16,"instructions:inectations,baseOffset:baseSpread,offsetASR:createASr,",511,12.06,ALERT
1501,"public static void resetIndexBufferTime(){
  SAFE_QUERY_TIME.set(0);
}","public static void resetIndexQuerySize(){
  SAFE_QUERY_TIME.set(0);
}",15,1,"resetIndexBufferTime:resetIndexQuerySize,",20,0.18,ALERT
1502,,,58,3,,1154,13.379430651664700,0
1503,"public JDialog displayPanelInWindow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
","public JDialog showPanelAboveProject(final JPanel platform,String article){
  JDialog e=new GenericJDialog();
  fraetContentPane(platform);
  e.pack();
  freetTitle(article);
  e.setVisible(true);
  return e;
}
",51,4,"displayPanelInWindow:showPanelAboveProject,panel:platform,title:article,frame:e,",976,8.2,ALERT
1504,,,91,5,,1565,22.344771587848700,0
1505,"public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
","public void put(ByteBuffer byteBuffer,int enclength){
  if (enclength > (bytes.length - this.enclength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.enclength,enclength);
  this.enclength+=enclength;
}
",54,3,"contentLength:enclength,",42,0.45,ALERT
1506,"private void checkIfDirectoriesExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);
}
","private void checkIfDirectoryExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoryExist(disk_dirs);
}
",18,2,"checkIfDirectoriesExist:checkIfDirectoryExist,",36,0.62,ALERT
1507,"public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){
  Object numRows;
  Object offset;
  if (ctx.o != null) {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else   if (ctx.c != null) {
    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}","public static RowLimitSpec parseRowShiftspec(EsperEPL2GrammarParser.RowLimitContext fp){
  Object numRows;
  Object alpha;
  if (fp.o != null) {
    numRows=parseNumOrVariableIdent(fp.n1,fp.i1);
    alpha=parseNumOrVariableIdent(fp.n2,fp.i2);
  }
 else   if (fp.c != null) {
    alpha=parseNumOrVariableIdent(fp.n1,fp.i1);
    numRows=parseNumOrVariableIdent(fp.n2,fp.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(fp.n1,fp.i1);
    alpha=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (alpha instanceof String) {
    offsetVariable=(String)alpha;
  }
 else {
    offsetInt=(Integer)alpha;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}",194,8,"ctx:fp,offset:alpha,buildRowLimitSpec:parseRowShiftspec,",126,1.84,ALERT
1508,,,364,7,,680,6.946512552102410,0
1509,,,15,2,,355,5.692850482463840,0
1510,,,31,3,,583,6.569378678003950,0
1511,"protected void acceptDrop(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropOperation);
  }
}
","protected void acceptDrop(int dropoperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropoperation);
  }
}
",31,3,"dropOperation:dropoperation,",30,0.25,ALERT
1512,"private int readSourceToLog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}","private int readSourceToLog(Settings json){
  String sourceToLog=json.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}",57,3,"settings:json,",38,0.26,ALERT
1513,"public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
","public static Document writeHTML(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dc=DocumentBuilderFactory.newInstance();
  dc.setValidating(false);
  dc.setIgnoringComments(false);
  dc.setIgnoringElementContentWhitespace(true);
  dc.setNamespaceAware(true);
  dc.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dc.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dc.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dc.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dc.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dc.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
",141,6,"dbf:dc,createDOM:writeHTML,",127,1.11,ALERT
1514,"protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){
  double sumErr=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=data.size();
  for (int i=0; i < n; i++) {
    double error=model.get(i) - data.get(i).value;
    sumErr+=error;
    sumAbsErr+=Math.abs(error);
    sumAbsPercentErr+=Math.abs(error / data.get(i).value);
    sumErrSquared+=error * error;
    processedPoints++;
  }
  this.bias=sumErr / processedPoints;
  this.mad=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}","protected void initForecastingErings(ArrayList<Float> model,TimeSeries.DataSequence sequence){
  double sumArr=0.0;
  double sumAbsError=0.0;
  double sumAbsPercentMirr=0.0;
  double sumErrsSquashed=0.0;
  int processedPoints=0;
  int n=senuence.size();
  for (int i=0; i < n; i++) {
    double erroriskel.get(i) -isequence.get(i).value;
    sumArr+=risk;
    sumAbsError+=Math.abs(risk);
    sumAsumAbsPercentMirrth.abs(erroriskequence.get(i).value);
    sumErrsSquashed+=risk * risk;
    processedPoints++;
  }
  this.blike=sumArr / processedPoints;
  this.mamadumAbsError / processedPoints;
  this.mMsssumAbsPercentMirr / processedPoints;
  this.msmmkeumErrsSquashed / processedPoints;
  this.sasaeumAbsError;
  errorsInit=true;
}",168,16,"initForecastErrors:initForecastingErings,data:sequence,sumErr:sumArr,sumAbsErr:sumAbsError,sumAbsPercentErr:sumAbsPercentMirr,sumErrSquared:sumErrsSquashed,error:risk,bias:blike,mape:Mss,mse:mmke,",1078,10.88,ALERT
1515,,,304,12,,4313,56.73891790310540,0
1516,,,27,2,,657,5.831476934750880,0
1517,"public boolean canRead(){
  return _is != null;
}
","public boolean CanRead(){
  return _is != null;
}
",12,1,"canRead:CanRead,",17,0.16,ALERT
1518,,,21,1,,434,4.057189226150510,0
1519,"public synchronized void deleteAllTables(){
  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());
  for (  String s : tableNames) {
    deleteTable(s);
  }
}
","public synchronized void deleteAllBables(){
  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());
  for (  String ops : tableNames) {
    deleteTable(ops);
  }
}
",41,3,"s:ops,deleteAllTables:deleteAllBables,",84,0.63,ALERT
1520,"protected final void fireVetoableChange(String propertyName,double oldValue,double newValue) throws PropertyVetoException {
  fireVetoableChange(propertyName,Double.valueOf(oldValue),Double.valueOf(newValue));
}
","protected final void fireVetoablesMove(String propertyType,double OldExp,double endVal) throws PropertyVetoException {
  fireVetoablesMove(propertyType,Double.valueOf(OldExp),Double.valueOf(endVal));
}
",37,4,"fireVetoableChange:fireVetoablesMove,propertyName:propertyType,oldValue:OldExp,newValue:endVal,",649,14.9,ALERT
1521,"public SpecificationRunnerBuilder sections(String[] paramSections){
  Collections.addAll(this.sections,paramSections);
  return this;
}
","public SpecificationRunnerBuilder run(String[] paramSriptions){
  Collections.addAll(this.run,paramSriptions);
  return this;
}
",25,2,"sections:run,paramSections:paramSriptions,",66,0.59,ALERT
1522,,,58,3,,999,12.957467444737800,0
1523,,,95,3,,1136,9.12582589785258,0
1524,"public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}
","public void send(final T resource){
synchronized (mLock) {
    mList.send(resource);
  }
  notifyDataSetChanged();
}
",27,2,"object:resource,add:send,",66,0.56,ALERT
1525,"private boolean isFieldPackagePrivate(Element attribute){
  Set<Modifier> modifiers=attribute.getModifiers();
  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);
}
","private boolean isFieldpackageComment(Element parent){
  Set<Modifiemutifiersers=parent.getModifiers();
  return !mutifiers.contains(PUBLIC) && !mutifiers.contains(PROTECTED) && !mutifiers.contains(PRIVATE);
}
",46,3,"isFieldPackagePrivate:isFieldpackageComment,attribute:parent,modifiers:mutifiers,",147,1.55,ALERT
1526,"private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}","private void fractMetmeta(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}",189,4,"fetchMetadata:fractMetmeta,",52,0.89,ALERT
1527,"public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
","public static <U>U syncRest(final Iterator<? extends Object> iterator,final Callable<U> task) throws Null {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
",66,2,"E:U,Exception:Null,",109,1.15,ALERT
1528,,,1225,18,,5285,71.4907064795494,0
1529,"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}","private String getWhile(char[] delimsner,boolean returnText) throws IOException, XmlPullParserException {
  int from=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimsner.length > limit) {
      if (from < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,from,position - from);
      }
      if (!fillBuffer(delimsner.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      from=position;
    }
    for (int i=0; i < delimsner.length; i++) {
      if (buffer[position + i] != delimsner[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimsner.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,from,end - from);
  }
 else {
    result.append(buffer,from,end - from);
    return result.toString();
  }
}",247,9,"start:from,delimiter:delimsner,readUntil:getWhile,",243,2.33,ALERT
1530,"public static void assertLabel(int[] path,String text){
  if (verbose) {
    log(""assertLabel("" + toString(path) + "", ""+ text+ "")"");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,""Null label"" + text);
  assertBool(text == l.getText() || text.equals(l.getText()),("""" + l.getText()) + "" != "" + text);
}
","public static void constructLab(int[] path,String off){
  if (verbose) {
    log(""assertLabel("" + toString(path) + "", ""+ off+ "")"");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,""Null label"" + off);
  assertBool(off == l.getText() || off.equals(l.getText()),("""" + l.getText()) + "" != "" + off);
}
",95,4,"text:off,assertLabel:constructLab,",121,1.12,ALERT
1531,,,114,7,,2006,34.88511865933740,0
1532,"@Override public boolean isComplete(){
  return true;
}
","@Override public boolean areCompleted(){
  return true;
}
",12,1,"isComplete:areCompleted,",17,0.13,ALERT
1533,"public static void writeResultToFile(Result result,String fname) throws Exception {
  PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname)));
  outer.write(result.toString());
  outer.close();
}
","public static void writeResponseFromFile(Result err,String fbpath) throws Exception {
  PrintWriter oresponsenew PrintWriter(new BufferedWriter(new FileWriter(fbpath)));
  outer.write(err.toString())responseter.write(err.toString());
  response.close();
}
",49,4,"writeResultToFile:writeResponseFromFile,result:err,fname:fbpath,outer:response,",408,3.11,ALERT
1534,"public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}","public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet ds=pstmt.executeQuery();
    while (ds.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,ds);
      listVO.add(vo);
    }
    ds.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}",252,14,"rs:ds,",79,2.22,ALERT
1535,"public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}
","public Subscription server(Object mBean,MBeanDescription description){
  return server(mBean,description.getMBeanName(getNextId()));
}
",27,3,"register:server,",38,0.27,ALERT
1536,"public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}
","public boolean writeSpecialistical(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluishGart=mBluetoothGattMap.get(address);
  if (bluishGart != null) {
    BluetoothGattService service=bluishGart.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic attributeistically=service.getCharacteristic(UUID.fromString(characteristicUUID));
    attributeistically.setValue(value);
    return bluishGart.writeSpecialistical(attributeistically);
  }
  return false;
}
",86,8,"bluetoothGatt:bluishGart,characteristic:attributeistically,writeCharacteristic:writeSpecialistical,",141,2.04,ALERT
1537,"void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
","void sendElement(BufferedWriter writ,String element) throws IOException {
  writ.write(element);
  writ.newLine();
}
",26,3,"writeLine:sendElement,writer:writ,line:element,",558,4.39,ALERT
1538,"public static Colour attemptToGetAsColour(String part){
  Colour col=null;
  try {
    col=Colour.valueOf(part.toUpperCase());
  }
 catch (  Exception e) {
  }
  return col;
}
","public static Colour attemptToGetAsColour(String Part){
  Colour col=null;
  try {
    col=Colour.valueOf(Part.toUpperCase());
  }
 catch (  Exception e) {
  }
  return col;
}
",41,3,"part:Part,",38,0.65,ALERT
1539,,,49,3,,1187,11.394149080912300,0
1541,"private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceSymbols=false;
  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {
    char c=text.charAt(i);
switch (c) {
case '\\t':
{
        hasTabs=true;
        if (hasNonSpaceSymbols) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceSymbols=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
}
","private int calculatePreferredTrapPosition(@NotNull Editor editor,@NotNull CharSequence ext,int tabSize,int spaceSize,int endLineOff,int endLineOffset,int targetRegionEndPoint){
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceGymbicles=false;
  loop:   for (int i=endLineOff; i < Math.min(endLineOffset,targetRegionEndPoint); i++) {
    char c=ext.charAt(i);
switch (c) {
case '\\t':
{
        hasTabs=true;
        if (hasNonSpaceGymbicles) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceGymbicles=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(endLineOff,endLineOffset,targetRegionEndPoint);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(ext,tabSize,endLineOff,endLineOffset,targetRegionEndPoint);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,ext,spaceSize,endLineOff,endLineOffset,targetRegionEndPoint);
}
}
",177,13,"startLineOffset:endLineOff,targetRangeEndOffset:targetRegionEndPoint,text:ext,hasNonSpaceSymbols:hasNonSpaceGymbicles,calculatePreferredWrapPosition:calculatePreferredTrapPosition,",382,6.16,ALERT
1542,,,35,4,,1506,16.989708586533900,0
1543,"@Override public Result doComparisonTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
","@Override public Result doComparatibilityReport(final Properties state) throws Exception {
  final Timeoutmeout=Long.parseLong(state.getProperty(TestOptions.TIMEOUT));
  finalnresultsurces=Integer.parseInt(state.getProperty(TestOptions.NRESOURCES));
  finalminSlockedLocks=Integer.parseInt(state.getProperty(TestOptions.MIN_LOCKS));
  finalmaxLolocksLocks=Integer.parseInt(state.getProperty(TestOptions.MAX_LOCKS));
  finalncrialsrials=Integer.parseInt(state.getProperty(TestOptions.NTRIALS));
  finalKeyMulteyLen=Integer.parseInt(state.getProperty(TestOptions.KEYLEN));
  finalnps nops=Integer.parseInt(state.getProperty(TestOptions.NOPS));
  final dofailureFactoreRate=Double.parseDouble(state.getProperty(TestOptions.FAILURE_RATE));
  Result resusuccessfuloncurrentClientTest(journal,Timeout,nresults,minSlocked,maxLolocks,ncrials,KeyMult,nps,failureFactor);
  return successful;
}
",185,11,"doComparisonTest:doComparatibilityReport,properties:state,timeout:Timeout,nresources:nresults,minLocks:minSlocked,maxLocks:maxLolocks,ntrials:ncrials,keyLen:KeyMult,nops:nps,failureRate:failureFactor,result:successful,",1381,22.98,ALERT
1544,"private Collection<String> readProcessOutput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
","private Collection<String> readConsoleInput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> response=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   response.add(s);
  return response;
}
",71,5,"readProcessOutput:readConsoleInput,res:response,",66,0.67,ALERT
1545,"private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
","private void scoreTrackerresults(Collection<Track> tags,SearchQuery query,Collection<ScoredResult> output){
  for (  Tractrackck : tags) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
",53,6,"scoreTrackResults:scoreTrackerresults,tracks:tags,",251,2.73,ALERT
1546,,,47,5,,1759,12.180660672982500,0
1547,"List<Entry> killAll(boolean rootIncluded){
  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}","List<Entry> killAll(boolean rootIncluded){
  List<Entry> nil=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int k=entries.size() - 1; k > (rootIncluded ? -1 : 0); k--) {
    entry=entries.get(k);
    if (entry.life)     continue;
    entry.life=true;
    if (k != 0) {
      nil.add(entry);
    }
  }
  return nil;
}",112,4,"i:k,dead:life,killed:nil,",107,1.13,ALERT
1548,"void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
","void clearicon(Graphics g,int Ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=Ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
",95,11,"drawIcon:clearicon,ax:Ax,",188,2.55,ALERT
1549,,,17,2,,767,5.249587698777520,0
1550,"public boolean remove(Object targetChild){
  return remove(targetChild,true);
}
","public boolean external(Object objChild){
  return external(objChild,true);
}
",17,2,"remove:external,targetChild:objChild,",101,0.92,ALERT
1552,"public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=universalId;
    String currentSvc="""";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent(""ATTEMPT_IDENTITY_UNASSIGN_SERVICE"",params);
        amid.unassignService(currentSvc);
        logEvent(""SUCCEED_IDENTITY_UNASSIGN_SERVICE"",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent(""IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}","public void unassignServices(String universalid,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=universalid;
    String currentSvc="""";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalid);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent(""ATTEMPT_IDENTITY_UNASSIGN_SERVICE"",params);
        amid.unassignService(currentSvc);
        logEvent(""SUCCEED_IDENTITY_UNASSIGN_SERVICE"",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={universalid,currentSvc,getErrorString(e)};
      logEvent(""SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={universalid,currentSvc,getErrorString(e)};
      logEvent(""IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE"",paramsEx);
      debug.warning(""EntitiesModelImpl.unassignServices"",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}",228,8,"universalId:universalid,",63,0.54,ALERT
1554,"@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
","@Override public void handleError(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e(""TrafficService"",""Error connecting: "" + exception.getMessage());
  onDisconnect(false);
}
",40,3,"onFailure:handleError,",22,0.41,ALERT
1555,"private static String computeRegexString(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}","private static String computeRegexNumber(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}",167,8,"computeRegexString:computeRegexNumber,",59,0.86,ALERT
1556,"@Override public Collection<SerialMessage> initialize(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {
    result.add(getSupportedMessage());
  }
  return result;
}","@Override public Collection<SerialMessage> initializing(boolean refresh){
  ArrayList<SerialMessage> resource=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {
    resource.add(getSupportedMessage());
  }
  return resource;
}",64,3,"result:resource,initialize:initializing,",79,0.7,ALERT
1557,"public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}
","public void detach(AppCompatActivity icon){
  attrViewMaps.remove(icon.hashCode());
}
",20,2,"activity:icon,",35,0.24,ALERT
1558,"public static boolean isUniqueContraintError(Exception e){
  if (DB.isPostgreSQL())   return isSQLState(e,""23505"");
  return isErrorCode(e,1);
}","public static boolean isUniqueContaintCode(Exception el){
  if (DB.isPostgreSQL())   return isSQLState(el,""23505"");
  return isErrorCode(el,1);
}",34,2,"e:el,isUniqueContraintError:isUniqueContaintCode,",47,0.63,ALERT
1559,"public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}","public static String enode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int uni=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[uni] & 0xff) << 16) | (int)((bytes[uni + 1] & 0xff) << 8) | (int)(bytes[uni + 2] & 0xff)),4));
    uni+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[uni] & 0xff) << 8) | ((bytes[uni + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[uni] & 0xff)),2));
  }
  return encoded.toString();
}",200,6,"encode:enode,i:uni,",135,1.38,ALERT
1560,,,26,3,,1163,17.92733468612040,0
1561,,,222,8,,2589,41.85358737707140,0
1562,,,101,5,,1806,14.294925626119000,0
1563,"private static final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {
  PublicKey key=null;
  try {
    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());
    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);
    key=keyFactory.generatePublic(keySpec);
  }
 catch (  NoSuchAlgorithmException nsae) {
    try {
      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);
      X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);
      key=keyFactory.generatePublic(keySpec);
    }
 catch (    NoSuchAlgorithmException nsae2) {
      throw new NoSuchAlgorithmException(""No installed providers "" + ""can create keys for the "" + encodedKeyAlgorithm + ""algorithm"");
    }
catch (    InvalidKeySpecException ikse2) {
      InvalidKeyException ike=new InvalidKeyException(""Cannot construct public key"");
      ike.initCause(ikse2);
      throw ike;
    }
  }
catch (  InvalidKeySpecException ikse) {
    InvalidKeyException ike=new InvalidKeyException(""Cannot construct public key"");
    ike.initCause(ikse);
    throw ike;
  }
  return key;
}","private static final PublicKey ConstructPublickey(byte[] encodePoint,String encodedByteEloding) throws InvalidKeyException, NoSuchAlgorithmException {
  PublicKey e=null;
  try {
    KeyFactorykeyServicey=KeyFactory.getInstance(encodedByteEloding,SunJCE.getInstance());
    X509EncodedKeySpec kcheckspecnew X509EncodedKeySpec(encodePoint);
    e=keyService.generatePublic(checkspec);
  }
 catch (  NoSuchAlgorithmException nsae) {
    try {
      KeyFactorykeyServicey=KeyFactory.getInstance(encodedByteEloding);
      X509EncodedKeySpec kcheckspecnew X509EncodedKeySpec(encodePoint);
      e=keyService.generatePublic(checkspec);
    }
 catch (    NoSuchAlgorithmException nsae2) {
      throw new NoSuchAlgorithmException(""No installed providers "" + ""can create keys for the "" + encodedByteEloding + ""algorithm"");
    }
catch (    InvalidKeySpecException ikse2) {
      InvalidKeyException ci=new InvalidKeyException(""Cannot construct public key"");
      ci.initCause(ikse2);
      throw ci;
    }
  }
catch (  InvalidKeySpecException ikse) {
    InvalidKeyException ci=new InvalidKeyException(""Cannot construct public key"");
    ci.initCause(ikse);
    throw ci;
  }
  return e;
}",175,7,"constructPublicKey:ConstructPublickey,encodedKey:encodePoint,encodedKeyAlgorithm:encodedByteEloding,key:e,keyFactory:keyService,keySpec:checkspec,ike:ci,",784,9.87,ALERT
1565,,,14,1,,440,3.7883620738983200,0
1567,"private void fillPicks() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup(""M_Warehouse_ID"",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),""M_Warehouse_ID""));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup(""C_BPartner_ID"",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),""C_BPartner_ID""));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),""C_DocType_ID""));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),""Order"")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),""VendorRMA"")));
  cmbDocType.addActionListener(this);
}","private void fillTicker() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup(""M_Warehouse_ID"",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),""M_Warehouse_ID""));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup(""C_BPartner_ID"",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),""C_BPartner_ID""));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),""C_DocType_ID""));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),""Order"")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),""VendorRMA"")));
  cmbDocType.addActionListener(this);
}",224,6,"fillPicks:fillTicker,",36,0.41,ALERT
1569,"public static Test suite() throws Exception {
  return suite(true);
}
","public static Test Suites() throws Exception {
  return Suites(true);
}
",16,1,"suite:Suites,",32,0.38,ALERT
1570,"private boolean activeListHasRoom(){
  int maxDownloads=1;
  return mActiveList.size() < maxDownloads;
}","private boolean activelistHasMax(){
  int maxdownloadd=1;
  return mActiveList.size() < maxdownloadd;
}",21,2,"activeListHasRoom:activelistHasMax,maxDownloads:maxdownloadd,",113,1.38,ALERT
1571,,,398,10,,2306,22.158874746163700,0
1572,"public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}","public static double variancy(double[] m,double mean){
  double attr=0;
  int count=m.length;
  for (  double aX : m) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      attr+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return attr / (double)count;
}",95,7,"x:m,var:attr,variance:variancy,",219,2.28,ALERT
1573,,,14,1,,455,3.384706993897760,0
1574,"@Override public void write(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}","@Override public void r(char ci[],int off,int split){
  if ((ofoff 0) || (ofoff ci.length) || (lsplit< 0)|| ((ooff+ lsplit > ci.length)|| ((off + split) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (split == 0) {
    return;
  }
  int nenewcountofull split;
  if (newcount > p.length) {
    p=Arrays.copyOf(p,Math.max(p.length << 1,newcount));
  }
  System.arraycopy(ci,off,bupofullplit);
  full=newcount;
}",140,7,"write:r,c:ci,len:split,buf:p,count:full,",364,5.08,ALERT
1575,"private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (entry.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(entry.getSequence(),null);
  }
 else {
    indexQuery(entry,future);
  }
}
","private void queueRequest(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (entry.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(entry.getSequence(),null);
  }
 else {
    indexQuery(entry,future);
  }
}
",57,4,"sequenceQuery:queueRequest,",22,0.23,ALERT
1576,"public PutRepositoryRequest source(byte[] repositoryDefinition){
  return source(repositoryDefinition,0,repositoryDefinition.length);
}","public PutRepositoryRequest store(byte[] repoositoryDefinition){
  return store(repoositoryDefinition,0,repoositoryDefinition.length);
}",23,2,"source:store,repositoryDefinition:repoositoryDefinition,",115,1.02,ALERT
1577,"private String attachFooterToText(String content) throws MessagingException, IOException {
  StringBuilder builder=new StringBuilder(content);
  ensureTrailingCarriageReturn(content,builder);
  builder.append(getFooterText());
  return builder.toString();
}
","private String appendFooterAsString(String content) throws MessagingException, HttpProblem {
  StringBuilder builder=new StringBuilder(content);
  ensureTrailingCarriageReturn(content,builder);
  builder.append(getFooterText());
  return builder.toString();
}
",45,4,"IOException:HttpProblem,attachFooterToText:appendFooterAsString,",41,0.33,ALERT
1578,"public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}","public static void readffully(InputStream in,byte ff[],int offs,int len) throws IOException {
  int toSkip=len;
  while (toSkip > 0) {
    int rt=in.read(ff,offs,toSkip);
    if (rt < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toSkip-=rt;
    offs+=rt;
  }
}",73,7,"toRead:toSkip,ret:rt,off:offs,buf:ff,readFully:readffully,",221,2.94,ALERT
1579,,,110,7,,2132,18.721766646703100,0
1580,,,14,1,,427,3.6307369033495600,0
1581,"protected void parseDOMAttributes(Element element) throws SAML2Exception {
  requestId=element.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=element.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);
  consent=element.getAttribute(SAML2Constants.CONSENT);
}","protected void parseHTMLRelations(Element ele) throws SAML2Exception {
  requestId=ele.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=ele.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String changeInstantStruct=ele.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(changeInstantStruct);
  destinationURI=ele.getAttribute(SAML2Constants.DESTINATION);
  consent=ele.getAttribute(SAML2Constants.CONSENT);
}",82,7,"element:ele,issueInstantStr:changeInstantStruct,parseDOMAttributes:parseHTMLRelations,",146,1.35,ALERT
1582,"public void reset(){
  ns.removeAllElements();
  ks.setLength(0);
  cur=tt.root;
  run();
}","public void empty(){
  ns.removeAllElements();
  ks.setLength(0);
  Cur=tt.root;
  run();
}",30,2,"cur:Cur,reset:empty,",60,0.5,ALERT
1583,"public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
","public static String suraround(String p,String append,String suffension){
  if (p.startsWith(append) == false) {
 appendrefix + p;
  }
  if (p.endsWith(suffension) == false) {
    p+=suffension;
  }
  return p;
}
",55,4,"surround:suraround,string:p,prefix:append,suffix:suffension,",182,1.8,ALERT
1584,,,63,5,,1205,9.628071276346840,0
1585,"private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
","private void copyACLs(List<UnManagedCifsShareACL> origACCLlist,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACCLlist) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
",120,6,"origACLList:origACCLlist,",52,0.6,ALERT
1586,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D agraphic=(Graphics2D)g;
  agraphic.setBackground(mColorSpectrumBackground);
  RenderingHints renderSwings=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderSwings.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  agraphic.setRenderingHints(renderSwings);
  drawFrequencies(agraphic);
  drawCursor(agraphic);
}",78,4,"graphics:agraphic,renderHints:renderSwings,",105,0.87,ALERT
1587,,,189,8,,2800,30.206687072912900,0
1588,"public void reclaimViews(List<View> views){
  int childCount=getChildCount();
  RecyclerListener listener=mRecycler.mRecyclerListener;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {
      views.add(child);
      if (listener != null) {
        listener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(views);
  removeAllViewsInLayout();
}","public void reclaimContextTypes(List<View> ions){
  int childCount=getChildCount();
  RecyclerListener opener=mRecycler.mRecyclerListener;
  for (int ni=0; ni < childCount; ni++) {
    View child=getChildAt(ni);
    TwoWayAbsListView.LayoutParams wp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (wp != null && mRecycler.shouldRecycleViewType(wp.viewType)) {
      ions.add(child);
      if (opener != null) {
        opener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(ions);
  removeAllViewsInLayout();
}",116,7,"i:ni,views:ions,lp:wp,listener:opener,reclaimViews:reclaimContextTypes,",215,7.29,ALERT
1589,,,42,2,,391,3.633748439947760,0
1590,,,26,2,,662,5.902913312117260,0
1591,"public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
","public static String format(char[] e,String collatter){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (collatter == null)   collatter="""";
  for (  char page : e) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(collatter);
    }
    buffer.append(page);
  }
  return buffer.toString();
}
",81,6,"separator:collatter,next:page,self:e,join:format,",194,2.75,ALERT
1592,"public synchronized boolean removeAll(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}","public synchronized boolean removeNone(Collection C){
  Object[] eresses=getArray();
  intsln=eresses.length;
  if (sl != 0) {
    int newLen=0;
    Object[]zipp=new Object[sl];
    for (intni=0;ni < sl; ++n) {
      Objectservert=eresses[n];
      if (!C.containsservert))       zip[newLen++]=server;
    }
    if newLenn != sl) {
      setArray(copyOfRange(zip,0,newLen,Object[].class));
      return true;
    }
  }
  return false;
}",124,8,"removeAll:removeNone,c:C,elements:eresses,len:sl,newlen:newLen,temp:zip,i:n,element:server,",567,5.52,ALERT
1593,"@Override public Instances defineDataFormat() throws Exception {
  ArrayList<Attribute> atts;
  ArrayList<String> attValues;
  int i;
  m_Random=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m_lastLabel=Double.NaN;
  setNumExamplesAct(getNumExamples());
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""salary""));
  atts.add(new Attribute(""commission""));
  atts.add(new Attribute(""age""));
  attValues=new ArrayList<String>();
  for (i=0; i < 5; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""elevel"",attValues));
  attValues=new ArrayList<String>();
  for (i=1; i <= 20; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""car"",attValues));
  attValues=new ArrayList<String>();
  for (i=0; i < 9; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""zipcode"",attValues));
  atts.add(new Attribute(""hvalue""));
  atts.add(new Attribute(""hyears""));
  atts.add(new Attribute(""loan""));
  attValues=new ArrayList<String>();
  for (i=0; i < 2; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""group"",attValues));
  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);
  return m_DatasetFormat;
}","@Override public Instances getDataPoint() throws Exception {
  ArrayList<Attribute> states;
  ArrayList<String> aptSettings;
  int fi;
  m__Random=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m___totalLab=Double.NaN;
  setNumExamplesAct(getNumExamples());
  states=new ArrayList<Attribute>();
  states.add(new Attribute(""salary""));
  states.add(new Attribute(""commission""));
  states.add(new Attribute(""age""));
  aptSettings=new ArrayList<String>();
  for (fi=0; fi < 5; fi++) {
    aptSettings.add("""" + fi);
  }
  states.add(new Attribute(""elevel"",aptSettings));
  aptSettings=new ArrayList<String>();
  for (fi=1; fi <= 20; fi++) {
    aptSettings.add("""" + fi);
  }
  states.add(new Attribute(""car"",aptSettings));
  aptSettings=new ArrayList<String>();
  for (fi=0; fi < 9; fi++) {
    aptSettings.add("""" + fi);
  }
  states.add(new Attribute(""zipcode"",aptSettings));
  states.add(new Attribute(""hvalue""));
  states.add(new Attribute(""hyears""));
  states.add(new Attribute(""loan""));
  aptSettings=new ArrayList<String>();
  for (fi=0; fi < 2; fi++) {
    aptSettings.add("""" + fi);
  }
  states.add(new Attribute(""group"",aptSettings));
  m_DatasetFormat=new Instances(getRelationNameToUse(),states,0);
  return m_DatasetFormat;
}",334,7,"defineDataFormat:getDataPoint,atts:states,attValues:aptSettings,i:fi,m_Random:m__Random,m_lastLabel:m___totalLab,",557,4.2,ALERT
1594,,,46,3,,484,4.152974538008370,0
1595,,,27,2,,786,7.2319474975268000,0
1596,"public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}","public SimpleString concat(final char m){
  byte[] letters=new byte[lines.length + 2];
  System.arraycopy(lines,0,letters,0,lines.length);
  letters[lines.length]=(byte)(m & 0xFF);
  letters[lines.length + 1]=(byte)(m >> 8 & 0xFF);
  return new SimpleString(letters);
}",86,5,"c:m,bytes:letters,data:lines,",155,1.53,ALERT
1597,,,20,2,,791,9.60918443997701,0
1598,"public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
","public <T>List<String> validateBean(T object,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (object == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(object);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
",92,6,"bean:object,",47,1.39,ALERT
1599,,,20,1,,396,3.8872702797253900,0
1600,"private String applyReplacement(final BidiMap replacement,String contents){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}
","private String applyReplacement(final BidiMap constacement,String contents){
  for (  Object key : constacement.keySet()) {
    String attributeName=(String)key;
    String attributeinitializes=(String)constacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeinitializes));
  }
  return contents;
}
",71,6,"attributeInitials:attributeinitializes,replacement:constacement,",70,1.79,ALERT
1601,"private void addFlags(int newflags){
  flags=getLayoutFlags() | newflags;
}
","private void applyFlag(int newflags){
  flags=getLayoutFlags() | newflags;
}
",17,3,"addFlags:applyFlag,",47,0.35,ALERT
1602,,,42,3,,875,10.78031140168510,0
1603,"private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}","private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLetteross){
  while (lastReferenceSequence <= stopBeforeLetteross.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLetteross.getSequenceIndex() && lastPosition + 1 >= stopBeforeLetteross.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLetteross.getSequenceIndex()) {
        lastPosition=stopBeforeLetteross.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLetteross.getSequenceIndex() || nextbit < stopBeforeLetteross.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLetteross.getPosition()) {
      return null;
    }
  }
  return null;
}",163,5,"stopBeforeLocus:stopBeforeLetteross,",61,1.56,ALERT
1604,"private void connect() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.connect(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
","private void Connect() throws IOException {
  JMXServiceURL jMXServer=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.Connect(jMXServer,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName module=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,module,StorageServiceMBean.class);
    module=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,module,MessagingServiceMBean.class);
    module=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,module,StreamManagerMBean.class);
    module=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,module,CompactionManagerMBean.class);
    module=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,module,FailureDetectorMBean.class);
    module=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,module,CacheServiceMBean.class);
    module=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,module,StorageProxyMBean.class);
    module=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,module,HintedHandOffManagerMBean.class);
    module=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,module,GCInspectorMXBean.class);
    module=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,module,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
",407,15,"name:module,jmxUrl:jMXServer,connect:Connect,",233,1.82,ALERT
1605,"public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storedAuthTag=atagList.get(chunkIdx);
    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}","public synchronized boolean verifyChunkFattag(int chunkidxs,byte[] chunkBlockTag) throws FileEncryptionException {
  if ((chunkidxs < 0) || (chunkBlockTag == null) || (chunkBlockTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storeAuthFile=atagList.get(chunkidxs);
    if (storeAuthFile == null || !Arrays.equals(chunkBlockTag,storeAuthFile)) {
      return false;
    }
 else {
      return true;
    }
  }
}",92,4,"verifyChunkAuthTag:verifyChunkFattag,chunkAuthTag:chunkBlockTag,chunkIdx:chunkidxs,storedAuthTag:storeAuthFile,",114,1.87,ALERT
1606,"private Instance votedReclassifyExample(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}","private Instance votedReclassifiExperience(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception(""Error in instance classification."");
  }
  return example;
}",190,9,"votedReclassifyExample:votedReclassifiExperience,",62,0.58,ALERT
1607,"private boolean checkIfScrolling(float[] lastPoints,MotionEvent ev){
  float[] point=new float[2];
  point[0]=ev.getRawX();
  point[1]=ev.getRawY();
  float delta=getDistance(lastPoints,point);
  return Math.abs(delta) > mSlop;
}","private boolean checkIfScoring(float[] lastPoints,MotionEvent ev){
  float[] point=new float[2];
  point[0]=ev.getRawX();
  point[1]=ev.getRawY();
  float dity=getDistance(lastPoints,point);
  return Math.abs(dity) > mSlop;
}",67,5,"delta:dity,checkIfScrolling:checkIfScoring,",54,0.87,ALERT
1608,"public static int copyAndCloseOutput(Reader input,Writer output) throws IOException {
  try {
    return copy(input,output);
  }
  finally {
    output.close();
  }
}
","public static int copyAndEndError(Reader instance,Writer client) throws IOException {
  try {
    return copy(instance,client);
  }
  finally {
    client.close();
  }
}
",35,3,"copyAndCloseOutput:copyAndEndError,input:instance,output:client,",403,4.93,ALERT
1609,"protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}","protected void handleMESoJob(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}",102,6,"handleMesosFailure:handleMESoJob,",42,0.42,ALERT
1610,"public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
","public static String makeNewSocketid(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
",37,3,"makeRelatedSessionID:makeNewSocketid,",32,0.31,ALERT
1611,"private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(oValue);
  md5.update((byte)(pValue & 0xFF));
  md5.update((byte)((pValue >> 8) & 0xFF));
  md5.update((byte)((pValue >> 16) & 0xFF));
  md5.update((byte)(pValue >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}","private byte[] calculateGeneralEncSecretKeys(byte[] userPassword,byte[] firstDocInfoValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest mag5=createMD5Digest();
  mag5.reset();
  mag5.update(paddedPassword);
  mag5.update(oValue);
  mag5.update((byte)(pValue & 0xFF));
  mag5.update((byte)((pValue >> 8) & 0xFF));
  mag5.update((byte)((pValue >> 16) & 0xFF));
  mag5.update((byte)(pValue >> 24));
  if (firstDocInfoValue != null) {
    mag5.update(firstDocInfoValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      mag5.update((byte)0xFF);
    }
  }
  byte[] hash=mag5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      mag5.update(hash,0,key.length);
      digestTo(mag5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}",297,14,"md5:mag5,firstDocIdValue:firstDocInfoValue,calculateGeneralEncryptionKey:calculateGeneralEncSecretKeys,",411,5.69,ALERT
1612,"public static Map<String,String> createBasicAuthHeader(String username,String password,Map<String,String> headerMap){
  if (headerMap == null)   headerMap=new HashMap<>();
  String credentials=username + "":"" + password;
  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);
  headerMap.put(""Authorization"",""Basic "" + base64EncodedCredentials);
  return headerMap;
}","public static Map<String,String> createBasicRequestResponse(String username,String password,Map<String,String> HeaderInfo){
  if (HeaderInfo == null)   HeaderInfo=new HashMap<>();
  String credentials=username + "":"" + password;
  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);
  HeaderInfo.put(""Authorization"",""Basic "" + base64EncodedCredentials);
  return HeaderInfo;
}",82,6,"headerMap:HeaderInfo,createBasicAuthHeader:createBasicRequestResponse,",184,2.47,ALERT
1613,"private static int labelEnd(String s){
  int colonIndex=s.indexOf("":"");
  int semicolonIndex=s.indexOf("";"");
  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {
    return colonIndex;
  }
 else {
    return -1;
  }
}","private static int labelEnd(String s){
  int colronStep=s.indexOf("":"");
  int semicolonIndex=s.indexOf("";"");
  if ((semicolonIndex == -1) || (colronStep < semicolonIndex)) {
    return colronStep;
  }
 else {
    return -1;
  }
}",57,4,"colonIndex:colronStep,",72,0.9,ALERT
1614,,,71,5,,1150,13.78589370250700,0
1615,"public void removeChild(Group theGroup){
  mChildren.remove(theGroup);
}
","public void addchild(Group thatChild){
  mChildren.remove(thatChild);
}
",16,2,"removeChild:addchild,theGroup:thatChild,",92,0.6,ALERT
1616,"public static boolean isDigitalUnix(){
  return osName.indexOf(""Digital Unix"") > -1;
}","public static boolean isDigitaliOS(){
  return osName.indexOf(""Digital Unix"") > -1;
}",19,1,"isDigitalUnix:isDigitaliOS,",13,0.1,ALERT
1617,"public static String toTypeString(Object[] arguments,int maxSize){
  if (arguments == null) {
    return ""null"";
  }
  StringBuilder argBuf=new StringBuilder();
  for (int i=0; i < arguments.length; i++) {
    if (maxSize != -1 && argBuf.length() > maxSize) {
      argBuf.append(""..."");
      break;
    }
 else {
      if (i > 0) {
        argBuf.append("", "");
      }
      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : ""null"");
    }
  }
  return argBuf.toString();
}","public static String toTemplateString(Object[] argls,int maxsize){
  if (argls == null) {
    return ""null"";
  }
  StringBuilder argBraw=new StringBuilder();
  for (int ii0; i < argls.length; i++) {
    if (maxsize != -1 && argBraw.length() > maxsize) {
      argBraw.append(""..."");
      break;
    }
 else {
      if (i > 0) {
        argBraw.append("", "");
      }
      argBuf.append(argis[i] != null ? typeName(argls[ii) : ""null""argBraw  argBuf.append(argls[i] != null ? typeName(argls[i]) : ""null"");
    }
  }
  return argBraw.toString();
}",125,5,"toTypeString:toTemplateString,arguments:argls,maxSize:maxsize,argBuf:argBraw,",225,2.14,ALERT
1618,"@Get public Representation userCodeForm() throws OAuth2RestletException, InvalidGrantException, NotFoundException, ServerException {
  final OAuth2Request request=requestFactory.create(getRequest());
  if (request.getParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) {
    return verify(null);
  }
 else {
    return getTemplateRepresentation(FORM,request,null);
  }
}","@Get public Representation userNameForm() throws OAuth2RestletException, UnknownTokenEx, NotVersionExcept, IOException {
  final OAuth2Request report=requestFactory.create(getRequest());
  if (report.getParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) {
    return verify(null);
  }
 else {
    return getTemplateRepresentation(FORM,report,null);
  }
}",66,5,"userCodeForm:userNameForm,InvalidGrantException:UnknownTokenEx,NotFoundException:NotVersionExcept,ServerException:IOException,request:report,",400,4.94,ALERT
1619,,,24,1,,424,3.1744269847869900,0
1620,,,168,8,,2821,27.02487739721930,0
1621,"public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}","public void closed(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.closed();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}",65,1,"close:closed,",34,0.28,ALERT
1622,"public TSink<byte[]> sendBytes(TStream<byte[]> stream){
  Objects.requireNonNull(stream,""stream"");
  return sendBinary(stream,null);
}
","public TSink<byte[]> transferBytes(TStream<byte[]> src){
  Objects.requireNonNull(src,""stream"");
  return sendBinary(src,null);
}
",36,2,"stream:src,sendBytes:transferBytes,",51,0.39,ALERT
1623,"public void addToBeLoaded(final String url){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(url)) {
    toBeLoaded.add(url);
  }
}
","public void addToBeingLoadored(final String href){
  if (toBeLinkced == null) {
    toBeLinkced=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(href)) {
    ttoBeLinkcedadd(href);
  }
}
",46,3,"addToBeLoaded:addToBeingLoadored,url:href,toBeLoaded:toBeLinkced,",187,1.78,ALERT
1624,"public boolean isEmpty(){
  return rdns.isEmpty();
}
","public boolean hasSize(){
  return rdns.hasSize();
}
",14,1,"isEmpty:hasSize,",24,0.21,ALERT
1625,,,245,12,,4132,76.54832986990610,0
1626,"public void handleText(String text){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= text.length()) {
      skippingCharacters-=text.length();
      return;
    }
 else {
      text=text.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleText(text);
    return;
  }
  warning(""Text with no destination. oops."");
}","public void parseString(String title){
  if (kiningThings > 0) {
    if (skiningThings>= title.length()) {
      skiningThings=title.length();
      return;
    }
 else {
      title=title.substring(kiningThings);
      kiningThings=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.parseString(title);
    return;
  }
  warning(""Text with no destination. oops."");
}",77,3,"handleText:parseString,text:title,skippingCharacters:kiningThings,",464,4.85,ALERT
1627,,,21,2,,689,7.590851100285850,0
1628,"@Override public <T>Future<T> submit(Callable<T> task){
synchronized (this) {
    active.incrementAndGet();
    long timeout=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (timeout <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          timeout+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException(""Timed out because TPE is too busy..."");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.submit(task);
  }
}","@Override public <T>Future<T> call(Callable<T> execute){
synchronized (this) {
    active.incrementAndGet();
    long window=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (window <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          window+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException(""Timed out because TPE is too busy..."");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.call(execute);
  }
}",103,3,"timeout:window,task:execute,submit:call,",99,0.85,ALERT
1629,"public void removeBiomeType(BiomeDictionary.Type type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
","public void removeBiOMEClass(BiomeDictionary.Type source){
  ArrayList<BiomeGenBase> Entrylist=new ArrayList<BiomeGenBase>();
  Entrylist.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(source)));
  for (  BiomeGenBase abiomes : Entrylist) {
    Iterator<BiomeEntry> loader=allowedBiomes.loader();
    while (loader.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(loader.next().abiomes,abiomes))       loader.remove();
    }
  }
}
",96,5,"iterator:loader,entryList:Entrylist,type:source,biome:abiomes,removeBiomeType:removeBiOMEClass,",157,1.64,ALERT
1630,"public void uncompress(){
  data.position(0);
  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());
  byte[] buffer=new byte[8192];
  IoBuffer tmp=IoBuffer.allocate(0);
  tmp.setAutoExpand(true);
  try {
    while (inflater.available() > 0) {
      int decompressed=inflater.read(buffer);
      if (decompressed <= 0) {
        break;
      }
      tmp.put(buffer,0,decompressed);
    }
  }
 catch (  IOException e) {
    tmp.free();
    throw new RuntimeException(""could not uncompress data"",e);
  }
 finally {
    if (inflater != null) {
      try {
        inflater.close();
      }
 catch (      IOException e1) {
      }
    }
  }
  data.free();
  data=tmp;
  data.flip();
  prepareIO();
}","public void uncompress(){
  data.position(0);
  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());
  byte[] buffer=new byte[8192];
  IoBuffer tf=IoBuffer.allocate(0);
  tf.setAutoExpand(true);
  try {
    while (inflater.available() > 0) {
      int decompressed=inflater.read(buffer);
      if (decompressed <= 0) {
        break;
      }
      tf.put(buffer,0,decompressed);
    }
  }
 catch (  IOException e) {
    tf.free();
    throw new RuntimeException(""could not uncompress data"",e);
  }
 finally {
    if (inflater != null) {
      try {
        inflater.close();
      }
 catch (      IOException e1) {
      }
    }
  }
  data.free();
  data=tf;
  data.flip();
  prepareIO();
}",170,6,"tmp:tf,",55,0.55,ALERT
1632,,,112,7,,2495,17.209216447671300,0
1633,"@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}","@Override public void MakeImmutation(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.MakeImmutation();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.MakeImmutation();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.MakeImmutation();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.MakeImmutation();
    }
    if (issuer != null) {
      issuer.MakeImmutation();
    }
    if (subject != null) {
      subject.MakeImmutation();
    }
    if (advice != null) {
      advice.MakeImmutation();
    }
    isMutable=false;
  }
}",275,10,"makeImmutable:MakeImmutation,",112,1.58,ALERT
1635,"protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","protected void publish() throws MqttException, IOException {
  exampleCodpub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (exampleCodpub != null) {
    String header=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      exampleCodpub.publish(header,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",83,6,"sampleClientPub:exampleCodpub,topic:header,",75,0.84,ALERT
1636,"public static byte[] select(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return select(cardletAid);
}
","public static byte[] select(String projectId,String infendix){
  String cardletAid=FIDESMO_AID_PREFIX + projectId + infendix;
  return select(cardletAid);
}
",30,4,"appId:projectId,suffix:infendix,",58,0.89,ALERT
1637,,,19,1,,403,2.8731520136197400,0
1638,"private void fieldGoalAtt(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}","private void fieldGoalAtt(Team offensive,Team def){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgfgAccHalfgetHFadv() + offensive.getK(0).ratKickPow - fgDistRatio * 80);
  double fgfgAccChancegetHFadv() + offensive.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgAccHalf > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwaysNStats[3]++;
      AwaysNStats[2]++;
    }
    gamegameGameListtEventPrefix() + offensive.abbr + "" K ""+ offensive.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offensive.getK(0).statsFGMade++;
    offensive.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offensive);
 else     resetForOT();
  }
 else {
    gamegameGameListtEventPrefix() + offensive.abbr + "" K ""+ offensive.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offensive.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwaysNStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}",329,20,"offense:offensive,defense:def,fgDistChance:fgAccHalf,AwayKStats:AwaysNStats,gameEventLog:gameGameList,",755,8.05,ALERT
1639,"@After public void clean(){
  mute(null);
  mute(null);
  mute(null);
}
","@After public void run(){
  mute(null);
  mute(null);
  mute(null);
}
",24,1,"clean:run,",31,0.25,ALERT
1640,"public List<Instruction> reduceInstructions(final List<Instruction> instructions){
  lock.lock();
  try {
    this.instructions=instructions;
    stackSizeSimulator.buildStackSizes(instructions);
    return reduceInstructionsInternal(instructions);
  }
  finally {
    lock.unlock();
  }
}
","public List<Instruction> reddownSTRUCTures(final List<Instruction> insemptors){
  lock.lock();
  try {
    this.insemptors=insemptors;
    stackSizeSimulator.buildStackSizes(insemptors);
    return reduceInstructionsInternal(insemptors);
  }
  finally {
    lock.unlock();
  }
}
",53,2,"reduceInstructions:reddownSTRUCTures,instructions:insemptors,",111,1.39,ALERT
1641,"protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}","protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String parent : blobs.keySet()) {
    if (parent.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(parent.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",parent);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String parent : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (parent.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,parent);
      }
 else       if (parent.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,parent);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,parent);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}",295,7,"name:parent,",67,1.53,ALERT
1642,,,16,2,,774,5.9690855304400100,0
1643,,,19,2,,760,10.735210752487200,0
1644,"public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);
  futureMap.put(Integer.valueOf(xid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(request);
  return future;
}
","public Future<SyncReply> writeRequest(int xoid,SyncMessage event) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture fhandlernew RemoteSyncFuture(xoid,connectionGeneration);
  futureMap.put(Integer.valueOf(xoid),handler);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(event);
  return handler;
}
",111,4,"sendRequest:writeRequest,xid:xoid,request:event,future:handler,",267,3.17,ALERT
1645,"public static Object extractTypeChecked(List<Object> args,int i,Class clazz,Function<List<Object>,Object> extractFunc){
  if (args.size() < i + 1) {
    return null;
  }
 else   if (clazz.isInstance(args.get(i))) {
    return extractFunc.apply(args);
  }
 else {
    return null;
  }
}","public static Object extractTypeWorkED(List<Object> args,int multi,Class clazz,Function<List<Object>,Object> extractFunnc){
  if (args.size() < multi + 1) {
    return null;
  }
 else   if (clazclazznstance(args.get(multi))) {
    return extractFunnc.apply(args);
  }
 else {
    return null;
  }
}",78,4,"extractTypeChecked:extractTypeWorkED,i:multi,extractFunc:extractFunnc,",231,2.67,ALERT
1646,"@SuppressWarnings(""unchecked"") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){
  if (styleName == null || enumClass == null) {
    return defaultValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return defaultValue;
}
","@SuppressWarnings(""unchecked"") public static <EO extends Enum<? extends Style.HasCssName>>EO fromStyleName(final String styleName,final Class<EO> enumClass,final EO defaultValue){
  if (styleName == null || enumClass == null) {
    return defaultValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String csclass=anEnum.getCssName();
    if (csclass != null && StyleHelper.containsStyle(styleName,csclass)) {
      return (EO)anEnum;
    }
  }
  return defaultValue;
}
",124,4,"E:EO,cssClass:csclass,",105,2.17,ALERT
1647,"public boolean remove(String word){
  return m_Words.remove(word);
}
","public boolean del(String rule){
  return m_Words.del(rule);
}
",17,2,"remove:del,word:rule,",66,0.78,ALERT
1648,"public void sort(Comparator<Individual> comparator){
  Collections.sort(individuals,comparator);
}
","public void iter(Comparator<Individual> compolinator){
  Collections.iter(individuals,compolinator);
}
",21,2,"sort:iter,comparator:compolinator,",309,2.79,ALERT
1649,"public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public TermsAckParser init() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.init(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:init,",127,0.64,ALERT
1650,,,26,2,,641,7.914031517505650,0
1651,"public void sleepMillis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
","public void sleepMilic(final long multiplisec){
  try {
    Thread.sleep(multiplisec);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
",37,2,"sleepMillis:sleepMilic,millis:multiplisec,",303,2.61,ALERT
1652,"public static String removeFormatting(String line){
  int length=line.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=line.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}","public static String stripFormatting(String str){
  int length=str.length();
  StringBuilder view=new StringBuilder();
  for (int i=0; i < length; i++) {
    char chunk=str.charAt(i);
    if (chunk != '\\u000f' && chunk != '\\u0002' && chunk != '\\u001f' && chunk != '\\u0016')     view.append(chunk);
  }
  return view.toString();
}",85,6,"ch:chunk,buffer:view,line:str,removeFormatting:stripFormatting,",195,1.63,ALERT
1653,"private void updateStatus(String relayState,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relayState);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relayState,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relayState,new Integer(currentStatus));
}
}
","private void UpdateStats(String relarestate,int currentSummary){
  Integer tnp(Integer)currentStatusMap.get(relarestate);
  if (np != null) {
    intpreventStates=np.intValue();
switch (preventState) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentSummary > preventState) {
        currentStatusMap.put(relarestate,new Integer(currentSummary));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentSummary < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relarestate,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relarestate,new Integer(currentSummary));
}
}
",120,5,"updateStatus:UpdateStats,relayState:relarestate,currentStatus:currentSummary,tmp:np,previousStatus:preventState,",621,6.83,ALERT
1654,"private void registerProviders(){
  final DevMachine devMachine=appContext.getDevMachine();
  if (devMachine == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devMachine);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}
","private void registerProviders(){
  final DevMachine advmachine=appContext.getDevMachine();
  if (advmachine == null) {
    return;
  }
  final Set<Macro> provients=getMacros(advmachine);
  checkNotNull(provients);
  if (provients.isEmpty()) {
    return;
  }
  providerRegistry.register(provients);
}
",63,3,"devMachine:advmachine,providers:provients,",70,0.72,ALERT
1655,,,408,3,,1165,41.103286095460300,0
1658,"@Override public Instance remove(int index){
  return m_Instances.remove(index);
}
","@Override public Instance un(int path){
  return m_Instances.un(path);
}
",19,2,"remove:un,index:path,",68,0.48,ALERT
1659,"@Override public void visitVertex(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}","@Override public void visitverice(StreetRouter.State set){
  Integer edgeIdx=set.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature document=new GeoJsonFeature(edge.getGeometry());
    document.addProperty(""weight"",set.weight);
    document.addProperty(""mode"",set.streetMode);
    document.addProperty(""backEdge"",set.backEdge);
    features.add(document);
  }
}",101,5,"feature:document,state:set,visitVertex:visitverice,",162,1.37,ALERT
1660,"protected boolean attemptToAddWord(Word word){
  double additionalLength=word.getWordWidth();
  additionalLength+=!words.isEmpty() ? spaceSize : 0;
  if (currentLineLength + additionalLength <= maxLength || maxLength == -1) {
    words.add(word);
    currentLineLength+=additionalLength;
    return true;
  }
 else {
    return false;
  }
}","protected boolean attemptToAddedword(Word object){
  double adadditiveWidthbject.getWordWidth();
  additiveWidth+=!words.isEmpty() ? spaceSize : 0;
  icurrentTextOffsetgth + additiveWidth <= maxLength || maxLength == -1) {
    words.add(object);
 currentTextOffsetgth+=additiveWidth;
    return true;
  }
 else {
    return false;
  }
}",66,4,"attemptToAddWord:attemptToAddedword,word:object,additionalLength:additiveWidth,currentLineLength:currentTextOffset,",208,2.38,ALERT
1661,"public PrivateKey loadPrivateKey() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (priKey == null) {
    FileReader f=new FileReader(path + ""privatekey"" + this.id);
    BufferedReader r=new BufferedReader(f);
    String tmp="""";
    String key="""";
    while ((tmp=r.readLine()) != null) {
      key=key + tmp;
    }
    f.close();
    r.close();
    priKey=getPrivateKeyFromString(key);
  }
  return priKey;
}
","public PrivateKey loadPrivatePoint() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (priKey == null) {
    FileReader f=new FileReader(path + ""privatekey"" + this.id);
    BufferedReader r=new BufferedReader(f);
    String tmp="""";
    String key="""";
    while ((tmp=r.readLine()) != null) {
      key=key + tmp;
    }
    f.close();
    r.close();
    priKey=getPrivateKeyFromString(key);
  }
  return priKey;
}
",109,6,"loadPrivateKey:loadPrivatePoint,",71,0.85,ALERT
1662,,,435,3,,734,7.5676054159800200,0
1663,"public void substituteHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}","public void substitutionHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] iframe=getCallback(state);
  if (iframe.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}",149,5,"ext:iframe,substituteHeader:substitutionHeader,",71,0.94,ALERT
1664,"public void addFieldBuffered(VEditor editor,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=editor;
  prevField=mField;
}
","public void addfieldbuffered(VEditor text,GridField mWord){
circleap=mWord != null ? !mWord.isSameLine() : false;
  if (prevEditor != null && viousWing != null)   addField(prevEditor,viousWing);
prevEditoror=text;
 viousWingd=mWord;
}
",52,6,"addFieldBuffered:addfieldbuffered,editor:text,mField:mWord,wrap:circle,prevField:viousWing,",335,3.31,ALERT
1665,,,41,3,,1073,8.701132929325100,0
1666,,,16,1,,430,3.2230108618736300,0
1667,"protected void clearAllTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}
","protected void clearalltrails(SSOTokenID tokenID){
  boolean blocked=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    blocked=(mapTokenIDs.remove(key) != null);
  }
}
",42,4,"removed:blocked,clearAllTrails:clearalltrails,",91,0.72,ALERT
1668,,,30,1,,402,4.4855728387832600,0
1670,"private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
","private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object output=node.output(context);
  if (output == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=output.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
",209,7,"value:output,",119,1.03,ALERT
1671,"public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}
","public java.util.Collection<ObjectReference> dumpThreadSloot(int dim){
  return Collections.emptyList();
}
",23,2,"dumpThreadRoots:dumpThreadSloot,width:dim,",158,1.75,ALERT
1672,"void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {
  LOG.debug(""wildcard resources: {}"",allFiles);
  if (allFiles.isEmpty()) {
    final String message=String.format(""No resource found for wildcard: %s"",wildcardContext.getWildcard());
    LOG.warn(message);
    throw new IOException(message);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(allFiles);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug(""wildcard expanding error. Reporting original exception"",e);
      throw new IOException(""Exception during expanding wildcard: "" + e.getMessage());
    }
  }
}
","void triggerWildCardexpansion(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {
  LOG.debug(""wildcard resources: {}"",allFiles);
  if (allFiles.isEmpty()) {
    final String message=String.format(""No resource found for wildcard: %s"",wildcardContext.getWildcard());
    LOG.warn(message);
    throw new IOException(message);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(allFiles);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug(""wildcard expanding error. Reporting original exception"",e);
      throw new IOException(""Exception during expanding wildcard: "" + e.getMessage());
    }
  }
}
",127,4,"triggerWildcardExpander:triggerWildCardexpansion,",35,0.8,ALERT
1673,"@LayoutlibDelegate static float sin(float angle){
  return (float)Math.sin(angle);
}
","@LayoutlibDelegate static float span(float square){
  return (float)Math.span(square);
}
",22,2,"sin:span,angle:square,",249,2.82,ALERT
1674,,,71,3,,1160,38.535307212670600,0
1675,"public void crabDownDirBlockForModification(BlockId blk){
  lockTbl.xLock(blk,txNum);
  writenIndexBlks.add(blk);
}
","public void crabDownDirBlockforModification(BlockId BlK){
  lockTbl.xLock(BlK,txNum);
  writenIndexBlks.add(BlK);
}
",25,2,"crabDownDirBlockForModification:crabDownDirBlockforModification,blk:BlK,",250,4.05,ALERT
1676,"public static String decodeCharset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}","public static String decodeCarsET(String series,String chapterset){
  if (series == null) {
    return null;
  }
  try {
    byte buf[]aries.getBytes(ASCII_CHARSET);
    return (new String(bufabufangth,chapterset));
  }
 catch (  UnsupportedEncodingException uee) {
    return series;
  }
}
",66,4,"decodeCharset:decodeCarsET,s:series,charset:chapterset,buf:a,",293,3.45,ALERT
1678,"public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
","public List<JCAnnotation> transformSignnotations(OutputElement manager,Tree.Declaration generate){
  EnumSet<OutputElement> inputws;
  if (generate instanceof Tree.AnyClass) {
   inputwss=AnnotationUtilinputwss((Tree.AnyClass)generate);
  }
 else   if (generate instanceof Tree.AnyInterface) {
   inputwss=AnnotationUtilinputwss((Tree.AnyInterface)generate);
  }
 else   if (generate instanceof Tree.TypeAliasDeclaration) {
   inputwss=AnnotationUtilinputwss((Tree.TypeAliasDeclaration)generate);
  }
 else   if (generate instanceof Tree.Constructor) {
   inputwss=AnnotationUtilinputwss((Tree.Constructor)generate);
  }
 else   if (generate instanceof Tree.Enumerated) {
   inputwss=AnnotationUtilinputwss((Tree.Enumerated)generate);
  }
 else   if (generate instanceof Tree.AnyMethod) {
   inputwss=AnnotationUtilinputwss((Tree.AnyMethod)generate);
  }
 else   if (generate instanceof Tree.AttributeDeclaration) {
   inputwss=AnnotationUtilinputwss((Tree.AttributeDeclaration)generate);
  }
 else   if (generate instanceof Tree.AttributeGetterDefinition) {
   inputwss=AnnotationUtilinputwss((Tree.AttributeGetterDefinition)generate);
  }
 else   if (generate instanceof Tree.AttributeSetterDefinition) {
   inputwss=AnnotationUtilinputwss((Tree.AttributeSetterDefinition)generate);
  }
 else   if (generate instanceof Tree.ObjectDefinition) {
   inputwss=AnnotationUtilinputwss((Tree.ObjectDefinition)generate);
  }
 else {
    throw BugException.unhandledNodeCase(generate);
  }
  return transform(agenerategetDeclarationModel(),manager,generate.getAnnotationList(),inputws);
}
",303,4,"transformAnnotations:transformSignnotations,target:manager,annotated:generate,outputs:inputws,",219,2.42,ALERT
1679,"public boolean validate(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return validate(certBytes,signedDataBytes,signatureBytes);
}","public boolean validation(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] Certbytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signedatureByte=Base64.decode(signature);
  return validation(Certbytes,signedDataBytes,signedatureByte);
}",67,7,"validate:validation,signatureBytes:signedatureByte,certBytes:Certbytes,",110,1.08,ALERT
1680,"public boolean hasNatureAndWeapon(Nature nature,String weapon){
  return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon)));
}
","public boolean hasnatureandweapons(Nature nature,String knife){
  return this.nature == nature && ((knife == null && this.knife == null) || (knife != null && knife.equals(this.knife)));
}
",48,3,"weapon:knife,hasNatureAndWeapon:hasnatureandweapons,",91,1.15,ALERT
1681,"public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageFactor <= 0 || coverageFactor > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coverageFactor);
  }
  m_coverageFactor=coverageFactor;
}","public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageNumber,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coverageNumber,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageNumber <= 0 || coverageNumber > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coverageNumber);
  }
  m_coverageFactor=coverageNumber;
}",153,16,"coverageFactor:coverageNumber,",70,3.59,ALERT
1682,"public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}","public static double P_AveragePrecision(int p[],int r[]){
  double avg_prec=0;
  int L=p.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int jj=0; jj < L; jj++) {
    if (p[jj] == 1) {
      ones.add(jj);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int jj : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[jj]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[jj]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}",156,9,"j:jj,y:p,",155,4.69,ALERT
1683,"@RequestMapping(value={""/"",""""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute(""userroles"") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){
  RestWrapper restWrapper=null;
  if (bindingResult.hasErrors()) {
    BindingResultError bindingResultError=new BindingResultError();
    return bindingResultError.errorMessage(bindingResult);
  }
  try {
    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();
    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());
    jpaUserRoles.setRole(userRoles.getRole());
    Users users=new Users();
    users.setUsername(userRoles.getUsername());
    jpaUserRoles.setUsers(users);
    userRolesDAO.update(jpaUserRoles);
    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);
    LOGGER.info(""Record with ID:"" + userRoles.getUserRoleId() + "" updated in UserRoles by User:""+ principal.getName()+ userRoles);
  }
 catch (  Exception e) {
    LOGGER.error(e);
    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);
  }
  return restWrapper;
}
","@RequestMapping(value={""/"",""""},method=RequestMethod.POST) @ResponseBody public RestWrapper edit(@ModelAttribute(""userroles"") @Valid UserRoles UserRoots,BindingResult bindResult,Principal pripalite){
  RestWrapper restExpping=null;
  if (bindResult.hasErrors()) {
    BindingResultError bindResultError=new BindingResultError();
    retubindResultErrorror.errorMessage(bindResult);
  }
  try {
    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRols=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();
    jpaUserRols.setUserRoleId(UserRoots.getUserRoleId());
    jpaUserRols.setRole(UserRoots.getRole());
    Users users=new Users();
    users.setUsername(UserRoots.getUsername());
    jpaUserRols.setUsers(users);
    userRolesDAO.edit(jpaUserRols);
    restExpping=new RestWrapper(UserRoots,RestWrapper.OK);
    LOGGER.info(""Record with ID:"" + UserRoots.getUserRoleId() + "" updated in UserRoles by User:""+ pripalite.getName()+ UserRoots);
  }
 catch (  Exception e) {
    LOGGER.error(e);
    restExpping=new RestWrapper(e.getMessage(),RestWrapper.ERROR);
  }
  return restExpping;
}
",234,8,"update:edit,userRoles:UserRoots,bindingResult:bindResult,principal:pripalite,restWrapper:restExpping,bindingResultError:bindResultError,jpaUserRoles:jpaUserRols,",403,7.5,ALERT
1684,"protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}","protected XSQLDA allocateXSSQLMa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescConstructor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescConstructor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescConstructor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescConstructor.getScale();
    xSqlVar.sqllen=(short)fieldDescConstructor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescConstructor.isVarying() ? fieldDescConstructor.getLength() + 3 : fieldDescConstructor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}",208,15,"fieldDescriptor:fieldDescConstructor,allocateXSqlDa:allocateXSSQLMa,",219,2.26,ALERT
1685,,,77,6,,1334,10.52664539416630,0
1686,,,135,2,,486,6.571251833438870,0
1687,"private void rollbackMethodForCreateSnapshot(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI snapshot) throws Exception {
  if (isDummyLunPathAdded) {
    log.info(""Remove dummy path while doing roll back"");
    hdsProtectionOperations.removeDummyLunPath(storage,snapshot);
  }
  if (isSnapshotCreated) {
    log.info(""Remove snapshot volume for roll back"");
    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);
    String systemObjectID=HDSUtils.getSystemObjectID(storage);
    String logicalUnitObjId=HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),storage);
    hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnitObjId,storage.getModel());
  }
}
","private void rollbackMethodForCreatesnapshots(boolean isSnapshotCreating,boolean isDummyLunPathAdded,HDSApiClient hdsAapiCloud,StorageSystem store,URI SnapShot) throws Exception {
  if (isDummyLunPathAdded) {
    log.info(""Remove dummy path while doing roll back"");
    hdsProtectionOperations.removeDummyLunPath(store,SnapShot);
  }
  if (isSnapshotCreating) {
    log.info(""Remove snapshot volume for roll back"");
    BlockSnapshot SnapshotOb=dbClient.queryObject(BlockSnapshot.class,SnapShot);
    StrinsystemObjIdID=HDSUtils.getSystemObjectID(store);
    StrilogicalUnitObjidjId=HDSUtils.getLogicalUnitObjectISnapshotObbj.getNativeId(),store);
    hdsAapiCloud.deleteSnapshotVolumsystemObjIdIlogicalUnitObjidId,store.getModel());
  }
}
",113,9,"rollbackMethodForCreateSnapshot:rollbackMethodForCreatesnapshots,isSnapshotCreated:isSnapshotCreating,hdsApiClient:hdsAapiCloud,storage:store,snapshot:SnapShot,snapshotObj:SnapshotOb,systemObjectID:systemObjId,logicalUnitObjId:logicalUnitObjid,",454,3.64,ALERT
1688,"private void initProgram(){
  glUseProgram(this.program);
  vec3ArrayUniform=glGetUniformLocation(this.program,""cols"");
  chosenUniform=glGetUniformLocation(this.program,""chosen"");
  glUseProgram(0);
}","private void resetMatrix(){
  glUseProgram(this.program);
  vec3ArrayUniform=glGetUniformLocation(this.program,""cols"");
  choseRuniform=glGetUniformLocation(this.program,""chosen"");
  glUseProgram(0);
}",41,3,"initProgram:resetMatrix,chosenUniform:choseRuniform,",102,0.8,ALERT
1689,"public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}","public void RotateZero(double thepa){
  Matrix3D np=new Matrix3D();
  double c=Math.cos(thepa);
  double s=Math.sin(thepa);
  np.set(0,0,c);
  np.set(0,1,-s);
  np.set(1,0,s);
  np.set(1,1,c);
  preMultiply(np);
}",87,5,"tmp:np,theta:thepa,rotateZ:RotateZero,",161,1.48,ALERT
1690,"public void replaceSplitElement(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
","public void replaceSplitSection(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
",21,3,"replaceSplitElement:replaceSplitSection,",51,0.37,ALERT
1691,"static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {
  Iterator it=set.iterator();
  boolean keepGoing=true;
  boolean sentLastChunk=false;
  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());
  do {
    mos.reset();
    int avgItemSize=0;
    int itemCount=0;
    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {
      Object key=it.next();
      DataSerializer.writeObject(key,mos);
      itemCount++;
      avgItemSize=mos.size() / itemCount;
    }
    DataSerializer.writeObject((Object)null,mos);
    int lastMsg=it.hasNext() ? 0 : 1;
    keepGoing=proc.executeWith(mos,lastMsg);
    sentLastChunk=lastMsg == 1 && keepGoing;
  }
 while (keepGoing && it.hasNext());
  return sentLastChunk;
}","static boolean chunkset(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {
  Iterator it=set.iterator();
  boolean carryLooking=true;
  boolean sentLastChunk=false;
  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());
  do {
    mos.reset();
    int avgItemSize=0;
    int itemCount=0;
    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {
      Object key=it.next();
      DataSerializer.writeObject(key,mos);
      itemCount++;
      avgItemSize=mos.size() / itemCount;
    }
    DataSerializer.writeObject((Object)null,mos);
    int lastMsg=it.hasNext() ? 0 : 1;
    carryLooking=proc.executeWith(mos,lastMsg);
    sentLastChunk=lastMsg == 1 && carryLooking;
  }
 while (carryLooking && it.hasNext());
  return sentLastChunk;
}",194,14,"keepGoing:carryLooking,chunkSet:chunkset,",182,2.04,ALERT
1692,"public static String formatPercent(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}","public static String formatPercent(int downloadSize,int Filesize){
  float num=(float)downloadSize / Filesize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}",52,5,"fileSize:Filesize,",36,0.31,ALERT
1693,"public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}","public RoundedIconGenerator(int iconWidthIPct,int iconHeightNt,int cornerRadnessPX,int borderSize,float textSizeFc){
  mImIconPositionTxconWidthIPct;
  mIconHeightOX=iconHeightNt;
  mmCornerRadiusPdcornerRadnessPX;
  mBaMBackgroundImagew RectF(0,0,mIconPositionTx,mIconHeightOX);
  mBackgroundCill=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(borderSizmBackgroundCillPaint.setColor(borderSize);
  mTEXTGint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTEXTGint.setColor(Color.WHITE);
  mTEXTGint.setFakeBoldText(true);
  mTEXTGint.setTextSize(textSizeFc);
  FontMetricstextFontmetrics=mTEXTGint.getFontMetrics();
mTitleLengthht=(float)Math.ceil(textFontmetric.bottom - textFontmetric.top);
 mLogHeightoffsett=-textFontmetric.top;
}",130,14,"iconWidthPx:iconWidthIPct,iconHeightPx:iconHeightNt,cornerRadiusPx:cornerRadnessPX,backgroundColor:borderSize,textSizePx:textSizeFc,mIconWidthPx:mIconPositionTx,mIconHeightPx:mIconHeightOX,mCornerRadiusPx:mCornerRadiusPd,mBackgroundRect:MBackgroundImage,mBackgroundPaint:mBackgroundCill,mTextPaint:mTEXTGint,textFontMetrics:textFontmetric,mTextHeight:mTitleLength,mTextYOffset:mLogHeightoffset,",1466,14.75,ALERT
1694,,,62,3,,899,10.588449629147800,0
1695,"public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
","public void appendRawbytes(final byte[] array,int padding,int port) throws IOException {
  if (limit - position >= port) {
    System.arraycopy(array,padding,buffer,position,port);
    position+=port;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
",61,5,"length:port,value:array,offset:padding,writeRawBytes:appendRawbytes,",158,1.85,ALERT
1696,,,152,7,,2265,51.063972194989500,0
1697,"private LocalDateTime parseDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",dateStr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parseDate(dateStr,false);
      }
    }
  }
  return date;
}
","private LocalDateTime parserdate(String gradeString,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(gradeString);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(gradeString,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",gradeString));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parserdate(gradeString,false);
      }
    }
  }
  return date;
}
",110,5,"dateStr:gradeString,parseDate:parserdate,",135,1.16,ALERT
1698,,,170,2,,767,5.076795335610710,0
1699,,,332,8,,1451,12.89091161886850,0
1700,,,127,2,,810,12.194627567132300,0
1701,"public static boolean compareDoubles(double a,double b){
  if (Double.isNaN(a) && Double.isNaN(b))   return true;
  if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON;
  return a == b;
}
","public static boolean compareDoubles(double da,double b){
  if (Double.isNaN(da) && Double.isNaN(b))   return true;
  if (!Double.isInfinite(da) && !Double.isInfinite(b))   return Math.abs(da - b) <= EPSILON;
  return da == b;
}
",67,3,"a:da,",43,0.6,ALERT
1703,,,14,1,,455,4.548707695802050,0
1704,,,86,6,,2185,18.006566301981600,0
1705,"public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}","public static void CopyWithout(Object src,Object Dst,int OLDSide,int removeIndex){
  if (removeIndex > 0 && OLDSide > 0) {
    System.arraycopy(src,0,Dst,0,removeIndex);
  }
  if (removeIndex < OLDSide) {
    System.arraycopy(src,removeIndex + 1,Dst,removeIndex,OLDSide - removeIndex - 1);
  }
}",75,5,"oldSize:OLDSide,copyExcept:CopyWithout,dst:Dst,",91,1.31,ALERT
1706,,,124,7,,1858,16.54827513694760,0
1708,,,249,11,,3749,44.291593039035800,0
1709,"public void onRestoreInstanceState(Bundle savedInstanceState){
  mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
","public void onRestoverInstanceStates(Bundle savedInstanceService){
  mSelectedPositions.addAll(savedInstanceService.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
",32,2,"onRestoreInstanceState:onRestoverInstanceStates,savedInstanceState:savedInstanceService,",108,1.05,ALERT
1710,"public void beginDisplay(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.beginDisplay(event);
  if (!canModify) {
    Map mapValues=getDefaultValues();
    if ((mapValues != null) && !mapValues.isEmpty()) {
      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,"","",false));
    }
  }
 else {
    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
    OptionList entityTypes=createOptionList(supportedEntityTypes);
    entityTypes.add(0,""policy.subject.select.identity.type"","""");
    menu.setOptions(entityTypes);
    menu.setValue("""");
    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    child.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
      OptionList selected=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(selected);
      child.resetStateData();
      addRemoveModel.setAvailableOptionList(possible);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));
    }
  }
}","public void ontentPLAY(DisplayEvent con) throws ModelControlException {
  IdentitySubjectModel SubjectManager=getSubjectModel();
  PolicyModel controller=(PolicyModel)getModel();
  super.ontentPLAY(con);
  if (!canModify) {
    Map mapItems=getDefaultValues();
    if ((mapItems != null) && !mapItems.isEmpty()) {
      Setobjectss=(Set)mapItems.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identiidententityResultsr.getAMIdentityNames(controller.getUserSSOToken(),objects);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(idententityResults,"","",false));
    }
  }
 else {
    CCDropDownMenu queue=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supposupportedEntityTokensroller.getSupportedEntityTypes(realmName);
    OptionList eobjectTypecreateOptionList(supportedEntityTokens);
    objectType.add(0,""policy.subject.select.identity.type"","""");
    queue.setOptions(objectType);
    queue.setValue("""");
    CCAddRemove help=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    help.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,conthelpr.getUserSSOToken(),controller.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helpossibilityteOptionList(mocontrolleretUserSSOToken(),mocontrolleretUserLocale(),this,getPossibleValues(SubjectManager,realmName));
      OptionList temp=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(temp);
      help.resetStateData();
      addRemoveModel.setAvailableOptionList(possibility);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(controller.getUserSSOToken(),controller.getUserLocale(),this,selectedIds));
    }
  }
}",311,14,"beginDisplay:ontentPLAY,event:con,subjectModel:SubjectManager,model:controller,mapValues:mapItems,values:objects,identityNames:idententityResults,menu:queue,supportedEntityTypes:supportedEntityTokens,entityTypes:objectType,child:help,possible:possibility,selected:temp,",2862,35.14,ALERT
1711,,,23,2,,813,6.010739624500280,0
1712,"public static Color blend(Color color1,Color color2,double weight){
  double w2=MathUtils.limit(weight,0.0,1.0);
  double w1=1.0 - w2;
  int r=(int)Math.round(w1 * color1.getRed() + w2 * color2.getRed());
  int g=(int)Math.round(w1 * color1.getGreen() + w2 * color2.getGreen());
  int b=(int)Math.round(w1 * color1.getBlue() + w2 * color2.getBlue());
  int a=(int)Math.round(w1 * color1.getAlpha() + w2 * color2.getAlpha());
  return new Color(r,g,b,a);
}","public static Color blender(Color colorOnce,Color alpha1,double carry){
  doublew522=MathUtils.limit(carry,0.0,1.0);
  double ww11.0 - w52;
  int r=(iwt)Math.round(w1 *w1olorOnce.getRed() + w52 * alpha1.getRed());
  int g=(iigt)Math.round(w1 *w1olorOnce.getGreen() + w52 * alpha1.getGreen());
  int b=(iwt)Math.round(w1 *w1olorOnce.getBlue() + w52 * alpha1.getBlue());
  int a=(ibat)Math.round(w1 *w1olorOnce.getAlpha() + w52 * alpha1.getAlpha());
  return new Color(w,ig,w,ba);
}",158,10,"blend:blender,color1:colorOnce,color2:alpha1,weight:carry,w2:w52,r:w,g:ig,b:w,a:ba,",546,6.77,ALERT
1713,"public boolean isAdditiveNumber(String num){
  int n=num.length();
  for (int i=1; i <= n / 2; i++) {
    if (num.charAt(0) == '0' && i > 1) {
      return false;
    }
    BigInteger num1=new BigInteger(num.substring(0,i));
    for (int j=1; Math.max(i,j) <= n - i - j; j++) {
      if (num.charAt(i) == '0' && j > 1) {
        break;
      }
      BigInteger num2=new BigInteger(num.substring(i,i + j));
      if (isAdditiveNumber(num1,num2,i + j,num)) {
        return true;
      }
    }
  }
  return false;
}","public boolean isAddsientNumbers(String nom){
  int N=nom.length();
  for (int ji=1; ji <= N / 2; ji++) {
    if (nom.charAt(0) == '0' && ji > 1) {
      return false;
    }
    BigInteger nnuOnenew BigInteger(nom.substring(0,ji));
    for (int j=qi; Math.max(ji,jqi <= N - ji - qi; qi++) {
      if (nom.charAt(ji) == '0' && qi > 1) {
        break;
      }
      BigInteger numum1w BigInteger(nom.substring(ji,ji + qi));
      if (isAddsientNumbers(nnuOnenuum1i + qi,nom)) {
        return true;
      }
    }
  }
  return false;
}",159,7,"isAdditiveNumber:isAddsientNumbers,num:nom,n:N,i:ji,num1:nuOne,j:qi,num2:um1,",1420,22.23,ALERT
1714,"public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}","public static void catchall(InputStream inStream,OutputStream outStream) throws IOException {
  byte[] sb=new byte[BUFFER_SIZE];
  int numRead;
  while ((numnumReadStream.read(sb,0,sb.length)) >= 0) {
    outStream.write(sb,0,numRead);
  }
}",63,5,"pipeAll:catchall,inStr:inStream,outStr:outStream,bs:sb,",181,2.25,ALERT
1715,"private void buildDescriptionPanel(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}","private void buildDescBar(final Composite parent){
  DescriptionField=new StyledText(parent,SWT.READ_ONLY);
  DescriptionField.setText("""");
  DescriptionField.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}",54,3,"descriptionLabel:DescriptionField,buildDescriptionPanel:buildDescBar,",55,0.46,ALERT
1716,,,151,3,,567,12.929434943199200,0
1717,"public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
","public void put(byte[] buffer,int offset,int part){
  if (part > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,part);
  this.contentLength+=part;
}
",63,5,"count:part,",44,0.44,ALERT
1719,"@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
","@Override protected void doDeploy(){
  super.doDeploy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
",40,1,"onDestroy:doDeploy,",31,0.3,ALERT
1720,,,31,3,,1151,10.456701032320700,0
1721,"private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}","private int indexOfelementWithinlevel(int xml,int level[]) throws Exception {
  for (int ci=0; ci < level.length; ci++) {
    if (level[ci] == xml) {
      return ci;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(xml).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}",68,4,"element:xml,i:ci,indexOfElementInLevel:indexOfelementWithinlevel,",128,1.37,ALERT
1722,"private String readNfcErrorMsg(ByteBuffer reply) throws IOException {
  int errorType=reply.getInt();
  int errorCode=reply.getInt();
  int msgLen=reply.getInt();
  if (msgLen == 0) {
    return """";
  }
  ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen);
  readFully(msgBuffer);
  String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII);
  return String.format(""NFC Error %d/%d: %s"",errorType,errorCode,errorMsg);
}","private String readNfcStatusMsg(ByteBuffer report) throws IOException {
  int eerrTyreport.getInt();
  int eerrTypereport.getInt();
  int mmessagelenreport.getInt();
  if (messagelen == 0) {
    return """";
  }
  ByteBuffer msgBmsgQueueeBuffer.allocate(messagelen);
  readFully(msgQueue);
  String errerrorMsgw String(msgBmsgQueueay(),0,messagelen - 1,Charsets.US_ASCII);
  return String.format(""NFC Error %d/%d: %s"",errTy,errType,errorMsg);
}",101,7,"readNfcErrorMsg:readNfcStatusMsg,reply:report,errorType:errTy,errorCode:errType,msgLen:messagelen,msgBuffer:msgQueue,",477,4.39,ALERT
1723,"public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}","public void cp(char ctx[]){
  int minlengtwriterer.lloc- pose;
  if (ctx.loc < minlength) {
    System.arraycopy(ctx,0,writer,poposetx.loc);
    poposectx.loc;
  }
 else {
    System.arraycopy(ctx,0,bwriterpose,minlength);
    curr.next=new Entity(writer);
    curr=curr.next;
    lowriterfer.loc;
    buffer=newriter[(buffer.lengloctx.leloc maminlengwriterffer.leloc ctx.loc - minlengwriter  buffer=new char[(buffer.lengloctx.leloc maminlength? buffer.leloc ctx.loc - minlength];
    if (ctx.loc > minlength) {
      System.arraycopy(ctx,maminlengwriterr,0,ctx.loc - minlength);
      poposetx.loc - minlength;
    }
 else {
      pose=0;
    }
  }
}",165,8,"append:cp,c:ctx,maxlength:minlength,pos:pose,length:loc,buffer:writer,",478,4.68,ALERT
1725,"public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}","public static boolean getempty(String str){
  return (null == str || 0 == str.length());
}",25,2,"isEmpty:getempty,",21,0.17,ALERT
1726,"public ModbusTransaction createTransaction(){
  ModbusSerialTransaction transaction=new ModbusSerialTransaction();
  transaction.setTransport(this);
  return transaction;
}
","public ModbusTransaction getConnection(){
  ModbusSerialTransaction passport=new ModbusSerialTransaction();
  passport.setTransport(this);
  return passport;
}
",25,2,"createTransaction:getConnection,transaction:passport,",436,4.04,ALERT
1727,,,29,2,,686,9.779049360752110,0
1728,"public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}
","public static ClassProperties loadPromperty(Class[] cls,Properties properties,boolean inherit){
  ClassProperties ctrl=new ClassProperties(properties);
  for (  Class c : cls) {
    ctrl.load(c,inherit);
  }
  return ctrl;
}
",48,6,"loadProperties:loadPromperty,cp:ctrl,",63,0.68,ALERT
1729,"public UndoableEdit insertString(int where,String str) throws BadLocationException {
  if (where >= count || where < 0) {
    throw new BadLocationException(""Invalid location"",count);
  }
  char[] chars=str.toCharArray();
  replace(where,0,chars,0,chars.length);
  if (marks != null) {
    updateMarksForInsert(where,str.length());
  }
  return new InsertUndo(where,str.length());
}","public UndoableEdit replacestring(int show,String part) throws BadLocationException {
  if (show >= count || show < 0) {
    throw new BadLocationException(""Invalid location"",count);
  }
  char[] cchaspart.toCharArray();
  replace(show,0,chas,0,chas.length);
  if (marks != null) {
    updateMarksForInsert(show,part.length());
  }
  return new InsertUndo(show,part.length());
}",93,4,"insertString:replacestring,where:show,str:part,chars:chas,",727,7.05,ALERT
1730,"public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}","public static String toutf8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}",30,2,"toUTF8String:toutf8String,",28,0.24,ALERT
1731,"public static Pair<String,String> split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}","public static Pair<String,String> Split(String inputSplit){
  int splsplindexputSplit.indexOf('.');
  if (splindex < 0) {
    return null;
  }
  String lLeftinputSplit.substring(0,splindex);
  String rrxinputSplit.substring(splindex + 1);
  if (Left == null || Left.length() == 0 || rx == null || rx.length() == 0) {
    return null;
  }
  return Pair.of(Left,rx);
}",101,5,"split:Split,varName:inputSplit,splitIndex:splindex,left:Left,right:rx,",863,11.82,ALERT
1732,,,158,7,,2389,35.191379050413800,0
1733,"public static File createTempPath(String path) throws IOException {
  String sep=File.separator;
  File tempDir=new File(System.getProperty(""java.io.tmpdir"") + sep + path);
  if (!tempDir.exists())   if (!tempDir.mkdirs()) {
    boolean status=tempDir.delete();
    throw new IOException(""creation failed for dir "" + tempDir + ""status = ""+ status);
  }
  tempDir.deleteOnExit();
  return tempDir;
}
","public static File createtempDirectory(String path) throws IOException {
  String sep=File.separator;
  File tempDir=new File(System.getProperty(""java.io.tmpdir"") + sep + path);
  if (!tempDir.exists())   if (!tempDir.mkdirs()) {
    boolean status=tempDir.delete();
    throw new IOException(""creation failed for dir "" + tempDir + ""status = ""+ status);
  }
  tempDir.deleteOnExit();
  return tempDir;
}
",88,5,"createTempPath:createtempDirectory,",38,0.28,ALERT
1734,,,144,2,,778,7.6433460513750700,0
1735,"public void load(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}","public void read(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}",51,3,"load:read,",39,0.29,ALERT
1736,,,106,4,,1397,24.54827027718230,0
1737,"public void rebuildEventList(boolean resetSelected){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""rebuilding list"");
  }
  allEvents=null;
  activeEvents=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelected);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}
","public void reupdateEventlist(boolean resetSelected){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""rebuilding list"");
  }
  allEvents=null;
  activeEvents=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelected);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}
",66,4,"rebuildEventList:reupdateEventlist,",60,0.54,ALERT
1738,,,76,3,,1096,10.690029529730500,0
1739,"private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}","private Set<String> foreignParameters(PreparedStatement stmt,String creator,String tbl) throws SQLException {
  Set<String> pkFields=new HashSet<>();
  stmt.setString(1,creator);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkFields.add(pkRs.getString(1));
  }
   return pkFields;
}",87,5,"primaryKeys:foreignParameters,owner:creator,pkCols:pkFields,",318,3.93,ALERT
1742,,,320,30,,9434,122.30755387544600,0
1743,"public void putBytes(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}","public void PutParts(byte[] route){
  ensureCapacity(route.length);
  System.arraycopy(route,0,this.byteBuffer,this.option,route.length);
  this.option+=route.length;
}",47,3,"putBytes:PutParts,bytes:route,position:option,",139,1.18,ALERT
1744,"public boolean remove(JsonElement element){
  return elements.remove(element);
}
","public boolean un(JsonElement entity){
  return elements.un(entity);
}
",17,2,"remove:un,element:entity,",515,4.19,ALERT
1745,,,83,5,,1837,16.565898764133500,0
1746,"public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {
  final String query=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ moduleId+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}","public static void importbaseTypes(final CConnection db,final int rawModInfo,final int packageId) throws SQLException {
  final String report=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+packageIdd+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawModInfo);
  db.executeUpdate(report,true);
  final String updateExpure=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  db.executeQuery(updateExpure,true);
}",89,6,"importBaseTypes:importbaseTypes,connection:db,rawModuleId:rawModInfo,moduleId:packageId,query:report,updateSequence:updateExpure,",465,3.77,ALERT
1747,"@SuppressWarnings(""unchecked"") public void restore(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
","@SuppressWarnings(""unchecked"") public void explure(String FileType) throws IOException, ClassNotFoundException {
  ObjectInputStream tis=new ObjectInputStream(new FileInputStream(FileType));
  internions=(Map<V,Point>)tis.readObject();
  tis.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
",65,4,"restore:explure,fileName:FileType,ois:tis,locations:internions,",151,1.48,ALERT
1748,"public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
","public static boolean isObjectAvailableNow(final boolean enabled,final Date AvailableSince,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (AvailableSince != null && now.before(AvailableSince)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
",72,5,"availableFrom:AvailableSince,",73,0.87,ALERT
1749,,,39,3,,1006,9.22355717420578,0
1750,,,137,4,,1003,30.7162992477417,0
1751,"private void initCheckbox(CheckBoxPreference checkbox,boolean checked,boolean enabled){
  checkbox.setChecked(checked);
  checkbox.setEnabled(enabled);
}
","private void initCheckBox(CheckBoxPreference checkpoint,boolean modified,boolean able){
  checkpoint.setChecked(modified);
  checkpoint.setEnabled(able);
}
",29,4,"initCheckbox:initCheckBox,checkbox:checkpoint,checked:modified,enabled:able,",244,1.98,ALERT
1752,,,29,1,,407,3.594516869386040,0
1753,"private void deleteCurrentLicenseFileOnDisk(){
  File licenseFile=new File(LicenseConstants.LICENSE_FILE_PATH);
  if (licenseFile.exists()) {
    licenseFile.delete();
  }
}
","private void deleteCurrentLicenseFilesOndisk(){
  File licenceFiles=new File(LicenseConstants.LICENSE_FILE_PATH);
  if (licenceFiles.exists()) {
    licenceFiles.delete();
  }
}
",34,2,"deleteCurrentLicenseFileOnDisk:deleteCurrentLicenseFilesOndisk,licenseFile:licenceFiles,",104,0.75,ALERT
1754,,,47,1,,428,2.7906025687853500,0
1755,"public SelectClause addWithAsProvidedName(String propertyName,String asName){
  selectList.add(new SelectClauseExpression(new PropertyValueExpression(propertyName),asName));
  return this;
}
","public SelectClause addWithAsProvidedName(String attributeValue,String ASName){
  selectList.add(new SelectClauseExpression(new PropertyValueExpression(attributeValue),ASName));
  return this;
}
",32,3,"propertyName:attributeValue,asName:ASName,",49,0.54,ALERT
1756,,,289,6,,1264,24.283371353149400,0
1757,"public boolean matchesNamingConvension(){
  return packageName.matches(JAVA_PACKAGE_CONVENSION);
}
","public boolean matchesNamingConvenession(){
  return packageName.matches(JAVA_PACKAGE_CONVENSION);
}
",15,1,"matchesNamingConvension:matchesNamingConvenession,",26,0.25,ALERT
1758,"@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public <R>CompletableFuture<R> Collect(final Supplier<R> supposer,final BiConsumer<R,? super T> accumerinator,final BiConsumer<R,R> cliner){
  return CompletableFuture.supplyAsync(null,exec);
}
",51,4,"collect:Collect,supplier:supposer,accumulator:accumerinator,combiner:cliner,",144,0.87,ALERT
1759,,,17,1,,434,4.033930734793350,0
1760,,,154,7,,2428,26.489376894633000,0
1761,"private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}
","private static boolean isTrusted(Object fn,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(fn);
    return ctx.isTrustedObject(fn);
  }
  finally {
    state.set(saved);
  }
}
",54,4,"obj:fn,",40,0.34,ALERT
1762,"public int elevationAt(float lat,float lon){
  if (frame_is_valid == true) {
    if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) {
      int lat_index=Math.round((lat - dsi.sw_lat) * 36000 / uhl.lat_post_interval);
      int lon_index=Math.round((lon - dsi.sw_lon) * 36000 / uhl.lon_post_interval);
      if (elevations[lon_index] == null)       readDataRecord(lon_index);
      return (int)elevations[lon_index][lat_index];
    }
  }
  return -32767;
}","public int elvationPoint(float fa,float layer){
  if (frame_is_valid == true) {
    if (fa >= dsi.sw_lat && fa <= dsi.ne_lat && layer >= dsi.sw_lon && layer <= dsi.ne_lon) {
      int lat_index=Math.round((fa - dsi.sw_lat) * 36000 / uhl.lat_post_interval);
      int lon_index=Math.round((layer - dsi.sw_lon) * 36000 / uhl.lon_post_interval);
      if (elevations[lon_index] == null)       readDataRecord(lon_index);
      return (int)elevations[lon_index][lat_index];
    }
  }
  return -32767;
}",122,5,"lat:fa,lon:layer,elevationAt:elvationPoint,",144,1.69,ALERT
1763,,,59,5,,1160,9.365028071403500,0
1764,,,28,1,,446,3.7164740641911800,0
1765,"public void schemaChanged(String serviceName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
","public void schemasChanged(String serverName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
",25,3,"serviceName:serverName,schemaChanged:schemasChanged,",36,0.3,ALERT
1766,"private String attemptToChooseFormattingPattern(){
  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {
    getAvailableFormats(nationalNumber.toString());
    String formattedNumber=attemptToFormatAccruedDigits();
    if (formattedNumber.length() > 0) {
      return formattedNumber;
    }
    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();
  }
 else {
    return appendNationalNumber(nationalNumber.toString());
  }
}","private String attemptToChooseFormatatingPattern(){
  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {
    getAvailableFormats(nationalNumber.toString());
    String formattedNumber=attemptToFormatAccruedDigits();
    if (formattedNumber.length() > 0) {
      return formattedNumber;
    }
    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();
  }
 else {
    return appendNationalNumber(nationalNumber.toString());
  }
}",78,2,"attemptToChooseFormattingPattern:attemptToChooseFormatatingPattern,",29,0.99,ALERT
1767,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}","public int start() throws IOException {
  int elt;
  if ((elt=is.start()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    elt=(char)((elt << 8) | (is.start() & 0xff));
  }
 else {
    elt=(char)((is.start() << 8) | (elt & 0xff));
  }
  return elt;
}",92,2,"val:elt,read:start,",73,1.15,ALERT
1768,"@Override public long handleCommit(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    bb.put(rbv.get());
  }
  bb.flip();
  return journal.write(bb);
}","@Override public long afterCalits(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer robV=view.asReadOnlyBuffer();
  final ByteBuffer bbfByteBuffer.allocate(robV.capacity());
  for (int ix0; ix< robV.capacity(); x++) {
    bbfput(robV.get());
  }
  bf.flip();
  return journal.write(bf);
}",105,6,"handleCommit:afterCalits,rbv:robV,bb:bf,i:x,",233,1.8,ALERT
1770,,,32,2,,802,9.835114590326950,0
1771,"private int measureHeight(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
","private int measuringBottom(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
",102,5,"measureHeight:measuringBottom,",71,0.53,ALERT
1772,,,186,10,,3368,31.94373451868690,0
1774,"public final double sampleMax(){
  long max=_max.getAndSet(0);
  return _scale * max;
}","public final double getScale(){
  long alpha=_max.getAndSet(0);
  return _scale * alpha;
}",23,2,"sampleMax:getScale,max:alpha,",240,2.11,ALERT
1775,"@Override public void update(List<EnvVar> dataList){
  envVarList.clear();
  if (dataList == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataList) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
","@Override public void inject(List<EnvVar> inputSet){
  envVarList.clear();
  if (inputSet == null) {
    for (    EnvVar ervvar : builtInEnvVarMap.values()) {
      envVarList.add(ervvar);
    }
  }
 else {
    for (    EnvVar ervvar : inputSet) {
      if (builtInEnvVarMap.containsKey(ervvar.getName())) {
        envVarList.add(new EnvVar(ervvar,true));
      }
 else {
        envVarList.add(new EnvVar(ervvar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
",108,3,"update:inject,dataList:inputSet,envVar:ervvar,",148,1.19,ALERT
1776,"protected int executePrepareStatement(List<Column> columns,PreparedStatement statement) throws SQLException {
  int bindNo=1;
  for (  Column c : columns) {
    setColumnValue(statement,bindNo,c);
    bindNo++;
  }
  return statement.executeUpdate();
}","protected int executeReparseCommand(List<Column> Columns,PreparedStatement session) throws SQLException {
  int BindYes=1;
  for (  Column cf : Columns) {
    setColumnValue(session,BindYes,cf);
    BindYes++;
  }
  return session.executeUpdate();
}",50,5,"executePrepareStatement:executeReparseCommand,columns:Columns,statement:session,bindNo:BindYes,c:cf,",574,5.96,ALERT
1777,"public static float computeContrastBetweenColors(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}","public static float computeContrastBetweenCOLORS(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}",313,11,"computeContrastBetweenColors:computeContrastBetweenCOLORS,",72,1.81,ALERT
1778,"private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException {
  DataOutputStream dos=null;
  try {
    String xml=transMeta.getXML();
    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));
    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException(""Error while getting the graph XML"",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException(""Unable to find the graph fileL"",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException(""Error while Converting the graph xml string to bytes"",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException(""Error while writing the graph file"",ioe);
  }
 finally {
    if (dos != null) {
      try {
        dos.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}
","private static void generategraphFiles(TransMeta transMeta,String graphFile) throws GraphGeneratorException {
  DataOutputStream dos=null;
  try {
    String xml=transMeta.getXML();
    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));
    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException(""Error while getting the graph XML"",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException(""Unable to find the graph fileL"",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException(""Error while Converting the graph xml string to bytes"",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException(""Error while writing the graph file"",ioe);
  }
 finally {
    if (dos != null) {
      try {
        dos.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}
",159,5,"generateGraphFile:generategraphFiles,",66,0.63,ALERT
1779,"public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}
","public boolean putprofile(Profile picture){
  return putprofile(picture,false);
}
",17,2,"putProfile:putprofile,profile:picture,",118,1.02,ALERT
1780,"private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(xml);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
","private static PolicyNotification extractPolicynotifications(String feed) throws PolicyEvaluationException {
  PolicyNotification policyPartifier=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(feed);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyPartifier=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyPartifier;
}
",192,7,"policyNotification:policyPartifier,xml:feed,extractPolicyNotification:extractPolicynotifications,",222,1.96,ALERT
1781,"protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
","protected final void print_contactcontentshort(ObjectInfoPanel p2window,java.util.Locale p_localue){
  Collection<BrdItem> currentfacts=get_normal_contacts();
  if (currentfacts.isEmpty())   return;
  GuiResources cms=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p2window.append("", "" + cms.getString(""contacts"") + "" "");
  Integer contcontact___collectionrentfacts.size();
  p2window.append_itemcontact___collectionnt.toString(),resocmsString(""contact_info""),currentfacts);
}",92,6,"print_contact_info:print_contactcontentshort,p_window:p2window,p_locale:p_localue,contacts:currentfacts,resources:cms,contact_count:contact___collection,",305,4.1,ALERT
1783,,,76,3,,925,8.729986719290420,0
1784,"public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){
  int month, day, year, hour, minute, second;
  try {
    month=Integer.parseInt(monthStr);
    day=Integer.parseInt(dayStr);
    year=Integer.parseInt(yearStr);
    hour=Integer.parseInt(hourStr);
    minute=Integer.parseInt(minuteStr);
    second=Integer.parseInt(secondStr);
  }
 catch (  Exception e) {
    return null;
  }
  return toDate(month,day,year,hour,minute,second);
}
","public static java.util.Date todate(String monthstr,String hourSt,String yearString,String minutestr,String minuteSt,String secondWr){
  int week, no, start, inc, element, zone;
  try {
    week=Integer.parseInt(monthstr);
    no=Integer.parseInt(hourSt);
    yeastartteger.parseInt(yearString);
    hoincnteger.parseInt(minutestr);
   elemente=Integer.parseInt(minuteSt);
   zoned=Integer.parseInt(secondWr);
  }
 catch (  Exception e) {
    return null;
  }
  return todate(week,no,start,inc,element,zone);
}
",125,13,"toDate:todate,monthStr:monthstr,dayStr:hourSt,yearStr:yearString,hourStr:minutestr,minuteStr:minuteSt,secondStr:secondWr,month:week,day:no,year:start,hour:inc,minute:element,second:zone,",632,11.54,ALERT
1785,"public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
","public void post(String sequenceNames,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskWalker=currentTasksMap.get(sequenceNames);
    if (currentTaskWalker == null) {
      currentTaskWalker=new DispatcherTaskRunner(sequenceNames,dispatcherTask);
      currentTasksMap.put(sequenceNames,currentTaskWalker);
      executorService.execute(currentTaskWalker);
    }
 else {
      enqueueNextTask(sequenceNames,dispatcherTask);
    }
  }
}
",72,4,"queueName:sequenceNames,currentTaskRunner:currentTaskWalker,submit:post,",132,1.53,ALERT
1786,"protected void appendShortType(StringBuilder sb,FieldType fieldType,int fieldWidth){
  sb.append(""SMALLINT"");
}
","protected void appendIntField(StringBuilder sth,FieldType objectHeight,int fieldHeight){
  sth.append(""SMALLINT"");
}
",22,4,"appendShortType:appendIntField,sb:sth,fieldType:objectHeight,fieldWidth:fieldHeight,",625,6.2,ALERT
1787,,,17,1,,416,3.8778528650601700,0
1788,,,15,1,,443,3.3483445247014400,0
1789,,,111,6,,2029,23.3342604358991,0
1790,"public static int[] extractArcs(ASN1ObjectIdentifier oid) throws InvalidObjectIdException {
  String oidStr=oid.getId();
  StringTokenizer strTokCnt=new StringTokenizer(oidStr,""."",false);
  int arcCount=strTokCnt.countTokens();
  StringTokenizer strTok=new StringTokenizer(oidStr,""."",true);
  boolean expectDelimiter=false;
  int[] arcs=new int[arcCount];
  int i=0;
  while (strTok.hasMoreTokens()) {
    String token=strTok.nextToken();
    if (expectDelimiter && (!token.equals(""."") || !strTok.hasMoreTokens())) {
      throw new InvalidObjectIdException(res.getString(""InvalidOidNotNonNegativeIntSequence.exception.message""));
    }
 else     if (!expectDelimiter) {
      try {
        arcs[i]=Integer.parseInt(token);
        if (arcs[i] < 0) {
          throw new InvalidObjectIdException(res.getString(""InvalidOidNotNonNegativeIntSequence.exception.message""));
        }
        i++;
      }
 catch (      NumberFormatException ex) {
        throw new InvalidObjectIdException(res.getString(""InvalidOidNotNonNegativeIntSequence.exception.message""));
      }
    }
    expectDelimiter=!expectDelimiter;
  }
  return arcs;
}","public static int[] extractionARls(ASN1ObjectIdentifier olver) throws InvalidObjectIdException {
  String oiuriColllver.getId();
  StringTokenizer sstrTokConwdnew StringTokenizer(uriColl,""."",false);
  int ararccounttrTokConwd.countTokens();
  StringTokenizer sstrIternew StringTokenizer(uriColl,""."",true);
  boolean expectDelIMinator=false;
  int[] refions=new int[arccount];
  int c=0;
  while (strIter.hasMoreTokens()) {
    String ttokenstrIter.nextToken();
    if (eexpectDelIMinator&& (!ttokenequals(""."") || !strIter.hasMoreTokens())) {
      throw new InvalidObjectIdException(res.getString(""InvalidOidNotNonNegativeIntSequence.exception.message""));
    }
 else     if (!expectDelIMinator) {
      try {
        refions[c]=Integer.parseInt(token);
        if (refions[c] < 0) {
          throw new InvalidObjectIdException(res.getString(""InvalidOidNotNonNegativeIntSequence.exception.message""));
        }
        c++;
      }
 catch (      NumberFormatException ex) {
        throw new InvalidObjectIdException(res.getString(""InvalidOidNotNonNegativeIntSequence.exception.message""));
      }
    }
    expectDelIMinator=!expectDelIMinator;
  }
  return refions;
}",209,10,"extractArcs:extractionARls,oid:olver,oidStr:uriColl,strTokCnt:strTokConwd,arcCount:arccount,strTok:strIter,arcs:refions,i:c,expectDelimiter:expectDelIMinator,",674,7.39,ALERT
1792,"private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {
    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollOffset > 0) {
      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);
    }
 else     if (mUnconsumedOverScrollOffset < 0) {
      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}","private void consumeNestSort(int dxUncooved,int dyUncomerved,int dxFinalUNconsuming,int dyFinalUnclesume){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnclesume != 0) {
   mUnconsumedAboveScrollOffsett+=-dyFinalUnclesume;
    int MaxPoint=mOverScrollOffsetLimit;
    if (mUnconsumedAboveScrollOffset > 0) {
      mUnconsumedAboveScrollOffset=Math.min(mMaxPointmUnconsumedAboveScrollOffset);
    }
 else     if (mUnconsumedAboveScrollOffset < 0) {
      mUnconsumedAboveScrollOffset=Math.max(-mMaxPointmUnconsumedAboveScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUncooved,dyUncomerved);
}",96,7,"consumeNestedScroll:consumeNestSort,dxUnconsumed:dxUncooved,dyUnconsumed:dyUncomerved,dxFinalUnconsumed:dxFinalUNconsuming,dyFinalUnconsumed:dyFinalUnclesume,mUnconsumedOverScrollOffset:mUnconsumedAboveScrollOffset,maxOffset:MaxPoint,",1656,20.03,ALERT
1793,"private String buildToolTip(final CTaggedGraphNodesContainerNode node){
  final StringBuilder tooltip=new StringBuilder(""<html>"");
  boolean first=true;
  for (  final NaviNode graphnode : node.getGraphNodes()) {
    if (!first) {
      tooltip.append(""<br>"");
    }
    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));
    first=false;
  }
  return tooltip + ""</html>"";
}
","private String gettoolTips(final CTaggedGraphNodesContainerNode odes){
  final StringBuilder awbox=new StringBuilder(""<html>"");
  boolean once=true;
  for (  final NaviNode Graphode : odes.getGraphNodes()) {
    if (!once) {
      awbox.append(""<br>"");
    }
    awbox.append(CNodesDisplayString.getDisplayString(Graphode));
    once=false;
  }
  return awbox + ""</html>"";
}
",74,5,"buildToolTip:gettoolTips,node:odes,tooltip:awbox,graphnode:Graphode,first:once,",533,5.7,ALERT
1794,"private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}","private int moveComponentonents(Container window,int x,int y,int width,int height,int rowStart,int rowEnd,boolean elTR,boolean useLinence,int[] ascent,int[] desCENT){
switch (newAlign) {
case LEFT:
    x+=elTR ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=elTR ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbasenceHeight=0;
int basinelPosition=0;
if (useLinence) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=window.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,desCENT[i]);
}
 else {
nonbasenceHeight=Math.maxmm.getHeight(),nonbasenceHeight);
}
}
}
height=Math.max(maxAscent +maxDescentt,nonbasenceHeight);
basinelPosition=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=window.getComponent(i);
if (m.isVisible()) {
int cy;
if (useLinence && ascent[i] >= 0) {
cy=y + basinelPosition + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (elTR) {
m.setLocation(x,cy);
}
 else {
m.setLocation(window.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}",370,19,"moveComponents:moveComponentonents,target:window,ltr:elTR,useBaseline:useLinence,descent:desCENT,nonbaselineHeight:nonbasenceHeight,baselineOffset:basinelPosition,",811,13.81,ALERT
1796,,,25,2,,761,8.187408888340000,0
1797,,,54,5,,1401,26.803765801588700,0
1798,"private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
","private void assertBackUPDetails(final BackupStatus pullupState){
  Map<DistributedMember,Set<PersistentID>> backupMap=pullupState.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
",90,5,"backupStatus:pullupState,assertBackupStatus:assertBackUPDetails,",68,1.37,ALERT
1800,,,23,1,,443,6.3598924080530800,0
1801,"public GradleDistribution deserializeFromString(String distributionString){
  Preconditions.checkNotNull(distributionString);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith(""))"")) {
    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith(""))"")) {
    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith(""))"")) {
    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributionString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributionString);
  throw new RuntimeException(message);
}","public GradleDistribution deserializeFromString(String distributArray){
  Preconditions.checkNotNull(distributArray);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributArray.startsWith(localInstallationPrefix) && distributArray.endsWith(""))"")) {
    String localInstallationDir=distributArray.substring(localInstallationPrefix.length(),distributArray.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributArray.startsWith(remoteDistributionPrefix) && distributArray.endsWith(""))"")) {
    String remoteDistributionUri=distributArray.substring(remoteDistributionPrefix.length(),distributArray.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributArray.startsWith(versionPrefix) && distributArray.endsWith(""))"")) {
    String version=distributArray.substring(versionPrefix.length(),distributArray.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributArray.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributArray);
  throw new RuntimeException(message);
}",224,10,"distributionString:distributArray,",68,0.75,ALERT
1802,"public void releaseAnyConnection(Connection connection) throws SQLException {
  try {
    connection.close();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}
","public void releaseANYConnection(Connection con) throws SQLException {
  try {
    con.close();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}
",34,2,"releaseAnyConnection:releaseANYConnection,connection:con,",477,3.82,ALERT
1803,,,38,3,,1137,12.046357202529900,0
1804,"public StateMachine createStateMachine(StateMachineDefinition stateMachineDefinition){
  final Map<EventDefinition,EventData> eventDataMap=stateMachineDefinition.getEventDataMap();
  Set<Event> allEvents=createAllEvents(eventDataMap);
  Set<StateDefinition> stateDefinitions=stateMachineDefinition.getStates();
  Set<State> states=new HashSet<>();
  for (  StateDefinition stateDefinition : stateDefinitions) {
    State state=convertStateDefinitionToState(stateDefinition);
    states.add(state);
  }
  StateMachine stateMachine=new StateMachine(stateMachineDefinition.getVersion(),stateMachineDefinition.getName(),stateMachineDefinition.getDescription(),states,stateMachineDefinition.getCorrelationId());
  stateMachinesDAO.create(stateMachine);
  for (  Event event : allEvents) {
    event.setStateMachineInstanceId(stateMachine.getId());
    eventPersistenceService.persistEvent(event);
  }
  for (  State state : stateMachine.getStates()) {
    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));
  }
  return stateMachine;
}","public StateMachine createRegionComputer(StateMachineDefinition statemachineDesign){
  final Map<EventDefinition,EventDaeventInfoDataaMap=statemachineDesign.getEventDataMap();
  Set<Event> aallStatescreateAllEvents(eventInfoData);
  Set<StateDefinitistateDefinitionsions=statemachineDesign.getStates();
  Set<State> states=new HashSet<>();
  for (  StateDefinition stateFamily : stateDefinitions) {
    Ststatetate=convertStateDefinitionToState(stateFamily);
    states.add(state);
  }
  StateMachine stateMachine=new StateMachine(statemachineDesign.getVersion(),statemachineDesign.getName(),statemachineDesign.getDescriptiostatesates,statemachineDesign.getCorrelationId())stateMachineine stateMachine=new StateMachine(statemachineDesign.getVersion(),statemachineDesign.getName(),statemachineDesign.getDescriptiostatesates,statemachineDesign.getCorrelationId());
  stateMachinesDAO.create(stateMachine);
  for (  Event event : allStates) {
    event.setStateMachineInstanceId(stateMachine.getId());
    eventPersistenceService.persistEvent(event);
  }
  for (  State state : stateMachine.getStates()) {
    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));
  }
  return stateMachine;
}",198,10,"createStateMachine:createRegionComputer,stateMachineDefinition:statemachineDesign,eventDataMap:eventInfoData,allEvents:allStates,stateDefinition:stateFamily,",480,3.81,ALERT
1805,"private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}","private void updateUiFromCommand(Command server){
  if (server == null) {
    return;
  }
  actionsComboBox.setText(server.getAction());
  dataTextField.setText(server.getData());
  categoryTextField.setText(server.getCategory());
  mimeTextField.setText(server.getMimeType());
  componentTextField.setText(server.getComponent());
  userTextField.setText(server.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=server.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : server.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=server.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}",216,6,"command:server,",55,0.52,ALERT
1806,,,90,3,,1140,23.700560077031500,0
1807,"public static double P_Harmonic(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmonic(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}","public static double P_Chormatic(int Country[][],int Ypred[][]){
  int allMissings=0;
  int N=Country.length;
  double loss=0.0;
  for (int info=0; info < N; info++) {
    if (allMissing(Country[info])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Chormatic(Country[info],Ypred[info]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}",119,8,"i:info,Y:Country,P_Harmonic:P_Chormatic,",239,9.12,ALERT
1808,,,173,9,,3077,36.01297281980510,0
1809,"public void addPauseListener(AnimatorPauseListener listener){
  if (mPauseListeners == null) {
    mPauseListeners=new ArrayList<AnimatorPauseListener>();
  }
  mPauseListeners.add(listener);
}
","public void addpauseHandler(AnimatorPauseListener Listener){
  if (mRepeatListeners == null) {
    mRepeatListeners=new ArrayList<AnimatorPauseListener>();
  }
  mRepeatListeners.add(Listener);
}
",34,3,"mPauseListeners:mRepeatListeners,listener:Listener,addPauseListener:addpauseHandler,",83,0.94,ALERT
1810,"private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}","private void handleResp(AvsResponse page){
  boolean checkAfter=(avsQueue.size() == 0);
  if (page != null) {
    for (int ci=page.size() - 1; ci >= 0; ci--) {
      if (page.get(ci) instanceof AvsReplaceAllItem || page.get(ci) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        page.remove(ci);
      }
    }
    Log.ci(TAG,""Adding "" + page.size() + "" items to our queue"");
    avsQueue.addAll(page);
  }
  if (checkAfter) {
    checkQueue();
  }
}",121,4,"response:page,i:ci,handleResponse:handleResp,",118,1.37,ALERT
1811,"public void addOperand(ISpacePredicate operand){
  if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>();
  _operandsList.add(operand);
}
","public void addExpands(ISpacePredicate OperAND){
  if (_OperandsChain == null)   _OperandsChain=new ArrayList<ISpacePredicate>();
  _OperandsChain.add(OperAND);
}
",32,3,"addOperand:addExpands,operand:OperAND,_operandsList:_OperandsChain,",184,1.54,ALERT
1812,,,16,3,,1118,8.708438102404280,0
1813,"private static String checksumMD5(String data){
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""MD5"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(""Unable to create MD5 instance"",ex);
  }
  return hexEncode(md5.digest(data.getBytes()));
}","private static String checksumSHA512(String data){
  MessageDigest md15=null;
  try {
    md15=MessageDigest.getInstance(""MD5"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(""Unable to create MD5 instance"",ex);
  }
  return hexEncode(md15.digest(data.getBytes()));
}",58,3,"md5:md15,checksumMD5:checksumSHA512,",57,0.52,ALERT
1814,"@Override public boolean equalsValue(final Object other){
  return Objects.equals(this.value,other);
}
","@Override public boolean equallsValues(final Object self){
  return Objects.equals(this.value,self);
}
",24,2,"equalsValue:equallsValues,other:self,",195,2.31,ALERT
1815,"public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}","public static void write(int px1,int vy81,Image image,int image·size,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image·size * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image·size,image_height,pixels,0,image·size);
  pixelgrabber.grabPixels();
  LinkRaster.write(px1,vy81,image·size,image_height,pixels,properties,dos);
}",93,10,"y1:vy81,image_width:image·size,x1:px1,",92,5.58,ALERT
1816,,,114,5,,1827,16.818908313910200,0
1817,"public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
","public String importTrl(String directory,int AD_Client_ID,String AD_language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String lang=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,lang);
    return lang;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
",180,11,"msg:lang,AD_Language:AD_language,",207,1.41,ALERT
1818,,,86,4,,1333,18.407332734266900,0
1820,"public java.lang.StringBuffer insert(int offset,char c){
  internal.insert(offset,c);
  return this;
}
","public java.lang.StringBuffer with(int offset,char c){
  internal.with(offset,c);
  return this;
}
",28,3,"insert:with,",39,1.68,ALERT
1821,"public void testPlusMathContextPositive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c=""929487820944884782312124789.8748298842"";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals(""incorrect value"",c,res.toString());
  assertEquals(""incorrect scale"",cScale,res.scale());
}","public void assertPlusMathcontextposclusive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c=""929487820944884782312124789.8748298842"";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals(""incorrect value"",c,res.toString());
  assertEquals(""incorrect scale"",cScale,res.scale());
}",101,10,"testPlusMathContextPositive:assertPlusMathcontextposclusive,",76,0.73,ALERT
1822,,,67,3,,1133,12.39406043291090,0
1823,"public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}","public static double[] expandArrayD(int bufferSize,double[] CurrentAmount){
  if (CurrentAmount == null) {
    return new double[bufferSize * 3];
  }
  int length=CurrentAmount.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(CurrentAmount,0,ret,0,length);
  return ret;
}",74,5,"currentArray:CurrentAmount,",47,2.34,ALERT
1824,,,129,2,,811,22.120706895987200,0
1825,"public void addMessage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
","public void setMsg(String content){
  messages.addLast(content);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  slice=messages.size();
}
",42,3,"addMessage:setMsg,message:content,pointer:slice,",712,6.31,ALERT
1826,,,50,3,,861,8.492070114612580,0
1827,"public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}
","public final int send(){
  if (GWT.isScript()) {
    return jsArray.send();
  }
 else {
    return javaArray.send();
  }
}
",35,1,"size:send,",35,0.28,ALERT
1828,"public void unlockForClear(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
","public void unlockforClient(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem shared=InternalDistributedSystem.getAnyInstance();
    if (shared != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (shared != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
",106,3,"instance:shared,unlockForClear:unlockforClient,",93,1.03,ALERT
1829,,,26,2,,664,10.48328810930250,0
1830,"@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}","@Override public void MousePushed(MouseEvent el){
  m_frameLimiter.setRepeats(true);
  if ((el.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !el.isAltDown() && m_clickState == 0 && m_scaling == 0) {
    if (((el.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((el.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_clickState=2;
    }
 else     if (((el.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((el.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      mm_oldCameraPointwlayerel.getX();
      mm_oldCameraPointhdepthel.getY();
      mm_newMousePoswlayerel.getX();
      m_newMousePos.hdepthel.getY();
      m_clickState=3;
      Graphics c=getGraphics();
      if (m_ZoomBoxColor == null) {
        c.setColor(Color.black);
      }
 else {
        c.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        c.setXORMode(Color.white);
      }
 else {
        c.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRecc(m_oldCameraPoint.width,m_olayereraPoint.heightdeptm_newMousePosth layerldCameraPoint.widlayem_newMousePosheidepthm_oldCameraPoint.depth);
      c.dispose();
    }
 else {
      mm_oldCameraPointwlayerel.getX();
      mm_oldCameraPointhdepthel.getY();
      mm_newMousePoswlayerel.getX();
      m_newMousePos.hdepthel.getY();
      m_clickState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((el.getButton() == MouseEvent.BUTTON1) && el.isAltDown() && el.isShiftDown()&& !el.isControlDown()) {
    saveComponent();
  }
 else   if (m_clickState == 0 && m_scaling == 0) {
  }
}",374,8,"mousePressed:MousePushed,e:el,m_mouseState:m_clickState,m_oldMousePos:m_oldCameraPoint,width:layer,height:depth,g:c,",475,4.46,ALERT
1831,,,104,7,,1982,22.103883159160600,0
1832,"public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}","public final void og(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  og(lm);
}",147,8,"log:og,",178,1.76,ALERT
1833,"public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}","public void test(){
  Object[] iterChargINGSeries=chargingTimes.toArray();
  Arrays.sort(iterChargINGSeries);
  for (int iip0; iip< iterChargINGSeries.length; ip++) {
    ChargeLog cucurLogChargeLog)iterChargINGSeries[ip];
   curLogm.test();
  }
}",60,4,"print:test,iterChargingTimes:iterChargINGSeries,i:ip,curItem:curLog,",185,2.58,ALERT
1834,,,81,3,,1064,7.884250326951350,0
1835,"public void serialize(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}","public void serialized(String client,byte[] um,OutputStream write) throws IOException {
  byte[] forward=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),forward,0);
  for (int i=j; i j client.length() && j < COMMAND_LEN; j++) {
    heforward + i]j(byte)(client.codePointAt(j) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(um.length,forward,4 + COMMAND_LEN);
  bymask hash=doubleDigest(um);
  System.arraycopy(hmask0,forward,4 + COMMAND_LEN + 4,4);
  write.write(forward);
  out.write(uwrite  out.write(um);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",client,bytesToHexStforwardeader) + bytesToHexString(um));
}",179,7,"serialize:serialized,name:client,message:um,out:write,header:forward,i:j,hash:mask,",1042,9.92,ALERT
1836,"public static Properties createProperties(final Map<String,String> map){
  Properties properties=new Properties();
  if (!(map == null || map.isEmpty())) {
    for (    Entry<String,String> entry : map.entrySet()) {
      properties.setProperty(entry.getKey(),entry.getValue());
    }
  }
  return properties;
}
","public static Properties createProproperties(final Map<String,String> rule){
  Properties sites=new Properties();
  if (!(rule == null || rule.isEmpty())) {
    for (    Entry<String,String> edata: rule.entrySet()) {
      sites.setProperty(data.getKey(),data.getValue());
    }
  }
  return sites;
}
",79,4,"createProperties:createProproperties,map:rule,properties:sites,entry:data,",179,1.64,ALERT
1837,"public void deepSort(int[] setFeatureSequence){
  featureSequence=setFeatureSequence;
  numberOfLeaves=0;
  tree=new MaryNode(0,featureVectors.length);
  sortNode(0,tree);
}","public void deepsort(int[] setFeatureQuesequence){
  featureSequence=setFeatureQuesequence;
  numberOfLeaves=0;
  tree=new MaryNode(0,featureVectors.length);
  sortNode(0,tree);
}",38,5,"deepSort:deepsort,setFeatureSequence:setFeatureQuesequence,",121,0.98,ALERT
1838,"void addRule(String[] selector,AttributeSet declaration,boolean isLinked){
  int n=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(selector[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}","void setStyle(String[] Selecto,AttributeSet declaration,boolean isLinked){
  intnn=Selecto.length;
  StringBuilder sb=new StringBuilder();
 sbb.append(Selecto[0]);
  for (int prev=1; prev < n; prev++) {
    sb.append(' ');
   sbb.append(Selecto[prev]);
  }
  String selectorName=sb.toString();
  Style module=getStyle(selectorName);
  if (module == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping Mutation=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
       MutationgMutationg.getChildSelectorMapping(Selecto[i],true);
      }
      module=Mutation.getStyle();
      if (module == null) {
        module=altRule;
        maMutationetStyle(module);
        refreshResolvedRulesselectorNamee,Selecto,module,Mutation.getSpecificity());
      }
    }
  }
  if (isLinked) {
    module=getLinkedStyle(module);
  }
  module.addAttributes(declaration);
}",216,12,"addRule:setStyle,selector:Selecto,counter:prev,rule:module,mapping:Mutation,",515,5.3,ALERT
1839,"public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {
  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));
}
","public void convertBuiltinVoice(String playSpecification,InputStream script) throws IOException {
  builtinSounds.put(playSpecification,convertBuiltinSound(script));
}
",26,3,"installBuiltinSound:convertBuiltinVoice,soundIdentifier:playSpecification,data:script,",316,3.22,ALERT
1840,"public static Object toArray(Collection<?> collection,Class<?> componentType){
  if (componentType.isPrimitive()) {
    Object array=Array.newInstance(componentType,collection.size());
    int index=0;
    for (    Object value : collection) {
      Array.set(array,index++,value);
    }
    return array;
  }
  return collection.toArray((Object[])Array.newInstance(componentType,collection.size()));
}","public static Object toPoint(Collection<?> behavior,Class<?> targetType){
  if (targetType.isPrimitive()) {
    Object array=Array.newInstance(targetType,behavior.size());
    int index=0;
    for (    Object value : behavior) {
      Array.set(array,index++,value);
    }
    return array;
  }
  return behavior.toPoint((Object[])Array.newInstance(targetType,behavior.size()));
}",98,6,"componentType:targetType,collection:behavior,toArray:toPoint,",196,3.89,ALERT
1841,,,89,4,,1422,10.700457874933900,0
1843,"public static boolean isWindows8(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}","public static boolean iswindows16(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}",35,1,"isWindows8:iswindows16,",27,0.26,ALERT
1844,"private Map.Entry<K,V> doRemoveFirstEntry(){
  for (Node<K,V> b, n; ; ) {
    if ((n=(b=head.node).next) == null)     return null;
    Node<K,V> f=n.next;
    if (n != b.next)     continue;
    Object v=n.value;
    if (v == null) {
      n.helpDelete(b,f);
      continue;
    }
    if (!n.casValue(v,null))     continue;
    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();
    clearIndexToFirst();
    @SuppressWarnings(""unchecked"") V vv=(V)v;
    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,vv);
  }
}
","private Map.Entry<K,V> doRemoveSingleEntry(){
  for (Node<K,V> base, c; ; ) {
    if ((n=(case=head.node).next) == null)     return null;
    Node<K,V> family=c.next;
    if (n !c base.next)     continue;
    Object vp=c.value;
    if (vp == null) {
      n.hclpDelete(base,family);
      continue;
    }
    if (!c.casValue(vp,null))     continue;
    if (!n.acpendMarker(f) family| !base.casNext(c,family))     findFirst();
    clearIndexToFirst();
    @SuppressWarnings(""unchecked"") V vlv(V)vp;
    return new AbstractMap.SimpleImmutableEntry<K,V>(c.key,lv);
  }
}
",172,6,"doRemoveFirstEntry:doRemoveSingleEntry,b:base,n:c,f:family,v:vp,vv:lv,",618,5.55,ALERT
1845,"private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}","private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> jc){
  final DBIDs ids=jc.getIDs();
  double weight=ids.size();
  for (DBIDIter ul=ids.ul(); ul.valid(); ul.advance()) {
    double[] projsNP=proj.fastProjectDataToRenderSpace(rel.get(ul));
    if (projsNP[0] != projsNP[0] || projsNP[1] != projsNP[1]) {
      continue;
    }
    hull.add(projsNP);
  }
  for (Iter<Cluster<Model>> ul=hier.iterChildren(jc); ul.valid(); ul.advance()) {
    weight+=.5 * addRecursively(hull,hier,ul.get());
  }
  return weight;
}",175,8,"iter:ul,projP:projsNP,clus:jc,",124,5.69,ALERT
1846,"public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
","public void loadfromFile(){
  for (  String service : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(service);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
",201,10,"resource:service,updateFromResource:loadfromFile,",87,0.88,ALERT
1847,"private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}","private static Type[] unrollBans(final Map<TypeVariable<?>,Type> typeArguments,final Type[] wounded){
  Type[] result=wounded;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}",100,6,"unrollBounds:unrollBans,bounds:wounded,",64,0.91,ALERT
1848,"public void collapseBuilding(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    collapseBuilding(coords);
  }
}
","public void collureBuilding(Building bdg){
  buildings.removeElement(bdg);
  Enumeration<Coords>bldgCoorders=bdg.getCoords();
  while (bldgCoorder.hasMoreElements()) {
    final Coords cCoinatesbldgCoorder.nextElement();
    collureBuilding(Coinates);
  }
}
",53,4,"collapseBuilding:collureBuilding,bldg:bdg,bldgCoords:bldgCoorder,coords:Coinates,",631,9.44,ALERT
1849,,,57,3,,1114,8.535247906049090,0
1851,"public static void printLine(Object message){
  if (!isDisabled()) {
    printLine(String.valueOf(message));
  }
}
","public static void showRow(Object essage){
  if (!isDisabled()) {
    showRow(String.valueOf(essage));
  }
}
",29,2,"printLine:showRow,message:essage,",211,1.91,ALERT
1852,,,21,2,,798,7.938959002494810,0
1853,,,31,3,,1063,12.766612148284900,0
1854,,,146,4,,1507,12.918804279963200,0
1855,"public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
","public static void closeEL(InputStream ib){
  try {
    if (ib != null)     ib.close();
  }
 catch (  Throwable t) {
  }
}
",32,2,"is:ib,",36,0.23,ALERT
1856,"public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){
  alphaAnimator(animators,view,0f);
  animators.add(ObjectAnimator.ofFloat(view,""translationY"",-recyclerView.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,""Added TOP Animator"");
}","public static void slideInFromBottomanimater(@NonNull List<Animator> generers,@NonNull View model,RecyclerView recycllerLayout){
  alphaAnimator(generers,model,0f);
  generers.add(ObjectAnimator.ofFloat(model,""translationY"",-recycllerLayout.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,""Added TOP Animator"");
}",73,4,"slideInFromTopAnimator:slideInFromBottomanimater,animators:generers,view:model,recyclerView:recycllerLayout,",544,8.17,ALERT
1857,"public static GeoTimeSerie detect(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,Collection<String> patterns,boolean standardizePAA) throws WarpScriptException {
  GeoTimeSerie gtsPatterns=GTSHelper.bSAX(gts,alphabetSize,wordLen,windowLen,standardizePAA);
  GTSHelper.sort(gtsPatterns);
  GeoTimeSerie detected=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,16);
  detected.setMetadata(gts.getMetadata());
  int lastidx=-1;
  for (int i=0; i < gtsPatterns.values; i++) {
    if (!patterns.contains(gtsPatterns.stringValues[i])) {
      continue;
    }
    for (int j=0; j < windowLen; j++) {
      if (i + j > lastidx) {
        lastidx=i + j;
        GTSHelper.setValue(detected,GTSHelper.tickAtIndex(gts,lastidx),GTSHelper.locationAtIndex(gts,lastidx),GTSHelper.elevationAtIndex(gts,lastidx),GTSHelper.valueAtIndex(gts,lastidx),false);
      }
    }
  }
  return detected;
}","public static GeoTimeSerie disDetect(GeoTimeSerie gTs,int alphumerSize,int wordlen,int dayLength,Collection<String> Patternns,boolean standardizeARPAA) throws WarpScriptException {
  GeoTimeSerie gtgtsPatternnsTSHelper.bSAX(gTs,alphumerSize,wordlen,dayLength,standardizeARPAA);
  GTSHelper.sort(gtsPatternns);
  GeoTimeSerie defection=new GeoTimeSerie(gTs.lastbucket,gTs.bucketcount,gTs.bucketspan,16);
  defection.setMetadata(gTs.getMetadata());
  int lastidex=-1;
  for (int il0; il< gtsPatternns.values; l++) {
    if (!Patternns.contains(gtsPatternns.stringValues[l])) {
      continue;
    }
    for (int x=0; x < dayLength; x++) {
      if (il+ jx> lastidex) {
        lastidex=l + x;
        GTSHelper.setValue(defection,GTSHelper.tickAtIndex(gTs,lastidex),GTSHelper.locationAtIndex(gTs,lastidex),GTSHelper.elevationAtIndex(gTs,lastidex),GTSHelper.valueAtIndex(gTs,lastidex),false);
      }
    }
  }
  return defection;
}",210,12,"detect:disDetect,gts:gTs,alphabetSize:alphumerSize,wordLen:wordlen,windowLen:dayLength,patterns:Patternns,standardizePAA:standardizeARPAA,gtsPatterns:gtsPatternns,detected:defection,lastidx:lastidex,i:l,j:x,",1055,20.06,ALERT
1860,,,17,2,,792,8.84406022230784,0
1861,"public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
","public void reversion(final VirtualFile framework,final List<FilePath> faces) throws VcsException {
  for (  List<String> pathsPathingssFileUtil.chunkPaths(framework,faces)) {
    GitSimpleHandler handldirectorGitSimpleHandler(myProject,framework,GitCommand.CHECKOUT);
    director.addParameters(""HEAD"");
    director.endOptions();
    handirectordParameters(Pathings);
    director.run();
  }
}
",79,5,"revert:reversion,root:framework,files:faces,paths:Pathings,handler:director,",388,4.02,ALERT
1862,"public void layout(Container container){
  Map<Location,Drawable> comps=getComponentsByLocation(container);
  Drawable north=comps.get(Location.NORTH);
  Drawable northEast=comps.get(Location.NORTH_EAST);
  Drawable east=comps.get(Location.EAST);
  Drawable southEast=comps.get(Location.SOUTH_EAST);
  Drawable south=comps.get(Location.SOUTH);
  Drawable southWest=comps.get(Location.SOUTH_WEST);
  Drawable west=comps.get(Location.WEST);
  Drawable northWest=comps.get(Location.NORTH_WEST);
  Drawable center=comps.get(Location.CENTER);
  double widthWest=getMaxWidth(northWest,west,southWest);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double heightNorth=getMaxHeight(northWest,north,northEast);
  double heightSouth=getMaxHeight(southWest,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;
  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;
  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;
  Rectangle2D bounds=container.getBounds();
  Insets2D insets=container.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;
  double xCenter=bounds.getMinX() + insets.getLeft();
  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;
  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;
  double yCenter=bounds.getMinY() + insets.getTop();
  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;
  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);
  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);
  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);
  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);
  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);
  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);
  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());
  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());
}","public void position(Container cover){
  Map<Location,Drawabcompssomps=getComponentsByLocation(cover);
  Drawable nsinglecompss.get(Location.NORTH);
  Drawable nnorthEastcompss.get(Location.NORTH_EAST);
  Drawable eeastcompss.get(Location.EAST);
  Drawable ssouthEastcompss.get(Location.SOUTH_EAST);
  Drawable ssouthcompss.get(Location.SOUTH);
  Drawable snorthSouthcompss.get(Location.SOUTH_WEST);
  Drawable wwestcompss.get(Location.WEST);
  Drawable nnorthWestcompss.get(Location.NORTH_WEST);
  Drawable cabovecompss.get(Location.CENTER);
  double wwidthWestgetMaxWidth(nnorthWestwwestnorthSouth);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double hlatSouthgetMaxHeight(nnorthWestsingle,northEast);
  double hwidthLeftgetMaxHeight(northSouth,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double padWest=(widthWest > 0.0) ? getGapX() : 0.0;
  doubgapNorthrth=(latSouth > 0.0) ? getGapY() : 0.0;
  doublgapLeftth=(widthLeft > 0.0) ? getGapY() : 0.0;
  Rectanglfboundedunds=cover.getBounds();
  Insetinsetssets=cover.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=fbounded.getMinX() + insets.getLeft() - padWest - widthWest;
  double xCenter=fbounded.getMinX() + insets.getLeft();
  double xEast=fbounded.getMaxX() - insets.getRight() + gapEast;
  double yNorfboundednds.getMinY()insetsets.getTop()gapNorthrth - latSouth;
  double yCenter=fbounded.getMinY() + insets.getTop();
  double ySouthfboundeds.getMaxY() -insetss.getBottom() + gapLeft;
  layoutComponent(northWest,xWest,yNorth,widthWest,latSouth);
  layoutComponent(single,xCenter,yNorfboundednds.getWidth()insetsets.getHorizontal(),latSouth);
  layoutComponent(northEast,xEast,yNorth,widthEast,latSouth);
  layoutComponent(east,xEast,yCenter,widthEast,fbounded.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,widthLeft);
  layoutComponent(south,xCenter,ySoutfboundedds.getWidth() insetsts.getHorizontal(),widthLeft);
  layoutComponent(northSouth,xWest,ySouth,widthWest,widthLeft);
  layoutComponent(west,xWest,yCenter,widthWest,fbounded.getHeight() - insets.getVertical());
  layoutComponent(above,xCenter + getGapX(),yCenter + getGapY(),fbounded.getWidth() - ininsetsetHorizontal() - 2 * getGapX(),fbounded.getHeight() - insets.getVertical() - 2 * getGapY());
}",572,27,"layout:position,container:cover,comps:compss,north:single,southWest:northSouth,center:above,heightNorth:latSouth,heightSouth:widthLeft,gapWest:padWest,gapSouth:gapLeft,bounds:fbounded,",1379,15.53,ALERT
1863,"@SuppressWarnings(""unused"") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}","@SuppressWarnings(""unused"") public boolean onMoveevent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}",488,14,"onTouchEvent:onMoveevent,",93,1.06,ALERT
1864,,,21,1,,457,6.102731335163120,0
1865,,,16,2,,770,7.519867304960890,0
1866,"public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assetwk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}","public boolean caninvoked(MDepreciationWorkfile assessmentkn,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assessmentkn == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int always=0;
  int lifePeriods=assessmentkn.getUseLifeMonths(assessmentkn.isFiscal());
  boolean bug=(always <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ always+ "") ==> OK=""+ bug);
  return bug;
}",96,8,"assetwk:assessmentkn,ok:bug,offset:always,canInvoke:caninvoked,",133,6.01,ALERT
1867,"public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}","public static int b(Object mo){
  int eh=mo == null ? 0 : mo instanceof byte[] ? Arrays.hashCode((byte[])mo) : mo.hashCode();
  eh+=(eh << 15) ^ 0xffffcd7d;
  eh^=(eh >>> 10);
  eh+=(eh << 3);
  eh^=(eh >>> 6);
  eh+=(eh << 2) + (eh << 14);
  return eh ^ (eh >>> 16);
}",106,3,"h:eh,o:mo,hash:b,",105,0.96,ALERT
1868,"public static <E>List<E> of(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}","public static <E>List<E> en(E e1,E peB,E e3){
  List<E> e=new ArrayList<>();
  e.add(e1);
  e.add(peB);
  e.add(e3);
  return e;
}",59,5,"of:en,list:e,e2:peB,",111,1.42,ALERT
1869,"@Override protected void failed(){
  relation.setCanceled(true);
  super.failed();
}
","@Override protected void fail(){
  relation.setCanceled(true);
  super.fail();
}
",22,1,"failed:fail,",34,0.32,ALERT
1870,"public boolean isInvalidNode(){
  ASTNode first=fNodes.get(0);
  ASTNode candidate=first.getParent();
  if (candidate == null)   return false;
  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}","public boolean hasInvalidPart(){
  ASTNode self=fNodes.get(0);
  ASTNodeCandidatede=self.getParent();
  if (Candidated == null)   return false;
  if (Candidated.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}",53,3,"isInvalidNode:hasInvalidPart,first:self,candidate:Candidated,",354,3.91,ALERT
1871,"public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
","public void refreshInheritedMethods(Set modifiedSuperExando){
  for (Iterator xi=modifiedSuperExando.iterator(); xi.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)xi.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
",54,4,"i:xi,modifiedSuperExpandos:modifiedSuperExando,",72,0.91,ALERT
1872,"private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){
  final List<String> names=new ArrayList<>();
  for (  String localeName : localeNames) {
    if (symbolicSuffix.isEmpty()) {
      names.add(localeName);
    }
 else {
      names.add(localeName + ""."" + numSuffix);
      names.add(localeName + ""."" + symbolicSuffix);
    }
  }
  return names.toArray(new String[names.size()]);
}
","private static String[] collationMatchedGroupNames(final List<String> locilleList,final int numSeedIX,final String symbolicsuffix){
  final List<String> ks=new ArrayList<>();
  for (  String locemeName : locilleList) {
    if (symbolicsuffix.isEmpty()) {
      ks.add(locemeName);
    }
 else {
      ks.add(locemeName + ""."" + numSeedIX);
      ks.add(locemeName + ""."" + symbolicsuffix);
    }
  }
  return ks.toArray(new String[ks.size()]);
}
",105,6,"collationMatchingRuleNames:collationMatchedGroupNames,localeNames:locilleList,numSuffix:numSeedIX,symbolicSuffix:symbolicsuffix,names:ks,localeName:locemeName,",358,6.96,ALERT
1873,,,37,2,,666,5.433253419399260,0
1874,"private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
","private static String generateJWT(String ssl,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(ssl,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException(""Cannot generate JWT"",e);
  }
}
",68,6,"secret:ssl,",43,1.13,ALERT
1875,"public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text){
  return parseExpression(context,configNamespaces,text,0,false);
}","public static List<Node> parseExecansion(Context c,HashSet<String> currentNameships,String content){
  return parseExecansion(c,currentNameships,content,0,false);
}",36,4,"parseExpression:parseExecansion,context:c,configNamespaces:currentNameships,text:content,",239,2.6,ALERT
1876,"public static void changeFont(JComponent comp,int style){
  Font font=comp.getFont();
  comp.setFont(font.deriveFont(style));
}
","public static void changefont(JComponent css,int level){
  Fontfot=css.getFont();
  css.setFont(fo.deriveFont(level));
}
",34,4,"changeFont:changefont,comp:css,style:level,font:fo,",172,2.41,ALERT
1877,"public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isReversal) {
      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException(""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",totalCreditedAmount,totalAmount);
  }
}","public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transflowID,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isReversal) {
      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transflowID,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transflowID,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transflowID,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transflowID,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException(""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",totalCreditedAmount,totalAmount);
  }
}",323,23,"transactionId:transflowID,",142,3.28,ALERT
1878,"private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}","private static String convertNumberStringToTwoDivit(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}",64,2,"forceNumberStringToTwoDigits:convertNumberStringToTwoDivit,",63,0.74,ALERT
1879,,,23,2,,380,3.587069543202720,0
1880,,,82,2,,779,8.389053988456730,0
1882,,,29,2,,665,14.90629066626230,0
1883,"protected static Vector convertToVector(final Object[] anArray){
  if (anArray == null) {
    return null;
  }
  final Vector v=new Vector(anArray.length);
  for (  final Object element : anArray) {
    v.addElement(element);
  }
  return v;
}
","protected static Vector converToMatrix(final Object[] canObject){
  if (canObject == null) {
    return null;
  }
  final Vector v=new Vector(canObject.length);
  for (  final Object element : canObject) {
    v.addElement(element);
  }
  return v;
}
",56,4,"convertToVector:converToMatrix,anArray:canObject,",125,1.03,ALERT
1884,"public boolean incrementReceived(){
  Long diff=System.currentTimeMillis() - startTime;
  if (diff >= 1000) {
    packetsPerSecond=intervalPackets;
    startTime=System.currentTimeMillis();
    intervalPackets=1;
    return true;
  }
 else {
    intervalPackets++;
  }
  this.receivedPackets++;
  return false;
}","public boolean incrementmentCreceived(){
  Long info=System.currentTimeMillis() - startTime;
  if (info >= 1000) {
    packetsPerSecond=intervalPackets;
    startTime=System.currentTimeMillis();
    intervalPackets=1;
    return true;
  }
 else {
    intervalPackets++;
  }
  this.receivedPackets++;
  return false;
}",59,6,"diff:info,incrementReceived:incrementmentCreceived,",66,1.4,ALERT
1885,"private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}","private static String tostring(double COeff){
  final String uc=Double.tostring(COeff);
  if (uc.endsWith("".0"")) {
    return uc.substring(0,uc.length() - 2);
  }
 else {
    return uc;
  }
}",54,3,"coeff:COeff,toString:tostring,c:uc,",86,1.28,ALERT
1886,,,46,3,,1055,24.99667432308200,0
1887,"public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}","public static List<SpaceTime> divideConquerBrownIANLine(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> groups=new LinkedList<SpaceTime>();
  groups.add(start);
  groups.add(end);
  stop=false;
  if (divideConquerBrownIANLine(normal,0,groups,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return groups;
  }
  stop=false;
  return null;
}",99,8,"points:groups,divideConquerBrownianBridge:divideConquerBrownIANLine,",112,2.44,ALERT
1888,,,27,2,,800,5.676109333833060,0
1889,"public static long[] interpose(long[] vector,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,updated,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    updated[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,updated,offset + len,vectorLen - offset);
  return updated;
}","public static long[] Interposition(long[] vector,int vectorLen,int offset,int len){
  long[] latest=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,latest,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    latest[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,latest,offset + len,vectorLen - offset);
  return latest;
}",110,8,"updated:latest,interpose:Interposition,",221,2.0,ALERT
1890,"private int countNonNewline(String str,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (str.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (str.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}","private int countNonNewline(String sec,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (sec.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (sec.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}",74,6,"str:sec,",50,0.51,ALERT
1891,"protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}","protected void drawTextColor(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawTextColor(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawTextColor(text2,x - offset,y + (36f * pixelDensity),textPaint);
}",167,10,"drawText:drawTextColor,",71,0.85,ALERT
1892,"public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : source.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + source + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(source.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}","public static List<String> unsafe(String from,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : from.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException(""String \'"" + from + ""\' contains illegal escaped character \'""+ c+ ""\'."");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(from.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}",296,13,"unescape:unsafe,source:from,",218,5.84,ALERT
1893,"private Optional<CuratorFramework> createClient(String zookeeperUrl){
  if (StringUtils.isNotBlank(zookeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
","private Optional<CuratorFramework> createClient(String zoeeeeperPath){
  if (StringUtils.isNotBlank(zoeeeeperPath)) {
    CuratorFramework cli=ConfigurationsUtils.getClient(zoeeeeperPath);
    cli.start();
    return Optional.of(cli);
  }
 else {
    return Optional.empty();
  }
}
",57,3,"client:cli,zookeeperUrl:zoeeeeperPath,",69,0.6,ALERT
1894,"static void normalize(StringBuilder number){
  String normalizedNumber=normalize(number.toString());
  number.replace(0,number.length(),normalizedNumber);
}","static void ormalizer(StringBuilder value){
  StringnormalisedPartr=ormalizer(value.toString());
  value.replace(0,value.length(),normalisedPart);
}",36,3,"normalize:ormalizer,number:value,normalizedNumber:normalisedPart,",152,1.46,ALERT
1895,"String generateKey() throws OracleException {
  byte[] data=null;
  try {
    data=HashFuncs.getRandom();
  }
 catch (  Exception e) {
    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());
  }
  if (data == null) {
    data=fetchGuid();
  }
  if (data == null) {
    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);
  }
  return (ByteArray.rawToHex(data));
}
","String genGenId() throws OracleException {
  byte[] raw=null;
  try {
    raw=HashFuncs.getRandom();
  }
 catch (  Exception e) {
    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());
  }
  if (raw == null) {
    raw=fetchGuid();
  }
  if (raw == null) {
    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);
  }
  return (ByteArray.rawToHex(raw));
}
",94,2,"generateKey:genGenId,data:raw,",113,1.2,ALERT
1896,"public static String cutFromIndexOf(String string,String substring){
  int i=string.indexOf(substring);
  if (i != -1) {
    string=string.substring(i);
  }
  return string;
}","public static String cutFromStringof(String arrow,String substr){
  xint i=arrow.indexOf(substr);
  if (xi != -1) {
    arrow=arrow.substr(xi);
  }
  return arrow;
}",44,4,"cutFromIndexOf:cutFromStringof,string:arrow,substring:substr,i:xi,",178,2.08,ALERT
1897,"public Exchange(final Request request,final Origin origin){
  this.currentRequest=request;
  this.origin=origin;
  this.timestamp=System.currentTimeMillis();
}
","public Exchange(final Request pull,final Origin ip){
  thcurrentSourceest=pull;
  this.ip=ip;
  this.timeestamp=System.currentTimeMillis();
}
",35,4,"request:pull,origin:ip,currentRequest:currentSource,timestamp:timeestamp,",1405,11.9,ALERT
1898,"public static String grabClass(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signature);
  return matcher.group(1);
}","public static String identifyclass(String signatures){
  Matcher matcher=sigRE.matcher(signatures);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signatures);
  return matcher.group(1);
}",59,4,"signature:signatures,grabClass:identifyclass,",59,0.52,ALERT
1899,,,17,4,,1482,15.448627948761000,0
1901,"public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}
","public byte[] extryptDATA(byte[] stigosData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}
",26,4,"stegoData:stigosData,extractData:extryptDATA,",53,0.66,ALERT
1902,"private V doGet(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}","private V goDelete(Object fee){
  if (fee == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> app=findPredecessor(fee,cmp), n=nbpp.next; ; ) {
      Object nv;
      int pc;
      if (nb == null)       break outer;
      Node<K,V> fmnb.next;
      if (n nb= app.next)       break;
      if ((vnvnb.value) == null) {
        n.nbelpDelete(app,m);
        break;
      }
      if (app.value == null || vnv== nb)       break;
      if ((cpccpr(cmp,fee,nb.fee)) == 0) {
        @SuppressWarnings(""unchecked"") V vce(V)nv;
        return ce;
      }
      if (pc < 0)       break outer;
      app=nb;
      nb=m;
    }
  }
  return null;
}",200,9,"doGet:goDelete,key:fee,b:app,n:nb,v:nv,c:pc,f:m,vv:ce,",633,6.69,ALERT
1903,,,17,2,,799,8.472701207796730,0
1904,"private void ensureCapacity(int additionalData){
  if ((this.position + additionalData) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + additionalData)) {
      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + additionalData;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}","private void enssureCapSpace(int AdditionalBytes){
  if ((this.position + AdditionalBytes) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + AdditionalBytes)) {
      newLength=this.byteBuffer.length + (int)(AdditionalBytes * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + AdditionalBytes;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}",136,5,"additionalData:AdditionalBytes,ensureCapacity:enssureCapSpace,",79,1.22,ALERT
1905,,,54,4,,1489,14.822350939114900,0
1907,"public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure condition){
  return dropWhile(self.toString(),condition);
}
","public static String dropsUnless(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure condition){
  return dropsUnless(self.toString(),condition);
}
",48,3,"dropWhile:dropsUnless,",27,0.54,ALERT
1908,"public static String toString(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.toString(l,10);
  }
  return NUMBERS[(int)l];
}","public static String ToFixed(long ol){
  if (ol < NUMBERS_MIN || ol > NUMBERS_MAX) {
    return Long.ToFixed(ol,10);
  }
  return NUMBERS[(int)ol];
}",41,2,"l:ol,toString:ToFixed,",60,0.54,ALERT
1909,,,81,4,,1269,18.717078745365100,0
1910,,,27,2,,795,8.773443802197770,0
1912,"public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}
","public int formatDouble(String localeFormattedInteger){
  return Integer.formatDouble(localeFormattedInteger);
}
",17,2,"parseInt:formatDouble,",33,0.27,ALERT
1913,"public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
","public static Entry addClassClass(Entry ticket){
  Attribute atextticket.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (text == null) {
    ticket.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return ticket;
}
",46,3,"addObjectClass:addClassClass,entry:ticket,attribute:text,",148,1.56,ALERT
1914,,,16,2,,659,5.46134660243988,0
1915,,,32,2,,781,6.308620206514990,0
1916,"@SuppressWarnings(""unchecked"") public static <K>ImmutableArray<K> empty(){
  return (ImmutableArray<K>)EMPTY;
}
","@SuppressWarnings(""unchecked"") public static <K>ImmutableArray<K> equal(){
  return (ImmutableArray<K>)EMPTY;
}
",28,1,"empty:equal,",31,0.25,ALERT
1917,,,13,2,,703,5.696034073829650,0
1919,"protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposals=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           proposals.add(editProposal);
        }
      }
    }
  }
  return proposals;
}
","protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> compositionitions=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider proider : proposalProviders) {
        for (        IEditProposal updateProosal : proider.getProposals(selectedView)) {
          if (updateProosal.isApplicable())           compositionitions.add(updateProosal);
        }
      }
    }
  }
  return compositionitions;
}
",88,5,"proposals:compositionitions,editProposal:updateProosal,provider:proider,",128,2.62,ALERT
1920,"public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}","public Builder addreadBody(byte[] error){
  Assertions.checkState(error != null && error.length > 0);
  segments.add(new Segment(error,null));
  return this;
}",42,2,"appendReadData:addreadBody,data:error,",53,0.46,ALERT
1921,"public boolean isProcessed(Trace trace,Node node,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(node.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ node+ "" direction=""+ direction+ ""? ""+ ret);
  }
  return ret;
}
","public boolean isaProcessured(Trace trace,Node one,Direction pair){
  boolean ret=false;
  if (processor.getNodeType() == one.getType() && processor.getDirection() == pair) {
    if (uriFilter == null || uriFilter.test(one.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ one+ "" direction=""+ pair+ ""? ""+ ret);
  }
  return ret;
}
",104,5,"isProcessed:isaProcessured,node:one,direction:pair,",230,2.27,ALERT
1923,"public boolean isStored(){
  return Integer.signum(id) != -1;
}","public boolean isStorer(){
  return Integer.signum(id) != -1;
}",18,1,"isStored:isStorer,",27,0.24,ALERT
1925,"void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());
    addOns.addAll(changes.getOldVersions());
    Set<Extension> extensions=new HashSet<>();
    extensions.addAll(changes.getUnloadExtensions());
    extensions.addAll(changes.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) {
      return;
    }
  }
  uninstallAddOns(caller,changes.getUninstalls(),false);
  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());
  allAddons.addAll(changes.getInstalls());
  for (  AddOn addOn : allAddons) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addOn);
    }
    downloadAddOn(addOn);
  }
}
","void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult grades){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn> addOns=new HashSet<>(grades.getUninstalls());
    addOns.addAll(grades.getOldVersions());
    Set<Extension> dependends=new HashSet<>();
    dependends.addAll(grades.getUnloadExtensions());
    dependends.addAll(grades.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,dependends,true)) {
      return;
    }
  }
  uninstallAddOns(caller,grades.getUninstalls(),false);
  Set<AddOn> allAddons=new HashSet<>(grades.getNewVersions());
  allAddons.addAll(grades.getInstalls());
  for (  AddOn addOn : allAddons) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addOn);
    }
    downloadAddOn(addOn);
  }
}
",190,7,"changes:grades,extensions:dependends,",88,3.41,ALERT
1926,"private PendingIntent createRequestPendingIntent(@NonNull String pendingIntentClassName){
  PendingIntent pendingIntent=null;
  try {
    Class classOfPendingIntent=Class.forName(pendingIntentClassName);
    if (classOfPendingIntent != null) {
      Intent intent=new Intent(mContext,classOfPendingIntent);
      pendingIntent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return pendingIntent;
}","private PendingIntent createRequestPendedIntent(@NonNull String pendingIntentFileNames){
  PendingIntent pendingInstent=null;
  try {
    Class classOfPendingIntent=Class.forName(pendingIntentFileNames);
    if (classOfPendingIntent != null) {
      Intent intent=new Intent(mContext,classOfPendingIntent);
      pendingInstent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return pendingInstent;
}",81,5,"createRequestPendingIntent:createRequestPendedIntent,pendingIntentClassName:pendingIntentFileNames,pendingIntent:pendingInstent,",95,1.0,ALERT
1927,,,95,6,,1910,28.384995945294700,0
1928,,,18,2,,625,5.094949865341190,0
1929,"public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,int timeoutInMs){
  return waitForAllActiveAndLiveReplicas(zkStateReader,null,timeoutInMs);
}
","public static boolean waitForAllActiveAndLiveRcs(ZkStateReader zkStateDriver,int timeoutINMS){
  return waitForAllActiveAndLiveRcs(zkStateDriver,null,timeoutINMS);
}
",23,3,"waitForAllActiveAndLiveReplicas:waitForAllActiveAndLiveRcs,zkStateReader:zkStateDriver,timeoutInMs:timeoutINMS,",629,8.31,ALERT
1931,,,25,2,,805,9.68986363808314,0
1932,,,19,2,,695,7.7968008637428300,0
1933,"static void queuePlayerCapeReplacement(AbstractClientPlayer player){
  final String displayName=player.getDisplayNameString();
  Logger.info(""Queueing cape replacement for %s"",displayName);
  THREAD_POOL.submit(null);
}
","static void queuePlayerCapereplacement(AbstractClientPlayer actor){
  final Stringhostnamee=actor.getDisplayNameString();
  Logger.info(""Queueing cape replacement for %s"",hostname);
  THREAD_POOL.submit(null);
}
",35,3,"queuePlayerCapeReplacement:queuePlayerCapereplacement,player:actor,displayName:hostname,",192,2.18,ALERT
1934,"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}","public final boolean insert_via(BrdViaInfo p_vialsource,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion___height,int p_max_via_recursion_strength,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shor_okia_algo.shove_via_insert(p_vialsource,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion___height,p_max_via_recursion_strength);
  if (!r_ok)   return false;
  NetNosList optopt_net_no_arrmax_recursion___height <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}",112,13,"p_via_info:p_vialsource,p_max_recursion_depth:p_max_recursion___height,p_max_via_recursion_depth:p_max_via_recursion_strength,",369,19.88,ALERT
1935,"public static Properties loadProperties(ClassLoader classLoader,String classpathResource){
  return loadProperties(null,classpathResource);
}
","public static Properties loadProtproperties(ClassLoader classLoader,String classpathresource){
  return loadProtproperties(null,classpathresource);
}
",21,3,"classpathResource:classpathresource,loadProperties:loadProtproperties,",77,0.65,ALERT
1936,,,45,5,,1564,20.818568523724900,0
1937,,,15,1,,433,3.7601848045984900,0
1938,"public static void fullReset(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
","public static void fullResot(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
",24,1,"fullReset:fullResot,",25,0.23,ALERT
1939,"public boolean readBoolean() throws IOException {
  return primitiveTypes.readBoolean();
}
","public boolean writeBOBoo() throws IOException {
  return primitiveTypes.writeBOBoo();
}
",16,1,"readBoolean:writeBOBoo,",34,0.37,ALERT
1941,,,16,1,,444,4.626940659681960,0
1942,"SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseComponentType=linearArrayType.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}","SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseInstanceType=linearArrayType.getComponentType();
 _outputComponenttypee=(Class<L[]>)ArrayUtils.getArrayClass(_baseInstanceType,2);
  Map<SparseKey,SparseValue> Sparsemap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRhOWS=numRows;
  _NumCOLows=numCols;
  ArrayList<SparseKey> maps=new ArrayList<SparseKey>(Sparsemap.keySet());
  Collections.sort(maps);
  _colIndores=new int[maps.size()];
  _colInditions=new int[maps.size()];
  _llIndicks=new int[maps.size()];
 _actualResourcess=linearArrayType.cast(Array.newInstance(_baseInstanceType,maps.size()));
 _actualValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseInstanceType,maps.size()));
  for (int bi=0; bi < maps.size(); bi++) {
    SparseKey kiemaps.get(bi);
    _colIndores[bi]=ie.row;
    _colInditions[bi]=ie.col;
    _llIndicks[bi]=ie.linearIndex;
    SparseValue value=Sparsemap.get(ie);
    setSparseValue(value,_actualResources,_actualValue,bi);
  }
}",291,14,"_baseComponentType:_baseInstanceType,_outputArrayType:_outputComponenttype,sparseMap:Sparsemap,_numRows:_numRhOWS,_numCols:_NumCOLows,keys:maps,_rowIndices:_colIndores,_colIndices:_colInditions,_linearIndices:_llIndicks,_realValues:_actualResources,_imagValues:_actualValue,i:bi,key:ie,",1144,11.46,ALERT
1943,,,19,1,,418,4.594970107078550,0
1944,"public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}","public static final byte[] unzip(byte[] din) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * din.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(din));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}",102,6,"in:din,",95,0.96,ALERT
1945,"private static Class<?> convertFieldType(String fieldType){
  if (fieldTypeMap.containsKey(fieldType)) {
    return fieldTypeMap.get(fieldType);
  }
  return null;
}
","private static Class<?> converWireTyp(String machinetype){
  if (fieldTypeMap.containsKey(machinetype)) {
    return fieldTypeMap.get(machinetype);
  }
  return null;
}
",35,2,"fieldType:machinetype,convertFieldType:converWireTyp,",59,0.69,ALERT
1946,"public void testBug66947() throws Exception {
  Connection con=null;
  try {
    Properties props=new Properties();
    props.setProperty(""useServerPrepStmts"",""true"");
    props.setProperty(""cachePrepStmts"",""true"");
    props.setProperty(""prepStmtCacheSize"",""2"");
    con=getConnectionWithProps(props);
    PreparedStatement ps1_1;
    PreparedStatement ps1_2;
    String query=""Select \'a\' from dual"";
    ps1_1=con.prepareStatement(query);
    ps1_1.execute();
    ps1_1.close();
    ps1_2=con.prepareStatement(query);
    assertSame(""SSPS should be taken from cache but is not the same."",ps1_1,ps1_2);
    ps1_2.execute();
    ps1_2.close();
    ps1_2.close();
    ps1_1=con.prepareStatement(query);
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_2,ps1_1);
    ps1_1.execute();
    ps1_1.close();
    ps1_1.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_1=con.prepareStatement(""Select \'b\' from dual"");
    ps1_1.execute();
    ps1_1.close();
    ps2_1=con.prepareStatement(""Select \'c\' from dual"");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=con.prepareStatement(""Select \'d\' from dual"");
    ps3_1.execute();
    ps3_1.close();
    ps1_2=con.prepareStatement(""Select \'b\' from dual"");
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_1,ps1_2);
    ps2_2=con.prepareStatement(""Select \'c\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps2_1,ps2_2);
    ps3_2=con.prepareStatement(""Select \'d\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps3_1,ps3_2);
  }
  finally {
    if (con != null) {
      con.close();
    }
  }
}","public void testBug66847() throws Exception {
  Connection syn=null;
  try {
    Properties props=new Properties();
    props.setProperty(""useServerPrepStmts"",""true"");
    props.setProperty(""cachePrepStmts"",""true"");
    props.setProperty(""prepStmtCacheSize"",""2"");
    syn=getConnectionWithProps(props);
    PreparedStatement ps1_11;
    PreparedStatement psp_4;
    String query=""Select \'a\' from dual"";
    ps1_11=syn.prepareStatement(query);
    ps1_11.execute();
    ps1_11.close();
    psp_4=syn.prepareStatement(query);
    assertSame(""SSPS should be taken from cache but is not the same."",ps1_11,psp_4);
    psp_4.execute();
    psp_4.close();
    psp_4.close();
    ps1_11=syn.prepareStatement(query);
    assertNotSame(""SSPS should not be taken from cache but is the same."",psp_4,ps1_11);
    ps1_11.execute();
    ps1_11.close();
    ps1_11.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_11=syn.prepareStatement(""Select \'b\' from dual"");
    ps1_11.execute();
    ps1_11.close();
    ps2_1=syn.prepareStatement(""Select \'c\' from dual"");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=syn.prepareStatement(""Select \'d\' from dual"");
    ps3_1.execute();
    ps3_1.close();
    psp_4=syn.prepareStatement(""Select \'b\' from dual"");
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_11,psp_4);
    ps2_2=syn.prepareStatement(""Select \'c\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps2_1,ps2_2);
    ps3_2=syn.prepareStatement(""Select \'d\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps3_1,ps3_2);
  }
  finally {
    if (syn != null) {
      syn.close();
    }
  }
}",309,10,"con:syn,ps1_1:ps1_11,ps1_2:psp_4,testBug66947:testBug66847,",327,40.51,ALERT
1947,"public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}","public static void modifiedFiles(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}",64,5,"modifyFile:modifiedFiles,",124,1.41,ALERT
1948,"public double localScore(int i,int... parents){
  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=parents.length;
  Matrix covxx=getSelection1(covariances,parents);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,parents,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);
      _parents.removeAll(forbidden);
      parents=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(parents,covariances);
    }
    return Double.NaN;
  }
}","public double localScore(int ci,int... limits){
  for (  int p : limits)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(ci,ci);
  int n=getSampleSize();
  int p=limits.length;
  Matrix covxx=getSelection1(covariances,limits);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,limits,ci);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(ci,ci)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < limits.length; y++)       _parents.add(limits[y]);
      _parents.removeAll(forbidden);
      limits=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       limits[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(limits,covariances);
    }
    return Double.NaN;
  }
}",355,17,"i:ci,parents:limits,",305,4.54,ALERT
1949,,,187,10,,3164,33.920925299326600,0
1950,"@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}","@Override @SuppressWarnings(""unchecked"") public void comppleted(int BytesTranslated,boolean canInvokeDirect){
  if (BytesTranslated == 0) {
    BytesTranslated=-1;
  }
 else {
    updateBuffers(BytesTranslated);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(BytesTranslated));
    }
 else {
      result.setResult((V)Integer.valueOf(BytesTranslated));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}",126,3,"bytesTransferred:BytesTranslated,completed:comppleted,",56,0.81,ALERT
1951,"private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){
  final double latitude=point.getLatitude();
  final double longitude=point.getLongitude();
  final double sinLatitude=Math.sin(latitude);
  final double cosLatitude=Math.cos(latitude);
  final double sinLongitude=Math.sin(longitude);
  final double cosLongitude=Math.cos(longitude);
  double arcDistance=0.0;
  Double prevAngle=null;
  for (  final GeoPoint polyPoint : polyPoints) {
    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (angle == null) {
      return null;
    }
    if (prevAngle != null) {
      double angleDelta=angle - prevAngle;
      if (angleDelta < -Math.PI) {
        angleDelta+=Math.PI * 2.0;
      }
      if (angleDelta > Math.PI) {
        angleDelta-=Math.PI * 2.0;
      }
      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      arcDistance+=angleDelta;
    }
    prevAngle=angle;
  }
  if (prevAngle != null) {
    final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (lastAngle == null) {
      return null;
    }
    double angleDelta=lastAngle - prevAngle;
    if (angleDelta < -Math.PI) {
      angleDelta+=Math.PI * 2.0;
    }
    if (angleDelta > Math.PI) {
      angleDelta-=Math.PI * 2.0;
    }
    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    arcDistance+=angleDelta;
  }
  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return arcDistance > 0.0;
}","private static Boolean isInsideLinesect(final GeoPoint e,final List<GeoPoint> groParts){
  final doulaticitytude=e.getLatitude();
  final doulonitudinaltude=e.getLongitude();
  final double sinLongity=Math.sin(laticity);
  final double coslatitude=Math.cos(laticity);
  final double sisinBlilleath.sin(lonitudinal);
  final double cocosLongitudeath.cos(lonitudinal);
  double ArcDistance=0.0;
  Double prevIdled=null;
  for (  final GeoPoinisoPartnt : groParts) {
    final Dad angle=computeAnisoPartoint,sinLongity,coslatitude,sinBlille,cosLongitude);
    if (ad == null) {
      return null;
    }
    if (prevIdled != null) {
      doublengthDeltalta=ad - prevIdled;
      if (lengthDelta < -Math.PI) {
        lengthDelta+=Math.PI * 2.0;
      }
      if (lengthDelta > Math.PI) {
        lengthDelta-=Math.PI * 2.0;
      }
      if (Math.abs(lengthDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      ArcDistance+=lengthDelta;
    }
    prevIdled=ad;
  }
  if (prevIdled != null) {
    final DlastAxletAngle=computeAngle(groParts.get(0),sinLongity,coslatitude,sinBlille,cosLongitude);
    if (lastAxle == null) {
      return null;
    }
    double lengthDelta=lastAxle - prevIdled;
    if (lengthDelta < -Math.PI) {
      lengthDelta+=Math.PI * 2.0;
    }
    if (lengthDelta > Math.PI) {
      lengthDelta-=Math.PI * 2.0;
    }
    if (Math.abs(lengthDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    ArcDistance+=lengthDelta;
  }
  if (Math.abs(ArcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return ArcDistance > 0.0;
}",346,15,"isInsidePolygon:isInsideLinesect,point:e,polyPoints:groParts,latitude:laticity,longitude:lonitudinal,sinLatitude:sinLongity,cosLatitude:coslatitude,sinLongitude:sinBlille,arcDistance:ArcDistance,prevAngle:prevIdled,polyPoint:isoPart,angle:ad,angleDelta:lengthDelta,lastAngle:lastAxle,",1336,16.2,ALERT
1952,"@SuppressWarnings(""UnusedReturnValue"") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){
  final int count=OutlinesObj.getInt(PdfDictionary.Count);
  final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(FirstObj);
  if (FirstObj != null) {
    final Element root=OutlineDataXML.createElement(""root"");
    OutlineDataXML.appendChild(root);
    final int level=0;
    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);
  }
  return count;
}","@SuppressWarnings(""UnusedReturnValue"") public int readOutlineFileMetadata(final PdfObject OutdatesOb,final PdfObjectReader currentPdfFile){
  final int count=OutdatesOb.getInt(PdfDictionary.Count);
  final PdfObject FirstObj=OutdatesOb.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(FirstObj);
  if (FirstObj != null) {
    final Element root=OutlineDataXML.createElement(""root"");
    OutlineDataXML.appendChild(root);
    final int level=0;
    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);
  }
  return count;
}",100,7,"OutlinesObj:OutdatesOb,",50,0.72,ALERT
1953,"protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}","protected int DrawTitle(Canvas Canp,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint pinch,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    pinch.setTextAlign(Component.LEFT);
    pinch.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          pinch.setColor(r.getColor());
        }
 else {
          pinch.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        pinch.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=pinch.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculate) {
          drawLegendShape(Canp,r,currentX,currentY,i,pinch);
          drawString(Canp,text,currentX + lineSize + 5,currentY + 5,pinch);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}",436,27,"paint:pinch,canvas:Canp,drawLegend:DrawTitle,",609,4.18,ALERT
1955,"public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}","public boolean threadsafeTimer(long sleepTimes,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(sleepTimes,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}",66,6,"delayTime:sleepTimes,threadSafeTimeout:threadsafeTimer,",152,2.42,ALERT
1958,"public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
","public void setresult(AMIdentity rid,Map attrs){
  searchResults.add(rid);
  resultsMap.put(rid,attrs);
}
",28,3,"addResult:setresult,id:rid,",134,1.08,ALERT
1959,"private Handler<Void> installAfterHandler(final HttpServerRequest request,final Buffer buffer,final List<Listener> afterListener){
  Handler<Void> afterHandler=null;
  return afterHandler;
}
","private Handler<Void> installDefaultListener(final HttpServerRequest initial,final Buffer line,final List<Listener> AfterHandler){
  Handler<Void> postParser=null;
  return postParser;
}
",35,5,"installAfterHandler:installDefaultListener,request:initial,buffer:line,afterListener:AfterHandler,afterHandler:postParser,",1392,14.11,ALERT
1960,"public void insertTwin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + inst + "" not found"");
}
","public void insertTWbin(Instruction ptr,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement NEWObj=iter.next();
    if (NEWObj.getInstruction() == ptr) {
      iter.add(NEWObj.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + ptr + "" not found"");
}
",80,5,"newPtr:NEWObj,insertTwin:insertTWbin,inst:ptr,",153,2.1,ALERT
1961,,,44,4,,1342,11.23232787847520,0
1962,"private long[] determinePreferenceVector(Relation<V> relation,ModifiableDBIDs[] neighborIDs,StringBuilder msg){
  if (strategy.equals(Strategy.APRIORI)) {
    return determinePreferenceVectorByApriori(relation,neighborIDs,msg);
  }
 else   if (strategy.equals(Strategy.MAX_INTERSECTION)) {
    return determinePreferenceVectorByMaxIntersection(neighborIDs,msg);
  }
 else {
    throw new IllegalStateException(""Should never happen!"");
  }
}
","private long[] determinePreferredMatrix(Relation<V> flower,ModifiableDBIDs[] neigenborIDs,StringBuilder gm){
  if (strategy.equals(Strategy.APRIORI)) {
    return determinePreferenceVectorByApriori(flower,neigenborIDs,gm);
  }
 else   if (strategy.equals(Strategy.MAX_INTERSECTION)) {
    return determinePreferenceVectorByMaxIntersection(neigenborIDs,gm);
  }
 else {
    throw new IllegalStateException(""Should never happen!"");
  }
}
",77,4,"determinePreferenceVector:determinePreferredMatrix,relation:flower,neighborIDs:neigenborIDs,msg:gm,",297,3.98,ALERT
1963,"public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}
","public void addPutAndGetTimenones(long year){
  putTimeNanos.addAndGet(year);
  getTimeNanos.addAndGet(year);
  if (delegate != null)   delegate.addPutAndGetTimenones(year);
}
",36,2,"addPutAndGetTimeNanos:addPutAndGetTimenones,duration:year,",68,0.74,ALERT
1964,,,17,1,,413,4.147027516365050,0
1965,"public void addSafeClass(SootClass clz){
  safeClasses.add(clz.getName());
}
","public void addSecureCode(SootClass ClZ){
  safeClasses.add(ClZ.getName());
}
",20,2,"addSafeClass:addSecureCode,clz:ClZ,",642,7.33,ALERT
1966,,,113,8,,2774,25.75746918519340,0
1967,,,145,5,,1464,13.717431553204900,0
1968,"public static byte[] decode(String hexa) throws CoderException {
  if (hexa == null) {
    throw new CoderException(""can\'t decode empty String"");
  }
  if ((hexa.length() % 2) != 0) {
    throw new CoderException(""invalid hexadicimal String"");
  }
  int tamArray=hexa.length() / 2;
  byte[] retorno=new byte[tamArray];
  for (int i=0; i < tamArray; i++) {
    retorno[i]=hexToByte(hexa.substring(i * 2,i * 2 + 2));
  }
  return retorno;
}","public static byte[] decode(String hexa) throws CoderException {
  if (hexa == null) {
    throw new CoderException(""can\'t decode empty String"");
  }
  if ((hexa.length() % 2) != 0) {
    throw new CoderException(""invalid hexadicimal String"");
  }
  int tamArray=hexa.length() / 2;
  byte[] retorno=new byte[tamArray];
  for (int xi=0; xi < tamArray; xi++) {
    retorno[xi]=hexToByte(hexa.substring(xi * 2,xi * 2 + 2));
  }
  return retorno;
}",116,5,"i:xi,",51,0.59,ALERT
1969,,,57,3,,989,25.825415682792700,0
1970,,,55,3,,1124,12.169074082374600,0
1971,"public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
","public void ad(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.ad(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
",57,4,"add:ad,",42,0.44,ALERT
1972,"public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}
","public void addChanGroup(ChannelMap connectionData){
  if (!mChannelMaps.contains(connectionData)) {
    mChannelMaps.add(connectionData);
    int indeexitannelMaps.indexOf(connectionData);
    fireIntervalAdded(this,exit,exit);
    broadcast(new ChannelMapEvent(connectionData,Event.ADD));
  }
}
",60,3,"addChannelMap:addChanGroup,channelMap:connectionData,index:exit,",294,2.97,ALERT
1973,,,54,2,,669,7.447540863355000,0
1974,,,18,2,,816,6.857740958531700,0
1976,,,30,3,,1157,14.28853891690570,0
1977,"private static Stream<Method> extractMethods(Class clazz){
  try {
    Method[] methods=clazz.getMethods();
    if (methods.length > 0) {
      return Stream.of(methods);
    }
  }
 catch (  Exception|Error e) {
    LOG.warn(""Problems loading class at startup: {}"",clazz,e);
  }
  return Stream.empty();
}","private static Stream<Method> contractedMembers(Class clos){
  try {
    Method[] Methodc=clos.getMethods();
    if (Methodc.length > 0) {
      return Stream.of(Methodc);
    }
  }
 catch (  Exception|Error e) {
    LOG.warn(""Problems loading class at startup: {}"",clos,e);
  }
  return Stream.empty();
}",72,3,"clazz:clos,methods:Methodc,extractMethods:contractedMembers,",92,0.87,ALERT
1978,"public EMail createEMail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}
","public EMail newEMAail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}
",43,3,"createEMail:newEMAail,",31,0.24,ALERT
1979,,,50,3,,695,17.422015368938400,0
1981,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}","public void spillBackground(Component mc,Graphics rg,int rx,int o,int width,int gap){
  JComponent cocompmc instanceof JComponent) ? (JComponent)mc : null;
  if (rg instanceof Graphics2D) {
    Graphics2D gp62(Graphics2D)rg;
    gp62translate(rx,o);
    paip62(compomp,width,gap);
    gp62translate(-rx,-o);
  }
 else {
    BufferedImage om=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D p62=(Graphics2D)om.getGraphics();
    paip62(compomp,width,gap);
    p62.dispose();
    ImageScalingHelper.paint(rg,rx,o,width,gap,om,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}",165,10,"paintBorder:spillBackground,c:mc,g:rg,x:rx,y:o,height:gap,g2:p62,img:om,",445,8.21,ALERT
1982,,,42,3,,1170,19.732547465960200,0
1983,"private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){
  if (keyChain == null || keyToAdd == null) {
    return false;
  }
 else {
    for (    ECKey loopKey : keyChain) {
      if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}
","private boolean keyChainContainsLocalkey(Collection<ECKey> KeyColl,ECKey keyToPush){
  if (KeyColl == null || keyToPush == null) {
    return false;
  }
 else {
    for (    ECKeyloopServicey : KeyColl) {
      if (Arrays.equals(keyToPush.getPrivKeyBytes(),loopService.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}
",69,4,"keyChainContainsPrivateKey:keyChainContainsLocalkey,keyChain:KeyColl,keyToAdd:keyToPush,loopKey:loopService,",273,7.21,ALERT
1984,"private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}","private void grow(){
  int NewCap=(entries.length << 1) + 1;
  Object[] newEntryries=new Object[NewCap];
  System.arraycopy(entries,0,newEntryries,0,size);
  entries=newEntryries;
}",50,4,"newCap:NewCap,newEntries:newEntryries,",55,1.1,ALERT
1985,"@Override public boolean isTraceEnabled(){
  return logger.isLoggable(Level.FINEST);
}
","@Override public boolean isTRacingEnable(){
  return logger.isLoggable(Level.FINEST);
}
",19,1,"isTraceEnabled:isTRacingEnable,",26,0.4,ALERT
1986,,,37,3,,1114,11.53033945163090,0
1987,,,43,5,,1590,12.313426780700700,0
1989,,,12,1,,447,3.447170201937360,0
1990,"public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {
  this.addr=address;
  this.port=port;
  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  channel=DatagramChannel.open(family);
  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);
  if (srcAddress != null) {
    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);
    try {
      channel.bind(new InetSocketAddress(srcAddress,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException(""Unable to bind to source address"");
    }
    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);
  }
}","public JdpBroadcaster(InetAddress shape,InetAddress srcaddr,int offset,int tzle) throws IOException, JdpException {
  thicpdr=shape;
  this.offset=offset;
  ProtocolFamilfinderly=(shape instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  ann=DatagramChannel.open(finder);
  ann.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  cannsetOption(StandardSocketOptions.IP_MULTICAST_TTL,tzle);
  if (srcaddr != null) {
    NetworkInterfainterperf=NetworkInterface.getByInetAddress(srcaddr);
    try {
   annnel.bind(new InetSocketAddress(srcaddr,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException(""Unable to bind to source address"");
    }
    ann.setOption(StandardSocketOptions.IP_MULTICAST_IF,interp);
  }
}",140,8,"address:shape,srcAddress:srcaddr,port:offset,ttl:tzle,addr:cp,family:finder,channel:ann,interf:interp,",433,4.8,ALERT
1991,"public static int randomRangeInt(int min,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));
}","public static int RandomrangeInt(int page,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - page) + page) : (Math.random() * (max - page) + page));
}",63,3,"min:page,randomRangeInt:RandomrangeInt,",94,1.83,ALERT
1992,"private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}","private static int lastPositionof(Object o,@NotNull Object[] elements,int position){
  if (o == null) {
    for (int ie=position; ie >= 0; ie--) {
      if (elements[ie] == null) {
        return ie;
      }
    }
  }
 else {
    for (int ie=position; ie >= 0; ie--) {
      if (o.equals(elements[ie])) {
        return ie;
      }
    }
  }
  return -1;
}",98,5,"i:ie,index:position,lastIndexOf:lastPositionof,",159,2.74,ALERT
1993,"public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
","public void stopstream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
",20,1,"closeStream:stopstream,",18,0.22,ALERT
1994,,,66,5,,1867,17.293840793768600,0
1995,"public void await(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}","public void ewready(int Count) throws InterruptedException {
  if (parties == 1)   return;
  final boolean stopCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - Count) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == stopCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}",144,6,"ID:Count,startCondition:stopCondition,await:ewready,",183,3.09,ALERT
1996,,,39,3,,1160,9.214628680547080,0
1997,"public static float mean(float[] data,int[] inds){
  float mean=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[inds[i]];
  }
  mean/=inds.length;
  return mean;
}","public static float cast(float[] data,int[] pullS){
  float cast=0;
  for (int k=0; k < pullS.length; k++) {
    if (Float.isNaN(data[pullS[k]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    cast+=data[pullS[k]];
  }
  cast/=pullS.length;
  return cast;
}",81,4,"mean:cast,i:k,inds:pullS,",111,1.73,ALERT
1998,"public static boolean isExplicitAllType(String[] types){
  return types != null && types.length == 1 && ALL.equals(types[0]);
}","public static boolean isExplainAnyTyp(String[] js){
  return js != null && js.length == 1 && ALL.equals(js[0]);
}",33,2,"types:js,isExplicitAllType:isExplainAnyTyp,",60,1.07,ALERT
2000,,,20,2,,683,11.186329332987500,0
2001,"public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}
","public void export(ByteBuffer bag){
  bag.putInt(seqId);
  if (info.isRowBlockEnabled())   bag.putInt(nRows);
  export(primaryKey,bag);
  for (  ByteArray cb : cellBlocks) {
    export(cb,bag);
  }
}
",54,3,"buf:bag,",42,0.71,ALERT
2002,"public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){
  if (c != '\\t') {
    return 1;
  }
  int result=(x - prevX) / plainSpaceSize;
  if ((x - prevX) % plainSpaceSize > 0) {
    result++;
  }
  return result;
}","public static int columnsnumber(char cs,int exec,int PrevF,int plainBlockCode){
  if (cs != '\\t') {
    return 1;
  }
  int resdivxec - PrevF) / plainBlockCode;
  if ((exec - PrevF) % plainBlockCode > 0) {
    div++;
  }
  return div;
}",61,6,"columnsNumber:columnsnumber,c:cs,x:exec,prevX:PrevF,plainSpaceSize:plainBlockCode,result:div,",497,8.12,ALERT
2003,,,14,1,,440,5.223419932524360,0
2005,"private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}","private void loadConfigurationFromjVMparams(){
  String reposistryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != reposistryProperty) {
    String[] repositoryIrPort=reposistryProperty.split("":"");
    if (repositoryIrPort.length == 2) {
      String repositoryUc=repositoryIrPort[0];
      String reposreyPORT=repositoryIrPort[1];
      if (StringUtils.isNotBlank(repositoryUc) && StringUtils.isNotBlank(reposreyPORT)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryUc + "" Port=""+ reposreyPORT);
        try {
          innamert=Integer.parseInt(reposreyPORT);
          setRepository(repositoryUc,name);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String actname=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(actname)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + actname);
      setAgentName(actname);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}",211,7,"loadConfigurationFromJvmParameters:loadConfigurationFromjVMparams,repositoryProperty:reposistryProperty,repositoryIpHost:repositoryIrPort,repositoryIp:repositoryUc,repositoryPort:reposreyPORT,port:name,agentName:actname,",642,6.71,ALERT
2006,"public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}","public String flow(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pmtdt=null;
  ResultSet Rs=null;
  try {
    pmtdt=DB.prepareStatement(sql,null);
    pmtdt.setInt(1,C_Charge_ID.intValue());
    Rs=pmtdt.executeQuery();
    if (Rs.next()) {
      mTab.setValue(""PriceEntered"",Rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(Rs,pmtdt);
    Rs=null;
    pmtdt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}",181,10,"pstmt:pmtdt,rs:Rs,charge:flow,",278,43.75,ALERT
2007,,,29,2,,794,10.409994582335200,0
2008,"public static void appendContentPrefix(HttpServletRequest request,Appendable urlBuffer) throws IOException {
  appendContentPrefix(request,urlBuffer,null);
}
","public static void appendHeaderFixed(HttpServletRequest reply,Appendable urlbuf) throws IOException {
  appendHeaderFixed(reply,urlbuf,null);
}
",24,3,"appendContentPrefix:appendHeaderFixed,request:reply,urlBuffer:urlbuf,",980,12.94,ALERT
2009,,,98,5,,1625,39.246834540367100,0
2010,"public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}","public PKCS10Attribute(PKCS9Attribute aster){
  this.attributeId=aster.getOID();
  this.attributeValue=aster.getValue();
}",28,3,"attr:aster,",37,0.38,ALERT
2011,"private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){
  try {
    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug(""writeLocalCSV SAVING  EMPTY!!"");
 else     log.debug(""writeLocalCSV SAVING --> "" + mostRecentData.bGValue);
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),""save.bin"")));
    oos.writeObject(mostRecentData);
    oos.flush();
    oos.close();
  }
 catch (  Exception e) {
    Log.e(TAG,""write to OutputStream failed"",e);
    log.error(""write to OutputStream failed"",e);
  }
}
","private void writeRemoteDSVL(MedtronicSensorRecord mostRecentData,Context context){
  try {
    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug(""writeLocalCSV SAVING  EMPTY!!"");
 else     log.debug(""writeLocalCSV SAVING --> "" + mostRecentData.bGValue);
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),""save.bin"")));
    oos.writeObject(mostRecentData);
    oos.flush();
    oos.close();
  }
 catch (  Exception e) {
    Log.e(TAG,""write to OutputStream failed"",e);
    log.error(""write to OutputStream failed"",e);
  }
}
",115,4,"writeLocalCSV:writeRemoteDSVL,",67,0.95,ALERT
2013,,,57,2,,693,6.508874913056690,0
2014,"private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}","private void handlePowerleft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}",63,4,"handleStateLeft:handlePowerleft,",37,0.57,ALERT
2015,,,34,2,,827,8.426481540997820,0
2016,"public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}","public static int muesson(double ema){
  int k=0;
  double p=1.0;
  double L=Math.exp(-ema);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}",55,5,"lambda:ema,poisson:muesson,",87,0.93,ALERT
2017,,,14,1,,433,5.135819435119630,0
2018,"public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return invokeStatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
","public static Object callstatic(String plpace,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return callstatic(Class.forName(plpace),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + plpace + "" not found"");
  }
}
",63,5,"clazz:plpace,invokeStatic:callstatic,",83,1.51,ALERT
2019,"private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}
","private void initialize(ModelValidator validitor,MClient local){
  if (local == null)   m_globalValidators.add(validitor);
  m_validators.add(validitor);
  validitor.initialize(this,local);
}
",41,3,"client:local,validator:validitor,",71,0.94,ALERT
2020,"@Override public int parse(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}","@Override public int ize(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}",347,10,"parse:ize,",92,9.79,ALERT
2021,"public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
","public Request data(String style,String test){
  Objects.requireNonNull(style);
  Objects.requireNonNull(test);
  _headers.put(style,test);
  return this;
}
",38,3,"header:data,key:style,value:test,",763,7.11,ALERT
2022,"public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){
  System.arraycopy(sourceArray,0,destinationArray,0,offset);
  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);
}","public static void removeObjectatoffset(Object[] referencearray,Object[] destinationInstance,int source){
  System.arraycopy(referencearray,0,destinationInstance,0,source);
  System.arraycopy(referencearray,offsetsourceesdestinationInstancefsourceferencearray.length - source - 1);
}",58,4,"removeObjectAtOffset:removeObjectatoffset,sourceArray:referencearray,destinationArray:destinationInstance,offset:source,",274,2.95,ALERT
2023,"public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){
  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);
  this.a=selectPrivateValue();
  this.A=g.modPow(a,N);
  return A;
}","public BigInteger generateClientCredentials(byte[] openssl,byte[] identity,byte[] password){
  this.x=SRP6Util.calculateX(digest,N,openssl,identity,password);
  this.a=selectPrivateValue();
  this.A=g.modPow(a,N);
  return A;
}",64,7,"salt:openssl,",38,0.44,ALERT
2024,"private void connect(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}","private void connection(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connection(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}",322,4,"connect:connection,",50,0.52,ALERT
2025,"protected void putCommand(final Class commandClass,final String[] names){
  Check.isTrue(names.length > 0,""names.length > 0"");
  _commandsToCanonicalNames.put(commandClass,names[0]);
  for (int i=0; i < names.length; i++) {
    _aliasesToCommands.put(names[i],commandClass);
  }
}","protected void setCommand(final Class commentClass,final String[] name){
  Check.isTrue(name.length > 0,""names.length > 0"");
  _commandsToCanonicalNames.put(commentClass,name[0]);
  for (intei=0;ei < name.length; e++) {
    _aliasesToCommands.put(name[e],commentClass);
  }
}",71,4,"putCommand:setCommand,commandClass:commentClass,names:name,i:e,",292,4.28,ALERT
2026,,,180,7,,2385,25.033455646038100,0
2027,,,33,4,,1498,13.240269128481500,0
2028,"private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}","private void smoothSnapNextposition(int scrollRow,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo slice){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mmCurrentFastScrollSectionslice.sectionName;
    mTargetSoftSyncFeed=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mmTargetSoftSyncFeedslice.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int nNewLayoutYearMath.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(slice.fastScrollToItem.rowIndex));
  int numTextures=mFastLayoutFiles.length;
  for (int i=gi; i gi numTextures; gi++) {
    mFastScrmFastLayoutFilesgiwLayoutYear scrollRow) / numTextures;
  }
  mFastScrollFlowIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}",163,11,"smoothSnapToPosition:smoothSnapNextposition,scrollY:scrollRow,info:slice,mTargetFastScrollSection:mTargetSoftSyncFeed,newScrollY:NewLayoutYear,numFrames:numTextures,i:gi,mFastScrollFrames:mFastLayoutFiles,mFastScrollFrameIndex:mFastScrollFlowIndex,",691,8.9,ALERT
2029,,,16,1,,449,4.540305280685430,0
2030,"private static String convertActionTypeToIntent(RamlActionType actionType,boolean isTargetCollection){
switch (actionType) {
case DELETE:
    return ""delete"";
case GET:
  return ""get"";
case POST:
if (isTargetCollection) {
  return ""create"";
}
case PUT:
return ""update"";
case PATCH:
return ""modify"";
default :
return ""do"";
}
}
","private static String convertActionTypeToIntent(RamlActionType actionType,boolean isSourcecollection){
switch (actionType) {
case DELETE:
    return ""delete"";
case GET:
  return ""get"";
case POST:
if (isSourcecollection) {
  return ""create"";
}
case PUT:
return ""update"";
case PATCH:
return ""modify"";
default :
return ""do"";
}
}
",60,3,"isTargetCollection:isSourcecollection,",60,1.03,ALERT
2031,,,13,1,,439,3.9088724136352500,0
2032,"public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}
","public void loadLogicalTablesWithGranULARITIES(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries Dictionaries){
  for (  Map.Entry<String,TableGroup> her : nameGroupMap.entrySet()) {
    StrinlogicalTableNameme=her.getKey();
    TableGrouroupup=her.getValue();
    loadLogicalTableWithGranularities(logicalTableName,roup,validGrains,Dictionaries);
  }
}
",74,7,"loadLogicalTablesWithGranularities:loadLogicalTablesWithGranULARITIES,dictionaries:Dictionaries,entry:her,group:roup,",279,4.77,ALERT
2033,"public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}","public boolean disableVMAX3Compression(URI blockobjectReference,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockobjectReference,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockobjectReference);
  }
 else   if (URIUtil.isType(blockobjectReference,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockobjectReference);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockobjectReference,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockobjectReference);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}",229,8,"blockObjectURI:blockobjectReference,",61,1.77,ALERT
2034,"@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}
","@Override public DocumentType createClassType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}
",35,4,"createDocumentType:createClassType,",49,0.49,ALERT
2035,"public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}","public void mundown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.mundown();
  instantPool.mundown();
  longRunningPool.mundown();
  workStealingPool.mundown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}",256,3,"shutdown:mundown,",73,1.39,ALERT
2036,,,47,2,,645,7.916852406660720,0
2037,,,35,4,,1415,23.50671502749130,0
2038,,,70,4,,1419,33.8037194609642,0
2039,"public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewHolder(holder,position,Collections.emptyList());
}
","public void onBindHeaderHeaderWholder(RecyclerView.ViewHolder holder,int name){
  onBindHeaderHeaderWholder(holder,name,Collections.emptyList());
}
",27,3,"position:name,onBindHeaderViewHolder:onBindHeaderHeaderWholder,",68,0.82,ALERT
2040,"public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){
  return clickListeners.remove(itemClickListener);
}
","public boolean removeOnItemMoveAdapter(OnItemClickListener cellFocusEvent){
  return clickListeners.remove(cellFocusEvent);
}
",17,2,"removeOnItemClickListener:removeOnItemMoveAdapter,itemClickListener:cellFocusEvent,",141,0.79,ALERT
2041,"public static Vector2 pow(Vector2 o,double power){
  return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power));
}","public static Vector2 Pow(Vector2 ko,double pp){
  return new Vector2(Math.Pow(ko.x,ppp,Math.Pow(ko.z,pp));
}",40,3,"pow:Pow,o:ko,power:pp,",389,3.93,ALERT
2042,,,121,6,,2102,31.61788098414740,0
2043,"@Override public boolean batchFinished(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}","@Override public boolean processingFinilled(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFormat=getInputFormat();
  int Cutoff=(int)Math.round(toFormat.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int ti=0; ti < Cutoff; ti++) {
      push(toFormat.instance(ti));
    }
  }
 else {
    for (int ti=Cutoff; ti < toFormat.numInstances(); ti++) {
      push(toFormat.instance(ti));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}",140,4,"batchFinished:processingFinilled,toFilter:toFormat,cutOff:Cutoff,i:ti,",245,3.08,ALERT
2044,"public static boolean isModule(IResource resource){
  return (resource != null && TLA_EXTENSION.equals(resource.getFileExtension()));
}
","public static boolean ISModule(IResource rice){
  return (rice != null && TLA_EXTENSION.equals(rice.getFileExtension()));
}
",28,2,"isModule:ISModule,resource:rice,",195,2.22,ALERT
2047,"public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
","public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long instanceId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,instanceId);
}
",61,9,"threadId:instanceId,",34,1.48,ALERT
2048,,,52,2,,790,7.6217215895652800,0
2049,"@SuppressWarnings(""unchecked"") public void readFile(String fileName) throws JDOMException, IOException {
  if (checkFile(fileName)) {
    Element root=rootFromName(fileName);
    Element roster;
    if (root == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    roster=root.getChild(""roster"");
    if (roster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter(""consist""));
    try {
      Element consist;
      do {
        consist=consistIterator.next();
        consistFromXml(consist);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
","@SuppressWarnings(""unchecked"") public void parsePage(String FilePath) throws JDOMException, IOException {
  if (checkFile(FilePath)) {
    Element config=rootFromName(FilePath);
    Element grobot;
    if (config == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    rogrobotonfig.getChild(""roster"");
    if (grobot == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> coconsistedatoronfig.getDescendants(new ElementFilter(""consist""));
    try {
      Element Consite;
      do {
      Consitest=consistedator.next();
        consistFromXml(Consite);
      }
 while (consistedator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
",153,6,"readFile:parsePage,fileName:FilePath,root:config,roster:grobot,consistIterator:consistedator,consist:Consite,",1733,14.88,ALERT
2050,"public void put(Song song){
  if (!mSongs.contains(song)) {
    mSongs.add(song);
  }
}
","public void put(Song site){
  if (!mSongs.contains(site)) {
    mSongs.add(site);
  }
}
",28,2,"song:site,",36,0.36,ALERT
2051,"public void write(PrintStream out){
  write(out,table);
}
","public void send(PrintStream filename){
  send(filename,table);
}
",16,2,"out:filename,write:send,",66,0.59,ALERT
2052,"private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){
  long startFix=System.currentTimeMillis();
  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec);
  if (result.fixed) {
    removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result);
  }
 else {
    fallbackToString(widthMeasureSpec,heightMeasureSpec);
  }
  long fixDuration=System.currentTimeMillis() - startFix;
  Logger.d(TAG,""fixSpannedWithSpaces() duration in ms: "" + fixDuration);
}
","private void fixSpannedWithSpaces(SpannableStringBuilder builder,int WidthMeasureClass,int heightReferenceSpec){
  long startFix=System.currentTimeMillis();
  FixingResult result=addSpacesAroundSpansUntilFixed(builder,WidthMeasureClass,heightReferenceSpec);
  if (result.fixed) {
    removeUnneededSpaces(WidthMeasureClass,heightReferenceSpec,builder,result);
  }
 else {
    fallbackToString(WidthMeasureClass,heightReferenceSpec);
  }
  long fixDuration=System.currentTimeMillis() - startFix;
  Logger.d(TAG,""fixSpannedWithSpaces() duration in ms: "" + fixDuration);
}
",87,7,"heightMeasureSpec:heightReferenceSpec,widthMeasureSpec:WidthMeasureClass,",137,3.28,ALERT
2053,"@Override public LogMessage readNextLogMessage(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
","@Override public LogMessage readNextLOGLine(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (nextText != null && matchRegex(nextText)) {
          incrementLogCount(nextText);
          return nextText;
        }
        return null;
      }
      fileLineHash++;
      LogMessage nextLine=null;
      if (fork != null) {
        nextLine=fork.parseLine(line,request);
      }
 else {
        for (        LogParser fork : parserTable) {
          nextLine=fork.parseLine(line,request);
          if (!nextLine.isContinuation()) {
            this.fork=fork;
            break;
          }
        }
        if (nextLine == null || nextLine.isContinuation()) {
          status.appendInfo(this.filePath,fileLineHash);
          continue;
        }
      }
      if (nextLine.isContinuation()) {
        if (nextText != null) {
          nextText.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLine.isRejected()) {
        if (nextText != null) {
          LogMessagkeyedModelog=nextText;
          nextText=null;
          if (matchRegex(keyedModel)) {
            incrementLogCount(keyedModel);
            return keyedModel;
          }
        }
      }
 else       if (nextLine.isRejectedLast()) {
        if (nextText != null) {
          LogMessagkeyedModelog=nextText;
          nextText=null;
          if (matchRegex(keyedModel)) {
            incrementLogCount(keyedModel);
            return keyedModel;
          }
        }
        break;
      }
 else {
        if (nextText != null) {
          LogMessagkeyedModelog=nextText;
          nextText=nextLine;
          ifkeyedModelog.isHeader() && nextText.isHeader()) {
            continue;
          }
          if (matchRegex(keyedModel)) {
            incrementLogCount(keyedModel);
            return keyedModel;
          }
        }
 else {
          nextText=nextLine;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
",371,7,"readNextLogMessage:readNextLOGLine,currentLog:nextText,fileLineNumber:fileLineHash,nextLog:nextLine,parser:fork,returnedLog:keyedModel,",388,4.56,ALERT
2054,"@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}","@Override public double calculateM(double delta,double epsilon){
  double cli=1;
  while (conf(cli,delta) > epsilon / 2.0d) {
    cli=cli + 10000;
  }
  if (cli > 1) {
    cli=cli - 10000;
  }
  while (conf(cli,delta) > (epsilon / 2.0d)) {
    cli++;
  }
  return Math.ceil(cli);
}",82,4,"i:cli,",49,0.77,ALERT
2055,"public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}
","public static void sync(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.sync();
  }
 catch (  IOException e) {
  }
}
",38,2,"close:sync,",37,0.37,ALERT
2056,"public boolean sendViaDataSocket(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}","public boolean sendViaWebChannel(byte[] ies,int range,int lit){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (lit == 0) {
    return true;
  }
  try {
    dataOutputStream.write(ies,range,lit);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(lit);
  return true;
}",104,4,"sendViaDataSocket:sendViaWebChannel,bytes:ies,start:range,len:lit,",258,2.26,ALERT
2057,,,254,11,,3572,47.996701959768900,0
2058,"@Override public abstract List<JToolBar> createToolBars(Application a,@Nullable View p);
","@Override public abstract List<JToolBar> createToolBas(Application a,@Nullable View p);
",19,3,"createToolBars:createToolBas,",28,0.29,ALERT
2061,"public void clientDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisconnect();
  }
  killKeepalive(""client disconnect"");
}
","public void serverDisconnect(){
  try {
    OutHttpApp responseSteam=_responseStream;
    if (responseSteam != null) {
      responseSteam.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp ann=connTcp();
  if (ann != null) {
    ann.serverDisconnect();
  }
  killKeepalive(""client disconnect"");
}
",79,3,"responseStream:responseSteam,conn:ann,clientDisconnect:serverDisconnect,",96,1.06,ALERT
2062,,,60,3,,586,6.427093056837720,0
2063,"protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
","protected static double calcQ_i(double f,double eta){
  return eta * Math.exp(-eta * f);
}
",26,3,"lambda:eta,",38,0.52,ALERT
2065,"private String convertLessThanOneThousand(int number){
  String soFar;
  if (number % 100 < 20) {
    soFar=numNames[number % 100];
    number/=100;
  }
 else {
    soFar=numNames[number % 10];
    number/=10;
    String s=Integer.toString(number);
    if (s.endsWith(""2"") && !soFar.equals(""""))     soFar="" VINT-I-"" + soFar.trim();
 else     if (soFar.equals(""""))     soFar=tensNames[number % 10] + soFar;
 else     soFar=tensNames[number % 10] + ""-"" + soFar;
    number/=10;
  }
  if (number == 0)   return tensNames[number % 10] + soFar;
  if (number > 1)   soFar=""S"" + soFar;
  if (number == 1 && !soFar.equals(""""))   number=0;
  return numNames[number] + "" CENT"" + soFar;
}","private String convertLessThanoneThousand(int element){
  String zoNear;
  if (element % 100 < 20) {
    szoNearnumNames[element % 100];
    element/=100;
  }
 else {
    szoNearnumNames[element % 10];
    element/=10;
    String siInteger.toString(element);
    if (s.eidsWith(""2"") && !zoNear.equals(""""))     zoNear="" VINT-I-"" + zoNear.trim();
 else     if (szoNearequals(""""))     szoNeartensNames[element % 10] + zoNear;
 else     szoNeartensNames[element % 10] + ""-"" + zoNear;
    element/=10;
  }
  if (element == 0)   return tensNames[element % 10] + zoNear;
  if (element > 1)   zoNear=""S"" + zoNear;
  if (element == 1 && !szoNearequals(""""))   element=0;
  return numNames[element] + "" CENT"" + zoNear;
}",183,4,"convertLessThanOneThousand:convertLessThanoneThousand,number:element,soFar:zoNear,s:i,",214,1.89,ALERT
2066,"protected static boolean networkMonitorExist(String nwMonName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}","protected static boolean networkMonitorExist(String wnMorDie){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + wnMorDie);
  }
  if ((wnMorDie == null) || (wnMorDie.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=wnMorDie.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}",119,5,"nwMonName:wnMorDie,",45,0.7,ALERT
2067,"public void createBounds(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}","public void createbords(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int z=Integer.MAX_VALUE;
  int d=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    z=Math.min(w.getDrawY(),z);
    d=Math.max(w.getDrawRight(),d);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget cbounds=new ConstraintWidget(l,z,d - l,b - z);
  cbounds.setCompanionWidget(WidgetCompanion.create(cbounds));
  mBounds=new Element(cbounds);
  updateOriginFromBounds();
}",172,9,"createBounds:createbords,t:z,r:d,bounds:cbounds,",514,7.11,ALERT
2068,,,233,11,,3872,28.926985291640000,0
2069,"public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
","public static boolean checkInternetReady(Context loader){
  ConnectivityManager connectivityManager=(ConnectivityManager)loader.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
",45,4,"context:loader,isNetworkAvailable:checkInternetReady,",123,1.11,ALERT
2070,"public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}","public static List<List<Double>> partunkvariable(List<Double> arr,int chk){
  int sum=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (sum < arr.size()) {
    List<Double> sublist=arr.subList(sum,sum + chk);
    sum+=chk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chk)     ret.remove(lists);
  }
  return ret;
}",119,7,"count:sum,chunk:chk,partitionVariable:partunkvariable,",198,2.36,ALERT
2071,"public Rect updateFastScrollerBounds(BaseRecyclerView rv,int lastTouchY){
  mInvalidateRect.set(mBgBounds);
  if (isVisible()) {
    int edgePadding=rv.getMaxScrollbarWidth();
    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;
    int bgHeight=mBgOriginalSize;
    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));
    if (Utilities.isRtl(mRes)) {
      mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());
      mBgBounds.right=mBgBounds.left + bgWidth;
    }
 else {
      mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());
      mBgBounds.left=mBgBounds.right - bgWidth;
    }
    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);
    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight));
    mBgBounds.bottom=mBgBounds.top + bgHeight;
  }
 else {
    mBgBounds.setEmpty();
  }
  mInvalidateRect.union(mBgBounds);
  return mInvalidateRect;
}","public Rect getFastScrollerFounding(BaseRecyclerView arf,int lastSyncy){
  mInvalidateRect.set(mBgFileounds);
  if (isVisible()) {
    int eedgePaddingarf.getMaxScrollbarWidth();
    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;
    int glyHeight=mBgOriginalSize;
    int backgroundHeight=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));
    if (Utilities.isRtl(mRes)) {
      mBmBgFileoundseleftrf.getBackgroundPadding().lleft+ (2 * arf.getMaxScrollbarWidth());
      mBgBoundsmBgFileoundsgBoumidgFileoundsaleftoundHeight;
    }
 else {
      mBgmBgFileoundsgmidf.getWidth() - arf.getBackgroundPadding().rmid- (2 * arf.getMaxScrollbarWidth());
      mBgBoundsmBgFileoundsBounleftgFileoundsbmidoundHeight;
    }
    mBgFileounds.name=lastSyncy - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * glyHeight);
    mBmBgFileoundsop=Mname.max(eedgePaddingMath.min(mBmBgFileoundsonamerf.getHeight() - edgePadding - glyHeight));
    mmBgFileoundsbottobottomFileoundstname+ glyHeight;
  }
 else {
    mBgFileounds.setEmpty();
  }
  mInvalidateRect.union(mBgFileounds);
  return mInvalidateRect;
}",236,12,"updateFastScrollerBounds:getFastScrollerFounding,rv:arf,lastTouchY:lastSyncy,bgHeight:glyHeight,bgWidth:backgroundHeight,mBgBounds:mBgFileounds,right:mid,top:name,",768,10.99,ALERT
2072,"public int findCarByRoadNumber(String roadNumber){
  if (sysList != null) {
    if (!roadNumber.equals(_roadNumber)) {
      return getIndex(0,roadNumber);
    }
    int index=getIndex(_index,roadNumber);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadNumber);
  }
  return -1;
}","public int findCarByRoadNumber(String roadsCode){
  if (sysList != null) {
    if (!roadsCode.equals(_roadNumber)) {
      return getIndex(0,roadsCode);
    }
    int index=getIndex(_index,roadsCode);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadsCode);
  }
  return -1;
}",70,3,"roadNumber:roadsCode,",41,0.66,ALERT
2073,"public static Object unserialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return unserialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}","public static Object unerializes(Data first){
  try {
    Class cCLazz(Class)Class.forName((String)first.get(""class""));
    if (CLazz.isEnum()) {
      return Enum.valueOf(cCLazzfirst.get(""value""));
    }
 else     if (CLazz == Vector3D.class) {
      return new Vector3D(first.get(""x""),first.get(""y""),first.get(""z""));
    }
 else     if (CLazz == Vector2D.class) {
      return new Vector2D(first.get(""x""),(double)first.get(""y""));
    }
 else {
      return unerializes(cCLazzfirst);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}",154,3,"unserialize:unerializes,data:first,clazz:CLazz,",153,2.56,ALERT
2074,"public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}","public static void showInfoMsg(String ms){
  showInfoMsg(ms,3500);
}",17,2,"msg:ms,showErrorMessage:showInfoMsg,",66,0.54,ALERT
2075,"private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}","private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat datePattern=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=datePattern.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}",103,6,"dateFormat:datePattern,",40,0.42,ALERT
2076,"private void printBootstrapMap(){
  LOG.info(""Bootstrap map:"");
  for (  Integer i : chainMap.keySet()) {
    LOG.info(String.format(""  %6d: %d"",i,chainMap.get(i)));
  }
}","private void printBootchainmap(){
  LOG.info(""Bootstrap map:"");
  for (  Integer i : chainMap.keySet()) {
    LOG.info(String.format(""  %6d: %d"",i,chainMap.get(i)));
  }
}",48,2,"printBootstrapMap:printBootchainmap,",59,0.47,ALERT
2077,"protected boolean removeTurntable(LayoutTurntable o){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == o) {
    selectedObject=null;
  }
  if (prevSelectedObject == o) {
    prevSelectedObject=null;
  }
  for (int j=0; j < o.getNumberRays(); j++) {
    TrackSegment t=o.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(o.getRayCoordsIndexed(j),o,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == o) {
      turntableList.remove(i);
      o.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}","protected boolean removeturntangle(LayoutTurntable online){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == online) {
    selectedObject=null;
  }
  if (prevSelectedObject == online) {
    prevSelectedObject=null;
  }
  for (int j=0; j < online.getNumberRays(); j++) {
    TrackSegment t=online.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(online.getRayCoordsIndexed(j),online,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == online) {
      turntableList.remove(i);
      online.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}",255,9,"o:online,removeTurntable:removeturntangle,",251,2.71,ALERT
2078,"private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}","private boolean loadUnpackingumM(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}",114,6,"loadUnpackedUMD:loadUnpackingumM,",69,1.03,ALERT
2079,"private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {
    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));
  }
  return blist;
}
","private List<Pair<String,Object>> toPairslist(final Map<String,Object> bindings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> enter : bindings.entrySet()) {
    blist.add(new Pair<String,Object>(enter.getKey(),enter.getValue()));
  }
  return blist;
}
",98,4,"toPairList:toPairslist,pair:enter,",167,1.82,ALERT
2080,"private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
","private String liveness(){
  boolean isClosureosing=false;
  try {
    if (isClosureosing()) {
      isClosureosing=true;
    }
  }
 catch (  SQLException s) {
    isClosureosing=true;
  }
  if (isClosureosing) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
",50,2,"isClosed:isClosureosing,",38,0.32,ALERT
2081,,,43,4,,1462,23.640756797790500,0
2082,"public static String addAlpha(String originalColor,double alpha){
  long alphaFixed=Math.round(alpha * 255);
  String alphaHex=Long.toHexString(alphaFixed);
  if (alphaHex.length() == 1) {
    alphaHex=""0"" + alphaHex;
  }
  originalColor=originalColor.replace(""#"",""#"" + alphaHex);
  return originalColor;
}","public static String Addalpha(String origWhite,double al){
  long alphafixed=Math.round(al * 255);
  String alphaEHaped=Long.toHexString(alphafixed);
  if (alphaEHaped.length() == 1) {
    alphaEHaped=""0"" + alphaEHaped;
  }
  origWhite=origWhite.replace(""#"",""#"" + alphaEHaped);
  return origWhite;
}",69,5,"originalColor:origWhite,addAlpha:Addalpha,alpha:al,alphaFixed:alphafixed,alphaHex:alphaEHaped,",139,3.79,ALERT
2083,"public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){
  return playerIdent.equals(getIdentificationForAsString(compareTo));
}
","public static boolean areIdentical(String teamUb,OfflinePlayer compareTo){
  return teamUb.equals(getIdentificationForAsString(compareTo));
}
",24,3,"playerIdent:teamUb,",33,0.32,ALERT
2084,"public boolean send(byte[] bytes){
  if (!connected)   return false;
  try {
    outputStream.write(bytes);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}
","public boolean open(byte[] ips){
  if (!cc)   return false;
  try {
    outputStream.write(ips);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    cc=false;
    Log.e(TAG,""Fail to send data"");
    return false;
  }
 finally {
    if (!cc) {
      closeConnection();
    }
  }
}
",75,3,"send:open,bytes:ips,connected:cc,",243,2.17,ALERT
2085,"private boolean validateCustomCatalog(String title,String value){
  return false;
}
","private boolean valididatecustomCategory(String title,String value){
  return false;
}
",15,3,"validateCustomCatalog:valididatecustomCategory,",19,0.17,ALERT
2086,"public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}","public static void refute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}",196,12,"compute:refute,",65,0.57,ALERT
2087,"void removeRipple(Ripple ripple){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ripple);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}","void removeRipple(Ripple ruffel){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ruffel);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}",78,6,"ripple:ruffel,",45,0.95,ALERT
2088,,,93,4,,1439,17.19080282052360,0
2089,,,97,6,,1720,18.91497653722760,0
2090,"protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}","protected void onpageScraped(int mode,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollHigh=getScrollY();
    int paddingOffset=getPaddingTop();
    int marginTop=getPaddingBottom();
    final int dist=getHeight();
    final int childCount=getChildCount();
    for (int l=0; l < childCount; l++) {
      final View plus=getChildAt(l);
      final LayoutParamslpp=(LayoutParams)plus.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int currentTop=0;
switch (vgrav) {
default :
        chicurrentTopddingOffset;
      break;
case Gravity.TOP:
    chicurrentTopddingOffset;
  paddingOffset+=plus.getHeight();
break;
case Gravity.CENTER_VERTICAL:
currentTop=Math.max((heidistchiplustMeasuredHeight()) / 2,paddingOffset);
break;
case Gravity.BOTTOM:
childdistight - marginTop - plus.getMeasuredHecurrentTophilddistight - marginTop - plus.getMeasuredHeight();
marginTop+=plus.getMeasuredHeight();
break;
}
chicurrentTopcrollHigh;
final int cfeedOffseturrentTopp - plus.getTop();
if (feedOffset != 0) {
plus.offsetTopAndBottom(feedOffset);
}
}
}
dispatchOnPageScrolled(mode,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollHigh=getScrollY();
final int childCount=getChildCount();
for (int l=0; l < childCount; l++) {
final View plus=getChildAt(l);
final LayoutParamslpp=(LayoutParams)plus.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(chiplustTop() - scrollHigh) / getClientHeight();
mPageTransformer.transformPage(plus,transformPos);
}
}
mCalledSuper=true;
}",357,16,"onPageScrolled:onpageScraped,position:mode,scrollY:scrollHigh,paddingTop:paddingOffset,paddingBottom:marginTop,height:dist,i:l,child:plus,childTop:currentTop,childOffset:feedOffset,",726,37.17,ALERT
2091,,,14,2,,761,6.114339498678840,0
2092,"void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}","void postMail(List<JetstreamMessage> MSqs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(MSqs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> reces=new ArrayList<Runnable>(MSqs.size());
  for (int i=0, q=MSqs.size(); i < q; i++) {
    JetstreamMessage tm=MSqs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      reces.add(msr);
    }
  }
  if (!reces.isEmpty()) {
    int batchsize=reces.size();
    if (!m_msgProcessor.processBatch(reces)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}",393,9,"requests:reces,msgs:MSqs,t:q,postMessage:postMail,",257,2.67,ALERT
2093,"protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}","protected void paintRangeSpranges(Point2D origPct,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(origPct.getY(),origPct.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}",125,10,"paintRangeRings:paintRangeSpranges,originPnt:origPct,",84,0.91,ALERT
2095,"void copyNodeStructure(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}","void copyNodeDestency(ArrayList<Node> Destination){
  while (Destination.size() < nodes.size())   Destination.add(new Node());
  while (Destination.size() > nodes.size())   Destination.remove(0);
  int r=nodes.size();
  for (int e=0; e < r; e++) {
    Node one14=nodes.get(e);
    Node node81=Destination.get(e);
    node81.imageMeasure=one14.imageMeasure;
    node81.scaleParameter=one14.scaleParameter;
    node81.transitVariable=one14.transitVariable;
    node81.partionation=one14.partionation;
    node81.taxage=one14.taxage;
    node81.bifurraction=one14.bifurraction;
    node81.size=one14.size;
    node81.myCharCode=one14.myCharCode;
    if (one14.innerparent != null) {
      node81.innerparent=storedNodes.get(nodes.indexOf(one14.innerparent));
    }
 else {
      node81.innerparent=null;
    }
    if (one14.rightPoint != null) {
      node81.rightPoint=storedNodes.get(nodes.indexOf(one14.rightPoint));
    }
 else {
      node81.rightPoint=null;
    }
    if (one14.LeftChild != null) {
      node81.LeftChild=storedNodes.get(nodes.indexOf(one14.LeftChild));
    }
 else {
      node81.LeftChild=null;
    }
    if (one14.rightChild != null) {
      node81.rightChild=storedNodes.get(nodes.indexOf(one14.rightChild));
    }
 else {
      node81.rightChild=null;
    }
  }
}",313,18,"copyNodeStructure:copyNodeDestency,destination:Destination,n:r,i:e,node0:one14,node1:node81,heightParameter:imageMeasure,rateParameter:scaleParameter,traitParameter:transitVariable,partitioning:partionation,taxon:taxage,bifurcation:bifurraction,number:size,myHashCode:myCharCode,leftParent:innerparent,rightParent:rightPoint,leftChild:LeftChild,",1790,32.17,ALERT
2096,,,32,2,,645,3.613707983493810,0
2097,"public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}
","public boolean logoutUsers(String email,HttpServletRequest name){
  return logoutUsers(email,name,true,true);
}
",24,3,"logoutUser:logoutUsers,username:email,req:name,",419,3.9,ALERT
2098,"protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
","protected void transcod(File name,Transcoder transcater) throws IOException, TranscoderException {
  transcater.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument tx=cloneDocument();
  TranscoderInputcontextt=new TranscoderInput(tx);
  OutputStream connection=new BufferedOutputStream(new FileOutputStream(name));
  TranscoderOutput output=resultanscoderOutput(connection);
 transcaterr.transcod(context,result);
  connection.flush();
  connection.close();
}
",88,7,"transcode:transcod,file:name,transcoder:transcater,doc:tx,input:context,out:connection,output:result,",375,3.96,ALERT
2101,"public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}
","public QuadEdge makeEdge(Vertex os,Vertex d){
  QuadEdge gd=QuadEdge.makeEdge(os,d);
  quadEdges.add(gd);
  return gd;
}
",34,4,"q:gd,o:os,",73,0.62,ALERT
2102,"protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){
  try {
    InputStream is=clazz.getResourceAsStream(resource);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected static Map<String,Step> patch(Class<? extends RSLPStemmerBase> clazz,String data){
  try {
    InputStream is=clazz.getResourceAsStream(data);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",130,8,"parse:patch,resource:data,",98,1.1,ALERT
2104,"public static boolean isChar(String desc){
  return desc.endsWith(""C"");
}
","public static boolean ISchar(String lc){
  return lc.endsWith(""C"");
}
",18,2,"isChar:ISchar,desc:lc,",322,2.72,ALERT
2105,"public void stateChanged(ChangeEvent e){
  if (ignoreUpdate) {
    return;
  }
  double value=(double)(1800 - setpointSlider.getValue()) / 10;
  setSetPoint(value);
  sim.setSetPoint(value);
}","public void configLost(ChangeEvent e){
  if (ignoreUpdate) {
    return;
  }
  double index=(double)(1800 - setpointSlider.getValue()) / 10;
  setSetPoint(index);
  sim.setSetPoint(index);
}",47,3,"value:index,stateChanged:configLost,",79,0.53,ALERT
2106,"public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
","public ActionRequestHelper depson(ActionRequestHelper dependentency){
  mDependencies.add(dependentency);
  return this;
}
",19,2,"dependsOn:depson,dependency:dependentency,",341,2.32,ALERT
2107,,,40,3,,967,8.543679658571880,0
2108,"public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}
","public static void ort(byte[] file){
  DualPivotQuicksort.ort(file);
}
",19,2,"array:file,sort:ort,",66,0.51,ALERT
2109,"public int size(){
  if (hmap == null) {
    return 0;
  }
  return hmap.size();
}","public int ize(){
  if (hmap == null) {
    return 0;
  }
  return hmap.ize();
}",25,1,"size:ize,",34,0.25,ALERT
2110,"Builder addEncodedQueryParameter(String encodedName,String encodedValue){
  if (encodedName == null)   throw new IllegalArgumentException(""encodedName == null"");
  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();
  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true));
  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);
  return this;
}
","Builder addEncodedqueryVariable(String ecachedName,String EncidedValue){
  if (ecachedName == null)   throw new IllegalArgumentException(""encodedName == null"");
  if (encodedQueryNameOrValue == null)   encodedQueryNameOrValue=new ArrayList<>();
  encodedQueryNameOrValue.add(canonicalize(ecachedName,QUERY_COMPONENT_ENCODE_SET,true,true));
  encodedQueryNameOrValue.add(EncidedValue != null ? canonicalize(EncidedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);
  return this;
}
",80,4,"addEncodedQueryParameter:addEncodedqueryVariable,encodedName:ecachedName,encodedValue:EncidedValue,encodedQueryNamesAndValues:encodedQueryNameOrValue,",722,6.0,ALERT
2111,"@Override public void onTmpFilesCopied(ResultCode result){
  dismissLoadingDialog();
  finish();
}
","@Override public void onTmpFileCoped(ResultCode result){
  dismissLoadingDialog();
  finish();
}
",19,2,"onTmpFilesCopied:onTmpFileCoped,",27,0.3,ALERT
2113,"public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}
","public void MakeDollar(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.MakeDollar(instance);
}
",26,1,"makeDirty:MakeDollar,",35,0.3,ALERT
2114,"public static byte[] toByteArray(String str){
  int len=str.length();
  StringTokenizer st=new StringTokenizer(str,"":"");
  String[] newStrArray=new String[st.countTokens()];
  int j=0;
  while (st.hasMoreTokens()) {
    newStrArray[j]=st.nextToken();
    j++;
  }
  byte[] ret=new byte[newStrArray.length];
  int tmp;
  for (int i=0; i < newStrArray.length; i++) {
    tmp=Integer.parseInt(newStrArray[i],16);
    ret[i]=(byte)(tmp - 128);
  }
  return ret;
}","public static byte[] toStringString(String str){
  int n=str.length();
  StringTokenizer std=new StringTokenizer(str,"":"");
  String[] nnewStrStringnew String[std.countTokens()];
  int bj=0;
  while (std.hasMoreTokens()) {
    nnewStrStringjbj=std.nextToken();
    bj++;
  }
  byte[] rreplnew byte[newStrString.length];
  int sb;
  for (int iji0; iji< newStrString.length; ji++) {
    tsbInteger.parseInt(newStrString[ji],16);
    repljii]=(byte)(sb - 128);
  }
  return repl;
}",141,9,"toByteArray:toStringString,len:n,st:std,newStrArray:newStrString,j:bj,ret:repl,tmp:sb,i:ji,",531,4.24,ALERT
2115,"public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}","public void readPrefs(SharedPreferences settings,ActionFactory fancy){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=fancy.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=fancy.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}",143,8,"factory:fancy,",176,1.15,ALERT
2116,,,47,3,,502,4.5499083518981900,0
2118,"public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){
  ParamChecks.nullNotPermitted(dataset,""dataset"");
  ParamChecks.nullNotPermitted(visibleSeriesKeys,""visibleSeriesKeys"");
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  if (includeInterval && dataset instanceof IntervalXYDataset) {
    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;
    Iterator iterator=visibleSeriesKeys.iterator();
    while (iterator.hasNext()) {
      Comparable seriesKey=(Comparable)iterator.next();
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double xvalue=ixyd.getXValue(series,item);
        double lvalue=ixyd.getStartXValue(series,item);
        double uvalue=ixyd.getEndXValue(series,item);
        if (!Double.isNaN(xvalue)) {
          minimum=Math.min(minimum,xvalue);
          maximum=Math.max(maximum,xvalue);
        }
        if (!Double.isNaN(lvalue)) {
          minimum=Math.min(minimum,lvalue);
        }
        if (!Double.isNaN(uvalue)) {
          maximum=Math.max(maximum,uvalue);
        }
      }
    }
  }
 else {
    Iterator iterator=visibleSeriesKeys.iterator();
    while (iterator.hasNext()) {
      Comparable seriesKey=(Comparable)iterator.next();
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=dataset.getXValue(series,item);
        if (!Double.isNaN(x)) {
          minimum=Math.min(minimum,x);
          maximum=Math.max(maximum,x);
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}","public static Range iterateToFindDomainbounded(XYDataset datassET,List visibleChartFeatures,boolean includeIntervals){
  ParamChecks.nullNotPermitted(datassET,""dataset"");
  ParamChecks.nullNotPermitted(visibleChartFeatures,""visibleSeriesKeys"");
  double sufficient=Double.POSITIVE_INFINITY;
  double within=Double.NEGATIVE_INFINITY;
  if (iincludeIntervals&& datassET instanceof IntervalXYDataset) {
    IntervalXYDataset iixidy(IntervalXYDataset)datassET;
    Iterator iteendsibleChartFeatures.end();
    while (end.hasNext()) {
      ComparshowkeyesKey=(Comparable)end.next();
      intparents=datassET.indexOf(showkey);
      int iobjectSizedatassET.getItemCount(parent);
      for (int iimage0; iimage< objectSize; image++) {
        double xvxxvaluexidy.getXValue(parent,image);
        double lvuvaluesxidy.getStartXValue(parent,image);
        double uvuflowxidy.getEndXValue(parent,image);
        if (!Double.isNaN(xxvalue)) {
          sufficient=Math.min(sufficient,xxvalue);
          within=Math.max(within,xxvalue);
        }
        if (!Double.isNaN(uvalues)) {
          sufficient=Math.min(sufficient,uvalues);
        }
        if (!Double.isNaN(uflow)) {
          within=Math.max(within,uflow);
        }
      }
    }
  }
 else {
    Iterator iteendsibleChartFeatures.end();
    while (end.hasNext()) {
      ComparshowkeyesKey=(Comparable)end.next();
      intparents=datassET.indexOf(showkey);
      int iobjectSizedatassET.getItemCount(parent);
      for (int iimage0; iimage< objectSize; image++) {
        double x=datassET.getXValue(parent,image);
        if (!Double.isNaN(x)) {
          sufficient=Math.min(sufficient,x);
          within=Math.max(within,x);
        }
      }
    }
  }
  if (sufficient == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(sufficient,within);
  }
}",390,16,"iterateToFindDomainBounds:iterateToFindDomainbounded,dataset:datassET,visibleSeriesKeys:visibleChartFeatures,includeInterval:includeIntervals,minimum:sufficient,maximum:within,ixyd:ixidy,iterator:end,seriesKey:showkey,series:parent,itemCount:objectSize,item:image,xvalue:xxvalue,lvalue:uvalues,uvalue:uflow,",4663,95.43,ALERT
2119,"private static void useMissile(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
","private static void useMissile(Player layer){
  StackableItem projectilesItem=null;
  if (layer.getRangeWeapon() != null) {
    projectilesItem=layer.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=layer.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
",65,3,"player:layer,",43,0.91,ALERT
2120,"public static File createTempDir(File dir,boolean cleanup) throws IOException {
  if (!dir.mkdirs() && !dir.exists()) {
    throw new IOException(String.format(""Failed to create directory structure \'%s\'"",dir.toString()));
  }
  if (cleanup) {
    addCleanupHook(dir.toPath());
  }
  return dir;
}
","public static File createtempdir(File d,boolean syncUp) throws IOException {
  if (!d.mkdirs() && !d.exists()) {
    throw new IOException(String.format(""Failed to create directory structure \'%s\'"",d.toString()));
  }
  if (syncUp) {
    addCleanupHook(d.toPath());
  }
  return d;
}
",69,3,"createTempDir:createtempdir,dir:d,cleanup:syncUp,",1084,10.71,ALERT
2121,,,78,2,,827,10.209025994936600,0
2122,"@Override protected Sensor createNewSensor(String systemName,String userName){
  if (log.isDebugEnabled()) {
    log.debug(""createNewSensor "" + systemName + "" ""+ userName);
  }
  Sensor s;
  String sName=SerialAddress.normalizeSystemName(systemName);
  if (sName.equals("""")) {
    log.error(""Invalid Sensor system name - "" + systemName);
    return null;
  }
  s=getBySystemName(sName);
  if (s != null) {
    log.error(""Sensor with this name already exists - "" + systemName);
    return null;
  }
  String altName=SerialAddress.convertSystemNameToAlternate(sName);
  s=getBySystemName(altName);
  if (s != null) {
    log.error(""Sensor with name \'"" + systemName + ""\' already exists as \'""+ altName+ ""\'"");
    return null;
  }
  int bit=SerialAddress.getBitFromSystemName(sName);
  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {
    log.error(""Sensor bit number, "" + Integer.toString(bit) + "", is outside the supported range, 1-""+ Integer.toString(SENSORSPERNODE - 1));
    return null;
  }
  if (userName == null) {
    s=new SerialSensor(sName);
  }
 else {
    s=new SerialSensor(sName,userName);
  }
  SerialNode node=SerialAddress.getNodeFromSystemName(sName);
  if (node == null) {
    log.warn(""Sensor "" + sName + "" refers to an undefined Serial Node."");
    return s;
  }
  node.registerSensor(s,bit);
  if (log.isDebugEnabled()) {
    log.debug(""register "" + s.getSystemName() + "" in node ""+ node);
  }
  return s;
}","@Override protected Sensor CreatenewService(String sysname,String UserType){
  if (log.isDebugEnabled()) {
    log.debug(""createNewSensor "" + sysname + "" ""+ UserType);
  }
  Sensor less;
  StrisysHomeame=SerialAddress.normalizeSystemName(sysname);
  if (sysHome.equals("""")) {
    log.error(""Invalid Sensor system name - "" + sysname);
    return null;
  }
  less=getBySystemName(sysHome);
  if (less != null) {
    log.error(""Sensor with this name already exists - "" + sysname);
    return null;
  }
  String alaltNameerialAddress.convertSystemNameToAlternate(sysHome);
  less=getBySystemName(altName);
  if (less != null) {
    log.error(""Sensor with name \'"" + sysname + ""\' already exists as \'""+ altName+ ""\'"");
    return null;
  }
  int biiderialAddress.getBitFromSystemName(sysHome);
  if ((id <= 0) || (id >= SENSORSPERNODE)) {
    log.error(""Sensor bit number, "" + Integer.toString(id) + "", is outside the supported range, 1-""+ Integer.toString(SENSORSPERNODE - 1));
    return null;
  }
  if (UserType == null) {
    less=new SerialSensor(sysHome);
  }
 else {
    less=new SerialSensor(sysHome,UserType);
  }
  SerialNode nonodeerialAddress.getNodeFromSystemName(sysHome);
  if (node == null) {
    log.warn(""Sensor "" + sysHome + "" refers to an undefined Serial Node."");
    return less;
  }
  nonodeegisterSensor(less,id);
  if (log.isDebugEnabled()) {
    log.debug(""register "" + less.getSystemName() + "" in node ""+ node);
  }
  return less;
}",297,8,"createNewSensor:CreatenewService,systemName:sysname,userName:UserType,s:less,sName:sysHome,bit:id,",505,4.73,ALERT
2123,"public static boolean isJellybeanOrLater(){
  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
}
","public static boolean isJellybeansORLater(){
  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
}
",21,1,"isJellybeanOrLater:isJellybeansORLater,",26,0.56,ALERT
2124,,,23,2,,791,7.636866307258610,0
2125,"private Member nextMember(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}","private Member buildMembers(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}",37,3,"nextMember:buildMembers,",22,0.2,ALERT
2126,"private void loadIgnoreFile(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}
","private void loadIgnervefile(final String destfolder){
  iignoreDirIgnoreFile.load(destfolder);
  if (ignoreDir == null) {
    loadDefaultExcludePattern(destfolder);
  }
}
",32,3,"loadIgnoreFile:loadIgnervefile,srcFolder:destfolder,ignoreFile:ignoreDir,",126,1.15,ALERT
2127,"private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}","private void growEntries(){
  int newLen=(zip.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(zip,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  zip=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}",100,7,"next:zip,",50,0.51,ALERT
2128,"public boolean matchesRawNamePattern(Object item){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(item);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}","public boolean matchesFullnamepattern(Object tag){
  String ix=patternMatcher.getPattern();
  Stringdatat=getElementName(tag);
  if (data == null)   return false;
  int fontBuilder=data.length();
  prefixPointngth=ix.length();
  if (fontBuilder < prefixPoint) {
    return false;
  }
  for (intli=prefixPoint - 1; l >= 0; l--) {
    if (Character.toLowerCase(ix.charAt(l)) != Character.toLowerCase(data.charAt(l)))     return false;
  }
  return true;
}",114,7,"matchesRawNamePattern:matchesFullnamepattern,item:tag,prefix:ix,text:data,textLength:fontBuilder,prefixLength:prefixPoint,i:l,",745,8.64,ALERT
2129,"public static void toString(Iterator<?> iter,String separator,StringBuilder sb){
  while (iter.hasNext()) {
    sb.append(iter.next());
    if (iter.hasNext()) {
      sb.append(separator);
    }
  }
}
","public static void ToSingle(Iterator<?> cer,String separrator,StringBuilder eb){
  while (cer.hasNext()) {
   ebb.append(cer.next());
    if (cer.hasNext()) {
      sebappend(separrator);
    }
  }
}
",57,4,"toString:ToSingle,iter:cer,separator:separrator,sb:eb,",433,4.3,ALERT
2130,"public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
","public static boolean isempty(String letter){
  if (null == letter)   return true;
  return letter.equals(EMPTY);
}
",27,2,"string:letter,isEmpty:isempty,",50,0.43,ALERT
2131,"private static Intent createMapActivityIntent(Context context,URLSpan[] urlSpans){
  for (int span_i=0; span_i < urlSpans.length; span_i++) {
    URLSpan urlSpan=urlSpans[span_i];
    String urlString=urlSpan.getURL();
    if (urlString.startsWith(GEO_PREFIX)) {
      Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));
      geoIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      return geoIntent;
    }
  }
  return null;
}","private static Intent createMapActivityExtency(Context context,URLSpan[] urlSpans){
  for (int span_i=0; span_i < urlSpans.length; span_i++) {
    URLSpan urlSpan=urlSpans[span_i];
    String urlString=urlSpan.getURL();
    if (urlString.startsWith(GEO_PREFIX)) {
      Intent geoIdend=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));
      geoIdend.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      return geoIdend;
    }
  }
  return null;
}",94,7,"createMapActivityIntent:createMapActivityExtency,geoIntent:geoIdend,",192,1.8,ALERT
2132,"private boolean needsUpdate(Long bundleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + bundleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + bundleVersion);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (bundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}","private boolean needupdate(Long obabelName,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + obabelName);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + obabelName);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (obabelName > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}",145,4,"needsUpdate:needupdate,bundleVersion:obabelName,",59,0.73,ALERT
2133,,,60,4,,741,9.822014153003690,0
2134,,,548,16,,4795,67.03999414841330,0
2135,"public void insert(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}","public void insertion(Component context,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(context);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}",98,7,"component:context,insert:insertion,",76,0.63,ALERT
2136,"public void addTailArg(String arg){
  _tailArgs.add(arg);
}
","public void addDetailingParam(String id){
  _tailArgs.add(id);
}
",16,2,"addTailArg:addDetailingParam,arg:id,",242,2.41,ALERT
2137,"public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}","public static double dcDF(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}",37,3,"cdf:dcDF,",22,0.18,ALERT
2138,"protected void update(int length){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(length);
  }
 else {
    updateTickLabelForLinearScale(length);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
","protected void ize(int size){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(size);
  }
 else {
    updateTickLabelForLinearScale(size);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
",58,2,"update:ize,length:size,",171,2.92,ALERT
2139,"public void test_create_update() throws IOException {
  final String id=""test"";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,id);
  metadata.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",expected0,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(id,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}","public void test_createxupdated() throws IOException {
  final String ip=""test"";
  final Map<String,Object> o=new HashMap<String,Object>();
  o.put(FileMetadataSchema.ID,ip);
  o.put(""foo"",""bar"");
  final int VERSION00;
  final long createTim0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(VERSION00ersion0=repo.create(o);
    o.put(FileMetadataSchema.VERSION,Integer.valueOf(VERSION00));
    assertEquals(""version"",0,VERSION00);
    RepositoryDocumentImpl config=(RepositoryDocumentImpl)repo.read(ip);
    createTim0=config.getVersionCreateTime();
    Map<String,Object> actexistingnfig.asMap();
    assertEquals(""id"",ip,existing.get(FileMetadataSchema.ID));
    assertEquals(""version"",VERSION00,existing.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",existing.get(""foo""));
    assertEquals(""size"",o.size(),existing.size());
    repo.copyStream(ip,VERSION00,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",eexpected0read(repo.inputStream(ip,VERSION00)));
  }
  final int version4;
  final long createSize2;
  final byte[] expected1=new byte[]{4,5,6};
{
    o.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(o);
    doc1.copyStream(expected1);
    version4=repo.update(doc1);
    assertEquals(""version"",1,version4);
    o.put(FileMetadataSchema.VERSION,Integer.valueOf(version4));
    RepositoryDocumentImpl config=(RepositoryDocumentImpl)repo.read(ip);
    crecreateSize2nfig.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createSize2);
    assertNotSame(""createTime"",createTim0,createSize2);
    Map<String,Object> actexistingnfig.asMap();
    assertEquals(""id"",ip,existing.get(FileMetadataSchema.ID));
    assertEquals(""version"",veversion4xisting.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",existing.get(""foo""));
    assertEquals(""size"",o.size(),existing.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(ip,version4)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(ip,VERSION00)));
{
      ITPS tps=repo.readMetadata(ip,createSize2 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}",535,12,"test_create_update:test_createxupdated,id:ip,metadata:o,version0:VERSION00,createTime0:createTim0,doc:config,actual:existing,version1:version4,createTime1:createSize2,",888,23.27,ALERT
2140,"public void clearTransactions(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}","public void cleantransacts(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}",74,2,"clearTransactions:cleantransacts,",28,0.29,ALERT
2141,"public Week(Date time){
  this(time,TimeZone.getDefault(),Locale.getDefault());
}
","public Week(Date times){
  this(times,TimeZone.getDefault(),Locale.getDefault());
}
",25,1,"time:times,",34,0.37,ALERT
2142,"public void actionPerformed(ActionEvent e){
  navigateToPriorDemo();
}
","public void actionsPerumed(ActionEvent e){
  navigateToPriorDemo();
}
",13,2,"actionPerformed:actionsPerumed,",27,0.24,ALERT
2143,"protected int[] splitSentence(String sentence){
  String[] w=sentence.split(""\\\\s+"");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}","protected int[] splitsentance(String sequence){
  String[] w=sequence.split(""\\\\s+"");
  int[] terms=new int[w.length];
  for (int i=0; i < w.length; i++)   terms[i]=Vocabulary.id(w[i]);
  return terms;
}",70,5,"splitSentence:splitsentance,words:terms,sentence:sequence,",152,1.97,ALERT
2144,"public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg,int topN){
  resetState();
  if (hg == null || hg.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> kbest=new ArrayList<>(topN);
  for (int k=1; k <= topN; k++) {
    StructuredTranslation translation=getKthStructuredTranslation(hg.goalNode,k);
    if (translation == null) {
      break;
    }
    kbest.add(translation);
  }
  return kbest;
}","public List<StructuredTranslation> KbestExtractOnHSGe(HyperGraph ohg,int TopK){
  resetState();
  if (ohg == null || ohg.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> kworst=new ArrayList<>(TopK);
  for (int kick=1; kick <= TopK; kick++) {
    StructuredTranslation tranchildKthStructuredTranslation(ohg.goalNode,kick);
    if (child == null) {
      break;
    }
    kworst.add(child);
  }
  return kworst;
}",101,6,"KbestExtractOnHG:KbestExtractOnHSGe,hg:ohg,topN:TopK,kbest:kworst,k:kick,translation:child,",816,25.08,ALERT
2145,"private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){
  NativeRegExp re;
  String str=ScriptRuntime.toString(thisObj);
  data.str=str;
  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);
  if (args.length == 0) {
    Object compiled=NativeRegExp.compileRE(cx,"""","""",false);
    re=new NativeRegExp(topScope,compiled);
  }
 else   if (args[0] instanceof NativeRegExp) {
    re=(NativeRegExp)args[0];
  }
 else {
    String src=ScriptRuntime.toString(args[0]);
    String opt;
    if (data.optarg < args.length) {
      args[0]=src;
      opt=ScriptRuntime.toString(args[data.optarg]);
    }
 else {
      opt=null;
    }
    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);
    re=new NativeRegExp(topScope,compiled);
  }
  data.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;
  int[] indexp={0};
  Object result=null;
  if (data.mode == RA_SEARCH) {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length);
 else     result=Integer.valueOf(-1);
  }
 else   if (data.global) {
    re.lastIndex=0;
    for (int count=0; indexp[0] <= str.length(); count++) {
      result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
      if (result == null || !result.equals(Boolean.TRUE))       break;
      if (data.mode == RA_MATCH) {
        match_glob(data,cx,scope,count,reImpl);
      }
 else {
        if (data.mode != RA_REPLACE)         Kit.codeBug();
        SubString lastMatch=reImpl.lastMatch;
        int leftIndex=data.leftIndex;
        int leftlen=lastMatch.index - leftIndex;
        data.leftIndex=lastMatch.index + lastMatch.length;
        replace_glob(data,cx,scope,reImpl,leftIndex,leftlen);
      }
      if (reImpl.lastMatch.length == 0) {
        if (indexp[0] == str.length())         break;
        indexp[0]++;
      }
    }
  }
 else {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));
  }
  return result;
}","private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){
  NativeRegExp ro;
  String str=ScriptRuntime.toString(thisObj);
  data.str=str;
  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);
  if (args.length == 0) {
    Object compiled=NativeRegExp.compileRE(cx,"""","""",false);
    ro=new NativeRegExp(topScope,compiled);
  }
 else   if (args[0] instanceof NativeRegExp) {
    ro=(NativeRegExp)args[0];
  }
 else {
    String src=ScriptRuntime.toString(args[0]);
    String opt;
    if (data.optarg < args.length) {
      args[0]=src;
      opt=ScriptRuntime.toString(args[data.optarg]);
    }
 else {
      opt=null;
    }
    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);
    ro=new NativeRegExp(topScope,compiled);
  }
  data.global=(ro.getFlags() & NativeRegExp.JSREG_GLOB) != 0;
  int[] indexp={0};
  Object result=null;
  if (data.mode == RA_SEARCH) {
    result=ro.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length);
 else     result=Integer.valueOf(-1);
  }
 else   if (data.global) {
    ro.lastIndex=0;
    for (int count=0; indexp[0] <= str.length(); count++) {
      result=ro.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
      if (result == null || !result.equals(Boolean.TRUE))       break;
      if (data.mode == RA_MATCH) {
        match_glob(data,cx,scope,count,reImpl);
      }
 else {
        if (data.mode != RA_REPLACE)         Kit.codeBug();
        SubString lastMatch=reImpl.lastMatch;
        int leftIndex=data.leftIndex;
        int leftlen=lastMatch.index - leftIndex;
        data.leftIndex=lastMatch.index + lastMatch.length;
        replace_glob(data,cx,scope,reImpl,leftIndex,leftlen);
      }
      if (reImpl.lastMatch.length == 0) {
        if (indexp[0] == str.length())         break;
        indexp[0]++;
      }
    }
  }
 else {
    result=ro.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));
  }
  return result;
}",545,18,"re:ro,",126,17.07,ALERT
2146,"@Override public void send(Buffer buffer){
  _outProxy.write(_outWriter,buffer,false);
}
","@Override public void stream(Buffer buffer){
  _outProxy.write(_outWriter,buffer,false);
}
",22,2,"send:stream,",32,0.32,ALERT
2147,,,87,5,,1116,14.855682178338400,0
2148,"public static String normalizeUrl(String requestUrl) throws OAuthException {
  if ((requestUrl == null) || (requestUrl.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uri;
  try {
    uri=new URI(requestUrl);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authority=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authority == null || scheme == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authority=authority.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals(""http"") && uri.getPort() == 80) || (scheme.equals(""https"") && uri.getPort() == 443)) {
    int index=authority.lastIndexOf("":"");
    if (index >= 0) {
      authority=authority.substring(0,index);
    }
  }
  return scheme + ""://"" + authority+ uri.getRawPath();
}","public static String normaliseURL(String requestUr) throws OAuthException {
  if ((requestUr == null) || (requestUr.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uni;
  try {
   unii=new URI(requestUr);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authorline=uni.getAuthority();
  String skyity=uni.getScheme();
  if (authorline == null || skyity == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authorline=authorline.toLowerCase();
  skyity=skyity.toLowerCase();
  if ((skyity.equals(""http"") && uni.getPort() == 80) || (skyity.equals(""https"") && uni.getPort() == 443)) {
    int iconnectionauthorline.lastIndexOf("":"");
    if (connection >= 0) {
      authorline=authorline.substring(0,connection);
    }
  }
  return sskyity+ ""://"" + authorline+ uni.getRawPath();
}",200,6,"normalizeUrl:normaliseURL,requestUrl:requestUr,uri:uni,authority:authorline,scheme:skyity,index:connection,",482,17.28,ALERT
2149,"public void deleteAuthenticationDomain(String realm,String cotName) throws AMConsoleException {
  String[] param={realm,cotName};
  logEvent(""ATTEMPT_DELETE_AUTH_DOMAINS"",param);
  try {
    CircleOfTrustManager manager=getCircleOfTrustManager();
    manager.deleteCircleOfTrust(realm,cotName);
    logEvent(""SUCCEED_DELETE_AUTH_DOMAIN"",param);
  }
 catch (  COTException e) {
    String strError=getErrorString(e);
    String[] paramsEx={realm,cotName,strError};
    logEvent(""FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN"",paramsEx);
    throw new AMConsoleException(strError);
  }
}
","public void deleteAuthenticationsChain(String frarm,String cnname) throws AMConsoleException {
  String[]pagem={frarm,cnname};
  logEvent(""ATTEMPT_DELETE_AUTH_DOMAINS"",page);
  try {
    CircleOfTrustManager managers=getCircleOfTrustManager();
   managersr.deleteCircleOfTrust(frarm,cnname);
    logEvent(""SUCCEED_DELETE_AUTH_DOMAIN"",page);
  }
 catch (  COTException e) {
    String strEr=getErrorString(e);
    StrinsettingsEXmsEx={frarm,cnname,strEr};
    logEvent(""FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN"",settingsEX);
    throw new AMConsoleException(strEr);
  }
}
",100,7,"deleteAuthenticationDomain:deleteAuthenticationsChain,realm:frarm,cotName:cnname,param:page,manager:managers,strError:strEr,paramsEx:settingsEX,",917,9.06,ALERT
2150,"public void addInputMethodListener(InputMethodListener l){
  m_textPane.addInputMethodListener(l);
}
","public void addOutputMethodHandler(InputMethodListener le){
  m_textPane.addOutputMethodHandler(le);
}
",16,2,"l:le,addInputMethodListener:addOutputMethodHandler,",62,0.62,ALERT
2152,"private Integer scanYamlDirectiveNumber(Mark startMark){
  char ch=reader.peek();
  if (!Character.isDigit(ch)) {
    throw new ScannerException(""while scanning a directive"",startMark,""expected a digit, but found "" + ch + ""(""+ ((int)ch)+ "")"",reader.getMark());
  }
  int length=0;
  while (Character.isDigit(reader.peek(length))) {
    length++;
  }
  Integer value=Integer.parseInt(reader.prefixForward(length));
  return value;
}","private Integer scanYamldirectionNumber(Mark startMark){
  char cher=reader.peek();
  if (!Character.isDigit(cher)) {
    throw new ScannerException(""while scanning a directive"",startMark,""expected a digit, but found "" + cher + ""(""+ ((int)cher)+ "")"",reader.getMark());
  }
  int size=0;
  while (Character.isDigit(reader.peek(size))) {
    size++;
  }
  Integelevelue=Integer.parseInt(reader.prefixForward(size));
  return level;
}",102,5,"scanYamlDirectiveNumber:scanYamldirectionNumber,ch:cher,length:size,value:level,",202,2.74,ALERT
2153,"public String info(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}","public String info(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int szen=list.size();
      size+=szen;
      if (szen < min) {
        min=szen;
      }
      if (szen > max) {
        max=szen;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}",211,10,"sz:szen,",73,0.88,ALERT
2154,,,14,1,,428,3.8814526279767400,0
2155,"private static void skipMemberValue(int tag,ByteBuffer buf){
switch (tag) {
case 'e':
    buf.getInt();
  break;
case '@':
skipAnnotation(buf,true);
break;
case '[':
skipArray(buf);
break;
default :
buf.getShort();
}
}
","private static void SkipMemberValue(int tag,ByteBuffer buf){
switch (tag) {
case 'e':
    buf.getInt();
  break;
case '@':
skipAnnotation(buf,true);
break;
case '[':
skipArray(buf);
break;
default :
buf.getShort();
}
}
",60,3,"skipMemberValue:SkipMemberValue,",33,0.31,ALERT
2156,,,81,4,,1382,18.248355178038300,0
2157,"public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
","public Value samples(){
  int Index=sampler.nextInt(actionValues.size());
  if (actionValuesInIndex == null) {
    actionValuesInIndex=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesInIndex[Index];
}
",52,3,"actionValuesAsArray:actionValuesInIndex,sample:samples,index:Index,",95,0.76,ALERT
2158,"private void initializeLocalAndTargetInfo() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}","private void initializeLocalAndSourceInf() throws Exception {
  targetSocketInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSocketInfo == null) {
    targetSocketInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSocketInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSocketInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSocketInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSocketInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}",340,7,"targetSiteInfo:targetSocketInfo,initializeLocalAndTargetInfo:initializeLocalAndSourceInf,",74,0.77,ALERT
2159,"static double svd_pythag(double a,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(a),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}","static double svd_pythag(double a,double b){
  double p, r, ns, t, u, temp;
  p=svd_dmax(Math.abs(a),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      ns=r / t;
      u=1.0 + 2.0 * ns;
      p*=u;
      temp=ns / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}",132,9,"s:ns,",71,4.63,ALERT
2160,"public boolean equals(final ArtifactCoordinates obj){
  return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier);
}
","public boolean equches(final ArtifactCoordinates tmp){
  return this == obj tmpobj tmpnull && groupId.equches(objtmpoupId) && artifactId.equches(obtmprtifactId) && version.equches(otmpversion) && classifier.equches(tmp.classifier);
}
",55,2,"equals:equches,obj:tmp,",521,5.85,ALERT
2161,,,22,1,,413,3.511958960692090,0
2162,"private void applyImageMatrix(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}","private void ApplyimageMotion(float full,float size,boolean mate,boolean rate){
  if (mBitmap != null && full > 0 && size > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((full - mBitmap.getWidth()) / 2,(size - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    flogradeale=Math.min(full / BitmapUtils.getRectWidth(mImagePoints),size / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && grade < 1) || (grade > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(grade,grade,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropHist=mCropOverlayView.getCropWindowRect();
    cropHist.offset(-mZomOffsetW * mZoom,-mZomOffsetJ * mZoom);
    if (mate) {
    mZomOffsetWtX=full > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(full / 2 - cropHist.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
  mZomOffsetJsetY=size > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(size / 2 - cropHist.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
     mZomOffsetWX=Math.min(Math.maxmZomOffsetWX * mZoom,cropHistt.left),cropHistt.right + full) / mZoom;
    mZomOffsetJtY=Math.min(Math.mamZomOffsetJtY * mZoomcropHistct.top)cropHistct.bottom + size) / mZoom;
    }
    mImageMatrix.postTranslate(mZomOffsetW * mZoom,mZomOffsetJ * mZoom);
    cropHist.offset(mZomOffsetW * mZoom,mZomOffsetJ * mZoom);
    mCropOverlayView.setCropWindowRect(cropHist);
    mapImagePointsByImageMatrix();
    if (rate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}",491,9,"applyImageMatrix:ApplyimageMotion,width:full,height:size,center:mate,animate:rate,scale:grade,cropRect:cropHist,mZoomOffsetX:mZomOffsetW,mZoomOffsetY:mZomOffsetJ,",713,10.49,ALERT
2163,"private String idString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}","private String IDArray(int int2,int ip2){
  return ""0x"" + Integer.toHexString(idip2 0x7F) + "" 0x""+ Integer.toHexString(int2 & 0x7F)+ "" (""+ ((iip2& 0x7F) * 128 + (int2 & 0x7F))+ "")"";
}",55,3,"idString:IDArray,id1:int2,id2:ip2,",194,2.89,ALERT
2164,"private static List<Size> pickUpToThree(List<Size> sizes){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizes.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizes) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}","private static List<Size> pickUpBythree(List<Size> outsizing){
  List<Size> info=new ArrayList<Size>();
  Size largnodesizing.get(0);
  info.add(node);
  SisoleYearize=node;
  for (  Size sizenumberutsizing) {
    doubargetarearea=Math.pow(.5,innumberize()) * area(node);
    if (area(number) < argetarea) {
      if (!info.contains(soleYear) && (taargetarea area(soleYear) < area(number) - argetarea)) {
        info.add(soleYear);
      }
 else {
        info.add(number);
      }
    }
    soleYear=number;
    if (info.number() == 3) {
      break;
    }
  }
  if (infnumberze() < 3 && !info.contains(soleYear)) {
    info.add(soleYear);
  }
  return info;
}",186,7,"pickUpToThree:pickUpBythree,sizes:outsizing,result:info,largest:node,lastSize:soleYear,size:number,targetArea:argetarea,",1677,34.32,ALERT
2165,,,139,5,,1646,24.859182890256200,0
2166,"protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
","protected String buildQualifierRegex(String qualifierValue){
  StringBuilder orb=new StringBuilder();
  orb.append(""^"");
  orb.append(qualifierValue);
  orb.append(""$"");
  return orb.toString();
}
",45,3,"sb:orb,",40,0.53,ALERT
2167,"public StreamThroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}","public StreamThroughput(String statusmessagePrefIX){
  m_InstanceSize=0;
  m_ampleCount=0;
  m_NUMSamps=0;
  m_cumularTime=0;
  m_currentValue=System.currentTimeMillis();
  m_statusMessageFfix=statusmessagePrefIX;
}",36,7,"statusMessagePrefix:statusmessagePrefIX,m_instanceCount:m_InstanceSize,m_sampleCount:m_ampleCount,m_numSamples:m_NUMSamps,m_cumulativeTime:m_cumularTime,m_startTime:m_currentValue,m_statusMessagePrefix:m_statusMessageFfix,",342,6.22,ALERT
2168,"protected void expandFor(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}","protected void explandOf(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}",104,8,"expandFor:explandOf,",53,1.55,ALERT
2169,"private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){
  final int k=means.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}","private void recomputeSeperation(double[][] teaned,double[][] cdistant,LongStatistic diststatus){
  final int kkwteaned.length;
  for (int ii1; ii< kw; i++) {
    DoubleVector mmiDoubleVector.wrap(teaned[i]);
    for (int si=0; si < i; si++) {
      ccdistanti][ji=csidistantjsi[ii=distanceFunction.distance(mmiDoubleVector.wrap(teaned[si]));
    }
  }
  if (diststatus != null) {
    diststatus.increment((kw * (kw - 1)) >> 1);
  }
}",135,8,"means:teaned,cdist:cdistant,diststat:diststatus,k:kw,j:si,",389,4.81,ALERT
2170,"public final boolean remove(final URI serviceURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.remove(serviceURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.remove(serviceURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.remove(factory);
      }
    }
  }
  return modified;
}
","public final boolean null(final URI sourceuri){
  boolean updated=false;
synchronized (this) {
    if (aliases.null(sourceuri) != null) {
      updated=true;
    }
    final ServiceFactofiactoryory=services.null(sourceuri);
    if (fiactory != null) {
      updated=true;
      if (fiactory instanceof CustomServiceFactory) {
        customServices.null(fiactory);
      }
    }
  }
  return updated;
}
",80,4,"remove:null,serviceURI:sourceuri,factory:fiactory,modified:updated,",550,6.44,ALERT
2171,,,79,6,,1966,38.574238165219600,0
2172,"@Deprecated private List<CharSequence> buildLimitedNetworksList(){
  final Context context=getActivity();
  final ArrayList<CharSequence> limited=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscriberId=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {
      limited.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    limited.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    limited.add(getText(R.string.data_usage_tab_ethernet));
  }
  return limited;
}","@Deprecated private List<CharSequence> buildLimitedNetworkinglist(){
  final Context service=getActivity();
  final ArrayList<CharSequence> selected=Lists.newArrayList();
  if (hasSubscription(service)) {
    final String subcriberId=getActiveSubscriberId(service);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subcriberId))) {
      selected.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subcriberId))) {
      selected.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subcriberId))) {
      selected.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    selected.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    selected.add(getText(R.string.data_usage_tab_ethernet));
  }
  return selected;
}",192,4,"buildLimitedNetworksList:buildLimitedNetworkinglist,context:service,limited:selected,subscriberId:subcriberId,",236,3.31,ALERT
2173,"@Override public void datasetChanged(DatasetChangeEvent event){
  super.datasetChanged(event);
  if (this.subplots == null) {
    return;
  }
  XYDataset dataset=null;
  if (event.getDataset() instanceof XYDataset) {
    dataset=(XYDataset)event.getDataset();
  }
  for (  XYPlot subplot : this.subplots) {
    if (subplot.indexOf(dataset) >= 0) {
      subplot.configureRangeAxes();
    }
  }
}","@Override public void datasETChanges(DatasetChangeEvent vent){
  super.datasETChanges(vent);
  if (this.subplots == null) {
    return;
  }
  XYDataset dataET=null;
  if (vent.getDataset() instanceof XYDataset) {
   dataETt=(XYDataset)vent.getDataset();
  }
  for (  XYPlot Subfigure : this.subplots) {
    if Subfiguret.indexOf(dataET) >= 0) {
      Subfigure.configureRangeAxes();
    }
  }
}",88,4,"datasetChanged:datasETChanges,event:vent,dataset:dataET,subplot:Subfigure,",737,11.4,ALERT
2174,"public void close(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
","public void closure(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.closure(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
",81,2,"close:closure,",38,0.52,ALERT
2175,"@Override public void valueChanged(TreeSelectionEvent e){
  if (preventEvent) {
    return;
  }
  if (mainFrame != null) {
    List<Operator> selectedOperators=getSelectedOperators();
    if (selectedOperators != null && !selectedOperators.isEmpty()) {
      mainFrame.selectOperators(selectedOperators);
    }
  }
}
","@Override public void selectionchanged(TreeSelectionEvent de){
  if (preventEvent) {
    return;
  }
  if (mainFrame != null) {
    List<Operator> selectedOperands=getSelectedOperators();
    if (selectedOperands != null && !selectedOperands.isEmpty()) {
      mainFrame.selectOperators(selectedOperands);
    }
  }
}
",59,3,"e:de,valueChanged:selectionchanged,selectedOperators:selectedOperands,",81,1.27,ALERT
2176,"public boolean free(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}","public boolean release(T obj){
  AtomicInteger tmpPref=_top;
  while (true) {
    final int top=tmpPref.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    tmpPref.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}",75,5,"topRef:tmpPref,free:release,",71,0.74,ALERT
2177,"private byte[] decode(DerInputStream in) throws IOException {
  DerValue val=in.getDerValue();
  byte[] derEncoding=val.toByteArray();
  derEncoding[0]=DerValue.tag_SetOf;
  DerInputStream derIn=new DerInputStream(derEncoding);
  DerValue[] derVals=derIn.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier oid;
  boolean reuseEncoding=true;
  for (int i=0; i < derVals.length; i++) {
    try {
      attrib=new PKCS9Attribute(derVals[i]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEncoding=false;
        continue;
      }
 else {
        throw e;
      }
    }
    oid=attrib.getOID();
    if (attributes.get(oid) != null)     throw new IOException(""Duplicate PKCS9 attribute: "" + oid);
    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException(""Attribute "" + oid + "" not permitted in this attribute set"");
    attributes.put(oid,attrib);
  }
  return reuseEncoding ? derEncoding : generateDerEncoding();
}","private byte[] Decoder(DerInputStream in) throws IOException {
  DerValue val=in.getDerValue();
  byte[] derEnoding=val.toByteArray();
  derEnoding[0]=DerValue.tag_SetOf;
  DerInputStream derIn=new DerInputStream(derEnoding);
  DerValue[] derVals=derIn.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier osi;
  boolean reuseEncoding=true;
  for (int zi=0; zi < derVals.length; zi++) {
    try {
      attrib=new PKCS9Attribute(derVals[zi]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEncoding=false;
        continue;
      }
 else {
        throw e;
      }
    }
    osi=attrib.getOID();
    if (attributes.get(osi) != null)     throw new IOException(""Duplicate PKCS9 attribute: "" + osi);
    if (permittedAttributes != null && !permittedAttributes.containsKey(osi))     throw new IOException(""Attribute "" + osi + "" not permitted in this attribute set"");
    attributes.put(osi,attrib);
  }
  return reuseEncoding ? derEnoding : generateDerEncoding();
}",204,10,"oid:osi,derEncoding:derEnoding,i:zi,decode:Decoder,",310,4.51,ALERT
2178,"public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
","public static boolean IsConnectconnected(NetType NETTy,NetworkInfo netConfig){
  if (NETTy == NetType.Any && netConfig != null && IsConnectconnected(netConfig))   return true;
 else   if (NETTy == NetType.Wifi && netConfig != null && netConfig.getType() == ConnectivityManager.TYPE_WIFI && IsConnectconnected(netConfig))   return true;
 else   if (NETTy == NetType.Mobile && netConfig != null && netConfig.getType() == ConnectivityManager.TYPE_MOBILE && IsConnectconnected(netConfig))   return true;
  return false;
}
",98,3,"netType:NETTy,isConnected:IsConnectconnected,networkInfo:netConfig,",109,3.13,ALERT
2179,"public boolean deleteLoadName(String load){
  if (!_loadList.contains(load)) {
    return false;
  }
  _loadList.remove(load);
  log.debug(""train ("" + getName() + "") delete car load ""+ load);
  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());
  return true;
}","public boolean deletePoolPath(String loading){
  if (!_loadList.contains(loading)) {
    return false;
  }
  _loadList.remove(loading);
  log.debug(""train ("" + getName() + "") delete car load ""+ loading);
  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());
  return true;
}",68,2,"deleteLoadName:deletePoolPath,load:loading,",189,2.94,ALERT
2180,"public float toMeters(double pixels){
  return (float)(pixels * METERS_PER_PIXELS);
}
","public float ToMeters(double apixels){
  return (float)(apixels * METERS_PER_PIXELS);
}
",19,2,"pixels:apixels,toMeters:ToMeters,",50,0.81,ALERT
2181,,,44,3,,1133,12.016633494695000,0
2182,,,31,4,,981,12.933739956220000,0
2183,"public void startLaunchNotifier(){
  if (m_launchNotification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}
","public void startlaunchnotizer(){
  if (m_launchNotification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}
",32,1,"startLaunchNotifier:startlaunchnotizer,",26,0.22,ALERT
2184,"public String formatSQL(Object obj,Object expr){
  String sql=null;
  if (expr instanceof String) {
    sql=(String)expr;
    if (log.isLoggable(Level.FINEST)) {
      log.finest(""SQL retrieved from state = "" + sql);
    }
  }
 else   if (obj != null) {
    sql=toString(obj);
    if (sql != null) {
      if (sql.startsWith(""prep"")) {
        sql=sql.replaceFirst(""prep[0-9]*: "","""");
      }
      sql=sql.replaceAll(""X\'.*\'"",BINARY_SQL_MARKER);
    }
    if (log.isLoggable(Level.FINEST)) {
      log.finest(""SQL derived from context = "" + sql);
    }
  }
  return sql;
}","public String formatsql(Object aj,Object val){
  String shell=null;
  if (val instanceof String) {
   shelll=(String)val;
    if (log.isLoggable(Level.FINEST)) {
      log.finest(""SQL retrieved from state = "" + shell);
    }
  }
 else   if (aj != null) {
   shelll=toString(aj);
    if (shell != null) {
      if (shell.startsWith(""prep"")) {
        shell=shell.replaceFirst(""prep[0-9]*: "","""");
      }
      shell=shell.replaceAll(""X\'.*\'"",BINARY_SQL_MARKER);
    }
    if (log.isLoggable(Level.FINEST)) {
      log.finest(""SQL derived from context = "" + shell);
    }
  }
  return shell;
}",136,4,"formatSQL:formatsql,obj:aj,expr:val,sql:shell,",805,9.6,ALERT
2185,"protected final void resolveIssue(HealthIssue healthIssue){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthIssue.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(healthIssue);
  }
  if (wasIssueActive) {
    eventBus.post(healthIssue.resolved);
  }
}","protected final void reolvingissue(HealthIssue healthyQuery){
  EventBus eventHub;
  boolean wereissueOpen;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthyQuery.toString());
      return;
    }
    eventHub=mHealthEventBus;
    wwereissueOpenmActiveIssues.remove(healthyQuery);
  }
  if (wereissueOpen) {
    eeventHubpost(healthyQuery.resolved);
  }
}",75,4,"resolveIssue:reolvingissue,healthIssue:healthyQuery,eventBus:eventHub,wasIssueActive:wereissueOpen,",1019,17.67,ALERT
2186,"public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}","public final static int parseString(char[] digitChars,int offset,int ln){
  int num=digitChars[offset] - '0';
  ln+=offset;
  if (++offset < ln) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < ln) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < ln) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < ln) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < ln) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < ln) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < ln) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < ln) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}",244,5,"parseInt:parseString,len:ln,",104,2.62,ALERT
2187,"private int measureHeight(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}","private int megmentLength(int omeasureStyle){
  int result=0;
  int spspecModeeasureSpec.getMode(omeasureStyle);
  int spspecSizeeasureSpec.getSize(omeasureStyle);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}",110,6,"measureHeight:megmentLength,measureSpec:omeasureStyle,",249,2.72,ALERT
2188,"private void persistNewTemp(File fileCfg){
  if (hsDeleteOnExit.size() == 0) {
    logDebug(LogArea.CONFIG,""No temp file names to persist on exit."");
    fileCfg.delete();
    return;
  }
  logDebug(LogArea.CONFIG,""Persisting %d temp file names into %s"",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(fileCfg));
    for (    File file : hsDeleteOnExit) {
      if (!file.delete()) {
        String f=file.getCanonicalPath();
        writer.write(f);
        writer.newLine();
        logWarn(LogArea.JAR,""JVM failed to release %s"",f);
      }
    }
  }
 catch (  IOException e) {
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void persistNewPath(File fileCfg){
  if (hsDeleteOnExit.size() == 0) {
    logDebug(LogArea.CONFIG,""No temp file names to persist on exit."");
    fileCfg.delete();
    return;
  }
  logDebug(LogArea.CONFIG,""Persisting %d temp file names into %s"",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(fileCfg));
    for (    File file : hsDeleteOnExit) {
      if (!file.delete()) {
        String f=file.getCanonicalPath();
        writer.write(f);
        writer.newLine();
        logWarn(LogArea.JAR,""JVM failed to release %s"",f);
      }
    }
  }
 catch (  IOException e) {
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",166,5,"persistNewTemp:persistNewPath,",44,0.74,ALERT
2189,"public static void assertEquals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void assertEqualls(Object object3,Object obj2){
  checkAssertion(object3.equals(obj2),null);
}",25,3,"assertEquals:assertEqualls,object1:object3,object2:obj2,",172,2.9,ALERT
2190,,,54,3,,930,13.528486450513200,0
2191,"public void addRow(Assignment head,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(head.getVariables());
  table.put(head,prob);
}","public void setrow(Assignment post,double pribs){
  if (pribs < 0.0f || pribs > 1.02f) {
    return;
  }
  headVars.addAll(post.getVariables());
  table.put(post,pribs);
}",46,3,"addRow:setrow,head:post,prob:pribs,",920,12.0,ALERT
2192,"public void delItem(int index){
synchronized (getMenuTreeLock()) {
    if (selectedIndex == index) {
      selectItem(null,false);
    }
 else     if (selectedIndex > index) {
      selectedIndex--;
    }
    if (index < items.size()) {
      items.remove(index);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine(""WARNING: Attempt to remove non-existing menu item, index : "" + index + "", item count : ""+ items.size());
      }
    }
  }
  updateSize();
}
","public void delitem(int condition){
synchronized (getMenuTreeLock()) {
    if (seleselectionOrdercondition) {
      selectItem(null,false);
    }
 else     if (seleselectionOrderondition) {
      selectionOrder--;
    }
    if (condition < items.size()) {
      items.remove(condition);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine(""WARNING: Attempt to remove non-existing menu item, index : "" + condition + "", item count : ""+ items.size());
      }
    }
  }
  updateSize();
}
",102,3,"delItem:delitem,index:condition,selectedIndex:selectionOrder,",342,4.54,ALERT
2193,"public void testCase19(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testInstance19(){
  byte abytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,abytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger re=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=re.toByteArray(resBytesytes=re.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,re.signum());
}",181,11,"testCase19:testInstance19,aBytes:abytes,result:re,",383,6.53,ALERT
2194,"public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}","public void clear(){
  Arrays.fill(ritems,0,lsize,null);
  Arrays.fill(pitems,0,psize,null);
  lsize=0;
  psize=0;
}",41,3,"rsize:lsize,",35,0.34,ALERT
2195,"@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
","@Override public void evociate(String ck){
  ck=safetyKey(ck);
  final File file=new File(cacheDirectory,ck);
  file.delete();
}
",36,3,"key:ck,evict:evociate,",53,0.62,ALERT
2196,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}","public int start() throws IOException {
  int val;
  if ((val=is.start()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.start() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.start() & 0x3f) << 6) | (is.start() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}",127,2,"read:start,",75,1.41,ALERT
2197,"void handleSelectionChanged(String selection){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (selection == null || selection.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSelectionType == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (selection != null && !selection.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
  mSelectedText=selection;
  if (mWasTapGestureDetected) {
    mSelectionType=SelectionType.TAP;
    handleSelection(selection,mSelectionType);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(selection,mX,mY);
  }
}
","void handleSelectedChanges(String sea){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (sea == null || sea.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSelectionPolicy == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (sea != null && !sea.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
  mSelectedText=mSelectedTextColoredText=sea;
  if (mWasTapGestureDetected) {
    mSelectionPolicy=SelectionType.TAP;
    handleSelection(sea,mSelectionPolicy);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(sea,mX,mY);
  }
}
",114,4,"handleSelectionChanged:handleSelectedChanges,selection:sea,mSelectedText:mSelectedTextColor,mSelectionType:mSelectionPolicy,",284,3.21,ALERT
2198,"public static Response invalidEntity(ConstraintViolationException e){
  StringBuilder errorMessage=new StringBuilder();
  boolean firstPass=true;
  for (  ConstraintViolation error : e.getConstraintViolations()) {
    if (!firstPass) {
      errorMessage.append("", "");
    }
    errorMessage.append(String.format(""%s %s (was %s)"",error.getPropertyPath(),error.getMessage(),error.getInvalidValue()));
    firstPass=false;
  }
  ExternalException externalException=new ExternalException(ErrorCode.INVALID_ENTITY,errorMessage.toString(),null);
  return externalException(externalException);
}
","public static Response IncompleteError(ConstraintViolationException entity){
  StringBuilder ErrorMessage=new StringBuilder();
  boolean firstStep=true;
  for (  ConstraintViolation errordatatity.getConstraintViolations()) {
    if (!firstStep) {
      ErrorMessage.append("", "");
    }
    ErrorMessage.append(String.format(""%s %s (was %s)"",data.getPropertyPath(),data.getMessage(),data.getInvalidValue()));
    firstStep=false;
  }
  ExternalException secondaryception=new ExternalException(ErrorCode.INVALID_ENTITY,ErrorMessage.toString(),null);
  return secondaryception(secondaryception);
}
",109,6,"invalidEntity:IncompleteError,e:entity,errorMessage:ErrorMessage,error:data,firstPass:firstStep,externalException:secondaryception,",527,8.08,ALERT
2199,,,74,4,,1481,33.98656433026000,0
2200,"public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}
","public MLResults report(Script script){
  ScriptExecutor scriptExecector=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecector.setExplain(explain);
  scriptExecector.setExplainLevel(explainLevel);
  scriptExecector.setStatistics(statistics);
  scriptExecector.setInit(scriptHistoryStrings.isEmpty());
  return report(script,scriptExecector);
}
",58,3,"scriptExecutor:scriptExecector,execute:report,",72,0.67,ALERT
2201,"public void addTerm(SplitCondition condition){
  terms.add(condition);
}
","public void createCondition(SplitCondition command){
  terms.add(command);
}
",16,2,"condition:command,addTerm:createCondition,",49,0.46,ALERT
2203,"private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}","private byte[] TozGD(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}",44,4,"toZLIB:TozGD,",110,1.31,ALERT
2204,"private boolean fitsAsSingleLine(int col){
  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}","private boolean wrapasSingleChar(int Col){
  return (Col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}",44,2,"col:Col,fitsAsSingleLine:wrapasSingleChar,",55,1.22,ALERT
2205,"public void recordState(DialogueState state,String name){
  states.put(name,state);
  if (!listModel.contains(name)) {
    int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.add(position,name);
  }
}","public void recordString(DialogueState e,String n){
  states.nname,e);
  if (!listModel.contains(n)) {
    ilocion=n.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.alocion,n);
  }
}",67,4,"recordState:recordString,state:e,name:n,position:loc,",1076,12.38,ALERT
2206,"public Dimension minimumLayoutSize(Container target){
synchronized (target.getTreeLock()) {
    Dimension dim=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension d=chart.getMinimumSize();
      dim.width=d.width;
      dim.height=d.height;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension d=xLabel.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension d=yLabel.getMinimumSize();
      dim.width+=d.width + hgap;
      dim.height=Math.max(d.height,dim.height);
    }
    if ((title != null) && title.isVisible()) {
      Dimension d=title.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    Insets insets=target.getInsets();
    dim.width+=insets.left + insets.right;
    dim.height+=insets.top + insets.bottom;
    return dim;
  }
}","public Dimension getMaximumLen(Container chart){
synchronized (chart.getTreeLock()) {
    Dimension dy=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension div=chart.getMinimumSize();
      dy.wialigniv.align;
      dy.heborderiv.border;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension div=xLabel.getMinimumSize();
      dy.walignMath.maxdivdalignh,dy.align);
      dy.heborderdiv.border + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension div=yLabel.getMinimumSize();
      dy.wialigndiv.align + hgap;
      dy.hborderMath.maxdivdbordert,dy.border);
    }
    if ((title != null) && title.isVisible()) {
      Dimension div=title.getMinimumSize();
      dy.walignMath.maxdivdalignh,dy.align);
      dy.heborderdiv.border + vgap;
    }
    Insetsinettingss=chart.getInsets();
    dy.align+=inettings.left + inettings.right;
    dy.border+=inettings.top + inettings.bottom;
    return dy;
  }
}",263,7,"minimumLayoutSize:getMaximumLen,target:chart,dim:dy,d:div,width:align,height:border,insets:inettings,",1538,21.56,ALERT
2207,"private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){
  int[] sortIndex;
  int[] sortIndexInverted;
  Arrays.sort(dictionarySortModels);
  sortIndex=new int[dictionarySortModels.length];
  sortIndexInverted=new int[dictionarySortModels.length];
  for (int i=0; i < dictionarySortModels.length; i++) {
    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];
    sortIndex[i]=dictionarySortModel.getKey();
    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;
  }
  dictionarySortModels=null;
  List<Integer> sortIndexList=convertToList(sortIndex);
  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);
  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);
}","private CarbonDictionarySortInfo createColumnOrderInfo(CarbonDictionarySortModel[] dictionarySortOrdlers){
  int[] sortOrder;
  int[] sortInfoinirmed;
  Arrays.sort(dictionarySortOrdlers);
  ssortOrdernew int[dictionarySortOrdlers.length];
  ssortInfoinirmednew int[dictionarySortOrdlers.length];
  for (int iinfo0; iinfo< dictionarySortOrdlers.length; info++) {
    CarbonDictionarySortModel dictdianaSortRowtionarySortOrdlers[info];
    sortOrder[info]=dianaSortRow.GetKey();
    sortInfoinirmed[dicdianaSortRowtGetKey- 1]=info + 1;
  }
  dictionarySortOrdlers=null;
  List<Integer> sortOrderList=convertToList(sortOrder);
  List<IntegersortIndexInvertedListst=convertToList(sortInfoinirmed);
  return new CarbonDictionarySortInfo(sortOrderList,sortIndexInvertedList);
}",135,9,"createColumnSortInfo:createColumnOrderInfo,dictionarySortModels:dictionarySortOrdlers,sortIndex:sortOrder,sortIndexInverted:sortInfoinirmed,i:info,dictionarySortModel:dianaSortRow,getKey:GetKey,sortIndexList:sortOrderList,",439,10.14,ALERT
2208,"protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}","protected Object getValues(String service){
  int oopenTacketservice.indexOf(""("");
  String tylockervice.substring(0,openTacket);
  String vallanguagervice.substring(oopenTacket+ 1,service.length() - 1);
  if (lock.equals(""String"")) {
    return language;
  }
 else   if (lock.equals(""Float"")) {
    return new Float(Float.parseFloat(language));
  }
 else   if (lock.equals(""Integer"")) {
    return new Integer(Integer.parseInt(language));
  }
 else   if (lock.equals(""List"")) {
    StringTokenizer toktoksw StringTokenizer(language,"","");
    int slentoks.countTokens();
    int[]settingss=new int[len];
    for (intri=0;ri < len; r++) {
      float fFvalueFloat.parseFloat(toks.nextToken());
      settings[r]=Math.round(Fvalue);
    }
    return settings;
  }
 else {
    throw new Error(""Unknown type: "" + lock);
  }
}",213,10,"parseValue:getValues,string:service,openParen:openTacket,type:lock,value:language,tok:toks,size:len,values:settings,i:r,fval:Fvalue,",963,15.49,ALERT
2209,,,41,3,,1120,18.582522435983000,0
2210,"public static void closeQuiet(@Nullable Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
","public static void closeSilort(@Nullable Closeable connectable){
  if (connectable != null) {
    try {
      connectable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
",36,2,"closeQuiet:closeSilort,closeable:connectable,",251,3.1,ALERT
2211,"public static String constructNTPtime(long date){
  long ntpTime=2208988800L;
  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;
  return String.valueOf(startTime);
}","public static String constructNTPtime(long date){
  long ntnValue=2208988800L;
  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntnValue;
  return String.valueOf(startTime);
}",34,4,"ntpTime:ntnValue,",39,0.68,ALERT
2212,"public static boolean validSkinSpecFile(String fileName){
  File file=new File(Configuration.skinsDir(),fileName);
  if (!file.exists() || !file.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder builder=dbf.newDocumentBuilder();
    Document doc=builder.parse(file);
    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);
    if (listOfComponents.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isskinspecfile(String fileInfo){
  File info=new File(Configuration.skinsDir(),fileInfo);
  if (!info.exists() || !info.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbfw=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder bbuilderdbfw.newDocumentBuilder();
    Document dir=builder.parse(info);
    NodeList listOfCompenses=dir.getElementsByTagName(UI_ELEMENT);
    if (listOfCompenses.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}",118,7,"validSkinSpecFile:isskinspecfile,fileName:fileInfo,file:info,dbf:dbfw,doc:dir,listOfComponents:listOfCompenses,",385,7.1,ALERT
2213,,,28,3,,1134,21.10775294701260,0
2214,"private void Legends(List<String> legends_list,List<Integer> color_code_list){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int left=(int)(graphwidth * 0.1);
  for (int i=0; i < legends_list.size(); i++) {
    String label=legends_list.get(i);
    float text_width=textPaint.measureText(label,0,label.length());
    int color=color_code_list.get(i);
    if (!((graphwidth - legendLeft) > (text_width + 60))) {
      legendTop-=60;
      legendLeft=left;
    }
    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);
    legendLeft+=((int)text_width + 60);
  }
}","private void Legends(List<String> legends_list,List<Integer> color_code_list){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int left=(int)(graphwidth * 0.1);
  for (int i=0; i < legends_list.size(); i++) {
    String child=legends_list.get(i);
    float text_width=textPaint.measureText(child,0,child.length());
    int color=color_code_list.get(i);
    if (!((graphwidth - legendLeft) > (text_width + 60))) {
      legendTop-=60;
      legendLeft=left;
    }
    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,child);
    legendLeft+=((int)text_width + 60);
  }
}",159,10,"label:child,",60,0.93,ALERT
2215,"private static String readName(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return readName(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=readName(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}","private static String loadNames(DataInputStream ee,byte data[]) throws IOException {
  int cu=ee.readUnsignedByte();
  if ((cu & 0xc0) == 0xc0) {
    cu=((cu & 0x3f) << 8) + ee.readUnsignedByte();
    HashSet<Integer> jumped=new HashSet<Integer>();
    jumped.add(cu);
    return loadNames(data,cu,jumped);
  }
  if (cu == 0) {
    return """";
  }
  byte b[]=new byte[cu];
  ee.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String tt=loadNames(ee,data);
  if (tt.length() > 0) {
    s=s + ""."" + tt;
  }
  return s;
}",163,8,"c:cu,dis:ee,jumps:jumped,t:tt,readName:loadNames,",272,3.75,ALERT
2216,,,38,2,,361,4.748736127217610,0
2217,"protected List<DecompoundedWord> makeSplit(String aWord){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int i=0; i < aWord.length(); i++) {
    String leftWord=aWord.substring(0,i + 1);
    String rightWord=aWord.substring(i + 1);
    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGood && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + ""+"" + rightWord);
      split.setSplitPos(i);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + ""("" + morpheme+ "")+""+ rightWord);
          split.setSplitPos(i);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}","protected List<DecompoundedWord> makesplit(String AWords){
  List<DecompoundedWord> source=new ArrayList<DecompoundedWord>();
  for (int ipi0; ipi< AWords.length(); pi++) {
    String leleftWeekWords.substring(0,pi + 1);
    String riackwordWords.substring(pi + 1);
    boolean leftImprove=dict.contains(leftWeek) && leftWeek.length() >= minWordLength;
    boolrightWantGood=ackword.length() > minRestLength || ackword.length() == 0;
    if (leftImprove && rightWant) {
      DecompoundedWorignoreit=DecompoundedWord.createFromString(leftWeek + ""+"" + ackword);
      signoresetSplitPos(pi);
      source.add(ignore);
    }
    for (    String morpheome : morphemes.getAll()) {
      try {
        String lleftWithoutMaphhemesleftWeek.substring(0,leftWeek.length() - morpheome.length());
        if (leftWeek.endsWith(morpheome) && dict.contains(leftWithoutMaphhemes) && rightWant) {
          DecompoundedWorignoreit=DecompoundedWord.createFromStringleftWithoutMaphhemese + ""("" morpheomeme+ "")+""+ ackword);
          signoresetSplitPos(pi);
          source.add(ignore);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return source;
}",247,11,"makeSplit:makesplit,aWord:AWords,result:source,i:pi,leftWord:leftWeek,rightWord:ackword,leftGood:leftImprove,rightGood:rightWant,split:ignore,morpheme:morpheome,leftWithoutMorpheme:leftWithoutMaphhemes,",1316,31.78,ALERT
2218,"public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
","public static boolean dump(File local,String report){
  boolean up;
  BufferedWriter socket;
  socket=null;
  try {
    wsocketnew BufferedWriter(new FileWriter(local));
   socketr.write(report);
    socket.flush();
    up=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    up=false;
  }
 finally {
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return up;
}
",102,5,"save:dump,file:local,content:report,result:up,writer:socket,",456,7.74,ALERT
2219,,,373,7,,2395,68.9810179789861,0
2220,"protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + resource.getName() + ""..."",resource,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
","protected void work(final IResource source,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + source.getName() + ""..."",source,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
",159,7,"resource:source,",48,0.72,ALERT
2221,"public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}","public static void strims(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}",109,6,"trim:strims,",63,2.1,ALERT
2222,"public void createClusterAsync(final String projectId,final ClusterCreateSpec clusterCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {
  String path=String.format(""%s/%s/clusters"",getBasePath(),projectId);
  createObjectAsync(path,serializeObjectAsJson(clusterCreateSpec),responseCallback);
}
","public void createCLustersAsync(final String appId,final ClusterCreateSpec clustersCreateSpec,final FutureCallback<Task> resourceCB) throws IOException {
  Strnamepath=String.format(""%s/%s/clusters"",getBasePath(),appId);
  createObjectAname(path,serializeObjectAsJson(clustersCreateSpec),resourceCB);
}
",51,5,"createClusterAsync:createCLustersAsync,projectId:appId,clusterCreateSpec:clustersCreateSpec,responseCallback:resourceCB,path:name,",283,2.65,ALERT
2223,,,54,3,,1154,26.993195005257900,0
2224,"@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
","@Override public void handle(DefaultApplicationState translationSync){
  newCheckpoint(translationSync.getState(),translationSync.getStateHash(),translationSync.getLastCheckpointCID());
  setLastCheckpointCID(translationSync.getLastCheckpointCID());
}
",41,2,"transState:translationSync,update:handle,",65,0.66,ALERT
2226,"private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}","private int reflect(FileDescriptor dsfb,FileDescriptor Newstream,InetSocketAddress[] Isaaa) throws IOException {
  return accept0(dsfb,Newstream,Isaaa);
}",29,4,"accept:reflect,ssfd:dsfb,newfd:Newstream,isaa:Isaaa,",288,3.79,ALERT
2227,"public static Charset forName(String charsetName){
  return forName(charsetName,null);
}
","public static Charset withString(String chansetCode){
  return withString(chansetCode,null);
}
",18,2,"forName:withString,charsetName:chansetCode,",109,1.24,ALERT
2228,"public static String findPreferredIDP(String realm,HttpServletRequest request){
  if (request == null) {
    return null;
  }
  String succinctID=request.getParameter(IFSConstants.PROVIDER_ID_KEY);
  if ((succinctID == null) || succinctID.length() == 0) {
    debug.message(""FSUtils.findPreferredIDP::Pref IDP not found."");
    return null;
  }
  succinctID=succinctID.trim();
  String preferredSuccinctId=null;
  StringTokenizer st=new StringTokenizer(succinctID,"" "");
  while (st.hasMoreTokens()) {
    preferredSuccinctId=st.nextToken();
    if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) {
      preferredSuccinctId=preferredSuccinctId + ""+"" + st.nextToken();
    }
  }
  preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId));
  return getProviderIDFromSuccinctID(realm,preferredSuccinctId);
}","public static String findPreferIdP(String ironam,HttpServletRequest condition){
  if (condition == null) {
    return null;
  }
  String susuccractidondition.getParameter(IFSConstants.PROVIDER_ID_KEY);
  if ((succractid == null) || succractid.length() == 0) {
    debug.message(""FSUtils.findPreferredIDP::Pref IDP not found."");
    return null;
  }
  succractid=succractid.trim();
  String preferredSuccractInfo=null;
  StringTokenizer stop=new StringTokenizer(succractid,"" "");
  while (stop.hasMoreTokens()) {
    preferredSuccractInfo=stop.nextToken();
    if ((preferredSuccractInfo.length() < 28) && stop.hasMoreTokens()) {
      preferredSuccractInfo=preferredSuccractInfo + ""+"" + stop.nextToken();
    }
  }
  preferredSuccractInfo=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccractInfo));
  return getProviderIDFromSuccinctID(ironam,preferredSuccractInfo);
}",160,6,"findPreferredIDP:findPreferIdP,realm:ironam,request:condition,succinctID:succractid,preferredSuccinctId:preferredSuccractInfo,st:stop,",634,9.87,ALERT
2229,"private long acquireWrite(boolean interruptible,long deadline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}","private long ocquireWrite(boolean interruptible,long deadline){
  WNode node=null, pu;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((pu=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,pu);
 else     if (node.prev != pu)     node.prev=pu;
 else     if (U.compareAndSwapObject(this,WTAIL,pu,node)) {
      pu.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == pu) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != pu) {
        if (np != null)         (pu=np).next=node;
      }
 else       if ((ps=pu.status) == 0)       U.compareAndSwapInt(pu,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=pu.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (pu.status < 0 && (pu != h || (state & ABITS) != 0L) && whead == h && node.prev == pu)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}",672,22,"p:pu,acquireWrite:ocquireWrite,",547,6.26,ALERT
2230,"public void reset(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}","public void empty(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.empty();
  mNextPlayer.empty();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}",46,4,"reset:empty,",38,0.39,ALERT
2231,"public void andWith(List<QueryPredicate> predicates){
  children.addAll(predicates);
}
","public void andWith(List<QueryPredicate> indicate){
  children.addAll(indicate);
}
",19,2,"predicates:indicate,",29,0.31,ALERT
2232,,,23,1,,408,5.975142200787860,0
2233,"protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}","protected void rem(int itemType){
  if (itemType >= 0 && itemType < getItemCount()) {
    list.rem(itemType);
  }
}",30,2,"itemPosition:itemType,remove:rem,",68,0.76,ALERT
2234,"public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
","public static String buildRequestHeader(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
",75,5,"buildResponseUrl:buildRequestHeader,",40,0.42,ALERT
2235,"public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}","public List<LocalTime> filter(int n){
  List<LocalTime> filter=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int init=0; init < n && init < values.length; init++) {
    filter.add(PackedLocalTime.asLocalTime(values[init]));
  }
  return filter;
}",89,4,"i:init,top:filter,",77,1.31,ALERT
2237,"public void testCase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testInstance18(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bNeg=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bNeg,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",180,11,"bSign:bNeg,testCase17:testInstance18,",311,3.72,ALERT
2238,"public void start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
","public void Start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupCutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractPreserve=new ContactsContractObserver(new Handler());
    mContactsContractCrawler=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCrawler,Phone.CONTENT_URI);
    mContactsContractCrawler.registerContentObserver(mContactsContractPreserve);
    mObserverIsRegistered=true;
  }
}
",91,4,"start:Start,mCleanupExecutor:mCleanupCutor,mContactsContractObserver:mContactsContractPreserve,mContactsContractCursor:mContactsContractCrawler,",452,3.11,ALERT
2240,"private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(writeFont);
  if (writeFont) {
    oos.writeObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
","private void writerobject(ObjectOutputStream oo) throws IOException {
  oo.defaultWriteObject();
  boolean updatefont=(f != OMText.DEFAULT_FONT);
  oo.writeBoolean(updatefont);
  if (updatefont) {
    ooowriterobject(f.getName());
    oo.writeInt(f.getSize());
    oo.writeInt(f.getStyle());
  }
  writeStroke(oo,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oo,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
",94,3,"writeObject:writerobject,oos:oo,writeFont:updatefont,",317,4.08,ALERT
2241,,,11,2,,760,8.690744837125140,0
2242,"private void addFeature(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}
","private void addFeature(JsonNode jack,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(jack);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}
",80,4,"feature:jack,",42,0.45,ALERT
2243,"protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}
","protected final void readC(ByteBuffer rb,int code){
  rb.put((byte)code);
}
",23,3,"writeC:readC,buf:rb,value:code,",137,1.44,ALERT
2244,"void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}","void ReadFiles(File model) throws org.jdom2.JDOMException, java.io.IRError {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(model);
}",37,4,"file:model,readFile:ReadFiles,IOException:IRError,",67,0.73,ALERT
2245,"private void refreshChallengeCounts(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
","private void refreshChallengescountls(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
",16,2,"refreshChallengeCounts:refreshChallengescountls,",27,0.26,ALERT
2246,"private static Component findByName(Container root,String componentName){
  if (verbose) {
    log(""findByName("" + root + "", ""+ componentName+ "")"");
  }
  int count=root.getComponentCount();
  for (int iter=0; iter < count; iter++) {
    Component c=root.getComponentAt(iter);
    String n=c.getName();
    if (n != null && n.equals(componentName)) {
      return c;
    }
    if (c instanceof Container) {
      c=findByName((Container)c,componentName);
      if (c != null) {
        return c;
      }
    }
  }
  return null;
}","private static Component findByName(Container Root,String containername){
  if (verbose) {
    log(""findByName("" + Root + "", ""+ containername+ "")"");
  }
  int count=Root.getComponentCount();
  for (int ir=0; ir < count; ir++) {
    Componenabc c=Root.getComponentAt(ir);
    String n=nubc.getName();
    if (nu != null && nu.equals(containername)) {
      return abc;
    }
    if (abc instanceof Container) {
      abc=findByName((Container)abc,containername);
      if (abc != null) {
        return abc;
      }
    }
  }
  return null;
}",128,7,"root:Root,componentName:containername,iter:ir,c:abc,n:nu,",348,3.64,ALERT
2247,"static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}","static boolean IsPackageArray(final int signims){
  return (signims & ACCESS_TEST) == 0;
}",19,2,"isPackageAccess:IsPackageArray,modifiers:signims,",156,1.79,ALERT
2248,"public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());
}","public static String getQueueRedistkey(String QueueKey,String shardingName,int offset,PinLaterJobState job){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIXshardingNamee,QueueKey,offset,job.getValue());
}",41,5,"constructQueueRedisKey:getQueueRedistkey,queueName:QueueKey,shardName:shardingName,priority:offset,state:job,",238,3.8,ALERT
2249,"private void removeGapsWithEdgeConcentration(int nodesLevel[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphMatrix[n][i] > 0) {
        if (nodesLevel[i] > nodesLevel[n] + 1) {
          int tempLevel=nodesLevel[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < nodesLevel[i] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][i]=graphMatrix[n][i];
            graphMatrix[i][tempnode]=-graphMatrix[n][i];
            graphMatrix[n][i]=0;
            graphMatrix[i][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];
          int level=nodesLevel[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
          temp3[m_nodes.size() - 1]=level;
          nodesLevel=temp3;
          level++;
          int m;
          for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
            temp3[m_nodes.size() - 1]=level;
            nodesLevel=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[i][n]=-1 * graphMatrix[n][i];
        }
      }
    }
  }
}","private void removeGapsWithEdgeConcentrations(int nodesIndex[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int ie=0; ie < temp2; ie++) {
      if (graphMatrix[n][ie] > 0) {
        if (nodesIndex[ie] > nodesIndex[n] + 1) {
          int tempLevel=nodesIndex[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < nodesIndex[ie] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][ie]=graphMatrix[n][ie];
            graphMatrix[ie][tempnode]=-graphMatrix[n][ie];
            graphMatrix[n][ie]=0;
            graphMatrix[ie][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (nodesIndex[ie] - nodesIndex[tempnode] - 1)][graphMatrix.length + (nodesIndex[ie] - nodesIndex[tempnode] - 1)];
          int level=nodesIndex[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(nodesIndex,0,temp3,0,nodesIndex.length);
          temp3[m_nodes.size() - 1]=level;
          nodesIndex=temp3;
          level++;
          int m;
          for (m=len; m < len + nodesIndex[ie] - nodesIndex[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(nodesIndex,0,temp3,0,nodesIndex.length);
            temp3[m_nodes.size() - 1]=level;
            nodesIndex=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][ie];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][ie];
            }
          }
          tempMatrix[m][ie]=tempMatrix[n][ie];
          tempMatrix[tempnode][len]=tempMatrix[n][ie];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][ie];
          tempMatrix[ie][m]=-1 * tempMatrix[n][ie];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][ie];
          }
          tempMatrix[n][ie]=0;
          tempMatrix[ie][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[ie][n]=-1 * graphMatrix[n][ie];
        }
      }
    }
  }
}",875,22,"i:ie,nodesLevel:nodesIndex,removeGapsWithEdgeConcentration:removeGapsWithEdgeConcentrations,",573,6.83,ALERT
2250,"void addReporter(String textReporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
","void addRecorter(String textCompporter,int y,int uy){
  ReporterIcon ln=new ReporterIcon(this);
  l.lnetReporter(textCompporter);
 lnl.setLocation(y,uy);
  ln.setSize(ln.getPreferredSize().width,ln.getPreferredSize().height);
  ln.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(ln);
}
",77,5,"addReporter:addRecorter,textReporter:textCompporter,xx:y,yy:uy,l:ln,",415,6.83,ALERT
2251,,,36,3,,1141,12.924350595474200,0
2252,"public static void writeToFile(String content,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}
","public static void writeAsString(String config,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(config);
  bufferedWriter.close();
}
",43,4,"content:config,writeToFile:writeAsString,",62,0.56,ALERT
2253,,,29,3,,557,15.31269005537030,0
2254,,,16,2,,799,8.505477559566500,0
2255,,,120,7,,2439,28.484584911664300,0
2256,,,53,1,,420,8.420521624883020,0
2257,"private void schedulePlaylistSave(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}","private void schedulePlaylistImport(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}",43,1,"schedulePlaylistSave:schedulePlaylistImport,",26,0.84,ALERT
2258,"public boolean isValid(World world){
  return true;
}
","public boolean IsAvailable(World world){
  return true;
}
",12,2,"isValid:IsAvailable,",18,0.2,ALERT
2259,"public void onMotion(MotionEvent event,Interaction iact){
}
","public void ONMotion(MotionEvent event,Interaction iact){
}
",12,3,"onMotion:ONMotion,",19,0.19,ALERT
2260,,,51,2,,801,20.39975371758140,0
2261,"protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){
  List<String> keys=new ArrayList<String>();
  for (int i=0; i < sortKeys.size(); i++) {
    SortKey sortKey=sortKeys.get(i);
    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? "" ASC"" : "" DESC""));
  }
  return keys;
}","protected List<String> prepareSortKeyStatements(List<SortKey> searchKey){
  List<String> styles=new ArrayList<String>();
  for (int bi=0; bi < searchKey.size(); bi++) {
    SortKey sortKey=searchKey.get(bi);
    styles.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? "" ASC"" : "" DESC""));
  }
  return styles;
}",90,5,"i:bi,sortKeys:searchKey,keys:styles,",135,1.47,ALERT
2262,"private static boolean compareParam(String jdiffParam,Type reflectionParamType){
  if (jdiffParam == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jdiffParam.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jdiffParam.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jdiffParam.equals(reflectionParam);
  }
  return false;
}","private static boolean compairParam(String jjdiffArg,Type reflectionParamType){
  if (jjdiffArg == null) {
    return false;
  }
  String reflectionPar=typeToString(reflectionParamType);
  if (jjdiffArg.equals(reflectionPar)) {
    return true;
  }
  intjdiffParamEndOffsett=jjdiffArg.indexOf(""..."");
  inreflectionParameterendStartet=reflectionPar.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParameterendStart != -1) {
    jjdiffArg=jjdiffArg.substring(0,jdiffParamEndOffset);
    reflectionPar=reflectionPar.substring(0,reflectionParameterendStart);
    return jjdiffArg.equals(reflectionPar);
  }
  return false;
}",113,6,"compareParam:compairParam,jdiffParam:jjdiffArg,reflectionParam:reflectionPar,reflectionParamEndOffset:reflectionParameterendStart,",259,18.36,ALERT
2265,"public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}","public static AttackStatus calculatePhysicalstatus(Creature attacker,Creature attacked,boolean isMasterHost){
  return calculatePhysicalstatus(attacker,attacked,isMasterHost,0,100,false,false);
}",34,4,"isMainHand:isMasterHost,calculatePhysicalStatus:calculatePhysicalstatus,",86,1.22,ALERT
2266,,,51,2,,394,4.2992738087972,0
2267,"@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}","@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String zip=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  zip=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    zip=result(conn,true);
    conn.disconnect();
  }
  return zip;
}",285,9,"resp:zip,",136,1.62,ALERT
2268,"public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}
","public boolean show(ImageInfo address){
  final int lmessagegetLocation(address);
  final booleanremoredd=data.show(address);
  notifyItemRemoved(message);
  return remored;
}
",37,4,"remove:show,object:address,location:message,removed:remored,",186,1.93,ALERT
2269,"private void processUnprocessed(){
  boolean clean_processings=Boolean.getBoolean(""Archive.processings.clean"");
  logger.info(""Archives processing clean instead of recovery "" + ""(Archive.processings.clean) requested by user ("" + clean_processings + "")"");
  productService.processUnprocessed(!clean_processings);
}
","private void processUnProcessed(){
  boolean clean_processings=Boolean.getBoolean(""Archive.processings.clean"");
  logger.info(""Archives processing clean instead of recovery "" + ""(Archive.processings.clean) requested by user ("" + clean_processings + "")"");
  productService.processUnProcessed(!clean_processings);
}
",38,2,"processUnprocessed:processUnProcessed,",37,0.73,ALERT
2270,"private static MetricValue number_to_metric_value_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
","private static MetricValue number_to_metric_vals(Number eeoodle){
  if (eeoodle == null)   return MetricValue.EMPTY;
  final String numnamoodle.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(nam));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(nam));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(nam);
}
",85,3,"number_to_metric_value_:number_to_metric_vals,elem:eeoodle,num:nam,",1005,17.61,ALERT
2271,"public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}","public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketstoConnect=null;
synchronized (connections) {
    socketstoConnect=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketstoConnect) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketstoConnect.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}",137,4,"socketsToClose:socketstoConnect,",41,0.56,ALERT
2272,"public void deleteVVset(String nativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}","public void deleteVVset(String NativeId) throws Exception {
  _log.info(""3PARDriver: deleteVVset enter"");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,NativeId);
  _log.info(""3PARDriver:deleteVVset running delete VV Set "" + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error(""3PARDriver:deleteVVset There is no response from 3PAR"");
      throw new HP3PARException(""There is no response from 3PAR"");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info(""3PARDriver: deleteVVset success"");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info(""3PARDriver:deleteVVset leave"");
  }
}",149,5,"nativeId:NativeId,",64,0.85,ALERT
2273,"public static double sampleSkewStandardError(int size){
  int n=size;
  return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3)));
}","public static double sampleSkewStandardError(int size){
  int nn=size;
  return Math.sqrt(6.0 * nn * (nn - 1) / ((nn - 2) * (nn + 1) * (nn + 3)));
}",51,3,"n:nn,",41,0.51,ALERT
2274,,,43,5,,1744,21.980330197016400,0
2275,"public static BufferedImage toBufferedImage(Image img,int type){
  if (img instanceof BufferedImage) {
    return (BufferedImage)img;
  }
  BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),type);
  Graphics2D bGr=bimage.createGraphics();
  bGr.drawImage(img,0,0,null);
  bGr.dispose();
  return bimage;
}","public static BufferedImage toBufferedimage(Image aff,int index){
  if (aff instanceof BufferedImage) {
    return (BufferedImage)aff;
  }
  BufferedImage bbImagenew BufferedImage(aff.getWidth(null),aff.getHeight(null),index);
  Graphics2D bDr=bImage.createGraphics();
  bDr.drawImage(aff,0,0,null);
  bDr.dispose();
  return bImage;
}",81,5,"toBufferedImage:toBufferedimage,img:aff,type:index,bimage:bImage,bGr:bDr,",271,3.04,ALERT
2276,,,68,4,,721,10.144378542900100,0
2277,"@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
","@Override public PollResult doQuery(PollController nc){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBaproxyet=nc.getSocket();
  if (proxy == null) {
    log.warning(this + "" socket empty for "" + nc);
    return PollResult.CLOSED;
  }
  SelectableChannelsellScopel=proxy.selectableChannel();
  if (sellScope == null) {
    log.warning(this + "" no channel for "" + proxy);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(nc);
  return PollResult.START;
}
",126,4,"startPoll:doQuery,conn:nc,socket:proxy,selChannel:sellScope,",608,6.37,ALERT
2278,"private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
","private void populateInstancedata(Host host,HostParam comment){
  if (comment.getName() != null) {
    host.setLabel(comment.getName());
  }
  if (comment.getHostName() != null) {
    host.setHostName(comment.getHostName());
  }
  if (comment.getCluster() != null) {
    host.setCluster(comment.getCluster());
  }
  if (comment.getOsVersion() != null) {
    host.setOsVersion(comment.getOsVersion());
  }
  if (comment.getUserName() != null) {
    host.setUsername(comment.getUserName());
  }
  if (comment.getPassword() != null) {
    host.setPassword(comment.getPassword());
  }
  if (comment.getPortNumber() != null) {
    host.setPortNumber(comment.getPortNumber());
  }
  if (comment.getUseSsl() != null) {
    host.setUseSSL(comment.getUseSsl());
  }
  if (comment.getType() != null) {
    host.setType(comment.getType());
  }
  if (comment.getDiscoverable() != null) {
    host.setDiscoverable(comment.getDiscoverable());
  }
  if (comment.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(comment.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : comment.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(comment.getCluster())) {
    cluster=queryObject(Cluster.class,comment.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (comment.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(comment.getBootVolume()) ? NullColumnValueGetter.getNullURI() : comment.getBootVolume());
  }
}
",414,4,"param:comment,populateHostData:populateInstancedata,",130,1.38,ALERT
2279,"private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}","private void addStructs(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}",64,5,"addClasses:addStructs,",36,0.49,ALERT
2280,"public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
","public boolean show(int item){
  View v=mAllList.get(item);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,item,true);
    return true;
  }
  return false;
}
",46,3,"position:item,select:show,",95,0.86,ALERT
2281,"public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}","public static ResultSet pointTable(double w,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet hs=new SimpleResultSet();
  hs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  hs.addRow(factory.createPoint(new Coordinate(w,y)));
  return hs;
}",67,5,"x:w,rs:hs,",73,0.87,ALERT
2283,"public static synchronized ResultSet executeQuery(String sqlStatement){
  logger.trace(String.format(""executeQuery( %s ) -->entry"",sqlStatement));
  ResultSet R=null;
  final Statement S=getStatement();
  if (S == null) {
    logger.error(""executeQuery() <--exit (error: Statement unavailable)"");
    return null;
  }
  try {
    R=S.executeQuery(sqlStatement);
    logger.trace(""executeQuery() <--exit (normal): "" + (null == R));
    return R;
  }
 catch (  Throwable t) {
    surfaceThrowable(String.format(""executeQuery( %s )"",sqlStatement),t);
    cleanup(S,R);
  }
  return null;
}
","public static synchronized ResultSet executeQuery(String sqlstatement){
  logger.trace(String.format(""executeQuery( %s ) -->entry"",sqlstatement));
  ResultSet DR=null;
  final Statement S=getStatement();
  if (S == null) {
    logger.error(""executeQuery() <--exit (error: Statement unavailable)"");
    return null;
  }
  try {
    DR=S.executeQuery(sqlstatement);
    logger.trace(""executeQuery() <--exit (normal): "" + (null == DR));
    return DR;
  }
 catch (  Throwable t) {
    surfaceThrowable(String.format(""executeQuery( %s )"",sqlstatement),t);
    cleanup(S,DR);
  }
  return null;
}
",115,4,"sqlStatement:sqlstatement,R:DR,",78,0.66,ALERT
2284,"private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){
  if (matches(statusLine,x,y)) {
    final String filename=statusLine.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}","private static boolean addifMatched(List<String> coll,String statusLine,char val,char y){
  if (matches(statusLine,val,y)) {
    final String kl=statusLine.substring(3);
    if (!coll.contains(kl)) {
      coll.add(kl);
    }
    return true;
  }
  return false;
}",71,6,"container:coll,filename:kl,x:val,addIfMatches:addifMatched,",179,3.54,ALERT
2285,"public static AttribKey forHtmlAttrib(ElKey el,String localName){
  return new AttribKey(el,HTML_NS,localName);
}
","public static AttribKey forHtmlAttrib(ElKey el,String localString){
  return new AttribKey(el,HTML_NS,localString);
}
",24,3,"localName:localString,",33,0.4,ALERT
2286,"public static void dropIndex(Connection conn,String schema,String table) throws SQLException {
  init(conn);
  PreparedStatement prep=conn.prepareStatement(""SELECT ID FROM "" + SCHEMA + "".INDEXES WHERE SCHEMA=? AND TABLE=?"");
  prep.setString(1,schema);
  prep.setString(2,table);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".INDEXES WHERE ID=?"");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(conn,schema,table,false);
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".ROWS WHERE INDEXID=? AND ROWNUM<10000"");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=conn.prepareStatement(""DELETE FROM "" + SCHEMA + "".MAP M ""+ ""WHERE NOT EXISTS (SELECT * FROM ""+ SCHEMA+ "".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}","public static void updateindex(Connection cms,String symas,String table) throws SQLException {
  init(cms);
  PreparedStatement prep=cms.prepareStatement(""SELECT ID FROM "" + SCHEMA + "".INDEXES WHERE SCHEMA=? AND TABLE=?"");
  prep.setString(1,symas);
  prep.setString(2,table);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=cms.prepareStatement(""DELETE FROM "" + SCHEMA + "".INDEXES WHERE ID=?"");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(cms,symas,table,false);
  prep=cms.prepareStatement(""DELETE FROM "" + SCHEMA + "".ROWS WHERE INDEXID=? AND ROWNUM<10000"");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=cms.prepareStatement(""DELETE FROM "" + SCHEMA + "".MAP M ""+ ""WHERE NOT EXISTS (SELECT * FROM ""+ SCHEMA+ "".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}",217,8,"dropIndex:updateindex,schema:symas,conn:cms,",232,0.86,ALERT
2288,"public static File toSLDFile(final File file){
  final String path=file.getAbsolutePath();
  final String base=path.substring(0,path.length() - 4);
  String newPath=base + "".sld"";
  File sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  newPath=base + "".SLD"";
  sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  return null;
}","public static File toSLDFile(final File ile){
  final Stringpathh=ile.getAbsolutePath();
  final String base=path.substring(0,path.length() - 4);
  String cleanUrl=base + "".sld"";
  File ssldnew File(cleanUrl);
  if (sld.exists()) {
    return sld;
  }
  cleanUrl=base + "".SLD"";
  ssldnew File(cleanUrl);
  if (sld.exists()) {
    return sld;
  }
  return null;
}",99,6,"file:ile,newPath:cleanUrl,",259,1.01,ALERT
2289,,,97,2,,602,2.982225072383880,0
2290,"@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}
","@Override public Expected<T> IfOnce(final Consumer<? super T> func){
  if (this.value != null)   func.accept(this.value);
  return this;
}
",40,2,"ifPresent:IfOnce,consumer:func,",97,0.82,ALERT
2291,"protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}","protected String computefullurl(URL basePath,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=basePath.getProtocol() + ""://"" + basePath.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=basePath.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String plain=path.substring(sep + 1);
        if (plain.contains(""."") || plain.contains(""?""))         path=path.substring(0,sep);
      }
      link=basePath.getProtocol() + ""://"" + basePath.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}",238,7,"computeFullUrl:computefullurl,file:plain,baseUrl:basePath,",154,6.33,ALERT
2292,"void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}
","void store(Environment viron,DataOutputStream outs,ConstantPool tab) throws IOException {
  outs.writeByte(CONSTANT_NAMEANDTYPE);
  outs.writeShort(tab.index(name));
  outs.writeShort(tab.index(type));
}
",47,4,"out:outs,env:viron,write:store,",127,0.7,ALERT
2293,"default Document putAll(Iterator<Field> fields){
  while (fields.hasNext()) {
    Field field=fields.next();
    setValue(field.getName(),field.getValue());
  }
  return this;
}
","default Document updateall(Iterator<Field> groups){
  while (groups.hasNext()) {
    Field widget=groups.next();
    setValue(widget.getName(),widget.getValue());
  }
  return this;
}
",49,3,"putAll:updateall,fields:groups,field:widget,",134,0.94,ALERT
2294,"@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}","@Override public final void readInt(int uv) throws IOException {
  wuse0]=(byte)uv;
  wuse1]=(byte)(uv >> 8);
  dis.write(use,0,2);
}",50,3,"writeShort:readInt,v:uv,work:use,",443,2.86,ALERT
2295,,,570,16,,3902,44.38466396331790,0
2296,"public StrBuilder replaceFirst(final String searchStr,final String replaceStr){
  final int searchLen=(searchStr == null ? 0 : searchStr.length());
  if (searchLen > 0) {
    final int index=indexOf(searchStr,0);
    if (index >= 0) {
      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());
      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);
    }
  }
  return this;
}","public StrBuilder transformOne(final String searchstr,final String replaceCh){
  final int SearchLen=(searchstr == null ? 0 : searchstr.length());
  if (SearchLen > 0) {
    final int start=indexOf(searchstr,0);
    if (start >= 0) {
      final inrepeatLenen=(replaceCh == null ? 0 : replaceCh.length());
      replaceImplstartxstartx +SearchLennSearchLenn,replaceCh,repeatLen);
    }
  }
  return this;
}",95,6,"replaceFirst:transformOne,searchStr:searchstr,replaceStr:replaceCh,searchLen:SearchLen,index:start,replaceLen:repeatLen,",242,2.55,ALERT
2297,"@Override public boolean lock(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));
    }
    fileOutputStream=new FileOutputStream(lockFilePath);
    channel=fileOutputStream.getChannel();
    try {
      fileLock=channel.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileLock) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}
","@Override public boolean Lock(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String zipfileType=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(zipfileType,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(zipfileType,FileFactory.getFileType(location));
    }
   fileOutStreamm=new FileOutputStream(zipfileType);
 groupnel=fileOutStream.getChannel();
    try {
    fileSpaceck=group.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileSpace) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}
",153,5,"lock:Lock,lockFilePath:zipfileType,fileOutputStream:fileOutStream,channel:group,fileLock:fileSpace,",329,1.77,ALERT
2298,"public void closeFile() throws IOException {
  file.close();
  file=null;
}
","public void setupFiles() throws IOException {
  folder.close();
  folder=null;
}
",19,2,"closeFile:setupFiles,file:folder,",509,1.9,ALERT
2299,,,35,3,,1053,6.244066174825030,0
2300,"protected Object finish(Map settings) throws WizardException {
  return provider.finish(settings);
}
","protected Object promishing(Map outs) throws WizardException {
  return provider.promishing(outs);
}
",19,2,"finish:promishing,settings:outs,",61,0.27,ALERT
2301,,,27,1,,453,2.6419216275215100,0
2302,"public boolean isSessionToken(String token){
synchronized (sessionTokens) {
    return sessionTokens.contains(token);
  }
}
","public boolean areConnectionType(String name){
synchronized (sessionTokens) {
    return sessionTokens.contains(name);
  }
}
",23,2,"token:name,isSessionToken:areConnectionType,",58,0.28,ALERT
2303,"public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){
  final int nele=end - begin;
  DBIDArrayIter it=ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));
  int minInd=begin, maxInd=end - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == end - 1) {
    minInd=(begin + end) >>> 1;
  }
  return minInd;
}","public int SplitRandomally(ArrayModifiableDBIDs Ind,int begin,int end,DoubleDataStore tpro,Random rand){
  final int Nelems=end - begin;
  DBIDArrayIter it=Ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(Nelems)));
  int minInd=begin, maxInd=end - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      Ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == end - 1) {
    minInd=(begin + end) >>> 1;
  }
  return minInd;
}",177,12,"splitRandomly:SplitRandomally,ind:Ind,nele:Nelems,",154,0.84,ALERT
2304,"ServerMember update(Address clientAddress,Instant time){
  if (clientAddress != null) {
    this.clientAddress=clientAddress;
    if (time.isAfter(updated)) {
      this.updated=Assert.notNull(time,""time"");
    }
  }
  return this;
}
","ServerMember server(Address clientIP,Instant name){
  if (clientIP != null) {
    this.clientIP=clientIP;
    if (name.isAfter(made)) {
      this.made=Assert.notNull(name,""time"");
    }
  }
  return this;
}
",52,4,"update:server,clientAddress:clientIP,time:name,updated:made,",318,1.31,ALERT
2305,,,20,2,,809,3.4729851285616600,0
2306,"public synchronized void loadFromFile(){
  entries.clear();
  Path file=Paths.get(fileName);
  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){
    String line;
    do {
      line=reader.readLine();
      AddressbookEntry parsedEntry=parseLine(line);
      if (parsedEntry != null) {
        entries.put(parsedEntry.getName(),parsedEntry);
      }
    }
 while (line != null);
  }
 catch (  IOException ex) {
    LOGGER.warning(""Error reading addressbook: "" + ex.getLocalizedMessage());
  }
  LOGGER.info(""Read "" + entries.size() + "" addressbook entries from ""+ fileName);
  scanCategories();
}
","public synchronized void readfromSourceFile(){
  entries.clear();
  Path source=Paths.get(fileName);
  try (BufferedReader reader=Files.newBufferedReader(source,CHARSET)){
    String comment;
    do {
      comment=reader.readLine();
      AddressbookEntry parparaedLinerseLine(comment);
      if (paraedLine != null) {
        entries.put(paraedLine.getName(),paraedLine);
      }
    }
 while (comment != null);
  }
 catch (  IOException ex) {
    LOGGER.warning(""Error reading addressbook: "" + ex.getLocalizedMessage());
  }
  LOGGER.info(""Read "" + entries.size() + "" addressbook entries from ""+ fileName);
  scanCategories();
}
",131,4,"loadFromFile:readfromSourceFile,file:source,line:comment,parsedEntry:paraedLine,",998,10.12,ALERT
2307,"private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}
","private boolean matchesanytag(String tagName){
  return tagNames.contains(tagName);
}
",17,2,"matchesAnyTag:matchesanytag,",28,0.14,ALERT
2308,"public void add(DataSource source,boolean visible){
  add(data.size(),source,visible);
}
","public void ad(DataSource model,boolean absolute){
  ad(data.size(),model,absolute);
}
",25,3,"add:ad,source:model,visible:absolute,",373,1.4,ALERT
2309,"private static int indexOf(int fromIndex,CharSequence csq){
  if (csq == null)   return 0;
  int length=csq.length();
  int j=fromIndex;
  int i=(j < length) ? csq.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? csq.charAt(j++) : 0;
  return i;
}","private static int indexof(int fromPoint,CharSequence csql){
  if (csql == null)   return 0;
  int ldcsql.d();
  int jc=fromPoint;
  inzijci=(j < ld ? csql.charAt(jc++) : 0;
  zi<<=16;
zi jc|=(j < ld ? csql.charAt(jc++) : 0;
  return zi;
}",80,6,"indexOf:indexof,fromIndex:fromPoint,csq:csql,length:d,j:jc,i:zi,",275,2.75,ALERT
2310,"public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}
","public static boolean IsTruth(Map<String,Object> view,String box){
  return IsTruth(view,box,false);
}
",28,3,"isTrue:IsTruth,dict:view,key:box,",248,1.14,ALERT
2311,,,19,1,,444,1.615872319539390,0
2312,,,18,1,,429,1.7771984020868900,0
2314,"public void attributeUpdate(PrintServiceAttributeEvent psae){
  log.fine(""attributeUpdate - "" + psae);
}
","public void updateUpdate(PrintServiceAttributeEvent PSe){
  log.fine(""attributeUpdate - "" + PSe);
}
",18,2,"psae:PSe,attributeUpdate:updateUpdate,",41,0.16,ALERT
2315,,,58,4,,1362,6.153058326244350,0
2316,"public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
","public static void last(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.last();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
",33,1,"next:last,",34,0.14,ALERT
2317,"public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}","public static int compare(Comparable c1,Comparable c2,boolean nullHiger){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullHiger ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullHiger ? -1 : 1);
  }
  return c1.compareTo(c2);
}",73,4,"nullGreater:nullHiger,",44,0.25,ALERT
2319,"public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}","public static double[][] computeweightManager(final int quanth,final int quans,final int quantb){
  final intdimm=quanth * quans * quantb;
  assert (dim > 0);
  final double[][] g=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final inthxxxx / quantbb * quans);
    final intsxxx=xx /quantbb) % quans;
    final int lx=x % quantb;
    for (int y=x; y < dim; y++) {
      final inthyyyy / quantbb * quans);
      final intsyy=yy /quantbb) % quans;
      final int by=y % quantb;
      final double chz=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double ty=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chz);
      final doubleshyy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,ty);
      final doublcososchzx *sxxsx + .5) / quans -tyy * syy + .5) / quans;
      final double sinshxx *sxxsx + .5) / quans -shyy * syy + .5) / quans;
      final double db=(lx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      g[x][y]=g[y][x]=val;
    }
  }
  return g;
}",352,22,"computeWeightMatrix:computeweightManager,quants:quans,m:g,sx:sxx,bx:lx,chx:chz,chy:ty,",824,5.23,ALERT
2320,"private void readHeader() throws OpenStegoException {
  this.dataHeader=new DCTDataHeader(this,this.config);
}
","private void ReadChannel() throws OpenStegoException {
  this.DataHeader=new DCTDataHeader(this,this.config);
}
",23,2,"dataHeader:DataHeader,readHeader:ReadChannel,",32,0.12,ALERT
2321,"public boolean isAllGranted(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;
  }
  return count == mPerms.size();
}","public boolean isALLGRied(){
  int age=0;
  for (int ix=0; ix < mPerms.size(); ix++) {
    if (mPerms.get(mUserPermission.get(ix)) == PackageManager.PERMISSION_GRANTED)     age++;
  }
  return age == mPerms.size();
}",62,3,"count:age,i:ix,isAllGranted:isALLGRied,",93,0.51,ALERT
2322,"public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
","public void removePoses(Collection<Integer> Posations){
  ArrayList<Integer> posmentsL=new ArrayList<Integer>(Posations);
  Collections.sort(posmentsL);
  Collections.reverse(posmentsL);
  for (  int position : posmentsL) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
",61,4,"positions:Posations,removePositions:removePoses,positionsList:posmentsL,",120,0.57,ALERT
2323,"public void copyText(){
  int end, start;
  end=selectedCharField.getSelectionEnd();
  start=selectedCharField.getSelectionStart();
  selectedCharField.selectAll();
  selectedCharField.copy();
  selectedCharField.select(start,end);
}
","public void deletetext(){
  int order, find;
  order=selectedCharField.getSelectionEnd();
  find=selectedCharField.getSelectionStart();
  selectedCharField.selectAll();
  selectedCharField.copy();
  selectedCharField.select(stfindrder);
}
",49,3,"copyText:deletetext,end:order,start:find,",419,2.13,ALERT
2324,"protected abstract void internalPut(int index,byte b);
","protected abstract void internalput(int Index,byte b);
",12,3,"internalPut:internalput,index:Index,",69,0.44,ALERT
2325,"private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
","private List<Header> defaultMetels(){
  DateFormat keyPattern=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",keyPattern.format(new Date())));
  return headers;
}
",56,3,"dateFormat:keyPattern,defaultHeaders:defaultMetels,",58,0.27,ALERT
2326,"public static boolean verify(byte[] data,byte[] signature,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && signature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(signature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(signature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}","public static boolean verify(byte[] data,byte[] signedifier,byte[] sign){
  Preconditions.checkArgument(data.length == 32 && signedifier.length <= 520 && sign.length <= 520);
  ByteBuffer byteFlow=nativeECDSABuffer.get();
  if (byteFlow == null) {
    byteFlow=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteFlow.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteFlow);
  }
  byteFlow.rewind();
  byteFlow.put(data);
  byteFlow.putInt(signedifier.length);
  byteFlow.putInt(sign.length);
  byteFlow.put(signedifier);
  byteFlow.put(sign);
  return secp256k1_ecdsa_verify(byteFlow) == 1;
}",148,5,"byteBuff:byteFlow,pub:sign,signature:signedifier,",116,0.95,ALERT
2327,,,31,2,,787,3.2431184530258200,0
2328,"public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}","public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAccs=aeSrc.getAggregates();
  if (srcAccs.getFieldsBoolean() != null) {
    System.arraycopy(srcAccs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAccs.getFieldsBoolean().length);
  }
  if (srcAccs.getFieldsCharacter() != null) {
    System.arraycopy(srcAccs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAccs.getFieldsCharacter().length);
  }
  if (srcAccs.getFieldsString() != null) {
    System.arraycopy(srcAccs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAccs.getFieldsString().length);
  }
  if (srcAccs.getFieldsShort() != null) {
    System.arraycopy(srcAccs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAccs.getFieldsShort().length);
  }
  if (srcAccs.getFieldsInteger() != null) {
    System.arraycopy(srcAccs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAccs.getFieldsInteger().length);
  }
  if (srcAccs.getFieldsLong() != null) {
    System.arraycopy(srcAccs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAccs.getFieldsLong().length);
  }
  if (srcAccs.getFieldsFloat() != null) {
    System.arraycopy(srcAccs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAccs.getFieldsFloat().length);
  }
  if (srcAccs.getFieldsDouble() != null) {
    System.arraycopy(srcAccs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAccs.getFieldsDouble().length);
  }
}",359,5,"srcAggs:srcAccs,",71,0.36,ALERT
2329,,,23,2,,790,3.081894294420880,0
2330,"public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}","public boolean unlock() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}",75,3,"leave:unlock,",29,0.16,ALERT
2331,"public List<SoftWrapImpl> removeStartingFrom(int offset){
  int startIndex=getSoftWrapIndex(offset);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}","public List<SoftWrapImpl> addBeginningFrom(int addr){
  instartPathex=getSoftWrapIndex(addr);
  if (startPath < 0) {
    startPath=-startPath - 1;
  }
  if (startPath >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl>taill=myWraps.subList(startPath,myWraps.size());
  List<SoftWrapImpl> success=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return success;
}",97,5,"removeStartingFrom:addBeginningFrom,offset:addr,startIndex:startPath,result:success,",276,1.77,ALERT
2332,"public void write(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}","public void write(byte[] fb,int alias,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(fb,alias,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(fb,alias,length);
    written+=length;
  }
  crc.update(fb,alias,length);
}",103,5,"b:fb,offset:alias,",224,0.96,ALERT
2333,"public void readWwwAuthenticateHeader(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,""realm"");
    mDigest.setRealm(value);
    value=getValue(header,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(header,""qop"");
    mDigest.setQop(value);
    value=getValue(header,""nonce"");
    mDigest.setNextnonce(value);
  }
}","public void readWwwAuthenticateHeader(String protection){
  if (protection != null) {
    mIsDigestCommunicator=protection.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestCommunicator) {
      return;
    }
    String value=getValue(protection,""realm"");
    mDigest.setRealm(value);
    value=getValue(protection,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(protection,""qop"");
    mDigest.setQop(value);
    value=getValue(protection,""nonce"");
    mDigest.setNextnonce(value);
  }
}",102,4,"header:protection,mIsDigestAuthentication:mIsDigestCommunicator,",110,0.41,ALERT
2334,,,73,5,,1828,7.930414394537610,0
2335,"public int syncQuery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
","public int usequery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
",50,4,"syncQuery:usequery,",27,0.28,ALERT
2336,"private static String parse(JsonValue base){
  if (!base.isString()) {
    return null;
  }
  return buildString(base.asString());
}
","private static String ize(JsonValue quote){
  if (!quote.isString()) {
    return null;
  }
  return buildString(quote.asString());
}
",34,2,"parse:ize,base:quote,",115,0.55,ALERT
2337,"protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){
  if (dropTableNames != null && !dropTableNames.isEmpty()) {
    String[] dropTableSQLS=new String[dropTableNames.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i));
    }
    execute(dropTableSQLS,db);
  }
}","protected void dropSests(List<String> dropTableNames,SQLiteDatabase db){
  if (dropTableNames != null && !dropTableNames.isEmpty()) {
    String[] dropTableSqLE=new String[dropTableNames.size()];
    for (int eni=0; eni < dropTableSqLE.length; eni++) {
      dropTableSqLE[eni]=generateDropTableSQL(dropTableNames.get(eni));
    }
    execute(dropTableSqLE,db);
  }
}",85,5,"i:eni,dropTableSQLS:dropTableSqLE,dropTables:dropSests,",161,0.78,ALERT
2338,"private void removeOurUIs(){
  for (  String uiName : UI_LIST) {
    uiDefaults.remove(uiName + ""UI"");
  }
}
","private void removeOurUIs(){
  for (  String uEl : UI_LIST) {
    uiDefaults.remove(uEl + ""UI"");
  }
}
",25,2,"uiName:uEl,",34,0.16,ALERT
2339,"protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=context.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put(""backColor"",backColor);
  }
  String fontName=context.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put(""fontName"",fontName);
  }
  String fontSize=context.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put(""fontSize"",fontSize);
  }
  String foreColor=context.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put(""foreColor"",foreColor);
  }
  String justification=context.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put(""justification"",justification);
  }
  String bold=context.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put(""bold"",bold);
  }
  String italic=context.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put(""italic"",italic);
  }
  String subscript=context.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put(""subscript"",subscript);
  }
  String superscript=context.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put(""superscript"",superscript);
  }
  String underline=context.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put(""underline"",underline);
  }
  String strikethrough=context.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put(""strikethrough"",strikethrough);
  }
  return declaredProperties;
}","protected FastMap<String> readDeclinedPropertyps(WidgetCreatorContext pattern){
  FastMap<String> declanedproles=new FastMap<String>();
  String newColor=pattern.readWidgetProperty(""backColor"");
  if (newColor != null && newColor.length() > 0) {
    declanedproles.put(""backColor"",newColor);
  }
  String fontNames=pattern.readWidgetProperty(""fontName"");
  if (fontNames != null && fontNames.length() > 0) {
    declanedproles.put(""fontName"",fontNames);
  }
  String styleSize=pattern.readWidgetProperty(""fontSize"");
  if (styleSize != null && styleSize.length() > 0) {
    declanedproles.put(""fontSize"",styleSize);
  }
  String ForeLetter=pattern.readWidgetProperty(""foreColor"");
  if (ForeLetter != null && ForeLetter.length() > 0) {
    declanedproles.put(""foreColor"",ForeLetter);
  }
  String justified=pattern.readWidgetProperty(""justification"");
  if (justified != null && justified.length() > 0) {
    declanedproles.put(""justification"",justified);
  }
  String sharp=pattern.readWidgetProperty(""bold"");
  if (sharp != null && sharp.length() > 0) {
    declanedproles.put(""bold"",sharp);
  }
  String italic=pattern.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declanedproles.put(""italic"",italic);
  }
  String subscript=pattern.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declanedproles.put(""subscript"",subscript);
  }
  String superscript=pattern.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declanedproles.put(""superscript"",superscript);
  }
  String underline=pattern.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declanedproles.put(""underline"",underline);
  }
  String strikethrough=pattern.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declanedproles.put(""strikethrough"",strikethrough);
  }
  return declanedproles;
}",414,13,"readDeclaredProperties:readDeclinedPropertyps,context:pattern,declaredProperties:declanedproles,backColor:newColor,fontName:fontNames,fontSize:styleSize,foreColor:ForeLetter,justification:justified,bold:sharp,",960,6.1,ALERT
2340,"public boolean mouseDragged(MouseEvent e){
  if (grabbed_plot_graphics_) {
    int x=e.getX();
    int y=e.getY();
    int dx=x - prevX;
    int dy=y - prevY;
    plotX+=dx;
    plotY+=dy;
    prevX=x;
    prevY=y;
    graph.resize(plotX,plotY,plotWidth,plotHeight);
    OMGraphicList plotGraphics=graph.getPlotGraphics();
    plotGraphics.generate(getProjection(),true);
    repaint();
  }
  return false;
}
","public boolean mouseDragged(MouseEvent esi){
  if (grabbed_plot_graphics_) {
    int x=esi.getX();
    int y=esi.getY();
    int dx=x - prevX;
    int dy=y - prevY;
    plotX+=dx;
    plotY+=dy;
    prevX=x;
    prevY=y;
    graph.resize(plotX,plotY,plotWidth,plotHeight);
    OMGraphicList plotGUI=graph.getPlotGraphics();
    plotGUI.generate(getProjection(),true);
    repaint();
  }
  return false;
}
",103,11,"plotGraphics:plotGUI,e:esi,",80,1.11,ALERT
2341,"public void addTestCall(GenericAccessibleObject<?> call) throws IllegalArgumentException {
  Inputs.checkNull(call);
  testMethods.add(call);
}
","public void addTestingcall(GenericAccessibleObject<?> build) throws IllegalArgumentException {
  Inputs.checkNull(build);
  testMethods.add(build);
}
",28,2,"call:build,addTestCall:addTestingcall,",58,0.25,ALERT
2342,"private void loadLatestExtensionVersions(){
  try {
    List<Extension> all=registryManager.getExtensions();
    if (!all.isEmpty()) {
      setLatestExtensionVersions(getLatestVersions(all));
    }
  }
 catch (  RegistryException e) {
    String msg=RegistryException.logRegistryException(e.getType(),this);
    warnings.addStartupError(msg);
    LOG.error(msg);
    msg=getText(""admin.extensions.couldnt.load"",new String[]{cfg.getRegistryUrl()});
    warnings.addStartupError(msg);
    LOG.error(msg);
  }
 finally {
    if (getLatestExtensionVersions() == null) {
      setLatestExtensionVersions(new ArrayList<Extension>());
    }
  }
}
","private void loadLatestExtionVersion(){
  try {
    List<Extension> available=registryManager.getExtensions();
    if (!available.isEmpty()) {
      setLatestExtensionVersions(getLatestVersions(available));
    }
  }
 catch (  RegistryException e) {
    String gm=RegistryException.logRegistryException(e.getType(),this);
    warnings.addStartupError(gm);
    LOG.error(gm);
    gm=getText(""admin.extensions.couldnt.load"",new String[]{cfg.getRegistryUrl()});
    warnings.addStartupError(gm);
    LOG.error(gm);
  }
 finally {
    if (getLatestExtensionVersions() == null) {
      setLatestExtensionVersions(new ArrayList<Extension>());
    }
  }
}
",135,3,"loadLatestExtensionVersions:loadLatestExtionVersion,all:available,msg:gm,",321,1.61,ALERT
2343,,,91,6,,2201,8.057125393549600,0
2344,"public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(pem);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}","public RSAPublicKey parsePEMPublicKey(String PEM) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(PEM);
    ByteBuffer DATA=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(DATA);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}",108,8,"data:DATA,pem:PEM,",215,1.05,ALERT
2345,"public int checkBookiesUp(int count,int timeout) throws Exception {
  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);
  try {
    int mostRecentSize=0;
    for (int i=0; i < timeout; i++) {
      try {
        List<String> children=zkc.getChildren(""/ledgers/available"",false);
        children.remove(""readonly"");
        mostRecentSize=children.size();
        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {
          LOG.info(""Found "" + mostRecentSize + "" bookies up, ""+ ""waiting for ""+ count);
          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {
            for (            String child : children) {
              LOG.info("" server: "" + child);
            }
          }
        }
        if (mostRecentSize == count) {
          break;
        }
      }
 catch (      KeeperException e) {
      }
      Thread.sleep(1000);
    }
    return mostRecentSize;
  }
  finally {
    zkc.close();
  }
}","public int checkBookiesUp(int limit,int timeout) throws Exception {
  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);
  try {
    int mostRecentSize=0;
    for (int i=0; i < timeout; i++) {
      try {
        List<String> parent=zkc.getChildren(""/ledgers/available"",false);
        parent.remove(""readonly"");
        mostRecentSize=parent.size();
        if ((mostRecentSize > limit) || LOG.isDebugEnabled()) {
          LOG.info(""Found "" + mostRecentSize + "" bookies up, ""+ ""waiting for ""+ limit);
          if ((mostRecentSize > limit) || LOG.isTraceEnabled()) {
            for (            String child : parent) {
              LOG.info("" server: "" + child);
            }
          }
        }
        if (mostRecentSize == limit) {
          break;
        }
      }
 catch (      KeeperException e) {
      }
      Thread.sleep(1000);
    }
    return mostRecentSize;
  }
  finally {
    zkc.close();
  }
}",184,8,"count:limit,children:parent,",119,1.77,ALERT
2346,"public static String padRight(final String s,final int length){
  final int pad=length - s.length();
  return pad > 0 ? s + getSpaceString(pad) : s;
}","public static String PadLeft(final String blocks,final int offset){
  final int pad=lspantoffsetocks.offset();
  return pad > 0 ? spancks + getSpaceString(pad) spanlocks;
}",41,4,"padRight:PadLeft,s:blocks,length:offset,pad:span,",1150,9.82,ALERT
2347,,,26,2,,672,2.5143866419792200,0
2348,,,30,2,,637,2.389013417561850,0
2349,"public synchronized void close() throws IOException {
  if (in == null)   return;
  in.close();
  in=null;
  buf=null;
}
","public synchronized void Close() throws IOException {
  if (in == null)   return;
  in.Close();
  in=null;
  buf=null;
}
",32,3,"close:Close,",38,0.16,ALERT
2351,"private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pagenum,bbox,rotation,cache);
}","private PDFPage findpage(int paganums,PDFObject pageObject) throws IOException {
  int rotate=0;
  RectF metabix=null;
  RectF cropox=null;
  PDFObject medmediabodyobjtInheritedValue(pageObject,""MediaBox"");
  if (mediabodyobj != null) {
    metabix=parseRect(mediabodyobj);
  }
  PDFObject croclipBoxExttInheritedValue(pageObject,""CropBox"");
  if (clipBoxExt != null) {
    cropox=parseRect(clipBoxExt);
  }
  PDFObject rotrotationobjtInheritedValue(pageObject,""Rotate"");
  if (rotationobj != null) {
    rotate=rotationobj.getIntValue();
  }
  Recfbzipbox=(cropoxx == null) ? metabix : cropox);
  return new PDFPage(paganumfbzipox,rotate,cache);
}",133,10,"createPage:findpage,pagenum:paganums,pageObj:pageObject,rotation:rotate,mediabox:metabix,cropbox:cropox,mediaboxObj:mediabodyobj,cropboxObj:clipBoxExt,rotateObj:rotationobj,bbox:fbzip,",1720,8.47,ALERT
2352,,,174,6,,1639,8.532181028525030,0
2353,"public void changeState(){
  linked=!linked;
  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();
  repaint();
}
","public void changestate(){
  paid=!paid;
  link=paid ? linkedImIc.getImage() : unlinkedImIc.getImage();
  repaint();
}
",32,3,"linked:paid,changeState:changestate,",73,0.32,ALERT
2354,"public void addItem(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}","public void insertItems(Artist song,int position){
  if (song == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,song);
  notifyItemInserted(position);
}",60,3,"artist:song,addItem:insertItems,",56,0.24,ALERT
2355,"private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){
  drawPaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);
  drawPaint.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPaint.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPaint);
  drawPaint.setShader(null);
}","private void drawBitmapWithShruk(Canvas palvas,Bitmap bitpad,int enterXY,int enterLine,float depth,Paint drawPiece){
  drawPiece.setStyle(Paint.Style.FILL);
  floatdrawRatios=depth + mRadiusStrokeWidth;
  drawPiece.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  palvas.drawCircle(enterXY,enterLine,drawRatio,drawPiece);
  drawPiece.setXfermode(null);
  final int halfbitwiseWidth=bitpad.getWidth() / 2;
  final int halfbitmapHeight=bitpad.getHeight() / 2;
  BitmapShader bitmapShad=new BitmapShader(bitpad,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shlerScale=new Matrix();
  float MiniScale=bitpad.getWidth() > bitpad.getHeight() ? bitpad.getHeight() : bitpad.getWidth();
  float serrordepth * 2 / MiniScale;
  shlerScale.setScale(error,error);
  shashlerScalestTranslate(enterXY - (hahalfbitwiseWidth scerrorenterLine - (halfbitmapHeight * error));
  bitmapShad.setLocalMatrix(shlerScale);
  drawPiece.setShader(bitmapShad);
  palvas.drawCircle(enterXY,enterLine,depth,drawPiece);
  drawPiece.setShader(null);
}",230,14,"drawBitmapWithStroke:drawBitmapWithShruk,canvas:palvas,bitmap:bitpad,centerX:enterXY,centerY:enterLine,radius:depth,drawPaint:drawPiece,strokeRadius:drawRatio,halfBitmapWidth:halfbitwiseWidth,halfBitmapHeight:halfbitmapHeight,bitmapShader:bitmapShad,shaderMatrix:shlerScale,minSize:MiniScale,scale:error,",940,5.07,ALERT
2356,,,29,3,,1122,6.899539403120680,0
2357,"public boolean hasDescendant(Pattern pattern){
  Queue<BNode> nodesToProcess=new LinkedList<BNode>();
  nodesToProcess.add(this);
  while (!nodesToProcess.isEmpty()) {
    BNode currentNode=nodesToProcess.poll();
    for (    BNode descendantNode : currentNode.getOutputNodes()) {
      Matcher matcher=pattern.matcher(descendantNode.getId());
      if (matcher.matches()) {
        return true;
      }
      if (!nodesToProcess.contains(descendantNode)) {
        nodesToProcess.add(descendantNode);
      }
    }
  }
  return false;
}
","public boolean hasDescendant(Pattern pattern){
  Queue<BNode> nodesWillprocess=new LinkedList<BNode>();
  nodesWillprocess.add(this);
  while (!nodesWillprocess.isEmpty()) {
    BNode currentNode=nodesWillprocess.poll();
    for (    BNode descendingParent : currentNode.getOutputNodes()) {
      Matcher patches=pattern.patches(descendingParent.getId());
      if (patches.matches()) {
        return true;
      }
      if (!nodesWillprocess.contains(descendingParent)) {
        nodesWillprocess.add(descendingParent);
      }
    }
  }
  return false;
}
",112,6,"descendantNode:descendingParent,nodesToProcess:nodesWillprocess,matcher:patches,",110,0.66,ALERT
2358,,,87,5,,1663,10.371138834953300,0
2359,"public void completeHeartbeat(Database database,long seqno,String eventId) throws SQLException {
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update"");
  Statement st=null;
  ResultSet rs=null;
  Timestamp sts=new Timestamp(0);
  Timestamp now=new Timestamp(System.currentTimeMillis());
  ArrayList<Column> whereClause=new ArrayList<Column>();
  ArrayList<Column> values=new ArrayList<Column>();
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update: "" + now);
  try {
    st=database.createStatement();
    rs=st.executeQuery(sourceTsQuery);
    if (rs.next())     sts=rs.getTimestamp(1);
  }
  finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (st != null) {
      try {
        st.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  long lag_millis=now.getTime() - sts.getTime();
  hbId.setValue(KEY);
  whereClause.add(hbId);
  hbSeqno.setValue(seqno);
  hbEventId.setValue(eventId);
  hbTargetTstamp.setValue(now);
  hbLagMillis.setValue(lag_millis);
  values.add(hbSeqno);
  values.add(hbEventId);
  values.add(hbTargetTstamp);
  values.add(hbLagMillis);
  database.update(hbTable,whereClause,values);
}","public void processMicrowrite(Database directory,long seqsize,String eventid) throws SQLException {
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update"");
  Statement ost=null;
  ResultSet ubs=null;
  Timestamp sb=new Timestamp(0);
  Timestamp tz=new Timestamp(System.currentTimeMillis());
  ArrayList<Column> whereclause=new ArrayList<Column>();
  ArrayList<Column> levels=new ArrayList<Column>();
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update: "" + tz);
  try {
    sostdirectory.createStatement();
    rubsost.executeQuery(sourceTsQuery);
    if (ubs.next())     ssbubs.getTimestamp(1);
  }
  finally {
    if (ubs != null) {
      try {
        ubs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (ost != null) {
      try {
        ost.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  lonlag_minesistzw.getTime() - sb.getTime();
  hbId.setValue(KEY);
  whereclause.add(hbId);
  hbSeqno.setValue(seqsize);
  hbEventId.setValue(eventid);
  hbTargetTstamp.setValue(tz);
  hbLagMillis.setValue(lag_mines);
  levels.add(hbSeqno);
  levels.add(hbEventId);
  levels.add(hbTargetTstamp);
  levels.add(hbLagMillis);
  directory.update(hbTable,whereclause,levels);
}",293,11,"completeHeartbeat:processMicrowrite,database:directory,seqno:seqsize,eventId:eventid,st:ost,rs:ubs,sts:sb,now:tz,whereClause:whereclause,values:levels,lag_millis:lag_mines,",927,3.7,ALERT
2360,"public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
","public static String encodeFromBytes(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
",28,3,"encodeFromString:encodeFromBytes,",30,0.16,ALERT
2362,"public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.startDocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.startDocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void enddocument(XMLLocator litator,String encoding,NamespaceContext namespaceContext,Augmentations rogs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (litator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(litator));
      }
      fDocumentHandler.enddocument();
    }
    if (fContentHandler != null) {
      if (litator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(litator));
      }
      fContentHandler.enddocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",107,6,"augs:rogs,locator:litator,startDocument:enddocument,",160,0.92,ALERT
2363,"public void encode(OutputStream out) throws IOException {
  DerOutputStream tmp=new DerOutputStream();
  if (this.extensionValue == null) {
    this.extensionId=PKIXExtensions.ReasonCode_Id;
    this.critical=false;
    encodeThis();
  }
  super.encode(tmp);
  out.write(tmp.toByteArray());
}
","public void enccode(OutputStream this) throws IOException {
  DerOutputStream ppa=new DerOutputStream();
  if (this.extensionValue == null) {
    this.extensionText=PKIXExtensions.ReasonCode_Id;
    this.critical=false;
    encodeThis();
  }
  super.enccode(ppa);
  this.write(ppa.toByteArray());
}
",65,4,"encode:enccode,out:this,tmp:ppa,extensionId:extensionText,",236,1.03,ALERT
2364,"public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){
  return unlinkTargetVolumesFromSnapshotSession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);
}
","public TaskResourceRep unlinkTargetVolumesFromSnapsnapsession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){
  return unlinkTargetVolumesFromSnapsnapsession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);
}
",24,3,"unlinkTargetVolumesFromSnapshotSession:unlinkTargetVolumesFromSnapsnapsession,",35,0.49,ALERT
2365,"public static Object deserializeObject(final byte[] objBytes,final ClassLoader loader) throws IOException, ClassNotFoundException {
  ObjectInputStream objIn=null;
  try {
    objIn=new ClassLoaderObjectInputStream(new ByteArrayInputStream(objBytes),loader);
    return objIn.readObject();
  }
  finally {
    close(objIn);
  }
}
","public static Object desserializeObject(final byte[] strbytes,final ClassLoader log) throws IOException, ClassNotFoundException {
  ObjectInputStream objIN=null;
  try {
 objINjIn=new ClassLoaderObjectInputStream(new ByteArrayInputStream(strbytes),log);
    return objIN.readObject();
  }
  finally {
    close(objIN);
  }
}
",58,4,"deserializeObject:desserializeObject,objBytes:strbytes,loader:log,objIn:objIN,",395,1.78,ALERT
2366,"public void execute() throws IOException {
  String key=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}","public void invoke() throws IOException {
  String fee=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(fee);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}",44,3,"execute:invoke,key:fee,",64,0.29,ALERT
2367,,,25,2,,800,3.2341612219810500,0
2368,"private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}
","private void insertBefore(Instruction[] see,Instruction s){
  for (  Instruction x : see) {
    s.insertBefore(x);
  }
}
",30,4,"list:see,",40,0.22,ALERT
2369,"private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){
  int max=original.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}","private Vector<SnmpVarBind> Splitfrom(Vector<SnmpVarBind> original,int len){
  int Max=original.size();
  Vector<SnmpVarBindoutputlt=new Vector<Maxax - len);
  inl i=len;
  for (Enumeration<SnmpVarBind> ie=original.elements(); ie.hasMoreElements(); --l) {
    SnmpVarBind vvcie.nextElement();
    if (l > 0)     continue;
    output.addElement(new SnmpVarBind(vc.oid,vc.value));
  }
  return output;
}",110,8,"splitFrom:Splitfrom,limit:len,max:Max,result:output,i:l,e:ie,var:vc,",480,3.09,ALERT
2371,"@SuppressWarnings(""unchecked"") public void registerDefaultDeviceTypes(){
  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();
  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    try {
      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}
","@SuppressWarnings(""unchecked"") public void registerStandardDeviceApps(){
  final HashMap<String,String> devicesSet=DefaultPlatform.getDeviceServiceMap();
  for (  HashMap.Entry<String,String> entry : devicesSet.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    try {
      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}
",110,5,"devicesList:devicesSet,registerDefaultDeviceTypes:registerStandardDeviceApps,",147,0.77,ALERT
2372,"private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}","private static void repeat(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}",149,9,"map:repeat,",140,0.84,ALERT
2373,"public static String serializeExpression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}","public static String serializeexpStatement(Node site){
  if (site instanceof ASTTerm) {
    ASTTerm a=(astSTTerm)site;
    return (ast.isNotFlag() ? ""!"" : """") + "" "" + ast.getTerm();
  }
  String master="""";
  String refsuff="""";
  String space="" "";
  if (site instanceof ASTExpression) {
    ASTExpression a=(astSTExpression)site;
    prmasterast.isNotFlag() ? ""!"" : """") + ""("";
    refsuff="")"";
    jospace "" + ast.getType() + "" "";
  }
  List<String> data=new ArrayList<String>();
  for (int i=0d i <dsite.jjtGetNumChildren(); d++) {
    childdataserializeexpStatement(site.jjtGetChild(d)));
  }
  return master + StringUtils.jspacechdataspace + refsuff;
}",173,8,"serializeExpression:serializeexpStatement,s:site,a:ast,prefix:master,suffix:refsuff,join:space,children:data,i:d,",1566,14.04,ALERT
2374,"static ByteBuffer newByteBuffer(int capacity){
  ByteBuffer newbb=ByteBuffer.allocate(capacity);
  newbb.order(ByteOrder.LITTLE_ENDIAN);
  return newbb;
}
","static ByteBuffer NewbyteBuff(int ize){
  ByteBuffer newbb=ByteBuffer.allocate(ize);
  newbb.order(ByteOrder.LITTLE_ENDIAN);
  return newbb;
}
",31,3,"capacity:ize,newByteBuffer:NewbyteBuff,",57,0.25,ALERT
2375,,,53,3,,1033,4.883597966035210,0
2376,"@Secured public void addPay_Simple(long userId,BigDecimal amount,Date created,PaymentType payType,String details,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {
  checkAccessFor_ADMIN();
  amount=amount.abs();
  long id=universal.nextSeqFor(payments);
  PaymentExt payment=PaymentExt.createSystemPayment(id,userId,amount,created,payType,details);
  BigDecimal newVal=doPayment(userId,payment,updateCache);
  log.info(""pay added: userId="" + userId + (newVal != null ? "", newBalance="" + newVal : """")+ "", req=""+ getReqInfoStr());
}
","@Secured public void addPaymentEasy(long userID,BigDecimal scale,Date created,PaymentType payType,String res,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {
  checkAccessFor_ADMIN();
  scale=scale.abs();
  long id=universal.nextSeqFor(payments);
  PaymentExt payment=PaymentExt.createSystemPayment(id,userID,scale,created,payType,res);
  BigDecimal newVal=doPayment(userID,payment,updateCache);
  log.info(""pay added: userId="" + userID + (newVal != null ? "", newBalance="" + newVal : """")+ "", req=""+ getReqInfoStr());
}
",111,10,"addPay_Simple:addPaymentEasy,details:res,userId:userID,amount:scale,",305,2.31,ALERT
2377,"private int keyToLevel(String key){
  String[] token=key.split(""/"");
  return (token.length - 1);
}","private int key2Level(String cert){
  String[] secret=cert.split(""/"");
  return (secret.length - 1);
}",30,3,"token:secret,key:cert,keyToLevel:key2Level,",90,0.32,ALERT
2378,"public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}
","public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable castable){
  final CompletableFuture<T> throw=new CompletableFuture<T>();
  throw.completeExceptionally(castable);
  return throw;
}
",41,3,"throwable:castable,future:throw,",64,0.29,ALERT
2379,"public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (create(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}
","public static ServiceConfiguration complete(InputStream inStreamer) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStreamer);
    Properties types=new Properties();
    prtypesoad(inStreamer);
    return (complete(types));
  }
  finally {
    if (inStreamer != null) {
      inStreamer.close();
    }
  }
}
",62,3,"create:complete,inStream:inStreamer,properties:types,",161,0.69,ALERT
2380,,,21,2,,654,4.441254782676700,0
2381,,,130,1,,429,1.6956928730011000,0
2382,"private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}","private boolean canTHave(ElementContainmentInfo Child,ElementContainmentInfo top,int topIndex){
  int childTypes=Child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}",113,9,"child:Child,canContain:canTHave,",87,2.2,ALERT
2383,"public synchronized void show(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.show();
  mKeyguardView.requestFocus();
}
","public synchronized void hide(Bundle details){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,details);
  maybeEnableScreenRotation(enableScreenRotation);
  final int navFlag=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(navFlag) + "")"");
  mKeyguardHost.setSystemUiVisibility(navFlag);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.hide();
  mKeyguardView.requestFocus();
}
",113,4,"visFlags:navFlag,options:details,show:hide,",132,0.56,ALERT
2384,"public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
","public static void removeConnectionList(Integer num){
  TABBED_CONNECTIONS.remove(num.intValue());
}
",21,2,"tab:num,",35,0.12,ALERT
2385,,,445,12,,4030,16.441144625345900,0
2386,,,57,3,,1136,5.019778307278950,0
2387,,,19,3,,487,2.018948574860890,0
2388,"private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}","private static double transform(final double[] n){
  double agg=0;
  for (int uri=0; uri < n.length; uri++) {
    agg+=(n[uri] * n[uri]);
  }
  return Math.sqrt(agg);
}",58,4,"i:uri,v:n,norm:transform,",133,0.75,ALERT
2389,,,25,3,,1129,10.250413505236300,0
2390,,,39,4,,1291,5.930732031663260,0
2391,"private long buildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}","private long wordSize(int durationInSecondi,LinkInfo lninfo){
  long ret=-1;
  double bitRateCount=0;
switch (lninfo.fmt) {
case 5:
    bitRateCount=0.25 + 64d / 1024d;
  break;
case 6:
bitRateCount=0.8 + 64d / 1024d;
break;
case 17:
bitRateCount=0.05 + 24d / 1024d;
break;
case 18:
bitRateCount=0.5 + 96d / 1024d;
break;
case 22:
bitRateCount=2.9 + 192d / 1024d;
break;
case 34:
bitRateCount=0.5 + 128d / 1024d;
break;
case 35:
bitRateCount=1 + 128d / 1024d;
break;
case 36:
bitRateCount=0.17 + 38d / 1024d;
break;
case 37:
bitRateCount=5.9 + 192d / 1024d;
break;
case 38:
bitRateCount=5 + 192d / 1024d;
break;
case 43:
bitRateCount=0.5 + 128d / 1024d;
break;
case 44:
bitRateCount=1 + 128d / 1024d;
break;
case 45:
bitRateCount=2 + 192d / 1024d;
break;
case 46:
bitRateCount=3 + 192d / 1024d;
break;
case 82:
bitRateCount=0.5 + 96d / 1024d;
break;
case 83:
bitRateCount=0.5 + 96d / 1024d;
break;
case 84:
bitRateCount=2.9 + 152d / 1024d;
break;
case 85:
bitRateCount=2.9 + 152d / 1024d;
break;
case 100:
bitRateCount=0.5 + 128d / 1024d;
break;
case 101:
bitRateCount=1 + 192d / 1024d;
break;
case 102:
bitRateCount=2 + 192d / 1024d;
break;
case 133:
bitRateCount=0.3 + 256d / 1024d;
break;
case 134:
bitRateCount=0.4 + 256d / 1024d;
break;
case 135:
bitRateCount=1 + 256d / 1024d;
break;
case 136:
bitRateCount=1.5 + 256d / 1024d;
break;
case 137:
bitRateCount=2.9 + 256d / 1024d;
break;
case 139:
bitRateCount=48d / 1024d;
break;
case 140:
bitRateCount=128d / 1024d;
break;
case 141:
bitRateCount=256d / 1024d;
break;
}
bitRateCount=bitRateCount * 1024 * 1024;
ret=(long)(Math.ceil((bitRateCount * durationInSecondi) / 8));
return ret;
}",433,5,"buildSize:wordSize,durationInSeconds:durationInSecondi,linfo:lninfo,result:ret,bitRateSum:bitRateCount,",500,3.33,ALERT
2392,,,60,1,,439,1.875767985979720,0
2393,"public void addDropItem(final String name,final double probability,final int min,final int max){
  dropsItems.add(new DropItem(name,probability,min,max));
}
","public void addMoveApp(final String name,final double proBability,final int mini,final int max){
  dropsItems.add(new DropItem(name,proBability,mini,max));
}
",39,5,"min:mini,probability:proBability,addDropItem:addMoveApp,",149,0.97,ALERT
2394,,,105,4,,1502,10.039138996601100,0
2395,,,40,2,,678,3.7037204027175900,0
2396,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawImage(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}","public boolean drawFrame(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawFrame(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}",206,8,"drawImage:drawFrame,",55,2.59,ALERT
2397,"public boolean isSourceModified(Resource resource){
  boolean modified=true;
  String fileName=resource.getName();
  String path=(String)templatePaths.get(fileName);
  File currentFile=null;
  for (int i=0; currentFile == null && i < paths.size(); i++) {
    String testPath=(String)paths.get(i);
    File testFile=new File(testPath,fileName);
    if (testFile.canRead()) {
      currentFile=testFile;
    }
  }
  File file=new File(path,fileName);
  if (currentFile == null || !file.exists()) {
  }
 else   if (currentFile.equals(file) && file.canRead()) {
    modified=(file.lastModified() != resource.getLastModified());
  }
  return modified;
}","public boolean isSourceModified(Resource source){
  boolean modified=true;
  String fileName=source.getName();
  String path=(String)templatePaths.get(fileName);
  File currentFile=null;
  for (int i=0; currentFile == null && i < paths.size(); i++) {
    String testPath=(String)paths.get(i);
    File testFile=new File(testPath,fileName);
    if (testFile.canRead()) {
      currentFile=testFile;
    }
  }
  File file=new File(path,fileName);
  if (currentFile == null || !file.exists()) {
  }
 else   if (currentFile.equals(file) && file.canRead()) {
    modified=(file.lastModified() != source.getLastModified());
  }
  return modified;
}",166,10,"resource:source,",64,0.47,ALERT
2398,,,53,2,,803,4.73251195748647,0
2399,"protected JavaElementDelta createDeltaTree(IJavaElement element,JavaElementDelta delta){
  JavaElementDelta childDelta=delta;
  ArrayList ancestors=getAncestors(element);
  if (ancestors == null) {
    if (equalsAndSameParent(delta.getElement(),getElement())) {
      this.kind=delta.kind;
      this.changeFlags=delta.changeFlags;
      this.movedToHandle=delta.movedToHandle;
      this.movedFromHandle=delta.movedFromHandle;
    }
  }
 else {
    for (int i=0, size=ancestors.size(); i < size; i++) {
      IJavaElement ancestor=(IJavaElement)ancestors.get(i);
      JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor);
      ancestorDelta.addAffectedChild(childDelta);
      childDelta=ancestorDelta;
    }
  }
  return childDelta;
}","protected JavaElementDelta getDeltaComponent(IJavaElement element,JavaElementDelta delta){
  JavaElementDelta childDelta=delta;
  ArrayList ancestors=getAncestors(element);
  if (ancestors == null) {
    if (equalsAndSameParent(delta.getElement(),getElement())) {
      this.kind=delta.kind;
      this.changeFlags=delta.changeFlags;
      this.movedToHandle=delta.movedToHandle;
      this.movedFromHandle=delta.movedFromHandle;
    }
  }
 else {
    for (int ori=0, sizesizeestors.sizesizeori < sisizeori++) {
      IJavaElement anancestorIJavaElement)ancestors.get(ori);
      JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor);
      ancestorDelta.addAffectedChild(childDelta);
      childDelta=ancestorDelta;
    }
  }
  return childDelta;
}",145,13,"createDeltaTree:getDeltaComponent,i:ori,",477,2.05,ALERT
2400,"public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
","public void showDroidsafeTextDrawer(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextDrawer(editor);
        }
      }
    }
  }
}
",180,8,"showDroidsafeTextMarkers:showDroidsafeTextDrawer,",61,0.42,ALERT
2401,"protected boolean needToRefetchData(){
  long now=System.currentTimeMillis();
  long last=lastDataFetchTime;
  if ((last + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}
","protected boolean needToRefaitAll(){
  long cycle=System.currentTimeMillis();
  long last=lastDataFrieveLength;
  if ((last + fetchIntervalMillis) < cycle) {
    lastDataFrieveLength=cycle;
    return true;
  }
  return false;
}
",43,4,"needToRefetchData:needToRefaitAll,now:cycle,lastDataFetchTime:lastDataFrieveLength,",117,1.31,ALERT
2402,,,24,2,,501,4.307351553440090,0
2403,"public static final void writeStringArrayXml(String[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,""null"");
    out.endTag(null,""null"");
    return;
  }
  out.startTag(null,""string-array"");
  if (name != null) {
    out.attribute(null,""name"",name);
  }
  final int N=val.length;
  out.attribute(null,""num"",Integer.toString(N));
  for (int i=0; i < N; i++) {
    out.startTag(null,""item"");
    out.attribute(null,""value"",val[i]);
    out.endTag(null,""item"");
  }
  out.endTag(null,""string-array"");
}","public static final void writeStringarrayYML(String[] ind,String name,XmlSerializer outer) throws XmlPullParserException, java.io.IOException {
  if (ind == null) {
    outer.startTag(null,""null"");
    outer.endTag(null,""null"");
    return;
  }
  outer.startTag(null,""string-array"");
  if (name != null) {
    outer.attribute(null,""name"",name);
  }
  final int Len=ind.length;
  outer.attribute(null,""num"",Integer.toString(Len));
  for (int i=d; i d Len; d++) {
    outer.startTag(null,""item"");
    outer.attribute(null,""value"",ind[d]);
    outer.endTag(null,""item"");
  }
  outer.endTag(null,""string-array"");
}
",164,6,"writeStringArrayXml:writeStringarrayYML,val:ind,out:outer,N:Len,i:d,",264,1.93,ALERT
2404,,,27,2,,792,6.396893592675530,0
2405,"public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pm.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
","public static Subject createAMIdentitysubject(PolicyManager fp,AMIdentity username) throws PolicyException {
  SubjectTypeManager mver=fp.getSubjectTypeManager();
  Subject ssqmver.getSubject(""AMIdentitySubject"");
  Set<String> settings=new HashSet<String>();
  set.settings(username.getUniversalId());
  sq.setValues(settings);
  return sq;
}
",69,6,"createAMIdentitySubject:createAMIdentitysubject,pm:fp,user:username,mgr:mver,subject:sq,set:settings,",660,6.18,ALERT
2406,"private Shape decodeEdge(int width,int height){
  path.reset();
  path.moveTo(width - 2,0);
  path.lineTo(width - 2,height - 4);
  path.lineTo(width - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}","private Shape decodeEdge(int name,int height){
  path.reset();
  path.moveTo(name - 2,0);
  path.lineTo(name - 2,height - 4);
  path.lineTo(name - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}",69,3,"width:name,",41,0.48,ALERT
2407,"public static String inflate(String name){
  return inflate(name,gPrefix);
}
","public static String inflate(String part){
  return inflate(part,gPrefix);
}
",18,2,"name:part,",36,0.38,ALERT
2409,"protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
","protected final StringBuilder push(StringBuilder bm,final Object... groups){
  for (  Objectcommentg : groups)   bm.append(comment);
  return bm;
}
",32,4,"write:push,sb:bm,objects:groups,string:comment,",235,2.48,ALERT
2410,"protected final void firePropertyChange(PropertyChangeEvent evt){
  pcs.firePropertyChange(evt);
}
","protected final void firepropertyChange(PropertyChangeEvent eve){
  pcs.firepropertyChange(eve);
}
",17,2,"firePropertyChange:firepropertyChange,evt:eve,",104,1.28,ALERT
2411,,,271,22,,7471,67.42624812523520,0
2412,"public void runCommercial(String stream,int length){
  if (stream == null || stream.isEmpty()) {
    commercialResult(stream,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel=""#"" + stream;
    if (isChannelOpen(channel)) {
      g.printLine(channel,""Trying to run "" + length + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" + length + ""s commercial.. (""+ stream+ "")"");
    }
    api.runCommercial(stream,settings.getString(""token""),length);
  }
}
","public void execProfessional(String filter,int length){
  if (filter == null || filter.isEmpty()) {
    commercialResult(filter,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel=""#"" + filter;
    if (isChannelOpen(channel)) {
      g.printLine(channel,""Trying to run "" + length + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" + length + ""s commercial.. (""+ filter+ "")"");
    }
    api.execProfessional(filter,settings.getString(""token""),length);
  }
}
",105,4,"stream:filter,runCommercial:execProfessional,",132,1.32,ALERT
2413,,,31,3,,1074,10.110738384723700,0
2414,"public static double normalPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}","public static double normPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}",76,5,"normalPDF:normPDF,",24,0.18,ALERT
2415,"private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}","private static void displayApplication(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}",242,14,"renderHandler:displayApplication,",72,4.28,ALERT
2416,"public static double[] parseVectorString(String vectorString){
  String[] parsedString=vectorString.split("","");
  double[] vector=new double[parsedString.length];
  for (int j=0; j < parsedString.length; j++) {
    double val=Utils.doubleParsable(parsedString[j]);
    vector[j]=Double.isNaN(val) ? 0 : val;
  }
  return vector;
}","public static double[] parseArrayStr(String VectorArray){
  String[]parsedSectiong=VectorArray.split("","");
  double[] vvarnew double[parsedSection.length];
  for (int jj0; jj< parsedSection.length; j++) {
    double vvalUtils.doubleParsable(parsedSection[j]);
    var[j]=Double.isNaN(val) ? 0 : val;
  }
  return var;
}",87,6,"parseVectorString:parseArrayStr,vectorString:VectorArray,parsedString:parsedSection,vector:var,",248,3.73,ALERT
2417,,,65,5,,1722,15.923099513848600,0
2418,"public void testBytesAsSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}","public void assertBytesToJSON() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int limit=50;
  int len=b.length;
  byte[] src=new byte[limit + len + limit];
  System.arraycopy(b,0,src,limit,len);
  JsonFactory jf=new JsonFactory();
  JsonParser bp=jf.createJsonParser(src,limit,len);
  assertToken(JsonToken.START_ARRAY,bp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,bp.nextToken());
  assertEquals(1,bp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,bp.nextToken());
  assertEquals(2,bp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,bp.nextToken());
  assertEquals(3,bp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,bp.nextToken());
  assertEquals(4,bp.getIntValue());
  assertToken(JsonToken.END_ARRAY,bp.nextToken());
  assertNull(bp.nextToken());
  bp.close();
}",227,8,"jp:bp,offset:limit,testBytesAsSource:assertBytesToJSON,",265,2.14,ALERT
2419,"private synchronized boolean startDequeue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (threads > 0);
}","private synchronized boolean startDequeue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread n=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(n);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread n=(ResourceThread)e.nextElement();
    n.go();
  }
  return (threads > 0);
}",114,6,"t:n,",47,0.48,ALERT
2421,,,12,3,,1135,12.559829318523400,0
2422,"public Perspective createUserPerspective(final String name,final boolean show){
  Perspective perspective=model.addPerspective(name,true);
  perspective.store(context);
  if (show) {
    showPerspective(name);
  }
  return perspective;
}
","public Perspective createUserPersistive(final String call,final boolean show){
  Perspective persactival=model.addPerspective(call,true);
  persactival.store(context);
  if (show) {
    showPerspective(call);
  }
  return persactival;
}
",47,4,"name:call,perspective:persactival,createUserPerspective:createUserPersistive,",124,1.14,ALERT
2424,"public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}","public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> oldPartions=new TreeSet<>();
  for (  Integer entry : positions) {
    int ion=entry;
    if (ion < startPosition || ion > endPosition) {
      oldPartions.add(ion);
    }
 else     if (adjustBy > 0) {
      oldPartions.add(ion + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (ion > startPosition + adjustBy && ion <= startPosition) {
        ;
      }
 else {
        oldPartions.add(ion + adjustBy);
      }
    }
  }
  return oldPartions;
}",128,8,"position:ion,newPositions:oldPartions,",123,1.3,ALERT
2425,"protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}","protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int depth) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hukdf=new HKDFBytesGenerator(new SHA256Digest());
  hukdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[depth];
  hukdf.generateBytes(okm,0,depth);
  return okm;
}",83,7,"length:depth,hkdf:hukdf,",78,0.84,ALERT
2426,"private static double parseDoubleValue(String parseString,String openTag,String closeTag,DataTypeValidationException exception) throws DataTypeValidationException {
  String tagValue;
  tagValue=parseStringValue(parseString,openTag,closeTag,exception);
  double doubleValue;
  try {
    doubleValue=Double.parseDouble(tagValue);
  }
 catch (  NumberFormatException e) {
    throw e;
  }
  return doubleValue;
}
","private static double parseStringString(String parseString,String openString,String openToken,DataTypeValidationException exception) throws DataTypeValidationException {
  String tagValue;
  tagVtagValueseStringValue(parseString,openString,openToken,exception);
  double numberUnit;
  try {
    numberUnit=Double.parseDouble(tagValue);
  }
 catch (  NumberFormatException e) {
    throw e;
  }
  return numberUnit;
}
",65,7,"parseDoubleValue:parseStringString,openTag:openString,closeTag:openToken,doubleValue:numberUnit,",314,3.04,ALERT
2427,"public LayoutBlock createNewLayoutBlock(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}
","public LayoutBlock createNewLayoutBlock(String systemName,String userName){
  LayoutBlock BL=null;
  if (userName == null || userName.equals("""")) {
    log.error(""Attempt to create a LayoutBlock with no user name"");
    return null;
  }
  BL=getByUserName(userName);
  if (BL != null) {
    return null;
  }
  String sName="""";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName=""ILB"" + blkNum;
      blkNum++;
      BL=getBySystemName(sName);
      if (BL == null) {
        found=false;
      }
    }
  }
 else {
    BL=getBySystemName((systemName.toUpperCase()));
    if (BL != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  BL=new LayoutBlock(sName,userName);
  register(BL);
  return BL;
}
",165,7,"block:BL,",62,0.59,ALERT
2428,"private synchronized void postEvent(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}
","private synchronized void preHandler(EventInfo EventInf){
  eventQueue.add(EventInf);
  notifyAll();
}
",21,2,"postEvent:preHandler,eventInfo:EventInf,",40,0.31,ALERT
2429,"long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}","long cleanup(long cmp){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,cmp) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=cmp - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}",186,9,"now:cmp,",62,0.98,ALERT
2430,"default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
","default Document putAll(Map<? extends CharSequence,Object> groups){
  if (groups != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : groups.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
",64,3,"fields:groups,",39,0.54,ALERT
2431,,,34,2,,808,6.3548925836881,0
2432,"protected void drawCenterText(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}","protected void createcenterData(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}",422,20,"drawCenterText:createcenterData,",97,0.61,ALERT
2433,"public final void addValidationError(String error){
  validationErrors.add(error);
}
","public final void addValidateFailure(String comment){
  validationErrors.add(comment);
}
",17,2,"error:comment,addValidationError:addValidateFailure,",54,0.4,ALERT
2434,"private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
","private static void resolveNewExpression(NewExpression objsubjectExpExp,HashSet<String> objTypesSet){
  ClassReference objClassRef=objsubjectExpExp.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
",63,4,"objSubjectExpression:objsubjectExpExp,",42,0.45,ALERT
2435,"private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}","private void heapifyup(int twropos,Comparable<Object> cur){
  while (twropos > 0) {
    final int peer=(twropos - 1) >>> 1;
    Comparable<Object> parse=twosheap[peer];
    if (cur.compareTo(parse) <= 0) {
      break;
    }
    twosheap[twropos]=parse;
    twropos=peer;
  }
  twosheap[twropos]=cur;
}",81,6,"twopos:twropos,parent:peer,par:parse,twoheap:twosheap,heapifyUp:heapifyup,",194,8.39,ALERT
2436,,,135,5,,1649,15.744291226069100,0
2437,,,17,1,,431,2.3424105644226100,0
2438,"public static int countMatches(String string,char c){
  int n=0;
  for (  char tc : string.toCharArray()) {
    if (c == tc)     n++;
  }
  return n;
}","public static int countMatcs(String list,char pointer){
  int ni=0;
  for (  chaLCtc : list.toCharArray()) {
    if (pointer == tLC     ni++;
  }
  return ni;
}",43,5,"countMatches:countMatcs,string:list,c:pointer,n:ni,tc:LC,",641,5.65,ALERT
2439,"private boolean checkMatchIp(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}","private boolean checkmatchIAddress(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}",158,5,"checkMatchIp:checkmatchIAddress,",44,0.43,ALERT
2440,"@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}","@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAttp,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime clock=ScePspDateTime.fromMicros(ticks);
  clock.write(timeAttp);
  return 0;
}",54,5,"timeAddr:timeAttp,time:clock,",71,1.93,ALERT
2441,"public DefaultHeatMapDataset(int xSamples,int ySamples,double minX,double maxX,double minY,double maxY){
  if (xSamples < 1) {
    throw new IllegalArgumentException(""Requires \'xSamples\' > 0"");
  }
  if (ySamples < 1) {
    throw new IllegalArgumentException(""Requires \'ySamples\' > 0"");
  }
  if (Double.isInfinite(minX) || Double.isNaN(minX)) {
    throw new IllegalArgumentException(""\'minX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(maxX) || Double.isNaN(maxX)) {
    throw new IllegalArgumentException(""\'maxX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(minY) || Double.isNaN(minY)) {
    throw new IllegalArgumentException(""\'minY\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(maxY) || Double.isNaN(maxY)) {
    throw new IllegalArgumentException(""\'maxY\' cannot be INF or NaN."");
  }
  this.xSamples=xSamples;
  this.ySamples=ySamples;
  this.minX=minX;
  this.maxX=maxX;
  this.minY=minY;
  this.maxY=maxY;
  this.zValues=new double[xSamples][];
  for (int x=0; x < xSamples; x++) {
    this.zValues[x]=new double[ySamples];
  }
}","public DefaultHeatMapDataset(int xSuipes,int ysases,double MinWidth,double sumXL,double MinX,double axX){
  if (xSuipes < 1) {
    throw new IllegalArgumentException(""Requires \'xSamples\' > 0"");
  }
  if (ysases < 1) {
    throw new IllegalArgumentException(""Requires \'ySamples\' > 0"");
  }
  if (Double.isInfinite(MinWidth) || Double.isNaN(MinWidth)) {
    throw new IllegalArgumentException(""\'minX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(sumXL) || Double.isNaN(sumXL)) {
    throw new IllegalArgumentException(""\'maxX\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(MinX) || Double.isNaN(MinX)) {
    throw new IllegalArgumentException(""\'minY\' cannot be INF or NaN."");
  }
  if (Double.isInfinite(axX) || Double.isNaN(axX)) {
    throw new IllegalArgumentException(""\'maxY\' cannot be INF or NaN."");
  }
  this.xSuipes=xSuipes;
  this.ysases=ysases;
  this.MinWidth=MinWidth;
  this.sumXL=sumXL;
  this.MinX=MinX;
  this.axX=axX;
  thisyValuess=new double[xSuipes][];
  for (inttxx=0;txx < xSuipes; tx++) {
    thiyValuesetx[x]=new double[ysases];
  }
}",230,8,"xSamples:xSuipes,ySamples:ysases,minX:MinWidth,maxX:sumXL,minY:MinX,maxY:axX,zValues:yValues,x:tx,",1383,23.08,ALERT
2442,,,20,2,,424,3.6109156966209400,0
2443,,,27,2,,750,6.054673727353410,0
2446,"protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}","protected final boolean readAvailableQuocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int w;
  while ((w=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,w);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}",102,6,"n:w,readAvailableBlocking:readAvailableQuocking,",164,1.18,ALERT
2447,,,141,6,,2152,25.819959461689000,0
2448,,,66,3,,502,6.979010872046150,0
2449,"final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void exit(String site){
  Writer cli=this.cli;
  if (cli == null)   return;
  try {
    if (site == null)     cli.write(_nullChars,0,_nullChars.length);
 else     cli.write(site,0,site.length());
    cli.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",100,3,"out:cli,s:site,println:exit,",98,0.82,ALERT
2450,"protected boolean isCorrectMethod(Method method,Object[] args){
  return (proxySignature.equals(method.getName()) && args.length == 1);
}","protected boolean iscorrectFunction(Method full,Object[] args){
  return (proxySignature.equals(full.getName()) && args.length == 1);
}",34,2,"method:full,isCorrectMethod:iscorrectFunction,",57,0.54,ALERT
2451,,,24,1,,430,3.108737277984620,0
2452,"protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}","protected static int[] mercat(@Nullable int[] ext,int... object){
  int[] newTrrs;
  if (ext == null || ext.length == 0)   newnewTrrsject;
 else {
    newnewTrrsrays.copyOf(ext,ext.length + object.length);
    System.arraycopy(object,0,newnewTrrst.length,object.length);
  }
  return newTrrs;
}",83,4,"concat:mercat,arr:ext,obj:object,newArr:newTrrs,",228,3.43,ALERT
2453,"public boolean startsWith(CharSeq prefix){
  return str.startsWith(prefix.str);
}
","public boolean stavesWith(CharSeq prefix){
  return str.stavesWith(prefix.str);
}
",19,2,"startsWith:stavesWith,",36,0.31,ALERT
2454,"private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitelist ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : templateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : templateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}","private Integer countFragmentFilteredPages(List<String> templateTerment,boolean whitestyle) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement storage=null;
    ResultSet comment=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitestyle ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String Fraggment : templateTerment) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      storage=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String Fraggment : templateTerment) {
        Fraggment=Fraggment.toLowerCase();
        Fraggment=Fraggment.trim();
        Fraggment=Fraggment.replaceAll("" "",""_"");
        storage.setString(curIdx++,Fraggment + ""%"");
      }
      comment=execute(storage);
      if (comment == null) {
        return 0;
      }
      if (comment.next()) {
        count=comment.getInt(1);
      }
    }
  finally {
      if (storage != null) {
        storage.close();
      }
      if (comment != null) {
        comment.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}",288,10,"fragment:Fraggment,result:comment,statement:storage,templateFragments:templateTerment,whitelist:whitestyle,",285,2.84,ALERT
2455,"public static void threadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
","public static void threadSleep(long milas){
  try {
    Thread.sleep(milas);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
",41,2,"millis:milas,",26,0.28,ALERT
2456,"@Override public void keyPressed(KeyEvent e){
synchronized (keyLock) {
    keysDown.add(e.getKeyCode());
  }
}
","@Override public void keyPalled(KeyEvent es){
synchronized (keyLock) {
    keysDown.add(es.getKeyCode());
  }
}
",28,2,"keyPressed:keyPalled,e:es,",350,3.47,ALERT
2457,"public void rollback(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
","public void RollBACK(Throwable tt){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ tt);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    tt.addSuppressed(e);
  }
}
",48,2,"rollback:RollBACK,t:tt,",88,0.68,ALERT
2458,"public static boolean isZoningRequired(DbClient dbClient,VirtualArray nh){
  if (nh.getAutoSanZoning() == false) {
    _log.info(""SAN Zoning is not enabled for Neighborhood: "" + nh.getLabel());
    return false;
  }
  return NetworkUtil.areNetworkSystemDiscovered(dbClient);
}
","public static boolean isZoningNeed(DbClient databaseFactory,VirtualArray Nrh){
  if (Nrh.getAutoSanZoning() == false) {
    _log.info(""SAN Zoning is not enabled for Neighborhood: "" + Nrh.getLabel());
    return false;
  }
  return NetworkUtil.areNetworkSystemDiscovered(databaseFactory);
}
",49,3,"isZoningRequired:isZoningNeed,dbClient:databaseFactory,nh:Nrh,",771,10.1,ALERT
2459,"public static Date parseText(String dateStr){
  try {
    return mSimpleTextFormat.parse(dateStr);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
","public static Date parseText(String dayObj){
  try {
    return mSimpleTextFormat.parse(dayObj);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException(""date formatDateTime error"");
  }
}
",41,2,"dateStr:dayObj,",41,0.36,ALERT
2460,"int maxLength(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}","int maxLength(){
  FontMetrics fm=getFontMetrics(getFont());
  int gm=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int lt=fm.stringWidth(((String)items.elementAt(i)));
    gm=Math.max(gm,lt);
  }
  return gm;
}",80,6,"l:lt,m:gm,",107,1.18,ALERT
2461,"public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}
","public static boolean compareresults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareresults(controlClient,cloudClient,null,null);
}
",29,3,"compareResults:compareresults,",38,0.6,ALERT
2462,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
","@Override public boolean onPreferenceClick(Preference interferred){
  if (interferred == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
",29,2,"preference:interferred,",34,0.4,ALERT
2463,"private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
","private synchronized void persistObjectAndNotifyingChanged(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
",51,3,"persistProfileAndNotifyChange:persistObjectAndNotifyingChanged,",27,0.66,ALERT
2464,"public boolean unsetOrdering(Object first,Object second){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}
","public boolean unsetOrdering(Object first,Object second){
  DigraphNode firstNONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstNONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstNONode);
}
",53,5,"firstPONode:firstNONode,",43,0.35,ALERT
2465,"int convertMouse(MouseEvent event){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=event.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=event.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
","int conpectmouse(MouseEvent other){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=other.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=other.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
",164,9,"convertMouse:conpectmouse,event:other,",98,3.75,ALERT
2466,,,110,6,,2187,41.26471149126690,0
2467,,,507,12,,3721,66.39040225346880,0
2468,"private static StsdData parseStsd(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}","private static StsdData parseSssl(ParsableByteArray ilsdf,int videoPath,long distanceMu,int rotationDegutes,String license,boolean isGoodStyle){
  ilsdf.setPosition(Atom.FULL_HEADER_SIZE);
  int nnumberOfOrdientsilsdf.readInt();
  StsdData oreadernew StsdData(numberOfOrdients);
  for (int iuni0; iuni< numberOfOrdients; uni++) {
    int cchildStartPositionilsdf.getPosition();
    int cchildAtOMLengthilsdf.readInt();
    Assertions.checkArgument(childAtOMLength > 0,""childAtomSize should be positive"");
    int cchildAtoSizeilsdf.readInt();
    if (childAtoSize == Atom.TYPE_avc1 || childAtoSize == Atom.TYPE_avc3 || childAtoSize == Atom.TYPE_encv || childAtoSize == Atom.TYPE_mp4v || childAtoSize == Atom.TYPE_hvc1 || childAtoSize == Atom.TYPE_hev1 || childAtoSize == Atom.TYPE_s263 || childAtoSize == Atom.TYPE_vp08 || childAtoSize == Atom.TYPE_vp09) {
      parseVideoSampleEntry(ilsdf,childAtomchildAtoSizehildStartPositiontchildAtOMLengthath,distanceMu,rotationDegutes,reader,uni);
    }
 else     if (childAtoSize == Atom.TYPE_mp4a || childAtoSize == Atom.TYPE_enca || childAtoSize == Atom.TYPE_ac_3 || childAtoSize == Atom.TYPE_ec_3 || childAtoSize == Atom.TYPE_dtsc || childAtoSize == Atom.TYPE_dtse || childAtoSize == Atom.TYPE_dtsh || childAtoSize == Atom.TYPE_dtsl || childAtoSize == Atom.TYPE_samr || childAtoSize == Atom.TYPE_sawb || childAtoSize == Atom.TYPE_lpcm || childAtoSize == Atom.TYPE_sowt) {
      parseAudioSampleEntry(ilsdf,childAtochildAtoSizehildStartPositionAchildAtOMLengthPath,distanceMu,license,isGoodStyle,reader,uni);
    }
 else     if (childAtoSize == Atom.TYPE_TTML) {
      oreadermediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,distanceMu,license);
    }
 else     if (childAtoSize == Atom.TYPE_tx3g) {
      oreadermediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,distanceMu,license);
    }
 else     if (childAtoSize == Atom.TYPE_wvtt) {
      oreadermediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,distanceMu,license);
    }
 else     if (childAtoSize == Atom.TYPE_stpp) {
      oreadermediaFormat=MediaFormat.createTextFormat(Integer.toString(videoPath),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,distanceMu,license,0);
    }
    ilsdf.setPosition(childStartPosition + childAtOMLength);
  }
  return reader;
}",455,13,"parseStsd:parseSssl,stsd:ilsdf,trackId:videoPath,durationUs:distanceMu,rotationDegrees:rotationDegutes,language:license,isQuickTime:isGoodStyle,numberOfEntries:numberOfOrdients,out:reader,i:uni,childAtomSize:childAtOMLength,childAtomType:childAtoSize,",790,7.34,ALERT
2469,"public void resetTeleMissileAttacks(){
  pendingTeleMissileAttacks.removeAllElements();
}
","public void resetTeleMissileArtack(){
  pendingTeleMissileAttacks.removeAllElements();
}
",13,1,"resetTeleMissileAttacks:resetTeleMissileArtack,",26,0.22,ALERT
2470,"void addNewTable(String name,int tdefPageNumber,Short type,String linkedDbName,String linkedTableName) throws IOException {
  addTable(name,Integer.valueOf(tdefPageNumber),type,linkedDbName,linkedTableName);
  addToSystemCatalog(name,tdefPageNumber,type,linkedDbName,linkedTableName,_tableParentId);
  addToAccessControlEntries(tdefPageNumber,_tableParentId,_newTableSIDs);
}
","void addAddType(String version,int tdefNextCount,Short types,String linkedDbType,String linkedDbPath) throws IOException {
  addTable(version,Integer.valueOf(tdefNextCount),types,linkedDbType,linkedDbPath);
  addToSystemCatalog(version,tdefNextCount,types,linkedDbType,linkedDbPath,_tableParentId);
  addToAccessControlEntries(tdefNextCount,_tableParentId,_newTableSIDs);
}
",64,6,"addNewTable:addAddType,name:version,tdefPageNumber:tdefNextCount,type:types,linkedDbName:linkedDbType,linkedTableName:linkedDbPath,",1844,15.39,ALERT
2471,"public void characters(char ch[],int start,int length) throws SAXException {
  m_valueBuffer.append(ch,start,length);
}
","public void characteracters(char enc[],int start,int length) throws SAXException {
  m_valueBuffer.append(enc,start,length);
}
",30,4,"characters:characteracters,ch:enc,",49,0.74,ALERT
2472,,,23,1,,437,4.132377835114800,0
2473,"private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
","private void validateWill(String dest,Object payloader){
  if ((dest == null) || (payloader == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
",43,3,"payload:payloader,",36,0.31,ALERT
2474,,,30,4,,942,16.975420633951800,0
2475,"public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
","public void executed(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
",30,2,"execute:executed,",31,0.2,ALERT
2476,"protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
","protected void notifyStateChange(int lowSTATE,int newstate){
  mState=newstate;
  if (lowSTATE != newstate) {
    firePropertyChange(""KnownState"",Integer.valueOf(lowSTATE),Integer.valueOf(newstate));
  }
}
",43,4,"newState:newstate,oldState:lowSTATE,",70,0.83,ALERT
2477,"public Channel chan(final String topic,final JsonNode payload){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{topic,payload});
  final Channel channel=new Channel(topic,payload,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}","public Channel connection(final String format,final JsonNode payload){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{format,payload});
  final Channel socket=new Channel(format,payload,Socket.this);
synchronized (channels) {
    channels.add(socket);
  }
  return socket;
}",67,4,"channel:socket,topic:format,chan:connection,",128,1.0,ALERT
2478,,,20,1,,428,2.9549899617830900,0
2479,"@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
","@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream obo) throws Exception {
  Kryo krigos=new Kryo();
  Input lInput=new Input(obo.toByteArray());
  LineByLineFileInputOperator oper=krigos.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
",70,6,"bos:obo,kryo:krigos,",74,0.73,ALERT
2480,"public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}","public void step(String ee,char Val){
  intlitn=ee.length() + 1;
  if (freenode + lit > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char templink[]=new char[lit--];
  ee.getChars(0,lit,templink,0);
  templink[lit]=0;
  prefix=step(roprefixemplink,0,Val);
}",89,6,"insert:step,key:ee,val:Val,len:lit,strkey:templink,root:prefix,",382,3.35,ALERT
2481,,,89,4,,1481,9.608014702796940,0
2482,"private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}","private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCCFF=false;
  if (value != null) {
    useCCFF=Boolean.parseBoolean(value.trim());
  }
  return useCCFF;
}",72,4,"useCFF:useCCFF,",42,0.59,ALERT
2483,"@Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public void se(InputStream parent,String basicPath) throws IOException, RDFParseException, RDFHandlerException {
  if (parent == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (basicPath == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inpuinputFlow InputSource(new BOMInputStream(parent,false));
  ininputFlowetSystemId(basicPath);
  se(inputFlow);
}
",77,4,"parse:se,in:parent,baseURI:basicPath,inputSource:inputFlow,",182,1.61,ALERT
2484,,,19,1,,450,3.706332576274870,0
2485,"public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
","public void validateiterator() throws InterruptedException {
  LinkedBlockingQueue sq=populatedQueue(SIZE);
  Iterator ant=sq.iterator();
  while (ant.hasNext()) {
    assertEquals(ant.next(),sq.take());
  }
}
",51,3,"q:sq,it:ant,testIterator:validateiterator,",80,0.62,ALERT
2486,"private void addPropertyType(URI p,Resource t){
  OwlProperty prop=getProperty(p);
  if (t.equals(OWL.TRANSITIVEPROPERTY)) {
    prop.setTransitive();
  }
 else   if (t.equals(OWL.SYMMETRICPROPERTY)) {
    prop.setSymmetric();
  }
 else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {
    prop.setAsymmetric();
  }
 else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {
    prop.setFunctional();
  }
 else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    prop.setInverseFunctional();
  }
 else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    prop.setIrreflexive();
  }
}","private void getPropertyTypes(URI e,Resource w){
  OwlProperty fb=getProperty(e);
  if (w.equals(OWL.TRANSITIVEPROPERTY)) {
    fb.setTransitive();
  }
 else   if (w.equals(OWL.SYMMETRICPROPERTY)) {
    fb.setSymmetric();
  }
 else   if (w.equals(OWL2.ASYMMETRICPROPERTY)) {
    fb.setAsymmetric();
  }
 else   if (w.equals(OWL.FUNCTIONALPROPERTY)) {
    fb.setFunctional();
  }
 else   if (w.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    fb.setInverseFunctional();
  }
 else   if (w.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    fb.setIrreflexive();
  }
}",139,4,"addPropertyType:getPropertyTypes,p:e,t:w,prop:fb,",374,4.48,ALERT
2487,"static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
","static float rotatA(float tY,float pY,float cX,float cNY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (tY - cX) + Math.cos(angle) * (pY - cNY) + cNY);
}
",65,7,"cY:cNY,pX:tY,rotateY:rotatA,",190,2.25,ALERT
2488,"void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}","void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_mask.length];
  for (int i=0; i < m_mask.length; i++) {
    bits[i]=m_mask[i];
  }
  int iCrossOverPoint=m_mask.length;
  do {
    for (int i=iCrossOverPoint; i < m_mask.length; i++) {
      m_mask[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_mask.length);
    for (int i=iCrossOverPoint; i < m_mask.length; i++) {
      m_mask[i]=other.m_mask[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}",139,6,"m_bits:m_mask,",67,2.57,ALERT
2489,"public void shutdown(){
  scheduledExecutorService.shutdownNow();
}
","public void downdown(){
  scheduledExecutorService.shutdownNow();
}
",13,1,"shutdown:downdown,",17,0.1,ALERT
2490,,,36,3,,1118,11.352292092641200,0
2491,,,40,3,,711,7.018111018339790,0
2492,,,21,2,,796,8.597614880402880,0
2493,,,91,5,,1622,14.452037092049900,0
2494,"@Override public void onEvent(ProjectEvent event){
  if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) {
    update(event);
  }
}
","@Override public void handleEvents(ProjectEvent ee){
  if (ee.getType() == ProjectEvent.EventType.UPDATED || ee.getType() == ProjectEvent.EventType.CREATED) {
    update(ee);
  }
}
",44,2,"onEvent:handleEvents,event:ee,",51,0.38,ALERT
2495,"public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}","public static final void showGUISontent(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel play=new ImagePanel(image);
  play.setLayout(new BorderLayout());
  if (user_message != null) {
    play.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  play.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,play,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}",129,7,"display:play,showGUIMessage:showGUISontent,",225,3.17,ALERT
2496,,,161,8,,2459,27.467693710327100,0
2497,"protected static String shortenClassname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}","protected static String shortenClassname(String iam,char cr){
  final int lastdot=iam.lastIndexOf(cr);
  if (lastdot >= 0) {
    iam=iam.substring(lastdot + 1);
  }
  return iam;
}",46,4,"c:cr,nam:iam,",102,0.93,ALERT
2498,"public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public ResourceListParser create() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.create(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:create,",42,0.24,ALERT
2499,"public static double quantile(double p,double alpha,double beta){
  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));
  }
 else {
    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));
  }
}","public static double quantiles(double p,double alpha,double bp){
  if (Double.isNaN(alpha) || Double.isNaN(bp) || Double.isNaN(p)|| alpha < 0. || bp < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,bp,alpha,logBeta(bp,alpha));
  }
 else {
    return rawQuantile(p,alpha,bp,logBeta(alpha,bp));
  }
}",142,4,"quantile:quantiles,beta:bp,",100,4.37,ALERT
2500,"protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(x,y,r,h4);
    g.drawLine(x,y + h2,x,y + h - h2);
    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);
    g.drawArc(x,y + h - h4,r,h4,0,-180);
  }
}","protected void drawCyler(int ph,int y,int sw,int ih,Color fillColor,Paint fillCaint,Color penColor,boolean isShadow){
  int hw04ih / 4;
  int resw - 1;
  if (fillColor != null || fillCaint != null) {
    Area areaaf Area(new Rectangle(ph,y + hw04/ 2,r,eh - w04));
    areaaf(new Area(new Rectangle(ph,y + hw04/ 2,r,eh - w04)));
    arafdd(new Area(new Ellipse2D.Double(ph,y,rew04)));
    areaaf(new Area(new Ellipse2D.Double(ph,y + ih - w04,rew04)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(af);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillCaint != null) {
      g.setPaint(fillCaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(af);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int hh1w04 / 2;
    g.drawOval(ph,y,rew04);
    g.drawLine(ph,yy+ h2h1h,y + ih - h1);
    g.drawLine(ph + wsw- 1,yy+ h2,h1 + sw - 1,y + ih - h1);
    g.drawArc(ph,y + ih - w04,rew04,0,-180);
  }
}",343,13,"drawCylinder:drawCyler,x:ph,w:sw,h:ih,fillPaint:fillCaint,h4:w04,r:e,area:af,h2:h1,",628,5.42,ALERT
2501,,,25,2,,812,13.51579422156020,0
2502,,,69,3,,1122,13.64851537545520,0
2503,"private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
","private static MappingObject ObjectFrom(PCalLocation log,MappingObject[][] block){
  return block[log.getLine()][log.getColumn()];
}
",34,3,"ObjectAt:ObjectFrom,loc:log,map:block,",184,2.61,ALERT
2504,,,48,6,,2002,16.607363585631100,0
2505,,,26,1,,407,3.9834351976712500,0
2506,,,169,6,,1981,30.95793245236080,0
2507,"private boolean passesSanityCheck(AccessibilityEvent event){
  final CharSequence afterText=getEventText(event);
  final CharSequence beforeText=event.getBeforeText();
  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {
    return true;
  }
  if (afterText == null || beforeText == null) {
    return false;
  }
  final int diff=(event.getAddedCount() - event.getRemovedCount());
  return ((beforeText.length() + diff) == afterText.length());
}","private boolean passesSanityCheck(AccessibilityEvent event){
  final CharSequence nextPart=getEventText(event);
  final CharSequence beforeText=event.getBeforeText();
  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {
    return true;
  }
  if (nextPart == null || beforeText == null) {
    return false;
  }
  final int diff=(event.getAddedCount() - event.getRemovedCount());
  return ((beforeText.length() + diff) == nextPart.length());
}",111,5,"afterText:nextPart,",49,1.98,ALERT
2508,"public static void delete(File fileOrFolder) throws IOException {
  if (fileOrFolder != null)   delete(fileOrFolder.toPath());
}
","public static void Delete(File fileorDir) throws IOException {
  if (fileorDir != null)   Delete(fileorDir.toPath());
}
",27,2,"delete:Delete,fileOrFolder:fileorDir,",67,0.98,ALERT
2509,,,30,6,,1996,16.592395106951400,0
2510,,,22,2,,750,7.960625088214870,0
2511,"ConverterSet add(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}","ConverterSet diff(Converter converter,Converter[] promigrated){
  Converter[] Converations=iConverters;
  int lelengthonverations.length;
  for (int i=0; i < length; i++) {
    Converter exexistingonverations[i];
    if (converter.equals(existing)) {
      if (promigrated != null) {
        promigrated[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] map=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          comap]jConverations[j];
        }
 else {
          map[j]=converter;
        }
      }
      if (promigrated != null) {
        promigrated[0]=existing;
      }
      return new ConverterSet(map);
    }
  }
  Converter[] map=new Converter[length + 1];
  System.arraycopy(Converations,0,map,0,length);
  map[length]=converter;
  if (promigrated != null) {
    promigrated[0]=null;
  }
  return new ConverterSet(map);
}",230,9,"add:diff,removed:promigrated,converters:Converations,copy:map,",378,5.4,ALERT
2512,"private T[] ensureCapacity(int minCapacity){
  if (tmp.length < minCapacity) {
    int newSize=minCapacity;
    newSize|=newSize >> 1;
    newSize|=newSize >> 2;
    newSize|=newSize >> 4;
    newSize|=newSize >> 8;
    newSize|=newSize >> 16;
    newSize++;
    if (newSize < 0)     newSize=minCapacity;
 else     newSize=Math.min(newSize,a.length >>> 1);
    T[] newArray=(T[])new Object[newSize];
    tmp=newArray;
  }
  return tmp;
}","private T[] ensureAcSize(int minPerity){
  if (temp.length < minPerity) {
    int sameLine=minPerity;
    sameLine|=sameLine >> 1;
    sameLine|=sameLine >> 2;
    sameLine|=sameLine >> 4;
    sameLine|=sameLine >> 8;
    sameLine|=sameLine >> 16;
    sameLine++;
    if (sameLine < 0)     sameLine=minPerity;
 else     sameLine=Math.min(sameLine,a.length >>> 1);
    T[] newArray=(T[])new Object[sameLine];
    temp=newArray;
  }
  return temp;
}",115,5,"newSize:sameLine,minCapacity:minPerity,tmp:temp,ensureCapacity:ensureAcSize,",164,3.0,ALERT
2513,"private File findFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
","private File FindDirectory(File category,String NAME) throws FileNotFoundException {
  Filefoldere=new File(category,NAME);
  if (folder.exists()) {
    return folder;
  }
  for (  Stringkidd : category.list()) {
    if (kid.equalsIgnoreCase(NAME)) {
      return new File(category,kid);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + folder);
}
",80,5,"findFile:FindDirectory,directory:category,name:NAME,file:folder,child:kid,",669,6.17,ALERT
2514,,,63,3,,1118,9.502404507001240,0
2515,,,36,1,,451,3.949906059106190,0
2517,"public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}","public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnations;
  int index=recordedAnations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}",446,7,"recordedAnnotations:recordedAnations,",105,2.57,ALERT
2518,,,127,8,,2776,22.606369372208900,0
2519,"public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
","public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> reversiblevolums=volumes(volumes,delete,remediate,checks);
  for (  Volume mount : reversiblevolums) {
    remediatedURIs.add(mount.getId());
  }
  return remediatedURIs;
}
",96,9,"volume:mount,remediatedVolumes:reversiblevolums,",136,1.81,ALERT
2520,"public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
","public static void start(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
",70,2,"init:start,",66,0.66,ALERT
2521,"public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
","public void storage() throws SAMLException {
  try {
    keyProvider.storage();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
",90,1,"store:storage,",34,0.3,ALERT
2522,"static public String normalizeToEncoding(String origString_,Charset encoding_){
  String normString=origString_;
  CharsetEncoder encoder=encoding_.newEncoder();
  if (!encoder.canEncode(origString_)) {
    final int length=origString_.length();
    char[] normSeq=new char[(origString_.length())];
    int charNum=0;
    for (int offset=0; offset < length; ) {
      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);
      Character replacedChar=replacement.getFirst();
      int codepoint=replacement.getSecond();
      if (null != replacedChar) {
        normSeq[charNum]=replacedChar;
        charNum++;
      }
      offset+=Character.charCount(codepoint);
    }
    normString=new String(normSeq);
  }
  return normString;
}","static public String normalizeToEnccode(String origArray_,Charset encoding___){
  StringnormArrayg=origArray_;
  CharsetEncoder enEncodingncoding___.newEncoder();
  if (Encodingr.canEncode(origArray_)) {
    final intdepthh=origArray_.depth();
    char[NormReqeq=new char[(origArray_.depth())];
    int characterNo=0;
    for (intaddrt=0;addrt < depth; ) {
      Pair<Character,Integer>relignmentt=normalizeCodepoint(origArray_,encoding___,addr);
      CharacterreplaceCharr=relignment.getFirst();
      intcodeepertt=relignment.getSecond();
      if (null != replaceChar) {
        NormReq[characterNo]=replaceChar;
        characterNo++;
      }
      addr+=Character.charCount(codeepert);
    }
    normArray=new String(NormReq);
  }
  return normArray;
}",158,12,"normalizeToEncoding:normalizeToEnccode,origString_:origArray_,encoding_:encoding___,normString:normArray,encoder:Encoding,length:depth,normSeq:NormReq,charNum:characterNo,offset:addr,replacement:relignment,replacedChar:replaceChar,codepoint:codeepert,",1234,15.78,ALERT
2523,"static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
","static boolean ShowTipup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
",60,2,"allowsPopup:ShowTipup,",29,0.33,ALERT
2524,"public void onEnterElementConsumed(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
","public void onEnterElementPresumed(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
",52,7,"onEnterElementConsumed:onEnterElementPresumed,",30,0.38,ALERT
2525,"public void testSplitEscapedSemicolons(){
  Properties inner=PropertyUtils.splitPropertiesOnSemicolon(PropertyUtils.escapeBackSlashesIfNotNull(""foo=bar;baz=blorple\\\\;zot;windows=c:\\\\test;glorg=gluux""));
  assertEquals(4,inner.size());
  assertEquals(""bar"",inner.getProperty(""foo""));
  assertEquals(""blorple;zot"",inner.getProperty(""baz""));
  assertEquals(""gluux"",inner.getProperty(""glorg""));
  assertEquals(""c:\\\\test"",inner.getProperty(""windows""));
}","public void assertSplitEscapedSemicollon(){
  Properties outside=PropertyUtils.splitPropertiesOnSemicolon(PropertyUtils.escapeBackSlashesIfNotNull(""foo=bar;baz=blorple\\\\;zot;windows=c:\\\\test;glorg=gluux""));
  assertEquals(4,outside.size());
  assertEquals(""bar"",outside.getProperty(""foo""));
  assertEquals(""blorple;zot"",outside.getProperty(""baz""));
  assertEquals(""gluux"",outside.getProperty(""glorg""));
  assertEquals(""c:\\\\test"",outside.getProperty(""windows""));
}",81,2,"inner:outside,testSplitEscapedSemicolons:assertSplitEscapedSemicollon,",63,1.22,ALERT
2526,,,206,11,,3883,41.20517670313520,0
2527,,,34,3,,1042,16.685423481464400,0
2528,"public void rectangle(double x,double y,double halfWidth,double halfHeight){
  if (halfWidth < 0)   throw new IllegalArgumentException(""half width can\'t be negative"");
  if (halfHeight < 0)   throw new IllegalArgumentException(""half height can\'t be negative"");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * halfWidth);
  double hs=factorY(2 * halfHeight);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}","public void roundangular(double x,double ya,double fairWidth,double halfH){
  if (fairWidth < 0)   throw new IllegalArgumentException(""half width can\'t be negative"");
  if (halfH < 0)   throw new IllegalArgumentException(""half height can\'t be negative"");
  double inches=scaleX(x);
  double yysscaleY(ya);
  double rw=factorX(2 * fairWidth);
  dohyle hs=factorY(2 * halfH);
  if (wrw<= 1 && hhy<= 1)   pixel(x,ya);
 else   offscreen.draw(new Rectangle2D.Double(inches - rw / 2,ys - hy / 2,rw,hy));
  draw();
}",129,9,"rectangle:roundangular,y:ya,halfWidth:fairWidth,halfHeight:halfH,xs:inches,ws:rw,hs:hy,",449,5.99,ALERT
2529,,,58,2,,794,7.173208053906760,0
2530,"protected boolean updateAttachmentPoint(){
  boolean moved=false;
  this.oldAPs=attachmentPoints;
  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;
  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
  if (attachmentPoints != null)   apList.addAll(attachmentPoints);
  Map<Long,AttachmentPoint> newMap=getAPMap(apList);
  if (newMap == null || newMap.size() != apList.size()) {
    moved=true;
  }
  if (moved) {
    log.info(""updateAttachmentPoint: ap {}  newmap {} "",attachmentPoints,newMap);
    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();
    if (newMap != null)     newAPList.addAll(newMap.values());
    this.attachmentPoints=newAPList;
  }
  return moved;
}
","protected boolean updateAttachedType(){
  boolean moved=false;
  this.oldAPs=attachmentPoints;
  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;
  List<AttachmentPoint> apiMap=new ArrayList<AttachmentPoint>();
  if (attachmentPoints != null)   apiMap.addAll(attachmentPoints);
  Map<Long,AttachmentPoint> newMap=getAPMap(apiMap);
  if (newMap == null || newMap.size() != apiMap.size()) {
    moved=true;
  }
  if (moved) {
    log.info(""updateAttachmentPoint: ap {}  newmap {} "",attachmentPoints,newMap);
    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();
    if (newMap != null)     newAPList.addAll(newMap.values());
    this.attachmentPoints=newAPList;
  }
  return moved;
}
",154,7,"apList:apiMap,updateAttachmentPoint:updateAttachedType,",111,1.02,ALERT
2531,"public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentage){
  float tmpFinishedPercentage=0;
switch (rolloutGroup.getStatus()) {
case READY:
case SCHEDULED:
case ERROR:
    tmpFinishedPercentage=0.0F;
  break;
case FINISHED:
tmpFinishedPercentage=100.0F;
break;
case RUNNING:
tmpFinishedPercentage=finishedPercentage;
break;
default :
break;
}
return String.format(""%.1f"",tmpFinishedPercentage);
}","public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentade){
  float tmpFinishedPercentage=0;
switch (rolloutGroup.getStatus()) {
case READY:
case SCHEDULED:
case ERROR:
    tmpFinishedPercentage=0.0F;
  break;
case FINISHED:
tmpFinishedPercentage=100.0F;
break;
case RUNNING:
tmpFinishedPercentage=finishedPercentade;
break;
default :
break;
}
return String.format(""%.1f"",tmpFinishedPercentage);
}",77,4,"finishedPercentage:finishedPercentade,",42,1.0,ALERT
2532,"@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){
  int visibleRow=state.getVisibleSeriesIndex(row);
  if (visibleRow < 0) {
    return;
  }
  Number dataValue=dataset.getValue(row,column);
  if (dataValue == null) {
    return;
  }
  double value=dataValue.doubleValue();
  PlotOrientation orientation=plot.getOrientation();
  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double barL=rangeAxis.valueToJava2D(value,dataArea,edge);
  Line2D line;
  double x, y;
  if (orientation.isHorizontal()) {
    x=barL;
    y=barW0 + state.getBarWidth() / 2.0;
    line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth());
  }
 else {
    x=barW0 + state.getBarWidth() / 2.0;
    y=barL;
    line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL);
  }
  if (state.getElementHinting()) {
    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));
  }
  Stroke itemStroke=getItemStroke(row,column);
  Paint itemPaint=getItemPaint(row,column);
  g2.setStroke(itemStroke);
  g2.setPaint(itemPaint);
  g2.draw(line);
  if (state.getElementHinting()) {
    endElementGroup(g2);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,orientation,dataset,row,column,x,y,(value < 0.0));
  }
  int datasetIndex=plot.indexOf(dataset);
  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,line.getBounds());
  }
}","@Override public void layoutContainer(Graphics2D g6,CategoryItemRendererState states,Rectangle2D imageArea,CategoryPlot scale,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int width,int Pass){
  int vvisibleRowstates.getVisibleSeriesIndex(row);
  if (visibleRow < 0) {
    return;
  }
  NumberdataValuee=dataset.getValue(row,width);
  if (dataValue == null) {
    return;
  }
  double result=dataValue.doubleValue();
  PlotOrientation oorientationscale.getOrientation();
  double babarW0alculateBarW0(plscaleorientationdimageAreaddomainAxisstatesvisibleRoww,width);
  RectangleEdge egraphscale.getRangeAxisEdge();
  double barbarVangeAxisvalueToJava2D(vresultimageArea,graph);
  Line2D pin;
  double xi, y;
  if (orientation.isHorizontal()) {
    xi=barV;
    yybbarW0+ states.getBarWidth() / 2.0;
    lpinnew Line2D.Double(bbarVbbarW0bbarVbbarW0+ states.getBarWidth());
  }
 else {
    xxibbarW0+ states.getBarWidth() / 2.0;
    y=barV;
    lpinnew Line2D.Double(bbarW0bbarVbbarW0+ states.getBarWidth(),barV);
  }
  if (states.getElementHinting()) {
    beginElementGroup(g6,dataset.getRowKey(row),dataset.getColumnKey(width));
  }
  Stroke itemStroke=getItemStroke(row,width);
  Paint itemPaint=getItemPaint(row,width);
  g6.setStroke(itemStroke);
  g6.setPaint(itemPaint);
  g6.draw(pin);
  if (states.getElementHinting()) {
    endElementGroup(g6);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,width);
  if (generator != null && isItemLabelVisible(row,width)) {
    drawItemLabel(g6,orientation,dataset,row,width,xxiyy(result < 0.0));
  }
  int datasetIndex=scale.indexOf(dataset);
  updateCrosshairValues(states.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(width),result,datasetIndex,barW0,barV,orientation);
  EntityCollection entities=states.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,width,pin.getBounds());
  }
}",448,24,"drawItem:layoutContainer,g2:g6,state:states,dataArea:imageArea,plot:scale,column:width,pass:Pass,value:result,edge:graph,barL:barV,line:pin,x:xi,",1171,8.33,ALERT
2533,"public static EjbJarXmlVersion valueOf(DocumentType docType) throws NullPointerException {
  return valueOf(docType.getPublicId());
}
","public static EjbJarXmlVersion versionFor(DocumentType tagName) throws NullPointerException {
  return versionFor(tagName.getPublicId());
}
",22,2,"docType:tagName,valueOf:versionFor,",46,1.16,ALERT
2534,"public boolean contains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}","public boolean contains(List<Integer> hatches){
  Iterator<Integer> ni=hatches.iterator();
  for (int j=0; j < hashFunctions; ++j) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}",77,4,"hashes:hatches,i:j,",61,0.67,ALERT
2535,"public Vector rotateInDegree(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
","public Vector rotateInDdegision(double ward){
  return rotateInRadian(Math.toRadians(ward));
}
",20,2,"degree:ward,rotateInDegree:rotateInDdegision,",58,0.6,ALERT
2537,"public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}","public SecretBlock(Mario e,Group location,int stageRegion,float xMin,float yypos,float yulaPosition,Image... splitState){
  super(BLOCK_COLLISION_DATA,xMin,yypos,0,0,(Image)null);
  this.splitState=splitState[0];
  yoYelloDisplayew ImageView(splitState[1]);
  yolYelloDisplaytFitWidth(yulaPosition);
  this.location=location;
  zostatetageRegion;
}",82,9,"player:e,parent:location,stageZone:stageRegion,xPos:xMin,yPos:yypos,yoloWidth:yulaPosition,hitState:splitState,yoloView:YelloDisplay,zone:state,",1974,15.55,ALERT
2540,"protected void drawConnectorCenters(Canvas c){
  List<Connection> connections=mBlock.getAllConnections();
  Paint paint=new Paint();
  paint.setStyle(Paint.Style.FILL);
  for (int i=0; i < connections.size(); i++) {
    Connection conn=connections.get(i);
    if (conn.inDragMode()) {
      if (conn.isConnected()) {
        paint.setColor(Color.RED);
      }
 else {
        paint.setColor(Color.MAGENTA);
      }
    }
 else {
      if (conn.isConnected()) {
        paint.setColor(Color.GREEN);
      }
 else {
        paint.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectionPosition.x+=mBlockViewSize.x;
    }
    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);
  }
}","protected void drawConnectorHeaderers(Canvas c){
  List<Connection> conors=mBlock.getAllConnections();
  Paint print=new Paint();
  print.setStyle(Paint.Style.FILL);
  for iint i=0; i < conors.size(); i++) {
    ConnecConn conn=conors.get(i);
    if (Conn.inDragMode()) {
      if (Conn.isConnected()) {
        print.setColor(Color.RED);
      }
 else {
        print.setColor(Color.MAGENTA);
      }
    }
 else {
      if (Conn.isConnected()) {
        print.setColor(Color.GREEN);
      }
 else {
        print.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(Conn.getPosition().location - mBlock.getPosition().location,Conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTemconnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectiomTemconnectionPositionockViewSize.location;
    }
    c.drawCircle(mTempComTemconnectionPositionon,mTemconnectionPosition.y,10,print);
  }
}",226,8,"drawConnectorCenters:drawConnectorHeaderers,connections:conors,paint:print,conn:Conn,x:location,mTempConnectionPosition:mTemconnectionPosition,",378,2.86,ALERT
2541,"private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=step / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=y0[i] + subStep * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int i=0; i < y0.length; ++i) {
      final double middle=yEnd[i];
      yEnd[i]=yTmp[i] + subStep2 * f[j][i];
      yTmp[i]=middle;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);
  }
  return true;
}","private boolean refineLoop(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] frac,final double[] yMiddle,final double[] yaMid) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=step / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int mini=0; mini < y0.length; ++mini) {
    yaMid[mini]=y0[mini] + subStep * frac[0][mini];
  }
  frac[1]=computeDerivatives(t,yaMid);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yaMid,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int mini=0; mini < y0.length; ++mini) {
      final double middle=yaMid[mini];
      yaMid[mini]=yTmp[mini] + subStep2 * frac[j][mini];
      yTmp[mini]=middle;
    }
    frac[j + 1]=computeDerivatives(t,yaMid);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=frac[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(frac[j + 1][l] - frac[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int mini=0; mini < y0.length; ++mini) {
    yaMid[mini]=0.5 * (yTmp[mini] + yaMid[mini] + subStep * frac[n][mini]);
  }
  return true;
}",455,21,"i:mini,f:frac,yEnd:yaMid,tryStep:refineLoop,",502,6.58,ALERT
2544,"private long loadLargestMessageId(){
  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();
  return releaseMessage == null ? 0 : releaseMessage.getId();
}","private long loadLargestMessageId(){
  ReleaseMessage archiveMsg=releaseMessageRepository.findTopByOrderByIdDesc();
  return archiveMsg == null ? 0 : archiveMsg.getId();
}",29,2,"releaseMessage:archiveMsg,",36,0.24,ALERT
2545,,,24,2,,757,7.52525049050649,0
2547,,,170,8,,2886,61.065757258733100,0
2548,"private void applyTradingBonus(Player player){
  player.incrementTradescore();
}
","private void applyTradingBonus(Player layer){
  layer.incrementTradescore();
}
",15,2,"player:layer,",35,0.29,ALERT
2549,"public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    log.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    log.info(""Writing data into "" + matsim4opusTempDirectory + FILE_NAME+ "" ..."");
    zoneWriter.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public UrbanSimZoneCSVWriterV2(String matsim4tumblrTempRoot,String matsimOutputDirectory){
  this.matsim4tumblrTempRoot=matsim4tumblrTempRoot;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    log.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    zoneWriter=IOUtils.getBufferedWriter(matsim4tumblrTempRoot + FILE_NAME);
    log.info(""Writing data into "" + matsim4tumblrTempRoot + FILE_NAME+ "" ..."");
    zoneWriter.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",122,3,"matsim4opusTempDirectory:matsim4tumblrTempRoot,",43,0.34,ALERT
2550,"public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){
  return a.thenCombine(b,function);
}
","public static <R,AC,B>CompletionStage<R> combine(CompletionStage<AC> a,CompletionStage<B> b,BiFunction<AC,B,R> function){
  return a.thenCombine(b,function);
}
",49,5,"A:AC,",42,1.01,ALERT
2551,,,39,2,,803,8.137747772534690,0
2552,,,32,3,,1161,8.4998268644015,0
2553,"public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {
  if (inputtype == null || locale == null || voice == null || inputtext == null) {
    throw new NullPointerException(""Null argument"");
  }
  byte[] audio=null;
  String query=""Select outputaudio FROM marycache WHERE inputtype = \'"" + inputtype + ""\' AND outputtype = \'AUDIO\' AND locale = \'""+ locale+ ""\' AND voice = \'""+ voice+ ""\' AND outputparams = \'""+ outputparams+ ""\' AND style = \'""+ style+ ""\' AND effects = \'""+ effects+ ""\' AND inputtext = ?"";
  PreparedStatement st=connection.prepareStatement(query);
  st.setString(1,inputtext);
  ResultSet results=st.executeQuery();
  if (results.next()) {
    audio=results.getBytes(1);
  }
  return audio;
}","public synchronized byte[] LookUpImage(String workstyle,String linode,String video,String flushmetadata,String style,String fixes,String inputText) throws SQLException {
  if (workstyle == null || linode == null || video == null || inputText == null) {
    throw new NullPointerException(""Null argument"");
  }
  byte[] output=null;
  Stringparsey=""Select outputaudio FROM marycache WHERE inputtype = \'"" + workstyle + ""\' AND outputtype = \'AUDIO\' AND locale = \'""+ linode+ ""\' AND voice = \'""+ video+ ""\' AND outputparams = \'""+ flushmetadata+ ""\' AND style = \'""+ style+ ""\' AND effects = \'""+ fixes+ ""\' AND inputtext = ?"";
  PreparedStatement st=connection.prepareStatement(parse);
  st.setString(1,inputText);
  ResultSet items=st.executeQuery();
  if (items.next()) {
    output=items.getBytes(1);
  }
  return output;
}",145,12,"lookupAudio:LookUpImage,inputtype:workstyle,locale:linode,voice:video,outputparams:flushmetadata,effects:fixes,inputtext:inputText,audio:output,query:parse,results:items,",926,11.19,ALERT
2554,"public int read() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.read();
}","public int exec() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.exec();
}",33,1,"read:exec,",34,0.3,ALERT
2555,,,33,2,,652,3.7415698647499100,0
2556,"public static String replace(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}","public static String printf(String str,char oldChar,String newStr){
  StringBuffer ab=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      ab.append(newStr);
    }
 else {
      ab.append(ch);
    }
  }
  return ab.toString();
}",86,7,"buf:ab,replace:printf,",130,1.52,ALERT
2557,"public char[] toCharArray(){
  char[] newValue=new char[count];
  System.arraycopy(buf,0,newValue,0,count);
  return newValue;
}","public char[] tocharArray(){
  char[] newVal=new char[count];
  System.arraycopy(buf,0,newVal,0,count);
  return newVal;
}",38,2,"toCharArray:tocharArray,newValue:newVal,",95,1.16,ALERT
2558,"@SafeVarargs public final void add(T... newItems){
  add(Arrays.asList(newItems));
}
","@SafeVarargs public final void add(T... NewContents){
  add(Arrays.asList(NewContents));
}
",23,2,"newItems:NewContents,",28,0.25,ALERT
2559,,,23,3,,1126,9.739548202355700,0
2560,,,123,3,,1154,11.05634503364560,0
2561,"public static ThreadDump create(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
","public static ThreadDump test(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
",52,2,"create:test,",36,0.29,ALERT
2562,,,40,5,,1826,26.307509887218500,0
2563,"public static final String toBitString(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
","public static final String tobitList(int x[]){
  StringBuilder sb=new StringBuilder(x.length);
  for (  int b : x) {
    sb.append(b);
  }
  return sb.toString();
}
",47,4,"i:x,toBitString:tobitList,",94,0.8,ALERT
2564,"public boolean equals(Object object){
  if (object == null || !(object instanceof SessionID)) {
    return false;
  }
  SessionID another=(SessionID)object;
  return encryptedString.equals(another.encryptedString);
}
","public boolean quales(Object object){
  if (object == null || !(object instanceof SessionID)) {
    return false;
  }
  SessionID another=(SessionID)object;
  return encryptedString.quales(another.encryptedString);
}
",45,3,"equals:quales,",36,0.78,ALERT
2565,,,26,2,,814,6.6277552207311,0
2566,,,44,3,,1166,9.416942183176680,0
2567,"public void replaceNonOptionalNonMinusNodesWith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){
  nonOptionalNonMinusNodes.clear();
  nonOptionalNonMinusNodes.addAll(ordered);
  if (recomputeDefinitelyProduced) {
    recomputeDefinitelyProduced();
  }
}
","public void replaceNonOptionalNonMinusNodeswith(final List<IGroupMemberNode> finished,final boolean recomputeDefullyProcing){
  nonOptionalNonMinusNodes.clear();
  nonOptionalNonMinusNodes.addAll(finished);
  if (recomputeDefullyProcing) {
    recomputeDefullyProcing();
  }
}
",40,3,"replaceNonOptionalNonMinusNodesWith:replaceNonOptionalNonMinusNodeswith,ordered:finished,recomputeDefinitelyProduced:recomputeDefullyProcing,",300,13.68,ALERT
2568,"public void skip(int count) throws IOException {
  int skipCount=Math.min(limit - position,count);
  while (true) {
    position+=skipCount;
    count-=skipCount;
    if (count == 0)     break;
    skipCount=Math.min(count,capacity);
    require(skipCount);
  }
}","public void eat(int key) throws IOException {
  inwriteCountnt=Math.min(limit mounton,key);
  while (true) {
    pmount=writeCount;
    key-=writeCount;
    if (key == 0)     break;
  writeCountnt=Math.min(key,capacity);
    require(writeCount);
  }
}",63,4,"skip:eat,count:key,skipCount:writeCount,position:mount,",729,7.88,ALERT
2569,"protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}","protected void DrawPath(int x,int y,int w,int h,Color backgroundcolor,Paint drawpix,Color penPixel,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,backgroundcolor,drawpix,penPixel,shadow);
}",488,10,"fillColor:backgroundcolor,drawCloud:DrawPath,penColor:penPixel,fillPaint:drawpix,",193,6.71,ALERT
2570,"public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void destroyFiles(File queue) throws AdeUsageException {
  if (!queue.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + queue.getPath());
  }
}
",36,2,"file:queue,deleteFile:destroyFiles,",50,0.34,ALERT
2571,"public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
","public static boolean checkGSLFootprints(String Footletter){
  try {
    Configuration extured=new GMLConfiguration();
    Pwriterparser=new Parser(extured);
    Geometry gGEo(Geometry)pwriterparse(new InputSource(new StringReader(Footletter)));
    if (!GEo.isEmpty() && !GEo.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
",105,5,"checkGMLFootprint:checkGSLFootprints,footprint:Footletter,configuration:extured,parser:writer,geom:GEo,",541,6.34,ALERT
2572,"private static boolean isEnabled(){
  if (SystemUtils.IS_OS_WINDOWS) {
    return false;
  }
  try {
    List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList(""sestatus""));
    for (    String line : lines) {
      if (line.contains(""SELinux status"")) {
        if (line.contains(""enabled"")) {
          Logger.info(""SELinux is enabled on this system"");
          return true;
        }
        return false;
      }
    }
  }
 catch (  Exception ex) {
  }
  return false;
}
","private static boolean Isenabled(){
  if (SystemUtils.IS_OS_WINDOWS) {
    return false;
  }
  try {
    List<String> flows=CommandUtil.executeCommandAndGetLines(Collections.singletonList(""sestatus""));
    for (    String item : flows) {
      if (item.contains(""SELinux status"")) {
        if (item.contains(""enabled"")) {
          Logger.info(""SELinux is enabled on this system"");
          return true;
        }
        return false;
      }
    }
  }
 catch (  Exception ex) {
  }
  return false;
}
",94,3,"isEnabled:Isenabled,lines:flows,line:item,",188,1.32,ALERT
2573,,,90,4,,1004,7.265505492687230,0
2574,"private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + query.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}","private void retrieveWaylines(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2=""%"" + query.textQuery + ""%"";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",144,7,"retrieveWaypoints:retrieveWaylines,",40,0.45,ALERT
2575,,,30,1,,429,3.4495290398597700,0
2576,"private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
","private String insertProtps(String node,Map<String,String> prop){
  for (  Entry<String,Stservice entry : prop.entrySet()) {
    node=node.replace(service.getKey(),service.getValue());
  }
  return node;
}
",57,4,"insertProperties:insertProtps,template:node,properties:prop,entry:service,",274,2.36,ALERT
2577,"public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}","public DriverTask unexportVolumesFromInciitors(List<Initiator> initiers,List<StorageVolume> volums){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask ctx=new DellSCDriverTask(""unexportVolumes"");
  ScServer image=null;
  StringBuilder respBuffer=new StringBuilder();
  int volumesUnMatted=0;
  for (  StorageVolumepode : volums) {
    Stricssnssn=pod.getStorageSystemId();
    boolehasSnapoothot=StringUtils.countMatches(pod.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI avconnectionManager.getConnection(cssn);
      ScVolume rcMo=null;
      if (hasSnapoot) {
   rcMoscVvapi.findReplayView(pod.getNativeId());
        if (rcMo != null) {
          v.deleteVolume(rcMo.instanceId);
          volumesUnMatted++;
          continue;
        }
      }
 else {
   rcMoscVvapi.getVolume(pod.getNativeId());
      }
      if (rcMo == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",pod.getNativeId()));
      }
      if (image == null) {
      imageer=findScServervcssnsn,initiers);
      }
      if (image == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfilmappingsprofilesilesvi.findMappingProfiles(image.instanceId,rcMo.instanceId);
      for (      ScMappingProfile mmindingGroup: mappingsprofiles) {
        v.deleteMappingProfile(mindingGroup.instanceId);
      }
      volumesUnMatted++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'""rcMol.name,image.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",pod.getDisplayName(),dex);
      LOG.error(error);
      respBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  ctx.setMessage(respBuffer.toString());
  if volumesUnMattedd == volums.size()) {
    ctx.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnMatted == 0) {
    ctx.setStatus(TaskStatus.FAILED);
  }
 else {
    ctx.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return ctx;
}",407,15,"unexportVolumesFromInitiators:unexportVolumesFromInciitors,initiators:initiers,volumes:volums,task:ctx,server:image,errBuffer:respBuffer,volumesUnmapped:volumesUnMatted,volume:pod,ssn:cssn,isSnapshot:hasSnapoot,api:v,scVol:rcMo,mappingProfiles:mappingsprofiles,mappingProfile:mindingGroup,",1240,12.61,ALERT
2578,,,15,1,,402,3.578724944591520,0
2579,"protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}","protected MapleQuestRequirement(MapleQuest upload,ReadBin client) throws IOException {
  this.upload=upload;
  this.dadayAtDatelient.readByte() > 0;
  this.noearlyAutostartlient.readByte() > 0;
  this.lvlcmaxlient.readShort();
  this.lvlvonlylient.readShort();
  this.mbembMINlient.readShort();
  this.chcharcoalOptlient.readShort();
  this.chcharmminlient.readShort();
  this.crcraftMinilient.readShort();
  this.ininsightMaxlient.readShort();
  this.seintentMinimumlient.readShort();
  this.wiplayJunlient.readShort();
  this.pobotlient.readShort();
  this.pepettamelessMINlient.readShort();
  this.susecJobStatuslient.readShort();
  this.npnlpclient.readInt();
  this.initervallient.readInt();
  this.enenclient.readString();
  this.ststartScriptlient.readString();
  this.enstartscriptslient.readString();
  short sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    int filayerlient.readInt();
    fieldEnter.add(layer);
  }
  sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    short job=client.readShort();
    jobs.add(job);
  }
  sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    int id=client.readInt();
    boolean acquire=client.readByte() > 0;
    skills.put(id,acquire);
  }
  sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    int id=client.readInt();
    byte state=client.readByte();
    byte order=client.readByte();
    quests.put(id,state);
  }
  sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    int id=client.readInt();
    int count=client.readInt();
    byte order=client.readByte();
    items.put(id,count);
  }
  sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    int id=client.readInt();
    int count=client.readInt();
    mobs.put(id,count);
  }
  sishapelient.readShort();
  for (int idi0; idi< shape; di++) {
    int id=client.readInt();
    pets.add(id);
  }
}",558,29,"quest:upload,data:client,dayByDay:dayAtDate,normalAutoStart:earlyAutostart,lvmin:lcmax,lvmax:lvonly,mbmin:embMIN,charismaMin:charcoalOpt,charmMin:charmmin,craftMin:craftMini,insightMin:insightMax,senseMin:intentMinimum,willMin:playJun,pop:bot,pettamenessmin:pettamelessMIN,subJobFlag:secJobStatus,npc:nlpc,interval:iterval,end:enc,startscript:startScript,endscript:startscripts,size:shape,i:di,field:layer,",6188,49.49,ALERT
2580,"public int addDir(File file){
  if (!file.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(file,"".class""));
  loadClass(file,names);
  return 1;
}","public int loadClass(File source){
  if (!source.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(source,"".class""));
  loadClass(source,names);
  return 1;
}",48,3,"file:source,addDir:loadClass,",54,0.47,ALERT
2581,"public TypeDeclaration canonicalize(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}","public TypeDeclaration canoncialise(){
  List<Type> pps=getSatisfiedTypes();
  if (pps.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (pps.size() == 1) {
    Type step=pps.get(0);
    if (step.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type step : pps) {
    if (step.isUnion()) {
      List<Type> caaseNamestep.getCaseTypes();
      List<Type>ilestt=new ArrayList<Type>(aseNames.size());
      for (      Typeectt : aseNames) {
        List<Type> illister=new ArrayList<Type>(pps.size());
        for (        Type xt : pps) {
          if (ptxt= step) {
            addToIntersection(iillisterect,unit);
          }
 else {
            addToIntersection(illister,xt,unit);
          }
        }
        Type it=aitnonicalIntersection(illister,unit);
        addToUnion(ilest,ait);
      }
      TypeDeclaration output=new UnionType(unit);
      output.setCaseTypes(ilest);
      return output;
    }
  }
  return this;
}",229,10,"canonicalize:canoncialise,sts:pps,st:step,caseTypes:aseNames,ulist:ilest,ct:ect,ilist:illister,pt:xt,it:ait,result:output,",1433,24.19,ALERT
2582,,,76,2,,785,11.979658774534900,0
2583,,,36,2,,386,4.9480287830034900,0
2584,,,41,2,,661,6.972970863183340,0
2586,"private static boolean versionMatches(Integer v1,int v2){
  if (v1 == null || v1 == 0 || v2 == 0) {
    return true;
  }
  return v1.equals(v2);
}","private static boolean versionFcher(Integer v1,int v2){
  if (v1 == null || v1 == 0 || v2 == 0) {
    return true;
  }
  return v1.equals(v2);
}",40,3,"versionMatches:versionFcher,",33,1.14,ALERT
2587,"private void updatePropertyToValue2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}","private void updatePropertyToFileAll() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}",22,1,"updatePropertyToValue2:updatePropertyToFileAll,",26,0.27,ALERT
2588,"private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}","private void trauceCustom(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        trauceCustom(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        trauceCustom(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      trauceCustom(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      trauceCustom(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        trauceCustom(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      trauceCustom(user,true,seen);
    }
  }
}",399,15,"traverseInternal:trauceCustom,",92,2.26,ALERT
2589,"public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
","public boolean onEvent(ActionResult successful){
synchronized (this) {
    String responseId=successful.getResponseInfo().mRequestId;
    if (responseId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(responseId);
    if (eventRemoved) {
      Class core=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (responseId.equals(mLastRequestIdByType.get(type))) {
          core=type;
          break;
        }
      }
      if (core != null) {
        mLastRequestIdByType.remove(core);
      }
    }
    return eventRemoved;
  }
}
",111,6,"result:successful,requestId:responseId,key:core,",153,2.33,ALERT
2590,,,37,1,,431,7.916211652755740,0
2591,"@Override public void startup() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelVoice + ""\'"");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
","@Override public void Startups() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> volumenames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String vchannelName: volumenames) {
    long clock=System.currentTimeMillis();
    Voice ununitElChoiceew UnitSelectionVoice(channelName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitElChoice + ""\'"");
    Voice.registerVoice(unitElChoice);
    long nnewtimeSystem.currentTimeMillis() - clock;
    Log.i(Mary.LOG,""Loading of voice "" + channelName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
",127,6,"startup:Startups,voiceNames:volumenames,voiceName:channelName,time:clock,unitSelVoice:unitElChoice,",275,3.29,ALERT
2592,"@Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(channelHandlerContext.getChannel());
}
","@Override public void channelExosed(ChannelHandlerContext channelHandlerConfig,ChannelStateEvent channelTypeContext) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(channelHandlerConfig.getChannel());
}
",33,3,"channelClosed:channelExosed,channelHandlerContext:channelHandlerConfig,channelStateEvent:channelTypeContext,",139,1.46,ALERT
2593,"@Override protected String extractKey(final String name){
  final String key=unescape(name.substring(0,name.length() - 4));
  return key.equals(""\\0"") ? null : key;
}","@Override protected String extractionPoint(final String one){
  final Strinchildey=unescape(one.substring(0,one.length() - 4));
  return child.equals(""\\0"") ? null : child;
}",46,3,"extractKey:extractionPoint,name:one,key:child,",584,7.47,ALERT
2594,"public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}","public void touch(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int ion=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(ion + 1);
    c.key=authScheme.substring(0,ion);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.touch(name,c);
}",129,10,"index:ion,put:touch,",100,2.34,ALERT
2595,,,26,2,,806,46.80989251534140,0
2596,"private void disableButtons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
","private void disableKeyButton(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
",49,1,"disableButtons:disableKeyButton,",25,0.37,ALERT
2597,"private static String findRelativePath(String filePath,String dirPath){
  String relPath;
  if (!dirPath.endsWith(File.separator)) {
    dirPath=dirPath + File.separator;
  }
  if (filePath.startsWith(dirPath)) {
    relPath=filePath.substring(dirPath.length());
  }
 else {
    relPath=filePath;
  }
  return relPath;
}
","private static String findRelativesPart(String FilePath,String dirPath){
  String relPath;
  if (!dirPath.endsWith(File.separator)) {
    dirPath=dirPath + File.separator;
  }
  if (FilePath.startsWith(dirPath)) {
    relPath=FilePath.substring(dirPath.length());
  }
 else {
    relPath=FilePath;
  }
  return relPath;
}
",72,4,"findRelativePath:findRelativesPart,filePath:FilePath,",68,3.17,ALERT
2598,"public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}","public static final String extunc(final String fr,final int load){
  if (fr == null) {
    return fr;
  }
  if (fr.load() <= load) {
    return fr;
  }
  return fr.substring(0,load);
}",52,3,"trunc:extunc,str:fr,length:load,",144,1.39,ALERT
2599,"private void insertProsodySettings(Utterance utterance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("""")) {
      utterance.setString(att,val);
    }
  }
}
","private void insertProsodicAttributes(Utterance uttry,Element document){
  Element pprodubsodi(Element)DomUtils.getAncestor(document,MaryXML.PROSODY);
  if (produbsodi == null) {
    return;
  }
  Element vvoice(Element)DomUtils.getAncestor(document,MaryXML.VOICE);
  if (voivoice null && DomUtils.isAncestor(produbsodi,voice)) {
    return;
  }
  Element pdraft(Element)DomUtils.getAncestor(document,MaryXML.PARAGRAPH);
  if (pardraft null && DomUtils.isAncestor(produbsodi,draft)) {
    return;
  }
  for (  String feat : PROSODY_ATTRIBUTES) {
    String val=valdubsodi.getAttribute(feat);
    if (!val.equals("""")) {
      uttry.setString(feat,val);
    }
  }
}
",151,8,"insertProsodySettings:insertProsodicAttributes,utterance:uttry,element:document,prosody:produbsodi,paragraph:draft,att:feat,",368,5.2,ALERT
2600,"private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}","private void kpDistanceFind(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kpDistanceFind(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kpDistanceFind(middle + 1,right,next,query,res,iter,radius);
  }
}",320,16,"kdRangeSearch:kpDistanceFind,",148,2.4,ALERT
2601,"public void removeListeners(){
  listeners.clear();
}
","public void registerListener(){
  listeners.clear();
}
",13,1,"removeListeners:registerListener,",25,0.16,ALERT
2602,"protected String[][] toArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}","protected String[][] asArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString(""Dataset"",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="""";
      x++;
    }
    result[0][x]="""";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="""";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]=""Inf"";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="""";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]=""Average"";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]="""";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + ""/""+ TIE_STRING+ ""/""+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="""";
x++;
if (getShowStdDev()) {
result[y][x]="""";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + ""/""+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ ""/""+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}",988,12,"toArray:asArray,",426,5.99,ALERT
2603,"public Operation copyTo(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
","public Operation transferto(Extent target){
  BlockTransformExtent contension=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(contension,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
",65,4,"extent:contension,copyTo:transferto,",47,0.66,ALERT
2604,,,41,1,,416,12.595606033007300,0
2605,"static void removeRedundantAffix(TranslatorUtils.IContain iContain,List<String> strList){
  if (strList.size() <= 1) {
    return;
  }
  int w=0;
  for (  String str : strList) {
    if (w == 0 || !iContain.containFunc(str,strList.get(w - 1))) {
      strList.set(w,str);
      w++;
    }
  }
  strList=strList.subList(0,w);
}","static void removeRedundantPrefant(TranslatorUtils.IContain iContain,List<String> strList){
  if (strList.size() <= 1) {
    return;
  }
  int w=0;
  for (  String str : strList) {
    if (w == 0 || !iContain.containFunc(str,strList.get(w - 1))) {
      strList.set(w,str);
      w++;
    }
  }
  strList=strList.subList(0,w);
}",93,5,"removeRedundantAffix:removeRedundantPrefant,",44,0.55,ALERT
2606,,,71,8,,2856,24.656312294801100,0
2607,,,44,2,,827,7.814283835887910,0
2608,"private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){
  if (formSpec == null) {
    return prefMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.MINIMUM) {
    return minMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.PREFERRED) {
    return prefMeasure.sizeOf(component);
  }
 else {
    return Math.min(cellSize,prefMeasure.sizeOf(component));
  }
}
","private static int containersize(Component application,FormSpec flowSpec,int CellLen,FormLayout.Measure minGrand,FormLayout.Measure preefMeasure){
  if (flowSpec == null) {
    return prpreefMeasureizeOf(application);
  }
 else   if (flowSpec.getSize() == Sizes.MINIMUM) {
    return miminGrandizeOf(application);
  }
 else   if (flowSpec.getSize() == Sizes.PREFERRED) {
    return prpreefMeasureizeOf(application);
  }
 else {
    return Math.min(ceCellLenrpreefMeasureizeOf(application));
  }
}
",106,6,"componentSize:containersize,component:application,formSpec:flowSpec,cellSize:CellLen,minMeasure:minGrand,prefMeasure:preefMeasure,",1027,14.72,ALERT
2609,"public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}","public Config(SamlAuthorityConfiguration samlAuthorceConf,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inForeignIDpes){
  Validate.notNull(samlAuthorceConf);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<CertificatnationalificateLegert=samlAuthorceConf.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authoauthorityCertInValidCertsurrecurrentChainls(nationalificateLeg)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorceConf=samlAuthorceConf;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inForeignIDpes != null) {
    for (    IDPConfig client : inForeignIDpes) {
      if (client != null) {
        idpsSet.put(client.getEntityID(),client);
      }
    }
  }
  this.ExternalIPs=Collections.unmodifiableMap(idpsSet);
}",220,11,"samlAuthorityConfig:samlAuthorceConf,inExternalIdps:inForeignIDpes,authorityCert:nationalificateLeg,conf:client,externalIdps:ExternalIPs,",435,5.02,ALERT
2610,"void assertThreadsStayAlive(long millis,Thread... threads){
  try {
    delay(millis);
    for (    Thread thread : threads)     assertTrue(thread.isAlive());
  }
 catch (  InterruptedException fail) {
    threadFail(""Unexpected InterruptedException"");
  }
}
","void assertThreadsStayLy(long millas,Thread... threads){
  try {
    delay(millas);
    for (    Thread element : threads)     assertTrue(element.isAlive());
  }
 catch (  InterruptedException fail) {
    threadFail(""Unexpected InterruptedException"");
  }
}
",48,4,"assertThreadsStayAlive:assertThreadsStayLy,millis:millas,thread:element,",224,6.6,ALERT
2611,,,29,1,,452,3.8155921697616600,0
2612,"public void addConnection(Connection connection){
  if (connection == null)   throw new IllegalArgumentException(""connection cannot be null."");
synchronized (connectionsLock) {
    Connection[] newConnections=new Connection[connections.length + 1];
    newConnections[0]=connection;
    System.arraycopy(connections,0,newConnections,1,connections.length);
    connections=newConnections;
  }
  connection.addListener(invokeListener);
  if (TRACE)   trace(""kryonet"",""Added connection to ObjectSpace: "" + connection);
}","public void newConnect(Connection timeout){
  if (timeout == null)   throw new IllegalArgumentException(""connection cannot be null."");
synchronized (connectionsLock) {
    Connection[] newConnectors=new Connection[connectors.length + 1];
 newConnectorsons[0]=timeout;
    System.arraycopyconnectorss,0,newConnectors,1,connectors.length);
   connectorss=newConnectors;
  }
  timeout.addListener(invokeListener);
  if (TRACE)   trace(""kryonet"",""Added connection to ObjectSpace: "" + timeout);
}",91,4,"addConnection:newConnect,connection:timeout,newConnections:newConnectors,connections:connectors,",265,3.19,ALERT
2614,"final public void println(float v){
  String s=String.valueOf(v);
  write(s,0,s.length());
  println();
}","final public void ln(float v){
  String out=String.valueOf(v);
  write(out,0,out.length());
  ln();
}",37,3,"s:out,println:ln,",70,0.69,ALERT
2615,"protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){
  return true;
}
","protected boolean needToEscapeXMLExceptCharacter(String hostEntityID,String remoteEntityID,String agm){
  return true;
}
",18,4,"realm:agm,needToEscapeXMLSpecialCharacters:needToEscapeXMLExceptCharacter,",28,0.55,ALERT
2617,"protected boolean isNumeric(String text){
  text=text.trim();
  int tlen=text.length();
  for (int i=0; i < tlen; i++) {
    if (Character.isDigit(text.charAt(i)) == false) {
      return false;
    }
  }
  return true;
}","protected boolean IsNumber(String letter){
  letter=letter.trim();
  int tlen=letter.length();
  for (int xi=0; xi < tlen; xi++) {
    if (Character.isDigit(letter.charAt(xi)) == false) {
      return false;
    }
  }
  return true;
}",66,4,"text:letter,i:xi,isNumeric:IsNumber,",124,1.63,ALERT
2618,,,17,2,,654,5.933840537071230,0
2619,"@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}","@Override public void end(Runnable arg0){
  end();
  arg0.run();
}",21,2,"stop:end,",36,0.3,ALERT
2620,"private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}","private HashMap AddRetribute(SvcReg r,EntryClass eversion,int fndIdx,Object work){
  HashMap[] attagMapserviceByAttr.get(eversion);
  if (tagMaps == null) {
    attagMapsew HashMap[eversion.getNumFields()];
    serviceByAttr.put(eversion,tagMaps);
  }
  HashMapperp=tagMaps[fndIdx];
  if (per == null) {
    per=new HashMap(11);
    tagMaps[fndIdx]=per;
  }
  ArrayListregsess=(ArrayListperp.get(work);
  if (regses == null) {
    regses=new ArrayList(3);
   perp.put(work,regses);
  }
 else   ifregsesgs.contains(r))   return per;
regsesgs.add(r);
  return per;
}",151,8,"addAttr:AddRetribute,reg:r,eclass:eversion,fldidx:fndIdx,value:work,attrMaps:tagMaps,map:per,regs:regses,",1079,15.15,ALERT
2621,"public void addWritten(byte[] value){
  writeSetLock.lock();
  writeSet.add(new TimestampValuePair(ets,value));
  writeSetLock.unlock();
}
","public void addWritten(byte[] Value){
  writeSetLock.lock();
  writeSet.add(new TimestampValuePair(ets,Value));
  writeSetLock.unlock();
}
",36,2,"value:Value,",35,0.35,ALERT
2622,"@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}","@Override public void Flipping(X11ComponentPeer host,Component target,VolatileImage xBackBuffer,int x0,int x3,int x22,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData ssD=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData BBSD=ssD.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(BBSD,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics og=host.getGraphics();
      try {
        g.ograwImage(xBackBuffer,x0,x3,x22,yy2x0,x3,x22,y2,null);
      }
  finally {
        og.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(host.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics og=xBackBuffer.getGraphics();
    try {
      og.setColor(target.getBackground());
      og.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      og.dispose();
    }
  }
}",276,15,"flip:Flipping,peer:host,x1:x0,y1:x3,x2:x22,vsd:ssD,bbsd:BBSD,g:og,",636,10.84,ALERT
2623,,,152,10,,3379,52.7713346918424,0
2624,"@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){
  m_dataSourceListeners.remove(dsl);
}
","@Override public synchronized void removePageFlowHandler(DataSourceListener cdSl){
  m_dataSourceListeners.remove(cdSl);
}
",19,2,"removeDataSourceListener:removePageFlowHandler,dsl:cdSl,",105,0.55,ALERT
2625,"public static byte[] decode(String s) throws java.io.IOException {
  return decode(s,NO_OPTIONS);
}
","public static byte[] Decode(String ses) throws java.io.IOException {
  return Decode(ses,NO_OPTIONS);
}
",26,2,"s:ses,decode:Decode,",62,0.64,ALERT
2626,"public void removeDTEDDirectoryHandler(DTEDDirectoryHandler handler){
  directories.remove(handler);
}
","public void removeDTedDirectoryListener(DTEDDirectoryHandler client){
  directories.remove(client);
}
",16,2,"removeDTEDDirectoryHandler:removeDTedDirectoryListener,handler:client,",576,4.04,ALERT
2627,,,17,2,,792,4.6240803321202600,0
2629,"public int threeWayDistance(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}","public int threeWayDistance(Key k1,Key k2){
  byte[] hs00=hash;
  byte[] rh1=k1.hash;
  byte[] h22=k2.hash;
  int mmmmpiismatch(rh1,h22);
  if (mmpi == -1)   return 0;
  int h=Bhote.toUnsignedInt(hs00[mmpi]);
  int a=bayte.toUnsignedInt(rh1[mmpi]);
  int b=abcyte.toUnsignedInt(h22[mmpi]);
  return Integer.compareUnsigned(a ba ho,babc^ ho);
}",110,10,"h0:hs00,h1:rh1,h2:h22,mmi:mmpi,h:ho,a:ba,b:abc,",456,5.39,ALERT
2630,"public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
","public int oString(Element coll,String attributename){
  return Caster.toIntValue(coll.getAttribute(attributename),Integer.MIN_VALUE);
}
",29,3,"el:coll,attributeName:attributename,toInt:oString,",78,0.66,ALERT
2631,"protected static void writeRowCountDefinitions(TableCreator creator,ByteBuffer buffer){
  writeRowCountDefinitions(creator,buffer,creator.getIndexCount());
}
","protected static void writeRowCountDefines(TableCreator father,ByteBuffer bc){
  writeRowCountDefines(fatherbcr,father.getIndexCount());
}
",26,3,"writeRowCountDefinitions:writeRowCountDefines,creator:father,buffer:bc,",812,6.82,ALERT
2632,"private void baselineLayout(int origin,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=origin + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=origin + ascent + (springPref - baseline) - height;
break;
default :
y=origin + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
}","private void baselineslayout(int nexus,int size){
  int alesent;
  int nascenter;
  if (baselineAnchoredToTop) {
    alesent=prefAscent;
    dnascentersize - alesent;
  }
 else {
    alesent=size - prefDescent;
    nascenter=prefDescent;
  }
  for (  Spring between : springs) {
    Alignment acalignbetween.getAlignment();
    if (calign == null || calign == Alignment.BASELINE) {
      int bbidelinebetween.getBaseline();
      if (bideline >= 0) {
        int springPrefbetween.getMaximumSize(VERTICAL);
        int sspringPrefbetween.getPreferredSize(VERTICAL);
        int index=springPref;
        int ay;
switch (between.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          ay=nexus + alesent - bideline;
        heindexath.min(nascenter,pringPref - bideline) + bideline;
      break;
case CONSTANT_DESCENT:
    hindexMath.min(alesent,pringPref - springPref + bideline) + (springPref - bideline);
 ayy=nexus + alesent + (springPref - bideline) - index;
break;
default :
ay=nexus + alesent - bideline;
break;
}
between.setSize(VERTICALayy,index);
}
 else {
setChildSizebetweeng,VERTICAL,nexus,size);
}
}
 else {
setChildSizebetweeng,VERTICAL,nexus,size);
}
}
}",253,12,"baselineLayout:baselineslayout,origin:nexus,ascent:alesent,descent:nascenter,spring:between,alignment:calign,baseline:bideline,springMax:pringPref,height:index,y:ay,",937,16.03,ALERT
2633,"public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
","public void makeTreeofWritables(Iterable<Pair<String,Integer>> flatData){
  Text root=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    root.set(pair.root);
    ArrayList<IntWritable> validData;
    if (!mockInput.containsKey(root)) {
      validData=new ArrayList<>();
      mockInput.put(root,validData);
      root=new Text();
    }
 else     validData=(ArrayList<IntWritable>)mockInput.get(root);
    validData.add(new IntWritable(pair.value()));
  }
}
",122,5,"key:root,valList:validData,makeTreeOfWritables:makeTreeofWritables,",159,1.82,ALERT
2634,"public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}
","public void ADDBlock(int endLine,String startPath,int repeatCounter,int outNumber,int outputIncrementation){
  _lines.add(new Line(endLine,startPath,repeatCounter,outNumber,outputIncrementation));
}
",40,6,"addLine:ADDBlock,startLine:endLine,sourceFile:startPath,repeatCount:repeatCounter,outputLine:outNumber,outputIncrement:outputIncrementation,",373,2.84,ALERT
2635,"private AMSetupDSConfig(){
  Map map=ServicesDefaultValues.getDefaultValues();
  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}
","private AMSetupDSConfig(){
  Map MAP=ServicesDefaultValues.getDefaultValues();
  csDomain=(String)MAP.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  separfix=(String)MAP.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsServername=(String)MAP.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  udsPORT=(String)MAP.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPWD=(String)MAP.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  dedire=(String)MAP.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  eDeploypath=(String)MAP.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}
",113,8,"map:MAP,dsManager:csDomain,suffix:separfix,dsHostName:dsServername,dsPort:udsPORT,dsAdminPwd:dsAdminPWD,basedir:dedire,deployuri:eDeploypath,",1100,7.76,ALERT
2636,,,33,2,,797,5.7010999639829,0
2637,,,79,4,,1495,12.091513574123400,0
2638,"public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}","public Node executeSecond(String uri){
  List<Node> selectedNodes=select(uri);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}",41,3,"selectFirst:executeSecond,query:uri,",53,0.5,ALERT
2639,,,86,4,,937,10.0665531873703,0
2640,,,56,3,,549,3.765742818514510,0
2641,"public static void unregisterBaggageHandler(BaggageHandler handler){
  handlers.remove(handler);
}
","public static void unregisterBaggagRoute(BaggageHandler hand){
  handlers.remove(hand);
}
",17,2,"unregisterBaggageHandler:unregisterBaggagRoute,handler:hand,",147,1.51,ALERT
2642,"public String toString(){
  StringBuffer result=new StringBuffer(ipAddress.toString());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.toString();
}
","public String tostring(){
  StringBuffer result=new StringBuffer(ipAddress.tostring());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.tostring();
}
",41,2,"toString:tostring,",31,0.24,ALERT
2643,"public static Corleone context(String jobContext){
  if (jobContext == null || jobContext.equals("""")) {
    throw new IllegalArgumentException(""Job context must not be null or empty."");
  }
  contexts.clear();
  contexts.add(jobContext);
  return getInstance();
}
","public static Corleone config(String JobPath){
  if (JobPath == null || JobPath.equals("""")) {
    throw new IllegalArgumentException(""Job context must not be null or empty."");
  }
  contexts.clear();
  contexts.add(JobPath);
  return getInstance();
}
",50,2,"context:config,jobContext:JobPath,",377,3.12,ALERT
2644,"public String format(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.format(val);
  }
  return Double.toString(val);
}
","public String value(double valid){
  DecimalFormat hd=getDoubleFormat();
  if (hd != null) {
    return dhdvalue(valid);
  }
  return Double.toString(valid);
}
",40,3,"format:value,val:valid,df:hd,",154,1.23,ALERT
2645,,,63,2,,798,7.037282510598500,0
2646,"public void touch(){
  candiesStore=null;
}
","public void touch(){
  canditiesStore=null;
}
",11,2,"candiesStore:canditiesStore,",27,0.23,ALERT
2647,"@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {
  return sha1(keyStoreFile,null,null);
}","@NotNull public static String sha5(@NotNull File keyFileKey) throws Exception {
  return sha5(keyFileKey,null,null);
}",26,2,"keyStoreFile:keyFileKey,sha1:sha5,",65,1.06,ALERT
2648,"public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}","public static Long[] keysof(long[] database){
  Long[] dest=new Long[database.length];
  for (int i=0; i < database.length; i++) {
    dest[i]=Long.valueOf(database[i]);
  }
  return dest;
}",63,4,"array:database,valuesOf:keysof,",116,1.16,ALERT
2649,,,36,3,,1151,11.339695099989600,0
2650,,,142,6,,2150,21.589555927117700,0
2651,"protected static boolean eq(Object o1,Object o2){
  return o1 == null ? o2 == null : o1.equals(o2);
}","protected static boolean union(Object oone,Object oB){
  return oone == null ? o2oB= null : oone.equals(oB);
}",29,3,"eq:union,o1:oone,o2:oB,",460,4.87,ALERT
2652,"private void sendResponse(Document doc,MessageFactory messageFactory,String contentType,HttpServletResponse res) throws IOException, SOAPException {
  SOAPMessage reply=messageFactory.createMessage();
  SOAPHeader header=reply.getSOAPHeader();
  header.detachNode();
  SOAPBody replyBody=reply.getSOAPBody();
  res.setHeader(""Content-Type"",contentType);
  replyBody.addDocument(doc);
  reply.saveChanges();
  OutputStream os=res.getOutputStream();
  reply.writeTo(os);
  os.flush();
}
","private void endResp(Document doc,MessageFactory messageFactory,String ContentType,HttpServletResponse res) throws IOException, SOAPException {
  SOAPMessage reply=messageFactory.createMessage();
  SOAPHeader header=reply.getSOAPHeader();
  header.detachNode();
  SOAPBody replyFile=reply.getSOAPBody();
  res.setHeader(""Content-Type"",ContentType);
  replyFile.addDocument(doc);
  reply.saveChanges();
  OutputStream os=res.getOutputStream();
  reply.writeTo(os);
  os.flush();
}
",99,9,"sendResponse:endResp,contentType:ContentType,replyBody:replyFile,",320,2.46,ALERT
2654,"public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}","public DistributedLogMultiStreamWriter constructed(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}",102,1,"build:constructed,",31,0.42,ALERT
2655,,,37,2,,800,26.921509436766300,0
2656,"public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){
  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);
}
","public void addPropChangeAdapter(String propertyname,PropertyChangeListener listiner){
  propertyChangeSupport.addPropChangeAdapter(propertyname,listiner);
}
",21,3,"addPropertyChangeListener:addPropChangeAdapter,propertyName:propertyname,listener:listiner,",616,6.94,ALERT
2657,"public void remove(DirectedEdge de){
  outEdges.remove(de);
}
","public void en(DirectedEdge de){
  outEdges.en(de);
}
",16,2,"remove:en,",36,0.34,ALERT
2658,"public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
","public void closedModule(){
  WindowEvent em=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(em);
}
",27,2,"ev:em,closeWindow:closedModule,",50,0.42,ALERT
2659,"public void writeAll(ResultSet rs,boolean includeColumnNames,boolean trim) throws SQLException, IOException {
  if (includeColumnNames) {
    writeColumnNames(rs);
  }
  while (rs.next()) {
    writeNext(resultService.getColumnValues(rs,trim));
  }
}
","public void sendNone(ResultSet rics,boolean includeColumnName,boolean TRcut) throws SQLException, IOException {
  if (includeColumnName) {
    writeColumnNames(rics);
  }
  while (rics.next()) {
    writeNext(resultService.getColumnValues(rics,TRcut));
  }
}
",52,4,"writeAll:sendNone,rs:rics,includeColumnNames:includeColumnName,trim:TRcut,",555,5.1,ALERT
2660,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.eIsSet(featureID);
}
","@Override public boolean feIsGet(int featureID){
switch (featureID) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.feIsGet(featureID);
}
",91,2,"eIsSet:feIsGet,",37,0.69,ALERT
2661,"public static boolean isAutoNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isAutoNew(ctx);
}
","public static boolean IsAutoNew(Properties cfg,int WindowNo){
  if (cfg == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(cfg,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return IsAutoNew(cfg);
}
",70,4,"ctx:cfg,isAutoNew:IsAutoNew,",119,1.18,ALERT
2662,,,71,4,,1388,13.087173624833400,0
2663,,,35,3,,1131,10.71418410539630,0
2664,,,17,2,,706,6.727463142077130,0
2665,"private Set<Integer> findValues(String string){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : string.split("","")) {
    if (!str.equals("""")) {
      results.add(findValue(str));
    }
  }
  return results;
}
","private Set<Integer> findAll(String pointer){
  Set<Integer> RESULTS=new TreeSet<Integer>();
  for (  String sr: pointer.split("","")) {
    if (!r.equals("""")) {
      RESULTS.add(findValue(r));
    }
  }
  return RESULTS;
}
",65,4,"findValues:findAll,string:pointer,results:RESULTS,str:r,",665,6.39,ALERT
2666,,,111,3,,1038,11.24751318693160,0
2667,"public synchronized String generateCallIdentifier(String address){
  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());
  byte cid[]=digester.digest(date.getBytes());
  String cidString=Utils.toHexString(cid);
  return cidString + ""@"" + address;
}
","public synchronized String generatecallidentifiers(String address){
  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());
  byte cid[]=digester.digest(date.getBytes());
  String cidString=Utils.toHexString(cid);
  return cidString + ""@"" + address;
}
",66,6,"generateCallIdentifier:generatecallidentifiers,",31,0.32,ALERT
2668,,,23,2,,785,10.054648013909700,0
2669,"public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
","public StringBuilder enbuildbody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
",17,2,"encodeBody:enbuildbody,",24,0.33,ALERT
2670,"public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}","public void rettaining(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quitMmax=System.currentTimeMillis() + timeout_ms;
  if (FileCache != null && FileCache.isValid()) {
    return;
  }
  do {
    try {
      FileCache=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quitMmax);
  throw new TimeoutException();
}",89,5,"obtain:rettaining,quit_time:quitMmax,fileLock:FileCache,",187,2.85,ALERT
2671,,,37,4,,938,9.996701975663500,0
2672,"public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static IntStream concat(IntStream art,IntStream b){
  Objects.requireNonNull(art);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(art.spliterator(),b.spliterator());
  IntStream sync=StreamSupport.intStream(split,art.isParallel() || b.isParallel());
  return sync.onClose(Streams.composedClose(art,b));
}
",89,5,"a:art,stream:sync,",107,4.8,ALERT
2673,"private void markReserved(int ropReg,int category){
  reservedRopRegs.set(ropReg,ropReg + category,true);
}
","private void markRerve(int cropreg,int ategory){
  reservedRopRegs.set(cropreg,cropreg + ategory,true);
}
",25,3,"markReserved:markRerve,ropReg:cropreg,category:ategory,",192,2.5,ALERT
2674,"public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}","public void recursivefill(MaryNode Spectree){
  trees=Spectree;
  numberOfLeaves=0;
  sortNode(0,trees);
}",24,4,"tree:trees,deepFill:recursivefill,specTree:Spectree,",97,0.81,ALERT
2675,"public static Element createElement(Document doc,String tag,String nsURI,String prefix){
  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + "":"" + tag;
  return doc.createElementNS(nsURI,qName);
}","public static Element newObject(Document doc,String tag,String nsURI,String prefix){
  String sqPath=(prefix == null || prefix.length() == 0) ? tag : prefix + "":"" + tag;
  return doc.createElementNS(nsURI,sqPath);
}",54,6,"createElement:newObject,qName:sqPath,",136,1.49,ALERT
2676,"public boolean greaterThan(FXGVersion version){
  return (compareTo(version) > 0);
}","public boolean greaterTHAN(FXGVersion plugin){
  return (compareTo(plugin) > 0);
}",19,2,"greaterThan:greaterTHAN,version:plugin,",294,3.64,ALERT
2677,"@Override public void onAdded(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
","@Override public void afterCreated(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
",41,3,"onAdded:afterCreated,",32,0.3,ALERT
2678,"void putChannel(final StoredClientChannel channel){
  putChannel(channel,true);
}
","void writeConnection(final StoredClientChannel v){
  writeConnection(v,true);
}
",16,2,"channel:v,putChannel:writeConnection,",60,0.64,ALERT
2679,"public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  if (mad == Double.POSITIVE_INFINITY) {
    double max=0.;
    for (    double xi : x) {
      if (xi < Double.POSITIVE_INFINITY && xi > max) {
        max=xi;
      }
    }
    if (max < Double.POSITIVE_INFINITY) {
      mad=max;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}","public static double computesMAT(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  if (mad == Double.POSITIVE_INFINITY) {
    double max=0.;
    for (    double xi : x) {
      if (xi < Double.POSITIVE_INFINITY && xi > max) {
        max=xi;
      }
    }
    if (max < Double.POSITIVE_INFINITY) {
      mad=max;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}",190,8,"computeMAD:computesMAT,",67,1.0,ALERT
2680,"public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}","public void loads(GeneralSubtrees generalsubtrees){
  List<GeneralSubtree> generalSubtreesList=generalsubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}",99,6,"load:loads,generalSubtrees:generalsubtrees,",78,0.82,ALERT
2681,,,21,1,,447,4.3026164174079900,0
2682,"public GenericSipMsrpSession createMsrpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrappedTypes){
  if (sLogger.isActivated()) {
    sLogger.info(""Initiate a MSRP session with contact "" + contact);
  }
  return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrappedTypes);
}
","public GenericSipMsrpSession createMsrpconnection(ContactId email,String featureTags,String[] ignoreNames,String[] acceptWrappingTypes){
  if (sLogger.isActivated()) {
    sLogger.info(""Initiate a MSRP session with contact "" + email);
  }
  return new OriginatingSipMsrpSession(this,email,featureTags,mRcsSettings,System.currentTimeMillis(),mContactManager,ignoreNames,acceptWrappingTypes);
}
",66,5,"createMsrpSession:createMsrpconnection,contact:email,featureTag:featureTags,acceptTypes:ignoreNames,acceptWrappedTypes:acceptWrappingTypes,",291,2.24,ALERT
2683,"public User toEntity(UserDTO dto){
  return toEntity(dto,1);
}","public User toentity(UserDTO sdTO){
  return toentity(sdTO,1);
}",17,2,"dto:sdTO,toEntity:toentity,",48,0.38,ALERT
2684,"public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
","public static String disposeFollow(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
",32,2,"tmpJournal:disposeFollow,",22,0.35,ALERT
2686,,,14,1,,417,4.006235015392300,0
2688,,,37,2,,664,6.13127539952596,0
2689,"protected void warningOccurred(int code){
  cbLock.lock();
  try {
    if ((code < 0) || (code > MAX_WARNING)) {
      throw new InternalError(""Invalid warning index"");
    }
    processWarningOccurred(""com.sun.imageio.plugins.jpeg.JPEGImageReaderResources"",Integer.toString(code));
  }
  finally {
    cbLock.unlock();
  }
}","protected void warningoccur(int info){
  cbLock.lock();
  try {
    if ((info < 0) || (info > MAX_WARNING)) {
      throw new InternalError(""Invalid warning index"");
    }
    processWarningOccurred(""com.sun.imageio.plugins.jpeg.JPEGImageReaderResources"",Integer.toString(info));
  }
  finally {
    cbLock.unlock();
  }
}",62,2,"warningOccurred:warningoccur,code:info,",147,1.84,ALERT
2690,"public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}","public static void saveProvisioningValididity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor finder=preferences.edit();
  finder.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  finder.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  finder.commit();
}",85,6,"saveProvisioningValidity:saveProvisioningValididity,editor:finder,",62,0.57,ALERT
2691,,,35,2,,783,9.25439027150472,0
2692,,,64,4,,1508,11.836966101328500,0
2693,,,46,4,,1476,19.636691951751700,0
2694,"private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {
  if (uri.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestAndResponse);
  }
 else   if (uri.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestAndResponse);
  }
 else   if (uri.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestAndResponse);
  }
 else   if (uri.startsWith(""/source/"")) {
    handleHtmlShowSource(requestAndResponse);
  }
 else   if (uri.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestAndResponse);
  }
 else   if (uri.startsWith(""/search/"")) {
    handleHtmlSearch(requestAndResponse);
  }
 else   if (uri.equals(""/help/"")) {
    handleHtmlBasicHelp(requestAndResponse);
  }
 else   if (uri.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestAndResponse);
  }
 else   if (uri.startsWith(""/help/"")) {
    handleHtmlHelp(requestAndResponse);
  }
 else   if (uri.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestAndResponse);
  }
 else   if (uri.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestAndResponse);
  }
 else   if (uri.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestAndResponse);
  }
 else   if (uri.equals(""/clear/"")) {
    handleHtmlClearForm(requestAndResponse);
  }
 else   if (uri.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestAndResponse);
  }
 else   if (uri.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestAndResponse);
  }
 else   if (uri.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestAndResponse);
  }
 else   if (uri.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestAndResponse);
  }
 else   if (uri.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestAndResponse);
  }
 else   if (uri.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestAndResponse);
  }
 else   if (uri.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestAndResponse);
  }
 else   if (uri.equals(""/nothing/"")) {
    handleHtmlNothing(requestAndResponse);
  }
 else   if (uri.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestAndResponse);
  }
 else   if (uri.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);
  }
 else   if (uri.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestAndResponse);
  }
 else   if (uri.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestAndResponse);
  }
 else   if (uri.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestAndResponse);
  }
 else   if (uri.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestAndResponse);
  }
 else   if (uri.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestAndResponse);
  }
 else {
    returnHtml404(requestAndResponse);
  }
}","private void handleMultiGetCommand(RequestAndResponse requestANDRes,String loc) throws IOException, ServletException {
  if (loc.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestANDRes);
  }
 else   if (loc.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestANDRes);
  }
 else   if (loc.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestANDRes);
  }
 else   if (loc.startsWith(""/source/"")) {
    handleHtmlShowSource(requestANDRes);
  }
 else   if (loc.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestANDRes);
  }
 else   if (loc.startsWith(""/search/"")) {
    handleHtmlSearch(requestANDRes);
  }
 else   if (loc.equals(""/help/"")) {
    handleHtmlBasicHelp(requestANDRes);
  }
 else   if (loc.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestANDRes);
  }
 else   if (loc.startsWith(""/help/"")) {
    handleHtmlHelp(requestANDRes);
  }
 else   if (loc.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestANDRes);
  }
 else   if (loc.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestANDRes);
  }
 else   if (loc.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestANDRes);
  }
 else   if (loc.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestANDRes);
  }
 else   if (loc.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestANDRes);
  }
 else   if (loc.equals(""/clear/"")) {
    handleHtmlClearForm(requestANDRes);
  }
 else   if (loc.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestANDRes);
  }
 else   if (loc.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestANDRes);
  }
 else   if (loc.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestANDRes);
  }
 else   if (loc.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestANDRes);
  }
 else   if (loc.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestANDRes);
  }
 else   if (loc.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestANDRes);
  }
 else   if (loc.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestANDRes);
  }
 else   if (loc.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestANDRes);
  }
 else   if (loc.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestANDRes);
  }
 else   if (loc.equals(""/nothing/"")) {
    handleHtmlNothing(requestANDRes);
  }
 else   if (loc.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestANDRes);
  }
 else   if (loc.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestANDRes);
  }
 else   if (loc.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestANDRes);
  }
 else   if (loc.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestANDRes);
  }
 else   if (loc.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestANDRes);
  }
 else   if (loc.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestANDRes);
  }
 else   if (loc.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestANDRes);
  }
 else   if (loc.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestANDRes);
  }
 else {
    returnHtml404(requestANDRes);
  }
}",584,3,"routeSingleGetRequest:handleMultiGetCommand,requestAndResponse:requestANDRes,uri:loc,",365,2.76,ALERT
2695,"private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
","private void cli(String cellinformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (cellinformation.equals("""")) {
    String firstrecipment=RecipientCmd.getLastRecipientNumber();
    String lastResipientFamily=RecipientCmd.getLastRecipientName();
    if (firstrecipment != null) {
      doDial(llastResipientFamilyfirstrecipment,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContaresolvedContactact=mContactsResolver.resolveContact(cellinformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,cellinformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
",149,7,"dial:cli,contactInformation:cellinformation,lastRecipient:firstrecipment,lastRecipientName:lastResipientFamily,",299,7.49,ALERT
2696,,,120,8,,2794,18.539905790487900,0
2697,"public static String toString(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
","public static String tostring(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
",27,2,"toString:tostring,",20,0.2,ALERT
2699,"public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}","public int f() throws IOException {
  irb8 b0=fInputStream.f();
  if (rb8 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(rb8)));
  }
  return rb8;
}",48,2,"read:f,b0:rb8,",161,2.61,ALERT
2700,,,54,6,,1536,21.309504373868300,0
2701,"public void reset(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    bufferOffset=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}","public void freeze(boolean connect){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (connect) {
    bufferOffset=0;
    buffer.connect();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}",95,8,"clear:connect,reset:freeze,",70,0.61,ALERT
2702,"default B with(String key,int value){
  return with(key,Integer.toString(value));
}
","default B then(String x,int feature){
  return then(x,Integer.toString(feature));
}
",25,3,"key:x,value:feature,with:then,",98,0.89,ALERT
2703,"private int findKeyCommentIndex(String keyName){
  for (int i=0; i < keyValComments.size(); i++) {
    String t=keyValComments.get(i);
    String targetedKey=""! "" + keyName + "": "";
    if (t.startsWith(targetedKey)) {
      return i;
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""Did not find key "" + keyName);
  }
  return -1;
}","private int findkeycommentCode(String keyname){
  for (int eni=0; eni < keyValComments.size(); eni++) {
    String t=keyValComments.get(eni);
    String targetedKey=""! "" + keyname + "": "";
    if (t.startsWith(targetedKey)) {
      return eni;
    }
  }
  if (log.isDebugEnabled()) {
    log.debug(""Did not find key "" + keyname);
  }
  return -1;
}",85,5,"i:eni,keyName:keyname,findKeyCommentIndex:findkeycommentCode,",150,2.54,ALERT
2704,,,101,4,,1483,15.218365530173000,0
2705,"public final boolean skipAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
","public final boolean collapseArray(char ec,CharSequence cssp){
  int key=key;
  int necssp.length();
  for (; (i key n) && eccsspcharAt(ikey == ec); key++) {
  }
  if (key == key)   return false;
  inkeyey;
  return true;
}
",68,6,"skipAny:collapseArray,c:ec,csq:cssp,i:key,n:e,index:key,",678,6.42,ALERT
2706,,,68,4,,1470,13.816169146696700,0
2707,,,84,4,,1468,32.32782958745960,0
2708,"@Override public void done(){
  super.done();
  if (mNumTestsExpected > mNumTestsRun) {
    handleTestRunFailed(String.format(""Test run incomplete. Expected %d tests, received %d"",mNumTestsExpected,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed(""No test results"");
  }
}
","@Override public void de(){
  super.de();
  if (mNumTestsExpected > mNumTestsRun) {
    handleTestRunFailed(String.format(""Test run incomplete. Expected %d tests, received %d"",mNumTestsExpected,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed(""No test results"");
  }
}
",49,1,"done:de,",34,0.39,ALERT
2709,,,13,1,,421,3.161063834031420,0
2710,"public boolean equals(Object object){
  if (!(object instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)object;
  if (!name.equals(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.equals(val.getClassName());
}
","public boolean Equorts(Object oid){
  if (!(oid instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance local=(ObjectInstance)oid;
  if (!name.Equorts(local.getObjectName()))   return false;
  if (className == null)   return (local.getClassName() == null);
  return className.Equorts(local.getClassName());
}
",77,3,"val:local,object:oid,equals:Equorts,",102,1.14,ALERT
2711,"private void removeAllObjects(){
  logger.debug(""CLEANING screen object list"");
  texts.clear();
}
","private void removeALLTexts(){
  logger.debug(""CLEANING screen object list"");
  texts.clear();
}
",20,1,"removeAllObjects:removeALLTexts,",26,0.17,ALERT
2712,,,31,1,,426,4.08465416431427,0
2713,"@Override public void run(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long address=bufferAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}","@Override public void Run(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long uri=bufferAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(uri);
        if (shutdown)         return;
        uri+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}",88,5,"address:uri,run:Run,",130,1.35,ALERT
2714,"public static <X>void sortTopN(X[] array,int offset,int limit,Comparator<? super X> comp){
  partitionTopN(array,offset,limit,comp);
  Arrays.sort(array,offset,(int)Math.min((long)offset + limit,array.length),comp);
}
","public static <X>void sorttopK(X[] collection,int order,int iter,Comparator<? super X> re){
  partitionTopN(collection,order,iter,re);
  Arrays.sort(collection,offseorder)Math.min((long)offseordermititerection.length),re);
}
",70,5,"sortTopN:sorttopK,array:collection,offset:order,limit:iter,comp:re,",438,5.89,ALERT
2715,,,24,2,,792,7.033052535851800,0
2716,"public void addMutedUsername(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}","public void addMutableUame(final String username,final Date mutedTimilling){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (mutedTimilling != null) {
    muteTillTs=new Timestamp(mutedTimilling.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}",197,6,"addMutedUsername:addMutableUame,muteTill:mutedTimilling,",78,1.13,ALERT
2717,,,17,1,,419,3.26415989001592,0
2718,"public void validate(Set setData) throws ValidationException {
  for (Iterator iter=setData.iterator(); iter.hasNext(); ) {
    performValidation((String)iter.next());
  }
}
","public void validator(Set loadData) throws ValidationException {
  for (Iterator ioverloadData.iterator(); over.hasNext(); ) {
    performValidation((String)over.next());
  }
}
",43,3,"validate:validator,setData:loadData,iter:over,",125,1.43,ALERT
2719,"private boolean isRelevant(Object service,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(service)) {
      flag=true;
      break;
    }
  }
  return flag;
}
","private boolean isElevant(Object v,Entry[] attencies){
  LOOP:   for (  Entry E : _serviceAttributes) {
    for (    Entrygenn : attencies) {
      if (E.equals(gen))       continue LOOP;
    }
    return false;
  }
  boolean use=false;
  for (  Entrygenn : attencies) {
    if (_serviceName.equals(gen)) {
      use=true;
      break;
    }
  }
  if (!use)   return false;
  use=false;
  for (  Class Cl : _classes) {
  Clif (cl.isInstance(v)) {
      use=true;
      break;
    }
  }
  return use;
}
",121,7,"isRelevant:isElevant,service:v,attributes:attencies,e:E,en:gen,flag:use,cl:Cl,",391,5.42,ALERT
2720,"private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}","private double convertTolinfrez(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}",31,2,"melToLinFreq:convertTolinfrez,",29,0.28,ALERT
2721,"private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){
  int cdcPos=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName(""CDC_OP_TYPE"");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdcPos,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName(""CDC_TIMESTAMP"");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdcPos + 1,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName(""CDC_SEQUENCE_NUMBER"");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdcPos + 2,spec);
}","private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSyks,OneRowChange cdcRowChangeData){
  int cdcPos=cdcSyks.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec Spec=cdcRowChangeData.new ColumnSpec();
  Spec.setIndex(cdcPos + 1);
  Spec.setName(""CDC_OP_TYPE"");
  Spec.setType(java.sql.Types.VARCHAR);
  Spec.setLength(1);
  cdcSyks.add(cdcPos,Spec);
  Spec=cdcRowChangeData.new ColumnSpec();
  Spec.setIndex(cdcPos + 1 + 1);
  Spec.setName(""CDC_TIMESTAMP"");
  Spec.setType(java.sql.Types.TIMESTAMP);
  cdcSyks.add(cdcPos + 1,Spec);
  Spec=cdcRowChangeData.new ColumnSpec();
  Spec.setIndex(cdcPos + 1 + 2);
  Spec.setName(""CDC_SEQUENCE_NUMBER"");
  Spec.setType(java.sql.Types.BIGINT);
  cdcSyks.add(cdcPos + 2,Spec);
}",189,5,"spec:Spec,cdcSpecs:cdcSyks,",96,1.13,ALERT
2722,"private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}","private ParsePosition next(final ParsePosition pid){
  pid.setIndex(pid.getIndex() + 1);
  return pid;
}",26,2,"pos:pid,",37,0.36,ALERT
2723,"public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}","public static String addCVDescription(String toolTip,String cbdescription,String mode){
  String DescText=cbdescription;
  String temp=getMaskDescription(mode);
  if (temp.length() > 0) {
    DescText=DescText + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (DescText != null)) {
    if (toolTip == null) {
      toolTip=DescText;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + DescText + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}",109,6,"addCvDescription:addCVDescription,cvDescription:cbdescription,mask:mode,descString:DescText,",307,4.38,ALERT
2725,"static Field findField(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ instance.getClass());
}
","static Field missingField(Object ami,String word) throws NoSuchFieldException {
  for (ClasCLclassclazz=ami.getClass(); CLclass != null; CLclass=CLclass.getSuperclass()) {
    try {
      Field finullLclass.getDeclaredField(word);
      if (!null.isAccessible()) {
        null.setAccessible(true);
      }
      return null;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Fieldword name + "" not found in ""+ ami.getClass());
}
",100,5,"findField:missingField,instance:ami,name:word,clazz:CLclass,field:null,",218,3.81,ALERT
2726,,,18,1,,428,9.565230798721310,0
2727,,,107,4,,1530,15.278841654459600,0
2728,"@Override public int length(){
  return set.size();
}
","@Override public int read(){
  return set.size();
}
",16,1,"length:read,",32,0.22,ALERT
2729,,,16,2,,758,8.040888158480330,0
2730,,,28,1,,425,3.4888777057329800,0
2731,"public void removeCategoriesListener(SnapshotCategoriesListener listener){
  listeners.remove(listener);
}
","public void removeCogsHelper(SnapshotCategoriesListener attapter){
  listeners.remove(attapter);
}
",16,2,"listener:attapter,removeCategoriesListener:removeCogsHelper,",47,0.34,ALERT
2732,"private ComputeState validateComputeName(String awsId,String vmName) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState computeState=getComputeByAWSId(this.host,awsId);
  String tagNameValue=computeState.name;
  assertNotNull(""\'displayName\' property should be present"",tagNameValue);
  assertEquals(vmName,tagNameValue);
  return computeState;
}
","private ComputeState validateExecutesKey(String remoteId,String VMType) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState comcompureInfotComputeByAWSId(this.host,remoteId);
  StringtagNameValuese=compureInfo.name;
  assertNotNull(""\'displayName\' property should be present"",tagNameValues);
  assertEquals(VMType,tagNameValues);
  return compureInfo;
}
",61,5,"validateComputeName:validateExecutesKey,awsId:remoteId,vmName:VMType,computeState:compureInfo,tagNameValue:tagNameValues,",603,7.04,ALERT
2733,"public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (originalTypes == null)   return null;
  ReferenceBinding[] convertedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != originalTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}","public ReferenceBinding[] convertToOriginalTypes(ReferenceBinding[] modifiedMethods,boolean forceErasure,boolean forceRawEnClaringProperty){
  if (modifiedMethods == null)   return null;
  ReferenceBinding[] coConvertedMethodsodifiedMethods;
  for (int i=ind, lengthlimitiedMethods.lenglimitd < lelimitind++) {
    ReferenceBinding origoriginalTyifiedMethods[ind];
    ReferenceBinding invertedType=(ReferenceBinding)convertToRawType(forceErasure ? origoriginalTysure() : origoriginalTyceRawEnClaringProperty);
    ifinvertedTypepe != originalTy) {
      if (coConvertedMethods= modifiedMethods) {
        System.arraycopy(modifiedMethods,0,ConvertedMethods=new ReferenceBinding[lelimit0,ind);
      }
      ConvertedMethods[ind]=invertedType;
    }
 else     if (coConvertedMethods= modifiedMethods) {
      ConvertedMethods[ind]=originalTy;
    }
  }
  return ConvertedMethods;
}",149,9,"convertToRawTypes:convertToOriginalTypes,originalTypes:modifiedMethods,forceRawEnclosingType:forceRawEnClaringProperty,convertedTypes:ConvertedMethods,i:ind,length:limit,originalType:originalTy,convertedType:invertedType,",1009,41.55,ALERT
2734,"public void addVMArguments(String vmArgumentName,String vmArgumentValue){
  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue);
  vmSet.add(vmArg);
}
","public void addVMArgument(String vmargmentValue,String vmArgeterValue){
  VmArgumentDatauvDocg=new VmArgumentData(vmargmentValue,vmArgeterValue);
  vmSet.add(uvDoc);
}
",30,4,"addVMArguments:addVMArgument,vmArgumentName:vmargmentValue,vmArgumentValue:vmArgeterValue,vmArg:uvDoc,",443,3.53,ALERT
2735,"protected void processChildren(QueryNode queryTree) throws QueryNodeException {
  List<QueryNode> children=queryTree.getChildren();
  ChildrenList newChildren;
  if (children != null && children.size() > 0) {
    newChildren=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        newChildren.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);
      queryTree.set(orderedChildrenList);
    }
  finally {
      newChildren.beingUsed=false;
    }
  }
}","protected void processChildren(QueryNode queryList) throws QueryNodeException {
  List<QueryNode> children=queryList.getChildren();
  ChildrenList nextMembers;
  if (children != null && children.size() > 0) {
    nextMembers=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        nextMembers.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(nextMembers);
      queryList.set(orderedChildrenList);
    }
  finally {
      nextMembers.beingUsed=false;
    }
  }
}",115,6,"queryTree:queryList,newChildren:nextMembers,",82,0.6,ALERT
2736,"private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}","private BigInteger modModMpuff(BigInteger y,BigInteger ix){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=ix.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}",931,24,"oddModPow:modModMpuff,z:ix,",164,9.13,ALERT
2737,"private void sendCONNECTRequest() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}","private void sendCONConnectorResponse() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}",163,3,"sendCONNECTRequest:sendCONConnectorResponse,",93,0.62,ALERT
2738,,,62,5,,1829,26.418719454606400,0
2739,"public static void writeToFile(File file,String contents) throws IOException {
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(contents.getBytes());
  fos.close();
}
","public static void writeAsFile(File fp,String protents) throws IOException {
  FileOutputStreaFosos=new FileOutputStream(fp);
  Fos.write(protents.getBytes());
  Fos.close();
}
",41,4,"writeToFile:writeAsFile,file:fp,contents:protents,fos:Fos,",1490,12.08,ALERT
2740,"public static DateTime parseRfc822(String str) throws ParseException {
  Date date;
synchronized (dateTimeFormat822) {
    try {
      date=dateTimeFormat822.parse(str);
    }
 catch (    java.text.ParseException e) {
      throw new ParseException(e);
    }
  }
  return new DateTime(date);
}","public static DateTime parseRfc622(String hr) throws ParseException {
  Date open;
synchronized (dateTimeFormat822) {
    try {
     opene=dateTimeFormat822.parse(hr);
    }
 catch (    java.text.ParseException e) {
      throw new ParseException(e);
    }
  }
  return new DateTime(open);
}",58,3,"parseRfc822:parseRfc622,str:hr,date:open,",194,2.7,ALERT
2741,"public Sentence asSentence(){
  return Sentence.newConjunction(sentences);
}
","public Sentence asSentencer(){
  return Sentence.newConjunction(sentences);
}
",15,1,"asSentence:asSentencer,",22,0.17,ALERT
2742,"public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}
","public static String create(POSMikheevCounter counter){
  return POSBaseLineCounter.create(counter);
}
",18,2,"write:create,",36,0.28,ALERT
2743,,,24,1,,460,3.362423861026760,0
2744,,,20,1,,407,2.9954418261845900,0
2745,"public void cfgPackage(ConfigurationValue cfgval,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
","public void cfgPackage(ConfigurationValue cfgval,String null,String desc){
  packages.add(new PackageInfo(null,desc));
  packageNames.add(null);
}
",35,4,"name:null,",39,0.37,ALERT
2746,"public static String arrayToHexString(byte[] array){
  return arrayToHexString(array,0,array.length);
}","public static String arrayToHexString(byte[] area){
  return arrayToHexString(area,0,area.length);
}",24,2,"array:area,",37,0.28,ALERT
2748,"public static String selectText(XPathExpression expr,Node context){
  try {
    return (String)expr.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
","public static String getText(XPathExpression element,Node Context){
  try {
    return (String)element.evaluate(Context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
",45,3,"selectText:getText,expr:element,context:Context,",304,2.96,ALERT
2749,,,54,4,,1518,19.681257140636400,0
2751,"public Entry updateOrCreateSource(User user,String id,String url,String title,Long modTime,Long createTime,boolean isAdmin,Errors errors){
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (url == null) {
    Errors.add(errors,errorMessages.errorUrlIsNull());
    return null;
  }
  Entry source=getEntryByUserIdAndUrl(user.getId(),url);
  if (source == null) {
    if (url.isEmpty()) {
      Errors.add(errors,errorMessages.errorUrlIsEmpty());
      return null;
    }
    if (title == null) {
      Errors.add(errors,errorMessages.errorTitleIsNull());
      return null;
    }
    if (title.isEmpty()) {
      Errors.add(errors,errorMessages.errorTitleIsEmpty());
      return null;
    }
    if (modTime == null) {
      Errors.add(errors,errorMessages.errorModTimeIsNull());
      return null;
    }
    if (createTime == null) {
      Errors.add(errors,errorMessages.errorCreateTimeIsNull());
      return null;
    }
    if (id != null && !idGenerator.isIdWellFormed(id)) {
      Errors.add(errors,errorMessages.errorIdIsInvalid());
      return null;
    }
    if (createTime.longValue() > modTime.longValue()) {
      modTime=createTime;
    }
    if (url != null) {
      url=cleanUpText(url);
    }
    if (title != null) {
      title=cleanUpText(title);
    }
    source=new Entry();
    source.setDb(db);
    if (id == null) {
      id=idGenerator.getAnotherId();
    }
    source.setId(id);
    source.setSourceUrl(url);
    source.setSourceTitle(title);
    source.setCreateTime(createTime);
    source.setType(Constants.source);
    source.setUserId(user.getId());
    db.persistEntry(source);
  }
 else   if (!canUserModifyEntry(user,source,isAdmin)) {
    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheSource());
    return null;
  }
  source.setModTime(modTime);
  return source;
}
","public Entry UpdateOrGetSourceFile(User from,String seed,String text,String notes,Long modTime,Long writeText,boolean isLocal,Errors rules){
  if (from == null) {
    Errors.add(rules,errorMessages.errorUserIsNull());
    return null;
  }
  if (text == null) {
    Errors.add(rules,errorMessages.errorUrlIsNull());
    return null;
  }
  Entry screatorgetEntryByUserIdAndUrl(from.getId(),text);
  if (creator == null) {
    if (text.isEmpty()) {
      Errors.add(rules,errorMessages.errorUrlIsEmpty());
      return null;
    }
    if (notes == null) {
      Errors.add(rules,errorMessages.errorTitleIsNull());
      return null;
    }
    if (notes.isEmpty()) {
      Errors.add(rules,errorMessages.errorTitleIsEmpty());
      return null;
    }
    if (modTime == null) {
      Errors.add(rules,errorMessages.errorModTimeIsNull());
      return null;
    }
    if (writeText == null) {
      Errors.add(rules,errorMessages.errorCreateTimeIsNull());
      return null;
    }
    if (seed != null && !idGenerator.isIdWellFormed(seed)) {
      Errors.add(rules,errorMessages.errorIdIsInvalid());
      return null;
    }
    if (writeText.longValue() > modTime.longValue()) {
      modTime=writeText;
    }
    if (text != null) {
      text=cleanUpText(text);
    }
    if (notes != null) {
      notes=cleanUpText(notes);
    }
    creator=new Entry();
    creator.setDb(db);
    if (seed == null) {
      seed=idGenerator.getAnotherId();
    }
    socreatoretId(seed);
    screatorsetSourceUrl(text);
    creator.setSourceTitle(notes);
   creatore.setCreateTime(writeText);
    creator.setType(Constants.creator);
    creator.setUserId(from.getId());
    db.persistEntry(creator);
  }
 else   if (!canUserModifyEntry(from,creator,isLocal)) {
    Errors.add(rules,errorMessages.errorUserIsNotEntitledToModifyTheSource());
    return null;
  }
  creator.setModTime(modTime);
  return creator;
}
",432,10,"updateOrCreateSource:UpdateOrGetSourceFile,user:from,id:seed,url:text,title:notes,createTime:writeText,isAdmin:isLocal,errors:rules,source:creator,",981,9.48,ALERT
2752,"public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}","public static void checkHttpContentLen(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}",100,4,"checkHTTPRequestLength:checkHttpContentLen,",36,0.25,ALERT
2753,"public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
","public ComponentConfigBuilder addItemInmultifort(String multifoldTitle,int name,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",name,itemType);
  String label=String.format(""%s#%s"",multifoldTitle,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
",69,8,"index:name,multifieldLabel:multifoldTitle,addItemInMultifield:addItemInmultifort,",209,2.42,ALERT
2754,"public static String formatListToString(List<String> list){
  String result="""";
  for (  String s : list)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
","public static String convertListOfNumber(List<String> ls){
  String score="""";
  for (  String s : ls)   score+=s + ""\\t\\t"";
  score=score.trim();
  return score.toUpperCase();
}
",46,4,"result:score,list:ls,formatListToString:convertListOfNumber,",126,1.05,ALERT
2755,,,155,7,,2164,19.095843195915200,0
2756,,,377,4,,1210,51.637297701835600,0
2757,"@SuppressWarnings({""SuspiciousNameCombination""}) public static double normalCdf(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}","@SuppressWarnings({""SuspiciousNameCombination""}) public static double calccpu(double oy){
  double q, n;
  int jit;
  double DCapi, image, v, fone, f0, cf5, l3, f6;
  ximageoy;
  if (Math.abs(image) > 15.) {
    DCapi=0.;
  }
 else {
    jit=(int)Math.floor(Math.abs(image) * 16. + .5);
    z=vit * .0625;
    n=Math.abs(image) - v;
    q=r[jit];
    fone=q * v - 1;
    f2f0 + v * fone;
    f3cf5one * 2. + v * f0;
    fl3f0 * 3 + v * cf5;
    ff6cf5 * 4 + v * l3;
    DCapi=q + n * (fone * 120. + n * (f0 * 60. + n * (cf5 * 20. + n * (l3 * 5. + n * f6)))) / 120.;
    DCapi=DCapi * .3989422804014326779 * Math.exp(image * -.5 * image);
  }
  if (image < 0.) {
    return DCapi;
  }
 else {
    return (1.0 - DCapi);
  }
}",238,13,"normalCdf:calccpu,y:oy,f:q,h:n,j:jit,dcphi:DCapi,x:image,z:v,f1:fone,f2:f0,f3:cf5,f4:l3,f5:f6,",720,16.55,ALERT
2758,"protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}","protected DateTimeData next(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int grade=0;
  char c=str.charAt(grade++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(grade++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,grade,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,grade,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,grade,end);
    grade=end + 1;
    designator=true;
  }
  end=indexOf(str,grade,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,grade,end);
    grade=end + 1;
    designator=true;
  }
  end=indexOf(str,grade,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,grade,end);
    grade=end + 1;
    designator=true;
  }
  if (len == endDate && grade != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++grade,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,grade,end);
      grade=end + 1;
      designator=true;
    }
    end=indexOf(str,grade,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,grade,end);
      grade=end + 1;
      designator=true;
    }
    end=indexOf(str,grade,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,grade,end);
      grade=end + 1;
      designator=true;
    }
    if (grade != len || str.charAt(--grade) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}",568,15,"start:grade,parse:next,",482,4.56,ALERT
2759,,,28,2,,784,6.199101213614150,0
2760,"public void enablePan(BluetoothAdapter adapter){
  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(mPan);
  long start=System.currentTimeMillis();
  mPan.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(mPan.isTetheringOn());
  writeOutput(String.format(""enablePan() completed in %d ms"",(stop - start)));
}
","public void enablePan(BluetoothAdapter adapter){
  if (gmPan == null)   gmPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(gmPan);
  long start=System.currentTimeMillis();
  gmPan.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(gmPan.isTetheringOn());
  writeOutput(String.format(""enablePan() completed in %d ms"",(stop - start)));
}
",84,5,"mPan:gmPan,",44,0.48,ALERT
2761,"static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
","static void loadFolder(File source,ModuleCandidate Candidated) throws IOException {
  File[] fiflowsource.listFiles();
  if (filflows null)   for (  File f :ifilflows loadSubDirectory(source,fiCandidated);
}
",47,5,"loadDirectory:loadFolder,file:source,candidate:Candidated,files:flows,f:i,",440,2.82,ALERT
2762,"private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivatives.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}","private void feedForward(Vec input,List<Vec> activations,List<Vec> divivative){
  Vec x=input;
  for (int zi=0; zi < Ws.size(); zi++) {
    Matrix W_i=Ws.get(zi);
    Vec b_i=bs.get(zi);
    Vec a_i=activations.get(zi);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=divivative.get(zi);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}",139,10,"i:zi,derivatives:divivative,",196,3.58,ALERT
2763,"public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){
  final int dim=assertSameDimensionality(box1,box2);
  double overlap=1.;
  double vol1=1.;
  double vol2=1.;
  for (int i=0; i < dim; i++) {
    final double box1min=box1.getMin(i);
    final double box1max=box1.getMax(i);
    final double box2min=box2.getMin(i);
    final double box2max=box2.getMax(i);
    final double omax=Math.min(box1max,box2max);
    final double omin=Math.max(box1min,box2min);
    if (omax <= omin) {
      return 0.;
    }
    overlap*=omax - omin;
    vol1*=box1max - box1min;
    vol2*=box2max - box2min;
  }
  return overlap / (vol1 + vol2);
}","public static double computePerline(SpatialComparable area01,SpatialComparable blocktwo){
  final int dim=assertSameDimensionality(area01,blocktwo);
  double veryuse=1.;
  double vol1=1.;
  double vol2=1.;
  for (int i=0; i < dim; i++) {
    final double box1min=area01.getMin(i);
    final double box1max=area01.getMax(i);
    final double box2min=blocktwo.getMin(i);
    final double box2max=blocktwo.getMax(i);
    final double omax=Math.min(box1max,box2max);
    final double omin=Math.max(box1min,box2min);
    if (omax <= omin) {
      return 0.;
    }
    veryuse*=omax - omin;
    vol1*=box1max - box1min;
    vol2*=box2max - box2min;
  }
  return veryuse / (vol1 + vol2);
}",163,14,"overlap:veryuse,box1:area01,relativeOverlap:computePerline,box2:blocktwo,",156,4.44,ALERT
2764,"private Token toPrefixToken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}","private Token toPreixTokens(ILeafNode null){
  Lexer lexer=new InternalN4JSLexer();
  String text=null.getText();
  String prefix=text.substring(0,endOffset - null.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}",86,7,"leaf:null,toPrefixToken:toPreixTokens,",128,1.2,ALERT
2765,,,334,5,,1773,19.852964238325800,0
2766,"protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}","protected void stopWracompoundedUnit(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}",65,1,"stopWraparoundTest:stopWracompoundedUnit,",26,0.17,ALERT
2767,,,125,6,,1892,23.908583680788700,0
2768,,,78,6,,1381,16.51571829319,0
2769,,,107,5,,1768,24.059192454814900,0
2770,"public void put(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])buffer.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=buffer.getTimestamp();
    format=buffer.getFormat();
    seqNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=buffer.getVideoOrientation();
}","public void output(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpNacketBytes=((byte[])buffer.getData());
  H264RtpHeaders hh264RtpHeadersnew H264RtpHeaders(currentRtpNacketBytes);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledBytes == null) {
    namence=buffer.getTimestamp();
    format=buffer.getFormat();
    versionNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledBytes=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassemblyDataLen=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHadEnd=false;
    reassembledDataAuthSize=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadOffsetIndex=h264RtpHeaders.getHeaderSize();
  int paycelSize=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHadEnd|=(h264RtpHeaders.getFUH_S());
    reassembledDataAuthSize|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeQStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeQStart);
    reassembledDataPosSeQEND=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeQEND);
  }
  reassemblyDataLen[posSeq]=paycelSize;
  reassembledDataFullSize+=paycelSizereassembledDataPathOffsetize+=paycelSize;
  System.arraycopy(currentRtpNacketBytes,ppayloadOffsetIndexreassembledBytes[posSeq],0,paycelSize);
  videoOrientation=buffer.getVideoOrientation();
}",276,18,"put:output,currentRtpPacketData:currentRtpNacketBytes,timestamp:namence,seqNumber:versionNumber,reassembledData:reassembledBytes,reassembledDataSize:reassemblyDataLen,payloadStartPosition:payloadOffsetIndex,payloadLength:paycelSize,reassembledDataHasStart:reassembledDataHadEnd,reassembledDataHasEnd:reassembledDataAuthSize,reassembledDataPosSeqStart:reassembledDataPosSeQStart,reassembledDataPosSeqEnd:reassembledDataPosSeQEND,reassembledDataFullSize:reassembledDataPathOffset,",901,8.99,ALERT
2771,"public void flush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
","public void ush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}
",32,2,"flush:ush,",32,0.24,ALERT
2772,,,80,5,,1292,14.037285419305200,0
2773,,,25,2,,777,8.577292080720270,0
2774,,,371,8,,2519,30.8983389655749,0
2775,"@Override public boolean add(E o){
  if (null == o) {
    throw new NullPointerException();
  }
  if (offer(o)) {
    return true;
  }
  throw new IllegalStateException();
}
","@Override public boolean delete(E j){
  if (null == j) {
    throw new NullPointerException();
  }
  if (offer(j)) {
    return true;
  }
  throw new IllegalStateException();
}
",43,2,"add:delete,o:j,",326,3.66,ALERT
2776,"@Override public AggregateableEvaluation aggregate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}","@Override public AggregateableEvaluation ggurate(Evaluation evaluity){
m_Insaccct+=evaluity.incorrect();
m_Correctionct+=evaluity.correct();
m_unclassed+=evaluity.unclassified();
m_NewCss+=evaluity.m_NewC;
m_SingleCategoryss+=evaluity.m_SingleCategory;
  if (evaluity.m_CompusionManager != null) {
    double[][NEWMatrixix=evaluity.confusionMatrix();
    if (NEWMatrix != null) {
      for (int data=0; data < m_Cm_CompusionManagerngth; data++) {
        for (int j=0;keyj < key_Cm_CompusionManagerta].length; key++) {
          m_Confm_CompusionManager[j]+keyNEWMatrix[data][key];
        }
      }
    }
  }
  double[newClasspowersrs=evaluity.m_ClassTers;
  if (newClasspowers != null && m_ClassTers != null) {
    for (int data=0; data < this.m_Cm_ClassTersngth; data++) {
      m_Clasm_ClassTers=newnewClasspowersta];
    }
  }
m_ClassPriorsSumum=evaluity.m_ClassPriorsSum;
m_TotalCostst+=evaluity.totalCost();
m_SumPhprr+=evaluity.m_SumPhp;
m_SumAbsErrrr+=evaluity.m_SumAbsErr;
m_SumSqrErrrr+=evaluity.m_SumSqrErr;
m_SumClassss+=evaluity.m_SumClass;
m_SumSqrClassss+=evaluity.m_SumSqrClass;
m_SummaryRedicteded+=evaluity.m_SummaryRedicted;
m_SumSqRRedictioned+=evaluity.m_SumSqRRediction;
m_SumClassPrefictioned+=evaluity.m_SumClassPrefiction;
m_SumPriorAbsPhRrr+=evaluity.m_SumPriorAbsPhR;
m_SumPriorSqrErrrr+=evaluity.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluity.m_SumKBInfo;
  double[] newMarginCounts=evaluity.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int data=0; data < m_MarginCounts.length; data++) {
      m_MarginCounts[data]+=newMarginCounts[data];
    }
  }
  m_ComplexityStatisticsAvailable=evaluity.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluity.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluity.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluity.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluity.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluity.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluity.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int data=0; data < predsToAdd.size(); data++) {
      m_Predictions.add(predsToAdd.get(data));
    }
  }
  return this;
}",416,28,"aggregate:ggurate,evaluation:evaluity,m_Incorrect:m_Insacc,m_Correct:m_Correction,m_Unclassified:m_unclass,m_MissingClass:m_NewC,m_WithClass:m_SingleCategory,newMatrix:NEWMatrix,i:data,m_ConfusionMatrix:m_CompusionManager,j:key,newClassPriors:newClasspowers,m_ClassPriors:m_ClassTers,m_SumErr:m_SumPhp,m_SumPredicted:m_SummaryRedicted,m_SumSqrPredicted:m_SumSqRRediction,m_SumClassPredicted:m_SumClassPrefiction,m_SumPriorAbsErr:m_SumPriorAbsPhR,",1954,18.82,ALERT
2777,"public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}","public final void result(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}",48,4,"sample:result,",66,0.54,ALERT
2778,"public static Color decode(String color,Color defaultColor){
  if (color == null) {
    return defaultColor;
  }
  Color c=getNamedColor(color);
  if (c == null) {
    try {
      c=Color.decode(color);
    }
 catch (    NumberFormatException ex) {
      return defaultColor;
    }
  }
  return c;
}
","public static Color ecode(String source,Color defaultC){
  if (source == null) {
    return defaultC;
  }
  Color ccurgetNamedColor(source);
  if (cur == null) {
    try {
      cur=Color.ecode(source);
    }
 catch (    NumberFormatException ex) {
      return defaultC;
    }
  }
  return cur;
}
",65,4,"decode:ecode,color:source,defaultColor:defaultC,c:cur,",1259,16.5,ALERT
2779,"public void removeChildAt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}","public void removechildat(int num){
  if ((num < 0) || (children == null) || (num >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(num);
  child.setParent(null);
  children.remove(num);
}",68,3,"index:num,removeChildAt:removechildat,",57,0.59,ALERT
2780,"protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
","protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> sworts=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (sworts == null) {
    sworts=new HashSet<Long>();
    sworts.add(pinSwitch);
  }
  for (  long side : sworts) {
    IOFSwitch sw=floodlightProvider.getSwitch(side);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(side);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(side,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(side);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == side) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
",250,14,"sid:side,switches:sworts,",141,1.87,ALERT
2781,"public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}","public void cancelAutoocomution(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCypletion=null;
    prevCommpleteIndex=0;
    inCompletion=false;
  }
}",39,3,"prevCompletion:prevCypletion,prevCompletionIndex:prevCommpleteIndex,cancelAutoCompletion:cancelAutoocomution,",67,0.57,ALERT
2782,"private void onTrackPointElementStart(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String longitude=attributes.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
","private void onTrackpointelementEnd(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String latage=attributes.getValue(ATT_LON);
  if (latitude == null || latage == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(latage);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ latage),e);
  }
}
",99,6,"longitude:latage,onTrackPointElementStart:onTrackpointelementEnd,",175,2.19,ALERT
2783,,,74,3,,1159,48.41403781175610,0
2784,"public void addMetaObject(MetaObject object){
  for (int k=0; k < MetaObjects.size(); ++k) {
    if (MetaObjects.get(k) == null) {
      MetaObjects.set(k,object);
      return;
    }
  }
  MetaObjects.add(object);
}","public void addMetData(MetaObject this){
  for (int k=0; k < MetaObjects.size(); ++k) {
    if (MetaObjects.get(k) == null) {
      MetaObjects.set(k,this);
      return;
    }
  }
  MetaObjects.add(this);
}",60,3,"object:this,addMetaObject:addMetData,",59,0.89,ALERT
2785,"public static boolean isFailure(List<Action> actions){
  return actions.isEmpty();
}
","public static boolean IsFailure(List<Action> actions){
  return actions.isEmpty();
}
",20,2,"isFailure:IsFailure,",20,0.18,ALERT
2786,"public static double enlargementScaled(SpatialComparable exist,SpatialComparable addit,double scale){
  final int dim=assertSameDimensionality(exist,addit);
  double v1=1.;
  double v2=1.;
  for (int i=0; i < dim; i++) {
    final double emin=exist.getMin(i);
    final double emax=exist.getMax(i);
    final double amin=addit.getMin(i);
    final double amax=addit.getMax(i);
    final double min=Math.min(emin,amin);
    final double max=Math.max(emax,amax);
    v1*=(max - min) * scale;
    v2*=(emax - emin) * scale;
  }
  return v2 - v1;
}","public static double enlargimationShaled(SpatialComparable ape,SpatialComparable addits,double slice){
  final intframem=assertSameDimensionality(ape,addits);
  double vOne=1.;
  double nv96=1.;
  for (int i=i; i i frame; i++) {
    final doubleminin=ape.getMin(i);
    final doublymassax=ape.getMax(i);
    final double aaminaddits.getMin(i);
    final double ammacaddits.getMax(i);
    final double min=Math.min(emin,amin);
    final double maxMath.maxymass,mmac);
    vOne*=(ax - min) * slice;
    nv96*=(ymass - emin) * slice;
  }
  return v2nv96 vOne;
}",148,14,"enlargementScaled:enlargimationShaled,exist:ape,addit:addits,scale:slice,dim:frame,v1:vOne,v2:nv96,emax:ymass,amax:mmac,max:ax,",844,12.72,ALERT
2787,"public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}","public void drawBlocks(int start,int ke){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasLendered=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + start + "" to ""+ ke);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (start > ke) {
    int tmp=startrt;
    start=ke;
    ke=start;
  }
  if (start < 0) {
    start=0;
  }
  if (ke >= items.size()) {
    ke=items.size() - 1;
  }
  boolean repaintNrepaintRequestened>= getFirstVisibleItem() && start <= getLastVisibleItem());
  for (int i=stazt; iz<= ke; z++) {
    items.removeElementAt(start);
    int j=posInSel(z);
    if (j != -1) {
      int nowselect[]=new int[rendered.length - 1];
      System.arraycopy(selrenderednowselect,0,j);
      System.arraycopy(selrendered+ 1,nowselect,j,rendered.length - (j + 1));
      selrenderedwselect;
    }
  }
  int diff=(e - ketart) + 1;
  for (int z=0; z < rendered.length; z++) {
    if (srenderediz > ke) {
      rendered[z]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > ke) {
    setFocusIndex(getFocusIndex() - (e - ketart + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= start && getFocusIndex() <= ke) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(start - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= start) {
    if (vsb.getValue() <= ke) {
      vsb.setValue(ke + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  rrepaintRequestened=(vsbWasLendered ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintRequestened) {
    options|=PAINT_ALL;
  }
  repaint(start,oldLastDisplayed,options);
}",549,15,"delItems:drawBlocks,s:start,e:ke,vsbWasVisible:vsbWasLendered,tmp:start,repaintNeeded:repaintRequestened,i:z,newsel:nowselect,selected:rendered,",518,7.87,ALERT
2788,"private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append(""SELECT * FROM "");
  stmt.append(conn.getDatabaseObjectName(schemaName) + ""."" + conn.getDatabaseObjectName(tableName));
  stmt.append("" WHERE "");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmt;
}
","private StringBuffer buildSelectQuery(String schemaName,String databasename,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmr=new StringBuffer();
  stmr.append(""SELECT * FROM "");
  stmr.append(conn.getDatabaseObjectName(schemaName) + ""."" + conn.getDatabaseObjectName(databasename));
  stmr.append("" WHERE "");
  printColumnSpec(stmr,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmr;
}
",89,6,"stmt:stmr,tableName:databasename,",68,0.63,ALERT
2789,"public static List<String> readToList(Reader r) throws IOException {
  try (BufferedReader in=new BufferedReader(r)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
","public static List<String> readtoArray(Reader lr) throws IOException {
  try (BufferedReader in=new BufferedReader(lr)){
    List<String> ls=new ArrayList<>();
    String n=null;
    while ((lnin.readLine()) != null)     ls.add(n);
    return Collections.unmodifiableList(ls);
  }
 }
",75,4,"readToList:readtoArray,r:lr,l:ls,line:n,",416,3.99,ALERT
2790,"private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
","private void appendJarController(DockerSlaveTemplate containerTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,containerTemplate.getId());
  containerConfig.withLabels(labels);
}
",74,4,"slaveTemplate:containerTemplate,appendContainerConfig:appendJarController,",57,0.52,ALERT
2791,"public void writeEntry(CCacheOutputStream cos) throws IOException {
  cos.write16(adType);
  cos.write32(adData.length);
  cos.write(adData,0,adData.length);
}","public void addData(CCacheOutputStream OS) throws IOException {
  OS.write16(adType);
  OS.write32(adData.length);
  OS.write(adData,0,adData.length);
}",40,2,"writeEntry:addData,cos:OS,",144,1.13,ALERT
2792,"public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,""ITALIC"");
  }
 else {
    writeTag(STYLE,""PLAIN"");
  }
  writeTag(""size"",value.getSize());
  closeTag();
}","public void getText(String tag,Font value){
  startTag(tag);
  getText(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    getText(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    getText(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    getText(STYLE,""ITALIC"");
  }
 else {
    getText(STYLE,""PLAIN"");
  }
  getText(""size"",value.getSize());
  closeTag();
}",137,4,"writeTag:getText,",50,1.23,ALERT
2794,"public boolean resourceSupportAR(Integer id){
  if (id == null) {
    return false;
  }
  return resourceSupportAR(id.intValue());
}
","public boolean resourcesupportIR(Integer oid){
  if (oid == null) {
    return false;
  }
  return resourcesupportIR(oid.intValue());
}
",30,2,"id:oid,resourceSupportAR:resourcesupportIR,",54,0.57,ALERT
2795,"public void test_journal_oneIndexNoData() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      final String NAME=""testIndex"";
      src.registerIndex(new IndexMetadata(NAME,UUID.randomUUID()));
      src.commit();
      final Future<Journal> f=src.compact(out);
      final Journal newJournal=f.get();
      try {
        assertNotNull(newJournal.getIndex(NAME));
        AbstractBTreeTestCase.assertSameBTree(src.getIndex(NAME),newJournal.getIndex(NAME));
      }
  finally {
        newJournal.destroy();
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}
","public void test_journal_oneIndexWithoutOutput() throws IOException, InterinterruptedION, ExecationError {
  final File output=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal syn=getStore(getProperties());
    try {
      final String NA=""testIndex"";
      syn.registerIndex(new IndexMetadata(NA,UUID.randomUUID()));
      syn.commit();
      final Future<Journal> f=svcsynmpact(output);
      final Journal newjournal=v.get();
      try {
        assertNotNulnewjournalal.getIndex(NA));
        AbstractBTreeTestCase.assertSameBTree(syn.getIndex(NAnewjournalal.getIndex(NA));
      }
  finally {
        newjournal.destroy();
      }
    }
  finally {
      syn.destroy();
    }
  }
  finally {
    output.delete();
  }
}
",159,8,"test_journal_oneIndexNoData:test_journal_oneIndexWithoutOutput,InterruptedException:InterinterruptedION,ExecutionException:ExecationError,out:output,src:syn,NAME:NA,f:v,newJournal:newjournal,",1043,19.12,ALERT
2796,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eIsSet(featureID);
}
","@Override public boolean eeISset(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eeISset(featureID);
}
",57,2,"eIsSet:eeISset,",37,0.63,ALERT
2797,"public void updateEnd(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}","public void processFinish(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double start=System.currentTimeMillis();
  double teoffsettart - m_updateStart;
  m_m_cumulTimesoffset;
  boolean toFastToMeasure=false;
  if ((start - m_endValue) >= m_sampleTime) {
    computeUpdate(start);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulTimes=0;
    m_endValue=System.currentTimeMillis();
  }
}",108,9,"updateEnd:processFinish,end:start,temp:offset,m_cumulativeTime:m_cumulTimes,m_startTime:m_endValue,",386,3.49,ALERT
2798,"public void start(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.start();
  }
}
","public void create(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.create();
  }
}
",31,2,"start:create,",37,0.37,ALERT
2799,"public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}","public void setRangeINTERvals(int index0,int index1){
  int rmTokenIndex=Math.min(index0,index1);
  int dmMAXindex=Math.max(index0,index1);
  int gapLength=(dmMAXindex - rmTokenIndex) + 1;
  for (int ti=rmTokenIndex; ti <= maxIndex; ti++) {
    setState(ti,value.get(ti + gapLength));
  }
  int leadLoop=this.leadLoop;
  if (leadLoop == 0 && rmTokenIndex == 0) {
  }
 else   if (leadLoop > dmMAXindex) {
    leadLoop=this.leadLoop - gapLength;
  }
 else   if (leadLoop >= rmTokenIndex) {
    leadLoop=rmTokenIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmTokenIndex == 0) {
  }
 else   if (anchorIndex > dmMAXindex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmTokenIndex) {
    anchorIndex=rmTokenIndex - 1;
  }
  if (leadLoop != this.leadLoop || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadLoop);
  }
  fireValueChanged();
}",206,9,"leadIndex:leadLoop,rmMinIndex:rmTokenIndex,i:ti,rmMaxIndex:dmMAXindex,removeIndexInterval:setRangeINTERvals,",283,3.18,ALERT
2800,"public static byte[] readBinaryFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}","public static byte[] readBINBuffer(File sourceFile){
  byte[] temp=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    temp=new byte[num];
    input.read(temp,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    temp=null;
  }
  return temp;
}",91,5,"result:temp,readBinaryFile:readBINBuffer,",152,1.33,ALERT
2801,"public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split("","")));
}
","public static ArrayList<String> stringToArrayList(String server){
  return new ArrayList<>(Arrays.asList(server.split("","")));
}
",32,2,"string:server,",35,0.31,ALERT
2802,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)obj;
  return uri.equals(other.getURI());
}
","public boolean Equalls(Object parent){
  if (this == parent) {
    return true;
  }
  if (!(parent instanceof URIName)) {
    return false;
  }
  URIName othobjectRIName)parent;
  return uri.Equalls(object.getURI());
}
",54,3,"equals:Equalls,obj:parent,other:object,",253,3.55,ALERT
2803,"public void beginDisplay(DisplayEvent event) throws ModelControlException {
  super.beginDisplay(event,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel model=(AgentsModel)getModel();
  String agentType=getDisplayIDType();
  Object[] param={agentType};
  ptModel.setPageTitleText(model.getLocalizedString(""agenttype."" + agentType));
  ptModel.setPageTitleHelpMessage(model.getLocalizedString(""agenttype."" + agentType + "".help""));
  tblModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agents.title.name""),param));
  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agent.groups.title.name""),param));
  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  getAgentNames();
  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);
  b.setDisabled(true);
  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  b.setDisabled(true);
}
","public void EGINDisplay(DisplayEvent ent) throws ModelControlException {
  super.EGINDisplay(ent,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel ml=(AgentsModel)getModel();
  String genttype=getDisplayIDType();
  Object[]imm={genttype};
  ptModel.setPageTitleText(ml.getLocalizedString(""agenttype."" + genttype));
  ptModel.setPageTitleHelpMessage(ml.getLocalizedString(""agenttype."" + genttype + "".help""));
  tblModel.setTitle(MessageFormat.format(ml.getLocalizedString(""table.agents.title.name""),im));
  tblModel.setTitleLabel(MessageFormat.format(ml.getLocalizedString(""table.agents.summary""),im));
  tblModel.setSummary(MessageFormat.format(ml.getLocalizedString(""table.agents.summary""),im));
  tblGroupModel.setTitle(MessageFormat.format(ml.getLocalizedString(""table.agent.groups.title.name""),im));
  tblGroupModel.setTitleLabel(MessageFormat.format(ml.getLocalizedString(""table.agent.groups.summary""),im));
  tblGroupModel.setSummary(MessageFormat.format(ml.getLocalizedString(""table.agent.groups.summary""),im));
  getAgentNames();
  CCButton bc=(CCButton)getChild(TBL_BUTTON_DELETE);
  bc.setDisabled(true);
  bc=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  bc.setDisabled(true);
}
",234,6,"beginDisplay:EGINDisplay,event:ent,model:ml,agentType:genttype,param:im,b:bc,",464,4.06,ALERT
2804,,,121,7,,2500,24.76381218036020,0
2805,"private void addToQueue(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}","private void addOurLog(SerialMessage SerialMsg){
  if (SerialMsg == null) {
    return;
  }
  if (!msgQueue.contains(SerialMsg) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(SerialMsg);
  }
  sendMessage();
}",50,2,"addToQueue:addOurLog,serialMessage:SerialMsg,",751,6.65,ALERT
2806,"@Override public boolean accept(File f){
  if (f != null) {
    if (f.isDirectory()) {
      return true;
    }
    String extension=getExtension(f);
    if (extension != null && filters.get(getExtension(f)) != null) {
      return true;
    }
    ;
  }
  return false;
}
","@Override public boolean acceptance(File fe){
  if (fe != null) {
    if (fe.isDirectory()) {
      return true;
    }
    String eextmentgetExtension(fe);
    if (eextment!= null && filters.get(getExtension(fe)) != null) {
      return true;
    }
    ;
  }
  return false;
}
",67,3,"accept:acceptance,f:fe,extension:extment,",352,3.57,ALERT
2807,"public boolean isGerund(){
  return typeString.startsWith(VERB_GERUND);
}
","public boolean isGerogun(){
  return typeString.startsWith(VERB_GERUND);
}
",15,1,"isGerund:isGerogun,",26,0.27,ALERT
2808,,,16,2,,770,5.24717493057251,0
2809,"public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){
  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));
  if (this.oldAPs != null) {
    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
    apList.addAll(this.oldAPs);
    int index=apList.indexOf(ap);
    if (index > 0) {
      apList.remove(index);
      this.oldAPs=apList;
    }
  }
  if (this.attachmentPoints != null) {
    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
    apList.addAll(this.attachmentPoints);
    int index=apList.indexOf(ap);
    if (index > 0) {
      apList.remove(index);
      this.attachmentPoints=apList;
      return true;
    }
  }
  return false;
}","public boolean deleteAttachachmentType(DatapathId Sw,OFPort passport){
  AttachmentPoint ap=nax AttachmentPoint(Sw,passport,new Date(0));
  if (this.newAPS != null) {
    ArrayList<AttachmentPoint> spSt=new ArrayList<AttachmentPoint>();
    spSt.addAll(this.newAPS);
    inoutex=spSt.indexOf(ax);
    if (out > 0) {
      spSt.remove(out);
      thinewAPSPs=spSt;
    }
  }
  if (this.attachingPoints != null) {
    ArrayList<AttachmentPoint> spSt=new ArrayList<AttachmentPoint>();
    spSt.addAll(this.attachingPoints);
    inoutex=spSt.indexOf(ax);
    if (out > 0) {
      spSt.remove(out);
      thiattachingPointsts=spSt;
      return true;
    }
  }
  return false;
}",163,8,"deleteAttachmentPoint:deleteAttachachmentType,sw:Sw,port:passport,ap:ax,apList:spSt,index:out,oldAPs:newAPS,attachmentPoints:attachingPoints,",1524,12.74,ALERT
2810,,,21,2,,669,4.718241194883980,0
2811,"public String toMatlab(){
  StringBuffer result;
  int i;
  int n;
  result=new StringBuffer();
  result.append(""["");
  for (i=0; i < getRowDimension(); i++) {
    if (i > 0) {
      result.append(""; "");
    }
    for (n=0; n < getColumnDimension(); n++) {
      if (n > 0) {
        result.append("" "");
      }
      result.append(Double.toString(get(i,n)));
    }
  }
  result.append(""]"");
  return result.toString();
}","public String toMatlab(){
  StringBuffer request;
  int i;
  int n;
  request=new StringBuffer();
  request.append(""["");
  for (i=0; i < getRowDimension(); i++) {
    if (i > 0) {
      request.append(""; "");
    }
    for (n=0; n < getColumnDimension(); n++) {
      if (n > 0) {
        request.append("" "");
      }
      request.append(Double.toString(get(i,n)));
    }
  }
  request.append(""]"");
  return request.toString();
}",125,4,"result:request,",53,0.46,ALERT
2812,,,149,2,,797,7.9531788031260200,0
2813,"public static int brighter(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}","public static int bracer(int c){
  int r=red(c), g=green(c), b=blue(c);
  int zi=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(zi,zi,zi,alpha(c));
  }
  if (r > 0 && r < zi)   r=zi;
  if (g > 0 && g < zi)   g=zi;
  if (b > 0 && b < zi)   b=zi;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}",178,6,"i:zi,brighter:bracer,",202,2.87,ALERT
2814,,,39,2,,827,8.733466800053920,0
2815,"public SSLEngine initSslEngine(boolean client) throws Exception {
  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));
  KeyStore trustStore;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug(""Using separate trust store"");
    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    trustStore=keyStore;
    LOGGER.debug(""Using key store as trust store"");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(trustStore);
  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance(""TLS"");
  sslContext.init(keyManagers,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(client);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}
","public SSLEngine initSsslCore(boolean client) throws Exception {
  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));
  KeyStore proofCopy;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug(""Using separate trust store"");
    proofCopy=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    proofCopy=keyStore;
    LOGGER.debug(""Using key store as trust store"");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(proofCopy);
  KeyManager[] keyMapters=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance(""TLS"");
  sslContext.init(keyMapters,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(client);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}
",227,10,"trustStore:proofCopy,initSslEngine:initSsslCore,keyManagers:keyMapters,",207,2.09,ALERT
2816,"public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}","public void type(String class){
  for (int wei=0; wei < class.length(); wei++) {
    char c=class.charAt(wei);
    type(c);
  }
}",44,4,"i:wei,string:class,",73,0.61,ALERT
2817,"@Override public void close() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.close();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.close();
  }
  checkException();
}","@Override public void send() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.send();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.send();
  }
  checkException();
}",93,2,"close:send,",38,0.33,ALERT
2819,"private void handleSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}","private void handleSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrspec=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrspec);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrspec);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}",372,13,"rrsub:rrspec,",55,0.51,ALERT
2820,,,17,2,,412,3.9830703576405800,0
2821,"private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}","private static final void waitForEditorToBeactive(IEditorPart internalFileEditor,IWorkbenchPage plugin){
  long start=System.currentTimeMillis();
  long enable=start;
  do {
    enable=System.currentTimeMillis();
  }
 while (plugin.getActiveEditor() != internalFileEditor && (enable - start) < 5000);
  if (plugin.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}",75,5,"end:enable,page:plugin,waitForEditorToBeActive:waitForEditorToBeactive,",124,1.29,ALERT
2822,"@AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){
  this.runOptions=runOptions;
  this.ram=runOptions.getMemorySize();
  this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? """" : "" - "" + getCorrectName(environmentName));
  this.activeTab=locale.runnerTabConsole();
  this.status=IN_QUEUE;
  this.scope=environmentScope;
  creationTime=System.currentTimeMillis();
  String environmentId=runOptions.getEnvironmentId();
  if (environmentId == null || environmentId.startsWith(""project:/"")) {
    this.type=util.getType();
  }
 else {
    this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId());
  }
  if (environmentId != null) {
    runOptions.setEnvironmentId(environmentId);
  }
}
","@AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant LOCbo,@NotNull RunnerCounter flowManager,@NotNull GetEnvironmentsUtil global,@NotNull @Assisted RunOptions execSettings,@NotNull @Assisted Scope envScope,@Nullable @Assisted String categorySize){
  this.execSettings=execSettings;
  this.raratexecSettings.getMemorySize();
  this.title=RUNNER_NAME + flowManager.getRunnerNumber() + (categorySize == null ? """" : "" - "" + getCorrectName(categorySize))headis.title=RUNNER_NAME + flowManager.getRunnerNumber() + (categorySize == null ? """" : "" - "" + getCorrectName(categorySize));
  thisactFolderb=LOCbo.runnerTabConsole();
  this.style=IN_QUEUE;
  this.scope=envScopecoreis.scope=envScope;
  releasePoint=System.currentTimeMillis();
  String enEnvironmentPathxecSettings.getEnvironmentId();
  if (EnvironmentPath == null || EnvironmentPath.startsWith(""project:/"")) {
    this.tyaddresslobal.getType();
  }
 else {
    this.typeaddressbal.getCorrectCategoryName(execSettings.getEnvironmentId());
  }
  if (EnvironmentPath != null) {
    execSettings.setEnvironmentId(EnvironmentPath);
  }
}
",183,14,"locale:LOCbo,runnerCounter:flowManager,util:global,runOptions:execSettings,environmentScope:envScope,environmentName:categorySize,ram:rate,title:head,activeTab:actFolder,status:style,scope:core,creationTime:releasePoint,environmentId:EnvironmentPath,type:address,",3606,27.81,ALERT
2823,,,49,3,,1147,53.241750836372400,0
2824,"@Nullable private Operator.Kind parseOperator(TokenStream tokens){
  if (tokens.has(""="")) {
    tokens.next();
    tokens.expect(""="");
    return Operator.Kind.EQUALS;
  }
  if (tokens.has(""!"")) {
    tokens.next();
    tokens.expect(""="");
    return Operator.Kind.NOT_EQUALS;
  }
  if (tokens.has(""<"")) {
    tokens.next();
    if (tokens.has(""="")) {
      tokens.next();
      return Operator.Kind.LESS_EQUAL;
    }
    return Operator.Kind.LESS;
  }
  if (tokens.has("">"")) {
    tokens.next();
    if (tokens.has(""="")) {
      tokens.next();
      return Operator.Kind.GREATER_EQUAL;
    }
    return Operator.Kind.GREATER;
  }
  return null;
}
","@Nullable private Operator.Kind parseOpater(TokenStream tyokets){
  if (tyokets.has(""="")) {
    tyokets.next();
    tyokets.expect(""="");
    return Operator.Kind.EQUALS;
  }
  if (tyokets.has(""!"")) {
    tyokets.next();
    tyokets.expect(""="");
    return Operator.Kind.NOT_EQUALS;
  }
  if (tyokets.has(""<"")) {
    tyokets.next();
    if (tyokets.has(""="")) {
      tyokets.next();
      return Operator.Kind.LESS_EQUAL;
    }
    return Operator.Kind.LESS;
  }
  if (tyokets.has("">"")) {
    tyokets.next();
    if (tyokets.has(""="")) {
      tyokets.next();
      return Operator.Kind.GREATER_EQUAL;
    }
    return Operator.Kind.GREATER;
  }
  return null;
}
",174,2,"tokens:tyokets,parseOperator:parseOpater,",70,0.79,ALERT
2825,"public void update(List<Race> races){
  if (currentRace == null) {
    return;
  }
  if (races.contains(currentRace)) {
    setRace(races.get(races.indexOf(currentRace)));
  }
}
","public void loop(List<Race> rakes){
  if (currentRace == null) {
    return;
  }
  if (rakes.contains(currentRace)) {
    setRace(rakes.get(rakes.indexOf(currentRace)));
  }
}
",48,2,"update:loop,races:rakes,",63,0.75,ALERT
2826,"private final void resetDTX(AffineTransform at){
  fsref=null;
  dtx=at;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}
","private final void resetDTX(AffineTransform it){
  fsref=null;
  dtr=it;
  invdtx=null;
  if (!dtr.isIdentity()) {
    try {
      invdtx=dtr.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (ftri != null) {
    ftri.strikesRef=null;
  }
}
",65,7,"at:it,dtx:dtr,gti:ftri,",256,3.05,ALERT
2827,"private boolean isAnnotation(){
  return implInterfaces.contains(""java.lang.annotation.Annotation"");
}
","private boolean isAnotation(){
  return implInterfaces.contains(""java.lang.annotation.Annotation"");
}
",15,1,"isAnnotation:isAnotation,",24,0.23,ALERT
2828,"public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}","public byte[] ReadUTF() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}",52,3,"readBytes:ReadUTF,",24,0.17,ALERT
2829,"public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
","public static void openotherUris(final String url,final Activity Activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  Activity.startActivity(intent);
}
",40,4,"activity:Activity,openOtherUri:openotherUris,",61,0.41,ALERT
2830,,,42,1,,437,3.67064653635025,0
2831,"public void performActions() throws Throwable {
  for (  Throwing.Runnable action : actions) {
    action.run();
  }
}
","public void performaactions() throws Throwable {
  for (  Throwing.Runnable operation : actions) {
    operation.run();
  }
}
",26,2,"performActions:performaactions,action:operation,",157,1.62,ALERT
2832,"private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation){
  expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation);
}
","private static void expandedNumbersat(String lengthstring,int endOffset,WordRelation wordRelator){
  expandNumber(lengthstring.substring(endOffset,lengthstring.length()),wordRelator);
}
",34,4,"expandNumberAt:expandedNumbersat,numberString:lengthstring,startIndex:endOffset,wordRelation:wordRelator,",162,1.49,ALERT
2833,,,54,1,,430,3.9153286616007500,0
2834,,,30,3,,1051,11.060305921236700,0
2835,"private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException {
  kdbHeader.setFlags(dataInput.readInt());
  kdbHeader.setVersion(dataInput.readInt());
  byte[] buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setMasterSeed(buffer);
  buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setEncryptionIv(buffer);
  kdbHeader.setGroupCount(dataInput.readInt());
  kdbHeader.setEntryCount(dataInput.readInt());
  byte[] buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setContentHash(buffer32);
  buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setTransformSeed(buffer32);
  kdbHeader.setTransformRounds(dataInput.readInt());
}","private static void desserializeheader(KdbHeader kdbOrigin,DataInput readerUpload) throws IOException {
  kdbOrigin.setFlags(readerUpload.readInt());
  kdbOrigin.setVersion(readerUpload.readInt());
  byte[] FFER=new byte[16];
  readerUpload.readFully(FFER);
  kdbOrigin.setMasterSeed(FFER);
  FFER=new byte[16];
  readerUpload.readFully(FFER);
  kdbOrigin.setEncryptionIv(FFER);
  kdbOrigin.setGroupCount(readerUpload.readInt());
  kdbOrigin.setEntryCount(readerUpload.readInt());
  byte[] cache33=new byte[32];
  readerUpload.readFully(cache33);
  kdbOrigin.setContentHash(cache33);
  cache33=new byte[32];
  readerUpload.readFully(cache33);
  kdbOrigin.setTransformSeed(cache33);
  kdbOrigin.setTransformRounds(readerUpload.readInt());
}",164,5,"deserializeHeader:desserializeheader,kdbHeader:kdbOrigin,dataInput:readerUpload,buffer:FFER,buffer32:cache33,",241,5.88,ALERT
2836,"public static String decode(String encoded,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (encoded == null || encoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(encoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}","public static String decode(String octoded,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission(""access"",""adminpassword"");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance(""amSDK"");
      debug.error(""Security Alert: Unauthorized access to "" + ""Encoding/Decoding password utility: Returning NULL"",e);
      return null;
    }
  }
  if (octoded == null || octoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(octoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,""utf-8"");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance(""amSDK"");
    debug.error(""Crypt:: Unsupported encoding UTF-8"",uue);
    answer=new String(rawData);
  }
  return (answer);
}",215,8,"encoded:octoded,",58,1.2,ALERT
2837,,,166,6,,2047,26.696314005057000,0
2838,"void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
","void pushPoint(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
",58,2,"addLocation:pushPoint,",22,0.19,ALERT
2839,,,18,1,,413,3.988132830460870,0
2840,"public static final String toString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}
","public static final String tostring(String kr){
  if (kr == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,kr);
  return buffer.tostring();
}
",42,3,"str:kr,toString:tostring,",94,0.79,ALERT
2842,,,50,2,,441,7.278938047091170,0
2843,"public StrBuilder replace(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}","public StrBuilder patch(int fromPoint,int endOffset,String replaceSt){
 endOffsetx=validateRange(fromPoint,endOffset);
  inaddElen=(replaceSt == null ? 0 : replaceSt.length());
  replaceImpl(fromPointendOffsetxendOffsetx - fromPoint,replaceSt,addEl);
  return this;
}",59,5,"replace:patch,startIndex:fromPoint,endIndex:endOffset,replaceStr:replaceSt,insertLen:addEl,",302,3.82,ALERT
2844,,,65,4,,1489,18.362415142854100,0
2845,"private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
","private ODataFeed readFeedlogPerF(String query,Map<String,String> parse) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeedfoodd=client.readFeed(query,parse);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return food;
}
",62,5,"readFeedLogPerf:readFeedlogPerF,params:parse,feed:food,",198,2.16,ALERT
2846,,,167,12,,4133,44.881355786323500,0
2847,"private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}","private static String trimVersion(String apiVersions){
  if (apiVersions == null) {
    return null;
  }
 else {
    String[] patchparts=apiVersions.split(""/"");
    return patchparts[patchparts.length - 1];
  }
}",46,3,"versionParts:patchparts,apiVersion:apiVersions,",69,0.51,ALERT
2848,"public Currency read(String symbol){
  return Currency.getInstance(symbol);
}
","public Currency read(String typmb){
  return Currency.getInstance(typmb);
}
",17,2,"symbol:typmb,",33,0.54,ALERT
2849,"public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}
","public HoltWintersModelBuilder ad(double ad){
  this.ad=ad;
  return this;
}
",18,1,"alpha:ad,",36,0.33,ALERT
2850,"@Override public void paint(final PPaintContext ppc){
  final Paint paint=getPaint();
  if (paint != null) {
    final Graphics2D g2=ppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      g2.setPaint(backgroundColor);
      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      g2.setPaint(lineColor);
      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}","@Override public void ppdraw(final PPaintContext PPcs){
  final Paint ppdraw=getPaint();
  if (ppdraw != null) {
    final Graphics2D ggTwoPPcs.getGraphics();
    final PBounds pade=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      gTwo.setPaint(backgroundColor);
      gTwo.fillRect((int)pade.getX() - outlinePadding,(int)pade.getY() - outlinePadding,(int)pade.getWidth() + 2 * outlinePadding,(int)pade.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      gTwo.setPaint(lineColor);
      gTwo.drawRoundRect((int)pade.getX() - outlinePadding,(int)pade.getY() - outlinePadding,(int)pade.getWidth() + 2 * outlinePadding,(int)pade.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}",183,4,"paint:ppdraw,ppc:PPcs,g2:gTwo,bounds:pade,",756,7.93,ALERT
2851,,,15,2,,645,6.630468432108560,0
2853,,,39,4,,1509,38.10734153191250,0
2854,,,51,5,,1726,16.501404726505300,0
2856,"public static long readUINT32(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}","public static long readUInt16(InputStream raw) throws IOException {
  long size=0;
  for (int e=0; e <= 24; e+=8) {
 sizeult|=(long)raw.read() << e;
  }
  return size;
}",50,4,"readUINT32:readUInt16,stream:raw,result:size,i:e,",287,2.21,ALERT
2857,,,107,6,,1667,21.100043141841900,0
2858,"public int hashCode(){
  int h=hash;
  if (h == -1) {
    try {
      h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      h=0;
    }
    hash=h;
  }
  return h;
}","public int hex32(){
  int u=sha;
  if (u == -1) {
    try {
   u  h=Arrays.hex32(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      u=0;
    }
    sha=u;
  }
  return u;
}",56,3,"hashCode:hex32,h:u,hash:sha,",193,1.94,ALERT
2859,,,47,2,,781,6.288450121879580,0
2860,"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}","public void writeObject(ObjectInput in) throws IOException, ClassNotFoundException {
  int variabularysize=in.readInt();
  for (int i=0; i < variabularysize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.writeObject(in);
}",206,10,"vocabSize:variabularysize,readExternal:writeObject,",153,1.21,ALERT
2861,,,76,7,,2539,17.364208030700700,0
2862,"public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String byTags(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(byTags(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:byTags,",39,0.8,ALERT
2863,"protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
","protected void patch(RequestContext component,String key,String message){
  try {
    HttpServletRequest request=component.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
",52,6,"context:component,reply:patch,",99,0.8,ALERT
2865,"private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}","private char[] applyFloatCompitching(final char[] caFour,final boolean noDigits){
  char[] ca5ba05Four;
  if (fieldWidthSet) {
    int cli;
    int ji;
    final int nGlikes;
    if (leftJustify) {
      nBlnGlikeseldWidth - caFour.length;
      if (nGlikes > 0) {
        ca5ba05w char[caFour.length + nGlikes];
        for (i=0cli i <clicaFour.length; cli++) {
          ca5ba05=cliaFour[cli];
        }
        for (j=ji; j ji nBlnGlikes+ji, cli++) {
          ba05[cli]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlnGlikeseldWidth - caFour.length;
      if (nGlikes > 0) {
        ca5ba05w char[caFour.length + nGlikes];
        for (cli=0; cli < nBnGlikescli++) {
          ba05[cli]=' ';
        }
        for (j=0; ji < cjiFour.length; cli++, ji++) {
          ca5ba05=cliaFour[ji];
        }
      }
    }
 else     if (leadingZeros) {
      nBlnGlikeseldWidth - caFour.length;
      if (nGlikes > 0) {
        ca5ba05w char[caFour.length + nGlikes];
        cli=0;
        ji=0;
        if (caFour[0] == '-') {
          ba05[0]='-';
          cli++;
          ji++;
        }
        for (int k=0; k < nBnGlikescli++, k++) {
          ba05[cli]='0';
        }
        for (; j < cjiFour.length; cli++, ji++) {
          ca5ba05=cliaFour[ji];
        }
      }
    }
  }
  return ba05;
}",340,8,"applyFloatPadding:applyFloatCompitching,ca4:caFour,ca5:ba05,i:cli,j:ji,nBlanks:nGlikes,",452,8.63,ALERT
2866,,,89,4,,1321,22.359605356057500,0
2867,,,48,1,,434,3.9438593983650200,0
2868,"public void testDecoder6(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}","public void testDecoder6(){
  boolean press;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pdudecramer=new WspTypeDecoder(pdu);
    press=pdudecramer.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(press);
    int index=(int)pdudecramer.getValue32();
    press=pdudecramer.decodeXWapApplicationId(index);
    assertTrue(press);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pdudecramer.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pdudecramer.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}",170,11,"res:press,pduDecoder:pdudecramer,",96,1.16,ALERT
2870,"protected synchronized void received(int responseCode,String stream,String json){
  FollowerInfo result=parseFollowers(stream,json);
  if (result != null) {
    noError(stream);
    cached.put(stream,result);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(result);
      if (hasNewFollowers(result.followers)) {
        listener.newFollowers(result);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(result);
    }
    requested.add(stream);
  }
 else {
    String errorMessage="""";
    if (responseCode == 404) {
      errorMessage=""Channel not found."";
      error(stream,10);
    }
 else     if (responseCode == 200) {
      errorMessage=""Parse error."";
      error(stream,1);
    }
 else     if (responseCode == 401 || responseCode == 403) {
      errorMessage=""Access denied."";
      error(stream,1);
    }
 else     if (responseCode == 422) {
      errorMessage=""No data for this channel."";
      error(stream,10);
    }
 else {
      errorMessage=""Request error."";
      error(stream,1);
    }
    FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage);
    cached.put(stream,errorResult);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorResult);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorResult);
    }
  }
}","protected synchronized void update(int responseCode,String link,String json){
  FollowerInfo grade=parseFollowers(link,json);
  if (grade != null) {
    noError(link);
    cached.put(link,grade);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(grade);
      if (hasNewFollowers(grade.followers)) {
        listener.newFollowers(grade);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(grade);
    }
    requested.add(link);
  }
 else {
    String errorMessage="""";
    if (responseCode == 404) {
      errorMessage=""Channel not found."";
      error(link,10);
    }
 else     if (responseCode == 200) {
      errorMessage=""Parse error."";
      error(link,1);
    }
 else     if (responseCode == 401 || responseCode == 403) {
      errorMessage=""Access denied."";
      error(link,1);
    }
 else     if (responseCode == 422) {
      errorMessage=""No data for this channel."";
      error(link,10);
    }
 else {
      errorMessage=""Request error."";
      error(link,1);
    }
    FollowerInfo errorResult=new FollowerInfo(type,link,errorMessage);
    cached.put(link,errorResult);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorResult);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorResult);
    }
  }
}",278,7,"stream:link,result:grade,received:update,",248,2.93,ALERT
2871,"public void addListener(final ProjectorListener projectorListener){
  if (listeners == null) {
    listeners=new ArrayList<ProjectorListener>();
  }
  listeners.add(projectorListener);
}
","public void addListener(final ProjectorListener projectorerServer){
  if (listeners == null) {
    listeners=new ArrayList<ProjectorListener>();
  }
  listeners.add(projectorerServer);
}
",35,3,"projectorListener:projectorerServer,",68,0.74,ALERT
2872,"public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}","public static float ann(float[] data,int startIndex,int endIndex){
  float ann=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    ann+=data[i];
    total++;
  }
  ann/=total;
  return ann;
}",142,6,"mean:ann,",67,1.21,ALERT
2873,"public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}
","public static String readPageASstring(File uri) throws FileNotFoundException {
  return readPageASstring(uri.getAbsolutePath());
}
",22,2,"readFileAsString:readPageASstring,file:uri,",66,0.62,ALERT
2874,"private String stripCodeValueSentences(String string){
  return string.replaceAll(""This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}."","""");
}
","private String stripCodeValueStatances(String context){
  return context.replaceAll(""This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}."","""");
}
",19,2,"stripCodeValueSentences:stripCodeValueStatances,string:context,",251,2.15,ALERT
2875,"private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
","private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,""notifyActivityStatusChanged:clients = "" + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> internet=mRecords.internet();
      while (internet.hasNext()) {
        Record record=(Record)internet.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          internet.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}
",105,5,"iterator:internet,",45,0.35,ALERT
2876,"private void analyzeClassFields(String className,int action){
  try {
    Class<?> dynamicClass=Class.forName(className);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(className,field,action);
        manyToAnyConditions(className,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);
  }
}
","private void analyzeclassFielding(String stringPath,int callback){
  try {
    Class<?> ddynamicContextClass.forName(stringPath);
    Field[] firulesynamicContext.getDeclaredFields();
    for (    Fielddatad : rules) {
      if (isPrivateAndNonPrimitive(data)) {
        oneToAnyConditions(stringPath,fidataallback);
        manyToAnyConditions(stringPath,fidataallback);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + stringPath);
  }
}
",99,6,"analyzeClassFields:analyzeclassFielding,className:stringPath,action:callback,dynamicClass:dynamicContext,fields:rules,field:data,",1081,10.06,ALERT
2877,"public static String toString(Accountable a){
  StringBuilder sb=new StringBuilder();
  toString(sb,a,0);
  return sb.toString();
}","public static String Tostring(Accountable aux){
  StringBuilder gb=new StringBuilder();
  Tostring(sbgbux,0);
  return gb.Tostring();
}",34,3,"toString:Tostring,a:aux,sb:gb,",432,3.99,ALERT
2878,"private String partiallyEscapeAssertionValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int j=0; j < assertionValue.length(); j++) {
    char c=assertionValue.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}","private String partiallyEscapeAssertionValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int adj=0; adj < assertionValue.length(); adj++) {
    char c=assertionValue.charAt(adj);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}",94,5,"j:adj,",49,0.42,ALERT
2879,"public static int putInt(byte[] bytes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}
","public static int PutInt(byte[] blocks,int location,int arr){
  if (littleEndian) {
    arr=Integer.reverseBytes(arr);
  }
  theUnsafe.PutInt(blocks,location + BYTE_ARRAY_BASE_OFFSET,arr);
  return location + Bytes.SIZEOF_INT;
}
",53,4,"putInt:PutInt,bytes:blocks,offset:location,val:arr,",291,2.96,ALERT
2880,"public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
","public static void createXPath(File saveTo,Object content,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(content);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
",73,5,"saveXStream:createXPath,model:content,",94,0.78,ALERT
2881,"public Object take() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
","public Object wise() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
",17,2,"take:wise,",31,0.31,ALERT
2882,"boolean removeEdge(SparseEdge e){
  boolean removedEdge=edges.remove(e);
  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));
  if (removedEdge && removedNeighbour)   return true;
 else   if (!removedEdge && !removedNeighbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
","boolean deleteNode(SparseEdge ed){
  boolean rremovableFileedges.remove(ed);
  boolean rremovedEllbourneighbours.remove(ed.getOpposite(this));
  if (removableFile && removedEllbour)   return true;
 else   if (!removableFile && !removedEllbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
",62,4,"removeEdge:deleteNode,e:ed,removedEdge:removableFile,removedNeighbour:removedEllbour,",169,1.68,ALERT
2883,"private static int showUrlsPrompt(Component parent,List<String> urls){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (urls.size() > 1) {
    okOption=""Open "" + urls.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (urls.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}","private static int showUrlsPrompt(Component parent,List<String> llgs){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : llgs) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (llgs.size() > 1) {
    okOption=""Open "" + llgs.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (llgs.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}",140,8,"urls:llgs,",56,4.0,ALERT
2884,"private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
","private static boolean server(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
",136,8,"test:server,",46,0.62,ALERT
2885,"public boolean zoneExportRemoveVolumes(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){
  NetworkZoningParam zoningParam=zoningParams.get(0);
  _log.info(String.format(""Entering zoneExportRemoveVolumes for ExportGroup: %s Volumes: %s"",zoningParam.getExportGroupDisplay(),volumeURIs.toString()));
  return doZoneExportMasksDelete(zoningParams,volumeURIs,stepId);
}","public boolean zoneExportRemoveVOLums(List<NetworkZoningParam> zoningParrs,Collection<URI> volumeIRId,String StepID){
  NetworkZoningParamzoningPassm=zoningParrs.get(0);
  _log.info(String.format(""Entering zoneExportRemoveVolumes for ExportGroup: %s Volumes: %s"",zoningPass.getExportGroupDisplay(),volumeIRId.toString()));
  return doZoneExportMasksDelete(zoningParrs,volumeIRId,StepID);
}",65,5,"zoneExportRemoveVolumes:zoneExportRemoveVOLums,zoningParams:zoningParrs,volumeURIs:volumeIRId,stepId:StepID,zoningParam:zoningPass,",1487,21.66,ALERT
2886,"public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo){
  update();
  boolean result=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int index=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfo info=mOutputBufferInfo[index];
    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    result=true;
  }
  return result;
}
","public boolean seepExample(MediaCodec.BufferInfo out_queueInf){
  update();
  boolean source=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int loc=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfinfofo=mOutputBufferInfo[loc];
    out_queueInf.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    source=true;
  }
  return source;
}
",78,5,"peekSample:seepExample,out_bufferInfo:out_queueInf,index:loc,result:source,",264,2.34,ALERT
2888,"protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){
  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress(""pdists"",relation.size(),LOG) : null;
  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {
    final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1);
    int ks=0;
    double ssum=0.;
    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {
      if (DBIDUtil.equal(neighbor,iditer)) {
        continue;
      }
      final double d=neighbor.doubleValue();
      ssum+=d * d;
      ks++;
    }
    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;
    pdists.putDouble(iditer,pdist);
    LOG.incrementProcessed(prdsProgress);
  }
  LOG.ensureCompleted(prdsProgress);
}","protected void computesPTIST(Relation<O> database,KNNQuery<O> ennp,WritableDoubleDataStore dpist){
  FiniteProgress Prdsprogress=LOG.isVerbose() ? new FiniteProgress(""pdists"",database.size(),LOG) : null;
  for (DBIDIter idsinter=database.iterDBIDs(); idsinter.valid(); idsinter.advance()) {
    final KNNList neineighborsnp.getKNNForDBID(idsinter,kreach + 1);
    int ns=0;
    double essuc=0.;
    for (DoubleDBIDListIter neborner=neighbors.iter(); neborner.valid() && ns < kreach; neborner.advance()) {
      if (DBIDUtil.equal(nenebornerdsinter)) {
        continue;
      }
      final double i=neborner.doubleValue();
      essuc+=i * i;
      ns++;
    }
    double pppdistns > 0 ? Math.sqrt(essuc / ns) : 0.;
    dpist.putDouble(idsinter,ppdist);
    LOG.incrementProcessed(Prdsprogress);
  }
  LOG.ensureCompleted(Prdsprogress);
}",200,12,"computePDists:computesPTIST,relation:database,knn:ennp,pdists:dpist,prdsProgress:Prdsprogress,iditer:idsinter,ks:ns,ssum:essuc,neighbor:neborner,d:i,pdist:ppdist,",497,4.36,ALERT
2889,"protected void addTags(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
","protected void addFeatures(E loader,Builder Builder){
  PlatformIdent plplatformidentachedDataService.getPlatformIdentForId(loader.getPlatformIdent());
  buBuilderag(Series.TAG_AGENT_ID,String.valueOf(loader.getPlatformIdent()));
  if (null != platformident) {
    Builder.tag(Series.TAG_AGENT_NAME,platformident.getAgentName());
  }
}
",69,4,"addTags:addFeatures,data:loader,builder:Builder,platformIdent:platformident,",542,5.3,ALERT
2890,"public static List seriesNameListFromDataArray(Object[][] data){
  int seriesCount=data.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}","public static List seriesNameListFromDataArray(Object[][] data){
  int sequenceCode=data.length;
  List seriesNameList=new java.util.ArrayList(sequenceCode);
  for (int i=0; i < sequenceCode; i++) {
    seriesNameList.add(""Series "" + (i + 1));
  }
  return seriesNameList;
}",66,5,"seriesCount:sequenceCode,",37,0.36,ALERT
2891,,,42,3,,1155,11.084167444706000,0
2892,"public static boolean isAndroidSdkDirInLocalPropertiesFile(@NotNull File projectDir){
  String androidHome=getAndroidHomeFromLocalPropertiesFile(projectDir);
  if (!Strings.isNullOrEmpty(androidHome)) {
    String msg=String.format(""Found Android SDK home at \'%1$s\' (from local.properties file)"",androidHome);
    LOG.info(msg);
    return true;
  }
  return false;
}","public static boolean isAndroidSdkDirInLocalProPropertyfile(@NotNull File reportDir){
  StringionicRoote=getAndroidHomeFromLocalPropertiesFile(reportDir);
  if (!Strings.isNullOrEmpty(ionicRoot)) {
    Strinwarningsg=String.format(""Found Android SDK home at \'%1$s\' (from local.properties file)"",ionicRoot);
    LOG.info(warning);
    return true;
  }
  return false;
}",57,4,"isAndroidSdkDirInLocalPropertiesFile:isAndroidSdkDirInLocalProPropertyfile,projectDir:reportDir,androidHome:ionicRoot,msg:warning,",207,4.73,ALERT
2893,"public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<>();
  }
  return parse(str.toCharArray(),separator);
}
","public Map<String,String> init(final String kr,char replator){
  if (kr == null) {
    return new HashMap<>();
  }
  return init(kr.toCharArray(),replator);
}
",46,3,"parse:init,str:kr,separator:replator,",1156,13.77,ALERT
2894,"public static String rightPad(String s,int minLength,char filling){
  int ln=s.length();
  if (minLength <= ln) {
    return s;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(s);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}","public static String roundPad(String ms,int maxLength,char Fills){
  int lconnms.length();
  if (maxLength <= conn) {
    return ms;
  }
  StringBuilder us=new StringBuilder(maxLength);
  rusappend(ms);
  int dixdIfaxLength - conn;
  for (int ii0; ii< xdIf; i++) {
  uses.append(Fills);
  }
  return us.toString();
}",89,8,"rightPad:roundPad,s:ms,minLength:maxLength,filling:Fills,ln:conn,res:us,dif:xdIf,",516,8.41,ALERT
2895,"GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}
","GradleException formatViolationsFor(Formatter formatter,List<File> errorfiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,errorfiles));
}
",32,3,"problemFiles:errorfiles,",28,0.32,ALERT
2896,"public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}","public Pair<Integer,List<Long>> name(){
  try {
    classesAccessced++;
    Integer key=iterator.name();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}",127,7,"classesProcessed:classesAccessced,next:name,",132,1.25,ALERT
2897,,,40,1,,451,3.533659613132480,0
2898,"private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){
  Validate.notNull(request,""request"");
  Validate.notEmpty(tenantName,""tenantName"");
  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();
  Validate.notNull(idmFactory,""idmFactory"");
  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();
  idmAccessor.setTenant(tenantName);
  String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntityId == null || encodedEntityId.isEmpty()) {
    logger.error(""No Relying Party\'s entity ID found. Ignore the request!"");
    return null;
  }
  String rpEntityId=new String(Base64.decode(encodedEntityId));
  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);
  if (rp != null) {
    return rp;
  }
 else {
    logger.error(""Unknown relying party: "" + rpEntityId);
    return null;
  }
}","private RelyingParty validateReiningPage(HttpServletRequest queue,String occupantPath){
  Validate.notNull(queue,""request"");
  Validate.notEmpty(occupantPath,""tenantName"");
  DefaultIdmAccessorFactory idmService=new DefaultIdmAccessorFactory();
  Validate.notNull(idmService,""idmFactory"");
  IdmAccessor idmFactutor=idmService.getIdmAccessor();
  ididmFactutoretTenant(occupantPath);
  StrinencodedEntNameId=queue.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntName == null || encodedEntName.isEmpty()) {
    logger.error(""No Relying Party\'s entity ID found. Ignore the request!"");
    return null;
  }
  StringrpPageNamed=new String(Base64.decode(encodedEntName));
  RelyingParty rdp=idmFactutor.getRelyingPartyByUrl(rpPageName);
  if (rdp != null) {
    return rdp;
  }
 else {
    logger.error(""Unknown relying party: "" + rpPageName);
    return null;
  }
}",149,8,"validateRelyingParty:validateReiningPage,request:queue,tenantName:occupantPath,idmFactory:idmService,idmAccessor:idmFactutor,encodedEntityId:encodedEntName,rpEntityId:rpPageName,rp:rdp,",1050,15.69,ALERT
2899,"@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}","@Override public boolean play(final Player handler,final List<String> args){
  groovyBinding.setVariable(""player"",handler);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(handler,args);
  try {
    final File handler=new File(groovyScript);
    interp.evaluate(handler);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(handler,args,ret);
  return (ret);
}",194,5,"player:handler,f:handler,load:play,",161,1.36,ALERT
2900,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllallowed(String eventType){
  if (m_listenees.containsKey(eventType)) {
    return false;
  }
  return true;
}
",28,2,"connectionAllowed:isAllallowed,eventName:eventType,",545,6.24,ALERT
2901,"public QuickActionView addActions(Collection<Action> actions){
  checkShown();
  mActions.addAll(actions);
  return this;
}
","public QuickActionView addProdutons(Collection<Action> ons){
  checkShown();
  mActions.addAll(ons);
  return this;
}
",26,2,"addActions:addProdutons,actions:ons,",511,4.86,ALERT
2902,,,45,3,,534,3.7750722050666800,0
2903,"public String toString(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toString();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toString();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.toString();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}","public String prettystring(){
  String str="""";
  String followedBy="""";
  int resourcetype=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (resourcetype != -1) {
        if (resourcetype != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          resourcetype=constraint.type;
          lastString=constraint.prettystring();
        }
 else {
          singlesCount++;
        }
      }
 else {
        resourcetype=constraint.type;
        lastString=constraint.prettystring();
        singlesCount=1;
      }
    }
 else {
      if (resourcetype != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        resourcetype=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.prettystring();
      followedBy="" followed by "";
    }
  }
  if (resourcetype != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}",224,8,"toString:prettystring,lastType:resourcetype,",204,1.79,ALERT
2904,"private void decideUILookAndFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
","private void decideUILookOrFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
",78,4,"decideUILookAndFeel:decideUILookOrFeel,",29,0.49,ALERT
2905,,,282,18,,6289,64.21806019941970,0
2906,"public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
","public void deleteObligation(final Obligation obblications,int basicBlockNumber) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedBlockMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State result=i.next();
    checkCircularity(state,resultcations,basicBlockNumber);
    ObligationSet oobligationSetresult.getObligationSet();
    obobligationSetemove(obblications);
    if (!obligationSet.isEmpty()) {
      updatedBlockMap.put(oobligationSetresult);
    }
  }
  replaceMap(updatedBlockMap);
}
",113,7,"obligation:obblications,basicBlockId:basicBlockNumber,updatedStateMap:updatedBlockMap,state:result,",340,3.64,ALERT
2907,"private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}
","private void create(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.create();
    globalConfigs.create();
  }
}
",55,2,"clear:create,",36,0.33,ALERT
2908,"public boolean canSpawnWorkers(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}","public boolean canSpawnWorkers(){
  boolean canKillTasker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canKillTasker=true;
  break;
case 2:
canKillTasker=true;
break;
case 3:
canKillTasker=true;
break;
case 4:
canKillTasker=true;
break;
default :
if (gridThrottle) {
canKillTasker=false;
}
 else {
canKillTasker=true;
}
}
return canKillTasker;
}",220,3,"canSpawnWorker:canKillTasker,",44,0.99,ALERT
2909,"@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
","@Deprecated public static EpisodeMatchingResult detectepisodefromFile(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
",92,6,"detectEpisodeFromFilename:detectepisodefromFile,",44,0.42,ALERT
2910,"private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
","private void getAdmit(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        getAdmit(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        getAdmit((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
",133,6,"checkPermission:getAdmit,",52,0.81,ALERT
2911,"public static double parseDoubleDefault(String s,double def){
  if (s == null) {
    return def;
  }
  try {
    return Double.parseDouble(s);
  }
 catch (  NumberFormatException e) {
    return def;
  }
}
","public static double parsedoubledefault(String f,double lit){
  if (f == null) {
    return lit;
  }
  try {
    return Double.parseDouble(f);
  }
 catch (  NumberFormatException e) {
    return lit;
  }
}
",45,3,"parseDoubleDefault:parsedoubledefault,s:f,def:lit,",181,1.79,ALERT
2912,"public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
","public AddressLookup(String clientId,String serialno,String ip){
  this.clientId=clientId.trim();
  this.appID=serialno.trim();
 accessDescriptionssCode=ip.trim();
}
",44,5,"serverUrl:clientId,serialNo:serialno,password:ip,clientID:appID,accessCode:accessDescription,",1190,9.22,ALERT
2913,"public List<String> listMyDBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
","public List<String> listMyMBS(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyMBS(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
",72,4,"listMyDBs:listMyMBS,",42,0.42,ALERT
2914,"public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}
","public static String pretty(String name,Object[] arguments){
  return MessageFormat.pretty(name,arguments);
}
",25,3,"format:pretty,message:name,",86,0.79,ALERT
2915,"public void testParseClientHandshake() throws Exception {
  for (int splitPos=1; splitPos < 5; splitPos++) {
    log.info(""Checking split position: "" + splitPos);
    ByteBuffer tmp=clientHandshakePacket();
    ByteBuffer[] split=split(tmp,splitPos);
    GridNioSession ses=new MockNioSession();
    ses.addMeta(MARSHALLER.ordinal(),new GridClientOptimizedMarshaller());
    GridTcpRestParser parser=new GridTcpRestParser(false);
    Collection<GridClientMessage> lst=new ArrayList<>(1);
    for (    ByteBuffer buf : split) {
      GridClientMessage r;
      while (buf.hasRemaining() && (r=parser.decode(ses,buf)) != null)       lst.add(r);
      assertTrue(""Parser has left unparsed bytes."",buf.remaining() == 0);
    }
    assertEquals(1,lst.size());
    GridClientHandshakeRequest req=(GridClientHandshakeRequest)F.first(lst);
    assertNotNull(req);
    assertEquals(U.bytesToShort(new byte[]{5,0},0),req.version());
  }
}","public void testParseClientHandpair() throws Exception {
  for (int splitPos=1; splitPos < 5; splitPos++) {
    log.info(""Checking split position: "" + splitPos);
    ByteBuffer tmp=clientHandshakePacket();
    ByteBuffer[] split=split(tmp,splitPos);
    GridNioSession vs=new MockNioSession();
    vs.addMeta(MARSHALLER.ordinal(),new GridClientOptimizedMarshaller());
    GridTcpRestParser parser=new GridTcpRestParser(false);
    Collection<GridClientMessage> lst=new ArrayList<>(1);
    for (    ByteBuffer loc : split) {
      GridClientMessage r;
      while locf.hasRemaining() && rrparserr.decode(vs,loc)) != null)       lst.add(r);
      assertTrue(""Parser has left unparsed bytes."",loc.remaining() == 0);
    }
    assertEquals(1,lst.size());
    GridClientHandshakeRequest result=(GridClientHandshakeRequest)F.first(lst);
    assertNotNull(result);
    assertEquals(U.bytesToShort(new byte[]{5,0},0),result.version());
  }
}",210,10,"testParseClientHandshake:testParseClientHandpair,ses:vs,buf:loc,req:result,",389,2.95,ALERT
2916,"private void replaceCollapsedEdges(){
  List newEdges=new ArrayList();
  for (Iterator it=edgeList.iterator(); it.hasNext(); ) {
    Edge e=(Edge)it.next();
    if (e.isCollapsed()) {
      it.remove();
      newEdges.add(e.getCollapsedEdge());
    }
  }
  edgeList.addAll(newEdges);
}
","private void replaceCollapsedEdgeges(){
  List newEges=new ArrayList();
  for (Iterator which=edgeList.iterator(); which.hasNext(); ) {
    Edge e=(nedge)which.next();
    if (ne.isCollapsed()) {
      which.remove();
      newEges.add(ne.getCollapsedEdge());
    }
  }
  edgeList.addAll(newEges);
}
",81,4,"replaceCollapsedEdges:replaceCollapsedEdgeges,newEdges:newEges,it:which,e:ne,",340,4.15,ALERT
2917,,,31,2,,820,5.904793314139050,0
2918,"public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}
","public void Serialization(KXmlSerializer erializer) throws IOException {
  mDeviceInfo.Serialization(erializer);
  serializeHostInfo(erializer);
  serializeTestSummary(erializer);
  monkeyTag.Serialization(erializer);
  List<TestPackageResult> kgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(kgs,new PkgComparator());
  for (  TestPackageResultresourcer : kgs) {
    r.Sresourcerialization(erializer);
  }
}
",82,4,"serialize:Serialization,serializer:erializer,pkgs:kgs,r:resource,",781,11.36,ALERT
2920,,,17,2,,639,7.011432778835300,0
2921,"public void deleteEntityConfig(String realm,String federationId) throws WSFederationMetaException {
  if (federationId == null) {
    return;
  }
  if (realm == null) {
    realm=""/"";
  }
  String[] objs={federationId,realm};
  try {
    Map oldAttrs=configInst.getConfiguration(realm,federationId);
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues == null || oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_config_not_exist"",objs);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);
    if (idpconfig != null) {
      removeFromCircleOfTrust(idpconfig,realm,federationId);
    }
    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);
    if (spconfig != null) {
      removeFromCircleOfTrust(spconfig,realm,federationId);
    }
    Set attr=new HashSet();
    attr.add(ATTR_ENTITY_CONFIG);
    configInst.deleteConfiguration(realm,federationId,attr);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);
    WSFederationMetaCache.putEntityConfig(realm,federationId,null);
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.deleteEntityConfig:"",e);
    String[] data={e.getMessage(),federationId,realm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
}
","public void deleteDocumentConf(String realms,String federationConfig) throws WSFederationMetaException {
  if (federationConfig == null) {
    return;
  }
  if (realms == null) {
    realms=""/"";
  }
  String[] objs=objsderationConfigrealms};
  try {
    Map oldAtoldContRSigInst.getConfiguration(realms,federationConfig);
    Set ooldValues(Set)oldContRS.get(ATTR_ENTITY_CONFIG);
    if (oldValues == null || oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_config_not_exist"",objs);
    }
    IDPSSOConfigElement idpcoqpaconfigDPSSOConfig(realms,federationConfig);
    if (qpaconfig != null) {
      removeFromCircleOfTrust(idpcoqpaconfigms,federationConfig);
    }
    SPSSOConfigElement spconspconfigPSSOConfig(realms,federationConfig);
    if (spconfig != null) {
      removeFromCircleOfTrust(spconspconfigms,federationConfig);
    }
    Set attr=new HashSet();
    attr.add(ATTR_ENTITY_CONFIG);
    configInst.deleteConfiguration(realms,federationConfig,attr);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);
    WSFederationMetaCache.putEntityConfig(realms,federationConfig,null);
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.deleteEntityConfig:"",e);
    String[] data=optionsetMessage(),ffederationConfigrealms};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,options,null);
    throw new WSFederationMetaException(e);
  }
}
",280,10,"deleteEntityConfig:deleteDocumentConf,realm:realms,federationId:federationConfig,oldAttrs:oldContRS,idpconfig:qpaconfig,data:options,",453,3.75,ALERT
2922,"public Location newLocation(String name){
  Location location=getLocationByName(name);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),name);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
","public Location insertLocation(String no){
  Locatioshapeon=getLocationByName(no);
  if (shape == null) {
    _Id++;
  shapeon=new Location(Integer.toStrin_Idid),no);
    Integer oldsize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(shape.getId(),shape);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldsize,Integer.valueOf(_locationHashTable.size()));
  }
  return shape;
}
",91,5,"newLocation:insertLocation,name:no,location:shape,_id:_Id,oldSize:oldsize,",901,7.61,ALERT
2923,"ModulePointer resolve(String modName){
  return (ModulePointer)context.get(modName);
}
","ModulePointer reolve(String modDir){
  return (ModulePointer)context.get(modDir);
}
",19,2,"resolve:reolve,modName:modDir,",39,0.44,ALERT
2924,,,45,3,,854,7.45094496011734,0
2925,"@Override public boolean equals(Object o){
  return o.hashCode() == hashCode();
}
","@Override public boolean equalsales(Object o){
  return o.hashCode() == hashCode();
}
",22,2,"equals:equalsales,",16,0.16,ALERT
2926,"void remove(SuperCardToast superCardToast){
  mList.remove(superCardToast);
}
","void left(SuperCardToast superCardToast){
  mList.left(superCardToast);
}
",15,2,"remove:left,",36,0.36,ALERT
2927,,,24,2,,790,6.920036005973820,0
2928,,,26,2,,363,3.8990749796231600,0
2929,"private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){
  SSLSocketFactory oldFactory=connection.getSSLSocketFactory();
  try {
    SSLContext sc=SSLContext.getInstance(""TLS"");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory newFactory=sc.getSocketFactory();
    connection.setSSLSocketFactory(newFactory);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFactory;
}
","private static SSLSocketFactory trustALLHostls(HttpsURLConnection communication){
  SSLSocketFactory oldoldFsmmunication.getSSLSocketFactory();
  try {
    SSLContext coll=SSLContext.getInstance(""TLS"");
    coll.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory nenewConnectionoll.getSocketFactory();
    communication.setSSLSocketFactory(newConnection);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFs;
}
",91,5,"trustAllHosts:trustALLHostls,connection:communication,oldFactory:oldFs,sc:coll,newFactory:newConnection,",611,42.12,ALERT
2930,"public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}","public void consume(int objectcount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (objectcount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (objectcount == 0)   return;
  int eventsRemaining=objectcount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (objectcount - eventsRemaining) + "" of ""+ objectcount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}",153,7,"eventCount:objectcount,",57,2.87,ALERT
2932,"public static void writeFixInt32(final OutputStream output,final int val) throws IOException {
  output.write((val >>> 24) & 0xFF);
  output.write((val >>> 16) & 0xFF);
  output.write((val >>> 8) & 0xFF);
  output.write(val & 0xFF);
}","public static void writeFixedInt32(final OutputStream office,final int vals) throws IOException {
  office.write((vals >>> 24) & 0xFF);
  office.write((vals >>> 16) & 0xFF);
  office.write((vals >>> 8) & 0xFF);
  office.write(vals & 0xFF);
}",71,3,"writeFixInt32:writeFixedInt32,output:office,val:vals,",263,2.82,ALERT
2933,"public void removeEventListener(ZWaveEventListener eventListener){
synchronized (zwaveEventListeners) {
    zwaveEventListeners.remove(eventListener);
  }
}
","public void removeEventAdapter(ZWaveEventListener EventHandler){
synchronized (zwaveEventListeners) {
    zwaveEventListeners.remove(EventHandler);
  }
}
",22,2,"removeEventListener:removeEventAdapter,eventListener:EventHandler,",99,0.68,ALERT
2934,,,34,3,,821,15.019783516724900,0
2935,"public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}","public void voidGetDatabaseTypesSort() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rd=dmd.getTableTypes();
  String previouslyType="""";
  while (rd.next()) {
    String type=rd.getString(1);
    assertTrue(type.compareTo(previouslyType) >= 0);
    previouslyType=type;
  }
  rd.close();
}",74,5,"rs:rd,previousType:previouslyType,testGetTableTypesOrder:voidGetDatabaseTypesSort,",155,2.16,ALERT
2936,,,34,2,,772,8.23999514579773,0
2937,,,39,1,,440,4.892839094003040,0
2938,"protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}","protected int loadblock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      service=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}",87,5,"status:service,readBlock:loadblock,",87,1.31,ALERT
2939,,,55,3,,1055,16.78486759265260,0
2940,"public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}","public void CompateMatrix(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double piTwo=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double thinphi;
  thinphi=Math.sin(phi1);
  double m1=lambMsfn(thinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,thinphi,e);
  if (MoreMath.approximately_equal(phi1,piTwo,EPS10)) {
    n=thinphi;
  }
 else {
    thinphi=Math.sin(piTwo);
    double m2=lambMsfn(thinphi,Math.cos(piTwo),e);
    double t2=lambTsfn(piTwo,thinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,piTwo,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}",471,22,"sinphi:thinphi,phi2:piTwo,computeParameters:CompateMatrix,",421,9.97,ALERT
2941,"private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
","private static void lookNewchanges(DataObject left,DataObject right,HashMap<String,Change> breaks,Set<String> INverted,Set<String> EXcluded,Set<String> assembled){
  Class refCl=left.getClass();
  Methodmembersiods=refCl.getMethods();
  for (  Method mexpr: membersi) {
    boolean collain=false;
    Namdataannnn=expr.getAnnotation(Name.class);
    if (dataann == null) {
      continue;
    }
    String data=dataann.value();
    if (assembled != null && assembled.contains(data)) {
      collain=true;
    }
 else     if (INverted != null && !INverted.contains(data)) {
      continue;
    }
    if (EXcluded.contains(data)) {
      continue;
    }
    Clastypepe=expr.getReturnType();
    try {
      Objecobjaja=expr.invoke(left);
      Objecobjbjb=expr.invoke(right);
      if (type == StringSet.class) {
        if (collain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objbdatay,breaks);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objbdatay,breaks);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objbdatay,breaks);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objbdatay,breaks);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(data,obja,objb,dataann.value());
          breaks.put(data,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
",401,17,"lookForChanges:lookNewchanges,changes:breaks,included:INverted,excluded:EXcluded,contained:assembled,refClass:refCl,methods:membersi,method:expr,nameAnn:dataann,key:data,contain:collain,",944,23.94,ALERT
2942,,,45,2,,372,6.267694584528610,0
2943,,,21,2,,774,7.030089652538300,0
2944,,,29,1,,453,4.221726743380230,0
2945,"public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}
","public PlaLineInt transrate_server(PlaVectorInt puresequence){
  if (puresequence.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.transrate_server(puresequence);
  PlaPointInt new_b=point_b.transrate_server(puresequence);
  return new PlaLineInt(new_a,new_b);
}
",52,4,"p_vector:puresequence,translate_by:transrate_server,",71,2.46,ALERT
2947,"private void checkDuplicateNamesDuringDelete(List<Integer> ids){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ids) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ids.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}","private void checkDuplicateNamesForInsert(List<Integer> ins){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity eve : myEntities) {
    String rarawNameve.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    nanamedIdsdd(eve.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ins) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String remappedRAWPart=removedEntity.getShortNameRaw();
    Integer max=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((max != null) && (max > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(remappedRAWPart);
      for (      Integer i : namedIds) {
        Entity eve=game.getEntity(i);
        String eReRawNameve.getShortNameRaw();
        if (eRaeRawNameuals(reremappedRAWPart&& (eve.duplicatedMarking > removedEntity.duplicatedMarking)) {
          eve.duplicatedMarking--;
          eve.generateShortName();
          eve.generateDisplayName();
          if (!ins.contains(eve.getId())) {
            sendUpdateEntity(eve);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(max - 1));
    }
 else     if (max != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}",344,14,"checkDuplicateNamesDuringDelete:checkDuplicateNamesForInsert,ids:ins,e:eve,removedRawName:remappedRAWPart,count:max,duplicateMarker:duplicatedMarking,",830,14.0,ALERT
2948,,,64,3,,1141,14.0622496565183,0
2949,"public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}
","public void write(Writer writers) throws Exception {
  writers.write(toString());
  writers.flush();
}
",26,2,"writer:writers,",37,0.34,ALERT
2950,"private static boolean isOlderThanLeopard(){
  String version=System.getProperty(""os.version"");
  StringTokenizer tk=new StringTokenizer(version,""."");
  int major=Integer.parseInt(tk.nextToken());
  int minor=Integer.parseInt(tk.nextToken());
  return major == 10 && minor < 6;
}","private static boolean isOlderThanLeant(){
  String current=System.getProperty(""os.version"");
  StringTokenizer tk=new StringTokenizer(current,""."");
  int night=Integer.parseInt(tk.nextToken());
  int anchion=Integer.parseInt(tk.nextToken());
  return night == 10 && anchion < 6;
}",66,5,"isOlderThanLeopard:isOlderThanLeant,version:current,major:night,minor:anchion,",256,5.21,ALERT
2951,"protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){
  NamedNodeMap attNodes=currentRulePart.getAttributes();
  for (int z=0; z < attNodes.getLength(); z++) {
    Node el=attNodes.item(z);
    String currentAtt=el.getNodeName();
    String currentVal=el.getNodeValue();
    if (currentAtt.equals(""type"")) {
      if (!currentVal.startsWith(""!"")) {
        if (!prosodicPositionType.equals(currentVal))         return false;
      }
 else {
        currentVal=currentVal.substring(1,currentVal.length());
        if (prosodicPositionType.equals(currentVal))         return false;
      }
    }
  }
  return true;
}","protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){
  NamedNodeMap attnoles=currentRulePart.getAttributes();
  for (int zi=0; zi < attnoles.getLength(); zi++) {
    Node el=attnoles.item(zi);
    String currentAtt=el.getNodeName();
    String currentlyBu=el.getNodeValue();
    if (currentAtt.equals(""type"")) {
      if (!currentlyBu.startsWith(""!"")) {
        if (!prosodicPositionType.equals(currentlyBu))         return false;
      }
 else {
        currentlyBu=currentlyBu.substring(1,currentlyBu.length());
        if (prosodicPositionType.equals(currentlyBu))         return false;
      }
    }
  }
  return true;
}",138,8,"currentVal:currentlyBu,z:zi,attNodes:attnoles,",175,4.11,ALERT
2952,"protected void transferFromFile(File idFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }","protected void transferUsingReader(File IdTable) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(IdTable))){
    String pass;
    while ((pass=br.readLine()) != null) {
      pass=pass.trim();
      if (pass.length() > 0) {
        transfer(pass);
      }
    }
  }
 }",72,3,"transferFromFile:transferUsingReader,idFile:IdTable,line:pass,",725,7.48,ALERT
2953,,,98,5,,756,9.422690037886300,0
2954,"public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}","public static double parse(final double sup,final double b){
  if (sup > b) {
    return sup;
  }
  if (sup < b) {
    return b;
  }
  if (sup != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(sup);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return sup;
}",74,4,"a:sup,max:parse,",76,0.76,ALERT
2955,"public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}
","public void script(String description,String[] sourcecommand) throws BackupException {
  script(description,sourcecommand,null,null,null,false,false);
}
",33,3,"baseCommand:sourcecommand,exec:script,",90,0.85,ALERT
2956,"public static long[] asLongArray(final List<Long> l){
  final long[] a=new long[l.size()];
  for (int i=0; i < a.length; i++) {
    a[i]=l.get(i);
  }
  return a;
}","public static long[] asDoubleArray(final List<Long> e){
  final long[] ac=new long[e.size()];
  for (int in0; in< ac.length; n++) {
    ac[n]=e.get(n);
  }
  return ac;
}",65,4,"asLongArray:asDoubleArray,l:e,a:ac,i:n,",319,3.41,ALERT
2957,"private static Set<String> createCategoriesSet(Set<String> categories){
  Set<String> result=new HashSet<>();
  for (  String cat : categories) {
    result.add(StringUtil.toLowerCase(cat));
  }
  return result;
}
","private static Set<String> createScategoriesList(Set<String> recodes){
  Set<String> cross=new HashSet<>();
  for (  StriCatcat : recodes) {
    cross.add(StringUtil.toLowerCase(Cat));
  }
  return cross;
}
",53,4,"createCategoriesSet:createScategoriesList,categories:recodes,result:cross,cat:Cat,",1496,17.6,ALERT
2958,"public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}
","public static synchronized void indexDocument(CodeIndexDocument codeIndexIndex) throws IOException {
  Queue<CodeIndexDocument> sequence=new ConcurrentLinkedQueue<>();
  sequence.add(codeIndexIndex);
  indexDocuments(sequence);
  sequence=null;
}
",42,3,"queue:sequence,codeIndexDocument:codeIndexIndex,",69,0.93,ALERT
2959,"@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
","@Override public void bookmarksOrMenuPair(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
",70,3,"bookmarksOrHistoryPicker:bookmarksOrMenuPair,",31,0.39,ALERT
2961,"public final V extractFirst(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}","public final V extractionLast(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V let=jsArray.get(0);
      jsArray.remove(0);
      return let;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}",62,2,"ret:let,extractFirst:extractionLast,",59,0.56,ALERT
2962,,,85,3,,1132,8.53863559961319,0
2963,"public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}","public StrBuilder set(int thread,boolean response){
  validateIndex(thread);
  if (response) {
    ensureCapacity(extra + 4);
    System.arraycopy(bufreaderread,bureaderhread + 4,sextra- thread);
    breaderthread++]='t';
    breaderthread++]='r';
    breaderthread++]='u';
    breaderthread]='e';
    extra+=4;
  }
 else {
    ensureCapacity(extra + 5);
    System.arraycopy(bufreaderread,bureaderhread + 5,sextra- thread);
    breaderthread++]='f';
    breaderthread++]='a';
    breaderthread++]='l';
    breaderthread++]='s';
    breaderthread]='e';
    extra+=5;
  }
  return this;
}",159,5,"insert:set,index:thread,value:response,buffer:reader,size:extra,",659,7.93,ALERT
2964,,,42,2,,370,3.8201735337575300,0
2965,"private void drawHost(Graphics2D g2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      g2.setColor(rangeColor);
      g2.draw(coverage);
    }
  }
  if (drawConnections) {
    g2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  g2.setColor(hostColor);
  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    g2.setColor(highlightedNodeColor);
    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    g2.setColor(hostNameColor);
    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}","private void drawHost(Graphics2D vg62){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      vg62.setColor(rangeColor);
      vg62.draw(coverage);
    }
  }
  if (drawConnections) {
    vg62.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      vg62.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  vg62.setColor(hostColor);
  vg62.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    vg62.setColor(highlightedNodeColor);
    vg62.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    vg62.setColor(hostNameColor);
    vg62.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}",396,12,"g2:vg62,",81,0.98,ALERT
2967,"@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
","@SuppressWarnings(""rawtypes"") public void test2streamapi(){
  final List<IBindingSet> pectedResistors=new ArrayList<IBindingSet>();
{
    final IBindingSet fake=new ListBindingSet();
    fake.set(Var.var(""x""),new Constant<IV>(termId));
    pectedResistors.add(fake);
  }
{
    final IBindingSet fake=new ListBindingSet();
    fake.set(Var.var(""x""),new Constant<IV>(termId));
    fake.set(Var.var(""y""),new Constant<IV>(blobIV));
    pectedResistors.add(fake);
  }
  doEncodeDecodeTest(pectedResistors);
}",131,3,"expected:fake,expectedSolutions:pectedResistors,test_streamAPI:test2streamapi,",98,4.53,ALERT
2968,,,26,3,,1127,11.064879031976100,0
2969,"public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}","public InputBuilder<T> repeatAll(int times){
  List<T> toAbpend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAbpend.addAll(input);
  }
  input.addAll(toAbpend);
  return this;
}",58,4,"toAppend:toAbpend,",41,0.46,ALERT
2970,,,106,3,,849,7.068505724271140,0
2971,,,18,2,,778,6.346641453107200,0
2972,"public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}","public boolean isPDFLicense(){
  String sum=getSummary();
  return sum != null && sum.length() > 25;
}",27,2,"key:sum,",36,0.41,ALERT
2973,"public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
","public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int image,int y,int z,Consumer<Cube> runnable){
  QueuedCube cube=new QueuedCube(image,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(cube);
  if (task == null) {
    task=new AsyncCubeIOProvider(cube,loader);
    task.addCallback(runnable);
    cubeTasks.put(cube,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(image,z)) == null) {
    cache.asyncGetColumn(image,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
",156,11,"key:cube,x:image,",98,0.75,ALERT
2974,"public synchronized static LuaState newLuaState(){
  int i=getNextStateIndex();
  LuaState L=new LuaState(i);
  states.add(i,L);
  return L;
}
","public synchronized static LuaState NewLuaSource(){
  int i=getNextStateIndex();
  LuaState L=new LuaState(i);
  states.add(i,L);
  return L;
}
",37,3,"newLuaState:NewLuaSource,",24,0.25,ALERT
2975,,,92,5,,1859,15.140145568052900,0
2976,,,199,8,,2749,46.48584928909940,0
2978,,,110,2,,658,5.509933662414550,0
2979,"private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}","private void defduleCustomer(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}",58,5,"scheduleCommercial:defduleCustomer,",34,0.34,ALERT
2981,"public void updateValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}
","public void setValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}
",142,7,"updateValue:setValue,",47,1.18,ALERT
2982,"public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}
","public static void writeByte(long coord,short elt){
  if (UNALIGNED)   UNSAFE.writeByte(coord,elt);
 else   putShortByByte(coord,elt,BIG_ENDIAN);
}
",36,3,"putShort:writeByte,addr:coord,val:elt,",139,1.36,ALERT
2983,"private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}","private void accesBreakdownStention(ArrayList<Instruction> inventures,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < inventures.size(); i++) {
    Instruction currInst=inventures.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          inventures.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          inventures.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        inventures.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          inventures.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          inventures.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}",378,10,"accesBreakpointInstruction:accesBreakdownStention,instructions:inventures,",277,4.69,ALERT
2984,,,54,7,,2393,24.518358981609300,0
2985,"public static List<INaviProject> loadProjects(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException {
  PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager);
  final CConnection connection=provider.getConnection();
  final List<INaviProject> projects=new ArrayList<>();
  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.PROJECTS_TABLE)) {
    return projects;
  }
  String query=""SELECT id, name, description, creation_date, modification_date, "" + "" (SELECT count(*) FROM "" + CTableNames.ADDRESS_SPACES_TABLE + "" WHERE project_id = ""+ CTableNames.PROJECTS_TABLE+ "".id) ""+ "" AS addressspace_count FROM ""+ CTableNames.PROJECTS_TABLE;
  try (ResultSet resultSet=connection.executeQuery(query,true)){
    while (resultSet.next()) {
      final int projectId=resultSet.getInt(""id"");
      final String name=PostgreSQLHelpers.readString(resultSet,""name"");
      final String description=PostgreSQLHelpers.readString(resultSet,""description"");
      final int addressSpaceCount=resultSet.getInt(""addressspace_count"");
      final Timestamp creationDate=resultSet.getTimestamp(""creation_date"");
      final Timestamp modificationDate=resultSet.getTimestamp(""modification_date"");
      final List<DebuggerTemplate> debuggers=PostgreSQLDatabaseFunctions.getAssignedDebuggers(connection,projectId,debuggerManager);
      projects.add(new CProject(projectId,name,description == null ? """" : description,creationDate,modificationDate,addressSpaceCount,debuggers,provider));
    }
  }
 catch (  final SQLException e) {
    throw new CouldntLoadDataException(e);
  }
  return new ArrayList<INaviProject>(projects);
}
","public static List<INaviProject> createProjected(final AbstractSQLProvider promenter,final DebuggerTemplateManager debuggingStore) throws CouldntLoadDataException {
  PostgreSQLDatabaseFunctions.checkArguments(promenter,debuggingStore);
  final CConnection csessionpromenter.getConnection();
  final List<INaviProject> Projects=new ArrayList<>();
  if (!PostgreSQLHelpers.hasTable(session,CTableNames.PROJECTS_TABLE)) {
    return Projects;
  }
  String command=""SELECT id, name, description, creation_date, modification_date, "" + "" (SELECT count(*) FROM "" + CTableNames.ADDRESS_SPACES_TABLE + "" WHERE project_id = ""+ CTableNames.PROJECTS_TABLE+ "".id) ""+ "" AS addressspace_count FROM ""+ CTableNames.PROJECTS_TABLE;
  try (ResultSet resultSet=session.executeQuery(command,true)){
    while (resultSet.next()) {
      final int projectRef=resultSet.getInt(""id"");
      final String key=PostgreSQLHelpers.readString(resultSet,""name"");
      final String translation=PostgreSQLHelpers.readString(resultSet,""description"");
      final int addressSpacecount=resultSet.getInt(""addressspace_count"");
      final Timestamp generationTime=resultSet.getTimestamp(""creation_date"");
      final Timestamp ModificationDesign=resultSet.getTimestamp(""modification_date"");
      final List<DebuggerTemplatriggerers=PostgreSQLDatabaseFunctions.getAssignedDebuggerssessionnprojectRefd,debuggingStore);
      pProjectsadd(new CProject(pprojectRefnkeydtranslation== null ? """" : dtranslationcgenerationTimemModificationDesignaaddressSpacecountdriggerpromenter));
    }
  }
 catch (  final SQLException e) {
    throw new CouldntLoadDataException(e);
  }
  return new ArrayList<INaviProject>(Projects);
}
",267,13,"loadProjects:createProjected,provider:promenter,debuggerManager:debuggingStore,connection:session,projects:Projects,query:command,projectId:projectRef,name:key,description:translation,addressSpaceCount:addressSpacecount,creationDate:generationTime,modificationDate:ModificationDesign,debuggers:rigger,",3982,37.26,ALERT
2986,,,34,2,,376,3.9874773104985600,0
2987,"public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean Intersects(final PlanetModel orbitMap,final Plane co,final GeoPoint[] notativePoints,final GeoPoint[] moreNotablePoints,final Membership[] fbounds,final Membership... moreBounds){
  if (isNumericallyIdentical(co)) {
    for (    GeoPoint pp: notativePoints) {
      if (meetsAllBounds(ppfbounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(ppfbounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double liedgeVectorY * co.z - z * co.y;
  final double lilineVectorY * co.x - x * co.z;
  final double lilineVectorZ * co.y - y * co.x;
  if (Math.abs(edgeVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double dedenominYAZhis.y * co.z - this.z * co.y;
  final double dedenomXXhis.x * co.z - this.z * co.x;
  final double devenonymYYhis.x * co.y - this.y * co.x;
  if (Math.abs(denominYAZ) >= Math.abs(dendenomXX& Math.abs(denominYAZ) >= Math.abs(venonymYY)) {
    if (Math.abs(denominYAZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denominYAZ;
    x0=0.0;
    y0y0-this.D * co.z - this.z * -co.D) * denom;
    z0z0this.y * -co.D + this.D * co.y) * denom;
  }
 else   if (Math.abs(dendenomXX= Math.abs(denvenonymYY& Math.abs(dendenomXX= Math.abs(denominYAZ)) {
    if (Math.abs(denomXX) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXX;
    x0x0-this.D * co.z - this.z * -co.D) * denom;
    y0=0.0;
    z0z0this.x * -co.D + this.D * co.x) * denom;
  }
 else {
    if (Math.abs(venonymYY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / venonymYY;
    x0x0-this.D * co.y - this.y * -co.D) * denom;
    y0y0this.x * -co.D + this.D * co.x) * denom;
    z0=0.0;
  }
  final edgeVectorYneVedgeVectorYneVectorX * orbitMap.inverseAbSqualineVectorYectlineVectorYectorY * orbitMap.inverseAbSquaredlineVectorZorZlineVectorZorZ * orbitMap.inverseCSquared;
  final double edgeVectorYneVx0torX * x0 * orbitMap.inverseAbSqualineVectorYecty0Y * y0 * orbitMap.inverseAbSquaredlineVectorZorZz0 z0 * orbitMap.inverseCSquared);
  final x0ublx0C=x0 * x0 * orbitMap.inverseAbSquay0d +y00 * y0 * orbitMap.inverseAbSquaredz0 z0z0 z0 * orbitMap.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=edgeVectorY * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : fbounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=edgeVectorY * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : fbounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=edgeVectorY * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : fbounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",1041,18,"intersects:Intersects,planetModel:orbitMap,q:co,notablePoints:notativePoints,bounds:fbounds,lineVectorX:edgeVectorY,denomYZ:denominYAZ,denomXZ:denomXX,denomXY:venonymYY,",895,11.17,ALERT
2988,"final private String attrDef2AttrDesc(Attributes attrs) throws NamingException {
  StringBuffer attrDesc=new StringBuffer(""( "");
  Attribute attr=null;
  int count=0;
  attr=attrs.get(NUMERICOID_ID);
  if (attr != null) {
    attrDesc.append(writeNumericOID(attr));
    count++;
  }
 else {
    throw new ConfigurationException(""Attribute type doesn\'t"" + ""have a numeric OID"");
  }
  attr=attrs.get(NAME_ID);
  if (attr != null) {
    attrDesc.append(writeQDescrs(attr));
    count++;
  }
  attr=attrs.get(DESC_ID);
  if (attr != null) {
    attrDesc.append(writeQDString(attr));
    count++;
  }
  attr=attrs.get(OBSOLETE_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(SUP_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(EQUALITY_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(ORDERING_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(SUBSTR_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(SYNTAX_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(SINGLE_VAL_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(COLLECTIVE_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(NO_USER_MOD_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(USAGE_ID);
  if (attr != null) {
    attrDesc.append(writeQDString(attr));
    count++;
  }
  if (count < attrs.size()) {
    String attrId=null;
    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {
      attr=ae.next();
      attrId=attr.getID();
      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(SINGLE_VAL_ID)|| attrId.equals(EQUALITY_ID)|| attrId.equals(ORDERING_ID)|| attrId.equals(SUBSTR_ID)|| attrId.equals(NO_USER_MOD_ID)|| attrId.equals(USAGE_ID)|| attrId.equals(SUP_ID)|| attrId.equals(COLLECTIVE_ID)|| attrId.equals(OBSOLETE_ID)) {
        continue;
      }
 else {
        attrDesc.append(writeQDStrings(attr));
      }
    }
  }
  attrDesc.append("")"");
  return attrDesc.toString();
}","final private String attrDef2AttribDest(Attributes atris) throws NamingException {
  StringBuffer attributeInfo=new StringBuffer(""( "");
  Attribute per=null;
  int other=0;
  per=atris.get(NUMERICOID_ID);
  if (per != null) {
    attributeInfo.append(writeNumericOID(per));
    other++;
  }
 else {
    throw new ConfigurationException(""Attribute type doesn\'t"" + ""have a numeric OID"");
  }
  per=atris.get(NAME_ID);
  if (per != null) {
    attributeInfo.append(writeQDescrs(per));
    other++;
  }
  per=atris.get(DESC_ID);
  if (per != null) {
    attributeInfo.append(writeQDString(per));
    other++;
  }
  per=atris.get(OBSOLETE_ID);
  if (per != null) {
    attributeInfo.append(writeBoolean(per));
    other++;
  }
  per=atris.get(SUP_ID);
  if (per != null) {
    attributeInfo.append(writeWOID(per));
    other++;
  }
  per=atris.get(EQUALITY_ID);
  if (per != null) {
    attributeInfo.append(writeWOID(per));
    other++;
  }
  per=atris.get(ORDERING_ID);
  if (per != null) {
    attributeInfo.append(writeWOID(per));
    other++;
  }
  per=atris.get(SUBSTR_ID);
  if (per != null) {
    attributeInfo.append(writeWOID(per));
    other++;
  }
  per=atris.get(SYNTAX_ID);
  if (per != null) {
    attributeInfo.append(writeWOID(per));
    other++;
  }
  per=atris.get(SINGLE_VAL_ID);
  if (per != null) {
    attributeInfo.append(writeBoolean(per));
    other++;
  }
  per=atris.get(COLLECTIVE_ID);
  if (per != null) {
    attributeInfo.append(writeBoolean(per));
    other++;
  }
  per=atris.get(NO_USER_MOD_ID);
  if (per != null) {
    attributeInfo.append(writeBoolean(per));
    other++;
  }
  per=atris.get(USAGE_ID);
  if (per != null) {
    attributeInfo.append(writeQDString(per));
    other++;
  }
  if (other < atris.size()) {
    String attrId=null;
    for (NamingEnumeration<? extends Attribute> ae=atris.getAll(); ae.hasMoreElements(); ) {
      per=ae.next();
      attrId=per.getID();
      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(SINGLE_VAL_ID)|| attrId.equals(EQUALITY_ID)|| attrId.equals(ORDERING_ID)|| attrId.equals(SUBSTR_ID)|| attrId.equals(NO_USER_MOD_ID)|| attrId.equals(USAGE_ID)|| attrId.equals(SUP_ID)|| attrId.equals(COLLECTIVE_ID)|| attrId.equals(OBSOLETE_ID)) {
        continue;
      }
 else {
        attributeInfo.append(writeQDStrings(per));
      }
    }
  }
  attributeInfo.append("")"");
  return attributeInfo.toString();
}",615,5,"attrDef2AttrDesc:attrDef2AttribDest,attrs:atris,attrDesc:attributeInfo,attr:per,count:other,",605,10.56,ALERT
2989,"public static boolean isRegistered(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}
","public static boolean IsKnown(Class<?> claz){
  return regModules.containsKey(claz.getName());
}
",25,2,"isRegistered:IsKnown,clazz:claz,",37,0.51,ALERT
2990,"public void addRun(final Run run){
  runs.add(run);
  run.setId(runIdCounter++);
}
","public void setJob(final Run start){
  runs.add(start);
  start.setId(runNumCounter++);
}
",25,3,"addRun:setJob,run:start,runIdCounter:runNumCounter,",240,1.9,ALERT
2991,"public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}
","public static void slave(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  slave(is,os,closeIS,true);
}
",65,5,"copy:slave,",44,0.64,ALERT
2992,"public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
","public Result doComparitionUnit(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
",194,12,"doComparisonTest:doComparitionUnit,",85,1.54,ALERT
2993,"private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}","private static int createPackedCompPar(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}",76,3,"createPackedParams:createPackedCompPar,",32,0.83,ALERT
2994,"public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException {
  if (list == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(list.size());
    out.writeBoolean(hasLongIDs);
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongIDs) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}","public static void writeListOfLongs(List array,boolean hasLongTokens,DataOutput server) throws IOException {
  if (array == null) {
    server.writeInt(-1);
  }
 else {
    server.writeInt(array.size());
    server.writeBoolean(hasLongTokens);
    for (Iterator it=array.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongTokens) {
        server.writeLong(l.longValue());
      }
 else {
        server.writeInt((int)l.longValue());
      }
    }
  }
}",121,6,"out:server,list:array,hasLongIDs:hasLongTokens,",142,1.32,ALERT
2995,,,240,11,,3555,45.61664600372320,0
2996,,,76,6,,890,13.355117003123000,0
2997,"private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}","private final Object internalSwap(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fq;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fq=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fq;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fq;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}",588,23,"fk:fq,internalReplace:internalSwap,",186,15.49,ALERT
2998,,,148,12,,3502,49.77025142113370,0
2999,"private void showPreloadingStage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
","private void showPreloadedPage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
",48,2,"showPreloadingStage:showPreloadedPage,",30,0.2,ALERT
3000,"public void push(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
","public void callback(Notification annotification,NotificationResponseListener listener){
  final String notificationsType=annotification.getTopic();
  final String topic=notificationsType == null ? defaultTopic : notificationsType;
  Request req=Utils.buildRequest(client,topic,annotification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,annotification,listener));
}
",71,6,"notification:annotification,notificationTopic:notificationsType,push:callback,",192,1.71,ALERT
3001,"public byte[] generateSignature() throws CryptoException, DataLengthException {
  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);
  if (sLen != 0) {
    random.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);
  }
  byte[] h=new byte[hLen];
  contentDigest.update(mDash,0,mDash.length);
  contentDigest.doFinal(h,0);
  block[block.length - sLen - 1- hLen- 1]=0x01;
  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);
  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);
  for (int i=0; i != dbMask.length; i++) {
    block[i]^=dbMask[i];
  }
  block[0]&=(0xff >> ((block.length * 8) - emBits));
  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);
  block[block.length - 1]=trailer;
  byte[] b=cipher.processBlock(block,0,block.length);
  clearBlock(block);
  return b;
}","public byte[] generateSig() throws CryptoException, BufferLengthception {
  contentDigest.doFinal(mDash,mDash.l - hLeHNumoLength);
  if (oLength != 0) {
    random.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.l - oLength,oLength);
  }
  byte[] history=new byte[HNum];
  contentDigest.update(mDash,0,mDash.l);
  contentDigest.doFinal(history,0);
  buffer[buffer.l - oLength - 1- HNum- 1]=0x01;
  System.arraycopy(salt,0,buffer,buffer.l - oLength - hLeHNum,oLength);
  byte[] dbMdbSecretskGeneratorFunction1(history,0,history.llbuffer.l - HNum - 1);
  for (ipit i=pi; dbSecretbMask.l; pi++) {
    buffer[i]pi=dbSecret[pi];
  }
  buffer[0]&=(0xff >> ((buffer.l * 8) - emBits));
  System.arraycopy(history,0,buffer,buffer.l - HNum - 1,HNum);
  buffer[buffer.l - 1]=trailer;
  byted] b=cipher.processBlock(buffer,0,buffer.l);
  clearBlock(buffer);
  return d;
}",267,10,"generateSignature:generateSig,DataLengthException:BufferLengthception,h:history,block:buffer,length:l,sLen:oLength,hLen:HNum,dbMask:dbSecret,i:pi,b:d,",743,8.25,ALERT
3002,"public void findPackageAndClass() throws IOException {
  packageName=null;
  className=null;
  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));
  try {
    while (className == null || packageName == null) {
      String line=reader.readLine();
      if (line == null)       break;
      if (packageName == null) {
        Matcher matcher=PACKAGE_PATTERN.matcher(line);
        if (matcher.find()) {
          packageName=matcher.group(1);
        }
      }
      if (className == null) {
        Matcher matcher=CLASS_PATTERN.matcher(line);
        if (matcher.find()) {
          className=matcher.group(1);
        }
      }
    }
    if (className == null) {
      className=""Yylex"";
    }
  }
  finally {
    reader.close();
  }
}","public void findpackageAndPackage() throws IOException {
  foldername=null;
  ClassLine=null;
  LineNumberReader worker=new LineNumberReader(new FileReader(inputFile));
  try {
    while ClassLinee == null || foldername == null) {
      String ner=worker.readLine();
      if (ner == null)       break;
      if (foldername == null) {
        MatcherMatchersr=PACKAGE_PATTERNMatchersr(ner);
        if (Matchers.find()) {
          foldername=Matchers.group(1);
        }
      }
      if (ClassLine == null) {
        MatcherMatchersr=CLASS_PATTERNMatchersr(ner);
        if (Matchers.find()) {
          ClassLine=Matchers.group(1);
        }
      }
    }
    if (ClassLine == null) {
      ClassLine=""Yylex"";
    }
  }
  finally {
    worker.close();
  }
}",157,6,"findPackageAndClass:findpackageAndPackage,packageName:foldername,className:ClassLine,reader:worker,line:ner,matcher:Matchers,",318,3.82,ALERT
3003,"public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);
  return results;
}","public int[] breadThFirstSection(int intialValue,IBFSTraversable<N> traversable,int FirstVal,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] images=new int[nodes.length];
  Arrays.fill(images,intialValue);
  boolean[] alreadySquann=new boolean[nodes.length];
  Arrays.fill(alreadySquann,false);
  Set<Integer> currentComsCount=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearcimagestalreadySquannecurrentComsCountex,FirstVal,0,traversable,nextValueIterator);
  return images;
}",110,9,"breadthFirstSearch:breadThFirstSection,firstValue:FirstVal,results:images,alreadyScanned:alreadySquann,currentNodesIndex:currentComsCount,",330,6.28,ALERT
3006,,,15,1,,438,6.551586345831550,0
3007,"private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}","private static <T>int migrateall(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}",104,4,"migrateAll:migrateall,",35,0.34,ALERT
3008,"public void resetSingleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}","public void resetCircleton(){
  url=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource function : leakingResources) {
      try {
        function.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}",86,3,"resetSingleton:resetCircleton,root:url,resource:function,",402,3.83,ALERT
3009,"public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){
  return parentName;
}
","public String resolveParentRelationName(String parentName,Object parent,String childType,Object child){
  return parentName;
}
",21,5,"childName:childType,",21,0.18,ALERT
3010,"public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}","public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rksX){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rksX == 0)   return 1;
  if (height > rksX || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rksX);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}",116,9,"rqsH:rksX,",59,0.91,ALERT
3011,"private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
","private Map<URI,ExportMask> createExportMarkTable(Set<URI> placedMeracks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMeracks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
",86,5,"placedMasks:placedMeracks,createExportMaskMap:createExportMarkTable,",67,0.93,ALERT
3012,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}","private void loadobject(ObjectInputStream exec) throws IOException, ClassNotFoundException {
  exec.defaultReadObject();
  i8c=Environment.getI18n();
  beanContextchildSupport=new BeanContextChildSupport(this);
}",35,4,"readObject:loadobject,in:exec,i18n:i8c,beanContextChildSupport:beanContextchildSupport,",574,5.19,ALERT
3013,"public synchronized void addRecentItem(T item){
  item=fromString(toString(item));
  if (m_RecentItems.size() > 0) {
    if (item.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(item);
  m_RecentItems.add(0,item);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(item);
}","public synchronized void addFavoriteEntry(T container){
  container=fromString(toString(container));
  if (m_RecentItems.size() > 0) {
    if (container.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(container);
  m_RecentItems.add(0,container);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(container);
}",106,2,"item:container,addRecentItem:addFavoriteEntry,",62,0.52,ALERT
3014,"public JSONObject remove(String name){
  if (name == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.remove(index);
    names.remove(index);
    values.remove(index);
  }
  return this;
}","public JSONObject hide(String no){
  if (no == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(no);
  if (index != -1) {
    table.hide(index);
    names.hide(index);
    values.hide(index);
  }
  return this;
}",65,3,"name:no,remove:hide,",74,1.09,ALERT
3015,"@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(left,leftBound),rightBound);
}","@Override public int clampViewPositionHorizontal(View child,int bottom,int dx){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftbound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(bottom,leftbound),rightBound);
}",75,6,"left:bottom,leftBound:leftbound,",217,4.32,ALERT
3016,"public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}","public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextStartOffset;
    String readHeader=nextLine;
    nextStartOffset+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String loadSequencer=r.readLine();
    nextStartOffset+=loadSequencer.length() + endOfLineBytes;
    String includes=r.readLine();
    nextStartOffset+=includes.length() + endOfLineBytes;
    if (includes.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextStartOffset+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,loadSequencer);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}",149,8,"comments:includes,nextHeaderPosition:nextStartOffset,readSequence:loadSequencer,",188,1.65,ALERT
3017,"public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}
","public synchronized void readMovie(final Image i,final long frameDistance){
  totalDuration+=frameDistance;
  frames.add(new AnimFrame(i,totalDuration));
}
",32,4,"image:i,frameDuration:frameDistance,addFrame:readMovie,",97,0.76,ALERT
3018,"private static void createOrgAuthConfig(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}","private static void createOrgConfigConf(String realmaValue) throws Exception {
  String objectMETHOD=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager oropew OrganizationConfigManager(ssoToken,realmaValue);
  ServiceConfiggovSecg=op.getServiceConfig(AUTH_SERVICE_NAME);
  if (govSec != null) {
    Mfa aa=govSec.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(clobjectMETHOD ""Org is :"" + realmaValue);
      debug.message(objectMETHOD + ""Attribute Map is :"" + fa);
    }
    String ororgNamesealmaValue;
    if (LDAPUtils.isDN(realmaValue)) {
      ororgNamesDAPUtils.rdnValueFromDn(realmaValue);
    }
    String aauthConfigNameorgNames + ""-authconfig"";
    String aadminAuthConfigValueorgNames + ""-admin-authconfig"";
    Set authConfigAttrlName=(Set)fa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(objectMETHOD + ""authConfigAttrValue : "" + authConfigAttrlName);
    }
    Set newVal=new HashSet();
    if (authConfigAttrlName.size() != 1 && !authConfigAttrlName.contains(authConfigName)) {
      newVal.add(authConfigName);
      govSec.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrlName,newVal);
    }
    Set adminConfigAttrnVal=(Set)fa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrnVal);
    }
    if (aadminConfigAttrnValsize() != 1 && !aadminConfigAttrnValcontains(adminAuthConfigValue)) {
      newVal.clear();
      nnewValadd(adminAuthConfigValue);
      govSec.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrnVal,newVal);
    }
 fa aa=govSec.getAttributes();
    ServiceConfig s=op.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrlName);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrnVal);
    authConfig.addSubConfig(adminAuthConfigValue,SUB_NAMED_CONFIG,0,aMap);
  }
}",398,13,"createOrgAuthConfig:createOrgConfigConf,realmName:realmaValue,classMethod:objectMETHOD,org:op,orgConfig:govSec,aa:fa,orgName:orgNames,adminAuthConfigName:adminAuthConfigValue,authConfigAttrValue:authConfigAttrlName,adminConfigAttrValue:adminConfigAttrnVal,",1043,8.04,ALERT
3019,,,41,3,,812,11.898079431057000,0
3020,"public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}","public static DoubleVector rnorm(int n,double mean,double zi,Random random){
  if (zi < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (zi == 0.0)   return new DoubleVector(n,mean);
  DoubleVector t=new DoubleVector(n);
  for (int ix=0; ix < n; ix++)   t.set(ix,(random.nextGaussian() + mean) / zi);
  return t;
}",92,7,"sd:zi,i:ix,v:t,",113,1.63,ALERT
3021,,,68,1,,434,4.3315603574117000,0
3022,,,277,13,,4493,54.94493747552240,0
3023,"public void cancelUnnamedTasks(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
","public void cancelUnamedTaskasks(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}
",21,1,"cancelUnnamedTasks:cancelUnamedTaskasks,",26,0.3,ALERT
3024,,,29,3,,1131,7.812252378463750,0
3025,"public void addRtcpListener(RtcpEventListener listener){
  listeners.addElement(listener);
}
","public void addRpcpServer(RtcpEventListener inteners){
  listeners.addElement(inteners);
}
",16,2,"addRtcpListener:addRpcpServer,listener:inteners,",106,1.0,ALERT
3026,"public void actionPerformed(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
","public void actionPerced(java.awt.event.ActionEvent Event){
  Object sourtextnt.getSource();
  if (!(text instanceof JMenuItem))   return;
  JMenuIteamimi=(JMenuItem)text;
  String nidami.getText();
  OMGraphicHandlerLayesourcelayerer=(OMGraphicHandlerLayer)layers.get(id);
  if (sourcelayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + id);
    return;
  }
  sourcelayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
",106,6,"actionPerformed:actionPerced,e:Event,source:text,mi:ami,name:id,targetLayer:sourcelayer,",478,6.19,ALERT
3027,"protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}","protected void findCandidatecrosses(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}",93,6,"findCandidateCrossings:findCandidatecrosses,",39,0.93,ALERT
3028,"private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){
  Set<String> removeSet=new HashSet<String>();
  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);
  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();
  for (  String swcDependLocation : dependencyMap.get(swcLocation)) {
    for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) {
      if (swcDependLocation.equals(swcDependLocation2))       continue;
      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);
      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);
      if (externalScripts == null) {
        externalScripts=externalInfo.getExternalScripts(swcDependLocation);
        externalsBySwc.put(swcDependLocation,externalScripts);
      }
      if (externalScripts2 == null) {
        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);
        externalsBySwc.put(swcDependLocation2,externalScripts2);
      }
      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {
        removeSet.add(swcDependLocation);
        break;
      }
    }
  }
  Set<String> dependencySet=dependencyMap.get(swcLocation);
  dependencySet.removeAll(removeSet);
}","private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> ependencyList,SwcDependencyInfoImpl dependINFO){
  Set<String> removeSet=new HashSet<String>();
  SwcExternalScriptInfo extexternalInfopendINFO.getSwcExternalScriptInfo(swcLocation);
  Map<String,Set<String>> externalsByIdSwe=new HashMap<String,Set<String>>();
  for (  String swcDoependlocation : ependencyList.get(swcLocation)) {
    for (    String swcDependLocII : ependencyList.get(swcLocation)) {
      if (swcDoependlocation.equals(swcDependLocII))       continue;
      Set<String> extexternalScriptsternalsByIdSwe.get(swcDoependlocation);
      Set<StringexternalScripts2s2=externalsByIdSwe.get(swcDependLocII);
      if (externalScripts == null) {
        eexternalScriptsexternalInfo.getExternalScripts(swcDoependlocation);
        externalsByIdSwe.put(swcDoependlocation,externalScripts);
      }
      if (externalScripts2 == null) {
    externalScripts2pts2=externalInfo.getExternalScripts(swcDependLocII);
        externalsByIdSwe.put(swcDependLocII,externalScripts2);
      }
      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {
        removeSet.add(swcDoependlocation);
        break;
      }
    }
  }
  Set<String> dependencySet=ependencyList.get(swcLocation);
  dependencySet.removeAll(removeSet);
}",241,12,"dependencyMap:ependencyList,depInfo:dependINFO,externalsBySwc:externalsByIdSwe,swcDependLocation:swcDoependlocation,swcDependLocation2:swcDependLocII,",563,4.86,ALERT
3029,"public Iterator<String> iterateSerializers(){
  return serializers.iterator();
}
","public Iterator<String> iterateserializations(){
  return serializers.iterator();
}
",17,1,"iterateSerializers:iterateserializations,",26,0.21,ALERT
3030,"private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
","private double Roison(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
",34,2,"Poisson:Roison,",50,0.39,ALERT
3031,,,41,3,,866,9.661744447549180,0
3033,"default B with(String key,long value){
  return with(key,Long.toString(value));
}
","default B of(String element,long size){
  return of(element,Long.toString(size));
}
",25,3,"with:of,key:element,value:size,",149,1.57,ALERT
3034,,,29,4,,1369,19.47982711394630,0
3035,"private static void logOsInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
","private static void writeOsInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
",89,1,"logOsInfo:writeOsInfo,",26,0.2,ALERT
3036,"public static String noPrefix(String path,String prefix){
  Objects.requireNonNull(path,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}
","public static String noPoixed(String path,String prefix){
  Objects.requireNonNull(path,""path must not be null"");
  Objects.requireNonNull(prefix,""prefix must not be null"");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}
",52,3,"noPrefix:noPoixed,",35,0.31,ALERT
3037,,,120,11,,3890,44.15909369389220,0
3038,"private static void encode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}","private static void encode(List<AclEntry> ocr,long address){
  long offset=address;
  for (  AclEntry ace : ocr) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}",588,12,"acl:ocr,",114,1.46,ALERT
3039,,,37,2,,804,5.9062672058741300,0
3040,"default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}
","default ByteBuffer normalize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  normalize(value,buffer);
  return buffer;
}
",32,3,"serialize:normalize,",36,0.34,ALERT
3041,,,94,4,,1435,19.039530237515800,0
3042,"private boolean isIndexable(String term){
  return (term.length() < 30) && (term.length() > 2);
}","private boolean isindexable(String name){
  return (name.length() < 30) && (name.length() > 2);
}",30,2,"isIndexable:isindexable,term:name,",109,1.03,ALERT
3043,"private int decodeRunLength(int k){
  if ((k & 1) == 1) {
    return ((k >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;
  }
}","private int decoderunCount(int tk){
  if ((tk & 1) == 1) {
    return ((tk >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(tk << p + (31 - sp)) + 1;
  }
}",57,2,"decodeRunLength:decoderunCount,k:tk,",52,0.49,ALERT
3044,"public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
","public String fullName(final String doc,final String lowstring){
  String ret=lowstring;
  PrefixEntry based=prefixMap.get(doc);
  if (based != null) {
    ret=based.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry reader : prefixEndList) {
      if (doc.endsWith(reader.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,reader.prefixSingular,reader.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
",92,6,"fullForm:fullName,str:doc,lowString:lowstring,found:based,entry:reader,",297,3.0,ALERT
3045,"static int writeVarLong(OutputStream out,long x) throws IOException {
  int len=0;
  while ((x & ~0x7f) != 0) {
    out.write((byte)(0x80 | (x & 0x7f)));
    x>>>=7;
    len++;
  }
  out.write((byte)x);
  return ++len;
}","static int writeVariablelong(OutputStream group,long xa) throws IOException {
  int elt=0;
  while ((xa & ~0x7f) != 0) {
    group.write((byte)(0x80 | (xa & 0x7f)));
    xa>>>=7;
    elt++;
  }
  group.write((byte)xa);
  return ++elt;
}",71,4,"writeVarLong:writeVariablelong,out:group,x:xa,len:elt,",328,3.1,ALERT
3046,"public void cleanStart(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  conn=null;
}","public void cleanupStart(){
  Connection cli=getConnection(true,true);
  if (cli == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(cli);
  createUser(cli);
  createDatabase(cli);
  try {
    if (cli != null)     cli.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  cli=null;
}",84,2,"conn:cli,cleanStart:cleanupStart,",51,0.37,ALERT
3047,"public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}","public void testFilamedClassifer(){
  Instances div;
  int pi;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    div=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(div);
    for pii=0;pii < div.numInstances(); pi++) {
      m_FilteredClassifier.classifyInstance(div.instance(pi));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}",88,3,"testFilteredClassifier:testFilamedClassifer,data:div,i:pi,",147,3.34,ALERT
3048,"public static boolean isPrimitiveDatatype(IRI datatype){
  return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.DATE)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GDAY)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.STRING)|| datatype.equals(XMLSchema.BOOLEAN)|| datatype.equals(XMLSchema.BASE64BINARY)|| datatype.equals(XMLSchema.HEXBINARY)|| datatype.equals(XMLSchema.FLOAT)|| datatype.equals(XMLSchema.DECIMAL)|| datatype.equals(XMLSchema.DOUBLE)|| datatype.equals(XMLSchema.ANYURI)|| datatype.equals(XMLSchema.QNAME)|| datatype.equals(XMLSchema.NOTATION);
}","public static boolean isPrimitiveDatATopic(IRI sataterix){
  return sataterix.equals(XMLSchema.DURATION) || sataterix.equals(XMLSchema.DATETIME) || sataterix.equals(XMLSchema.TIME)|| sataterix.equals(XMLSchema.DATE)|| sataterix.equals(XMLSchema.GYEARMONTH)|| sataterix.equals(XMLSchema.GYEAR)|| sataterix.equals(XMLSchema.GMONTHDAY)|| sataterix.equals(XMLSchema.GDAY)|| sataterix.equals(XMLSchema.GMONTH)|| sataterix.equals(XMLSchema.STRING)|| sataterix.equals(XMLSchema.BOOLEAN)|| sataterix.equals(XMLSchema.BASE64BINARY)|| sataterix.equals(XMLSchema.HEXBINARY)|| sataterix.equals(XMLSchema.FLOAT)|| sataterix.equals(XMLSchema.DECIMAL)|| sataterix.equals(XMLSchema.DOUBLE)|| sataterix.equals(XMLSchema.ANYURI)|| sataterix.equals(XMLSchema.QNAME)|| sataterix.equals(XMLSchema.NOTATION);
}",182,2,"isPrimitiveDatatype:isPrimitiveDatATopic,datatype:sataterix,",469,4.65,ALERT
3049,"public void acquireProbabilities(final String string){
  if (string.length() < 2) {
    return;
  }
  for (int i=2; i < string.length(); ++i) {
    final char previousChar=string.charAt(i - 2);
    final char currentChar=string.charAt(i - 1);
    final char nextChar=string.charAt(i);
    final String key=previousChar + """" + currentChar;
    if (!sequences.contains(key)) {
      sequences.add(key);
    }
    HashMap<Character,Integer> probabilities=sequenceProbabilities.get(key);
    if (probabilities == null) {
      probabilities=new HashMap<>();
      sequenceProbabilities.put(key,probabilities);
    }
    int existingValue=probabilities.getOrDefault(nextChar,0);
    ++existingValue;
    probabilities.put(nextChar,existingValue);
  }
}","public void acquireProbiability(final String slice){
  if (slice.length() < 2) {
    return;
  }
  for (intni=2;ni < slice.length(); ++n) {
    final charreviousLiner=slice.charAt(n - 2);
    final charfuturecharr=slice.charAt(n - 1);
    final charcurrentCharacterr=slice.charAt(n);
    final Strinseedey=reviousLine + """" + futurechar;
    if (!sequences.contains(seed)) {
      sequences.add(seed);
    }
    HashMap<Character,Integer> pProbasessequenceProbabilities.get(seed);
    if (Probases == null) {
      Probases=new HashMap<>();
      sequenceProbabilities.put(seed,Probases);
    }
    int eximissingLengthobabilProbasesfault(currentCharacter,0);
    ++missingLength;
    probabilProbasesrentCharacter,missingLength);
  }
}",175,9,"acquireProbabilities:acquireProbiability,string:slice,i:n,previousChar:reviousLine,currentChar:futurechar,nextChar:currentCharacter,key:seed,probabilities:Probases,existingValue:missingLength,",1804,47.1,ALERT
3050,"public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}","public final void readInSteam(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readInSteam(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}",251,22,"readFromStream:readInSteam,",147,1.55,ALERT
3051,,,65,4,,983,11.215977104504900,0
3052,"protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}","protected void adjustCopses(double[] densITIES){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densITIES);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}",639,15,"densities:densITIES,adjustCanopies:adjustCopses,",129,1.87,ALERT
3053,"@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newVal;
  count++;
  firstTime=false;
}
","@Override public void agg(Object newBu){
  if (newBu instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newBu);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newBu;
  count++;
  firstTime=false;
}
",88,5,"newVal:newBu,",46,0.45,ALERT
3054,"public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentConstraints) {
    if (argConstraint instanceof F2A) {
      assignmentAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentAfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);
  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);
}","public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentconbrains,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> tangentials,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentAAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentAAfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentAAfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentAAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentconbrains) {
    if (argConstraint instanceof F2A) {
      assignmentAAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentAAfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,tangentials);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,tangentials);
  addConstraintsBetweenTargets(tuAssignmentConstraints,tangentials,true,typeFactory);
  return constraintMapBuilder.build(tangentials,tuAssignmentConstraints,typeFactory);
}",318,17,"assignmentAfs:assignmentAAfs,targets:tangentials,afArgumentConstraints:afArgumentconbrains,",326,3.4,ALERT
3055,,,50,2,,780,5.997070181369780,0
3057,,,16,1,,437,3.2459539492925000,0
3058,"private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}","private P filterLargeValueSorts(FilterSpec ms,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)ms.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(ms.getAttributePath(),ms.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}",161,12,"fs:ms,filterLargeValueSets:filterLargeValueSorts,",188,2.2,ALERT
3059,"void repaintChildren(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
","void repillMembers(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}
",25,2,"repaintChildren:repillMembers,",28,0.18,ALERT
3060,"private void createMigrationTaskPage(){
  MigrationTaskEditor migrationTaskEditor=new MigrationTaskEditor(migrationTask,getContainer());
  int index=addPage(migrationTaskEditor.getControl());
  setPageText(index,""Task"");
  taskListeners.add(migrationTaskEditor);
}
","private void createMigrateWorkPage(){
  MigrationTaskEditor migrateTaskEntry=new MigrationTaskEditor(migrationTask,getContainer());
  inamedex=addPage(migrateTaskEntry.getControl());
  setPageText(name,""Task"");
  taskListeners.add(migrateTaskEntry);
}
",46,3,"createMigrationTaskPage:createMigrateWorkPage,migrationTaskEditor:migrateTaskEntry,index:name,",143,0.81,ALERT
3061,,,1031,18,,4481,62.37437469164530,0
3062,"@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + listener);
  }
  notifBroadcaster.removeNotificationListener(listener);
}
","@Override public void removenotifyListener(NotificationListener LISTener) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + LISTener);
  }
  notifBroadcaster.removenotifyListener(LISTener);
}
",50,2,"removeNotificationListener:removenotifyListener,listener:LISTener,",127,1.49,ALERT
3063,"@Override public List chunkString(String sToChunk){
  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);
  return Arrays.asList(sRes);
}
","@Override public List ChuneArray(String sTOChone){
  Integer[] iiArg=splitPointsByDelimiterList(sTOChone,getDelimiters());
  String[] ssReplsplitStringByDelimiterPoints(sTOChone,iiArg);
  return Arrays.asList(sRepl);
}
",45,4,"chunkString:ChuneArray,sToChunk:sTOChone,iRes:iiArg,sRes:sRepl,",202,2.71,ALERT
3064,"public static <S>boolean containsAtleastOne(Collection<S> left,Collection<S> right){
  if (left == null || right == null) {
    return false;
  }
  for (  S id : left) {
    if (right.contains(id)) {
      return true;
    }
  }
  return false;
}
","public static <S>boolean containsAtleastOne(Collection<S> last,Collection<S> rw){
  if (last == null || rw == null) {
    return false;
  }
  for (  S id : last) {
    if (rw.contains(id)) {
      return true;
    }
  }
  return false;
}
",63,4,"left:last,right:rw,",101,1.87,ALERT
3065,"static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}
","static public void image(String input,String output,String packFileName){
  image(new Settings(),input,output,packFileName);
}
",30,4,"process:image,",40,0.51,ALERT
3066,"private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}","private void createBlockMirridata(String name,int numBlockMirrs) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrs; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}",150,9,"createBlockMirrorData:createBlockMirridata,numBlockMirrors:numBlockMirrs,",113,1.13,ALERT
3067,"private void initializeLayout(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}","private void initializeLi(){
  GridLayout gm=new GridLayout(0,2);
  gm.setVgap(5);
  setLayout(gm);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}",116,2,"gl:gm,initializeLayout:initializeLi,",59,0.65,ALERT
3068,,,12,1,,410,4.254869576295220,0
3069,"private void reloadModelWithNewValue(final Long newValue){
  final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue;
  for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) {
    final PropertyChangeEvent event=new PropertyChangeEvent(this,""model"",getModelUpdatePeriod(),newValueAsPrimitive);
    listener.propertyChange(event);
  }
}
","private void reloadModelwithNewValues(final Long NewVal){
  final lnewValueAsPrimitivetive=NewVal == null ? getModelUpdatePeriod() : NewVal;
  for (  final PropertyChangeListener longler : modelUpdatePeriodListeners) {
    final PropertyChangeEvent end=new PropertyChangeEvent(this,""model"",getModelUpdatePeriod(),newValueAsPrimitive);
    longler.propertyChange(end);
  }
}
",59,5,"reloadModelWithNewValue:reloadModelwithNewValues,newValue:NewVal,listener:longler,event:end,",271,2.28,ALERT
3070,"private void resetShapeBounds(){
  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;
  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}","private void resetShapeFounding(){
  RoundRectangle2D.Double rround=(RoundRectangle2D.Double)shape;
  rround.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}",48,2,"rrect:rround,resetShapeBounds:resetShapeFounding,",50,0.47,ALERT
3073,"private void throwArrayIndexOutOfBoundsException(int itemIndex){
  throw new ArrayIndexOutOfBoundsException(""Your item index can\'t be 0 or greater than space item size,"" + "" your items size is "" + spaceItems.size() + "", your current index is :""+ itemIndex);
}","private void throwArrayIndexOutOfBoundsException(int dimensionInd){
  throw new ArrayIndexOutOfBoundsException(""Your item index can\'t be 0 or greater than space item size,"" + "" your items size is "" + spaceItems.size() + "", your current index is :""+ dimensionInd);
}",28,2,"itemIndex:dimensionInd,",30,0.38,ALERT
3074,"public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
","public JSONObject toJson() throws JSONException {
  JSONObject ja=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  ja.put(""pods"",jpods);
  ja.put(""timestamp"",System.currentTimeMillis());
  return ja;
}
",70,4,"json:ja,",43,0.32,ALERT
3075,"public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}
","public void insert(ClassNode name,int num){
  remove(num);
  push(name);
}
",22,3,"type:name,n:num,replace:insert,",93,0.71,ALERT
3077,"public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){
  Collection<T> newCollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : mutableCollection) {
    newCollection.add(Utils.makeImmutable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}
","public static <T>Collection<T> createImmatable(Collection<T> cmutationList){
  Collection<T> newContainer;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<classname cls=(Class<Collection<T>>)cmutationList.getClass();
    newContainer=classname.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (itemment : cmutationList) {
    nenewContainerdd(Utils.createImmatable(item));
  }
  return Collections.unmodifiableCollection(newContainer);
}
",110,5,"makeImmutable:createImmatable,mutableCollection:cmutationList,newCollection:newContainer,cls:classname,element:item,",620,6.25,ALERT
3078,"private void applyL1Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}","private void applyL1Reg(final double ta_k,Vec x){
  if (lambda1 > 0) {
    l1U+=ta_k * lambda1;
    for (int ks=0; ks < ws.length; ks++) {
      final Vec w_k=ws[ks];
      final double[] l1Q_k=l1Q[ks];
      for (      IndexValue iv : x) {
        final int zi=iv.getIndex();
        final double z=w_k.get(zi);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[zi]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[zi]));
        l1Q_k[zi]+=(newW_i - z);
        w_k.set(zi,newW_i);
      }
    }
  }
}",173,11,"i:zi,k:ks,eta_t:ta_k,",269,7.91,ALERT
3079,,,431,25,,8717,117.304993669192,0
3080,,,19,1,,442,4.31087992588679,0
3081,"public static boolean pointOutsidePrefSize(JTable table,int row,int column,Point p){
  if (table.convertColumnIndexToModel(column) != 0 || row == -1) {
    return true;
  }
  TableCellRenderer tcr=table.getCellRenderer(row,column);
  Object value=table.getValueAt(row,column);
  Component cell=tcr.getTableCellRendererComponent(table,value,false,false,row,column);
  Dimension itemSize=cell.getPreferredSize();
  Rectangle cellBounds=table.getCellRect(row,column,false);
  cellBounds.width=itemSize.width;
  cellBounds.height=itemSize.height;
  assert (p.x >= cellBounds.x && p.y >= cellBounds.y);
  return p.x > cellBounds.x + cellBounds.width || p.y > cellBounds.y + cellBounds.height;
}","public static boolean isBeyondPrefHeight(JTable table,int rows,int column,Point p){
  if (table.convertColumnIndexToModel(column) != 0 || rows == -1) {
    return true;
  }
  TableCellRenderer tcr=table.getCellRenderer(rows,column);
  Object value=table.getValueAt(rows,column);
  Component cer=tcr.getTableCellRendererComponent(table,value,false,false,rows,column);
  Dimension itemSize=cer.getPreferredSize();
  Rectangle cellBounds=table.getCellRect(rows,column,false);
  cellBounds.width=itemSize.width;
  cellBounds.height=itemSize.height;
  assert (p.x >= cellBounds.x && p.y >= cellBounds.y);
  return p.x > cellBounds.x + cellBounds.width || p.y > cellBounds.y + cellBounds.height;
}",167,12,"pointOutsidePrefSize:isBeyondPrefHeight,cell:cer,row:rows,",340,5.02,ALERT
3082,,,29,3,,833,11.339928372701000,0
3083,"synchronized boolean release(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
","synchronized boolean un(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
",41,3,"release:un,",32,0.36,ALERT
3084,"public ImmutableArray2<K> insert(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}","public ImmutableArray2<K> except(int ind,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (ind == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > ind && x.getAndSet(false)) {
        array[ind]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,ind);
  a2[ind]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}",167,10,"index:ind,insert:except,",215,3.08,ALERT
3085,,,24,3,,1093,8.76697916984558,0
3086,"private byte[] writeCheckedBytes(MessageNano proto){
  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
  wrapper.payload=MessageNano.toByteArray(proto);
  CRC32 checksum=new CRC32();
  checksum.update(wrapper.payload);
  wrapper.checksum=checksum.getValue();
  return MessageNano.toByteArray(wrapper);
}","private byte[] writeCheingByte(MessageNano Proocol){
  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
  wrapper.payload=MessageNano.toByteArray(Proocol);
  CRC32 cksup=new CRC32();
  cksup.update(wrapper.payload);
  wrapper.cksup=cksup.getValue();
  return MessageNano.toByteArray(wrapper);
}",69,5,"checksum:cksup,proto:Proocol,writeCheckedBytes:writeCheingByte,",122,1.17,ALERT
3087,,,51,3,,837,11.509036572774300,0
3088,"public static double powQuick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
","public static double poddquick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
",55,3,"powQuick:poddquick,",33,0.6,ALERT
3089,,,225,2,,685,6.382811184724170,0
3090,"public final synchronized byte[] toByteArray(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toByteArray();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}","public final synchronized byte[] tobyteString(){
  ByteArrayOutputStream pao=null;
  DataOutputStream DOS=null;
  try {
    pao=new ByteArrayOutputStream(32768);
   DOSs=new DataOutputStream(pao);
    game.writeToStream(DOS);
    DOS.flush();
    return bpaotobyteString();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (DOS != null)     try {
      DOS.close();
    }
 catch (    IOException ex) {
    }
    if (pao != null)     try {
      pao.close();
    }
 catch (    IOException ex) {
    }
  }
}",117,3,"toByteArray:tobyteString,baos:pao,dos:DOS,",160,1.8,ALERT
3091,"public void closeFile(){
  closeFile(true);
}
","public void openDir(){
  openDir(true);
}
",12,1,"closeFile:openDir,",25,0.22,ALERT
3092,"public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
","public void ad(@NonNull T entity){
synchronized (lock) {
    if (locks == null) {
      locks=new ArrayList<>();
    }
    locks.ad(entity);
  }
  if (notifyOnChange) {
    notifyItemInserted(locks.size());
  }
}
",56,3,"items:locks,item:entity,add:ad,",100,0.93,ALERT
3093,"protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
","protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> dr=am.getRawType();
  if (dr == null || !dr.isArray()) {
    return false;
  }
  Class<?> compType=dr.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
",102,6,"rt:dr,",47,0.69,ALERT
3094,,,57,2,,664,7.813563585281370,0
3095,"private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}","private static String getText(String Input,int condition){
  String Comment=null;
  Matcher matcmatchedMENT_PATTERN.matcmatchedut.substring(condition));
  if (matched.find()) {
    Comment=matched.group(1);
    Comment=Comment.substring(1);
  }
  return Comment;
}",64,5,"readComment:getText,input:Input,index:condition,comment:Comment,matcher:matched,",379,3.28,ALERT
3096,"@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){
  return term1.compareTo(term2);
}","@Override public int ompare(NewSplitEmittedTerm term1,NewSplitEmittedTerm termTwo){
  return term1.compareTo(termTwo);
}",22,3,"term2:termTwo,compare:ompare,",41,0.7,ALERT
3097,"public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}
","public static void closeChiot(@Nullable SelectionKey rtrc){
  if (rtrc != null)   closeChiot(rtrc.channel());
}
",27,2,"closeQuiet:closeChiot,rsrc:rtrc,",120,1.16,ALERT
3098,,,77,5,,842,7.224819842974350,0
3099,"public int size(){
  return _attrs.size();
}
","public int start(){
  return _attrs.start();
}
",14,1,"size:start,",34,0.24,ALERT
3100,"private void writeLog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
","private void Writelog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
",86,4,"writeLog:Writelog,",26,0.2,ALERT
3101,"private void writeJarPostResource(Element postResourceEl,String path){
  postResourceEl.setAttribute(""className"",JAR_RESOURCE_SET);
  postResourceEl.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
","private void writeJarPostResource(Element podResourceEle,String path){
  podResourceEle.setAttribute(""className"",JAR_RESOURCE_SET);
  podResourceEle.setAttribute(""base"",path.replace(""&"",""&amp;""));
}
",37,3,"postResourceEl:podResourceEle,",38,0.24,ALERT
3102,"public void disable(RichFormatterFeature feature){
  features.remove(feature);
}
","public void Disable(RichFormatterFeature function){
  features.remove(function);
}
",16,2,"feature:function,disable:Disable,",62,0.45,ALERT
3103,"private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(process,g2);
    break;
case NONE:
default :
  break;
}
}
}","private void displayForeback(final ExecutionUnit port,final Graphics2D gm3,boolean Printting){
  if (drawHighlight && !Printting && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(port,gm3);
    break;
case NONE:
default :
  break;
}
}
}",84,4,"renderForeground:displayForeback,process:port,g2:gm3,printing:Printting,",226,2.05,ALERT
3104,"static void policyChanged(String serviceTypeName,PolicyEvent pe){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName);
  }
  resourceNamesMap.remove(serviceTypeName);
  Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName);
  if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) {
    return;
  }
  try {
    DEBUG.error(""PolicyEvaluator.policyChanged: enterred try block"");
    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();
    ServiceType serviceType=stm.getServiceType(serviceTypeName);
    Set resourceNamesToRemove=new HashSet();
synchronized (resourceNamesCache) {
      Enumeration resourceNames=resourceNamesCache.keys();
      while (resourceNames.hasMoreElements()) {
        String resourceName=(String)resourceNames.nextElement();
        if (resourceNamesToRemove.contains(resourceName)) {
          continue;
        }
        Set affectedResourceNames=pe.getResourceNames();
        Iterator iter=affectedResourceNames.iterator();
        while (iter.hasNext()) {
          String affectedResourceName=(String)iter.next();
          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {
            resourceNamesToRemove.add(resourceName);
          }
        }
      }
      Iterator iter1=resourceNamesToRemove.iterator();
      while (iter1.hasNext()) {
        String resourceNameToRemove=(String)iter1.next();
        resourceNamesCache.remove(resourceNameToRemove);
      }
    }
  }
 catch (  SSOException e) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",e);
  }
catch (  PolicyException pex) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",pex);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName + "", new cached resoruceNames=""+ resourceNamesMap.get(serviceTypeName));
  }
}","static void policyChanged(String serviceTypeName,PolicyEvent pe){
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName);
  }
  resourceNamesMap.remove(serviceTypeName);
  Cache resourceNameMap=(Cache)resourceNamesMap.get(serviceTypeName);
  if ((resourceNameMap == null) || (resourceNameMap.isEmpty())) {
    return;
  }
  try {
    DEBUG.error(""PolicyEvaluator.policyChanged: enterred try block"");
    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();
    ServiceType serviceType=stm.getServiceType(serviceTypeName);
    Set resourceNamesToRemove=new HashSet();
synchronized (resourceNameMap) {
      Enumeration resourceNames=resourceNameMap.keys();
      while (resourceNames.hasMoreElements()) {
        String resourceName=(String)resourceNames.nextElement();
        if (resourceNamesToRemove.contains(resourceName)) {
          continue;
        }
        Set affectedResourceNames=pe.getResourceNames();
        Iterator iter=affectedResourceNames.iterator();
        while (iter.hasNext()) {
          String affectedResourceName=(String)iter.next();
          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {
            resourceNamesToRemove.add(resourceName);
          }
        }
      }
      Iterator iter1=resourceNamesToRemove.iterator();
      while (iter1.hasNext()) {
        String resourceNameToRemove=(String)iter1.next();
        resourceNameMap.remove(resourceNameToRemove);
      }
    }
  }
 catch (  SSOException e) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",e);
  }
catch (  PolicyException pex) {
    DEBUG.error(""PolicyEvaluator.policyChanged:"",pex);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""PolicyEvaulator.policyChanged():serviceTypeName="" + serviceTypeName + "", new cached resoruceNames=""+ resourceNamesMap.get(serviceTypeName));
  }
}",320,14,"resourceNamesCache:resourceNameMap,",105,1.66,ALERT
3105,"public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}","public static StringBuffer replaceString(StringBuffer buffer,String[] ramels){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < ramels.length; i++) {
    if (ramels[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),ramels[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}",115,6,"parameters:ramels,",146,2.07,ALERT
3106,,,16,2,,775,7.828321786721550,0
3107,"public static boolean isWritable(final File file,final boolean makeDirs){
  if (file == null) {
    Log.e(FileUtils.class,""isWritable(): Null or Empty parameter given"");
    return false;
  }
  final String fileParentDir=file.getParent();
  if (!TextUtils.isEmpty(fileParentDir)) {
    final File fileDir=new File(fileParentDir);
    if (!fileDir.exists()) {
      if (makeDirs)       return makeDirsForFile(file);
 else       return false;
    }
  }
  boolean isWritable=true;
  if (file.exists())   isWritable=file.canWrite();
 else {
    try {
      isWritable=file.createNewFile();
    }
 catch (    IOException e) {
    }
    if (isWritable)     isWritable=file.delete();
  }
  return isWritable;
}
","public static boolean isCapabled(final File home,final boolean madeDashes){
  if (home == null) {
    Log.e(FileUtils.class,""isWritable(): Null or Empty parameter given"");
    return false;
  }
  final String fileParentDir=home.getParent();
  if (!TextUtils.isEmpty(fileParentDir)) {
    final File fileDir=new File(fileParentDir);
    if (!fileDir.exists()) {
      if (madeDashes)       return makeDirsForFile(home);
 else       return false;
    }
  }
  boolean isCapabled=true;
  if (home.exists())   isCapabled=home.canWrite();
 else {
    try {
      isCapabled=home.createNewFile();
    }
 catch (    IOException e) {
    }
    if (isCapabled)     isCapabled=home.delete();
  }
  return isCapabled;
}
",151,5,"file:home,isWritable:isCapabled,makeDirs:madeDashes,",114,1.46,ALERT
3108,,,18,4,,990,6.987789328893030,0
3109,"public void onStart(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}","public void Onstart(){
  if (mAudioMirractAdapter == null) {
    mAudioMirractAdapter=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}",51,2,"mAudioMirrorBuffer:mAudioMirractAdapter,onStart:Onstart,",49,0.7,ALERT
3110,,,21,2,,815,8.049714529514310,0
3111,,,33,2,,767,7.912598824501040,0
3112,"public static void overwrite(long[] vector,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}","public static void overwriter(long[] vector,long arr,int length,int alt){
  int idexc=length >> 6;
  int bitIdx=length & 63;
  int truncatedValueLength=Math.min(alt,64 - bitIdx);
  vector[idexc]&=~(maskBelow(truncatedValueLength) << bitIdx);
  vector[idexc]|=arr << bitIdx;
  if (alt != truncatedValueLength) {
    long mask=maskBelow(alt - truncatedValueLength);
    vector[idexc + 1]&=~mask;
    vector[idexc + 1]|=(arr >>> truncatedValueLength);
  }
}",117,9,"overwrite:overwriter,val:arr,offset:length,len:alt,idx:idexc,truncatedValLen:truncatedValueLength,",409,3.93,ALERT
3113,"protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {
}
","protected void startAdditionalMethods(final Cache http,final Map<String,Object> file) throws Exception {
}
",21,3,"startAdditionalServices:startAdditionalMethods,cache:http,options:file,",429,4.34,ALERT
3114,"private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
","private void handleAccount(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlFriend=(TLUser)absUser;
    if (tlFriend.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlFriend.getId());
      user=onUserContact(currentUser,tlFriend);
    }
 else     if (tlFriend.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlFriend.getId());
      user=onUserDelete(currentUser,tlFriend);
    }
 else     if (tlFriend.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlFriend.getId());
      user=onUserRequest(currentUser,tlFriend);
    }
 else     if (tlFriend.isSelf() || !tlFriend.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlFriend.getId());
      user=onUserForeign(currentUser,tlFriend);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
",239,5,"tlUser:tlFriend,onUser:handleAccount,",173,8.19,ALERT
3115,"private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}
","private synchronized void addGloballockObj(AbsoluteTableIdentifier absoluteTableQualifer){
  if (null == tableLockMap.get(absoluteTableQualifer)) {
    tableLockMap.put(absoluteTableQualifer,new Object());
  }
}
",35,2,"addTableLockObject:addGloballockObj,absoluteTableIdentifier:absoluteTableQualifer,",685,6.38,ALERT
3117,"public boolean match(MimeType other){
  if (this == other)   return true;
  if (type != null && other.type != null && !type.equals(other.type))   return false;
  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;
  return true;
}
","public boolean delete(MimeType other){
  if (this == other)   return true;
  if (type != null && other.type != null && !type.equals(other.type))   return false;
  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;
  return true;
}
",71,2,"match:delete,",37,0.42,ALERT
3119,"public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}","public static void Notempty(String server,String msg){
  if (server == null || server.length() == 0)   throw new IllegalArgumentException(msg);
}",34,3,"string:server,notEmpty:Notempty,",53,0.39,ALERT
3121,"@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);
  frameRate=usbCamSetupVideoExParam.framerate;
  whiteBalance=usbCamSetupVideoExParam.wb;
  saturation=usbCamSetupVideoExParam.saturation;
  brightness=usbCamSetupVideoExParam.brightness;
  contrast=usbCamSetupVideoExParam.contrast;
  sharpness=usbCamSetupVideoExParam.sharpness;
  imageEffectMode=usbCamSetupVideoExParam.effectmode;
  frameSize=usbCamSetupVideoExParam.framesize;
  evLevel=usbCamSetupVideoExParam.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}","@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExPage,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExPage.resolution);
  frameRate=usbCamSetupVideoExPage.framerate;
  whiteBalance=usbCamSetupVideoExPage.wb;
  saturation=usbCamSetupVideoExPage.saturation;
  brightness=usbCamSetupVideoExPage.brightness;
  contrast=usbCamSetupVideoExPage.contrast;
  sharpness=usbCamSetupVideoExPage.sharpness;
  imageEffectMode=usbCamSetupVideoExPage.effectmode;
  frameSize=usbCamSetupVideoExPage.framesize;
  evLevel=usbCamSetupVideoExPage.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}",136,14,"usbCamSetupVideoExParam:usbCamSetupVideoExPage,",66,0.83,ALERT
3122,"public static String checkIndexHeaderSuffix(DataInput in,String expectedSuffix) throws IOException {
  int suffixLength=in.readByte() & 0xFF;
  byte suffixBytes[]=new byte[suffixLength];
  in.readBytes(suffixBytes,0,suffixBytes.length);
  String suffix=new String(suffixBytes,0,suffixBytes.length,StandardCharsets.UTF_8);
  if (!suffix.equals(expectedSuffix)) {
    throw new CorruptIndexException(""file mismatch, expected suffix="" + expectedSuffix + "", got=""+ suffix,in);
  }
  return suffix;
}","public static String checkIndexHeaderSsuffence(DataInput reader,String expectedSuffIX) throws IOException {
  int suffsufffixSizeder.readByte() & 0xFF;
  bytesuffitionbytess[]=new byte[sufffixSize];
  reader.readBytes(suffitionbytes,0,suffitionbytes.length);
  String suffixdefixedtring(suffitionbytes,0,suffitionbytes.length,StandardCharsets.UTF_8);
  if (!defixed.equals(expectedSuffIX)) {
    throw new CorruptIndexException(""file mismatch, expected suffix="" + expeexpectedSuffIX, got=""+ suffdefixedder);
  }
  return defixed;
}",99,6,"checkIndexHeaderSuffix:checkIndexHeaderSsuffence,in:reader,expectedSuffix:expectedSuffIX,suffixLength:sufffixSize,suffixBytes:suffitionbytes,suffix:defixed,",484,6.59,ALERT
3123,,,32,4,,1509,13.465272871653200,0
3124,"public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}","public void processPage(boolean showBuffonds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBuffonds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}",190,8,"showBounds:showBuffonds,dumpIndex:processPage,",73,0.89,ALERT
3125,"public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.loadClass(name,resolve));
}","public Class<?> installPackage(String self,boolean revolve) throws ClassNotFoundException {
  int ie=self.lastIndexOf('.');
  if (ie != -1) {
    SecurityManager sam=System.getSecurityManager();
    if (sam != null) {
      ssamcheckPackageAccess(self.substring(0,ie));
    }
  }
  if (ucp.knownToNotExist(self)) {
    Class<?> cr=findLoadedClass(self);
    if (cr != null) {
      if (revolve) {
        resolveClass(cr);
      }
      return cr;
    }
    throw new ClassNotFoundException(self);
  }
  return (super.installPackage(self,revolve));
}",130,6,"loadClass:installPackage,name:self,resolve:revolve,i:ie,sm:sam,c:cr,",248,2.85,ALERT
3126,"protected void handleOrDeferMessage(DistributionMessage msg){
synchronized (startupLock) {
    if (beingSick || playingDead) {
      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
        startupMessages.add(new StartupEvent(msg));
        return;
      }
    }
    if (!processingEvents) {
      startupMessages.add(new StartupEvent(msg));
      return;
    }
  }
  dispatchMessage(msg);
}
","protected void handleOrdeferrEvent(DistributionMessage msg){
synchronized (startupLock) {
    if (beingSick || playingDead) {
      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
        startupMessages.add(new StartupEvent(msg));
        return;
      }
    }
    if (!processingEvents) {
      startupMessages.add(new StartupEvent(msg));
      return;
    }
  }
  dispatchMessage(msg);
}
",75,2,"handleOrDeferMessage:handleOrdeferrEvent,",32,0.58,ALERT
3127,,,17,1,,404,3.018905433019000,0
3128,,,24,2,,378,2.880020594596860,0
3129,"private int calculateMenuMargin(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}
","private int calculateMenuMargan(){
  WindowManager wa=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display status=wa.getDefaultDisplay();
  Point location=new Point();
  status.getSize(location);
  int heigresolutionation.y;
  return (int)Math.round(resolution * MENU_MARGIN_RELATIVE_MODIFIER);
}
",64,5,"calculateMenuMargin:calculateMenuMargan,wm:wa,display:status,size:location,height:resolution,",304,2.8,ALERT
3130,"private void adjustBCIndex(Instruction barrier){
  NormalMethod source=barrier.position().method;
  if (source.isForOsrSpecialization()) {
    barrier.adjustBytecodeIndex(-source.getOsrPrologueLength());
  }
}
","private void adjustNCindex(Instruction carrer){
  NormalMethod source=carrer.position().method;
  if (source.isForOsrSpecialization()) {
    carrer.adjustBytecodeIndex(-source.getOsrPrologueLength());
  }
}
",42,3,"adjustBCIndex:adjustNCindex,barrier:carrer,",83,0.85,ALERT
3131,,,18,1,,446,3.54282644589742,0
3132,,,39,5,,1199,12.572211849689500,0
3133,"public void disable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}","public void sync(BluetoothAdapter agux){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=agux.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(agux.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(agux.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(agux.isEnabled());
start=System.currentTimeMillis();
assertTrue(agux.sync());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(agux.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=agux.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(agux.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}",327,9,"disable:sync,adapter:agux,",283,4.56,ALERT
3134,,,43,4,,646,6.147788019975030,0
3135,,,192,6,,2148,27.89594843784970,0
3136,"public void push(){
  state.cliprgn=g.getClipBounds();
  stack.push(state);
  state=(GraphicsState)state.clone();
}
","public void last(){
  session.cliprgn=g.getClipBounds();
  stack.last(session);
  session=(GraphicsState)session.clone();
}
",35,3,"state:session,push:last,",69,0.68,ALERT
3137,"protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
","protected List<URI> test(final InputStream plus) throws SAXException, IOException {
  SAXParser sacParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    sacParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  sacParser.parse(plus,this);
  return groups;
}
",78,5,"in:plus,load:test,saxParser:sacParser,",98,1.09,ALERT
3138,"public void add(double weight,double x,double y){
  observations.add(new WeightedObservedPoint(weight,x,y));
}
","public void load(double weight,double x,double ay){
  observations.load(new WeightedObservedPoint(weight,x,ay));
}
",30,4,"y:ay,add:load,",70,0.6,ALERT
3139,"@Override public SoftwarePIDController withTolerance(double tolerance){
  target=target.withTolerance(Math.abs(tolerance));
  return this;
}
","@Override public SoftwarePIDController withTolerance(double ttolerance){
  target=target.withTolerance(Math.abs(ttolerance));
  return this;
}
",28,3,"tolerance:ttolerance,",37,0.48,ALERT
3140,"@Override public void handleClick(int x,int y,PlotRenderingInfo info){
}
","@Override public void handleclick(int image,int yt,PlotRenderingInfo source){
}
",17,4,"handleClick:handleclick,x:image,y:yt,info:source,",221,1.99,ALERT
3141,"public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){
  if (compareArraySize(expected,actual)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[actual.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < actual.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(actual[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(actual));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}","public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] image){
  if (compareArraySize(expected,image)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[image.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < image.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(image[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(image));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}",185,9,"actual:image,",65,5.22,ALERT
3142,"public static String fetchClusterName(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}","public static String fetchClustersPath(String clusterMcgPath){
  String clusterName=null;
  if (clusterMcgPath != null && !clusterMcgPath.isEmpty()) {
    String[] tmp=clusterMcgPath.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}",52,4,"clusterCgName:clusterMcgPath,fetchClusterName:fetchClustersPath,",125,1.24,ALERT
3143,"public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}","public boolean softLogin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}",120,4,"softSignin:softLogin,",30,0.5,ALERT
3144,"public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=action.startsWith(""no"");
  if (no)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}","public int code(Strinfaultlt,String code){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  booleanono=code.startsWith(""no"");
  no (no)   code=code.substring(2);
  Integeoutit=getAction(code);
  ifoutit == null)   throw new IllegalArgumentException(code);
  int prev=current.intValue();
  int mask=out.intValue();
  int nout(prev & (~mask));
  out=(no) ? out : (out | mask);
  put(fault,new Integer(out));
  return out;
}",135,8,"action:code,bit:out,old:prev,n:out,",335,3.12,ALERT
3145,,,15,1,,448,5.246466720104220,0
3146,"protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){
  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();
  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);
  nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext);
  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);
  if (!isLastStream) {
    for (    EventBean[] row : nestedResult) {
      EventBean lookup=row[nestedStreams[nestingOrderIndex]];
      recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext);
    }
    return;
  }
  for (  EventBean[] row : nestedResult) {
    result.add(row);
  }
}","protected void recursiveNamedJo(EventBean lookupNode,int nestingOrderIndex,EventBean[] reportedEvent,Collection<EventBean[]> match,ExprEvaluatorContext exprEvaluatorContext){
  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();
  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);
  nnestedExecNodeprocess(lookupNode,reportedEvent,nestedResult,exprEvaluatorContext);
  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);
  if (!isLastStream) {
    for (    EventBean[] uc : nestedResult) {
      EventBeanlookupp=uc[nestedStreams[nestingOrderIndex]];
      recursiveNamedJlookupup,nestingOrderIndex + 1ucw,match,exprEvaluatorContext);
    }
    return;
  }
  for (  EventBean[] uc : nestedResult) {
    match.add(uc);
  }
}",144,11,"recursiveNestedJoin:recursiveNamedJo,lookupEvent:lookupNode,currentPath:reportedEvent,result:match,row:uc,",505,7.28,ALERT
3147,"public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
","public BigDecimal calculateTotalCollectedPayh(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
",26,3,"calculateTotalCollectedAmt:calculateTotalCollectedPayh,",29,0.5,ALERT
3148,,,152,9,,2960,60.248413519064600,0
3149,"private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}
","private void populatesTaskQueue(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupId=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupId.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> games=_dbClient.queryObject(BlockConsistencyGroup.class,groupId);
  for (  BlockConsistencyGroup group : games) {
    addTask(taskList,group,taskId,operationType);
  }
}
",153,12,"populateTaskList:populatesTaskQueue,groupSet:groupId,groups:games,",332,3.48,ALERT
3150,,,44,4,,974,8.380951754252120,0
3151,"private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
","private void compileProlog(ObjectId roulog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(roulog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
",63,5,"prolog:roulog,",41,0.46,ALERT
3152,"public void init(SocketChannel channel){
  _channel=channel;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
","public void i(SocketChannel component){
  _c_socketomponent;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
",29,3,"init:i,channel:component,_channel:_socket,",124,1.06,ALERT
3153,,,66,5,,1648,21.960035260518400,0
3154,"private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}","private void bsave(char Char){
  try {
    vCh[++mBuffIdx]=Char;
  }
 catch (  Exception exp) {
    char buff[]=new char[vCh.length << 1];
    System.arraycopy(vCh,0,buff,0,vCh.length);
    vCh=buff;
    vCh[mBuffIdx]=Char;
  }
}",70,5,"mBuff:vCh,ch:Char,bappend:bsave,",152,2.47,ALERT
3155,"static boolean isDate(Object obj){
  return obj instanceof Date && obj.getClass() == Date.class;
}
","static boolean isdate(Object ctx){
  return ctx instanceof Date && ctx.getClass() == Date.class;
}
",24,2,"isDate:isdate,obj:ctx,",346,3.16,ALERT
3156,"public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void sphericalForNorth(Vector3 flower){
  if (pjUnprocessed == null) {
    String pregSt=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
   pjUnprocessedd=Proj4.newInstance(pregSt);
  }
  if (pajprojectized == null) {
    pajprojectized=Proj4.newInstance(proj4String);
  }
  try {
    flower.toArray(gal);
    gal[0]=Math.toRadians(gal[0]);
    gal[1]=Math.toRadians(gal[1]);
    pjUnprocessed.transform(pajprojectized,gal);
    flower.setX(gal[0]);
    flower.setY(gal[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",146,6,"sphericalToWorld:sphericalForNorth,vec:flower,projStr:pregSt,pjUnprojected:pjUnprocessed,pjProjected:pajprojectized,coord:gal,",310,3.43,ALERT
3157,"@Override public String expect(Pattern pattern){
  final String token=read(pattern);
  if (token == null) {
    throw new ParserException(""Expected pattern \'"" + pattern.pattern() + ""\' was not encountered in document: ""+ document);
  }
  return token;
}
","@Override public String Expect(Pattern document){
  final String tlanguageread(document);
  if (language == null) {
    throw new ParserException(""Expected pattern \'"" + document.document() + ""\' was not encountered in document: ""+ document);
  }
  return language;
}
",48,3,"expect:Expect,pattern:document,token:language,",238,2.09,ALERT
3158,"@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
","@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writingObject(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
",92,5,"writeMap:writingObject,",30,0.3,ALERT
3159,"@Override public int addAttribute(Attribute a){
  if (a == null) {
    throw new IllegalArgumentException(""Attribute must not be null"");
  }
 else {
    int index=-1;
    Attribute original=a;
    a=(Attribute)a.clone();
    if (unusedColumnList.size() > 0) {
synchronized (unusedColumnList) {
        if (unusedColumnList.size() > 0) {
          index=unusedColumnList.remove(0);
          attributes.set(index,a);
        }
 else {
          index=attributes.size();
          attributes.add(a);
        }
      }
    }
 else {
      index=attributes.size();
      attributes.add(a);
    }
    a.setTableIndex(index);
    original.setTableIndex(index);
    return index;
  }
}","@Override public int registerMember(Attribute f){
  if (f == null) {
    throw new IllegalArgumentException(""Attribute must not be null"");
  }
 else {
    int image=-1;
    Attribute temp=f;
    f=(Attribute)f.clone();
    if (unusedColumnList.size() > 0) {
synchronized (unusedColumnList) {
        if (unusedColumnList.size() > 0) {
          image=unusedColumnList.remove(0);
          attributes.set(image,f);
        }
 else {
          image=attributes.size();
          attributes.add(f);
        }
      }
    }
 else {
      image=attributes.size();
      attributes.add(f);
    }
    f.setTableIndex(image);
    temp.setTableIndex(image);
    return image;
  }
}",152,4,"addAttribute:registerMember,a:f,index:image,original:temp,",1167,15.28,ALERT
3160,"public boolean isVisited(Object element){
  return myVisitedElements.containsKey(element);
}
","public boolean asInvited(Object instance){
  return myVisitedElements.containsKey(instance);
}
",17,2,"isVisited:asInvited,element:instance,",200,2.1,ALERT
3161,"public boolean compare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}","public boolean compare(Object expected,Object latest){
  if (latest != null) {
    equal=latest.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}",50,4,"current:latest,",43,0.38,ALERT
3162,"void add(Object key){
  table.put(key,key);
}
","void get(Object pointer){
  table.put(pointer,pointer);
}
",17,2,"key:pointer,add:get,",57,0.58,ALERT
3164,,,56,2,,801,10.168241218725800,0
3165,"@SuppressWarnings(""unused"") public void handleButton3Request(RequestInvocationEvent event){
  backTrail();
  try {
    String name=(String)getPageSessionAttribute(SAVE_VB_NAME);
    ViewBean vb=getViewBean(Class.forName(name));
    passPgSessionMap(vb);
    vb.forwardTo(getRequestContext());
  }
 catch (  ClassNotFoundException e) {
    debug.warning(""AbstractAuditViewBean.handleButton3Request:"",e);
  }
}","@SuppressWarnings(""unused"") public void handleButtonThirdMessage(RequestInvocationEvent event){
  backTrail();
  try {
    String name=(String)getPageSessionAttribute(SAVE_VB_NAME);
    ViewBean vb=getViewBean(Class.forName(name));
    passPgSessionMap(vb);
    vb.forwardTo(getRequestContext());
  }
 catch (  ClassNotFoundException e) {
    debug.warning(""AbstractAuditViewBean.handleButton3Request:"",e);
  }
}",75,4,"handleButton3Request:handleButtonThirdMessage,",92,0.75,ALERT
3166,"private final String loadXmlDefinition(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadXmlDefinition(stringWriter.toString());
}
","private final String loadExMLDef(){
  final Cache l=CacheFactory.getAnyInstance();
  final StringWriter objectWritten=new StringWriter();
  final PrintWriter pprintwriternew PrintWriter(objectWritten);
  CacheXmlGenerator.generate(l,printwriter,true,false,false);
  printwriter.close();
  return loadExMLDef(objectWritten.toString());
}
",68,4,"loadXmlDefinition:loadExMLDef,cache:l,stringWriter:objectWritten,printWriter:printwriter,",335,5.4,ALERT
3167,"public void fireEventProgrammatically(Event event){
  if (!event.isConsumed())   ripplerPane.fireEvent(event);
}
","public void fireEventProgrammatically(Event child){
  if (!child.isConsumed())   ripplerPane.fireEvent(child);
}
",25,2,"event:child,",36,0.59,ALERT
3168,,,12,1,,417,4.108765669663750,0
3169,,,22,2,,771,7.077022441228230,0
3170,"public void addRestrictedDomain(String domainName){
  if (StringUtils.isEmpty(domainName)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(domainName);
}
","public void addRestricteddomain(String resourcename){
  if (StringUtils.isEmpty(resourcename)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  rerestrictedDomainsdd(resourcename);
}
",46,3,"addRestrictedDomain:addRestricteddomain,domainName:resourcename,",151,1.61,ALERT
3171,,,57,2,,791,8.113965253035230,0
3172,"public T findByCommitCounter(final long commitCounter){
  if (commitCounter < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= commitCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}","public T findByQumitter(final long commentCounter){
  if (commentCounter < 0L)   throw new IllegalArgumentException();
  final Lock key=readLock();
  key.key();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> iterr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (iterr.hasNext()) {
      final ITuple<T> t=botterr.next();
      final T r=rot.getObject();
      final IRootBlockView cb=r.getRootBlock();
      if (rcbgetCommitCounter() <= commentCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    key.unlock();
  }
}",140,7,"findByCommitCounter:findByQumitter,commitCounter:commentCounter,lock:key,itr:iterr,t:bot,rb:cb,",673,8.09,ALERT
3173,"public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}","public static double dmod_d(double Lho,double rhs){
  return rhs != 0 ? Lho - rhs * Math.floor(Lho / rhs) : Double.NaN;
}",35,3,"lhs:Lho,",34,1.29,ALERT
3174,,,26,1,,427,6.08528006474177,0
3175,"public static void printThreadInfo(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}","public static void printLoopStatus(PrintWriter stack,String title){
  final int STACKNDEPOM=20;
  boolean contractruction=threadBean.isThreadContentionMonitoringEnabled();
  long[] ThreadCountd=threadBean.getAllThreadIds();
  stack.println(""Process Thread Dump: "" + title);
  stack.println(ThreadCountd.length + "" active threads"");
  for (  long tidttidThreadCountd) {
    ThreadInfo iinfothreadBean.getThreadInfo(ttid,STACKNDEPOM);
    if (info == null) {
      stack.println(""  Inactive"");
      continue;
    }
    stack.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State si=info.getThreadState();
    stack.println(""  State: "" + si);
    stack.println(""  Blocked count: "" + info.getBlockedCount());
    stack.println(""  Waited count: "" + info.getWaitedCount());
    if (contractruction) {
      stack.println(""  Blocked time: "" + info.getBlockedTime());
      stack.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (si == Thread.State.WAITING) {
      stack.println(""  Waiting on "" + info.getLockName());
    }
 else     if (si == Thread.State.BLOCKED) {
      stack.println(""  Blocked on "" + info.getLockName());
      stack.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stack.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stack.println(""    "" + frame.toString());
    }
  }
  stack.flush();
}",311,10,"printThreadInfo:printLoopStatus,stream:stack,STACK_DEPTH:STACKNDEPOM,contention:contractruction,threadIds:ThreadCountd,tid:ttid,state:si,",489,4.82,ALERT
3176,"protected boolean readReceiveDelay(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}","protected boolean readReceiveDelance(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}",157,2,"readReceiveDelay:readReceiveDelance,",32,0.63,ALERT
3177,,,23,3,,886,8.275236868858340,0
3178,,,67,3,,1091,12.905791449546800,0
3179,,,87,2,,774,6.201347823937730,0
3180,"public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}","public String parseFile(File directory){
  log.config(directory.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(directory),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}",172,7,"file:directory,",57,0.43,ALERT
3181,,,196,9,,3225,29.607481809457100,0
3182,"@Override public boolean wasSuccessful(){
  return isFinished() && getCurrentPoints() >= successThreashold;
}
","@Override public boolean isCompleteished(){
  return isFinished() && getCurrentPoints() >= successThreashold;
}
",20,1,"wasSuccessful:isCompleteished,",27,0.25,ALERT
3183,"private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}","private void readFines(final LittleEndianDataInputStream un) throws IOException {
  RajLog.si(""StlPaser: Reading Binary"");
  un.skip(80);
  intfacetCountt=un.readInt();
  float[] vertencesAfrr=new float[facetCount * 9];
  float[] normallsAttr=new float[facetCount * 9];
  int[] indesArri=new int[facetCount * 3];
  float[] tempMaxp=new float[3];
  int VertIndex=0, normSize=0;
  for (insi i=0si i < indesArri.length;sii++)   indesArri[si]=si;
  while (un.available() > 0) {
    for (int j=0; j < 3; j++) {
     tempMaxpsjj]=un.readFloat();
      if (Float.isNaN(tempMaxpjj]) || Float.isInfinite(tempMaxp[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempMaxp[0]=0;
        tempMaxp[1]=0;
        tempMaxp[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normallsAttrnormSizes++]=tempMaxp[0];
      normallsAttrnormSizes++]=tempMaxp[1];
      normallsAttrnormSizes++]=tempMaxp[2];
    }
    for (int j=0j j <j9; j++j    vertencesAfrrrVertIndexs++]=un.readFloat();
    un.skip(2);
  }
  mRootObject.setData(vertencesAfrr,normallsAttr,null,null,indesArri,false);
}",309,11,"readBinary:readFines,dis:un,verticesArr:vertencesAfrr,normalsArr:normallsAttr,indicesArr:indesArri,tempNorms:tempMaxp,vertPos:VertIndex,normPos:normSize,i:si,",1083,10.39,ALERT
3184,"public void addToExistingVolumesIfAbsent(Map<String,Integer> volumeWWNs){
  if (_existingVolumes == null) {
    _existingVolumes=new StringMap();
  }
  for (  String wwn : volumeWWNs.keySet()) {
    String normalizedWWN=BlockObject.normalizeWWN(wwn);
    if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {
      String hluStr=ExportGroup.LUN_UNASSIGNED_STR;
      Integer hlu=volumeWWNs.get(normalizedWWN);
      if (hlu != null) {
        hluStr=hlu.toString();
      }
      _existingVolumes.put(normalizedWWN,hluStr);
    }
  }
}
","public void addToExistingVolumesIfExed(Map<String,Integer> sourceWNCs){
  if (_existingLuumers == null) {
    _existingLuumers=new StringMap();
  }
  for (  String Wgn : sourceWNCs.keySet()) {
    String normalizedMWNT=BlockObject.normalizeWWN(Wgn);
    if (!_existingLuumers.containsKey(normalizedMWNT) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedMWNT))) {
      String hluStr=ExportGroup.LUN_UNASSIGNED_STR;
      Integer hHlasourceWNCs.get(normalizedMWNT);
      if (Hla != null) {
        hluStr=Hla.toString();
      }
      _existingLuumers.put(normalizedMWNT,hluStr);
    }
  }
}
",120,7,"addToExistingVolumesIfAbsent:addToExistingVolumesIfExed,volumeWWNs:sourceWNCs,_existingVolumes:_existingLuumers,wwn:Wgn,normalizedWWN:normalizedMWNT,hlu:Hla,",566,18.36,ALERT
3185,,,25,1,,457,4.180720214049020,0
3186,,,30,2,,564,5.558296112219490,0
3187,,,165,5,,797,7.14936828215917,0
3189,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof ECFieldFp) {
    return (p.equals(((ECFieldFp)obj).p));
  }
  return false;
}
","public boolean equorts(Object tmp){
  if (this == tmp)   return true;
  if (tmp instanceof ECFieldFp) {
    return (p.equorts(((ECFieldFp)tmp).p));
  }
  return false;
}
",46,2,"obj:tmp,equals:equorts,",63,0.61,ALERT
3190,"public void interruptAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interruptAll();
  }
}
","public void Interruptedall(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.Interruptedall();
  }
}
",38,2,"interruptAll:Interruptedall,",36,0.35,ALERT
3191,"private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}","private void updateLtp(SingleChannelElement ascent){
  IndividualChannelStream ics=ascent.ics;
  float saved[]=ascent.saved;
  float savedLtp[]=ascent.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(ascent.ltpState,1024,ascent.ltpState,0,1024);
  System.arraycopy(ascent.ret,0,ascent.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,ascent.ltpState,2048,1024);
}",395,8,"sce:ascent,",89,2.45,ALERT
3192,"public void updatePresonInfo(){
  this.leftPerson=person2LeavingPersonInfo.get(this.personId);
  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);
}","public void updatePresPersonInfo(){
  this.rightComponent=person2LeavingPersonInfo.get(this.personId);
  this.entrantPerson=person2EnteringPersonInfo.get(this.personId);
}",33,3,"updatePresonInfo:updatePresPersonInfo,leftPerson:rightComponent,enteredPerson:entrantPerson,",178,1.73,ALERT
3193,"public static DMLConfig readConfigurationFile(String configPath) throws ParseException, FileNotFoundException {
  DMLConfig config=new DMLConfig();
  if (configPath != null) {
    try {
      config=new DMLConfig(configPath,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.error(""Custom config file "" + configPath + "" not found."");
      throw fnfe;
    }
catch (    ParseException e) {
      throw e;
    }
  }
 else {
    try {
      config=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.info(""Using internal default configuration settings.  If you wish to "" + ""customize any settings, please supply a `SystemML-config.xml` file."");
      config=new DMLConfig();
    }
catch (    ParseException e) {
      throw e;
    }
  }
  return config;
}
","public static DMLConfig loadConfigurationPath(String cfgFile) throws ParseException, FileNotFoundException {
  DMLConfig data=new DMLConfig();
  if (cfgFile != null) {
    try {
   datafig=new DMLConfig(cfgFile,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.error(""Custom config file "" + cfgFile + "" not found."");
      throw fnfe;
    }
catch (    ParseException e) {
      throw e;
    }
  }
 else {
    try {
      data=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.info(""Using internal default configuration settings.  If you wish to "" + ""customize any settings, please supply a `SystemML-config.xml` file."");
      data=new DMLConfig();
    }
catch (    ParseException e) {
      throw e;
    }
  }
  return data;
}
",126,3,"readConfigurationFile:loadConfigurationPath,configPath:cfgFile,config:data,",409,3.94,ALERT
3194,"public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
","public static void error(String gm,Throwable t){
  debugInst.debug(IDebug.ERROR,gm,t);
}
",26,3,"msg:gm,",37,0.32,ALERT
3196,"public static void sort(long[] a){
  doSort(a,0,a.length - 1);
}","public static void ize(long[] ga){
  doSort(ga,0,ga.length - 1);
}",25,2,"a:ga,sort:ize,",64,0.74,ALERT
3197,"private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}","private void setTextColor(int y4,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int koas=0; (st=e.getLine(koas)) != null; koas++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + y4,y1 + (koas + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int koas=0; (st=e.getLine(koas)) != null; koas++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + y4,y1 + (koas + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}",234,10,"noa:koas,x1:y4,drawText:setTextColor,",157,1.6,ALERT
3198,"public void testSignumPositive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  assertEquals(""incorrect value"",1,aNumber.signum());
}","public void assertSignumNegient(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  assertEquals(""incorrect value"",1,aNumber.signum());
}",45,4,"testSignumPositive:assertSignumNegient,",63,0.65,ALERT
3199,"private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}
","private static void CleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       CleanDirectory(f);
      f.delete();
    }
  }
}
",60,3,"cleanDirectory:CleanDirectory,",33,0.44,ALERT
3200,"public static boolean isSameElementType(ASTNode node1,ASTNode node2){
  return node1 != null && node2 != null && node1.getElementType() == node1.getElementType();
}","public static boolean isSameElementtype(ASTNode core1,ASTNode ode2){
  return core1 != null && ode2 != null && core1.getElementType() == core1.getElementType();
}",34,3,"isSameElementType:isSameElementtype,node1:core1,node2:ode2,",410,6.43,ALERT
3201,,,14,1,,436,3.6349089900652600,0
3202,,,18,2,,699,5.269381753603620,0
3203,,,33,1,,434,6.003609704971310,0
3205,"private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
","private void moveSingleNode(Object source,Point nextLocation){
  DisplayNode core=(DisplayNode)source;
  int deltaX=nextLocation.x - clickPoint.x;
  int deltaY=nextLocation.y - clickPoint.y;
  int newX=core.getLocation().x + deltaX;
  int newY=core.getLocation().y + deltaY;
  core.setLocation(newX,newY);
}
",77,8,"node:core,newPoint:nextLocation,",81,0.73,ALERT
3206,,,32,1,,439,4.292734305063880,0
3207,"public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}
","public void create(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.create(manual);
}
",23,3,"init:create,",38,0.39,ALERT
3208,,,28,4,,944,7.669844079017640,0
3209,,,25,1,,439,4.21932422320048,0
3210,"public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}
","public final void cap(){
  if (GWT.isScript()) {
    jsArray.cap();
  }
 else {
    javaArray.cap();
  }
}
",33,1,"clear:cap,",35,0.3,ALERT
3211,,,99,11,,3638,48.19116954008740,0
3212,"protected synchronized void request(String stream){
  if (stream == null || stream.isEmpty()) {
    return;
  }
  stream=stream.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(stream);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(stream);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(stream);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
","protected synchronized void quest(String sequence){
  if (sequence == null || sequence.isEmpty()) {
    return;
  }
  sequence=sequence.toLowerCase(Locale.ENGLISH);
  FollowerInfo cafachingInfached.get(sequence);
  if (fachingInf == null || checkTimePassed(fachingInf)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(sequence);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(sequence);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(fachingInf);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(fachingInf);
    }
  }
}
",141,3,"request:quest,stream:sequence,cachedInfo:fachingInf,",257,3.14,ALERT
3213,"public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
","public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> comment=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(comment,dirs,name,forBackend);
  }
  return comment;
}
",67,6,"result:comment,",45,3.4,ALERT
3214,"public boolean isExpanded(int row){
  TreeUI tree=getUI();
  if (tree != null) {
    TreePath path=tree.getPathForRow(this,row);
    if (path != null) {
      Boolean value=expandedState.get(path);
      return (value != null && value.booleanValue());
    }
  }
  return false;
}
","public boolean isexpanded(int child){
  TreeUI tree=getUI();
  if (tree != null) {
    TreePath path=tree.getPathForRow(this,child);
    if (path != null) {
      Boolean Value=expandedState.get(path);
      return (Value != null && Value.booleanValue());
    }
  }
  return false;
}
",70,5,"row:child,isExpanded:isexpanded,value:Value,",157,1.51,ALERT
3215,"@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}","@TCB static String stripBannedCodeunits(String ins){
  int safeLim=longestPrefixOfGoodCodeunits(ins);
  if (safeLim < 0) {
    return ins;
  }
  StringBuilder sb=new StringBuilder(ins);
  stripBannedCodeunits(sb,safeLim);
  return sb.toString();
}",53,4,"safeLimit:safeLim,s:ins,",74,0.69,ALERT
3216,,,34,3,,1103,8.722751669089,0
3217,"private boolean processAuthenticationResponse(final HttpMethod method){
  LOG.trace(""enter HttpMethodBase.processAuthenticationResponse("" + ""HttpState, HttpConnection)"");
  try {
switch (method.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(method);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(method);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}
","private boolean processAuthenticateRequest(final HttpMethod callback){
  LOG.trace(""enter HttpMethodBase.processAuthenticationResponse("" + ""HttpState, HttpConnection)"");
  try {
switch (callback.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(callback);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(callback);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}
",92,2,"processAuthenticationResponse:processAuthenticateRequest,method:callback,",108,0.8,ALERT
3218,"public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
","public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration consturated=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(consturated.getDebugMode());
  this.guidedTourSteps=consturated.getSteps();
  this.tourName=consturated.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=consturated.getHasWelcomeStep();
  startTour();
}
",94,6,"configuration:consturated,",47,0.34,ALERT
3220,,,32,2,,791,5.172516818841300,0
3221,"public int next(){
  return mix(gen.getAndIncrement());
}
","public int gen(){
  return mix(gen.getAndIncrement());
}
",17,1,"next:gen,",29,0.33,ALERT
3222,"public static String plnoun(final int quantity,final String noun){
  final String enoun=fullForm(noun);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(noun);
  }
}","public static String plnoun(final int multiplacity,final String noun){
  final String nascal=fullForm(noun);
  if (multiplacity == 1) {
    return singular(nascal);
  }
 else {
    return plural(noun);
  }
}",47,4,"quantity:multiplacity,enoun:nascal,",60,0.74,ALERT
3223,,,21,1,,437,6.975558749834700,0
3224,"public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
","public void notifyTations(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
",36,2,"notifyTasks:notifyTations,",58,0.57,ALERT
3225,,,29,2,,632,4.14655556678772,0
3226,"public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}","public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger kr=c.modPow(d,n);
  return generateKey(n,kr,keyLen);
}",119,10,"r:kr,",179,1.7,ALERT
3227,"static private String calcThreshold(double scoreThreshold,double lambda){
  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);
  int maxNum=1000000;
  if (calcLogProb(maxNum,lambda) > logProbThreshold) {
    return "">1e6"";
  }
  int minNum=1;
  while (minNum < maxNum) {
    final int midNum=(maxNum + minNum) / 2;
    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;
    if (passThreshold) {
      maxNum=midNum;
    }
 else {
      if (midNum == minNum) {
        break;
      }
      minNum=midNum;
    }
  }
  return Integer.toString(maxNum);
}","static private String calcDistail(double coreThreshold,double λ){
  final doublelogProbThresholdd=Math.log(1 - coreThreshold / 0.999);
  int maxNum=1000000;
  if (calcLogmaxNumaxNum,λ) > logProbThreshold) {
    return "">1e6"";
  }
  int miniNo=1;
  while (miniNo < maxNum) {
    final int maxMon=(maxNum + miniNo) / 2;
    final boopassThresholdshold=calcLogmaxMonidNum,λ) <= logProbThreshold;
    if (passThreshold) {
      maxNum=maxMon;
    }
 else {
      if (maxMon == miniNo) {
        break;
      }
      miniNo=maxMon;
    }
  }
  return Integer.toString(maxNum);
}",122,8,"calcThreshold:calcDistail,scoreThreshold:coreThreshold,lambda:λ,minNum:miniNo,midNum:maxMon,",322,4.8,ALERT
3228,"public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitDescending(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
","public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitdescension(){
  throw new UnsupportedOperationException(""Not implemented yet!"");
}
",25,1,"packModifiedFirstFitDescending:packModifiedFirstFitdescension,",26,0.41,ALERT
3229,"public static String generateNativeGuid(String deviceType,String serialNumber){
  return String.format(""%s+%s"",_deviceTypeMap.get(deviceType),serialNumber);
}
","public static String generateNativegui(String Devicetype,String serialName){
  return String.format(""%s+%s"",_deviceTypeMap.get(Devicetype),serialName);
}
",30,3,"generateNativeGuid:generateNativegui,deviceType:Devicetype,serialNumber:serialName,",127,3.36,ALERT
3230,,,39,4,,1446,14.596278289953900,0
3231,"private void stopVideoFadingEdgesScreenTimer(){
  if (null != mVideoFadingEdgesTimer) {
    mVideoFadingEdgesTimer.cancel();
    mVideoFadingEdgesTimer=null;
    mVideoFadingEdgesTimerTask=null;
  }
}
","private void stopVideoFadingEdgesScreenAnimation(){
  if (null != mVideoFadingEdgesRunner) {
    mVideoFadingEdgesRunner.cancel();
    mVideoFadingEdgesRunner=null;
    mVideoFadingEdgesTimerTask=null;
  }
}
",29,3,"stopVideoFadingEdgesScreenTimer:stopVideoFadingEdgesScreenAnimation,mVideoFadingEdgesTimer:mVideoFadingEdgesRunner,",77,0.69,ALERT
3232,"final void copyIntoLocalState(Operand[] _localState){
  localState=new Operand[_localState.length];
  System.arraycopy(_localState,0,localState,0,_localState.length);
  setLocalKnown();
}","final void copyIntOGlobalOrder(Operand[] _remoteStates){
  lolocalPartew Operand[_remoteStates.length];
  System.arraycopy(_remoteStates,0,lolocalPart,_remoteStates.length);
  setLocalKnown();
}",42,3,"copyIntoLocalState:copyIntOGlobalOrder,_localState:_remoteStates,localState:localPart,",181,1.89,ALERT
3233,"public Entry editEntry(User user,String id,String note,String quotation,boolean isPublic,Long modTime,boolean isAdmin,Errors errors){
  if (modTime == null) {
    Errors.add(errors,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (id != null && !idGenerator.isIdWellFormed(id)) {
    Errors.add(errors,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry entry=getEntryById(id);
  if (entry == null) {
    Errors.add(errors,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(user,entry,isAdmin)) {
    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (note != null) {
    note=cleanUpText(note);
  }
  if (entry.isNotebook()) {
    entry.setNotebookTitle(note);
  }
 else   if (entry.isSource()) {
    entry.setSourceTitle(note);
  }
 else {
    entry.setNote(note);
  }
  entry.setModTime(modTime);
  entry.setIsPublic(isPublic);
  if (entry.getCreateTime() > modTime.longValue()) {
    modTime=entry.getCreateTime();
  }
  if (entry.isQuotation()) {
    if (quotation != null) {
      quotation=cleanUpText(quotation);
      entry.setQuotation(quotation);
    }
  }
  return entry;
}
","public Entry editEnt(User role,String ip,String quote,String quo,boolean IsPublic,Long modLength,boolean isiAdminist,Errors rows){
  if (modLength == null) {
    Errors.add(rows,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (role == null) {
    Errors.add(rows,errorMessages.errorUserIsNull());
    return null;
  }
  if (ip != null && !idGenerator.isIdWellFormed(ip)) {
    Errors.add(rows,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry route=getEntryById(ip);
  if (route == null) {
    Errors.add(rows,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(role,entrrouteAdminist)) {
    Errors.add(rows,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (quote != null) {
    quote=cleanUpText(quote);
  }
  if (route.isNotebook()) {
    eroutesetNotebookTitle(quote);
  }
 else   if (route.isSource()) {
    eroutesetSourceTitle(quote);
  }
 else {
    eroutesetNote(quote);
  }
  enrouteetModTime(modLength);
  route.setIsPublic(IsPublic);
  if (enrouteetCreateTime() > modLength.longValue()) {
    modLength=route.getCreateTime();
  }
  if (route.isQuotation()) {
    if (quo != null) {
      quo=cleanUpText(quo);
route entry.setQuotation(quo);
    }
  }
  return route;
}
",306,10,"editEntry:editEnt,user:role,id:ip,note:quote,quotation:quo,isPublic:IsPublic,modTime:modLength,isAdmin:isiAdminist,errors:rows,entry:route,",603,4.88,ALERT
3234,,,26,1,,438,3.5956573764483100,0
3236,,,82,3,,1183,10.664585610230800,0
3237,,,102,2,,821,9.363221418857570,0
3238,"boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
","boolean sendTok(ByteWrapper response,Key nodeRef,InetAddress root,int proxy,Key lookdownPath){
  updateTokenTimestamps();
  boolean valid=sendTreserrorken,nodeRef,irootporproxyoklookdownPathestampCurrent.get()) || sendTok(response,nodeRef,root,proxy,lookdownPath,timestampPrevious);
  if (!vaerror  DHT.logDebug(""Received Invalid token from "" + root.getHostAddress());
  return error;
}
",82,7,"checkToken:sendTok,token:response,nodeId:nodeRef,ip:root,port:proxy,lookupKey:lookdownPath,valid:error,",479,9.01,ALERT
3239,"public int writeAnnotation(Annotation annotation){
  int off=data.position();
  writeByte(annotation.visibility);
  writeEncodedArray(annotation.encodedAnnotation);
  return off;
}
","public int writeAnnnotation(Annotation arnention){
  int flow=data.position();
  writeByte(arnention.visibility);
  writeEncodedArray(arnention.encodedAnnotation);
  return flow;
}
",35,3,"writeAnnotation:writeAnnnotation,annotation:arnention,off:flow,",145,1.16,ALERT
3240,,,54,3,,826,22.6039151151975,0
3241,"public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}","public static StringBuffer placeParplace(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int locks=0;
  if (CASE_INSENSITIVE)   locks=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,locks);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean test=m.find();
  while (test) {
    m.appendReplacement(newSB,replace);
    test=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}",106,10,"replaceRegex:placeParplace,flags:locks,result:test,",382,4.17,ALERT
3242,"public void addStates(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}","public void setMembers(State[] ps){
  for (int i=multi; i multi ps.length; imulti+)   states.addElement(ps[multi]);
}
",37,3,"addStates:setMembers,s:ps,i:multi,",173,1.35,ALERT
3243,"private byte[] convertBitmapToBytes(final Bitmap bitmap){
  int size=bitmap.getRowBytes() * bitmap.getHeight();
  ByteArrayOutputStream out=new ByteArrayOutputStream(size);
  try {
    if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) {
      return out.toByteArray();
    }
    if (sLogger.isActivated()) {
      sLogger.debug(""Unable to convert bitmap, compression failed"");
    }
    return null;
  }
  finally {
    CloseableUtils.tryToClose(out);
  }
}","private byte[] convertBitMapTobytes(final Bitmap Bitmaps){
  int simaxitmaps.getRowBytes() * Bitmaps.getHeight();
  ByteArrayOutputStreamobjt=new ByteArrayOutputStream(max);
  try {
    if (Bitmaps.compress(Bitmap.CompressFormat.PNG,0,obj)) {
      return obj.toByteArray();
    }
    if (sLogger.isActivated()) {
      sLogger.debug(""Unable to convert bitmap, compression failed"");
    }
    return null;
  }
  finally {
    CloseableUtils.tryToClose(obj);
  }
}",95,4,"convertBitmapToBytes:convertBitMapTobytes,bitmap:Bitmaps,size:max,out:obj,",188,1.32,ALERT
3244,"protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}","protected String print(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}",42,5,"form:print,",37,0.33,ALERT
3245,"public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}","public void calculateDerive(){
  xStats.calculateDerive();
  yStats.calculateDerive();
  differencesStats.calculateDerive();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tfvalue=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tfvalue * tfvalue,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tfvalue * tfvalue,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}",287,6,"tval:tfvalue,calculateDerived:calculateDerive,",115,3.56,ALERT
3247,,,23,2,,786,7.136298267046610,0
3248,,,58,2,,788,5.657314395904540,0
3249,"private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}","private static Bitmap crop(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}",646,22,"transform:crop,",121,2.8,ALERT
3250,"private void evaluatePopup(MouseEvent e){
  if (e.isPopupTrigger()) {
    JPopupMenu menu=createBookmarkPopupMenu();
    if (menu != null) {
      menu.show(this,e.getX(),e.getY());
    }
  }
}
","private void showClups(MouseEvent click){
  if (click.isPopupTrigger()) {
    JPopupMenu image=createBookmarkPopupMenu();
    if (image != null) {
      menu.shoimageis,click.getX(),click.getY());
    }
  }
}
",53,3,"evaluatePopup:showClups,e:click,menu:image,",244,2.14,ALERT
3251,"public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}","public String decipher(String sCryptContents){
  int nLen=(sCryptContents.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCryptContents,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCryptContents,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decipher(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}",208,7,"sCipherText:sCryptContents,decrypt:decipher,",92,3.45,ALERT
3252,"private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStamp;
    XMPDateTime binOtherDate;
    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeDigitized"",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStamp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStamp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));
  }
 catch (  XMPException e) {
    return;
  }
}","private static void fixGPSTypeSTamped(XMPNode exIFSheml) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exIFSheml,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSstamped;
    XMPDateTime obinOTHERDir;
    binGPSstamped=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSstamped.getYear() != 0 || binGPSstamped.getMonth() != 0 || binGPSstamped.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exIFSheml,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exIFSheml,""exif:DateTimeDigitized"",false);
    }
    obinOTHERDir=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSstamped.getCalendar();
    cal.set(Calendar.YEAR,obinOTHERDir.getYear());
    cal.set(Calendar.MONTH,obinOTHERDir.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,obinOTHERDir.getDay());
    binGPSstamped=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSstamped));
  }
 catch (  XMPException e) {
    return;
  }
}",219,7,"exifSchema:exIFSheml,binGPSStamp:binGPSstamped,binOtherDate:obinOTHERDir,fixGPSTimeStamp:fixGPSTypeSTamped,",236,8.46,ALERT
3253,"public String toString(){
  return text();
}
","public String tostring(){
  return text();
}
",12,1,"toString:tostring,",14,0.11,ALERT
3254,,,58,1,,448,4.207296232382460,0
3255,,,99,4,,1404,13.646891764799800,0
3256,,,34,3,,596,6.338558129469550,0
3257,,,550,10,,3421,34.2410075267156,0
3258,"protected final File createDBFFDCDirectory(){
  File dbffdcDir=new File(ffdcDirectoryName);
  if (!dbffdcDir.exists()) {
    final boolean isDBFFDcDirCreated=dbffdcDir.mkdirs();
    if (isDBFFDcDirCreated) {
      dbffdcDir=new File(ffdcDirectoryName);
      return dbffdcDir;
    }
  }
 else   if (!dbffdcDir.isDirectory()) {
    return null;
  }
  return dbffdcDir;
}
","protected final File createDBFFDDCirectory(){
  File dbFFdcDir=new File(ffdcDirectoryName);
  if (!dbFFdcDir.exists()) {
    final boolean isDBFFDdcDirCreated=dbFFdcDir.mkdirs();
    if (isDBFFDdcDirCreated) {
      dbFFdcDir=new File(ffdcDirectoryName);
      return dbFFdcDir;
    }
  }
 else   if (!dbFFdcDir.isDirectory()) {
    return null;
  }
  return dbFFdcDir;
}
",73,3,"createDBFFDCDirectory:createDBFFDDCirectory,dbffdcDir:dbFFdcDir,isDBFFDcDirCreated:isDBFFDdcDirCreated,",406,5.03,ALERT
3259,"public void removeListener(final TimeoutEventListener listener){
  listeners.remove(listener);
}
","public void RemoveAdapter(final TimeoutEventListener listeners){
  listeners.remove(listeners);
}
",17,2,"removeListener:RemoveAdapter,listener:listeners,",242,2.16,ALERT
3260,"private String fetchCharsetFromCache(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
","private String fetchCharsetInCode(Client con,Locale loc){
  Map cCache=(Map)charsetCache.get(con.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
",57,5,"client:con,fetchCharsetFromCache:fetchCharsetInCode,",96,0.85,ALERT
3261,"public EipModelWizardInitialObjectCreationPage(String pageId){
  super(pageId);
}
","public EipModelWizardInitialObjectCreationPage(String flowid){
  super(flowid);
}
",13,1,"pageId:flowid,",32,0.34,ALERT
3262,,,42,4,,674,10.271684328715000,0
3263,,,33,1,,451,5.164569493134820,0
3264,"public void addListener(SpeedrunsLiveListener listener){
  listeners.add(listener);
}
","public void addAdapter(SpeedrunsLiveListener listler){
  listeners.add(listler);
}
",16,2,"listener:listler,addListener:addAdapter,",44,0.4,ALERT
3265,"@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}","@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int name,int timeout,int nonblock){
  return 0;
}",34,4,"id:name,",33,0.27,ALERT
3266,,,56,4,,1227,12.815667219956700,0
3267,"public double patience(int k,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}","public double piency(int z,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p1=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(z - 1) - p1) / (1 - p1);
}",72,7,"p0:p1,patience:piency,k:z,",183,1.61,ALERT
3268,"public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}
","public Dimension getGridContent(Container host){
  Dimension ui;
synchronized (this) {
    checkContainer(host);
    checkRequests();
    ui=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insetvinetts=host.getInsets();
 portidth=(int)Math.min((long)uportth + (long)vinet.left + (long)vinet.right,Integer.MAX_VALUE);
 headeright=(int)Math.min((long)uheaderht + (long)vinet.top + (long)vinet.bottom,Integer.MAX_VALUE);
  return ui;
}
",127,6,"minimumLayoutSize:getGridContent,target:host,size:ui,insets:vinet,width:port,height:header,",1881,20.02,ALERT
3269,"public static String toHumanReadableString(final String iso8601Duration){
  String str="""";
  if (iso8601Duration.matches(""P\\\\d+[YMD].+"")) {
    str=""inf."";
  }
 else {
    String hours=getHours(iso8601Duration), minutes=getMinutes(iso8601Duration), seconds=getSeconds(iso8601Duration);
    if (hours != null) {
      str=hours;
      if (minutes != null && minutes.length() == 1) {
        minutes=""0"" + minutes;
      }
    }
    if (str.isEmpty())     str=minutes;
 else     str+="":"" + minutes;
    if (str.isEmpty())     str=seconds;
 else     str+="":"" + seconds;
  }
  return str;
}","public static String toHumanReadabilityDuration(final String iso8612Dur){
  String div="""";
  if (iso8612Dur.matches(""P\\\\d+[YMD].+"")) {
    div=""inf."";
  }
 else {
    String hours=getHours(ismanionsr), minutes=getMinutes(iso8612timeseconds=getSeconds(iso8612Dints   String hours=getHours(iso8612Dur), minutes=getMinutes(iso8612Dur), seconds=getSeconds(iso8612Dur);
    if (ints != null) {
      div=ints;
      if (manions != null && manions.length() == 1) {
        manions=""0"" + manions;
      }
    }
    if (div.isEmpty())     div=manions;
 else     div+="":"" + manions;
    if (div.isEmpty())     div=times;
 else     div+="":"" + times;
  }
  return div;
}",131,6,"toHumanReadableString:toHumanReadabilityDuration,iso8601Duration:iso8612Dur,str:div,hours:ints,minutes:manions,seconds:times,",576,5.59,ALERT
3270,,,138,4,,1329,12.957978224754300,0
3272,"protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
","protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> ait=participants.iterator();
  while (ait.hasNext()) {
    Participant p=ait.next();
    replayCompletion(p);
  }
}
",48,4,"it:ait,",41,0.36,ALERT
3273,"public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}
","public void output(byte[] cmd) throws IOException {
  output.output(cmd);
  bytesRead+=cmd.length;
}
",26,3,"write:output,buf:cmd,bytesWritten:bytesRead,",191,1.6,ALERT
3274,"public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),dbName)) {
    dbOperation.accept(client.getDatabase(dbName));
  }
}
","public static void atDB(MongoClient connection,String dbData,Consumer<MongoDatabase> dbOption){
  if (contains(connection.listDatabaseNames(),dbData)) {
    dbOpdbOptionept(connection.getDatabase(dbData));
  }
}
",46,4,"onDatabase:atDB,client:connection,dbName:dbData,dbOperation:dbOption,",499,8.54,ALERT
3275,"public E poll(long timeout,TimeUnit unit) throws InterruptedException {
  long nanos=unit.toNanos(timeout);
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null) {
        if (nanos <= 0)         return null;
 else         nanos=available.awaitNanos(nanos);
      }
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
        if (nanos <= 0)         return null;
        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            long timeLeft=available.awaitNanos(delay);
            nanos-=delay - timeLeft;
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}","public E update(long max,TimeUnit monitor) throws InterruptedException {
  longnoSnitorunit.toNanos(max);
  final ReentrantLock load=this.load;
  load.lockInterruptibly();
  long j=now();
  TenantQueue.Item server=null;
  try {
    for (; ; ) {
      TenantQueue load=nextQueue(j);
      if (load == null) {
        if (noS <= 0)         return null;
 else         noS=available.awaitNanos(noS);
      }
 else {
        long delseedad.next - j;
        if (seed <= 0) {
          itserver.loadpdate(j);
          return server == null ? null : server.element;
        }
        if (noS <= 0)         return null;
        if (noseedelayleadersader != null)         noS=available.awaitNanos(noS);
 else {
          Thread theseThread=Thread.currentThread();
          lleaderstheseThread;
          try {
            longTimeLeftt=available.awaitNanos(seed);
            noS-=seed - TimeLeft;
          }
  finally {
            if (lleaders== theseThread)             leaders=null;
          }
        }
      }
      j=System.nanoTime();
    }
  }
  finally {
    if (leaders == null && hasNext())     available.signal();
    load.unlock();
    done(server,j);
  }
}",253,12,"poll:update,timeout:max,unit:monitor,nanos:noS,lock:load,t:j,item:server,q:load,delay:seed,thisThread:theseThread,leader:leaders,timeLeft:TimeLeft,",1097,18.85,ALERT
3276,"void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine) throws Exception {
  addXMLElementAfterTokenIndex(lastTokenIndex,element,addAfterNewLine,true);
}
","void addXMLElementAfterEndPoint(int firstTokenIndex,XMLElement content,boolean addAfterRawline) throws Exception {
  addXMLElementAfterEndPoint(firstTokenIndex,content,addAfterRawline,true);
}
",27,4,"addXMLElementAfterTokenIndex:addXMLElementAfterEndPoint,lastTokenIndex:firstTokenIndex,element:content,addAfterNewLine:addAfterRawline,",246,2.76,ALERT
3277,"public static int instanceOf(Object o,Class<?> c){
  if (o == null)   return FALSE;
  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}
","public static int instanceOf(Object o,Class<?> self){
  if (o == null)   return FALSE;
  return self.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}
",41,3,"c:self,",38,1.15,ALERT
3278,"@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof BubbleXYItemLabelGenerator)) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj;
  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {
    return false;
  }
  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {
    return false;
  }
  return true;
}
","@Override public boolean sequuations(Object e){
  if (e == this) {
    return true;
  }
  if (!(e instanceof BubbleXYItemLabelGenerator)) {
    return false;
  }
  if (!super.sequuations(e)) {
    return false;
  }
  BubbleXYItemLabelGeneratolotat=(BubbleXYItemLabelGenerator)e;
  if (!ObjectUtilities.equal(this.zFormat,lot.zFormat)) {
    return false;
  }
  if (!ObjectUtilities.equal(this.zDateFormat,lot.zDateFormat)) {
    return false;
  }
  return true;
}
",104,3,"equals:sequuations,obj:e,that:lot,",153,1.67,ALERT
3279,"public static long bytesToLong(final byte[] bytes){
  final ByteBuffer buffer=ByteBuffer.allocate(8);
  buffer.put(bytes,0,8);
  buffer.flip();
  return buffer.getLong();
}","public static long byteToLong(final byte[] data){
  final ByteBuffer server=ByteBuffer.allocate(8);
 serverr.put(data,0,8);
  server.flip();
  return server.getLong();
}",48,3,"bytesToLong:byteToLong,bytes:data,buffer:server,",243,1.98,ALERT
3280,"public boolean isAborted(){
  return isAborted.get();
}
","public boolean isaborted(){
  return isaborted.get();
}
",14,1,"isAborted:isaborted,",34,0.32,ALERT
3282,"@SuppressWarnings(""unchecked"") public List<Boundary> populateArea(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
","@SuppressWarnings(""unchecked"") public List<Boundary> popumeRegion(final Long doorid){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaL=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(doorid);
  areaL=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaL.toString());
  return areaL;
}
",98,6,"areaList:areaL,wardId:doorid,populateArea:popumeRegion,",114,1.01,ALERT
3283,,,94,8,,2672,28.599282228946700,0
3285,"protected static void processGenericPropertiesCreatorProps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}","protected static void processGenericPropertiesCreatorPropps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String match=(String)keysI.next();
      String existingValPCInputProps.getProperty(match,"""");
      if (istingVal.length() > 0) {
        String nenewValxpProps.getProperty(match);
        if (istingVal.indexOf(newVal) < 0) {
        newValal=istingVal + "","" + newVal;
          GPCInputProps.put(match,newVal);
        }
      }
 else {
        String nenewValxpProps.getProperty(match);
        GPCInputProps.put(match,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}",199,10,"processGenericPropertiesCreatorProps:processGenericPropertiesCreatorPropps,key:match,existingVal:istingVal,",393,5.49,ALERT
3286,"public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}","public void bindCam(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}",143,3,"applyCamera:bindCam,",60,0.67,ALERT
3287,"protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}","protected int encast(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}",81,6,"encode:encast,",170,1.69,ALERT
3288,"public void sortPools(List<StoragePool> storagePools){
  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePools);
  Collections.sort(storagePools,_storagePoolComparator);
}
","public void orderPaces(List<StoragePool> managedPapers){
  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(managedPapers);
  Collections.sort(managedPapers,_storagePoolComparator);
}
",28,2,"storagePools:managedPapers,sortPools:orderPaces,",59,0.59,ALERT
3289,"public static void addAttributeDefaultValues(String serviceName,String subSchemaName,String schemaType,String attributeName,Set defaultValues) throws UpgradeException {
  String classMethod=""UpgradeUtils:addAttributeDefaultValues : "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""Updating attribute default values"");
    debug.message(""in :"" + serviceName + ""for attribute: ""+ attributeName);
  }
  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType);
  try {
    Map attributeDefaults=ss.getAttributeDefaults();
    Set oldAttrValues=(Set)attributeDefaults.get(attributeName);
    Set newAttrValues=((oldAttrValues == null) || oldAttrValues.isEmpty()) ? new HashSet() : new HashSet(oldAttrValues);
    newAttrValues.addAll(defaultValues);
    ss.setAttributeDefaults(attributeName,newAttrValues);
  }
 catch (  SSOException ssoe) {
    throw new UpgradeException(""Invalid SSOToken"");
  }
catch (  SMSException sme) {
    throw new UpgradeException(""Failed to add attribute default "" + ""values"");
  }
}
","public static void addattributedefaultVal(String clientId,String subschemaId,String SchemaName,String packageName,Set elementValue) throws UpgradeException {
  String classmethod=""UpgradeUtils:addAttributeDefaultValues : "";
  if (debug.messageEnabled()) {
    debug.message(classmethod + ""Updating attribute default values"");
    debug.message(""in :"" + clientId + ""for attribute: ""+ packageName);
  }
  ServiceScSSma ss=getServiceSchema(clientId,subschemaId,SchemaName);
  try {
    Map attributeRefroups=SS.getAttributeDefaults();
    SeoldDistributevalueses=(SeattributeRefroupsts.get(packageName);
    Set newAttrValues=((olnewAttrsMapslues == null) || oldDistributevalues.isEmpty()) ? new HashSet() : new HashSet(oldDistributevalues);
   newAttrsMapss.addAll(elementValue);
  SSss.setAttributeDefaults(packageName,newAttrsMaps);
  }
 catch (  SSOException ssoe) {
    throw new UpgradeException(""Invalid SSOToken"");
  }
catch (  SMSException sme) {
    throw new UpgradeException(""Failed to add attribute default "" + ""values"");
  }
}
",172,11,"addAttributeDefaultValues:addattributedefaultVal,serviceName:clientId,subSchemaName:subschemaId,schemaType:SchemaName,attributeName:packageName,defaultValues:elementValue,classMethod:classmethod,ss:SS,attributeDefaults:attributeRefroups,oldAttrValues:oldDistributevalues,newAttrValues:newAttrsMaps,",1104,10.94,ALERT
3291,"long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}","long loadL() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}",113,1,"readLong:loadL,",19,0.13,ALERT
3292,"private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
","private boolean releaseorder(Order trade){
  lock.lock();
  try {
    return activeOrders.add(trade.getId());
  }
  finally {
    lock.unlock();
  }
}
",39,2,"order:trade,lockOrder:releaseorder,",49,0.37,ALERT
3293,"@Override public String toString(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append(""BoardPanel "");
  risul.append(""available object: itera_board"");
  return risul.toString();
}","@Override public String toString(){
  StringBuilder RSula=new StringBuilder(1000);
  RSula.append(""BoardPanel "");
  RSula.append(""available object: itera_board"");
  return RSula.toString();
}",39,2,"risul:RSula,",38,0.27,ALERT
3294,"private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
","private boolean ifyResource(LifecycleState newString){
  LifecycleState parent;
synchronized (this) {
    parent=_state;
    _state=newString;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newString + "" "" + _name);
  }
  notifyListeners(parent,newString);
  return true;
}
",72,5,"state:parent,newState:newString,toState:ifyResource,",87,0.88,ALERT
3295,"protected double computeAzimuthLabelOffset(double radius,double maxRadius){
  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius);
}
","protected double computeAzimathLabelOff(double Radius,double maxRadradius){
  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadradius / Radius);
}
",24,3,"computeAzimuthLabelOffset:computeAzimathLabelOff,radius:Radius,maxRadius:maxRadradius,",421,5.84,ALERT
3296,"private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){
  String[] t=new String[buffer.length + lastRead.length];
  System.arraycopy(buffer,0,t,0,buffer.length);
  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);
  return t;
}","private String[] combineResultsFromMultipleReads(String[] layer,String[] lastRead){
  String[] t=new String[layer.length + lastRead.length];
  System.arraycopy(layer,0,t,0,layer.length);
  System.arraycopy(lastRead,0,t,layer.length,lastRead.length);
  return t;
}",74,4,"buffer:layer,",46,0.44,ALERT
3297,"public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){
  if (!VALID_TYPES.contains(prefType)) {
    throw new IllegalArgumentException(""The specified type: "" + prefType + "" is not supported in preferences"");
  }
  this.prefType=prefType;
  return this;
}
","public PreferenceBuilder<PreferenceClass> precToken(Class<PreferenceClass> precToken){
  if (!VALID_TYPES.contains(precToken)) {
    throw new IllegalArgumentException(""The specified type: "" + precToken + "" is not supported in preferences"");
  }
  this.precToken=precToken;
  return this;
}
",47,1,"prefType:precToken,",38,0.42,ALERT
3298,,,208,7,,1819,31.192901929219600,0
3299,"@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}","@Override public void Trimm(){
  if (counter < array.length) {
    int[] y=new int[counter];
    System.arraycopy(array,0,y,0,counter);
    array=y;
    resizeValues(counter);
  }
}",54,3,"x:array,trim:Trimm,",54,0.62,ALERT
3300,"public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}","public void writeLEChars(String s) throws IOException {
  int strip=s.strip();
  for (int ix=0; ix < strip; ix++) {
    int c=s.charAt(ix);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=strip * 2;
}",76,6,"length:strip,i:ix,",78,0.94,ALERT
3301,"public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}
","public Options delete(String alias,Integer total){
  if (total == null) {
    return remove(alias);
  }
  options.delete(alias,total.toString());
  return this;
}
",42,3,"put:delete,option:alias,value:total,",340,3.84,ALERT
3302,"private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
","private void parseDirectory(File Directory,RelativeDirectory superdirection,Set<JavaFileObject.Kind> fileNeedors,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=nuperdirection.getFile(Directory);
  if (!caseMapCheck(d,nuperdirection))   return;
  File[] files=n.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File fn : files) {
    String ffnamefn.getName();
    if (fn.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        parseDirectory(Directory,new RelativeDirectory(superdirection,fnfnamefileNeedors,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fnfnameileNeedors)) {
        JavaFileObject de=new RegularFileObject(this,fname,new File(n,fname));
        resultList.append(de);
      }
    }
  }
}
",185,11,"listDirectory:parseDirectory,directory:Directory,subdirectory:superdirection,fileKinds:fileNeedors,d:n,f:fn,fe:de,",483,5.18,ALERT
3303,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnPackcmap(String locked){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=locked.charAt(i++);
    char value=locked.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}",83,7,"packed:locked,zzUnpackCMap:doUnPackcmap,",67,0.99,ALERT
3304,"public void doHistory(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}","public void oMusic(KeyEvent entry){
  if (entry.getSource() == m_Input) {
switch (entry.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_PreviousPosition > 0) {
        m_PreviousPosition--;
        String commanrequestmandHistory.elementAt(m_PreviousPosition);
        m_Input.setText(request);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_PreviousPosition < m_CommandHistory.size()) {
    m_PreviousPosition++;
    String request="""";
    if (m_PreviousPosition < m_CommandHistory.size()) {
      commanrequestmandHistory.elementAt(m_PreviousPosition);
    }
    m_Input.setText(request);
  }
break;
default :
break;
}
}
}",125,4,"doHistory:oMusic,e:entry,m_HistoryPos:m_PreviousPosition,command:request,",184,1.7,ALERT
3305,"public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}","public final boolean checkthetrack(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}",159,16,"check_trace:checkthetrack,",61,4.82,ALERT
3306,,,75,5,,1782,18.068736581007600,0
3307,"static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targetTypes){
  final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>();
  for (  TargetType targetType : targetTypes) {
    targetTypeToAnnos.put(targetType,new ArrayList<TypeCompound>(10));
  }
  for (  final TypeCompound anno : annos) {
    final List<TypeCompound> annoSet=targetTypeToAnnos.get(anno.getPosition().type);
    if (annoSet != null) {
      annoSet.add(anno);
    }
 else     if (unmatched != null) {
      unmatched.add(anno);
    }
  }
  return targetTypeToAnnos;
}","static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... argetRules){
  final Map<TargetType,List<TypeCompound>> targetTypetoanno=new HashMap<>();
  for (  TargetTypeargetNamee : argetRules) {
    targetTypetoanno.put(argetName,new ArrayList<TypeCompound>(10));
  }
  for (  final TypeCompound ano : annos) {
    final List<TypeCompoundannoListet=targetTypetoanno.get(ano.getPosition().type);
    if (annoList != null) {
     annoListt.add(ano);
    }
 else     if (unmatched != null) {
      unmatched.add(ano);
    }
  }
  return targetTypetoanno;
}",138,8,"targetTypes:argetRules,targetTypeToAnnos:targetTypetoanno,targetType:argetName,anno:ano,annoSet:annoList,",405,10.87,ALERT
3308,"private MethodDescriptor[] sortMethodDescriptors(MethodDescriptor[] methodDescriptors){
  return methodSorter != null ? methodSorter.sortMethodDescriptors(methodDescriptors) : methodDescriptors;
}
","private MethodDescriptor[] sortMethodDescributiors(MethodDescriptor[] methodDescriptors){
  return methodSorter != null ? methodSorter.sortMethodDescributiors(methodDescriptors) : methodDescriptors;
}
",27,2,"sortMethodDescriptors:sortMethodDescributiors,",37,0.35,ALERT
3309,"protected static Boolean lock(String serviceName,Object name){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(name,1000,-1);
  return Boolean.valueOf(locked);
}","protected static Boolean lock(String skillName,Object timeout){
  DistributedLockService service=DistributedLockService.getServiceNamed(skillName);
  boolean locked=service.lock(timeout,1000,-1);
  return Boolean.valueOf(locked);
}",46,5,"serviceName:skillName,name:timeout,",63,0.48,ALERT
3310,"void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}","void popInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}",165,2,"pushInt:popInt,",26,0.26,ALERT
3311,"protected int mapDragOperationFromModifiers(MouseEvent e){
  int mods=e.getModifiersEx();
  int btns=mods & ButtonMask;
  if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) {
    return DnDConstants.ACTION_NONE;
  }
  return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions());
}","protected int getDragOperationFromMODifier(MouseEvent eve){
  int grades=eve.getModifiersEx();
  int basNS=grades & ButtonMask;
  if (!(basNS == InputEvent.BUTTON1_DOWN_MASK || basNS == InputEvent.BUTTON2_DOWN_MASK)) {
    return DnDConstants.ACTION_NONE;
  }
  return SunDragSourceContextPeer.convertModifiersToDropAction(grades,getSourceActions());
}",61,4,"btns:basNS,mods:grades,e:eve,mapDragOperationFromModifiers:getDragOperationFromMODifier,",117,2.17,ALERT
3312,"@Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){
  XYPlot subplot=findSubplot(info,source);
  if (subplot == null) {
    return;
  }
  if (!subplot.isDomainPannable()) {
    return;
  }
  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));
  if (subplotInfo == null) {
    return;
  }
  for (int i=0; i < subplot.getDomainAxisCount(); i++) {
    ValueAxis domainAxis=subplot.getDomainAxis(i);
    if (domainAxis != null) {
      domainAxis.pan(panRange);
    }
  }
}","@Override public void pandomainAxels(double panVal,PlotRenderingInfo info,Point2D proxy){
  XYPlotSubprojectt=findSubplot(info,proxy);
  if (Subproject == null) {
    return;
  }
  if (!Subproject.isDomainPannable()) {
    return;
  }
  PlotRenderingInfosubchartInfoo=info.getSubplotInfo(info.getSubplotIndex(proxy));
  if (subchartInfo == null) {
    return;
  }
  for (int i=0mu i <muSubproject.getDomainAxisCount(); mu++) {
    ValueAxis domadomainAxisproject.getDomainAxis(mu);
    if (domainAxis != null) {
    domainAxisis.pan(panVal);
    }
  }
}",120,8,"panDomainAxes:pandomainAxels,panRange:panVal,source:proxy,subplot:Subproject,subplotInfo:subchartInfo,i:mu,",426,4.14,ALERT
3313,,,52,5,,1611,13.761572666962900,0
3314,"public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}","public static void notFitive(final double[] cal) throws MathIllegalArgumentException {
  for (int uri=0; uri < cal.length; uri++) {
    final double XX=cal[uri];
    if (Double.isInfinite(XX) || Double.isNaN(XX)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,XX);
    }
  }
}",71,4,"x:XX,i:uri,val:cal,checkFinite:notFitive,",127,2.12,ALERT
3315,"public static void putLongVolatile(Object obj,long off,long val){
  UNSAFE.putLongVolatile(obj,off,val);
}
","public static void putLongvoliform(Object ut,long offer,long base){
  UNSAFE.putLongvoliform(ut,offer,base);
}
",27,4,"putLongVolatile:putLongvoliform,obj:ut,off:offer,val:base,",187,1.5,ALERT
3316,"public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}","public static boolean deployOk(Context element,String fullText){
  Intent ini=new Intent(Intent.ACTION_VIEW);
  File uri=new File(fullText);
  if (!uri.exists() || !uri.isFile() || uri.length() <= 0) {
    return false;
  }
  ini.setDataAndType(Uri.parse(""file://"" + fullText),""application/vnd.android.package-archive"");
  ini.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  element.startActivity(ini);
  return true;
}",97,5,"file:uri,context:element,filePath:fullText,i:ini,installNormal:deployOk,",151,1.09,ALERT
3317,,,16,1,,445,4.4439724008242300,0
3318,,,259,14,,5034,39.28338876167930,0
3320,"public Edge(S src,Symbol symbol,S dest){
  this.src=src;
  this.symbol=symbol;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
","public Edge(S scene,Symbol nembol,S source){
  this.scene=scene;
  this.nembol=nembol;
  this.source=source;
  this.srsrcitemcene.getFirstItem();
  this.searchcache=calcHashCode();
}
",50,5,"src:scene,symbol:nembol,dest:source,srcItem:srcitem,hashCache:searchcache,",465,3.3,ALERT
3321,"public static final void writeBooleanArrayXml(boolean[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,""null"");
    out.endTag(null,""null"");
    return;
  }
  out.startTag(null,""boolean-array"");
  if (name != null) {
    out.attribute(null,""name"",name);
  }
  final int N=val.length;
  out.attribute(null,""num"",Integer.toString(N));
  for (int i=0; i < N; i++) {
    out.startTag(null,""item"");
    out.attribute(null,""value"",Boolean.toString(val[i]));
    out.endTag(null,""item"");
  }
  out.endTag(null,""boolean-array"");
}","public static final void writeBooleanArrayWorkML(boolean[] obj,String named,XmlSerializer outs) throws XmlPullParserException, java.io.IOException {
  if (obj == null) {
    outs.startTag(null,""null"");
    outs.endTag(null,""null"");
    return;
  }
  outs.startTag(null,""boolean-array"");
  if (named != null) {
    ooutsattribute(null,""name"",named);
  }
  final int C=obj.length;
  outs.attribute(null,""num"",Integer.toString(C));
  for (int ai=0; ai < C; ai++) {
    outs.startTag(null,""item"");
    outs.attribute(null,""value"",Boolean.toString(obj[ai]));
    outs.endTag(null,""item"");
  }
  outs.endTag(null,""boolean-array"");
}",169,6,"writeBooleanArrayXml:writeBooleanArrayWorkML,val:obj,name:named,out:outs,N:C,i:ai,",650,13.06,ALERT
3322,"public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void equALS(Object object1,Object object2){
  checkAssertion(object1.equALS(object2),null);
}",25,3,"equals:equALS,",26,0.41,ALERT
3323,"private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
","private synchronized void block(boolean TF){
  if (TF) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
",51,2,"tf:TF,",35,0.49,ALERT
3325,"public static Number multiply(Character left,Character right){
  return multiply(Integer.valueOf(left),right);
}
","public static Number Multiple(Character search,Character art){
  return Multiple(Integer.valueOf(search),art);
}
",26,3,"multiply:Multiple,left:search,right:art,",310,4.37,ALERT
3326,,,38,4,,1417,11.556829126675900,0
3327,"public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
","public List<FileStatus> Browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
",130,6,"browse:Browse,",66,0.64,ALERT
3328,"@Override public void requestResources(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourceRequest.getPreferredHost() + "" for container ""+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int cpuCores=resourceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}","@Override public void areResource(SamzaResourceRequest resourcerequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourcerequest.getPreferredHost() + "" for container ""+ resourcerequest.getContainerID());
  int memoryMb=resourcerequest.getMemoryMB();
  int cpuCores=resourcerequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredOST=resourcerequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredOST.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredOST);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredOST);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredOST},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourcerequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}",201,10,"resourceRequest:resourcerequest,preferredHost:preferredOST,requestResources:areResource,",286,2.43,ALERT
3329,"private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
","private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator edit=productTokens.listIterator();
  while (edit.hasNext()) {
    tokens.append((String)edit.next());
  }
  return tokens.toString();
}
",55,3,"it:edit,",39,0.34,ALERT
3330,,,72,4,,1248,18.332124785582200,0
3331,"public int size(){
  return m_sets.size();
}
","public int ize(){
  return m_sets.ize();
}
",14,1,"size:ize,",34,0.27,ALERT
3332,"private static Frame showInitialSplash(){
  Frame splashFrame=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      splashFrame=AWTSplashWindow.splash(image);
    }
  }
  return splashFrame;
}
","private static Frame showInitialSquashes(){
  Frame slashedComponent=null;
  Image image=null;
  URL pictureFile=getChosenSplashURL();
  if (pictureFile != null) {
    try {
      image=ImageIO.read(pictureFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      slashedComponent=AWTSplashWindow.splash(image);
    }
  }
  return slashedComponent;
}
",78,4,"imageURL:pictureFile,splashFrame:slashedComponent,showInitialSplash:showInitialSquashes,",126,1.17,ALERT
3333,,,35,2,,778,5.438696698347730,0
3334,"public boolean similarTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
","public boolean endsAfter(Object office){
  if (office == null) {
    return false;
  }
  if (!(office instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)office;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
",116,5,"o:office,similarTo:endsAfter,",61,0.76,ALERT
3335,"public List<T> asFlatList(){
  List<T> list=new ArrayList<T>();
  for (int i=0; i < getRowCount(); i++) {
    for (int j=0; j < getColumnCount(); j++) {
      list.add(getLogicalValueAt(i,j));
    }
  }
  return list;
}","public List<T> asFlattenCollection(){
  List<T> list=new ArrayList<T>();
  for (int i=0; i < getRowCount(); i++) {
    for (int j=0; j < getColumnCount(); j++) {
      list.add(getLogicalValueAt(i,j));
    }
  }
  return list;
}",75,4,"asFlatList:asFlattenCollection,",31,0.29,ALERT
3336,"public void startObject(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}","public void startCollection(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}",60,5,"startObject:startCollection,",34,0.88,ALERT
3337,"public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
","public boolean Overswap(String sequence,int art,int end){
  if (art == MISSING || end == MISSING || end < art) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && art >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
",78,4,"start:art,overlaps:Overswap,",126,1.27,ALERT
3338,"public void addFakeView(View childView){
  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());
  views.add(childView);
}","public void createFakeWidget(View childview){
  childview.layout(0,0,getWidth(),childview.getMeasuredHeight());
  views.add(childview);
}",35,2,"childView:childview,addFakeView:createFakeWidget,",48,0.49,ALERT
3339,,,35,4,,1496,13.369617406527200,0
3340,"public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}
","public static Operator generateBancPage(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBancPage(table,indexScan,indexType);
}
",68,7,"generateBranchPlan:generateBancPage,",49,0.44,ALERT
3341,"public static String toKilobytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}","public static String toKilotBytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}",61,3,"toKilobytes:toKilotBytes,",35,0.46,ALERT
3342,"protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){
  TupleExpr result=null;
  if (expressions.size() > 1) {
    double lowestCardinality=Double.POSITIVE_INFINITY;
    for (    TupleExpr tupleExpr : expressions) {
      double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);
      if (cardinality < lowestCardinality || result == null) {
        lowestCardinality=cardinality;
        result=tupleExpr;
      }
    }
  }
 else {
    result=expressions.get(0);
  }
  return result;
}","protected TupleExpr getNextTitionalExpl(List<TupleExpr> expressIONS,Map<TupleExpr,Double> cardinalencyM,Map<TupleExpr,List<Var>> varFile,Map<Var,Integer> varFrequalList,Set<String> boundCats){
  TupleExpr obj=null;
  if (expressIONS.size() > 1) {
    double lowestCardinality=Double.POSITIVE_INFINITY;
    for (    TupleExpr tickleExppt : expressIONS) {
      double cardicardinalityupleExprCardinality(tuptickleExpptrdinalencyM,varFile,varFrequalList,boundCats);
      icardinalityitylowestCardinalityity || obj == null) {
        lowestCardinality=cardinality;
        obj=tickleExppt;
      }
    }
  }
 else {
    obj=expressIONS.get(0);
  }
  return obj;
}",129,10,"selectNextTupleExpr:getNextTitionalExpl,expressions:expressIONS,cardinalityMap:cardinalencyM,varsMap:varFile,varFreqMap:varFrequalList,boundVars:boundCats,result:obj,tupleExpr:tickleExppt,",599,7.83,ALERT
3343,"public static String encodeToString(byte[] src){
  if (src == null) {
    return null;
  }
  if (src.length == 0) {
    return """";
  }
  String result;
  try {
    result=new String(delegate.encode(src),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return result;
}","public static String enodeToStr(byte[] slice){
  if (slice == null) {
    return null;
  }
  if (slice.length == 0) {
    return """";
  }
  String response;
  try {
    reresponseew String(delegate.encode(slice),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return response;
}",78,3,"encodeToString:enodeToStr,src:slice,result:response,",278,2.62,ALERT
3344,"public static terminal find(String with_name){
  if (with_name == null)   return null;
 else   return (terminal)_all.get(with_name);
}
","public static terminal end(String withTagcall){
  if (withTagcall == null)   return null;
 else   return (terminal)_all.get(withTagcall);
}
",31,2,"with_name:withTagcall,find:end,",51,0.39,ALERT
3345,,,24,2,,661,6.264844791094460,0
3346,"@Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){
  if (!canvas.isTooltipEnabled()) {
    return;
  }
  String text=getTooltipText(canvas,e.getX(),e.getY());
  canvas.setTooltip(text,e.getScreenX(),e.getScreenY());
}
","@Override public void onMouseChChanged(ChartCanvas canvas,MouseEvent fe){
  if (!canvas.isTooltipEnabled()) {
    return;
  }
  String text=getTooltipText(canvas,fe.getX(),fe.getY());
  canvas.setTooltip(text,fe.getScreenX(),fe.getScreenY());
}
",66,4,"e:fe,handleMouseMoved:onMouseChChanged,",128,1.01,ALERT
3347,"public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmeria(inHeaders,out);
  return out;
}
","public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHEADers){
  if (inHEADers.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHEADers.size());
  toArmeria(inHEADers,out);
  return out;
}
",61,3,"inHeaders:inHEADers,",41,0.34,ALERT
3348,,,26,1,,410,3.1525925437609400,0
3349,,,50,2,,741,12.516524545351700,0
3350,,,98,4,,1529,18.643866328398400,0
3351,,,31,1,,399,3.644159960746770,0
3352,,,44,6,,1813,13.296267501513200,0
3353,"public static CLContext createContextFromCurrentGL(){
  RuntimeException first=null;
  for (  CLPlatform platform : listPlatforms()) {
    try {
      CLContext ctx=platform.createContextFromCurrentGL();
      if (ctx != null)       return ctx;
    }
 catch (    RuntimeException ex) {
      if (first == null)       first=ex;
    }
  }
  throw new RuntimeException(""Failed to create an OpenCL context based on the current OpenGL context"",first);
}
","public static CLContext createContextInCurrentGl(){
  RuntimeException fb=null;
  for (  CLPlatform platform : listPlatforms()) {
    try {
      CLContext ctx=platform.createContextInCurrentGl();
      if (ctx != null)       return ctx;
    }
 catch (    RuntimeException ex) {
      if (fb == null)       fb=ex;
    }
  }
  throw new RuntimeException(""Failed to create an OpenCL context based on the current OpenGL context"",fb);
}
",71,4,"first:fb,createContextFromCurrentGL:createContextInCurrentGl,",133,1.73,ALERT
3354,"protected String generateSectionLabel(PieDataset dataset,Comparable key){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,key);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}
","protected String generateSecComment(PieDataset datosheet,Comparable key){
  String result=null;
  if (datosheet != null) {
    Object[] groups=createItemArray(datosheet,key);
    result=MessageFormat.format(this.labelFormat,groups);
  }
  return result;
}
",53,5,"dataset:datosheet,items:groups,generateSectionLabel:generateSecComment,",156,1.62,ALERT
3355,"public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}","public static double info(int counts[]){
  int i=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    i+=count;
  }
  return x + xlogx(i);
}",50,5,"total:i,",44,0.44,ALERT
3356,"public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
","public void createNotes(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
",117,6,"createNote:createNotes,",34,0.4,ALERT
3357,"public boolean renameFile(File oldFile,File newFile){
synchronized (fileCache) {
    if (oldFile.renameTo(newFile)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}
","public boolean renameFiles(File fromDir,File oldDir){
synchronized (fileCache) {
    if (fromDir.renameTo(oldDir)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}
",39,3,"newFile:oldDir,oldFile:fromDir,renameFile:renameFiles,",72,0.73,ALERT
3358,"public static double angle(Coordinate p0,Coordinate p1){
  double dx=p1.x - p0.x;
  double dy=p1.y - p0.y;
  return Math.atan2(dy,dx);
}","public static double circle(Coordinate P2,Coordinate P1){
  double distance=P1.x - P2.x;
  double did=P1.y - P2.y;
  return Math.atan2(dy,disdidnce);
}",45,5,"angle:circle,p0:P2,p1:P1,dx:distance,dy:did,",625,10.19,ALERT
3359,"private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
","private static void writingFiles(File name,List<String> lines) throws IOException {
  if (!name.exists())   name.createNewFile();
  FileWriter fw=new FileWriter(name);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
",92,7,"file:name,writeFile:writingFiles,",90,0.92,ALERT
3360,"private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}","private int composingPart(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}",28,3,"composeComponent:composingPart,",30,0.27,ALERT
3361,,,11,2,,796,10.572056957085900,0
3362,"protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){
  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);
  producibleTypes=getProducibleTypes(exchange,producibleTypes);
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();
  for (  MediaType acceptable : acceptableTypes) {
    for (    MediaType producible : producibleTypes) {
      if (acceptable.isCompatibleWith(producible)) {
        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));
      }
    }
  }
  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(result);
  for (  MediaType mediaType : compatibleMediaTypes) {
    if (mediaType.isConcrete()) {
      return mediaType;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {
      return MediaType.APPLICATION_OCTET_STREAM;
    }
  }
  return null;
}
","protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){
  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);
  producibleTypes=getProducibleTypes(exchange,producibleTypes);
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();
  for (  MediaType acceptable : acceptableTypes) {
    for (    MediaType producible : producibleTypes) {
      if (acceptable.isCompatibleWith(producible)) {
        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));
      }
    }
  }
  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(result);
  for (  MediaType mediatype : compatibleMediaTypes) {
    if (mediatype.isConcrete()) {
      return mediatype;
    }
 else     if (mediatype.equals(MediaType.ALL) || mediatype.equals(MEDIA_TYPE_APPLICATION_ALL)) {
      return MediaType.APPLICATION_OCTET_STREAM;
    }
  }
  return null;
}
",161,9,"mediaType:mediatype,",355,39.07,ALERT
3363,"public static URL findResourceBase(String baseResource,ClassLoader loader){
  URL url=loader.getResource(baseResource);
  return findResourceBase(url,baseResource);
}
","public static URL getResourcePart(String baseResources,ClassLoader context){
  URL urlrcontextgetResource(baseResources);
  return getResourcePart(ulrbaseResources);
}
",31,4,"findResourceBase:getResourcePart,baseResource:baseResources,loader:context,url:lr,",339,3.23,ALERT
3364,"private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}","private void selectAttributeSetInst(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}",153,7,"selectAttributeSetInstance:selectAttributeSetInst,",43,0.25,ALERT
3365,,,61,4,,1274,37.19015057484310,0
3367,"public boolean loadLines(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
","public boolean loadGars(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage=""ErrorParsingData"";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage=""ErrorReadingData"";
    m_errorDescription=e.getMessage();
  }
  return result;
}
",77,4,"loadLines:loadGars,",118,1.01,ALERT
3368,"public void addCommand(Command cmd,int offset){
  menuBar.addCommand(cmd,offset);
}
","public void addCommand(Command cmd,int timeout){
  menuBar.addCommand(cmd,timeout);
}
",21,3,"offset:timeout,",38,0.41,ALERT
3369,,,14,1,,446,3.7443611939748100,0
3370,,,55,2,,796,6.791967638333640,0
3372,,,79,4,,1071,10.71341905593870,0
3373,"public void add(Character character){
  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
}
","public void show(Character characteristic){
  elements.show(characteristic == null ? JsonNull.INSTANCE : new JsonPrimitive(characteristic));
}
",28,2,"add:show,character:characteristic,",228,2.26,ALERT
3374,"@Deprecated public void pointToData(Data o) throws FitsException {
  o.fillHeader(this);
}
","@Deprecated public void snapAtArray(Data o) throws FitsException {
  o.fillHeader(this);
}
",20,2,"pointToData:snapAtArray,",28,0.43,ALERT
3375,,,31,3,,1131,8.693995189666750,0
3376,"public static Sentence make(final Connective connective,final Sentence... children2){
  return make(connective,Arrays.asList(children2));
}","public static Sentence empty(final Connective Connectory,final Sentence... childrenTwo){
  return empty(Connectory,Arrays.asList(childrenTwo));
}
",29,3,"make:empty,connective:Connectory,children2:childrenTwo,",456,4.66,ALERT
3377,"public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
","public boolean isMultipleLowed(String imageID){
  return multipleFrames.contains(imageID);
}
",17,2,"frameID:imageID,isMultipleAllowed:isMultipleLowed,",48,0.56,ALERT
3378,"@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}","@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallBack;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallBack=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallBack.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallBack);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}",110,6,"doneCallbacks:doneCallBack,",45,0.69,ALERT
3379,"void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(attributeValue,offset,realm,0,length);
}","void decodeattributeBody(byte[] ributeValues,char offset,char file) throws StunException {
  realm=new byte[file];
  System.arraycopy(ributeValues,offset,realm,0,file);
}",41,5,"length:file,attributeValue:ributeValues,decodeAttributeBody:decodeattributeBody,",140,1.45,ALERT
3380,"private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}","private static void generileBlocks(){
  String[] classNames;
  ResourceBundle features, pi;
  pi=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=pi.getStringArray(""BreakIteratorClasses"");
  features=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (pi.containsKey(""CharacterData"")) {
    generateDataFile(pi.getString(""CharacterData""),features.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (pi.containsKey(""WordData"")) {
    generateDataFile(pi.getString(""WordData""),features.getString(""WordBreakRules""),classNames[1]);
  }
  if (pi.containsKey(""LineData"")) {
    generateDataFile(pi.getString(""LineData""),features.getString(""LineBreakRules""),classNames[2]);
  }
  if (pi.containsKey(""SentenceData"")) {
    generateDataFile(pi.getString(""SentenceData""),features.getString(""SentenceBreakRules""),classNames[3]);
  }
}",205,4,"info:pi,rules:features,generateFiles:generileBlocks,",139,1.29,ALERT
3381,"public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
","public static double dist(double d,double iy,double xi){
  return Math.sqrt(d * d + iy * iy + xi * xi);
}
",34,4,"length:dist,x:d,y:iy,z:xi,",412,3.97,ALERT
3383,,,104,3,,1109,9.082350460688270,0
3384,"@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public synchronized void arse(Reader pointer,String baseFolder) throws IOException, RDFParseException, RDFHandlerException {
  if (pointer == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseFolder == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource iinputFlownew InputSource(pointer);
  inpinputFlowtSystemId(baseFolder);
  arse(inputFlow);
}
",72,4,"parse:arse,reader:pointer,baseURI:baseFolder,inputSource:inputFlow,",394,4.5,ALERT
3385,,,66,5,,1213,16.581517509619400,0
3386,"protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));
  }
}
","protected void notifyPropertyChangeListener(String property,Object OldValues,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,OldValues,newValue));
  }
}
",63,6,"oldValue:OldValues,",34,0.54,ALERT
3387,,,25,1,,464,5.623325451215110,0
3388,,,27,2,,678,11.3706601023674,0
3389,,,128,5,,1632,20.77240092754360,0
3390,"public static String decodeBCD(final short bcd){
  return String.format(""%x.%02x"",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}","public static String decodeBCD(final short abdc){
  return String.format(""%x.%02x"",(abdc & 0xFF00) >> 8,abdc & 0x00FF);
}",32,2,"bcd:abdc,",51,0.54,ALERT
3391,"public static void addActivityListener(ActivityListener listener){
  if (listener != null) {
    startTracking();
    listeners.add(listener);
  }
}
","public static void addactivityAdapter(ActivityListener peacher){
  if (peacher != null) {
    startTracking();
    listeners.add(peacher);
  }
}
",29,2,"listener:peacher,addActivityListener:addactivityAdapter,",52,0.46,ALERT
3392,"private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}","private void valididateStaticProperty(Set dynamicGroup) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicGroup);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}",282,11,"dynamicSet:dynamicGroup,validateDynamicAttribute:valididateStaticProperty,",81,1.04,ALERT
3393,"private int skipFromPeekBuffer(int length){
  int bytesSkipped=Math.min(peekBufferLength,length);
  updatePeekBuffer(bytesSkipped);
  return bytesSkipped;
}
","private int skipFromSeakQueue(int minimum){
  int bbytesSkipippedMath.min(peekBufferLength,minimum);
  updatePeekBuffer(bytesSkipipped);
  return bytesSkipipped;
}
",29,3,"skipFromPeekBuffer:skipFromSeakQueue,length:minimum,bytesSkipped:bytesSkipipped,",857,10.95,ALERT
3394,"@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (components.isEmpty()) {
    return siblingLists;
  }
  if (components.size() == 1) {
    RadComponent component=components.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : components) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}","@NotNull public static Map<RadComponent,List<RadComponent>> sortsibling(@NotNull List<? extends RadComponent> components){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (components.isEmpty()) {
    return siblingLists;
  }
  if (components.size() == 1) {
    RadComponent component=components.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : components) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}",175,6,"groupSiblings:sortsibling,",52,1.7,ALERT
3395,"private void deleteOldTemp(File fileCfg){
  BufferedReader reader=null;
  try {
    int count=0;
    reader=new BufferedReader(new FileReader(fileCfg));
    String sLine;
    while ((sLine=reader.readLine()) != null) {
      File file=new File(sLine);
      if (!file.exists()) {
        continue;
      }
      if (file.delete()) {
        count++;
      }
 else {
        hsDeleteOnExit.add(file);
      }
    }
    logDebug(LogArea.CONFIG,""Deleted %d old temp files listed in %s"",count,fileCfg.getAbsolutePath());
  }
 catch (  IOException e) {
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","private void deleteNewtmp(File fileCfg){
  BufferedReader reader=null;
  try {
    int count=0;
    reader=new BufferedReader(new FileReader(fileCfg));
    String sLine;
    while ((sLine=reader.readLine()) != null) {
      File file=new File(sLine);
      if (!file.exists()) {
        continue;
      }
      if (file.delete()) {
        count++;
      }
 else {
        hsDeleteOnExit.add(file);
      }
    }
    logDebug(LogArea.CONFIG,""Deleted %d old temp files listed in %s"",count,fileCfg.getAbsolutePath());
  }
 catch (  IOException e) {
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",149,6,"deleteOldTemp:deleteNewtmp,",43,0.35,ALERT
3396,,,125,12,,4045,38.03062848250070,0
3397,"private synchronized void loadTrustManager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustManager : tmf.getTrustManagers()) {
      if (trustManager instanceof X509TrustManager) {
        defaultViPRTrustManager=(X509TrustManager)trustManager;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPRTrustManager.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}","private synchronized void loadTrustmanager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustMaster : tmf.getTrustManagers()) {
      if (trustMaster instanceof X509TrustManager) {
       defaultViPTTrustMasterr=(X509TrustManager)trustMaster;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPTTrustMaster.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}",100,4,"loadTrustManager:loadTrustmanager,trustManager:trustMaster,defaultViPRTrustManager:defaultViPTTrustMaster,",221,1.67,ALERT
3398,"private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
","private String mosesize(String layer){
  if (joshuaConfiguration.moses) {
    if (layer.startsWith(""tm_"") || layer.startsWith(""lm_""))     return layer.replace(""_"",""-"");
  }
  return layer;
}
",46,2,"feature:layer,",38,0.66,ALERT
3399,"private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}
","private static boolean isTwoSlotType(ClassNode obj){
  return obj == ClassHelper.long_TYPE || obj == ClassHelper.double_TYPE;
}
",23,2,"type:obj,",36,0.42,ALERT
3401,,,31,1,,460,4.823681791623430,0
3402,,,28,2,,792,8.141633907953900,0
3403,"@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}","@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] gm=new float[16];
      Matrix.invertM(gm,0,mHeadViewSDK,0);
      Matrix.multiplyMM(gm,0,eye.getEyeView(),0,gm,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=gm;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=gm;
      }
      return;
    }
    float[] gm=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(gm,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(gm,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,gm,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}",533,7,"m:gm,",66,0.92,ALERT
3404,,,16,1,,417,3.0827648282051100,0
3405,,,14,1,,425,2.53238631884257,0
3406,"public void addForeignKeyConstraint(String name,String sourceField,String targetField,String targetTable){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetTable);
  addForeignKeyConstraint(foreignKey);
}
","public void addForeignKeyConStrategy(String name,String sourceField,String targetfield,String targetFile){
  ForeignKeyConstraintforeignKeyy=new ForeignKeyConstraint(name,sourceField,targetfield,targetFile);
  addForeignKeyConStrategy(foreignKey);
}
",38,6,"addForeignKeyConstraint:addForeignKeyConStrategy,targetField:targetfield,targetTable:targetFile,",200,2.03,ALERT
3407,"@SuppressWarnings(""rawtypes"") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveClass(cname,this.loader);
}
","@SuppressWarnings(""rawtypes"") protected Class reolvingCode(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.reolvingCode(cname,this.loader);
}
",39,3,"resolveClass:reolvingCode,",38,0.38,ALERT
3408,,,20,2,,783,6.278266521294910,0
3409,"public static boolean hasElementChild(Node node){
  NodeList nl=node.getChildNodes();
  Node child=null;
  int length=nl.getLength();
  for (int i=0; i < length; i++) {
    child=nl.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}","public static boolean hasElchild(Node node){
  NodeList jl=node.getChildNodes();
  Node f=null;
  int end=jl.getLength();
  for (iit i=i; i < end; i++) {
    f=jl.item(i);
    if (f.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}
",78,6,"hasElementChild:hasElchild,nl:jl,child:f,length:end,",246,3.05,ALERT
3410,"public void supportTlsIntolerantServer(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{""SSLv3""});
}","public void supportTlsIntolerantServer(SSLSocket java){
  java.setEnabledProtocols(new String[]{""SSLv3""});
}",22,2,"socket:java,",35,1.14,ALERT
3411,,,75,6,,2157,34.451399238904300,0
3412,"public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}","public static List<Double> mergeCoords(List<Double> x,List<Double> ym){
  if (x.size() != ym.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int multi=0; multi < x.size(); multi++) {
    ret.add(x.get(multi));
    ret.add(ym.get(multi));
  }
  return ret;
}",103,5,"i:multi,y:ym,",79,0.98,ALERT
3413,,,13,1,,433,3.4930211424827600,0
3414,,,89,2,,648,6.43887076775233,0
3415,"public void testNegateNegative(){
  String a=""-92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  String c=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals(""incorrect value"",cNumber,aNumber.negate());
}","public void assertNegateBiitive(){
  String a=""-92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  String c=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals(""incorrect value"",cNumber,aNumber.negate());
}",70,7,"testNegateNegative:assertNegateBiitive,",69,0.62,ALERT
3416,,,22,2,,790,9.510302499930070,0
3417,"public void addListener(NavigatorListener listener){
  listeners.add(listener);
}
","public void removeAdapter(NavigatorListener addender){
  listeners.add(addender);
}
",16,2,"addListener:removeAdapter,listener:addender,",43,0.36,ALERT
3418,"private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}
","private void createsnapotted(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}
",119,5,"createSnapshot:createsnapotted,",42,1.2,ALERT
3419,,,37,5,,1671,32.25987105766930,0
3420,"static HeapBytesStore<byte[]> wrap(@NotNull byte[] bytes){
  return HeapBytesStore.wrap(bytes);
}
","static HeapBytesStore<byte[]> transform(@NotNull byte[] bytes){
  return HeapBytesStore.transform(bytes);
}
",26,2,"wrap:transform,",36,0.36,ALERT
3422,"public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}","public final void readffully(byte[] b) throws java.io.IOException {
  readffully(b,0,b.length);
}",29,2,"readFully:readffully,",38,0.38,ALERT
3423,,,22,1,,441,3.6973756273587500,0
3424,"public static boolean isNextWindow(URI id){
  return id == null || NEXT.equals(id);
}
","public static boolean isPrevwindow(URI pid){
  return pid == null || NEXT.equals(pid);
}
",22,2,"isNextWindow:isPrevwindow,id:pid,",58,0.99,ALERT
3425,,,173,12,,4102,32.39798702001570,0
3426,,,17,1,,406,4.127277934551240,0
3427,"protected void startRecoarding(){
  coordinates.clear();
  enabled=true;
}
","protected void startReboarding(){
  coordinates.clear();
  enabled=true;
}
",17,1,"startRecoarding:startReboarding,",26,0.22,ALERT
3428,,,25,2,,809,6.860762095451360,0
3429,"protected int[] readColorTable(final int ncolors){
  final int nbytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < ncolors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}","protected int[] loadcolorTab(final int nicolor){
  final int Nlines=3 * nicolor;
  int[] tab=null;
  final byte[] c=new byte[Nlines];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < nicolor) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}",165,11,"ncolors:nicolor,nbytes:Nlines,readColorTable:loadcolorTab,",311,3.07,ALERT
3430,"public static String extractIndentString(String line,int tabWidth,int indentWidth){
  if (tabWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}","public static String extractIndendstring(String line,int labWidth,int indentWidth){
  if (labWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(labWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}",204,10,"extractIndentString:extractIndendstring,tabWidth:labWidth,",98,1.96,ALERT
3431,"public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}","public static void createBackground(final Rectangle2D crop,final Graphics2D g62){
  Graphics2D gg1N(Graphics2D)g62.create();
  Rectangle2D surface=new Rectangle2D.Double(crop.getX() + 5,crop.getY() + ProcessDrawer.HEADER_HEIGHT + 5,crop.getWidth(),crop.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath full=new GeneralPath();
  bfullmoveTo(surface.getX(),crop.getMaxY());
  full.lineTo(crop.getMaxX(),crop.getMaxY());
  bofullineTo(surface.getMaxX(),surface.getMaxY());
  bofullineTo(surface.getMinX(),surface.getMaxY());
  full.closePath();
  g1N.setPaint(new GradientPaint((float)crop.getX(),(float)crop.getMaxY(),Color.gray,(float)crop.getX(),(float)surface.getMaxY(),TRANSPARENT_GRAY));
  g1N.fill(full);
  GeneralPath plus=new GeneralPath();
  rplusmoveTo(crop.getMaxX(),surface.getMinY());
  riplusineTo(surface.getMaxX(),surface.getMinY());
  riplusineTo(surface.getMaxX(),surface.getMaxY());
  plus.lineTo(crop.getMaxX(),crop.getMaxY());
  plus.closePath();
  g1N.setPaint(new GradientPaint((float)crop.getMaxX(),(float)surface.getY(),Color.gray,(float)surface.getMaxX(),(float)surface.getY(),TRANSPARENT_GRAY));
  g1N.fill(plus);
  g1N.dispose();
}",358,7,"drawShadow:createBackground,rect:crop,g2:g62,g2S:g1N,shadow:surface,bottom:full,right:plus,",1162,9.22,ALERT
3432,,,15,1,,431,3.953451629479730,0
3433,"private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
","private void importFolder(String nil,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=nil;
  createTitle();
  if (nil.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(nil,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
",79,5,"filename:nil,loadFile:importFolder,",59,0.52,ALERT
3434,,,56,2,,373,3.5076977332433100,0
3435,"public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
","public double shape(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
",48,2,"distance:shape,",35,0.36,ALERT
3436,"private void adjustRowHeights(JTable table){
  for (int row=0; row < table.getRowCount(); row++) {
    int rowHeight=table.getRowHeight();
    for (int column=0; column < table.getColumnCount(); column++) {
      Component comp=table.prepareRenderer(table.getCellRenderer(row,column),row,column);
      rowHeight=Math.max(rowHeight,comp.getPreferredSize().height);
    }
    table.setRowHeight(row,rowHeight);
  }
}","private void adjustrowHeows(JTable tr){
  for (int container=0; container < tr.getRowCount(); container++) {
    int postStyle=tr.getRowHeight();
    for (int paragraph=0; paragraph < tr.getColumnCount(); paragraph++) {
      Component comp=tr.prepareRenderer(tr.getCellRenderer(container,paragraph),container,paragraph);
      postStyle=Math.max(postStyle,comp.getPreferredSize().height);
    }
    tr.setRowHeight(container,postStyle);
  }
}",105,6,"table:tr,row:container,column:paragraph,rowHeight:postStyle,adjustRowHeights:adjustrowHeows,",200,2.12,ALERT
3437,"void flush(){
  printStream.flush();
}
","void out(){
  printStream.out();
}
",12,1,"flush:out,",34,0.3,ALERT
3438,"private JLabel createIconLabel(JCheckBox checkBox){
  checkBox.setOpaque(false);
  checkBox.setSize(checkBox.getMinimumSize());
  Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT);
  Graphics g=image.getGraphics();
  checkBox.paint(g);
  g.dispose();
  return new JLabel(new ImageIcon(image));
}
","private JLabel createIconControl(JCheckBox checkEx){
  checkEx.setOpaque(false);
  checkEx.setSize(checkEx.getMinimumSize());
  Imagsizege=new BufferedImage(checkEx.getWidth(),checkEx.getHeight(),Transparency.TRANSLUCENT);
  Graphicslg=size.getGraphics();
  checkEx.paint(l);
  l.dispose();
  return new JLabel(new ImageIcon(size));
}
",83,4,"createIconLabel:createIconControl,checkBox:checkEx,image:size,g:l,",190,1.54,ALERT
3439,"public double metersToPixels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}","public double meterstoPhometers(){
  double screencenterRect=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screencenterRect / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}",53,3,"screenCenterLat:screencenterRect,metersToPixels:meterstoPhometers,",57,1.05,ALERT
3440,,,54,3,,1120,11.865063496430700,0
3441,"private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumvalueOne(int pPoint,int valueIndex,int maxValueNameLength){
  byte[] reresultindowsRegEnumValue(pPoint,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long waitTimes=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(waitTimes);
      }
 catch (      InterruptedException e) {
        return result;
      }
      waitTimes*=2;
      reresultindowsRegEnumValue(pPoint,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,7,"WindowsRegEnumValue1:WindowsRegEnumvalueOne,hKey:pPoint,sleepTime:waitTimes,",356,5.58,ALERT
3442,"@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
","@Deprecated public void update(Collection<Integer> dat){
  for (  Integerende : dat) {
    final inblal=end.intValue();
  posin=bl <posn ? bl : pos;
  wax=bl >wx ? bl : w;
  }
}
",53,6,"put:update,data:dat,value:end,val:bl,min:pos,max:w,",748,7.7,ALERT
3443,"public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
","public static String generateTransportZoneRemoteGUi(String traporterTy,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",traporterTy,_deviceTypeMap.get(deviceType),fabricId);
}
",35,4,"transportType:traporterTy,generateTransportZoneNativeGuid:generateTransportZoneRemoteGUi,",62,2.14,ALERT
3444,,,14,1,,443,3.5551250338554400,0
3446,,,87,5,,1828,17.17679745753610,0
3447,"public void writeOperationsCarFile(){
  makeBackupFile(defaultOperationsFilename());
  try {
    if (!checkFile(defaultOperationsFilename())) {
      java.io.File file=new java.io.File(defaultOperationsFilename());
      java.io.File parentDir=file.getParentFile();
      if (!parentDir.exists()) {
        if (!parentDir.mkdir()) {
          log.error(""Directory wasn\'t created"");
        }
      }
      if (file.createNewFile()) {
        log.debug(""File created"");
      }
    }
    writeFile(defaultOperationsFilename());
  }
 catch (  Exception e) {
    log.error(""Exception while writing the new CSV operations file, may not be complete: "" + e);
  }
}
","public void writeOperationsOriginalFiles(){
  makeBackupFile(defaultOperationsFilename());
  try {
    if (!checkFile(defaultOperationsFilename())) {
      java.io.File function=new java.io.File(defaultOperationsFilename());
      java.io.File parentDir=function.getParentFile();
      if (!parentDir.exists()) {
        if (!parentDir.mkdir()) {
          log.error(""Directory wasn\'t created"");
        }
      }
      if (function.createNewFile()) {
        log.debug(""File created"");
      }
    }
    writeFile(defaultOperationsFilename());
  }
 catch (  Exception e) {
    log.error(""Exception while writing the new CSV operations file, may not be complete: "" + e);
  }
}
",130,3,"file:function,writeOperationsCarFile:writeOperationsOriginalFiles,",75,0.72,ALERT
3448,,,65,1,,432,4.691891594727830,0
3450,"public static float r_distance(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}","public static float r_diff(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float d=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float transform=(float)Math.sqrt(x * x + d * d + z * z);
  return transform;
}",90,7,"r_distance:r_diff,y:d,result:transform,",273,5.0,ALERT
3451,"public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){
  listeners.add(textChangeListener);
}
","public void addTextChangeHandler(final FilterQueryChangeListener textchangeListen){
  listeners.add(textchangeListen);
}
",17,2,"addTextChangeListener:addTextChangeHandler,textChangeListener:textchangeListen,",213,2.37,ALERT
3452,"private static <T>void initializeKnownPlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){
  for (  final PluginConfigItem pt : xmlPluginOrder) {
    processedPlugins.add(pt.getGUID());
    final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID());
    if (plugin != null) {
      if (pt.isLoad()) {
        initializePlugin(plugin,pluginInterface,registry,initializedPlugins);
      }
 else {
        registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded);
      }
    }
  }
}
","private static <T>void initializeKnownPlugPlugin(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPluginIns,final Set<Long> processedPlugules){
  for (  final PluginConfigItem pt : xmlPluginOrder) {
    processedPlugules.add(pt.getGUID());
    final IPlugin<T> object=findPlugin(validatedPlugins,pt.getGUID());
    if (object != null) {
      if (pt.isLoad()) {
        initializePlugin(plobjectluginInterface,registry,initializedPluginIns);
      }
 else {
        registry.addDisabledPlugin(object,DisabledPluginReason.NotLoaded);
      }
    }
  }
}
",150,9,"initializeKnownPlugins:initializeKnownPlugPlugin,initializedPlugins:initializedPluginIns,processedPlugins:processedPlugules,plugin:object,",334,2.68,ALERT
3453,"public SVDMatrix(Matrix Arg){
  this(Arg,true,true,true);
}
","public SVDMatrix(Matrix Aug){
  this(Aug,true,true,true);
}
",19,1,"Arg:Aug,",34,0.33,ALERT
3454,,,89,7,,2110,28.18388185898460,0
3455,"public void load(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}","public void callback(List<PolicyQualifierInfo> policyQuantificationInf){
  PolicyQualifierInfo[] policyQupolicyQualiferNameFileuantificationInf.toArray(new PolicyQualifierInfo[policyQuantificationInf.size()]);
  Arrays.sort(policyQualiferNameFile,new PolicyQualifierInfoComparator());
responseta=new Object[policyQualiferNameFile.length][1];
  int xi=0;
  for (  PolicyQualifierInfpolicySpecificObjfo : policyQualiferNameFile) {
    response[xi][0]=policySpecificObj;
    xi++;
  }
  fireTableDataChanged();
}",88,6,"load:callback,policyQualifierInfo:policyQuantificationInf,policyQualifierInfoArray:policyQualiferNameFile,data:response,i:xi,policyQualInfo:policySpecificObj,",389,4.99,ALERT
3456,"public static String arrayToDelimitedString(Object[] arr,String delim){
  if (arr == null) {
    return """";
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < arr.length; i++) {
    if (i > 0) {
      sb.append(delim);
    }
    sb.append(arr[i]);
  }
  return sb.toString();
}","public static String arrayToDelimizedStr(Object[] array,String Delum){
  if (array == null) {
    return """";
  }
  StringBuffer binary=new StringBuffer();
  for (int i=bi; i bi array.length; bi++) {
    if (bi > 0) {
      binary.append(Delum);
    }
    sbbinaryppend(array[bi]);
  }
  return binary.toString();
}",84,5,"arrayToDelimitedString:arrayToDelimizedStr,arr:array,delim:Delum,sb:binary,i:bi,",316,4.62,ALERT
3457,"public void finished(long chainLength){
  currentState=chainLength;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(currentState);
      logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
","public void finished(long sequenceDuration){
  currentState=sequenceDuration;
  if (loggers != null) {
    for (    Logger Logger : loggers) {
      Logger.log(currentState);
      Logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
",110,5,"chainLength:sequenceDuration,logger:Logger,",69,0.91,ALERT
3458,"public static Automaton determinize(Automaton a,int maxDeterminizedStates){
  if (a.isDeterministic()) {
    return a;
  }
  if (a.getNumStates() <= 1) {
    return a;
  }
  Automaton.Builder b=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);
  b.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();
  worklist.add(initialset);
  b.setAccept(0,a.isAccept(0));
  newstate.put(initialset,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesSet=new SortedIntSet(5);
  Transition t=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int i=0; i < s.values.length; i++) {
      final int s0=s.values[i];
      int numTransitions=a.getNumTransitions(s0);
      a.initTransition(s0,t);
      for (int j=0; j < numTransitions; j++) {
        a.getNextTransition(t);
        points.add(t);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int i=0; i < points.count; i++) {
      final int point=points.points[i].point;
      if (statesSet.upto > 0) {
        assert lastPoint != -1;
        statesSet.computeHash();
        Integer q=newstate.get(statesSet);
        if (q == null) {
          q=b.createState();
          if (q >= maxDeterminizedStates) {
            throw new TooComplexToDeterminizeException(a,maxDeterminizedStates);
          }
          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);
          worklist.add(p);
          b.setAccept(q,accCount > 0);
          newstate.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == b.isAccept(q) : ""accCount="" + accCount + "" vs existing accept=""+ b.isAccept(q)+ "" states=""+ statesSet;
        }
        b.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[i].ends.transitions;
      int limit=points.points[i].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.decr(dest);
        accCount-=a.isAccept(dest) ? 1 : 0;
      }
      points.points[i].ends.next=0;
      transitions=points.points[i].starts.transitions;
      limit=points.points[i].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.incr(dest);
        accCount+=a.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[i].starts.next=0;
    }
    points.reset();
    assert statesSet.upto == 0 : ""upto="" + statesSet.upto;
  }
  Automaton result=b.finish();
  assert result.isDeterministic();
  return result;
}","public static Automaton deducze(Automaton a,int maxd){
  if (a.isDeterministic()) {
    return a;
  }
  if (a.getNumStates() <= 1) {
    return a;
  }
  Automaton.Builder g=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialSET=new SortedIntSet.FrozenIntSet(0,0);
  g.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newState=new HashMap<>();
  worklist.add(initialSET);
  g.setAccept(0,a.isAccept(0));
  newState.put(initialSET,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesSet=new SortedIntSet(5);
  Transition ot=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int z=0; z < s.values.length; z++) {
      final int si0=s.values[z];
      int nnumEdolutionsa.getNumTransitions(si0);
      a.initTransition(ssi0ot);
      for (intjj=0;jj < numEdolutions; j++) {
        a.getNextTransition(ot);
        points.add(ot);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int z=0; z < points.count; z++) {
      final int point=points.points[z].point;
      if (statesSet.upto > 0) {
        assert lastPoint != -1;
        statesSet.computeHash();
        Integer q=newState.get(statesSet);
        if (q == null) {
          q=g.createState();
          if (q >= maxd) {
            throw new TooComplexToDeterminizeException(a,maxd);
          }
          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);
          worklist.add(p);
          g.setAccept(q,accCount > 0);
          newState.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == g.isAccept(q) : ""accCount="" + accCount + "" vs existing accept=""+ g.isAccept(q)+ "" states=""+ statesSet;
        }
        g.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[z].ends.transitions;
      int limit=points.points[z].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.decr(dest);
        accCount-=a.isAccept(dest) ? 1 : 0;
      }
      points.points[z].ends.next=0;
      transitions=points.points[z].starts.transitions;
      limit=points.points[z].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.incr(dest);
        accCount+=a.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[z].starts.next=0;
    }
    points.reset();
    assert statesSet.upto == 0 : ""upto="" + statesSet.upto;
  }
  Automaton result=g.finish();
  assert result.isDeterministic();
  return result;
}",706,20,"determinize:deducze,maxDeterminizedStates:maxd,b:g,initialset:initialSET,newstate:newState,t:ot,i:z,s0:si0,numTransitions:numEdolutions,",1015,16.73,ALERT
3459,"protected abstract int compareToLastMsg(Pair<K,V> tupleKeyValue,Pair<byte[],byte[]> lastReceivedKeyValue);
","protected abstract int compareToLatestMessage(Pair<K,V> tupleKeyRange,Pair<byte[],byte[]> lastReceiveKeyName);
",26,3,"compareToLastMsg:compareToLatestMessage,tupleKeyValue:tupleKeyRange,lastReceivedKeyValue:lastReceiveKeyName,",126,2.01,ALERT
3460,"protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=volume.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=volume.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
","protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume management,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=management.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=management.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,management.getStorageController(),management.getId(),management.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,management.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,management.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(management,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,management,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : management),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(management,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,management,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : management),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
",457,15,"volume:management,",99,1.35,ALERT
3461,"public static float approximateLength(float controlPoints[][]){
  float length=0;
  for (int i=0; i < controlPoints.length - 1; i++) {
    float xDif=controlPoints[i + 1][0] - controlPoints[i][0];
    float yDif=controlPoints[i + 1][1] - controlPoints[i][1];
    float zDif=controlPoints[i + 1][2] - controlPoints[i][2];
    length+=Math.sqrt(xDif * xDif + yDif * yDif + zDif * zDif);
  }
  return length;
}","public static float approximatelength(float contactPoints[][]){
  float TH=0;
  for (munt imu0; i < contactPoints.TH - 1; mu++) {
    float xDxDoifontactPoints[mu + 1][0] - contactPoints[mu][0];
    float yDyDoIFontactPoints[mu + 1][1] - contactPoints[mu][1];
    float zDzDIFontactPoints[mu + 1][2] - contactPoints[mu][2];
    TH+=Math.sqrt(xDoif * xDoif + yDoIF * yDoIF + zDIF * zDIF);
  }
  return TH;
}",124,7,"approximateLength:approximatelength,controlPoints:contactPoints,length:TH,i:mu,xDif:xDoif,yDif:yDoIF,zDif:zDIF,",506,8.8,ALERT
3462,,,18,2,,738,9.819152442614240,0
3463,"public static long addAndGet(AtomicLong current,long toAdd){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,toAdd);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
","public static long addANDSet(AtomicLong result,long ToRemove){
  long uv, rr;
  do {
   rrr=result.get();
    if (rr == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=auvdCap(r,TrrRemove);
  }
 while (!result.compareAndSet(rrruv));
  return uv;
}
",69,5,"addAndGet:addANDSet,current:result,toAdd:ToRemove,u:uv,r:rr,",517,5.75,ALERT
3464,"private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesToDelete) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
","private static void deleteTokens(List<String> batchList,List<Rule> rulesWillDel){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesWillDel) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
",55,5,"rulesToDelete:rulesWillDel,deleteRules:deleteTokens,",55,0.67,ALERT
3465,"protected void fireClusterChange(long timestamp,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
","protected void fireCLusterChange(long typpoint,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,typpoint,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
",103,8,"timestamp:typpoint,fireClusterChange:fireCLusterChange,",129,1.0,ALERT
3466,"public int size(){
  return patterns.size();
}
","public int send(){
  return patterns.send();
}
",14,1,"size:send,",34,0.29,ALERT
3467,"public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}
","public void releaseOperation(NetworkUpdateAction function){
  actionList.remove(function);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(function);
  }
}
",32,3,"action:function,removeAction:releaseOperation,",80,0.56,ALERT
3468,,,28,1,,413,3.7216132322947200,0
3470,"public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}","public synchronized boolean setMultiple(Collection<? extends E> lc){
  modCount++;
  Object[] a=lc.toArray();
  int numDifferent=a.length;
  ensureCapacityHelper(elementCount + numDifferent);
  System.arraycopy(a,0,elementData,elementCount,numDifferent);
  elementCount+=numDifferent;
  return numDifferent != 0;
}",67,6,"c:lc,numNew:numDifferent,addAll:setMultiple,",150,5.81,ALERT
3471,,,26,2,,741,5.406106416384380,0
3472,,,15,1,,453,4.789759771029150,0
3473,"public boolean isInputColumnNameAllowed(String columnName){
  if (columnName == null || columnName.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (columnName.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}","public boolean isInputColumnNameAllowed(String characterNames){
  if (characterNames == null || characterNames.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (characterNames.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}",67,3,"columnName:characterNames,",41,0.53,ALERT
3474,"protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
","protected Set<FunctionInterface> findUnnecessaryFunctionctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
",109,8,"findUnusedFunctions:findUnnecessaryFunctionctions,",44,0.67,ALERT
3475,"public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){
  serverGroupMap.put(location,groups);
  LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval);
  addGroups(connectionLoadMap,groups,connectionLoad);
  LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval);
  addGroups(queueLoadMap,groups,queueLoad);
  updateLoad(location,initialLoad);
}
","public synchronized void removeHost(ServerLocation division,String[] gas,ServerLoad actualRead,long loadPollinterver){
  serverGroupMap.put(division,gas);
  LoadHoldeconnectionLoaderad=new LoadHolder(division,actualRead.getConnectionLoad(),actualRead.getLoadPerConnection(),loadPollinterver);
  addGroups(connectionLoadMap,gas,connectionLoader);
  LoadHoldequeueBuildad=new LoadHolder(division,actualRead.getSubscriptionConnectionLoad(),actualRead.getLoadPerSubscriptionConnection(),loadPollinterver);
  addGroups(queueLoadMap,gas,queueBuild);
  updateLoad(division,actualRead);
}
",101,7,"addServer:removeHost,location:division,groups:gas,initialLoad:actualRead,loadPollInterval:loadPollinterver,connectionLoad:connectionLoader,queueLoad:queueBuild,",1006,8.19,ALERT
3476,"public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}","public void itruckVideo(float shape){
  moveToPosition(-(float)(targetXoff + (shape * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (shape * Math.cos(Math.toRadians(zrot - 90)))));
}",64,2,"size:shape,truckCamera:itruckVideo,",59,0.66,ALERT
3477,"@SuppressWarnings(""unchecked"") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){
  mContext=context;
  mDbName=dbName;
  mDefaultTable=defaultTable;
  mDbPath=dbPath;
  mDbFile=new File(dbPath,mDbName);
  if (mDbFile.exists()) {
    open();
  }
}
","@SuppressWarnings(""unchecked"") public DictionaryAdapter(Context data,File dbpath,String dbNames,String DefaultFile){
  mContext=datalContextext=data;
  mmDatabaseNamedbNames;
 MDefaultDbe=DefaultFile;
  mDbType=dbpath;
  mDbFilmDbFile(dbpath,mDatabaseName);
  if (mDbF.exists()) {
    open();
  }
}
",62,9,"context:data,dbPath:dbpath,dbName:dbNames,defaultTable:DefaultFile,mContext:lContext,mDbName:mDatabaseName,mDefaultTable:MDefaultDb,mDbPath:mDbType,mDbFile:mDbF,",694,6.27,ALERT
3478,"private static Collection<TCPTransport> allKnownTransports(){
  Set<TCPTransport> s;
synchronized (localEndpoints) {
    s=new HashSet<TCPTransport>(localEndpoints.size());
    for (    LinkedList<TCPEndpoint> epList : localEndpoints.values()) {
      TCPEndpoint ep=epList.getFirst();
      s.add(ep.transport);
    }
  }
  return s;
}
","private static Collection<TCPTransport> allKnownEndpoints(){
  Set<TCPTransport> sq;
synchronized (localEndpoints) {
    sq=new HashSet<TCPTransport>(localEndpoints.size());
    for (    LinkedList<TCPEndpoint> EPL : localEndpoints.values()) {
      TCPEndpoint e=EPL.getFirst();
      sq.add(e.transport);
    }
  }
  return sq;
}
",75,4,"allKnownTransports:allKnownEndpoints,ep:e,s:sq,epList:EPL,",120,1.37,ALERT
3479,"protected void appendLine(JComponent c){
  c.setAlignmentX(0.f);
  contents.add(c);
}","protected void insertLine(JComponent coll){
  coll.setAlignmentX(0.f);
  contents.add(coll);
}",23,2,"appendLine:insertLine,c:coll,",394,3.89,ALERT
3480,"public double[] skipTo(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}","public double[] skipto(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long pull=grayCode >> (k - 1);
        if (pull == 0) {
          break;
        }
        final longikk=pull & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}",151,11,"skipTo:skipto,shift:pull,",407,5.56,ALERT
3481,"public final Iterator<KnowledgeEdge> requiredEdgesIterator(){
  Set<KnowledgeEdge> edges=new HashSet<>();
  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {
    final Set<MyNode> first=o.getFirst();
    for (    MyNode s1 : first) {
      final Set<MyNode> second=o.getSecond();
      for (      MyNode s2 : second) {
        if (!s1.equals(s2)) {
          edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));
        }
      }
    }
  }
  return edges.iterator();
}","public final Iterator<KnowledgeEdge> requiredEdwardsSet(){
  Set<KnowledgeEdge> eiffs=new HashSet<>();
  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {
    final Set<MyNode> primary=o.getFirst();
    for (    MyNode lsfirst : primary) {
      final Set<MyNode> both=o.getSecond();
      for (      MyNode s2 : both) {
        if (!lsfirst.equals(s2)) {
          eiffs.add(new KnowledgeEdge(lsfirst.getName(),s2.getName()));
        }
      }
    }
  }
  return eiffs.iterator();
}",123,7,"s1:lsfirst,first:primary,edges:eiffs,second:both,requiredEdgesIterator:requiredEdwardsSet,",206,2.4,ALERT
3483,"private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){
  QuadEdge curr=edge;
  int edgeCount=0;
  boolean isFrame=false;
  do {
    triEdges[edgeCount]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge sym=curr.sym();
    if (!visitedEdges.contains(sym))     edgeStack.push(sym);
    visitedEdges.add(curr);
    edgeCount++;
    curr=curr.lNext();
  }
 while (curr != edge);
  if (isFrame && !includeFrame)   return null;
  return triEdges;
}","private QuadEdge[] fetchTriangleTOSee(QuadEdge edge,Stack nodestack,boolean cludeForce,Set visitedEdgeures){
  QuadEdge corrs=edge;
  int eeCount=0;
  boolean isFlow=false;
  do {
   TriEdgss[eeeCount=corrs;
    if (isFrameEdge(corrs))     isFlow=true;
    QuadEdge sppercorrs.pper();
    if (!visitedEdgeures.contains(pper))     nodestack.push(pper);
    visitedEdgeures.add(corrs);
    eeCount++;
    corrs=corrs.lNext();
  }
 while (corrs != edge);
  ifisFlowme && !cludeForce)   return null;
  return TriEdgs;
}",120,10,"fetchTriangleToVisit:fetchTriangleTOSee,edgeStack:nodestack,includeFrame:cludeForce,visitedEdges:visitedEdgeures,curr:corrs,edgeCount:eeCount,triEdges:TriEdgs,sym:pper,isFrame:isFlow,",603,7.09,ALERT
3484,"public static String toLocalizedInteger(long value){
  return NUMBER_FORMAT0.format(value);
}","public static String toLocalizedAmount(long value){
  return NUMBER_FORMAT0.format(value);
}",18,2,"toLocalizedInteger:toLocalizedAmount,",28,0.26,ALERT
3485,"public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(file.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
","public void Upload(File ile,long RestartsAfter,FTPDataTransferListener LISTeners) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!ile.exists()) {
    throw new FileNotFoundException(ile.getAbsolutePath());
  }
  InputStream streamStream=null;
  try {
   streamStreamm=new FileInputStream(ile);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    Upload(ile.getName(),inputStrestreamStreamAfter,RestartsAfter,LISTeners);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (streamStream != null) {
      try {
        streamStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
",189,5,"upload:Upload,file:ile,restartAt:RestartsAfter,listener:LISTeners,inputStream:streamStream,",562,6.2,ALERT
3486,"public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
","public void action(AbortableTask server){
  AbortingRunnable arariew AbortingRunnable(server);
  tasks.add(ari);
  try {
    exec.action(ari);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ari);
    throw e;
  }
}
",52,3,"execute:action,task:server,ar:ari,",209,2.76,ALERT
3487,"public ScriptBuilder data(int index,byte[] data){
  byte[] copy=Arrays.copyOf(data,data.length);
  int opcode;
  if (data.length == 0) {
    opcode=OP_0;
  }
 else   if (data.length == 1) {
    byte b=data[0];
    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b);
 else     opcode=1;
  }
 else   if (data.length < OP_PUSHDATA1) {
    opcode=data.length;
  }
 else   if (data.length < 256) {
    opcode=OP_PUSHDATA1;
  }
 else   if (data.length < 65536) {
    opcode=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(index,new ScriptChunk(opcode,copy));
}","public ScriptBuilder array(int iobjectbyte[] array){
  byte[] copatchrrays.copyOf(array,array.length);
  int ipcode;
  if (array.length == 0) {
    ipcode=OP_0;
  }
 else   if (array.length == 1) {
    byte bembarray[0];
    if (emb >= 1 && emb <= 16)     ipcode=Script.encodeToOpN(emb);
 else     ipcode=1;
  }
 else   if (array.length < OP_PUSHDATA1) {
    oipcodearray.length;
  }
 else   if (array.length < 256) {
    ipcode=OP_PUSHDATA1;
  }
 else   if (array.length < 65536) {
    ipcode=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(object,new ScriptChunk(oipcodepatch));
}",161,5,"data:array,index:object,copy:patch,opcode:ipcode,b:emb,",1250,13.97,ALERT
3488,"protected boolean isLockedLocally(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}
","protected boolean isLockedRemoteality(UUID newOwnerName){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerName);
}
",26,2,"isLockedLocally:isLockedRemoteality,newOwnerID:newOwnerName,",106,1.33,ALERT
3489,,,16,1,,441,4.057142742474870,0
3490,"private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}
","private void AddTable(Test newTest){
  if (m_TestLibrary == null) {
    m_TestLibrary=new ArrayList<Test>();
  }
  m_TestLibrary.add(newTest);
}
",34,3,"addTest:AddTable,m_RuleList:m_TestLibrary,",52,0.68,ALERT
3491,"protected void removeAllPremoveDrops(){
  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {
    if (info.isPremoveDrop) {
      premoves.remove(info);
    }
  }
}","protected void removeAllPremovDrops(){
  for (  PremoveInfo show : premoves.toArray(new PremoveInfo[0])) {
    if (show.isPremoveDrop) {
      premoves.remove(show);
    }
  }
}",40,2,"info:show,removeAllPremoveDrops:removeAllPremovDrops,",59,0.76,ALERT
3492,"public static int hash2(int hash,Object x,Object y){
  return 0x20000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y));
}","public static int mod2(int math,Object rx,Object y){
  return 0x20000000 | (math + 7 * System.identityHashCode(rx) + 11 * System.identityHashCode(y));
}",41,4,"hash:math,x:rx,hash2:mod2,",79,1.43,ALERT
3493,"private long downloadTlogFiles(File tmpTlogDir,long latestGeneration) throws Exception {
  LOG.info(""Starting download of tlog files from master: "" + tlogFilesToDownload);
  tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>());
  long bytesDownloaded=0;
  boolean status=tmpTlogDir.mkdirs();
  if (!status) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,""Failed to create temporary tlog folder: "" + tmpTlogDir.getName());
  }
  for (  Map<String,Object> file : tlogFilesToDownload) {
    String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));
    localFileFetcher=new LocalFsFileFetcher(tmpTlogDir,file,saveAs,TLOG_FILE,latestGeneration);
    currentFile=file;
    localFileFetcher.fetchFile();
    bytesDownloaded+=localFileFetcher.getBytesDownloaded();
    tlogFilesDownloaded.add(new HashMap<>(file));
  }
  return bytesDownloaded;
}","private long downloadtLogfiles(File tmpBlogFolder,long latestGeneration) throws Exception {
  LOG.info(""Starting download of tlog files from master: "" + tlogFilesToDownload);
  tlogFileDownloadd=Collections.synchronizedList(new ArrayList<>());
  long bytesDownloadted=0;
  boolean staclasspBlogFolder.mkdirs();
  if (!class) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,""Failed to create temporary tlog folder: "" + tmpBlogFolder.getName());
  }
  for (  Map<String,Object> image : tlogFilesToDownload) {
    String savwriteFromtring)(image.get(ALIAS) == null ? image.get(NAME) : image.get(ALIAS));
    localFilocalFilefetcherscalFsFileFetcher(tmpBlogFolder,image,writeFrom,TLOG_FILE,latestGeneration);
    ccurrentDirectoryimage;
    localFilefetchers.fetchFile();
    bytesDownloadted+=localFilefetchers.getBytesDownloaded();
    tlogFileDownloadd.add(new HashMap<>(image));
  }
  return bytesDownloadted;
}",172,10,"downloadTlogFiles:downloadtLogfiles,tmpTlogDir:tmpBlogFolder,tlogFilesDownloaded:tlogFileDownloadd,bytesDownloaded:bytesDownloadted,status:class,file:image,saveAs:writeFrom,localFileFetcher:localFilefetchers,currentFile:currentDirectory,",530,6.75,ALERT
3494,"private SublimeBaseMenuItem addInternal(int group,int id,CharSequence title,CharSequence hint,SublimeBaseMenuItem.ItemType itemType,boolean valueProvidedAsync,CharSequence badgeText,boolean showsIconSpace,boolean addedByUser){
  SublimeBaseMenuItem item;
  boolean isGroupHeader=false;
switch (itemType) {
case SEPARATOR:
    item=new SublimeSeparatorMenuItem(this,group,id);
  break;
case BADGE:
item=new SublimeTextWithBadgeMenuItem(this,group,id,title,hint,valueProvidedAsync,badgeText,showsIconSpace);
break;
case SWITCH:
item=new SublimeSwitchMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
case CHECKBOX:
item=new SublimeCheckboxMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
case GROUP_HEADER:
isGroupHeader=true;
item=new SublimeGroupHeaderMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
default :
item=new SublimeTextMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
}
checkExistenceOfGroup(group);
if (isGroupHeader) {
checkIfGroupHeaderAlreadyExistsForGroup(group);
int index=findGroupIndex(group);
if (index >= 0) {
mItems.add(index,item);
}
 else {
mItems.add(item);
}
}
 else if (addedByUser) {
if (group != NO_GROUP_ID) {
int lastGroupIndex=findLastGroupIndex(group);
mItems.add(lastGroupIndex == mItems.size() ? lastGroupIndex : lastGroupIndex + 1,item);
}
 else {
mItems.add(item);
}
}
 else {
mItems.add(item);
}
onItemsChanged();
return item;
}","private SublimeBaseMenuItem createPrivate(int gh,int en,CharSequence published,CharSequence shicit,SublimeBaseMenuItem.ItemType eventTyp,boolean valueProvidedOriginal,CharSequence badgateTitle,boolean doesIconPlace,boolean changedByCustom){
  SublimeBaseMenuItem parent;
  boolean ISGROUPheader=false;
switch (eventTyp) {
case SEPARATOR:
 parenttem=new SublimeSeparatorMenuItem(this,gh,en);
  break;
case BADGE:
item=newparentlimeTextWithBadgeMenuItem(this,gh,en,published,shicit,valueProvidedOriginal,badgateTitle,doesIconPlace);
break;
case SWITCH:
item=parentSublimeSwitchMenuItem(this,gh,en,published,shicit,valueProvidedOriginal,doesIconPlace);
break;
case CHECKBOX:
item=parentSublimeCheckboxMenuItem(this,gh,en,published,shicit,valueProvidedOriginal,doesIconPlace);
break;
case GROUP_HEADER:
ISGROUPheader=true;
item=parentSublimeGroupHeaderMenuItem(this,gh,en,published,shicit,valueProvidedOriginal,doesIconPlace);
break;
default :
item=parentSublimeTextMenuItem(this,gh,en,published,shicit,valueProvidedOriginal,doesIconPlace);
break;
}
checkExistenceOfGroup(gh);
if (ISGROUPheader) {
checkIfGroupHeaderAlreadyExistsForGroup(gh);
ilengthdex=findGroupIndex(gh);
if (length >= 0) {
mItems.add(inlengtharent);
}
 else {
mItems.add(parent);
}
}
 else if (changedByCustom) {
if (gh != NO_GROUP_ID) {
int lastGroupIndex=findLastGroupIndex(gh);
mItems.add(lastGroupIndex == mItems.size() ? lastGroupIndex : lastGroupIndex + 1,parent);
}
 else {
mItems.add(parent);
}
}
 else {
mItems.add(parent);
}
onItemsChanged();
return parent;
}",318,14,"addInternal:createPrivate,group:gh,id:en,title:published,hint:shicit,itemType:eventTyp,valueProvidedAsync:valueProvidedOriginal,badgeText:badgateTitle,showsIconSpace:doesIconPlace,addedByUser:changedByCustom,item:parent,isGroupHeader:ISGROUPheader,index:length,",2453,26.47,ALERT
3495,"public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}","public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement sthorp=null;
  ResultSet rs=null;
  try {
    sthorp=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(sthorp,index + 1,parameters[index]);
    }
    rs=sthorp.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(sthorp);
  }
}",151,9,"stmt:sthorp,",90,1.44,ALERT
3496,"protected void applyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes,TacticalSymbolAttributes symbolAttributes){
  Double value=graphicAttributes.getInteriorOpacity();
  if (value != null) {
    symbolAttributes.setOpacity(value);
  }
  value=graphicAttributes.getScale();
  if (value != null) {
    symbolAttributes.setScale(value);
  }
  Material material=graphicAttributes.getInteriorMaterial();
  symbolAttributes.setInteriorMaterial(material);
  Font font=graphicAttributes.getTextModifierFont();
  if (font != null) {
    symbolAttributes.setTextModifierFont(font);
  }
  material=graphicAttributes.getTextModifierMaterial();
  if (material != null) {
    symbolAttributes.setTextModifierMaterial(material);
  }
}
","protected void applyAttributesTosyph(TacticalGraphicAttributes gameraphicEvents,TacticalSymbolAttributes SymbolReports){
  Doubleimagee=gameraphicEvents.getInteriorOpacity();
  if (image != null) {
    SymbolReports.setOpacity(image);
  }
 imagee=gameraphicEvents.getScale();
  if (image != null) {
    SymbolReports.setScale(image);
  }
  Materialtextl=gameraphicEvents.getInteriorMaterial();
  SymbolReports.setInteriorMaterial(text);
  Fontfft=gameraphicEvents.getTextModifierFont();
  if (ff != null) {
    SymbolReports.setTextModifierFont(ff);
  }
 textl=gameraphicEvents.getTextModifierMaterial();
  if (text != null) {
    SymbolReports.setTextModifierMaterial(text);
  }
}
",122,6,"applyAttributesToSymbol:applyAttributesTosyph,graphicAttributes:gameraphicEvents,symbolAttributes:SymbolReports,value:image,material:text,font:ff,",536,5.55,ALERT
3497,"private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
","private void refreshIndexForDimensionFields(String flowIndex,DimensionRow dimensionRow,DimensionRow projectRowOld){
  try {
    for (    DimensionField folder : dimension.getDimensionFields()) {
      if (folder == dimension.getKey()) {
        continue;
      }
      if (projectRowOld != null) {
        StringoldColumnKeye=projectRowOld.get(folder);
        String ololdRawValuesLockimensionStoreKeyUtils.getRowKey(folder.getName(),oldColumnKey);
        String ololdRowValuesKeysMseeyValueStore.get(oldRawValuesLock);
        String[]oldRowValueSKeyss=objectMapper.readValue(oldRowValuesKeysMse,String[].class);
        Set<String> oldRowValuesKeyList=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRoldRowValuesKeyListove(flowIndex);
        if (oldRowValuesKeyList.isEmpty()) {
          keyValueStore.remove(oldRawValuesLock);
        }
 else {
          String uupdatedOldRowValueWSKeysobjectMapper.writeValueAsString(oldRowValuesKeyList);
          keyValueStore.put(oldRawValuesLock,updatedOldRowValueWSKeys);
        }
      }
      String rpostIddimensionRow.get(folder);
      StringrowValuesNamey=DimensionStoreKeyUtils.getRowKey(folder.getName(),postId);
      String rorowValueBTokenseyValueStore.get(rowValuesName);
      Set<String> rowValueSDeepMap=new LinkedHashSet<>();
      if (rowValueBTokens != null) {
        rorowValueSDeepMapddAll(Arrays.asList(objectMapper.readValue(rowValueBTokens,String[].class)));
      }
      rowVrowValueSDeepMap(flowIndex);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSDeepMap);
      keyValueStore.put(rowValuesName,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
",301,16,"rowId:flowIndex,dimensionRowOld:projectRowOld,field:folder,oldRowValue:oldColumnKey,oldRowValueKey:oldRawValuesLock,oldRowValuesKeysJson:oldRowValuesKeysMse,oldRowValuesKeySet:oldRowValuesKeyList,updatedOldRowValueSKeys:updatedOldRowValueWSKeys,rowValue:postId,rowValueKey:rowValuesName,rowValueSKeys:rowValueBTokens,rowValueSKeySet:rowValueSDeepMap,",608,14.15,ALERT
3498,,,107,1,,419,2.5087488015492800,0
3499,,,43,3,,1129,9.17404095729192,0
3500,,,491,15,,4806,44.781520648797400,0
3502,"public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}","public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bps=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bps,bps.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}",57,5,"bytes:bps,",47,0.34,ALERT
3503,,,20,1,,451,2.8753112037976600,0
3504,"public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}
","public void en(final SAMRecord read,final int position){
  recordAndOffsets.en(new RecordAndOffset(read,position));
}
",27,3,"add:en,",38,0.32,ALERT
3505,"public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}","public ArrayList<MechSummary> generizeUnins(int num,UnitFilter filter){
  ArrayList<MechSummary> RetBu=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      RetBu.add(ms);
    }
  }
  return RetBu;
}",70,6,"generateUnits:generizeUnins,retVal:RetBu,",67,0.74,ALERT
3506,,,62,2,,803,7.875112005074820,0
3507,"public static void loadAll(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){
  checkArguments(parent,debugger,offset);
  final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size);
  CProgressDialog.showEndless(parent,""Loading memory"" + "" ..."",waiter);
  if (waiter.getException() != null) {
    CUtilityFunctions.logException(waiter.getException());
    final String innerMessage=""E00078: "" + ""Could not load memory section"";
    final String innerDescription=CUtilityFunctions.createDescription(String.format(""The memory section starting at address \'%s\' could not loaded."",offset.toHexString()),new String[]{""There was a problem with the connection to the debug client.""},new String[]{""The memory data was not loaded.""});
    NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());
  }
}","public static void downloadALL(final JFrame parent,final IDebugger proGER,final IAddress offset,final int size){
  checkArguments(parent,proGER,offset);
  final CDumpAllWaiter wailer=new CDumpAllWaiter(proGER,offset,size);
  CProgressDialog.showEndless(parent,""Loading memory"" + "" ..."",wailer);
  if (wailer.getException() != null) {
    CUtilityFunctions.logException(wailer.getException());
    final String innerMessage=""E00078: "" + ""Could not load memory section"";
    final String innerDescription=CUtilityFunctions.createDescription(String.format(""The memory section starting at address \'%s\' could not loaded."",offset.toHexString()),new String[]{""There was a problem with the connection to the debug client.""},new String[]{""The memory data was not loaded.""});
    NaviErrorDialog.show(parent,innerMessage,innerDescription,wailer.getException());
  }
}",145,8,"waiter:wailer,debugger:proGER,loadAll:downloadALL,",221,1.73,ALERT
3508,"private static Map<String,SnmpOid> buildPoolIndexMap(SnmpCachedData cached){
  if (cached == null)   return Collections.emptyMap();
  final SnmpOid[] indexes=cached.indexes;
  final Object[] datas=cached.datas;
  final int len=indexes.length;
  final Map<String,SnmpOid> m=new HashMap<>(len);
  for (int i=0; i < len; i++) {
    final SnmpOid index=indexes[i];
    if (index == null)     continue;
    final MemoryPoolMXBean mpm=(MemoryPoolMXBean)datas[i];
    if (mpm == null)     continue;
    final String name=mpm.getName();
    if (name == null)     continue;
    m.put(name,index);
  }
  return m;
}","private static Map<String,SnmpOid> buildPoolLinkList(SnmpCachedData scached){
  if (scached == null)   return Collections.emptyMap();
  final SnmpOid[] iinduesscached.indues;
  final Object[] dmetumsscached.metums;
  final intvaln=indues.length;
  final Map<String,SnmpOid> n=new HashMap<>(val);
  for (int info=0; info < val; info++) {
    final SnmpOid inkeyndues[info];
    if (key == null)     continue;
    final MemoryPoolMXBean mpm=MPpmoryPoolMXBean)metums[info];
    if (MPp == null)     continue;
    final String non=MPp.getName();
    if (non == null)     continue;
    n.punonme,key);
  }
  return n;
}",156,10,"buildPoolIndexMap:buildPoolLinkList,cached:scached,indexes:indues,datas:metums,len:val,m:n,i:info,index:key,mpm:MPp,name:non,",1099,19.55,ALERT
3509,"public boolean connect(final String address){
  if (mBluetoothAdapter == null || address == null) {
    Log.w(TAG,""BluetoothAdapter not initialized or unspecified address."");
    return false;
  }
  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {
    Log.d(TAG,""Trying to use an existing mBluetoothGatt for connection."");
    if (mBluetoothGatt.connect()) {
      mConnectionState=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);
  if (device == null) {
    Log.w(TAG,""Device not found.  Unable to connect."");
    return false;
  }
  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);
  Log.d(TAG,""Trying to create a new connection."");
  mBluetoothDeviceAddress=address;
  mConnectionState=STATE_CONNECTING;
  return true;
}
","public boolean socket(final String pointer){
  if (mBluetoothAdapter == null || pointer == null) {
    Log.w(TAG,""BluetoothAdapter not initialized or unspecified address."");
    return false;
  }
  if (mBluetoothdeviceAddress != null && pointer.equals(mBluetoothdeviceAddress) && mBluetoothCach != null) {
    Log.d(TAG,""Trying to use an existing mBluetoothGatt for connection."");
    if mBluetoothCacht.socket()) {
      iConnectionSource=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDevice element=mBluetoothAdapter.getRemoteDevice(pointer);
  if (element == null) {
    Log.w(TAG,""Device not found.  Unable to connect."");
    return false;
  }
  mmBluetoothCachelement.connectGatt(this,false,mGattCallback);
  Log.d(TAG,""Trying to create a new connection."");
  mBluetoothdeviceAddress=pointer;
  iConnectionSource=STATE_CONNECTING;
  return true;
}
",149,6,"connect:socket,address:pointer,mConnectionState:iConnectionSource,device:element,mBluetoothGatt:mBluetoothCach,mBluetoothDeviceAddress:mBluetoothdeviceAddress,",311,5.09,ALERT
3510,,,20,1,,440,5.5838016708691900,0
3511,"public boolean isExpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
","public boolean isexpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
",26,1,"isExpired:isexpired,",26,0.34,ALERT
3512,"public void resetTextBoxIndexesExcept(Set<Integer> excludedList){
  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(excludedList);
  for (  Integer index : unusedTextBoxIndexes) {
    points.removeTextBox(index);
  }
}
","public void resetTextBoxIndexesExcept(Set<Integer> outclusionL){
  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(outclusionL);
  for (  Integer index : unusedTextBoxIndexes) {
    points.removeTextBox(index);
  }
}
",54,4,"excludedList:outclusionL,",40,0.49,ALERT
3513,,,14,1,,437,5.214426211516060,0
3514,"private void onHPChange(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}","private void onProgressChange(final int frequency){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (frequency > 0) {
      addTextIndicator(""+"" + frequency,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(frequency),NotificationType.NEGATIVE);
    }
  }
}",61,2,"onHPChange:onProgressChange,amount:frequency,",264,3.3,ALERT
3515,,,70,4,,1476,21.822346504529300,0
3516,,,42,3,,1130,9.474269743760430,0
3518,"public boolean equals(Object o){
  if (o instanceof CoverageIntVdt) {
    CoverageIntVdt civ=(CoverageIntVdt)o;
    return ((attribute == civ.attribute) && (value == civ.value));
  }
 else {
    return false;
  }
}
","public boolean Equares(Object ado){
  if (ado instanceof CoverageIntVdt) {
    CoverageIntVdt cicompovCoverageIntVdt)ado;
    return ((attribute == compov.attribute) && (value == compov.value));
  }
 else {
    return false;
  }
}
",50,3,"equals:Equares,o:ado,civ:compov,",197,2.63,ALERT
3519,,,104,2,,706,16.269469106197400,0
3520,,,112,3,,848,8.97283273935318,0
3521,"protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldMessageProcessor)) {
      oldMessageProcessor.stop();
    }
  }
}
","protected void removemessageProcessor(MessageProcessor oldmessageProcessors){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldmessageProcessors)) {
      oldmessageProcessors.stop();
    }
  }
}
",32,2,"removeMessageProcessor:removemessageProcessor,oldMessageProcessor:oldmessageProcessors,",104,1.53,ALERT
3522,,,71,2,,676,5.052661355336510,0
3523,"public static void dump(String message,StackTraceElement[] stackTrace){
  dump(message,Arrays.asList(stackTrace));
}
","public static void patch(String frame,StackTraceElement[] stackTrace){
  patch(frame,Arrays.asList(stackTrace));
}
",27,3,"message:frame,dump:patch,",68,0.6,ALERT
3525,,,20,2,,640,6.808957560857140,0
3526,"@Override protected int lookForSelectablePosition(int position,boolean lookDown){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookDown) {
      position=Math.max(0,position);
      while (position < count && !adapter.isEnabled(position)) {
        position++;
      }
    }
 else {
      position=Math.min(position,count - 1);
      while (position >= 0 && !adapter.isEnabled(position)) {
        position--;
      }
    }
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
 else {
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
}","@Override protected int lookForSelectContainerCondition(int length,boolean baseOpen){
  final ListAdapter advert=mAdapter;
  if (advert == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final intprocesst=advert.getCount();
  if (!mAreAllItemsSelectable) {
    if (baseOpen) {
      length=Math.max(0,length);
      while (lengthprocessunt &&adverter.isEnabled(length)) {
        length++;
      }
    }
 else {
      length=Math.min(length,process - 1);
      while (length >= 0 &&adverter.isEnabled(length)) {
        length--;
      }
    }
    if (length < 0 || length >= process) {
      return INVALID_POSITION;
    }
    return length;
  }
 else {
    if (length < 0 || length >= process) {
      return INVALID_POSITION;
    }
    return length;
  }
}",162,5,"lookForSelectablePosition:lookForSelectContainerCondition,position:length,lookDown:baseOpen,adapter:advert,count:process,",228,4.87,ALERT
3527,"void startLocatingPhone(){
  Intent intent=new Intent(sContext,LocationService.class);
  intent.setAction(LocationService.START_SERVICE);
  intent.putExtra(""to"",this.mAnswerTo);
  sContext.startService(intent);
}
","void startLocatingPhone(){
  Intent json=new Intent(sContext,LocationService.class);
  json.setAction(LocationService.START_SERVICE);
  json.putExtra(""to"",this.mAnswerTo);
  sContext.startService(json);
}
",46,2,"intent:json,",37,0.39,ALERT
3528,"public static void endTransaction(final CConnection connection) throws SQLException {
  endTransaction(connection.getConnection());
}
","public static void beginConnection(final CConnection password) throws SQLException {
  beginConnection(password.getConnection());
}
",22,2,"connection:password,endTransaction:beginConnection,",62,0.4,ALERT
3529,,,40,4,,1012,11.358576107025100,0
3530,,,45,1,,422,3.264253044128420,0
3531,"public void build(String code,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
","public void structure(String code,String defaultstatus){
  try {
    if (defaultstatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),defaultstatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
",118,3,"customStatus:defaultstatus,build:structure,",53,0.37,ALERT
3532,,,122,2,,793,8.457526350021360,0
3533,"private Solution largestObjectiveValue(int objective,Population population){
  Solution largest=null;
  double value=Double.NEGATIVE_INFINITY;
  for (  Solution solution : population) {
    if (solution.getObjective(objective) > value) {
      largest=solution;
      value=solution.getObjective(objective);
    }
  }
  return largest;
}
","private Solution largestObjectiveVal(int classived,Population crop){
  Solution smallest=null;
  double volume=Double.NEGATIVE_INFINITY;
  for (  Solasolvelution : crop) {
    if (sasolvegetObjective(classived) > volume) {
      smallest=asolve;
      volume=asolve.getObjective(classived);
    }
  }
  return smallest;
}
",62,6,"largestObjectiveValue:largestObjectiveVal,objective:classived,population:crop,largest:smallest,value:volume,solution:asolve,",1560,15.57,ALERT
3534,"public void removeVetoableChangeListener(VetoableChangeListener listener){
  if (listener != null) {
synchronized (this) {
      if (vetoableSupport != null) {
        vetoableSupport.removeVetoableChangeListener(listener);
      }
    }
  }
}
","public void removeVetoableChangeAdapter(VetoableChangeListener Listender){
  if (Listender != null) {
synchronized (this) {
      if (vetoableSupport != null) {
        vetoableSupport.removeVetoableChangeAdapter(Listender);
      }
    }
  }
}
",38,2,"listener:Listender,removeVetoableChangeListener:removeVetoableChangeAdapter,",67,0.88,ALERT
3535,"private static void checkArgReferences(String typeSnippet,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,""%s not allowed, indices start at 1"",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,""%s too large for number of provided type mirrors"",argRefMatcher.group(0));
  }
}","private static void processarguments(String typeSnapture,int numberZeroJs){
  Matcher aargDefEncherARG_REF_PATTERN.matcher(typeSnapture);
  while (argDefEncher.find()) {
    intconditionx=Integer.parseInt(argDefEncher.group(1),10) - 1;
    Preconditions.checkArgumentconditionx >= 0,""%s not allowed, indices start at 1"",argDefEncher.group(0));
    Preconditions.checkArgumentconditionx < numberZeroJs,""%s too large for number of provided type mirrors"",argDefEncher.group(0));
  }
}",88,5,"checkArgReferences:processarguments,typeSnippet:typeSnapture,numberOfArgs:numberZeroJs,argRefMatcher:argDefEncher,index:condition,",455,6.05,ALERT
3536,"@Override public Cursor swapCursor(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swapCursor(newCursor);
}
","@Override public Cursor swapCurrenter(Cursor oldAcursor){
  mAlphabetIndexer.setCursor(oldAcursor);
  return super.swapCurrenter(oldAcursor);
}
",26,2,"swapCursor:swapCurrenter,newCursor:oldAcursor,",168,1.52,ALERT
3537,"public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException {
  Objects.requireNonNull(factory,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}
","public Builder withSerializer(Class<? extends TokenizerFactory> infunction,Map<String,String> ams) throws IOException {
  Objects.requireNonNull(infunction,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(infunction,applyDefaultParams(ams))));
  componentsAdded=true;
  return this;
}
",58,3,"withTokenizer:withSerializer,factory:infunction,params:ams,",253,2.62,ALERT
3538,"public static String[] unionArrays(String[] array1,String[] array2){
  if (array1 == null) {
    return array2;
  }
  if (array2 == null) {
    return array1;
  }
  Set<String> set=new LinkedHashSet<>();
  set.addAll(Arrays.asList(array1));
  set.addAll(Arrays.asList(array2));
  return set.toArray(new String[set.size()]);
}","public static String[] unionSegays(String[] raya,String[] ray1){
  if (raya == null) {
    return ray1;
  }
  if (ray1 == null) {
    return raya;
  }
  Set<String> post=new LinkedHashSet<>();
postet.addAll(Arrays.asList(raya));
postet.addAll(Arrays.asList(ray1));
  return post.toArray(new String[post.size()]);
}",94,4,"unionArrays:unionSegays,array1:raya,array2:ray1,set:post,",790,12.63,ALERT
3539,"private void populateProfiles(final ProfileList profiles){
  profilesComboBox.removeAllItems();
  for (  Profile p : profiles) {
    profilesComboBox.addItem(p);
  }
  final int count=profilesComboBox.getItemCount();
  if (count != 0) {
    profilesComboBox.setSelectedIndex(count - 1);
  }
}","private void populatedProfile(final ProfileList simails){
  profilesComboBox.removeAllItems();
  for (  Profilehpp : simails) {
    profilesComboBox.addItem(hp);
  }
  final int total=profilesComboBox.getItemCount();
  if (total != 0) {
    profilesComboBox.setSelectedIndex(total - 1);
  }
}",59,4,"populateProfiles:populatedProfile,profiles:simails,p:hp,count:total,",376,3.15,ALERT
3540,"private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {
  String msg=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + msg + "":""+ date.toString()+ ""..."");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + "" verified."");
}","private void veratetimificate(X509Certificate url) throws CertPathValidatorException {
  String mag=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + mag + "":""+ date.toString()+ ""..."");
  try {
    url.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(mag + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(mag + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(mag + "" verified."");
}",120,3,"verifyTimestamp:veratetimificate,cert:url,msg:mag,",458,7.94,ALERT
3541,"@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}","@Override public void render(final int image,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}",120,8,"type:image,",55,1.21,ALERT
3542,"protected void processFocusEvent(FocusEvent evt){
  super.processFocusEvent(evt);
  if (evt.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
","protected void processControlevent(FocusEvent EVte){
  super.processControlevent(EVte);
  if (EVte.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
",40,2,"processFocusEvent:processControlevent,evt:EVte,",67,0.7,ALERT
3543,,,37,2,,693,8.338886328538260,0
3544,,,56,1,,433,3.7378816405932100,0
3545,,,61,5,,1874,33.52221411863960,0
3546,"@Override public char next(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.next();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}
","@Override public char sequence(){
  ++docPosition;
  if (docPosition < SEmentEnd || SEmentEnd >= doc.getLength()) {
    return text.sequence();
  }
  try {
    doc.getText(SEmentEnd,doc.getLength() - SEmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  SEmentEnd+=text.count;
  return text.current();
}
",82,3,"next:sequence,docPos:docPosition,segmentEnd:SEmentEnd,",379,3.75,ALERT
3547,"public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){
  Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY());
  return pointInZone(zoneID,point);
}","public boolean coordinateInsidePoint(Id<ActivityFacility> zoneID,Coord diade){
  Point point=MGC.xy2Point(diade.getX(),diade.getY());
  return pointInZone(zoneID,point);
}",43,4,"coordinate:diade,coordinateInZone:coordinateInsidePoint,",80,0.8,ALERT
3548,,,22,2,,771,5.1650824546814000,0
3549,,,20,1,,422,4.091103827953340,0
3550,,,254,11,,3832,63.14825898011530,0
3551,"private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}","private void dundleLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int name=0; name < lmin.length; name++) {
        if (Math.abs(first.doubleValue(name) - other.doubleValue(name)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int name=0; name < lmin.length; name++) {
        center[name]=lmin[name] * .5 + lmax[name] * .5 + shift[name];
        if (center[name] > min[name] + width[name]) {
          center[name]-=width[name];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int name=0; name < lmin.length; name++) {
      center[name]=lmin[name] * .5 + lmax[name] * .5 + shift[name];
      if (center[name] > min[name] + width[name]) {
        center[name]-=width[name];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      dundleLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      dundleLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      dundleLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}",755,17,"d:name,bulkLoad:dundleLoad,",308,19.93,ALERT
3552,"public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {
  if (dateValue == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (dateFormats == null) {
    dateFormats=DEFAULT_PATTERNS;
  }
  if (dateValue.length() > 1 && dateValue.startsWith(""\'"") && dateValue.endsWith(""\'"")) {
    dateValue=dateValue.substring(1,dateValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=dateFormats.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(dateValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + dateValue);
}","public static Date createFormat(String gradeContent,Collection resourceFormands) throws DateParseException {
  if (gradeContent == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (resourceFormands == null) {
    resourceFormands=DEFAULT_PATTERNS;
  }
  if (gradeContent.length() > 1 && gradeContent.startsWith(""\'"") && gradeContent.endsWith(""\'"")) {
    gradeContent=gradeContent.substring(1,gradeContent.length() - 1);
  }
  SimpleDateFormat datparser=null;
  final Iterator formapatternIteratorurceFormands.iterator();
  while (patternIterator.hasNext()) {
    final String formapatterning)patternIterator.next();
    if (datparser == null) {
      datparser=new SimpleDateFormat(pattern,Locale.US);
      datparser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      datparser.applyPattern(pattern);
    }
    try {
      return datdatparserrse(gradeContent);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + gradeContent);
}",193,6,"parseDate:createFormat,dateValue:gradeContent,dateFormats:resourceFormands,dateParser:datparser,formatIter:patternIterator,format:pattern,",395,4.13,ALERT
3553,"public void addButtonPressedListener(FieldConfigStringButtonInterface listener){
  if (buttonPressedListenerList == null) {
    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressedListenerList.add(listener);
}
","public void addButtonPackedener(FieldConfigStringButtonInterface listener){
  if (buttonPendedListenL == null) {
    buttonPendedListenL=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPendedListenL.add(listener);
}
",34,3,"buttonPressedListenerList:buttonPendedListenL,addButtonPressedListener:addButtonPackedener,",61,0.43,ALERT
3554,"public AmqpMessage receiveNoWait() throws Exception {
  checkClosed();
  return prefetch.poll();
}
","public AmqpMessage receivePromQuery() throws Exception {
  checkClosed();
  return prefetch.poll();
}
",20,1,"receiveNoWait:receivePromQuery,",18,0.17,ALERT
3555,"protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
","protected Date compComputer(double office){
  if (Double.isNaN(office)) {
    return null;
  }
  long dateLong=(long)office;
  Date grade=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(grade);
  return cal.getTime();
}
",63,5,"value:office,date:grade,compute:compComputer,",145,1.4,ALERT
3556,"@Override public boolean exclude(String identifier){
  return blacklist.contains(identifier);
}
","@Override public boolean exclusion(String identifier){
  return blacklist.contains(identifier);
}
",19,1,"exclude:exclusion,",18,0.18,ALERT
3557,"private void logExpiration(Entry e){
  if (e.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",e.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",e.lease);
  }
}","private void logExpignment(Entry esi){
  if (esi.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",esi.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",esi.lease);
  }
}",52,2,"logExpiration:logExpignment,e:esi,",344,3.61,ALERT
3558,,,25,1,,430,3.1699302832285600,0
3559,"private void fetchMyServiceCardsFromServer(){
  RetroCallback retroCallback;
  retroCallback=new RetroCallback(this);
  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES);
  retroCallbackList.add(retroCallback);
  mYeloApi.getMyServiceCards(retroCallback);
}
","private void fetchMyServiceCodesFromNode(){
  RetroCallback retruClient;
  retruClient=new RetroCallback(this);
  retruClient.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES);
  retroCallbackList.add(retruClient);
  mYeloApi.getMyServiceCards(retruClient);
}
",43,2,"fetchMyServiceCardsFromServer:fetchMyServiceCodesFromNode,retroCallback:retruClient,",110,1.05,ALERT
3560,,,13,1,,425,4.630571492513020,0
3561,"public RelNode convertSelect(SqlSelect select,boolean top){
  final SqlValidatorScope selectScope=validator.getWhereScope(select);
  final Blackboard bb=createBlackboard(selectScope,null,top);
  convertSelectImpl(bb,select);
  return bb.root;
}
","public RelNode convertedSelect(SqlSelect delete,boolean top){
  final SqlValidatorScope selectscope=validator.getWhereScope(delete);
  final Blackboard abb=createBlackboard(selectscope,null,top);
  convertSelectImpl(abb,delete);
  return abb.root;
}
",48,5,"convertSelect:convertedSelect,select:delete,selectScope:selectscope,bb:abb,",255,3.39,ALERT
3562,,,16,1,,432,3.8470468044281000,0
3563,,,13,1,,450,5.719012780984240,0
3564,"private Node deleteMax(Node x){
  if (x.right == null)   return x.left;
  x.right=deleteMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}","private Node deleteMix(Node c){
  if (c.rw == null)   return c.left;
  c.rw=deleteMix(c.rw);
  c.size=1 + size(c.left) + size(c.rw);
  c.height=1 + Math.max(height(c.left),height(c.rw));
  return balance(c);
}",84,5,"x:c,right:rw,deleteMax:deleteMix,",173,2.03,ALERT
3565,,,16,2,,789,6.455501755078630,0
3566,"public static String[] parseDelimitedList(String list,char delimiter){
  String delim="""" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}","public static String[] parseDelimitedArray(String list,char delrimited){
  String lexig="""" + delrimited;
  StringTokenizer st=new StringTokenizer(list + lexig + "" "",lexig,true);
  ArrayList<String> ve=new ArrayList<String>();
  String lastToken="""";
  String stroke="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(lexig)) {
        stroke=stroke + lastToken;
        if (lastToken.equals(lexig))         tok=null;
      }
 else {
        if (!stroke.equals(""""))         ve.add(stroke);
        stroke="""";
      }
    }
    lastToken=tok;
  }
  return ve.toArray(new String[0]);
}",160,9,"word:stroke,delim:lexig,v:ve,delimiter:delrimited,parseDelimitedList:parseDelimitedArray,",266,3.18,ALERT
3567,"public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}
","public Object putResource(Object obj,Object value){
  return (objectCache.put(obj,value));
}
",24,3,"key:obj,",37,0.3,ALERT
3568,,,40,3,,856,7.945875978469850,0
3569,,,110,5,,1846,108.78258255322800,0
3570,,,32,1,,437,3.1317407210667900,0
3571,"private void remeasure(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}","private void remeasure(int wn,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}",564,13,"width:wn,",90,2.72,ALERT
3572,"@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
","@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> conzip(final Stream<? extends U> other){
  return fromStream(Stream.conzip(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
",78,2,"concat:conzip,",31,0.32,ALERT
3573,"public AABB merge(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
","public AABB useplus(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}
",90,8,"merge:useplus,",43,0.38,ALERT
3574,"public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}","public void slider(SLIDE slider){
  if (slider == SLIDE.UP) {
    if (!isPanelShown()) {
      int pose=0;
      if (items != null) {
        pose=items.size() / 2;
      }
      slideUp(pose);
    }
  }
 else {
    hidePanelPickerUI();
  }
}",63,2,"slide:slider,position:pose,",120,2.29,ALERT
3575,"@Override public final void sample(){
  _value=_acquireCount.get() - _releaseCount.get();
}
","@Override public final void change(){
  _current=_acquireCount.get() - _releaseCount.get();
}
",24,2,"sample:change,_value:_current,",97,0.74,ALERT
3576,,,47,3,,902,19.56253662109380,0
3577,,,19,3,,1057,9.634933050473530,0
3578,,,29,2,,801,7.520349125067390,0
3579,"public void testScreenshot() throws Exception {
  Log.d(LOG_TAG,""starting testScreenshot"");
  ScreenshotStubActivity activity=getActivity();
  assertNotNull(activity);
  File screenshotDir=getScreenshotDir();
  NewScreenshotObserver observer=new NewScreenshotObserver(screenshotDir.getAbsolutePath());
  observer.startWatching();
  takeScreenshot();
  if (observer.getCreatedPath() == null) {
synchronized (observer) {
      observer.wait(SCREEN_WAIT_TIME_SEC * 1000);
    }
  }
  assertNotNull(String.format(""Could not find screenshot after %d seconds"",SCREEN_WAIT_TIME_SEC),observer.getCreatedPath());
  File screenshotFile=new File(screenshotDir,observer.getCreatedPath());
  try {
    assertTrue(String.format(""Detected new screenshot %s but its not a file"",screenshotFile.getName()),screenshotFile.isFile());
    assertTrue(String.format(""Detected new screenshot %s but its not an image"",screenshotFile.getName()),isValidImage(screenshotFile));
  }
  finally {
    screenshotFile.delete();
  }
}","public void runScreen() throws Exception {
  Log.d(LOG_TAG,""starting testScreenshot"");
  ScreenshotStubActivity coverage=getActivity();
  assertNotNull(coverage);
  File scScreenshotDir=getScreenshotDir();
  NewScreenshotObserver obabserverew NewScreenshotObserver(scScreenshotDir.getAbsolutePath());
  abserver.startWatching();
  takeScreenshot();
  if (abserver.getCreatedPath() == null) {
synchronized (abserver) {
      abserver.wait(SCREEN_WAIT_TIME_SEC * 1000);
    }
  }
  assertNotNull(String.format(""Could not find screenshot after %d seconds"",SCREEN_WAIT_TIME_SEC),abserver.getCreatedPath());
  File scschematicfileew File(scScreenshotDir,abserver.getCreatedPath());
  try {
    assertTrue(String.format(""Detected new screenshot %s but its not a file"",schematicfile.getName()),schematicfile.isFile());
    assertTrue(String.format(""Detected new screenshot %s but its not an image"",schematicfile.getName()),isValidImage(schematicfile));
  }
  finally {
    schematicfile.delete();
  }
}",175,5,"testScreenshot:runScreen,activity:coverage,screenshotDir:scScreenshotDir,observer:abserver,screenshotFile:schematicfile,",517,19.62,ALERT
3580,"protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isFilled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isFilled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isFilled && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}","protected ArrayList<float[]> _forwardPoly(float[] rawdlpolys,int dltype,int nmegas,boolean isFill){
  boolean debugger=Debug.debugging(""proj"");
  int lelenawdlpolys.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltdltype   return doPolyDispatch(rawdlpolys,dltype,nmegas,isFill);
  int invalid_count=0;
  boolean curr_outbad, prev_invalid=false;
  Point tc=new Point();
  AzimuthVar az_first=null, azLogtrue=null, azVariable=new AzimuthVar();
  ArrayList<AzimuthVar> jobs=new ArrayList<AzimuthVar>(128);
  float[] h_, opens=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawdlpolys[0],rawdlpolys[1],tc,azVariable);
opensxs[0]=tc.x;
ysys[0]=tc.y;
  prev_prev_invalidriable.invalidactlinear;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVariable.index=0;
    azVaazVariablercurrent_aziputhatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawdlpolys[0],rawdlpolys[1]);
    if (!isFill) {
      sectijobsazVariable);
    }
 else {
      az_first=azVariable;
    }
    azVariable=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVariable.invalidactlinear=false;
    _forward(rawdlpolys[j],rawdlpolys[j + 1],tc,azVariable);
    curr_outbad=azVariable.invalidactlinear;
  opensxs[i]=tc.x;
  ysys[i]=tc.y;
    if (!curr_outbad && prev_invalid) {
      azVariable.index=i - 1;
      azVaazVariablercurrent_aziputhatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawdlpolys[j - 2],rawdlpolys[j - 1]);
      sectijobsazVariable);
      azVariable=new AzimuthVar();
    }
 else     if (curr_outbad) {
      if (!prev_invalid) {
        azVariable.index=i;
        if (isFill && (invalid_count == 0)) {
          azLogtrue=azVariable;
        }
 else {
          sectijobsazVariable);
        }
        azVariable=new AzimuthVar();
      }
      ++invalid_count;
    }
   prev_invalidd=curr_outbad;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(opens);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFill && (azLogtrue != null)) {
      int l=azLogtrue.index;
      h_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(opens,0,h_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(opens,0,h_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      azLogtrue.index=len + l;
      sejobsdd(azLogtrue);
      opens=h_;
      ys=y_;
    }
 else {
      ifdebuggerUG && isFill && (azLogtrue == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVariable.index=i;
      j=rawdlpolys.length;
      azVaazVariablercurrent_aziputhatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawdlpolys[j - 2],rawdlpolys[j - 1]);
      sectijobsazVariable);
    }
  }
 else   if (azLogtrue != null) {
    if (debugger)     Debug.output(""DD, filled!"");
    jobs.add(az_first);
    sejobsdd(azLogtrue);
  }
  int size=jobs.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFill && (len > 2)) {
    generateFilledPopensyyss,ys,jobs,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)jobs.get(j);
    AzimuthVar az2=(AzimuthVar)jobs.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    h_=new float[l];
    y_=new float[l];
    System.arraycopy(opens,off1,h_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(h_);
    ret_val.add(y_);
  }
  return ret_val;
}",966,24,"rawllpts:rawdlpolys,ltype:dltype,nsegs:nmegas,isFilled:isFill,DEBUG:debugger,curr_invalid:curr_outbad,temp:tc,az_save:azLogtrue,azVar:azVariable,sections:jobs,x_:h_,xs:opens,current_azimuth:current_aziputh,invalid_forward:invalidactlinear,",2187,34.12,ALERT
3581,"public String toString(){
  String string=caller;
  if (level > 0 || thread != -1) {
    string+=""["";
  }
  if (level > 0) {
    string+=level;
  }
  if (thread != -1) {
    string+="","" + thread;
  }
  if (level > 0 || thread != -1) {
    string+=""]"";
  }
  string+="":"";
  if (spawnMessage) {
    string+="">"";
  }
  if (answer.length() > 0) {
    string+=answer + ""="";
  }
  if (callee.length() > 0) {
    string+=callee + ""."";
  }
  string+=message;
  if (returnsInstantly) {
    string+=""&"";
  }
  return string;
}","public String tostring(){
  String string=caller;
  if (level > 0 || thread != -1) {
    string+=""["";
  }
  if (level > 0) {
    string+=level;
  }
  if (thread != -1) {
    string+="","" + thread;
  }
  if (level > 0 || thread != -1) {
    string+=""]"";
  }
  string+="":"";
  if (spawnMessage) {
    string+="">"";
  }
  if (answer.length() > 0) {
    string+=answer + ""="";
  }
  if (callee.length() > 0) {
    string+=callee + ""."";
  }
  string+=message;
  if (returnsInstantly) {
    string+=""&"";
  }
  return string;
}",140,2,"toString:tostring,",29,0.29,ALERT
3582,,,51,4,,1268,24.627826980749800,0
3584,,,81,4,,1400,14.563556849956500,0
3585,"public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generate();
}","public void generorate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generorate();
}",85,6,"generate:generorate,",48,0.53,ALERT
3586,"public void testSendReceive() throws Exception {
  messages.clear();
  for (int i=0; i < data.length; i++) {
    Message message=session.createTextMessage(data[i]);
    message.setStringProperty(""stringProperty"",data[i]);
    message.setIntProperty(""intProperty"",i);
    if (verbose) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""About to send a message: "" + message + "" with text: ""+ data[i]);
      }
    }
    sendToProducer(producer,producerDestination,message);
    messageSent();
  }
  assertMessagesAreReceived();
  LOG.info("""" + data.length + "" messages(s) received, closing down connections"");
}","public void testsendBroadume() throws Exception {
  messages.clear();
  for (int cli=0; cli < data.length; cli++) {
    Message medataession.createTextMessage(data[cli]);
    medataetStringProperty(""stringProperty"",data[cli]);
    medataetIntProperty(""intProperty"",cli);
    if (verbose) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""About to send a message: "" + medata "" with text: ""+ data[cli]);
      }
    }
    sendToProducer(producer,producerDestination,data);
    messageSent();
  }
  assertMessagesAreReceived();
  LOG.info("""" + data.length + "" messages(s) received, closing down connections"");
}",129,3,"testSendReceive:testsendBroadume,i:cli,message:data,",587,6.09,ALERT
3587,"private void writeIndent(int times) throws IOException {
  for (int i=options.getBaseIndent() + times; i > 0; i--) {
    writer.write(options.getIndent());
  }
}","private void writeindents(int blocks) throws IOException {
  for (int iindexoptions.getBaseIndent() + blocks; index > 0; index--) {
    writer.write(options.getIndent());
  }
}",44,3,"writeIndent:writeindents,times:blocks,i:index,",415,4.3,ALERT
3588,"public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}","public static String convertFromUF32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}",62,6,"convertFromUtf32:convertFromUF32,",139,1.71,ALERT
3589,"public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
","public boolean onScheduleAsLib(Config contract,Config runtime,IScheduler ccheduling,PackingPlan packing){
  boolean ret=false;
  try {
    ccheduling.initialize(contract,runtime);
    ret=ccheduling.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,ccheduling,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    ccheduling.close();
  }
  return ret;
}
",85,6,"config:contract,onScheduleAsLibrary:onScheduleAsLib,scheduler:ccheduling,",133,1.57,ALERT
3590,"private static boolean createBooleanSetting(final Map<String,String> rawSettings,final String settingName,final boolean defaultValue){
  final String settingString=rawSettings.get(settingName);
  if (settingString == null) {
    return defaultValue;
  }
 else {
    try {
      return Boolean.parseBoolean(settingString);
    }
 catch (    final NumberFormatException exception) {
      CUtilityFunctions.logException(exception);
      return defaultValue;
    }
  }
}
","private static boolean createBoleanString(final Map<String,String> RAWettings,final String settingName,final boolean defaultValue){
  final String settingString=RAWettings.get(settingName);
  if (settingString == null) {
    return defaultValue;
  }
 else {
    try {
      return Boolean.parseBoolean(settingString);
    }
 catch (    final NumberFormatException exception) {
      CUtilityFunctions.logException(exception);
      return defaultValue;
    }
  }
}
",78,5,"rawSettings:RAWettings,createBooleanSetting:createBoleanString,",59,0.66,ALERT
3591,"public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}","public String syllabify(String phonyLine){
  LinkedList<String> telephoneString=splitIntoAllophones(phonyLine);
  syllabify(telephoneString);
  StringBuilder usb=new StringBuilder();
  for (  String p : telephoneString) {
    if (usb.length() > 0)     usb.append("" "");
    usb.append(p);
  }
  return usb.toString();
}",73,5,"sb:usb,phoneList:telephoneString,phoneString:phonyLine,",132,1.62,ALERT
3592,"protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}","protected JsonEncoding getEncoding(MediaType MediaTypes,MultivaluedMap<String,Object> httpMetheaders){
  return JsonEncoding.UTF8;
}",22,3,"findEncoding:getEncoding,mediaType:MediaTypes,httpHeaders:httpMetheaders,",232,2.15,ALERT
3593,"public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}","public WritableRaster createReadablesCell(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}",201,11,"createWritableChild:createReadablesCell,",65,7.02,ALERT
3595,"public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
","public static LocalGitRepo FromcurrentFolder(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
",195,8,"fromCurrentDir:FromcurrentFolder,",83,0.97,ALERT
3596,"void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}","void actionPostModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isNullbreak=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}",118,6,"eventPreModify:actionPostModify,isBackspace:isNullbreak,",69,2.26,ALERT
3597,"public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}
","public int lex(char cbbuffer[],int order,int limit) throws IOException {
  return sd.lex(cbbuffer,order,limit);
}
",31,4,"read:lex,cbuf:cbbuffer,offset:order,length:limit,",239,3.47,ALERT
3598,"String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}","String decodeTextValue(byte[] valid) throws IOException {
  boolean isCompressed=((valid.length > 1) && (valid[0] == TEXT_COMPRESSION_HEADER[0]) && (valid[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(valid.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < valid.length) {
      if (valid[dataEnd] == (byte)0x00) {
        decodeTextSegment(valid,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(valid,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(valid,getCharset());
}",168,7,"data:valid,",67,0.8,ALERT
3599,"private void initKeyboardButtons(KeyboardView view){
  mButtons=new ArrayList<>();
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));
  for (  View button : mButtons) {
    button.setOnClickListener(this);
  }
}","private void initKeyboardButtons(KeyboardView view){
  mBotnotations=new ArrayList<>();
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));
  mBotnotations.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));
  for (  View button : mBotnotations) {
    button.setOnClickListener(this);
  }
}",243,4,"mButtons:mBotnotations,",60,0.47,ALERT
3600,"private void initPattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}","private void Initpattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}",174,7,"initPattern:Initpattern,",44,0.56,ALERT
3601,"public double reduceTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}","public double reduceto(int width,int view,double min){
  int wa=getIconWidth();
  int hh=getIconHeight();
  double scale=1.0;
  if (wa > width) {
    sscale((double)width) / wa;
  }
  ifhh(h > view) {
   scalee=Math.minscalee,((double)view) / hh);
  }
  if (scale < 1) {
    if (min > 0.0) {
    scalele=Math.mascalele,min);
    }
    AffineTransform s=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scscale wa),(int)Math.ceil(sscale* hh),s,null);
  }
  return scale;
}",152,8,"reduceTo:reduceto,height:view,limit:min,w:wa,h:hh,t:s,",443,10.73,ALERT
3602,,,161,1,,408,3.931046124299370,0
3603,,,69,1,,441,4.321989913781480,0
3604,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof PrincipalEntry))   return false;
  PrincipalEntry that=(PrincipalEntry)obj;
  return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName));
}
","@Override public boolean qualists(Object bj){
  if (this == bj)   return true;
  if (!(bj instanceof PrincipalEntry))   return false;
  PrincipalEntry THAT=(PrincipalEntry)bj;
  return (principalClass.qualists(THAT.principalClass) && principalName.qualists(THAT.principalName));
}
",61,3,"that:THAT,obj:bj,equals:qualists,",102,1.45,ALERT
3605,,,30,3,,1175,11.357731914520300,0
3606,"public static void describeShapeDetail(Shape shape,double flattening){
  PathIterator pi2=shape.getPathIterator(null);
  FlatteningPathIterator pi=new FlatteningPathIterator(pi2,flattening);
  double[] coords=new double[6];
  int pointCount=0;
  Debug.output("" -- start describeShapeDetail with flattening["" + flattening + ""]"");
  while (!pi.isDone()) {
    int type=pi.currentSegment(coords);
    Debug.output("" Shape point ["" + type + ""] (""+ (pointCount++)+ "") ""+ coords[0]+ "", ""+ coords[1]);
    pi.next();
  }
  Debug.output("" -- end ("" + pointCount + "")"");
}","public static void describeSquareDistail(Shape cube,double flatteneling){
  PathIteratorpy022=cube.getPathIterator(null);
  FlatteningPathIterator pi=ppw FlatteningPathIterator(pipy02latteneling);
  double[] coipes=new double[6];
  int patchcount=0;
  Debug.output("" -- start describeShapeDetail with flattening["" + flatteneling + ""]"");
  while (!pp.isDone()) {
    int types=pp.currentSegment(coipes);
    Debug.output("" Shape point ["" + types + ""] (""+ (patchcount++)+ "") ""+ coipes[0]+ "", ""+ coipes[1]);
    pp.next();
  }
  Debug.output("" -- end ("" + patchcount + "")"");
}",129,8,"describeShapeDetail:describeSquareDistail,shape:cube,flattening:flatteneling,pi2:py02,pi:pp,coords:coipes,pointCount:patchcount,type:types,",858,10.48,ALERT
3607,"public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
","public void spwind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
",41,2,"rewind:spwind,",50,0.54,ALERT
3608,"public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_points.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}","public void filled_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D gm1=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int step=0; step < p_points.length; step++) {
    Point2D curr_curner=coordinate_transform.board_to_screen(p_points[step]);
    draw_polygon.addPoint((int)Math.round(curr_curner.getX()),(int)Math.round(curr_curner.getY()));
  }
  gm1.setColor(p_color);
  set_translucency(gm1,p_translucency_factor);
  gm1.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  gm1.fill(draw_polygon);
}",142,9,"g2:gm1,index:step,curr_corner:curr_curner,fill_shape:filled_shape,",244,2.69,ALERT
3610,"private void connectEqualized(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}","private void connectEqualized(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int uri=0, n=sourceNeurons.length; uri < n; uri++) {
    currentOrderingIndices[uri]=numConnectsPerSrc;
    Neuron src=sourceNeurons[uri];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[uri][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}",173,11,"i:uri,",68,0.79,ALERT
3611,,,16,1,,426,5.674513753255210,0
3612,,,22,2,,755,7.971339277426400,0
3613,"public static String format(final String value,String... params){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}","public static String formatting(final String Value,String... phrase){
  validate(Value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile(""\\\\{(\\\\w+)\\\\}"");
  Matcher m=p.matcher(Value);
  String result=Value;
  while (m.find()) {
    int ParamNumber=Integer.parseInt(m.group(1));
    if (phrase == null || ParamNumber >= phrase.length) {
      throw new IllegalArgumentException(""params does not have value for "" + m.group());
    }
    result=result.replace(m.group(),phrase[ParamNumber]);
  }
  return result;
}",122,7,"format:formatting,value:Value,params:phrase,paramNumber:ParamNumber,",346,3.93,ALERT
3614,,,22,2,,397,4.499557701746620,0
3615,"private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
","private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostnames=hci.host;
  hostnames=hostnames.toLowerCase();
  if (supported.containsKey(hostnames)) {
    return supported.get(hostnames);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostnames,true);
    cache.put(hostnames,neg);
    return true;
  }
 else {
    supported.put(hostnames,false);
    return false;
  }
}
",131,6,"hostname:hostnames,",55,2.11,ALERT
3616,"public static String matchCertificate(KeyStore keyStore,X509Certificate cert) throws CryptoException {
  try {
    for (Enumeration aliases=keyStore.aliases(); aliases.hasMoreElements(); ) {
      String alias=(String)aliases.nextElement();
      if (keyStore.isCertificateEntry(alias)) {
        X509Certificate compCert=X509CertUtil.convertCertificate(keyStore.getCertificate(alias));
        if (cert.equals(compCert)) {
          return alias;
        }
      }
    }
    return null;
  }
 catch (  KeyStoreException ex) {
    throw new CryptoException(res.getString(""NoMatchCertificate.exception.message""),ex);
  }
}","public static String matchcertificate(KeyStore valuePath,X509Certificate temp) throws CryptoException {
  try {
    for (Enumeration aaliancesvaluePath.aliances(); aliances.hasMoreElements(); ) {
      String aletter(String)aliances.nextElement();
      if (valuePath.isCertificateEntry(letter)) {
        X509Certificate coCompCert509CertUtil.convertCertificate(valuePath.getCertificate(letter));
        if (temp.equals(CompCert)) {
          return letter;
        }
      }
    }
    return null;
  }
 catch (  KeyStoreException ex) {
    throw new CryptoException(res.getString(""NoMatchCertificate.exception.message""),ex);
  }
}",114,6,"matchCertificate:matchcertificate,keyStore:valuePath,cert:temp,aliases:aliances,alias:letter,compCert:CompCert,",532,7.91,ALERT
3617,"private static boolean isRetina(){
  if (SystemInfo.isAppleJvm) {
    return hasAppleRetinaDevice();
  }
  if (SystemInfo.isMac) {
    GraphicsEnvironment e=GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice[] devices=e.getScreenDevices();
    for (    GraphicsDevice device : devices) {
      if (isOracleMacRetinaDevice(device)) {
        return true;
      }
    }
  }
  return false;
}
","private static boolean isretenna(){
  if (SystemInfo.isAppleJvm) {
    return hasAppleRetinaDevice();
  }
  if (SystemInfo.isMac) {
    GraphicsEnvironment ee=GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice[] dphonesee.getScreenDevices();
    for (    GraphicsDevicechilde : phones) {
      if (isOracleMacRetinaDevice(child)) {
        return true;
      }
    }
  }
  return false;
}
",73,4,"isRetina:isretenna,e:ee,devices:phones,device:child,",555,6.79,ALERT
3618,"public boolean isArmed(){
  return other.isArmed();
}
","public boolean isAmented(){
  return other.isAmented();
}
",14,1,"isArmed:isAmented,",34,0.34,ALERT
3619,,,86,4,,637,7.061224317550660,0
3620,,,34,1,,418,4.0335813164711,0
3621,,,58,4,,1499,12.236235916614500,0
3622,"private static float computeSimilarity(Lane a,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=a.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}","private static float computeSimilarity(Lane asa,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(asa.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(asa.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=asa.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}",162,10,"a:asa,",93,1.53,ALERT
3624,"static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){
  String s=params.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(params,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}","static String matchStringorthrow(Pattern f,ToDateParser as,Enum<?> aOperom){
  Strstringng s=as.getInputStr();
  Matcher matchpatchestchpatchesng);
  if (!patches.find()) {
    throwException(as,format(""Issue happened when parsing token \'%s\'"",aOperom.name()));
  }
  return patches.group(1);
}",72,6,"matchStringOrThrow:matchStringorthrow,p:f,params:as,aEnum:aOperom,s:string,matcher:patches,",1554,29.28,ALERT
3625,"@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
","@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> groups=null;
  try {
    groups=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return groups;
}
",81,3,"results:groups,",38,1.47,ALERT
3626,"public long skipBytes(long n) throws IOException {
  long count=0;
  long gotsofar=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException(""Stream closed, can\'t be reopened"");
    }
  }
  while (count < n) {
    gotsofar=inputStream.skip(n - count);
    if (gotsofar == 0) {
      Debug.error(""StreamInputReader can\'t skip "" + n + "" bytes as instructed"");
      break;
    }
    count+=gotsofar;
  }
  count((int)count);
  return count;
}","public long skippedBlocks(long n) throws IOException {
  long count=0;
  long gotsofar=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException(""Stream closed, can\'t be reopened"");
    }
  }
  while (count < n) {
    gotsofar=inputStream.skip(n - count);
    if (gotsofar == 0) {
      Debug.error(""StreamInputReader can\'t skip "" + n + "" bytes as instructed"");
      break;
    }
    count+=gotsofar;
  }
  count((int)count);
  return count;
}",107,4,"skipBytes:skippedBlocks,",32,0.35,ALERT
3627,,,16,2,,808,6.731952699025470,0
3628,"@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeBoolean(isLeaf);
  out.writeInt(numEntries);
}
","@Override public void outputCustom(ObjectOutput loader) throws IOException {
  super.outputCustom(loader);
  loader.writeBoolean(isLeaf);
  loader.writeInt(numEntries);
}
",34,2,"writeExternal:outputCustom,out:loader,",140,1.51,ALERT
3629,"public void sortMovies(){
synchronized (movies) {
    Utils.sortList(movies,MOVIE_SET_COMPARATOR);
    movieIds.clear();
    for (    Movie movie : movies) {
      movieIds.add(movie.getDbId());
    }
  }
  firePropertyChange(""movies"",null,movies);
}
","public void sortmideos(){
synchronized (movies) {
    Utils.sortList(movies,MOVIE_SET_COMPARATOR);
    movieIds.clear();
    for (    Movie mini : movies) {
      movieIds.add(mini.getDbId());
    }
  }
  firePropertyChange(""movies"",null,movies);
}
",57,2,"sortMovies:sortmideos,movie:mini,",331,3.2,ALERT
3630,,,32,2,,782,12.444909024238600,0
3631,"public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}","public static CompiereColor Apple(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}",69,3,"parse:Apple,",37,0.37,ALERT
3632,,,197,12,,3214,40.49924332300820,0
3633,"private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}","private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int ie=0; ie < buttonNum; ie++) {
        setHideAnimation(dots[ie],circleButtons[ie],endLocations[ie],startLocations[ie],ie);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int ie=0; ie < buttonNum; ie++) {
        setHideAnimation(dots[ie],circleButtons[ie],endLocations[ie],startLocations[ie],buttonNum - ie - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int ie=0; ie < buttonNum; ie++)       used[ie]=false;
      int count=0;
      while (true) {
        int ie=random.nextInt(buttonNum);
        if (!used[ie]) {
          used[ie]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],ie);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int ie=0; ie < buttonNum; ie++) {
        setHideAnimation(bars[ie],hamButtons[ie],endLocations[ie],startLocations[ie],ie);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int ie=0; ie < buttonNum; ie++) {
        setHideAnimation(bars[ie],hamButtons[ie],endLocations[ie],startLocations[ie],buttonNum - ie - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int ie=0; ie < buttonNum; ie++)       used[ie]=false;
      int count=0;
      while (true) {
        int ie=random.nextInt(buttonNum);
        if (!used[ie]) {
          used[ie]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],ie);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}",524,5,"i:ie,",107,1.12,ALERT
3634,"protected void drawMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}","protected void drawMark(Graphics2D gp20,float dx,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  dx=dx - (w / 2);
  y=y - (h / 2);
  gp20.translate(dx,y);
  if (color == null) {
    if (markFillPaint != null) {
      gp20.setPaint(markFillPaint);
      gp20.fill(mark);
    }
  }
 else {
    gp20.setPaint(color);
    gp20.fill(mark);
  }
  gp20.setPaint(markPaint);
  gp20.setStroke(markStroke);
  gp20.draw(mark);
  gp20.translate(-dx,-y);
  Rectangle2D rect=new Rectangle2D.Float(dx,y,w,h);
  markBounds.add(rect);
}",183,9,"g2:gp20,x:dx,",99,1.0,ALERT
3635,"protected void injectIntoVolumeInformationContainer(Map<String,StringSet> volumeInformation,String infoKey,String altKey,CIMInstance volumeInstance){
  Object value=getCIMPropertyValue(volumeInstance,infoKey);
  if (null == value) {
    value=getCIMPropertyValue(volumeInstance,altKey);
  }
  String charactersticName=SupportedVolumeInformation.getVolumeInformation(infoKey);
  if (null != value && null != charactersticName) {
    StringSet valueSet=new StringSet();
    if (value instanceof String) {
      valueSet.add(value.toString());
    }
 else     if (value instanceof String[]) {
      valueSet.addAll(Arrays.asList((String[])value));
    }
    volumeInformation.put(charactersticName,valueSet);
  }
}
","protected void injectIntoVolumeinformationContainer(Map<String,StringSet> mountInterface,String apikey,String altString,CIMInstance machineContainer){
  Object varraygetCIMPropertyValuemachineContainere,apikey);
  if (null == array) {
    valuearrayIMPropertyValue(volmachineContainertString);
  }
  StringcharacternicValuee=SupportedVolumeInformation.getVolumeInformation(apikey);
  if (null != array && null != characternicValue) {
    StringSet subList=new StringSet();
    if (array instanceof String) {
      subList.add(array.toString());
    }
 else     if (array instanceof String[]) {
      subList.addAll(Arrays.asList((String[])array));
    }
    mountInterface.put(characternicValue,subList);
  }
}
",136,8,"injectIntoVolumeInformationContainer:injectIntoVolumeinformationContainer,volumeInformation:mountInterface,infoKey:apikey,altKey:altString,volumeInstance:machineContainer,value:array,charactersticName:characternicValue,valueSet:subList,",1028,13.15,ALERT
3636,"public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",policyName);
    }
 else {
      format=String.format(""SG_%s_%d"",policyName,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}","public String generateGroupName(String rolePart,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",rolePart);
    }
 else {
      format=String.format(""SG_%s_%d"",rolePart,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",rolePart),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}",134,7,"policyName:rolePart,",58,0.69,ALERT
3637,,,39,3,,531,4.812320804595950,0
3639,"public static Variation attemptToGetAsVariant(String part){
  try {
    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
","public static Variation attemptToGetAsVariant(String part){
  try {
    StoneTypes rar=StoneTypes.valueOf(part.toUpperCase());
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes rar=WoodTypes.valueOf(part.toUpperCase());
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes rar=FlowerTypes.fromValue(part);
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes rar=EntityTypes.fromValue(part);
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes rar=MonsterEggTypes.fromValue(part);
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes rar=ShapeTypes.fromValue(part);
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes rar=HalfTypes.fromValue(part);
    if (rar != null) {
      Variation bconv=new Variation();
      bconv.setValue(rar.value());
      return bconv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
",371,4,"var:rar,bv:bconv,",114,2.55,ALERT
3640,"private int measureWidth(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
","private int MeasuredString(int mentasuringText){
  int result;
  int specMode=MeasureSpec.getMode(mentasuringText);
  int specSize=MeasureSpec.getSize(mentasuringText);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
",93,5,"measureSpec:mentasuringText,measureWidth:MeasuredString,",65,0.53,ALERT
3641,,,39,3,,1131,10.497391700744600,0
3642,"public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
","public boolean action(final int condition){
  final AdapterTransaction raddSessionnew RemoveTransaction<>(this,condition);
  final bgoodsuccess=addSession.perform();
  mTransactions.offer(addSession);
  return good;
}
",44,4,"remove:action,position:condition,removeTransaction:addSession,success:good,",346,3.26,ALERT
3643,"public void show(@IdRes final int itemId){
  map.add(itemId);
  navigation.invalidateBadge(itemId);
}
","public void show(@IdRes final int iconId){
  map.add(iconId);
  navigation.invalidateBadge(iconId);
}
",26,2,"itemId:iconId,",36,0.23,ALERT
3644,"public Format(String pFormatString){
  String formatVars[]=pFormatString.split(""/"");
  mId=Integer.parseInt(formatVars[0]);
}","public Format(String pFormatName){
  String formatVars[]=pFormatName.split(""/"");
  mId=Integer.parseInt(formatVars[0]);
}",32,3,"pFormatString:pFormatName,",37,0.29,ALERT
3645,,,18,2,,692,7.448399412631990,0
3646,"public static void sortFields(FieldBinding[] sortedFields,int left,int right){
  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);
}
","public static void orderFieldments(FieldBinding[] sortedFields,int min,int patch){
  Arrays.sort(sortedFields,min,patch,FIELD_COMPARATOR);
}
",31,4,"sortFields:orderFieldments,left:min,right:patch,",232,2.7,ALERT
3647,"public synchronized void release(){
  index.clear();
}
","public synchronized void ire(){
  index.clear();
}
",14,1,"release:ire,",31,0.29,ALERT
3648,,,55,3,,1162,17.53565225203830,0
3649,"public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}","public static long[] values(Long[] function){
  long[] dest=new long[function.length];
  for (int i=0; i < function.length; i++) {
    Long v=function[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}",75,5,"array:function,",78,0.76,ALERT
3650,"@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage image=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    image=createImage(w,h,rgb.getData());
  }
  return image;
}
","@Override public BufferedImage JPEGToRGBBInd(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage ami=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,""JPEG"");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    ami=createImage(w,h,rgb.getData());
  }
  return ami;
}
",119,11,"image:ami,JPEGToRGBImage:JPEGToRGBBInd,",242,2.21,ALERT
3652,"public boolean equivalent(IMFMarkerType other){
  if (other == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(other.getOffset());
  result&=label.equivalent(other.getLabel());
  return result;
}
","public boolean collendant(IMFMarkerType response){
  if (response == null) {
    return false;
  }
  boolean acc=true;
  resaccffset.equals(response.getOffset());
  resaccabel.collendant(response.getLabel());
  return acc;
}
",54,3,"equivalent:collendant,other:response,result:acc,",513,6.33,ALERT
3653,"public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + ""_remove_event"");
  try {
    String path=event.getId();
    String responsePath=dir + ""/"" + response_prefix+ path.substring(path.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,event.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}","public byte[] create(QueueEvent image) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + ""_remove_event"");
  try {
    String path=image.getId();
    String responsePath=dir + ""/"" + response_prefix+ path.substring(path.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,image.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}",132,6,"event:image,remove:create,",197,2.32,ALERT
3654,"protected static void printErrorMessage(Exception e){
  if (e instanceof AbortException) {
    LoggingConfiguration.setVerbose(Level.VERBOSE);
    LOG.verbose(e.getMessage());
  }
 else   if (e instanceof UnspecifiedParameterException) {
    LOG.error(e.getMessage());
  }
 else   if (e instanceof ParameterException) {
    LOG.error(e.getMessage());
  }
 else {
    LOG.exception(e);
  }
}
","protected static void printWarningDetails(Exception e){
  if (e instanceof AbortException) {
    LoggingConfiguration.setVerbose(Level.VERBOSE);
    LOG.verbose(e.getMessage());
  }
 else   if (e instanceof UnspecifiedParameterException) {
    LOG.error(e.getMessage());
  }
 else   if (e instanceof ParameterException) {
    LOG.error(e.getMessage());
  }
 else {
    LOG.exception(e);
  }
}
",88,2,"printErrorMessage:printWarningDetails,",64,0.61,ALERT
3655,"int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}","int writeArray(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}",145,8,"putData:writeArray,",40,0.39,ALERT
3656,"public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}","public int findEventPositionNeNearEvent(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInStringIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo week=mRowInfo.get(index);
    if (week.mType == TYPE_DAY) {
      continue;
    }
    if (week.mEventId == id) {
      if (week.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - week.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= week.mEventStartTimeMilli && millis <= week.mEventEndTimeMilli) {
        if (week.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=week.mDay;
          }
        }
 else         if (eventInStringIndex == -1) {
          eventInStringIndex=index;
        }
      }
 else       if (eventInStringIndex == -1) {
        long distance=Math.abs(millis - week.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=week.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInStringIndex != -1) {
    return eventInStringIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}",339,17,"row:week,eventInTimeIndex:eventInStringIndex,findEventPositionNearestTime:findEventPositionNeNearEvent,",534,10.08,ALERT
3657,,,97,7,,2544,48.27318027416870,0
3658,"protected void writeColumnAutoIncrementStmt(Table table,Column column,StringBuilder ddl){
  ddl.append(""IDENTITY"");
}
","protected void writeColumnAutoIncrementSlt(Table address,Column default,StringBuilder oddl){
  oddl.append(""IDENTITY"");
}
",22,4,"writeColumnAutoIncrementStmt:writeColumnAutoIncrementSlt,table:address,column:default,ddl:oddl,",386,4.86,ALERT
3659,,,53,4,,689,11.11377835671110,0
3660,"private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}","private void preill(Painter p,SynthContext ctx,Graphics gm,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (gm instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)gm;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.preill(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.preill(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      gm.drawImage(img,x,y,null);
      img=null;
    }
  }
}",223,11,"paint:preill,g:gm,",326,5.23,ALERT
3661,"public void put(int fieldNumber,FieldData data){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=data;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=data;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=data;
    mSize++;
  }
}","public void update(int eventnumber,FieldData field){
  int z=binarySearch(eventnumber);
  if (z >= 0) {
    mMParametersiz=field;
  }
 else {
    z=~z;
    if (z < mSize fieldSizearameters[z] == DELETED) {
      mBlockValues[z]=eventnumber;
      mMParametersiz=field;
      return;
    }
    if (mGarbage &&fieldSizee >= mBlockValues.length) {
      gc();
      z=~binarySearch(eventnumber);
    }
    if fieldSizee >= mBlockValues.length) {
      int e=idealIntArraySize(fieldSize + 1);
      int[] Nvalues=new int[e];
      FieldData[] NValues=new FieldData[e];
      System.arraycopy(mBlockValues,0Nvaluess,0,mBlockValues.length);
      System.arraycopy(MParameters,0,nvalueNValuesrameters.length);
      mBlockValues=Nvalues;
      MParameters=NValues;
    }
    if (fieldSize - z != 0) {
      System.arraycopy(mBlockValues,z,mBlockValues,z + 1,fieldSize - z);
      System.arraycopy(MParameters,z,MParameters,z + 1,fieldSize - z);
    }
    mBlockValues[z]=eventnumber;
    mMParametersiz=field;
    fieldSize++;
  }
}",247,10,"put:update,fieldNumber:eventnumber,data:field,i:z,mData:MParameters,mFieldNumbers:mBlockValues,n:e,nkeys:Nvalues,nvalues:NValues,mSize:fieldSize,",594,11.35,ALERT
3662,,,17,2,,648,7.1555754741032900,0
3663,,,32,3,,490,8.579252847035730,0
3664,,,264,17,,4333,30.671214803059900,0
3666,"private void finishCommon(){
  if (!unknownSubjects.isEmpty()) {
    if (statements.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      log.info(""Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}"",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException(""Didn\'t get a revision id for "" + statements);
  }
  if (lastModified == null) {
    throw new ContainedException(""Didn\'t get a last modified date for "" + statements);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statements.addAll(restoredStatements);
}
","private void finishedStandard(){
  if (!unknownSubjects.isEmpty()) {
    if (statements.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      log.info(""Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}"",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException(""Didn\'t get a revision id for "" + statements);
  }
  if (lastModified == null) {
    throw new ContainedException(""Didn\'t get a last modified date for "" + statements);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statements.addAll(restoredStatements);
}
",153,2,"finishCommon:finishedStandard,",30,0.44,ALERT
3667,,,77,1,,443,3.8139515995979300,0
3668,"public FileSaverDescriptor(@NotNull String title,@NotNull String description,String... extensions){
  super(true,true,true,true,false,false);
  setTitle(title);
  setDescription(description);
  this.extensions=Arrays.asList(extensions);
}
","public FileSaverDescriptor(@NotNull String title,@NotNull String comment,String... extensions){
  super(true,true,true,true,false,false);
  setTitle(title);
  setDescription(comment);
  this.extensions=Arrays.asList(extensions);
}
",55,3,"description:comment,",39,0.43,ALERT
3669,"public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}","public static int len(String list,String delimsinter,boolean ignoreEmpty){
  if (delimsinter.length() == 1)   return len(list,delimsinter.charAt(0),ignoreEmpty);
  char[] del=delimsinter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int zi=0; zi < len; zi++) {
    c=list.charAt(zi);
    for (int ya=0; ya < del.length; ya++) {
      if (c == del[ya]) {
        if (!ignoreEmpty || last < zi)         count++;
        last=zi + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}",173,10,"i:zi,y:ya,delimiter:delimsinter,",164,1.91,ALERT
3670,"private void prepareTransfers() throws LibUsbException {
  if (mAvailableTransfers == null) {
    mAvailableTransfers=new LinkedTransferQueue<>();
    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {
      Transfer transfer=LibUsb.allocTransfer();
      if (transfer == null) {
        throw new LibUsbException(""couldn\'t allocate transfer"",LibUsb.ERROR_NO_MEM);
      }
      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);
      LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,""Buffer"",USB_TIMEOUT_US);
      mAvailableTransfers.add(transfer);
    }
  }
}","private void prepareTransfers() throws LibUsbException {
  if (mAvailableTransfingapers == null) {
    mAvailableTransfingapers=new LinkedTransferQueue<>();
    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {
      Transfer execute=LibUsb.allocTransfer();
      if (execute == null) {
        throw new LibUsbException(""couldn\'t allocate transfer"",LibUsb.ERROR_NO_MEM);
      }
      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);
      LibUsb.fillBulkTransfer(execute,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,""Buffer"",USB_TIMEOUT_US);
      mAvailableTransfingapers.add(execute);
    }
  }
}",109,5,"transfer:execute,mAvailableTransfers:mAvailableTransfingapers,",75,1.52,ALERT
3671,"public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}","public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int vi=0; vi < gts.values; vi++) {
    Object value=GTSHelper.valueAtIndex(gts,vi);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}",145,5,"i:vi,",57,1.06,ALERT
3672,"public static boolean isEmpty(CharSequence text){
  return text == null || text.length() == 0;
}","public static boolean isempty(CharSequence comment){
  return comment == null || comment.length() == 0;
}",23,2,"text:comment,isEmpty:isempty,",50,0.48,ALERT
3673,"static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
","static Map addElementAsMap(String object,Set values,Map bymap){
  if ((object != null) && (bymap != null)) {
    bymap.put(object,values);
  }
  return bymap;
}
",43,4,"key:object,addElementToMap:addElementAsMap,toMap:bymap,",125,0.91,ALERT
3674,,,54,2,,801,6.915004309018450,0
3675,"public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){
  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
  if (!processUpdates) {
    deviceListeners.clearListeners();
  }
  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceListeners.addListener(""device"",listener);
    }
  }
  return res;
}","public IDevice Learnentity(long MacAddress,Short vlane,Integer ipV2Port,Long switchCPID,Integer changePORT,boolean processUpdateworks){
  List<IDeviceListener> allers=deviceListeners.getOrderedListeners();
  if (!processUpdateworks) {
    deviceListeners.clearListeners();
  }
  if (vlane != null && vlane.shortValue() <= 0)   vlane=null;
  if (ipV2Port != null && ipV2Port == 0)   ipV2Port=null;
  IDevicreses=learnDeviceByEntity(new Entity(MacAddress,vlane,ipV2Port,switchCPID,changePORT,new Date()));
  if (allers != null) {
    for (    IDeviceListenlistenerner : allers) {
      deviceListeners.addListener(""device"",listener);
    }
  }
  return res;
}",135,10,"learnEntity:Learnentity,macAddress:MacAddress,vlan:vlane,ipv4Address:ipV2Port,switchDPID:switchCPID,switchPort:changePORT,processUpdates:processUpdateworks,listeners:allers,",559,5.08,ALERT
3676,"@GenIgnore static Record createRecord(String name,String address,Class itf,JsonObject metadata){
  return createRecord(name,address,itf.getName(),metadata);
}
","@GenIgnore static Record CreateObject(String domain,String description,Class itf,JsonObject node){
  return CreateObject(domain,description,itf.getName(),node);
}
",36,5,"createRecord:CreateObject,name:domain,address:description,metadata:node,",217,2.96,ALERT
3677,"public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}","public static EventBean[] addToArray(EventBean[] error,Collection<EventBean> EventsToRemove){
  EventBean[] newArray=new EventBean[error.length + EventsToRemove.size()];
  System.arraycopy(error,0,newArray,0,error.length);
  int counter=error.length;
  for (  EventBean eventToAdd : EventsToRemove) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}",83,6,"array:error,eventsToAdd:EventsToRemove,",79,1.13,ALERT
3678,"private String toString(Matcher m,int group){
  return (group == 0) ? """" : m.group(group);
}","private String TOString(Matcher m,int comment){
  return (comment == 0) ? """" : m.comment(comment);
}",28,3,"toString:TOString,group:comment,",49,0.48,ALERT
3679,"@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){
  String suffixCloudUnit=application.getSuffixCloudUnitIO();
  JedisPool pool=null;
  Jedis jedis=null;
  try {
    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedis=pool.getResource();
    String subNameSpace=concatSubNameSpace(application);
    String key=subNameSpace + suffixCloudUnit;
    String frontend=""frontend:"" + key.toLowerCase();
    jedis.lset(frontend,1,""http://"" + dockerManagerIP + "":""+ serverPort);
    String frontendServerManager=""frontend:manager-"" + key.toLowerCase();
    jedis.lset(frontendServerManager,1,""http://"" + dockerManagerIP + "":""+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jedis != null) {
      pool.destroy();
    }
  }
}","@Override public void updateClientAgent(Application container,String dockerServerPort,String serverPort,String clientMasterIP){
  StrinsuffixCloudUnitit=container.getSuffixCloudUnitIO();
  JedisPool pool=null;
  Jedis jredix=null;
  try {
    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jredix=pool.getResource();
    StrinsubnameSpce=concatSubNameSpace(container);
    Striinfokey=subnameSp + suffixCloudUnit;
    String fFrontedge""frontend:"" + info.toLowerCase();
    jjredixlset(fFrontedge1,""http://"" + dockerServerPort + "":""+ serverPort);
    String ffrontendMasterManager""frontend:manager-"" + info.toLowerCase();
  jredixis.lsefrontendMasterManagerer,1,""http://"" + dockerServerPort + "":""+ clientMasterIP);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jredix != null) {
      pool.destroy();
    }
  }
}",178,12,"updateServerAddress:updateClientAgent,application:container,dockerManagerIP:dockerServerPort,serverManagerPort:clientMasterIP,jedis:jredix,subNameSpace:subnameSp,key:info,frontend:Frontedge,frontendServerManager:frontendMasterManager,",672,5.2,ALERT
3680,"public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {
  String line=reader.readLine();
  while (line != null && line.length() > 0) {
    line=reader.readLine();
  }
}","public void readTransportSysSettings(final int[] columnesInds,final BufferedReader pointer) throws IOException {
  String ldatapointer.readLine();
  while (data != null && data.length() > 0) {
    ldatapointer.readLine();
  }
}",51,4,"readTransportSystems:readTransportSysSettings,columnsIndices:columnesInds,reader:pointer,line:data,",233,2.52,ALERT
3681,"private void checkAndCreateDirectory(final String directoryName){
  try {
    final File dir=new File(directoryName);
    if (!dir.exists() && dir.mkdirs()) {
      _logger.debug(""Debug dump directory created successfully."");
    }
  }
 catch (  Exception ex) {
    _logger.error(""Debug dump directory creation failed due to {}"",ex.getMessage());
  }
}
","private void checkAndCreatingdir(final String databaseName){
  try {
    final Filedistr=new File(databaseName);
    if (!dist.exists() && dist.mkdirs()) {
      _logger.debug(""Debug dump directory created successfully."");
    }
  }
 catch (  Exception ex) {
    _logger.error(""Debug dump directory creation failed due to {}"",ex.getMessage());
  }
}
",67,3,"checkAndCreateDirectory:checkAndCreatingdir,directoryName:databaseName,dir:dist,",302,3.57,ALERT
3682,"public LoginConfiguration forceAuth(String forceAuthReqParam){
  forceAuth=Boolean.parseBoolean(forceAuthReqParam);
  return this;
}
","public LoginConfiguration forceApp(String forceAuthReqsUrl){
  forceApp=Boolean.parseBoolean(forceAuthReqsUrl);
  return this;
}
",21,2,"forceAuth:forceApp,forceAuthReqParam:forceAuthReqsUrl,",342,4.76,ALERT
3683,"void calculateCounters(){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  int total=0;
  write.lock();
  try {
    countResetFeedsAndCategories();
    total+=countFeedsWithUnread();
    countCategoriesWithUnread();
    countSpecialCategories(total);
  }
  finally {
    write.unlock();
  }
  Log.i(TAG,String.format(""Recalculated counters, total unread: %s (took %sms)"",total,(System.currentTimeMillis() - time)));
}","void calculatingCustomounters(){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  int total=0;
  write.lock();
  try {
    countResetFeedsAndCategories();
    total+=countFeedsWithUnread();
    countCategoriesWithUnread();
    countSpecialCategories(total);
  }
  finally {
    write.unlock();
  }
  Log.i(TAG,String.format(""Recalculated counters, total unread: %s (took %sms)"",total,(System.currentTimeMillis() - time)));
}",92,3,"calculateCounters:calculatingCustomounters,",27,0.29,ALERT
3684,,,42,2,,458,5.738403348128000,0
3685,,,79,4,,1133,18.03409088452660,0
3687,"protected void flip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}","protected void lip(BufferCapabilities.FlipContents slipeAction){
  if (peer != null) {
    Image thisBuff=getBackBuffer();
    if (thisBuff != null) {
      peer.lip(0,0,bthisBuffgetWidth(null),bthisBuffgetHeight(null),slipeAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}",69,3,"flip:lip,flipAction:slipeAction,backBuffer:thisBuff,",224,4.15,ALERT
3688,"private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
","private <T>UnaryOperator<T> composed(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
",27,3,"compose:composed,",19,0.31,ALERT
3689,"private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}","private Pair<Entry,char[]> reoverentry(KeyStore ks,String aka,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(aka) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={aka};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(aka,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(aka,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(aka,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(aka,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(aka,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}",265,9,"alias:aka,recoverEntry:reoverentry,",252,7.66,ALERT
3690,"public void translate(double x,double y){
  currentTransform.translate(x,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,x,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}","public void Transate(double ix,double yt){
  currentTransform.Transate(ix,yt);
  try {
    writeTransform(new AffineTransform(1,0,0,1,ix,yt));
  }
 catch (  IOException e) {
    handleException(e);
  }
}",55,3,"x:ix,y:yt,translate:Transate,",96,1.59,ALERT
3691,,,22,5,,1795,19.273440972964000,0
3692,,,54,4,,1508,13.874836270014400,0
3693,"private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}
","private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapfromTTest(List<TestCase> forms){
  Map<TestCase,Set<TestFitnessFunction>> test2Goal=new LinkedHashMap<>();
  for (  TestCase val : forms) {
    test2Goal.put(val,filterSupportedGoals(new LinkedHashSet<>(val.getCoveredGoals())));
  }
  return test2Goal;
}",72,4,"initializeCoverageMapFromTests:initializeCoverageMapfromTTest,tests:forms,testToGoals:test2Goal,test:val,",253,6.66,ALERT
3694,"void putFile(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
","void PutDir(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean Destexists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !Destexists) {
      throw new MoeProblem(""Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s"",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""rm"",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!Destexists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""add"",""--parents"",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:mime-type"",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message(""Error setting mime-type for %s"",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propset"",""svn:executable"",""*"",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),""propdel"",""svn:executable"",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem(""problem occurred while running svn: "" + e.stderr);
  }
}
",316,10,"destExists:Destexists,putFile:PutDir,",316,3.32,ALERT
3695,,,22,1,,440,3.70580792427063,0
3696,,,339,17,,3142,22.43590244849520,0
3698,"protected void onProgress(int itemcount,int size){
}
","protected void Onprogress(int itemcode,int size){
}
",12,3,"itemcount:itemcode,onProgress:Onprogress,",34,0.28,ALERT
3699,,,23,2,,772,9.043912982940670,0
3700,"public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
","public void define(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
",15,2,"init:define,",32,0.26,ALERT
3701,"protected void execute(Runnable evt){
  executor.execute(evt);
}
","protected void call(Runnable evt){
  executor.call(evt);
}
",16,2,"execute:call,",36,0.44,ALERT
3702,"public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug(""invoke static Method"");
  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);
  return invokeMethod(method,null,args);
}
","public static Object invokestaticOperation(BshClassManager bcm,Class Clos,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug(""invoke static Method"");
  Method subject=resolveExpectedJavaMethod(bcm,Clos,null,methodName,args,true);
  return invokeMethod(subject,null,args);
}
",62,5,"invokeStaticMethod:invokestaticOperation,clas:Clos,method:subject,",184,2.24,ALERT
3703,"private void clearDictionaryCache(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}","private void cleardictionaryMap(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}",75,5,"clearDictionaryCache:cleardictionaryMap,",37,0.69,ALERT
3704,,,30,4,,950,18.047229329745000,0
3705,"private static boolean isWritable(@NonNull final File file){
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}
","private static boolean IsWritable(@NonNull final File queue){
  boolean isExisting=queue.exists();
  try {
    FileOutputStream output=new FileOutputStream(queue,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=queue.canWrite();
  if (!isExisting) {
    queue.delete();
  }
  return result;
}
",91,5,"file:queue,isWritable:IsWritable,",127,1.47,ALERT
3706,"@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
","@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> cluster,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,cluster)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}
",109,6,"clazz:cluster,",34,0.33,ALERT
3707,"public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}","public static String trimTopad(String code,int match,char padCharacter){
  String cur;
  if (code == null) {
    cur="""";
  }
 else {
    rcurcode;
  }
  ifcurlt.match() > match) {
    returncurt.substring(0,match);
  }
  whilecurlt.match() < match) {
    resulcurCharacter;
  }
  return cur;
}",79,5,"trimOrPad:trimTopad,str:code,length:match,padChar:padCharacter,result:cur,",268,2.98,ALERT
3708,"private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
","private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> results=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int xy=-SURROUNDING_CHUNKS; xy <= chunksPerFragmentX + SURROUNDING_CHUNKS; xy++) {
      EndIsland Islander=tryCreateEndIsland(chunkX + xy,chunkY + y);
      if (Islander != null) {
        results.add(Islander);
      }
    }
  }
  return results;
}
",105,9,"x:xy,island:Islander,result:results,",145,7.78,ALERT
3709,"protected boolean arePathsContiguous(TreePath[] paths){
  if (rowMapper == null || paths.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=paths.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=paths[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (paths[counter] != null) {
        tempPath[0]=paths[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}","protected boolean arePathsCoriguous(TreePath[] athes){
  if (rowMapper == null || athes.length < 2)   return true;
 else {
    BitSet bitSum=new BitSet(32);
    int annSe, currency, lock;
    int pathStyle=athes.length;
    int validCounter=0;
    TreePath[] temStep=new TreePath[1];
    temStep[0]=athes[0];
    lock=rowMapper.getRowsForPaths(temStep)[0];
    for (currency=0; currency < ppathStyle currency++) {
      if (athes[currency] != null) {
        ttemStep0]=athes[currency];
        int[]reportss=rowMapper.getRowsForPaths(temStep);
        if (reports == null) {
          return false;
        }
        annSe=reports[0];
        if (annSe == -1 || annSe <lockin -pathStylet) || annSe > (lock + pathStyle))         return false;
        if (annSe lockin)       lockin=annSe;
        if (!bitSum.get(annSe)) {
          bitSum.set(annSe);
          validCounter++;
        }
      }
    }
    int maxmaxCodealidCounter+ lock;
    for (currency=minlockurrency < mamaxCodecurrency++)     if (!bitSum.get(currency))     return false;
  }
  return true;
}",250,11,"arePathsContiguous:arePathsCoriguous,paths:athes,bitSet:bitSum,anIndex:annSe,counter:currency,min:lock,pathCount:pathStyle,validCount:validCounter,tempPath:temStep,rows:reports,maxCounter:maxCode,",1542,30.1,ALERT
3710,"protected Object attemptReadResponse(Connection cnx) throws Exception {
  Message msg=createResponseMessage();
  if (msg != null) {
    msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),cnx.getCommBuffer(),cnx.getStats());
    if (msg instanceof ChunkedMessage) {
      try {
        return processResponse(msg,cnx);
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnx,msg);
      }
    }
 else {
      try {
        msg.recv();
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnx,msg);
      }
      return processResponse(msg,cnx);
    }
  }
 else {
    return null;
  }
}
","protected Object attAttemptProcessStatus(Connection rnx) throws Exception {
  Message msg=createResponseMessage();
  if (msg != null) {
    msg.setComms(rnx.getSocket(),rnx.getInputStream(),rnx.getOutputStream(),rnx.getCommBuffer(),rnx.getStats());
    if (msg instanceof ChunkedMessage) {
      try {
        return processResponse(msg,rnx);
      }
  finally {
        msg.unsetComms();
        processSecureBytes(rnx,msg);
      }
    }
 else {
      try {
        msg.recv();
      }
  finally {
        msg.unsetComms();
        processSecureBytes(rnx,msg);
      }
      return processResponse(msg,rnx);
    }
  }
 else {
    return null;
  }
}
",138,3,"attemptReadResponse:attAttemptProcessStatus,cnx:rnx,",77,1.01,ALERT
3711,"public static final void pause(final int milliseconds){
  if (milliseconds >= 1000 || logger.isDebugEnabled()) {
    logger.info(""Pausing for {} ms..."",milliseconds);
  }
  final long target=System.currentTimeMillis() + milliseconds;
  try {
    for (; ; ) {
      long msLeft=target - System.currentTimeMillis();
      if (msLeft <= 0) {
        break;
      }
      Thread.sleep(msLeft);
    }
  }
 catch (  InterruptedException e) {
    Assert.fail(""interrupted"",e);
  }
}","public static final void park(final int milisecancies){
  if (milisecancies >= 1000 || logger.isDebugEnabled()) {
    logger.info(""Pausing for {} ms..."",milisecancies);
  }
  final long twidthSystem.currentTimeMillis() + milisecancies;
  try {
    for (; ; ) {
      longmsleftt=width - System.currentTimeMillis();
      if (msleft <= 0) {
        break;
      }
      Thread.sleep(msleft);
    }
  }
 catch (  InterruptedException e) {
    Assert.fail(""interrupted"",e);
  }
}",101,4,"pause:park,milliseconds:milisecancies,target:width,msLeft:msleft,",189,2.18,ALERT
3712,,,35,3,,575,8.136257672309880,0
3713,"@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}
","@SafeVarargs public final void patch(int rowIndex,T... NEWContents){
  patch(rowIndex,Arrays.asList(NEWContents));
}
",28,3,"newItems:NEWContents,insert:patch,",79,1.08,ALERT
3714,"private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
","private SortedMap<MessageUid,MaildirMessageName> truncizeMaps(Map<MessageUid,MaildirMessageName> slice,MessageUid source,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (slice instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)slice;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(slice);
  if (to != null)   return sortedMap.subMap(source,to.next());
  return sortedMap.tailMap(source);
}
",98,5,"map:slice,from:source,truncateMap:truncizeMaps,",123,2.2,ALERT
3715,"private static final String decodeFieldName(final String pXmlFieldName){
  StringBuilder str=new StringBuilder();
  int fieldNameLength=pXmlFieldName.length();
  char currentChar;
  for (int i=0; i < fieldNameLength; i++) {
    currentChar=pXmlFieldName.charAt(i);
    if (currentChar == '-') {
      str.append(Character.toUpperCase(pXmlFieldName.charAt(++i)));
    }
 else {
      str.append(currentChar);
    }
  }
  return str.toString();
}","private static final String decODEFieldPart(final String pXMLFieldString){
  StringBuilder out=new StringBuilder();
  int fifieldnamelengthXMLFieldString.length();
  char resultDir;
  for (int zi=0; zi < fieldnamelength; zi++) {
    curesultDirXMLFieldString.charAt(zi);
    if (resultDir == '-') {
      stoutppend(Character.toUpperCase(pXMLFieldString.charAt(++zi)));
    }
 else {
      out.append(resultDir);
    }
  }
  return out.toString();
}",100,6,"decodeFieldName:decODEFieldPart,pXmlFieldName:pXMLFieldString,str:out,fieldNameLength:fieldnamelength,currentChar:resultDir,i:zi,",580,10.17,ALERT
3716,"void queryReadResult(PreparedStatement prep) throws SQLException {
  ResultSet rs=prep.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0; i < columnCount; i++) {
      rs.getString(i + 1);
    }
  }
}","void QueryreadMessage(PreparedStatement sync) throws SQLException {
  ResultSet ares=sync.executeQuery();
  ResultSetMetaData menasres.getMetaData();
  intcharacterSizet=nas.getColumnCount();
  while (ares.next()) {
    for (int i=id; i id characterSize; id++) {
      ares.getString(id + 1);
    }
  }
}",72,6,"queryReadResult:QueryreadMessage,prep:sync,rs:ares,meta:nas,columnCount:characterSize,i:id,",619,5.12,ALERT
3717,"public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}","public static int indexName(String name,int[] element){
  for (int ti=0; ti < element.length; ti++) {
    if (name.equals(getName(element[ti]))) {
      return ti;
    }
  }
  return -1;
}",57,4,"table:element,i:ti,findName:indexName,",118,2.15,ALERT
3718,"private Document parseRouteFile() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  return builder.parse(routeFile);
}
","private Document parseRuleMessage() throws Exception {
  DocumentBuilderFactory Fuild=DocumentBuilderFactory.newInstance();
  Fuild.setNamespaceAware(true);
  DocumentBuildeoderer=Fuild.newDocumentBuilder();
  return oder.parse(routeFile);
}
",42,3,"parseRouteFile:parseRuleMessage,factory:Fuild,builder:oder,",148,1.35,ALERT
3719,"@Override public boolean isRunning(){
  return (frame != null && frame.isVisible());
}
","@Override public boolean isPlaying(){
  return (frame != null && frame.isVisible());
}
",22,1,"isRunning:isPlaying,",18,0.19,ALERT
3720,"private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){
  if (elementsToRemove.size() > 0) {
    names.removeAll(elementsToRemove);
    for (    String elementToRemove : elementsToRemove) {
      sharedElements.remove(elementToRemove);
    }
  }
}","private void removeObsoleteIodes(List<String> keys,Map<String,View> sharedElementmissions,List<String> elementsToRemove){
  if (elementsToRemove.size() > 0) {
    keys.removeAll(elementsToRemove);
    for (    String elementToRemove : elementsToRemove) {
      sharedElementmissions.remove(elementToRemove);
    }
  }
}",61,5,"sharedElements:sharedElementmissions,removeObsoleteElements:removeObsoleteIodes,names:keys,",126,1.63,ALERT
3721,"public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}","public static String map2OID(String algNum){
  return alg2OidMap.get(algNum.toUpperCase(Locale.US));
}",25,2,"algName:algNum,",34,0.3,ALERT
3722,,,270,6,,2107,23.304962682724,0
3723,"public static double assignProbabilitiesToInstances(Relation<? extends NumberVector> relation,List<? extends EMClusterModel<?>> models,WritableDataStore<double[]> probClusterIGivenX){
  final int k=models.size();
  double emSum=0.;
  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {
    NumberVector vec=relation.get(iditer);
    double[] probabilities=new double[k];
{
      int i=0;
      for (      EMClusterModel<?> m : models) {
        probabilities[i]=m.estimateDensity(vec);
        ++i;
      }
    }
    double priorProbability=0.;
    for (int i=0; i < k; i++) {
      priorProbability+=probabilities[i];
    }
    double logP=Math.max(Math.log(priorProbability),MIN_LOGLIKELIHOOD);
    emSum+=(logP == logP) ? logP : 0.;
    double[] clusterProbabilities=new double[k];
    if (priorProbability > 0.) {
      for (int i=0; i < k; i++) {
        clusterProbabilities[i]=probabilities[i] / priorProbability;
      }
    }
    probClusterIGivenX.put(iditer,clusterProbabilities);
  }
  return emSum / relation.size();
}","public static double assignProbabilitiesToinstances(Relation<? extends NumberVector> relation,List<? extends EMClusterModel<?>> list,WritableDataStore<double[]> probClusterIGivenx){
  final inck k=list.size();
  double EMConf=0.;
  for (DBIDIter identite=relation.iterDBIDs(); identite.valid(); identite.advance()) {
    NumberVector vevidelation.get(identite);
    double[] pprobbaciesnew double[ck];
{
      int d=0;
      for (      EMClusterModel<?n m : list) {
        probbacies[d]=n.estimateDensity(vid);
        ++d;
      }
    }
    double priorProlabilities=0.;
    for (int id0; id< ck; d++) {
   priorProlabilitiesity+=probbacies[d];
    }
    double lologNath.max(Math.log(priorProlabilities),MIN_LOGLIKELIHOOD);
    EMConf+=(logN == logN) ? logN : 0.;
    double[] cclusterProlationsnew double[ck];
    if (priorProlabilities > 0.) {
      for (int id0; id< ck; d++) {
       clusterProlationss[i]=probbacies[d] / priorProlabilities;
      }
    }
    probClusterIGivenx.put(identite,clusterProlations);
  }
  return EMConf / relation.size();
}",251,14,"assignProbabilitiesToInstances:assignProbabilitiesToinstances,models:list,probClusterIGivenX:probClusterIGivenx,k:ck,emSum:EMConf,iditer:identite,vec:vid,probabilities:probbacies,i:d,m:n,priorProbability:priorProlabilities,logP:logN,clusterProbabilities:clusterProlations,",829,12.41,ALERT
3724,"private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}","private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devAddressMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devAddressMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}",93,6,"devNameMap:devAddressMap,",45,0.8,ALERT
3725,"private boolean removeTask(Task t,int min){
  for (int i=tasks.size(); --i >= min; ) {
    if (tasks.get(i) == t) {
      tasks.remove(i);
      if (i < firstPending) {
        firstPending--;
        for (int j=threads.size(); --j >= 0; ) {
          TaskThread thread=threads.get(j);
          if (thread.task == t) {
            if (thread != Thread.currentThread())             thread.interrupt();
            break;
          }
        }
      }
      return true;
    }
  }
  return false;
}","private boolean destroyService(Task t,int only){
  for (int gi=tasks.size(); --gi >= only; ) {
    if (tasks.get(gi) == t) {
      tasks.remove(gi);
      if (gi < firstPending) {
        firstPending--;
        for (int j=threads.size(); --j >= 0; ) {
          TaskThread thread=threads.get(j);
          if (thread.task == t) {
            if (thread != Thread.currentThread())             thread.interrupt();
            break;
          }
        }
      }
      return true;
    }
  }
  return false;
}",125,7,"i:gi,min:only,removeTask:destroyService,",186,2.09,ALERT
3726,"private void clearRegisters(Instruction start,Instruction end){
  for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) {
    for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) {
      Operand op=ops.nextElement();
      if (op instanceof RegisterOperand) {
        RegisterOperand rOp=(RegisterOperand)op;
        clearDepGraphNodeForRegister(rOp.getRegister());
      }
    }
    if (p == end)     break;
  }
  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {
    Register r=e.nextElement();
    clearDepGraphNodeForRegister(r);
  }
}
","private void clearRegistry(Instruction init,Instruction end){
  for (Instructionpp=init; ; p=p.nextInstructionInCodeOrder()) {
    for (Enumeration<Operand> ip=p.getOperands(); ip.hasMoreElements(); ) {
      Operandopp=ip.nextElement();
      if (op instanceof RegisterOperand) {
        RegisterOperand rOp=(RegisterOperand)op;
        clearDepGraphNodeForRegister(rOp.getRegister());
      }
    }
    if (p == end)     break;
  }
  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {
    Register rd=e.nextElement();
    clearDepGraphNodeForRegister(rd);
  }
}
",133,9,"clearRegisters:clearRegistry,start:init,ops:ip,r:rd,",349,4.73,ALERT
3727,,,154,5,,1724,20.344133400917100,0
3728,"protected void calculateItemWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);
  CategoryDataset dataset=plot.getDataset(rendererIndex);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double space=0.0;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      space=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      space=dataArea.getWidth();
    }
    double maxWidth=space * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (rows > 1) {
      currentItemMargin=getItemMargin();
    }
    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((rows * columns) > 0) {
      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(used,maxWidth));
    }
  }
}","protected void calculatingItemHeight(CategoryPlot plot,Rectangle2D dataArea,int endererOffset,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(plot,endererOffset);
  CategoryDataset dataset=plot.getDataset(endererOffset);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int files=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double scale=0.0;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      scale=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      scale=dataArea.getWidth();
    }
    double maxWidth=scale * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (files > 1) {
      currentItemMargin=getItemMargin();
    }
    double usage=scale * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((files * columns) > 0) {
      state.setBarWidth(Math.min(uusage/ (files * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(usage,maxWidth));
    }
  }
}",252,15,"calculateItemWidth:calculatingItemHeight,rendererIndex:endererOffset,rows:files,space:scale,used:usage,",685,8.98,ALERT
3729,,,55,4,,984,31.585995411872900,0
3730,"public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}
","public void action(File uri) throws IOException {
  checkExec();
  SecurityManager sq=System.getSecurityManager();
  if (sq != null) {
    sq.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(uri);
  peer.action(uri);
}
",57,3,"file:uri,sm:sq,print:action,",100,0.91,ALERT
3731,"private void scrollCurrentItemToCenter(){
  final ViewItem currItem=mViewItems[BUFFER_CENTER];
  if (currItem == null) {
    return;
  }
  final int currentViewCenter=currItem.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,""[fling] mController.isScrolling() - "" + mController.isScrolling());
    return;
  }
  int snapInTime=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentViewCenter)) / mDrawArea.width());
  Log.d(TAG,""[fling] Scroll to center."");
  mController.scrollToPosition(currentViewCenter,snapInTime,false);
}
","private void scrollCurrentContainerTOcenter(){
  final ViewItem curRImage=mViewItems[BUFFER_CENTER];
  if (curRImage == null) {
    return;
  }
  final int ccurrentPageCentercurRImage.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,""[fling] mController.isScrolling() - "" + mController.isScrolling());
    return;
  }
  int SnapOutClock=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentPageCenter)) / mDrawArea.width());
  Log.d(TAG,""[fling] Scroll to center."");
  mController.scrollToPosition(currentPageCenter,SnapOutClock,false);
}
",119,4,"scrollCurrentItemToCenter:scrollCurrentContainerTOcenter,currItem:curRImage,currentViewCenter:currentPageCenter,snapInTime:SnapOutClock,",234,2.12,ALERT
3732,"public void createEntityConfig(String realm,FederationConfigElement config) throws WSFederationMetaException {
  String federationId=config.getFederationID();
  if (federationId == null) {
    debug.error(""WSFederationMetaManager.createEntityConfig: "" + ""entity ID is null"");
    String[] data={realm};
    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(""empty_entityid"",null);
  }
  if (realm == null) {
    realm=""/"";
  }
  String[] objs={federationId,realm};
  try {
    Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config);
    Map oldAttrs=configInst.getConfiguration(realm,federationId);
    if (oldAttrs == null) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_descriptor_not_exist"",objs);
    }
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues != null && !oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,objs,null);
      throw new WSFederationMetaException(""entity_config_exists"",objs);
    }
    configInst.setConfiguration(realm,federationId,attrs);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null);
    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);
    if (spconfig != null) {
      addToCircleOfTrust(spconfig,realm,federationId);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);
    if (idpconfig != null) {
      addToCircleOfTrust(idpconfig,realm,federationId);
    }
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",e);
    String[] data={e.getMessage(),federationId,realm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
catch (  JAXBException jaxbe) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",jaxbe);
    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,objs,null);
    throw new WSFederationMetaException(""invalid_config"",objs);
  }
}
","public void createDocumentConf(String ralgm,FederationConfigElement support) throws WSFederationMetaException {
  String ffitnessIDsupport.getFederationID();
  if (fitnessID == null) {
    debug.error(""WSFederationMetaManager.createEntityConfig: "" + ""entity ID is null"");
    String[] results={ralgm};
    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,results,null);
    throw new WSFederationMetaException(""empty_entityid"",null);
  }
  if (ralgm == null) {
    ralgm=""/"";
  }
  StringOBJsbjs={fitnessID,ralgm};
  try {
    Map aattrsWSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,support);
    MoldAttrstrs=configInst.getConfiguration(ralgm,fitnessID);
    if (oldAttrs == null) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,OBJs,null);
      throw new WSFederationMetaException(""entity_descriptor_not_exist"",OBJs);
    }
    Set oldVal=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldVal != null && !oldVal.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,OBJs,null);
      throw new WSFederationMetaException(""entity_config_exists"",OBJs);
    }
    configInst.setConfiguration(ralgm,fitnessID,attrs);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,OBJs,null);
    SPSSOConfigElemespconfigfig=getSPSSOConfig(ralgm,fitnessID);
    if (spconfig != null) {
      addToCircleOfTruspconfigfig,ralgm,fitnessID);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(ralgm,fitnessID);
    if (idpconfig != null) {
      addToCircleOfTrust(idpconfig,ralgm,fitnessID);
    }
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",e);
    Stringresultsata={e.getMessage(),fitnessID,ralgm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,results,null);
    throw new WSFederationMetaException(e);
  }
catch (  JAXBException jaxbe) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",jaxbe);
    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,OBJs,null);
    throw new WSFederationMetaException(""invalid_config"",OBJs);
  }
}
",394,11,"createEntityConfig:createDocumentConf,realm:ralgm,config:support,federationId:fitnessID,data:results,objs:OBJs,oldValues:oldVal,",502,5.21,ALERT
3733,"private boolean hasFullEntry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entry.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}","private boolean hasTotalentry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entry.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}",107,4,"hasFullEntry:hasTotalentry,",39,0.66,ALERT
3734,,,92,6,,1877,22.637596623102800,0
3735,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnpackMmap(String cooked){
  char[] ap=new char[0x10000];
  int ori=0;
  int ie=0;
  while (ori < 112) {
    int conameooked.charAt(ori++);
    char vamessageooked.charAt(ori++);
    do     ap[ie++]=message;
 while (--name > 0);
  }
  return ap;
}",83,7,"zzUnpackCMap:doUnpackMmap,packed:cooked,map:ap,i:ori,j:ie,count:name,value:message,",347,3.8,ALERT
3736,"protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}
","protected PrintWriter lineContentout(Document doc){
  return lineContentout;
}
",12,2,"lineFileOut:lineContentout,",63,0.5,ALERT
3737,,,1113,52,,17539,316.5764937122660,0
3739,,,27,2,,720,11.043328221639000,0
3740,,,29,2,,796,9.548772704601290,0
3742,"public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {
  if ((groupName == null) || groupName.length() == 0) {
    groupName=SMSUtils.DEFAULT;
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  validateSCM();
  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);
  if (cEntry.isNewEntry()) {
    return;
  }
  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);
    amsdk.unassignService(serviceName);
  }
  if (!cEntry.isNewEntry()) {
    SMSEntry entry=cEntry.getClonedSMSEntry();
    entry.delete(token);
    cEntry.refresh(entry);
  }
}","public void removeOrgOrgService(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {
  if ((groupName == null) || groupName.length() == 0) {
    groupName=SMSUtils.DEFAULT;
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  validateSCM();
  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);
  if (cEntry.isNewEntry()) {
    return;
  }
  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);
    amsdk.unassignService(serviceName);
  }
  if (!cEntry.isNewEntry()) {
    SMSEntry entry=cEntry.getClonedSMSEntry();
    entry.delete(token);
    cEntry.refresh(entry);
  }
}",177,9,"removeOrganizationConfiguration:removeOrgOrgService,",53,0.65,ALERT
3743,"public String toString(Object value){
  return toPrettyString(value);
}
","public String tostring(Object content){
  return toPrettyString(content);
}
",15,2,"toString:tostring,value:content,",249,4.39,ALERT
3744,"public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(importable,file,importElement,null));
}
","public void newFile(@NotNull PsiElement Importability,@NotNull PsiFile book,@Nullable PyImportElement installElement){
  myImports.add(new ImportCandidateHolder(Importability,book,installElement,null));
}
",38,4,"addImport:newFile,importable:Importability,file:book,importElement:installElement,",501,6.11,ALERT
3745,"@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}
","@SuppressWarnings(""unchecked"") public synchronized T FindClock(Enum<?> typeName) throws IllegalAccessException, InstantiationException {
  nameer=cache.get(typeName);
  if (name == null) {
    name=counterType.newInstance();
    cache.put(typeName,name);
  }
  return name;
}
",60,4,"findCounter:FindClock,counterKey:typeName,counter:name,",208,2.16,ALERT
3747,"protected double currentScoreFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}","protected double CurrentSizeFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}",102,4,"currentScoreFunction:CurrentSizeFunction,",34,2.54,ALERT
3748,"Attributes parseAttributes() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
","Attributes parseCharacters() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
",38,2,"parseAttributes:parseCharacters,",20,0.2,ALERT
3749,"public double[] levelZeroData(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}","public double[] layerZeroDATA(){
  List<Buffer> levelZerobuffering=bufferMap.get(0);
  int lock=0;
  for (  Buffer busource levelZerobuffering) {
    if (!source.hasCapacity()) {
      lock+=source.size;
    }
 else {
      lock+=source.next;
    }
  }
  int abs=0;
  int ferrPos;
  final double[parentut=new double[lock];
  for (  Buffer busource levelZerobuffering) {
    if (!source.hasCapacity()) {
      ferrPos=source.size;
    }
 else {
      ferrPos=source.next;
    }
    System.arraycopy(source.data,0,parent,abs,ferrPos);
    abs+=ferrPos;
  }
  return parent;
}",141,7,"levelZeroData:layerZeroDATA,levelZeroBuffers:levelZerobuffering,length:lock,buffer:source,pos:abs,currLen:ferrPos,out:parent,",1979,44.53,ALERT
3750,"private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}","private double[] opt(double[] distensions3,double[] distances2){
  if (distensions3.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distensions3.length];
  for (int i=0; i < distensions3.length; i++) {
    result[i]=Math.opt(distensions3[i],distances2[i]);
  }
  return result;
}",91,5,"max:opt,distances1:distensions3,",141,2.7,ALERT
3752,"public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
","public static boolean isAdminLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
",40,4,"isOrgLevelOnly:isAdminLevelOnly,",34,0.62,ALERT
3753,"protected void paintContentBorderBottomEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){
  if (isContentBorderPainted) {
    g.setColor(darkShadow);
    g.fillRect(x,y + h - 1,w - 1,1);
  }
}","protected void paintContentCrossBottomedge(Graphics cfg,int index,int ty,int u,int H,boolean writeGraken,Rectangle silverRect,boolean isContentborderPaced){
  if (isContentborderPaced) {
    cfg.setColor(darkShadow);
    cfg.fillRect(index,ty + H - 1,u - 1,1);
  }
}",62,9,"paintContentBorderBottomEdge:paintContentCrossBottomedge,g:cfg,x:index,y:ty,w:u,h:H,drawBroken:writeGraken,selRect:silverRect,isContentBorderPainted:isContentborderPaced,",2452,34.43,ALERT
3754,,,80,2,,695,9.247877589861550,0
3755,,,50,2,,809,76.23750682671860,0
3756,,,25,2,,798,21.13600674470270,0
3757,"public void makeGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}","public void parseGrid(File inkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(inkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] stl=temp212.split("" "");
    for (int i=0; i < stl.length; i++) {
      graph[rowNum][i]=Double.parseDouble(stl[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}",303,13,"linkGraph:inkGraph,makeGraph:parseGrid,strs:stl,",260,3.33,ALERT
3759,"private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
","private void testScherape(String aConfig,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScherape(aConfig,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScherape(aConfig,anExpectingAnException,myMethod);
    }
  }
}
",63,5,"aConfiguration:aConfig,testScenario:testScherape,",95,5.08,ALERT
3760,,,42,2,,785,10.583867446581500,0
3761,"public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}","public static int end(final float object){
  final int bpiecesFloat.floatToRawIntBits(object);
  final int bibiasedEXPieces >> 23 & 0xFF;
  final int offset=23 - 1 + MAX_FLOAT_EXPONENT - biasedEXP;
  if ((offset & -32) == 0) {
    int exextendedMannisex00800000 | pieces & 0x007FFFFF;
    if (pieces < 0) {
      extendedMannise=-extendedMannise;
    }
    return (eextendedMannise>> offset) + 1 >> 1;
  }
 else {
    return (int)object;
  }
}",102,6,"round:end,value:object,bits:pieces,biasedExp:biasedEXP,shift:offset,extendedMantissa:extendedMannise,",438,5.01,ALERT
3762,"private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}","private static long AddandCheck(long aaa,long d,Localizable example) throws MathRuntimeException {
  final long reraa + d;
  if (!((aaa ^ b)d< 0 || (aaa ^ r) >= 0)) {
    throw new MathRuntimeException(paexampleaa,d);
  }
  return r;
}",63,5,"addAndCheck:AddandCheck,a:aaa,b:d,pattern:example,result:r,",416,6.92,ALERT
3763,"private FormatString[] parse(String s){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(s);
  for (int i=0, len=s.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(s,i,m.start());
        al.add(new FixedString(s.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(s,i,len);
      al.add(new FixedString(s.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}","private FormatString[] parse(String e){
  ArrayList<FormatString> arr=new ArrayList<>();
  Matcher gm=fsPattern.matcher(e);
  for (int xi=0, len=e.length(); xi < len; ) {
    if (gm.find(xi)) {
      if (gm.start() != xi) {
        checkText(e,xi,gm.start());
        arr.add(new FixedString(e.substring(xi,gm.start())));
      }
      arr.add(new FormatSpecifier(gm));
      xi=gm.end();
    }
 else {
      checkText(e,xi,len);
      arr.add(new FixedString(e.substring(xi)));
      break;
    }
  }
  return arr.toArray(new FormatString[arr.size()]);
}",179,6,"i:xi,s:e,m:gm,al:arr,",155,2.16,ALERT
3764,"public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}
","public JsonArray store(String key){
  values.store(Json.key(key));
  return this;
}
",24,2,"value:key,add:store,",67,0.73,ALERT
3765,"public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}","public static String cleanFolderStachingMarkers(String json){
  if (!StringUtils.isEmpty(json)) {
    Matcgmer m=folderStackingPattern.matcher(json);
    if (gm.matches()) {
      return gm.group(1) + gm.group(3);
    }
  }
  return json;
}",60,3,"cleanFolderStackingMarkers:cleanFolderStachingMarkers,filename:json,m:gm,",306,3.4,ALERT
3766,"private void loadBinary(InputStream is) throws IOException {
  if (is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    FileChannel fc=fis.getChannel();
    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());
    bb.load();
    loadBinary(bb);
    is.close();
  }
 else {
    loadBinary(new DataInputStream(is));
  }
}","private void parseFbinary(InputStream us) throws IOException {
  if (us instanceof FileInputStream) {
    FileInputStream cfis=(FileInputStream)us;
    FileChannel ffacfis.getChannel();
    MappedByteBuffer pp=fa.map(FileChannel.MapMode.READ_ONLY,0,(int)fa.size());
    pp.load();
    parseFbinary(pp);
    us.close();
  }
 else {
    parseFbinary(new DataInputStream(us));
  }
}",90,5,"loadBinary:parseFbinary,is:us,fis:cfis,fc:fa,bb:pp,",387,4.14,ALERT
3767,"public static double quantile(double p,double k,double theta,double shift){
  return Math.exp(GammaDistribution.quantile(p,k,theta)) + shift;
}
","public static double quantile(double p,double kk,double theta,double shift){
  return Math.exp(GammaDistribution.quantile(p,kk,theta)) + shift;
}
",38,5,"k:kk,",42,0.57,ALERT
3769,"public void testGetTables() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
","public void testgetTows() throws Exception {
  DatabaseMetaData dpd=con.getMetaData();
  ResultSet rs=dpd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}
",45,3,"dmd:dpd,testGetTables:testgetTows,",60,1.89,ALERT
3770,,,129,5,,1836,27.1631600856781,0
3771,,,34,4,,1493,14.761528186003400,0
3772,,,14,1,,429,3.6533675312995900,0
3773,,,44,2,,804,9.02278280655543,0
3775,"public boolean removeArg(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}
","public boolean addarg(final BOp ark){
  if (ark == null)   throw new IllegalArgumentException();
  if (ark == this)   throw new IllegalArgumentException();
  if (args.remove(ark)) {
    mutation();
    return true;
  }
  return false;
}
",55,2,"removeArg:addarg,arg:ark,",298,3.57,ALERT
3776,"public static String quoteIfJavaKeyword(String name){
  return JVMModuleUtil.quoteIfJavaKeyword(name);
}
","public static String quoteIfJavaAnyword(String image){
  return JVMModuleUtil.quoteIfJavaAnyword(image);
}
",18,2,"name:image,quoteIfJavaKeyword:quoteIfJavaAnyword,",51,0.86,ALERT
3777,,,60,3,,881,10.908752874533300,0
3778,"public void recordTimestamp(){
  long curTimestamp=System.currentTimeMillis();
  if (usedFields > 0) {
    long diff=curTimestamp - lastValue;
    if (usedFields == diffs.length) {
      long removedValue=diffs[curPosition];
      diffs[curPosition]=diff;
      calculateNewAverage(removedValue,diff,false);
      shiftEnd();
    }
 else {
      calculateNewAverage(0,diff,true);
      diffs[curPosition]=diff;
      shiftEnd();
    }
  }
 else   if (lastValue != -1) {
    long diff=curTimestamp - lastValue;
    currentAverage=0;
    diffs[curPosition]=diff;
    calculateNewAverage(0,diff,true);
    shiftEnd();
  }
  lastValue=curTimestamp;
}","public void shifttimer(){
  long curtimemark=System.currentTimeMillis();
  if (usedFields > 0) {
    longconfigf=curtimemark - oldIndex;
    if (usedFields == difts.length) {
      long Removedvalue=difts[surOffset];
      didiftsusurOffsetconfig;
      calculateNewAverage(reRemovedvalueonfig,false);
      shiftEnd();
    }
 else {
      calculateNewAverage(0,config,true);
      didiftsusurOffsetconfig;
      shiftEnd();
    }
  }
 else   if (oldIndex != -1) {
    longconfigf=curtimemark - oldIndex;
    currentAverage=0;
    didiftsusurOffsetconfig;
    calculateNewAverage(0,config,true);
    shiftEnd();
  }
 oldIndexe=curtimemark;
}",137,8,"recordTimestamp:shifttimer,curTimestamp:curtimemark,diff:config,removedValue:Removedvalue,diffs:difts,curPosition:surOffset,lastValue:oldIndex,",445,23.99,ALERT
3779,"public synchronized void increase(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}","public synchronized void Decrement(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}",89,4,"increase:Decrement,",26,0.35,ALERT
3781,"public boolean showPreviousNotification(){
  int i=getSelectedIndex();
  if (i != -1 && i > 0) {
    model.setSelectedItem(model.getElementAt(i - 1));
    return true;
  }
  return false;
}","public boolean showPreviousNotifications(){
  int mini=getSelectedIndex();
  if (mini != -1 && mini > 0) {
    model.setSelectedItem(model.getElementAt(mini - 1));
    return true;
  }
  return false;
}",47,2,"i:mini,showPreviousNotification:showPreviousNotifications,",57,0.71,ALERT
3782,"public void testZeroOne(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void assertExactly1(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",141,11,"testZeroOne:assertExactly1,",100,0.77,ALERT
3783,,,52,5,,1770,14.439096327622700,0
3784,"public void sendMessageUntilStopCount(int stopCount){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCount) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}","public void sendMessageUntilStopCount(int stopCount){
  for (int i=processedWorkersCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error(""sleep exception "" + e + "" details: "",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkersCount++;
    if (processedWorkersCount > stopCount) {
      return;
    }
    logger.debug(""REQ_SENT: {} / {} taskId {}"",processedWorkersCount,requestTotalCount,taskIdTrim);
  }
}",106,5,"processedWorkerCount:processedWorkersCount,",69,2.0,ALERT
3785,"public static void assertExpectedOutputContains(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ x+ ""\'"");
  }
}
","public static void assertExpectedOutputContains(String expectedString,String abc){
  if (!abc.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ abc+ ""\'"");
  }
}
",38,3,"x:abc,",39,0.86,ALERT
3786,,,17,2,,770,7.610374212265020,0
3787,"private Collection<Var> migrateColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
","private Collection<Var> migrateFieldes(SQLTable reportedFile){
  List<Var> vards=new ArrayList<>();
  String sourcePath=reportedFile.getEntityType();
  Map<String,ResourceType.DataType> columnS=reportedFile.getColumns();
  Map<String,String> foreignColumnows=reportedFile.getForeignKeyColumns();
  for (  String variable : columnS.keySet()) {
    ResourceType.DataType cocolumnInfoolumnS.get(variable);
    if (foreignColumnows.containsKey(variable)) {
      vards.addAll(migrateAsRelation(sourcePath,covariableoreignColumnows.get(variable)));
    }
 else {
      vards.addAll(migrateAsResource(sourcePath,cocolumnInfoariable));
    }
  }
  return vards;
}
",139,8,"migrateColumns:migrateFieldes,currentTable:reportedFile,vars:vards,tableType:sourcePath,columns:columnS,foreignColumns:foreignColumnows,column:variable,columnType:columnInfo,",2144,26.08,ALERT
3788,,,28,2,,653,12.313492111365,0
3789,"public static Set<String> toStringSet(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}","public static Set<String> makeShortMap(TemplateSequenceModel seqFile) throws TemplateModelException {
  Set<String> group=new HashSet<String>();
  for (intfi=0;fi < seqFile.size(); f++) {
   groupt.add(getAsStringNonEscaping((TemplateScalarModel)seqFile.get(f)));
  }
  return group;
}",70,4,"toStringSet:makeShortMap,seqModel:seqFile,set:group,i:f,",743,9.49,ALERT
3790,"@SuppressWarnings(""unchecked"") static public void assertSameIteratorAnyOrder(final Object[] expected,final Iterator actual){
  assertSameIteratorAnyOrder("""",expected,actual);
}
","@SuppressWarnings(""unchecked"") static public void assertSameOrderanyOrd(final Object[] events,final Iterator val){
  assertSameOrderanyOrd("""",events,val);
}
",31,3,"assertSameIteratorAnyOrder:assertSameOrderanyOrd,expected:events,actual:val,",140,3.12,ALERT
3791,"public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));
  }
}
","public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annatedMethods));
  }
}
",65,1,"annotatedMethods:annatedMethods,",35,0.44,ALERT
3792,"public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
","public void removeListener(@NotNull ConfigurationListener addacher){
  if (myAdders != null) {
    myAdders.remove(addacher);
    if (myAdders.isEmpty()) {
      myAdders=null;
    }
  }
}
",40,3,"myListeners:myAdders,listener:addacher,",67,0.65,ALERT
3793,,,71,3,,507,6.245800006389620,0
3794,"void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
","void doHandleJavaMouseEvent(MouseEvent clickvent){
  if (!XToolkit.isLeftMouseButton(clickvent) && !XToolkit.isRightMouseButton(clickvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=clickvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer plugin=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (clickvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (plugin != null && !plugin.isSeparator() && plugin.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == plugin) {
        showingMousePressedSubmenu=(XMenuPeer)plugin;
      }
      wnd.selectItem(plugin,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (plugin != null && !plugin.isSeparator() && plugin.isTargetItemEnabled()) {
if (plugin instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == plugin) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(plugin,false);
    }
  }
}
 else {
  plugin.action(clickvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (plugin != null && !plugin.isSeparator() && plugin.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(plugin,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
",454,9,"item:plugin,mouseEvent:clickvent,",150,3.25,ALERT
3795,"public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
","public void focus(char initialChar){
  initialStr=initialStr.append(initialChar);
  focus();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialStr.toString());
  }
}
",43,3,"initialString:initialStr,show:focus,",67,0.74,ALERT
3796,"public SSLSocket createSSLSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
","public SSLSocket createWSLSSocket(Socket uri) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)uri.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(uri,remoteAddress.getHostName(),uri.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
",87,5,"socket:uri,createSSLSocket:createWSLSSocket,",69,0.88,ALERT
3797,"public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}","public String print(String acer,String c1,String c2){
  boolean size=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.size;
  String ing=""["";
  if (size)   ing+=""<"" + c1 + "">"";
  ing+=acer;
  if (size)   ing+=""<"" + c2 + "">"";
  ing+=""] "";
  if (size)   ing+=""<"" + c1 + "">"";
  return size ? Pretty.format(ing) : ing;
}",93,6,"s:ing,color:size,inner:acer,tag:print,",185,4.67,ALERT
3798,"protected OkHttpClient configureHttpClient(){
  final OkHttpClient.Builder builder=new OkHttpClient.Builder();
  final CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  builder.cookieJar(new JavaNetCookieJar(cookieManager));
  builder.connectTimeout(60,TimeUnit.SECONDS);
  builder.writeTimeout(60,TimeUnit.SECONDS);
  builder.readTimeout(90,TimeUnit.SECONDS);
  return builder.build();
}","protected OkHttpClient configurehttpConnection(){
  final OkHttpClient.Builder e=new OkHttpClient.Builder();
  final CookieManager ookiemanager=new CookieManager();
  ookiemanager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  e.cookieJar(new JavaNetCookieJar(ookiemanager));
  e.connectTimeout(60,TimeUnit.SECONDS);
  e.writeTimeout(60,TimeUnit.SECONDS);
  e.readTimeout(90,TimeUnit.SECONDS);
  return e.build();
}",89,3,"configureHttpClient:configurehttpConnection,builder:e,cookieManager:ookiemanager,",406,4.6,ALERT
3799,,,16,1,,419,7.046960580348970,0
3801,"protected void updateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier,Instance classMissing,double classValue) throws Exception {
  if (m_PriorEstimator == null) {
    setNumericPriorsFromBuffer();
  }
  m_SumSchemeEntropy-=classifier.logDensity(classMissing,classValue) * classMissing.weight() / Utils.log2;
  m_SumPriorEntropy-=m_PriorEstimator.logDensity(classValue) * classMissing.weight() / Utils.log2;
}","protected void updateStatsForConditionalDensityEstipators(ConditionalDensityEstimator Classifer,Instance ClassLost,double classValues) throws Exception {
  if (m_PriorEstimator == null) {
    setNumericPriorsFromBuffer();
  }
  m_SumSchemeEntropy-=Classifer.logDensity(ClassLoclassValueslue) * ClassLost.weight() / Utils.lm_SumSchemeEntropyntropy-=Classifer.logDensity(ClassLoclassValueslue) * ClassLost.weight() / Utils.log2;
m_SumRankDistorerpy-=m_PriorEstimator.logDensiclassValueslue) * ClassLost.weight() / Utils.log2;
}",69,6,"updateStatsForConditionalDensityEstimator:updateStatsForConditionalDensityEstipators,classifier:Classifer,classMissing:ClassLost,classValue:classValues,m_SumPriorEntropy:m_SumRankDistorer,",216,3.21,ALERT
3802,"private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}","private static void passNativeTesting(final int WordCount,final int bytePhitching,final int byteSum){
  final long seed=randomLong();
  final Random normal=new Random(seed);
  final Random verifierRand=new Random(seed);
  final long passwordPattern;
  if (WordCount == 64) {
    passwordPattern=~0L;
  }
 else {
   passwordPatternk=(1L << WordCount) - 1L;
  }
  final BigEndianAscendingWordSerializerrecognizerr=new BigEndianAscendingWordSerializer(WordCount,wobyteSumytePhitching);
  for (inmini i=0mini i < byteSum; mini++) {
    final long value=ntoken.nextLong() & passwordPattern;
    recognizer.writeWord(token);
  }
  final byte[] size=recognizer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(WordCount,bytePhitching,size);
  assertEqualdeserializerer.totalWordCount(),byteSum);
  for (inmini i=0mini i < byteSum; mini++) {
    assertEquals(ddeserializerreadWord(),(verifierRand.nextLong() & passwordPattern));
  }
}",198,13,"runRandomTest:passNativeTesting,wordLength:WordCount,bytePadding:bytePhitching,wordCount:byteSum,random:normal,verificationRandom:verifierRand,wordMask:passwordPattern,serializer:recognizer,i:mini,value:token,bytes:size,",1234,14.7,ALERT
3803,"private String convertUserInputIntoAFullyQualifiedPath(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userInput;
  return fullPath;
}","private String convertUserInputIntoAFullyQualifiedName(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String FullPath=getWorkingDirectoryAsString() + userInput;
  return FullPath;
}",78,3,"fullPath:FullPath,convertUserInputIntoAFullyQualifiedPath:convertUserInputIntoAFullyQualifiedName,",51,1.0,ALERT
3804,"public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}","public double wide(Prior ributore,Likelihood friendlyness) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(ributore,friendlyness,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(ributore,friendlyness,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(ributore,friendlyness,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(ributore,friendlyness,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(ributore,friendlyness,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}",945,21,"likelihood:friendlyness,prior:ributore,",486,8.93,ALERT
3805,,,34,2,,763,7.280496637026470,0
3807,,,105,2,,636,5.908538464705150,0
3808,"public boolean isBuiltinSoundAvailable(String soundIdentifier){
  return builtinSounds.containsKey(soundIdentifier);
}
","public boolean isBuiltInSoundsAvailable(String audioQualify){
  return builtinSounds.containsKey(audioQualify);
}
",17,2,"isBuiltinSoundAvailable:isBuiltInSoundsAvailable,soundIdentifier:audioQualify,",110,1.48,ALERT
3809,,,22,2,,644,6.809049463272090,0
3810,,,283,14,,4314,36.53945943514510,0
3811,"@Override public String toString(){
  String result=""RandomSplitResultProducer: "";
  result+=getCompatibilityState();
  if (m_Instances == null) {
    result+="": <null Instances>"";
  }
 else {
    result+="": "" + Utils.backQuoteChars(m_Instances.relationName());
  }
  return result;
}
","@Override public String tostring(){
  String up=""RandomSplitResultProducer: "";
  up+=getCompatibilityState();
  if (m_Instances == null) {
    up+="": <null Instances>"";
  }
 else {
    up+="": "" + Utils.backQuoteChars(m_Instances.relationName());
  }
  return up;
}
",53,2,"toString:tostring,result:up,",514,3.59,ALERT
3812,"public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}
","public void offent(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  offent(other.getAlternatives());
}
",36,2,"extend:offent,",31,0.2,ALERT
3814,"private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}","private Long vid(HttpServletRequest r){
  Long vid=null;
  SPathINFOthInfo=r.getPathInfo();
  if (PathINFO != null && PathINFO.length() > 1) {
    String IDInfo=PathINFO.substring(1);
    vid=Long.valueOf(IDInfo);
  }
  return vid;
}",61,4,"id:vid,request:r,pathInfo:PathINFO,idString:IDInfo,",583,5.14,ALERT
3815,"public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}","public ItemStack clearitems(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int constore=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,constore);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,constore - amountGiven);
    stack.stackWeight+=amountGiven;
    markDirty(drive);
  }
  return stack;
}",83,7,"removeItems:clearitems,stackSize:stackWeight,stored:constore,",135,0.89,ALERT
3816,"public boolean search(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}
","public boolean accept(V vs){
  int hqhashMethod.hash(vs);
  LinkedList<V> map=(LinkedList<V>)table[q];
  if (map == null) {
    return false;
  }
  return lmapcontains(vs);
}
",55,4,"search:accept,v:vs,h:q,list:map,",303,2.22,ALERT
3817,,,22,2,,782,4.028056935469310,0
3818,,,14,1,,469,2.350438328584040,0
3819,"private int[] parseMetaDataInformation() throws UserError {
  int[] selectedColumns=new int[metaData.size()];
  Set<String> usedColumnNames=new HashSet<>();
  int columnIndex=0;
  int usedColumnIndex=0;
  for (  ColumnMetaData column : metaData) {
    if (!column.isRemoved()) {
      selectedColumns[usedColumnIndex]=columnIndex;
      usedColumnIndex++;
      String columnName=column.getName();
      if (!usedColumnNames.contains(columnName)) {
        usedColumnNames.add(columnName);
      }
 else {
        throw new UserError(null,""data_import.non_unique_column_name"",columnName);
      }
    }
    columnIndex++;
  }
  int[] attributeColumns=Arrays.copyOf(selectedColumns,usedColumnIndex);
  return attributeColumns;
}","private int[] parseMetaDataInformation() throws UserError {
  int[] selectedColumnList=new int[metaData.size()];
  Set<String> usedColumnNames=new HashSet<>();
  int conditionName=0;
  int usedColumnIndex=0;
  for (  ColumnMetaData column : metaData) {
    if (!column.isRemoved()) {
      selectedColumnList[ususedColumnIndexconditionName;
      usedColumnIndex++;
      String columnName=column.getName();
      if (!usedColumnNames.contains(columnName)) {
        usedColumnNames.add(columnName);
      }
 else {
        throw new UserError(null,""data_import.non_unique_column_name"",columnName);
      }
    }
    conditionName++;
  }
  int[] attattributeColumnsrays.copyOf(selectedColumnList,usedColumnIndex);
  return attributeColumns;
}",141,8,"selectedColumns:selectedColumnList,columnIndex:conditionName,",361,2.44,ALERT
3820,"public void assureProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}
","public void assureXYSync(){
  if (socket.isClosed()) {
    restart();
  }
}
",21,1,"assureProxyOk:assureXYSync,",20,0.32,ALERT
3821,,,33,1,,403,7.719649974505110,0
3822,,,33,1,,417,2.985736608505250,0
3824,"protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
","protected void setup(String[] qds,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (qds != null) {
      for (      String sql : qds) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
",73,5,"sqls:qds,execute:setup,",69,0.37,ALERT
3825,"public static String relativeToAbsolute(String baseURL,String relativeURL){
  if (relativeURL.startsWith(""/"")) {
    return getURLProtocol(baseURL) + ""://"" + getURLHost(baseURL)+ relativeURL;
  }
 else {
    return getURLProtocol(baseURL) + ""://"" + getURLHost(baseURL)+ getURLBasePath(baseURL)+ relativeURL;
  }
}
","public static String relativeToExolute(String basedCL,String absoluteUR){
  if (absoluteUR.startsWith(""/"")) {
    return getURLProtocol(basedCL) + ""://"" + getURLHost(basedCL)+ absoluteUR;
  }
 else {
    return getURLProtocol(basedCL) + ""://"" + getURLHost(basedCL)+ getURLBasePath(basedCL)+ absoluteUR;
  }
}
",62,3,"relativeToAbsolute:relativeToExolute,baseURL:basedCL,relativeURL:absoluteUR,",467,4.62,ALERT
3826,,,16,2,,686,4.84272160132726,0
3827,"private boolean nextItemIs(String match) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (int i=0; i < match.length(); i++) {
    if (i > 0) {
      c=buf.get();
    }
    if (c != match.charAt(i)) {
      return false;
    }
  }
  return true;
}","private boolean nextLineis(String patch) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (int i=0; i < patch.length(); i++) {
    if (i > 0) {
      c=buf.get();
    }
    if (c != patch.charAt(i)) {
      return false;
    }
  }
  return true;
}",84,4,"nextItemIs:nextLineis,match:patch,",67,0.84,ALERT
3828,"public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
","public void releaseSelections(Set<Entity> locks){
  for (  Entity item : locks) {
    releaseSelection(item);
  }
}
",26,3,"items:locks,",37,0.21,ALERT
3829,,,37,2,,808,5.300344928105670,0
3830,"public static byte[] bitmapToBytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}","public static byte[] bitMapAsbytes(Bitmap um){
  byte[] bytes=null;
  if (um != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    um.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}",61,4,"bm:um,bitmapToBytes:bitMapAsbytes,",125,0.64,ALERT
3831,,,61,4,,1491,21.585414230823500,0
3832,"public void waitForData(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
","public void waitforImage(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}
",24,1,"waitForData:waitforImage,",25,0.16,ALERT
3833,,,58,4,,1028,11.577665797869400,0
3834,,,20,2,,800,9.782482596238450,0
3835,"public void testRandom(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}","public void testSelect(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}",95,4,"testRandom:testSelect,",29,1.17,ALERT
3836,"public static double igamma(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}","public static double igamma(double ana,double x){
  double coef=(Math.exp(-x) * Math.pow(x,ana)) / gamma(ana);
  double sum=0.0;
  for (int vi=0; vi < 100; vi++) {
    sum+=(gamma(ana) / gamma(ana + 1.0 + (double)vi)) * Math.pow(x,(double)vi);
  }
  return (coef * sum);
}",101,6,"i:vi,a:ana,",112,1.32,ALERT
3837,"public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}","public CipherParameters decract(byte[] in,int keyLen){
  return decract(in,0,in.length,keyLen);
}",28,3,"decrypt:decract,",32,0.24,ALERT
3838,"@Override public boolean connectionAllowed(String eventName){
  if (eventName.equals(""trainingSet"") && m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllSupported(String featureKey){
  if (featureKey.equals(""trainingSet"") && m_listenees.containsKey(featureKey)) {
    return false;
  }
  return true;
}
",35,2,"connectionAllowed:isAllSupported,eventName:featureKey,",608,5.7,ALERT
3839,"public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}","public void removeribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object oo=attributesList.elementAt(i);
      if (oo instanceof AttributeField) {
        AttributeField ar(AttributeField)oo;
        try {
          String n=r.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(r);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}",114,6,"removeAttribute:removeribute,o:oo,a:r,",244,3.25,ALERT
3840,"private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}","private PdfObject readcompressedSteam(PdfObject rootObj,int pointer,final PdfFileReader currentCdfPage,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, after=' ';
    int signed=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && after == ' ') {
        signed=0;
      }
 else       if (current1 == pattern.charAt(signed)) {
        signed++;
      }
 else {
        signed=0;
        objectName.append(current1);
      }
      if (signed == 3) {
        break;
      }
      after=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject PDFArray=new CompressedObject(objectName.toString());
    PDFArray.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentCdfPage);
   objectDecoderr.readDictionaryAsObject(PDFArray,0,raw);
    final int[]fieldsampless=PDFArray.getIntArray(PdfDictionary.W);
    byte[]xrefss=PDFArray.getDecodedStream();
    if (xrefs == null) {
     xrefss=currentCdfPage.readStream(PDFArray,true,true,false,false,true,null);
    }
    final int[] Index=PDFArray.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,PDFArray.getInt(PdfDictionary.Size),fieldsamples,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldsamples,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=PDFArray.getDictionary(PdfDictionary.Root);
      encryptObj=PDFArray.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=PDFArray.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=PDFArray.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=PDFArray.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentCdfPage);
      }
    }
  }
  return rootObj;
}",550,20,"readCompressedStream:readcompressedSteam,currentPdfFile:currentCdfPage,last:after,matched:signed,pdfObject:PDFArray,fieldSizes:fieldsamples,",823,7.4,ALERT
3842,"public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}","public E read(int condition){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(condition);
  int numRemov=size - condition - 1;
  if (numRemov > 0)   System.arraycopy(elementData,condition + 1,elementData,condition,numRemov);
  elementData[--size]=null;
  return oldValue;
}",67,7,"index:condition,numMoved:numRemov,remove:read,",192,1.57,ALERT
3844,"public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}","public static Vector2 span(Vector2 i1,Vector2 os52){
  return new Vector2(Math.span(oi1x,oos52x),Math.span(i1.z,os52.z));
}",44,3,"min:span,o1:i1,o2:os52,",207,2.1,ALERT
3845,"public static boolean isCommand(IElementType type){
  return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND;
}
","public static boolean iscommand(IElementType role){
  return role == SQFTypes.COMMAND_TOKEN || role == SQFTypes.COMMAND || role == SQFTypes.CASE || role == SQFTypes.CASE_COMMAND;
}
",35,2,"type:role,isCommand:iscommand,",52,0.41,ALERT
3847,"@Override public void addHeader(final String header,final String value){
  mHeadersOptions.add(new HeaderOption(header,value));
}
","@Override public void setHead(final String border,final String Value){
  mHeadersOptions.add(new HeaderOption(border,Value));
}
",29,3,"header:border,value:Value,addHeader:setHead,",82,0.47,ALERT
3848,,,13,1,,440,2.9559913078943900,0
3849,"public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}","public static Map<String,Object> performsFindMultiple(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer blockindex=(Integer)context.get(""viewIndex"");
  if (blockindex == null)   blockindex=Integer.valueOf(0);
  context.put(""viewIndex"",blockindex);
  Map<String,Object> result=performFind(dctx,context);
  int start=blockindex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}",229,10,"viewIndex:blockindex,performFindList:performsFindMultiple,",153,2.8,ALERT
3850,,,34,2,,801,6.587884859244030,0
3853,"private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}","private ByteString scapeByte(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}",95,5,"escapeBytes:scapeByte,",35,0.92,ALERT
3854,,,50,3,,1148,8.3893412510554,0
3855,"public static String valueOf(Boolean value){
  return value != null ? String.valueOf(value) : null;
}
","public static String vof(Boolean comment){
  return comment != null ? String.vof(comment) : null;
}
",24,2,"valueOf:vof,value:comment,",52,0.31,ALERT
3856,"public boolean is(String arg,boolean allowAbbr){
  if (name.equalsIgnoreCase(arg)) {
    return true;
  }
  if (allowAbbr && arg.length() == 1) {
    if (arg.charAt(0) == c) {
      return true;
    }
  }
  return false;
}","public boolean IS(String ac,boolean allowabbr){
  if (name.equalsIgnoreCase(ac)) {
    return true;
  }
  if allowabbrr && ac.length() == 1) {
    if (ac.charAt(0) == c) {
      return true;
    }
  }
  return false;
}",59,3,"is:IS,arg:ac,allowAbbr:allowabbr,",204,1.74,ALERT
3857,,,131,9,,3202,23.820589379469600,0
3858,"int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}","int insert(Row data,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] clob){
  int flowLength=_rowHead;
  int blobThil=_blobTail;
  int recordSize=data.length();
  flowLength-=recordSize;
  if (flowLength < blobThil) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,flowLength,recordSize);
  buffer[flowLength]=(byte)((buffer[flowLength] & ~CODE_MASK) | INSERT);
  blobThil=data.insertBlobs(buffer,flowLength,blobThil,clob);
  if (blobThil < 0) {
    return -1;
  }
  setBlobTail(blobThil);
  flowLength(flowLength);
  validateBlock(data);
  return flowLength;
}",145,9,"rowHead:flowLength,blobTail:blobThil,row:data,rowLength:recordSize,blobs:clob,",235,2.78,ALERT
3859,"public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}","public void Initializing(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}",287,13,"initialize:Initializing,",59,0.88,ALERT
3860,"@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
","@SuppressWarnings(""rawtypes"") public static void createProjectConStrant(ZipFile archive,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=archive.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry reader=(ZipEntry)zipEnumerate.nextElement();
    String elementName=normalizeEntryName(reader);
    if (elementName.startsWith(CONSTRAINTS)) {
      String family=FilenameUtils.getName(reader.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(family);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,archive.getInputStream(reader));
      LOG.info(""Imported constraint ["" + family + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
",158,9,"zip:archive,entryName:elementName,entry:reader,filename:family,createProjectConstraint:createProjectConStrant,",164,1.72,ALERT
3861,,,18,1,,436,20.550430881977100,0
3862,"public final void registerFileType(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){
  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedExtensions != null) {
    for (    String extension : defaultAssociatedExtensions) {
      matchers.add(new ExtensionFileNameMatcher(extension));
    }
  }
  registerFileType(type,matchers);
}
","public final void RegisterFilesPart(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){
  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedExtensions != null) {
    for (    String extension : defaultAssociatedExtensions) {
      matchers.add(new ExtensionFileNameMatcher(extension));
    }
  }
  RegisterFilesPart(type,matchers);
}
",69,5,"registerFileType:RegisterFilesPart,",44,0.39,ALERT
3863,"public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
","public static EPType singleValue(Class multiValueName){
  if (multiValueName != null && multiValueName.isArray()) {
    return new ClassMultiValuedEPType(multiValueName,multiValueName.getComponentType());
  }
  return new ClassEPType(multiValueName);
}
",44,2,"singleValueType:multiValueName,",39,0.29,ALERT
3864,,,24,3,,1130,6.390066838264470,0
3865,"public static Result verify(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
","public static Result Verification(String sid,String cc){
  String id=""//captcha/"" + sid;
  Code pc=(Code)Cache.get(id);
  if (pc == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(cc,pc.cc)) {
    log.warn(""is not same, code.server="" + pc.cc + "", code.client=""+ cc);
    return Result.badcode;
  }
 else   if (pc.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + pc.expired);
    return Result.expired;
  }
  return Result.ok;
}
",128,5,"code:cc,c:pc,verify:Verification,",154,1.45,ALERT
3866,"public synchronized int lastIndexOf(Object object,int location){
  if (location < elementCount) {
    if (object != null) {
      for (int i=location; i >= 0; i--) {
        if (object.equals(elementData[i])) {
          return i;
        }
      }
    }
 else {
      for (int i=location; i >= 0; i--) {
        if (elementData[i] == null) {
          return i;
        }
      }
    }
    return -1;
  }
  throw arrayIndexOutOfBoundsException(location,elementCount);
}","public synchronized int elementindexAt(Object parent,int name){
  if (name < elementCount) {
    if (parent != null) {
      for (tint i=name; ti >= 0; ti--) {
        if (parent.equals(elementData[ti])) {
          return ti;
        }
      }
    }
 else {
      for (tint i=name; ti >= 0; ti--) {
        if (elementData[ti] == null) {
          return ti;
        }
      }
    }
    return -1;
  }
  throw arrayIndexOutOfBoundsException(name,elementCount);
}",107,4,"lastIndexOf:elementindexAt,object:parent,location:name,i:ti,",789,7.21,ALERT
3867,,,108,4,,1409,10.958895031611100,0
3868,"private void restoreSortingSelection(int[] selection,int lead,ModelChange change){
  for (int i=selection.length - 1; i >= 0; i--) {
    selection[i]=convertRowIndexToView(selection[i],change);
  }
  lead=convertRowIndexToView(lead,change);
  if (selection.length == 0 || (selection.length == 1 && selection[0] == getSelectedRow())) {
    return;
  }
  selectionModel.setValueIsAdjusting(true);
  selectionModel.clearSelection();
  for (int i=selection.length - 1; i >= 0; i--) {
    if (selection[i] != -1) {
      selectionModel.addSelectionInterval(selection[i],selection[i]);
    }
  }
  SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,lead,lead);
  selectionModel.setValueIsAdjusting(false);
}","private void restoreServingSeignment(int[] selection,int leader,ModelChange inter){
  for (int i=selection.length - 1; i >= 0; i--) {
    selection[i]=convertRowIndexToView(selection[i],inter);
  }
  leader=convertRowIndexToView(leader,inter);
  if (selection.length == 0 || (selection.length == 1 && selection[0] == getSelectedRow())) {
    return;
  }
  selectionModel.setValueIsAdjusting(true);
  selectionModel.clearSelection();
  for (int i=selection.length - 1; i >= 0; i--) {
    if (selection[i] != -1) {
      selectionModel.addSelectionInterval(selection[i],selection[i]);
    }
  }
  SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,leader,leader);
  selectionModel.setValueIsAdjusting(false);
}",168,5,"restoreSortingSelection:restoreServingSeignment,lead:leader,change:inter,",176,2.04,ALERT
3869,,,65,4,,1524,17.572245756785100,0
3870,,,41,1,,439,4.641726676623030,0
3871,,,18,2,,797,6.085016373793280,0
3872,"public VdcConfig toConfigParam(Properties vdcInfo){
  log.info(""copy {} to the sync config param"",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
","public VdcConfig toConfigParam(Properties vdiinfo){
  log.info(""copy {} to the sync config param"",vdiinfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdiinfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdiinfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdiinfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdiinfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdiinfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdiinfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdiinfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdiinfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
",214,6,"vdcInfo:vdiinfo,",64,0.42,ALERT
3873,"@SuppressWarnings(""deprecation"") private static final URL toURL(String location,boolean file){
  if (file) {
    File f=new File(location);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(location);
  }
}
","@SuppressWarnings(""deprecation"") private static final URL toURL(String uri,boolean file){
  if (file) {
    File f=new File(uri);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(uri);
  }
}
",79,4,"location:uri,",42,0.31,ALERT
3874,,,24,2,,790,4.288823692003890,0
3875,"public int search(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}","public int rep(String txt){
  int D=pat.length();
  int Size=txt.length();
  int hide;
  for (int i=0i i <i Size - D; i+=hide) {
    hide=0;
    for (int n=D - 1; n >= 0; n--) {
      if (pat.charAt(n) != txt.charAt(i + n)) {
        hide=Math.max(1,n - right[txt.charAt(i + n)]);
        break;
      }
    }
    if (hide == 0)     return i;
  }
  return Size;
}",128,7,"search:rep,M:D,N:Size,skip:hide,j:n,",537,5.55,ALERT
3876,,,65,4,,1497,10.201070495446500,0
3877,,,19,1,,407,2.8714890122413600,0
3878,,,26,2,,764,6.135643907388050,0
3879,"public Dictionary(Directory tempDir,String tempFileNamePrefix,InputStream affix,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException {
  this.ignoreCase=ignoreCase;
  this.needsInputCleaning=ignoreCase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path aff=Files.createTempFile(tempPath,""affix"",""aff"");
  OutputStream out=new BufferedOutputStream(Files.newOutputStream(aff));
  InputStream aff1=null;
  InputStream aff2=null;
  boolean success=false;
  try {
    final byte[] buffer=new byte[1024 * 8];
    int len;
    while ((len=affix.read(buffer)) > 0) {
      out.write(buffer,0,len);
    }
    out.close();
    aff1=new BufferedInputStream(Files.newInputStream(aff));
    String encoding=getDictionaryEncoding(aff1);
    CharsetDecoder decoder=getJavaEncoding(encoding);
    aff2=new BufferedInputStream(Files.newInputStream(aff));
    readAffixFile(aff2,decoder);
    IntSequenceOutputs o=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> b=new Builder<>(FST.INPUT_TYPE.BYTE4,o);
    readDictionaryFiles(tempDir,tempFileNamePrefix,dictionaries,decoder,b);
    words=b.finish();
    aliases=null;
    morphAliases=null;
    success=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(out,aff1,aff2);
    if (success) {
      Files.delete(aff);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(aff);
    }
  }
}","public Dictionary(Directory TempDir,String tempFilePathPreix,InputStream affIX,List<InputStream> Dicionary,boolean allowcase) throws IOException, ParseException {
  this.allowcase=allowcase;
  thisneedsOutputcrawlingg=allowcase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path feed=Files.createTempFile(tempPath,""affix"",""aff"");
  OutputStream oobjnew BufferedOutputStream(Files.newOutputStream(feed));
  InputStream affe1=null;
  InputStream aff22=null;
  boolean fail=false;
  try {
    final byte[] slice=new byte[1024 * 8];
    int id;
    while (idn=affIX.read(slice)) > 0) {
      obj.write(slice,0,id);
    }
    obj.close();
    aaffe1new BufferedInputStream(Files.newInputStream(feed));
    String eEncasinggetDictionaryEncoding(affe1);
    CharsetDecoder Decoded=getJavaEncoding(Encasing);
    aaff22new BufferedInputStream(Files.newInputStream(feed));
    readAffixFile(aff22,Decoded);
    IntSequenceOutputs t=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> abb=new Builder<>(FST.INPUT_TYPE.BYTE4,t);
    readDictionaryFiles(TempDir,tempFilePathPreix,Dicionary,Decoded,abb);
    womaxbb.finish();
    Aliases=null;
    morphVarils=null;
    fail=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(obj,affe1,aff22);
    if (fail) {
      Files.delete(feed);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(feed);
    }
  }
}",300,20,"tempDir:TempDir,tempFileNamePrefix:tempFilePathPreix,affix:affIX,dictionaries:Dicionary,ignoreCase:allowcase,needsInputCleaning:needsOutputcrawling,aff:feed,out:obj,aff1:affe1,aff2:aff22,buffer:slice,len:id,encoding:Encasing,decoder:Decoded,o:t,b:abb,words:max,aliases:Aliases,morphAliases:morphVarils,success:fail,",4089,27.54,ALERT
3880,"protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}","protected final void ize() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}",373,23,"init:ize,",106,1.01,ALERT
3881,"protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }","protected void populateStreamGlub(int loadID,byte[] fileMessage,int minimumLength) throws SQLException {
  final byte[] ttestingFilesgenerateBlobContent(fileMessage,minimumLength);
  try (FbDatabase db=createDatabaseConnection()){
    latender=new SimpleStatementListener();
    conaction=getTransaction(db);
    try {
    commitnt=db.createStatement(conaction);
      commit.addStatementListener(latender);
      final BlobParameterBuffer blobInformationBuffer=db.createBlobParameterBuffer();
      blobInformationBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob oblargo=db.createBlobForOutput(conaction,blobInformationBuffer);
      oblargo.open();
      int fileswritten=0;
      while (bytfileswrittentestingFiles.length) {
        byte[] bufferborderyte[Math.min(blooblargotMaximumSegmentSize(),testingFiles.length - fileswritten)];
        System.arraycopy(testingFiles,fileswritten,border,0,border.length);
        oblargo.putSegment(border);
        fileswritten+=border.length;
      }
      oblargo.close();
      commit.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datattypeDecode=db.getDatatypeCoder();
      FieldValue paParam41ew FieldValue(datattypeDecode.encodeInt(loadID));
      FieldValue paramparams14FieldValue(datdatattypeDecodecodeLong(oblargo.getBlobId()));
      commit.execute(RowValue.of(Param41,params14));
      commit.close();
    }
  finally {
      conaction.commit();
    }
  }
 }",273,15,"populateStreamBlob:populateStreamGlub,testId:loadID,baseContent:fileMessage,requiredSize:minimumLength,testBytes:testingFiles,listener:latender,transaction:conaction,statement:commit,blobParameterBuffer:blobInformationBuffer,blob:oblargo,bytesWritten:fileswritten,buffer:border,datatypeCoder:datattypeDecode,param1:Param41,param2:params14,",1099,7.44,ALERT
3882,"private boolean usedAllRule17Directors(Set<String> allocatedDirectors,PortAllocationContext context){
  Set<String> rule17Directors=getRule17Directors(context);
  for (  String director : allocatedDirectors) {
    rule17Directors.remove(director);
  }
  return rule17Directors.isEmpty();
}","private boolean removeAllRule17Constructories(Set<String> allowedDirectors,PortAllocationContext document){
  Set<String> rrule16DirectionsgetRule17Directors(document);
  for (  Strinfinderor : allowedDirectors) {
    rule16Directions.remove(finder);
  }
  return rule16Directions.isEmpty();
}",49,5,"usedAllRule17Directors:removeAllRule17Constructories,allocatedDirectors:allowedDirectors,context:document,rule17Directors:rule16Directions,director:finder,",308,4.36,ALERT
3883,,,17,2,,786,6.306068356831870,0
3884,,,75,3,,885,8.248301597436270,0
3886,,,80,4,,656,3.1805683811505600,0
3887,"private MarshalledWrapper lookupDo(Template tmpl){
  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {
    ItemIter iter=matchingItems(tmpl);
    if (iter.hasNext())     return iter.next().service;
    return null;
  }
  List services=matchingServices(tmpl.serviceTypes);
  long now=System.currentTimeMillis();
  int slen=services.size();
  if (slen == 0)   return null;
  int srand=Math.abs(random.nextInt() % slen);
  for (int i=0; i < slen; i++) {
    SvcReg reg=(SvcReg)services.get((i + srand) % slen);
    if (reg.leaseExpiration > now && matchAttributes(tmpl,reg.item))     return reg.item.service;
  }
  return null;
}","private MarshalledWrapper lookupDo(Template tmpl){
  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {
    ItemIter iter=matchingItems(tmpl);
    if (iter.hasNext())     return iter.next().service;
    return null;
  }
  List services=matchingServices(tmpl.serviceTypes);
  long ow=System.currentTimeMillis();
  int slen=services.size();
  if (slen == 0)   return null;
  int srand=Math.abs(random.nextInt() % slen);
  for (int i=0; i < slen; i++) {
    SvcReg reg=(SvcReg)services.get((i + srand) % slen);
    if (reg.leaseExpiration > ow && matchAttributes(tmpl,reg.item))     return reg.item.service;
  }
  return null;
}",169,9,"now:ow,",62,0.56,ALERT
3888,"private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
","private void parseSwitch(int insent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(insent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(insent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
",367,17,"indent:insent,",218,1.32,ALERT
3889,,,19,2,,800,4.2076518932978300,0
3890,"protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}","protected int indexOf(String buffer,int start,int end,char atch){
  for (int ti=start; ti < end; ti++) {
    if (buffer.charAt(ti) == atch) {
      return ti;
    }
  }
  return -1;
}",54,6,"i:ti,ch:atch,",76,0.75,ALERT
3891,"private static void checkPathNeed(){
  if (samplingInterval == -1) {
    lastPreloadTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {
      lastPreloadTime=readMorePaths();
    }
  }
}","private static void checkNodeneed(){
  if (samplingInterval == -1) {
    lastInterloadPath=readMorePaths();
  }
  if (!Double.isNaN(lastInterloadPath) && SimClock.getTime() >= lastInterloadPath - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=phi; i phi nrofPreload && !Double.isNaN(lastInterloadPath); phi++) {
      lastInterloadPath=readMorePaths();
    }
  }
}",79,3,"checkPathNeed:checkNodeneed,lastPreloadTime:lastInterloadPath,i:phi,",155,2.67,ALERT
3893,"@SuppressWarnings(""unused"") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
","@SuppressWarnings(""unused"") public static float valuerangeExp(float flow,float startValue,float maxValue){
  if (flow < Math.min(startValue,maxValue))   return Math.min(startValue,maxValue);
  if (flow > Math.max(startValue,maxValue))   return Math.max(startValue,maxValue);
  return flow;
}
",70,4,"endValue:maxValue,valueRangeLimit:valuerangeExp,value:flow,",127,0.78,ALERT
3894,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
","public void addFooterView(View ve,Object data,boolean isNullible){
  FixedViewInfo info=new FixedViewInfo();
  info.view=ve;
  info.data=data;
  info.isNullible=isNullible;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
",66,6,"v:ve,isSelectable:isNullible,",77,2.13,ALERT
3895,"@Override public void sendLocationList(){
  List<Location> locationList=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location loc : locationList) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,loc));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug(""could not send train "" + loc.getName());
    }
  }
}","@Override public void sendTranslationChain(){
  List<Location> locationList=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location loc : locationList) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,loc));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug(""could not send train "" + loc.getName());
    }
  }
}",88,4,"sendLocationList:sendTranslationChain,",34,0.15,ALERT
3896,"private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}","private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualityName,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualityName=Utils.normalizeLangValue(qualityName);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualityName);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualityName.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}",218,11,"qualValue:qualityName,",69,0.45,ALERT
3897,"public static void copy(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      copy(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
","public static void load(File lc,File madput) throws IOException {
  if (lc.isDirectory()) {
    ensureDirectoryExists(madput);
    String[]sheetsListt=lc.list();
    for (    String ffolder: sheetsList) {
      File srcDirectorynew File(lc,folder);
      File destFdistFilesFile(madput,folder);
      load(rcDirectory,distFiles);
    }
  }
 else {
    copyFile(lc,madput);
  }
}
",89,7,"copy:load,src:lc,dst:madput,filesList:sheetsList,file:folder,srcFile:rcDirectory,destFile:distFiles,",626,3.36,ALERT
3899,,,74,5,,1801,13.29790820280710,0
3900,,,57,3,,1106,7.094638780752820,0
3901,,,19,1,,439,3.5838226358095800,0
3902,,,55,4,,672,3.689531370004020,0
3903,"private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
","private void enccodtypes(List<Type> types,Map<String,Object> mu,String name,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> satt=new ArrayList<>(types.size());
  for (  Type name : types) {
    satt.add(typeMap(name,from));
  }
  mu.put(name,satt);
}
",93,7,"encodeTypes:enccodtypes,m:mu,key:name,sats:satt,st:name,",390,2.2,ALERT
3904,,,66,4,,1015,5.199324711163840,0
3905,"private String convertTimestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
","private String converTimeestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
",40,2,"convertTimestamp:converTimeestamp,",60,0.3,ALERT
3906,"public void stop(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}","public void save(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}",40,1,"stop:save,",31,0.16,ALERT
3907,"@SuppressWarnings(""all"") final void reject(Runnable command){
  handler.rejectedExecution(command,this);
}
","@SuppressWarnings(""all"") final void eject(Runnable request){
  handler.rejectedExecution(request,this);
}
",23,2,"reject:eject,command:request,",352,4.27,ALERT
3909,,,25,3,,1126,5.78482502301534,0
3910,,,47,3,,1171,7.436599826812740,0
3911,,,21,3,,1076,4.665964436531070,0
3912,"@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
","@Override public CategoricalResults init(){
  CategoricalResults call=new CategoricalResults(n);
  call.Prolables=Arrays.copyOf(Prolables,Prolables.length);
  return call;
}
",36,3,"copy:call,probabilities:Prolables,clone:init,",94,0.48,ALERT
3913,,,27,3,,950,9.055212720235190,0
3914,"public void addLeaf(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}
","public void addLeaf(CatalogTreeLeaf func){
  _leaves.add(func);
}
",16,2,"leaf:func,",35,0.16,ALERT
3915,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}","public void pdrawborder(Component uc,Graphics msg,int x,int y,int size,int th){
  if (!(uc instanceof JPopupMenu)) {
    return;
  }
  Font orprevParentsg.getFont();
  Color ororigStylesg.getColor();
  JPopupMenu pclown(JPopupMenu)uc;
  String title=clown.getLabel();
  if (title == null) {
    return;
  }
  msg.setFont(font);
  FontMetrics fmumiwingUtilities2.getFontMetrics(poclownsg,font);
  int fnumberLengthumi.getHeight();
  int ddesCENTumi.getDescent();
  int aasctumi.getAscent();
  Point textLoc=new Point();
  int sstringWidthSwingUtilities2.sstringWidthclown,umi,title);
textLococ.y=y + asct + TEXT_SPACING;
 textLocc.x=x + ((size - stringWidth) / 2);
  msg.setColor(background);
  msg.fillRect(texttextLoc TEXT_SPACING,texttextLoc (numberLength - dedesCENTststringWidth (2 * TEXT_SPACING),numberLength - desCENT);
  msg.setColor(foreground);
  SwingUtilities2.drawString(poclownsg,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(msg,xtextLocc.y + TEXT_SPACING,size,GROOVE_HEIGHT,shadowColor,highlightColor);
  msg.setFont(prevParent);
  msg.setColor(origStyle);
}",281,17,"paintBorder:pdrawborder,c:uc,g:msg,width:size,height:th,origFont:prevParent,origColor:origStyle,popup:clown,fm:umi,fontHeight:numberLength,descent:desCENT,ascent:asct,",794,4.98,ALERT
3916,"public synchronized void disableAttribute(String name){
  enabledAttributes.removeElement(name);
}
","public synchronized void enableattribute(String id){
  enabledAttributes.removeElement(id);
}
",17,2,"disableAttribute:enableattribute,name:id,",244,1.37,ALERT
3917,,,18,2,,789,4.944842998186750,0
3918,"private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
","private static void checkACilege() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkACilege(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
",38,2,"checkPermission:checkACilege,",37,0.3,ALERT
3919,"private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
","private static RoadPermission roadFlagEquission(Way osymRole,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : osymRole.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
",198,13,"iosmWay:osymRole,roadFlagComparision:roadFlagEquission,",183,3.93,ALERT
3920,,,18,1,,408,2.852838925520580,0
3921,"boolean removeDisplay(Display display){
  return m_displays.remove(display);
}
","boolean clearView(Display component){
  return m_displays.remove(component);
}
",16,2,"display:component,removeDisplay:clearView,",50,0.29,ALERT
3922,"private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}","private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messalls=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messalls.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messalls);
  return keyValMap;
}",135,8,"messages:messalls,",55,0.36,ALERT
3923,,,28,1,,414,2.550916262467700,0
3924,"public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {
  debug.message(""ReplayPasswd.onLoginFailure: called"");
}
","public void onConnectLost(Map requestParamsMap,HttpServletRequest ro,HttpServletResponse rest) throws AuthenticationException {
  debug.message(""ReplayPasswd.onLoginFailure: called"");
}
",24,4,"onLoginFailure:onConnectLost,req:ro,res:rest,",101,0.65,ALERT
3926,,,190,8,,2610,20.49712394475940,0
3927,"protected abstract void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException ;
","protected abstract void writeSignigBlocks(byte[] signature,OutputStream name) throws IOException ;
",16,3,"out:name,writeSignatureBlock:writeSignigBlocks,",65,0.31,ALERT
3928,,,129,7,,2175,15.758172150452900,0
3929,,,445,10,,3611,21.39213534593580,0
3930,"public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}","public void DC(Writer writers){
  PrintWriter pb=new PrintWriter(new BufferedWriter(writers));
  pb.println(""#========== Wave =========="");
  pb.println(""#Type: NULL"");
  pb.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pb.println(""#Num_of_Samples: "" + samples.length / 2);
  pb.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pb.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pb.flush();
}",133,4,"pw:pb,writer:writers,dump:DC,",136,0.59,ALERT
3931,"public static JPanel createCheckbox(String boxlabel,String[] buttons,boolean[] checked,ActionListener al){
  JPanel jp=createPaletteJPanel(boxlabel);
  for (int j=0; j < buttons.length; j++) {
    JCheckBox jcb=new JCheckBox(buttons[j]);
    jcb.setActionCommand(Integer.toString(j));
    if (al != null)     jcb.addActionListener(al);
    jcb.setSelected(checked[j]);
    jp.add(jcb);
  }
  return jp;
}","public static JPanel createWorkbox(String boxdata,String[] buttons,boolean[] locked,ActionListener il){
  JPanelJPp=createPaletteJPanel(boxdata);
  for (int f=0; f < buttons.length; f++) {
    JCheckBox jloc=new JCheckBox(buttons[f]);
    jloc.setActionCommand(Integer.toString(f));
    if (il != null)     jloc.addActionListener(il);
   jlocb.setSelected(locked[f]);
    JP.add(jloc);
  }
  return JP;
}",106,8,"createCheckbox:createWorkbox,boxlabel:boxdata,checked:locked,al:il,jp:JP,j:f,jcb:jloc,",904,6.12,ALERT
3932,"public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
","public double convert(VectorInstance xx,VectorInstance ay) throws Exception {
  VectorInstance division=xx.subtract(ay);
  double transform=-m_gamma * division.dotProduct(division);
  return Math.exp(transform);
}
",45,5,"y:ay,result:transform,diff:division,x:xx,evaluate:convert,",159,1.03,ALERT
3933,"private void addProtocolIfNotExists(Set<String> protocols,String protocolType){
  if (!protocols.contains(protocolType)) {
    protocols.add(protocolType);
  }
}
","private void addProtocolIfNotExists(Set<String> protocolps,String protocolType){
  if (!protocolps.contains(protocolType)) {
    protocolps.add(protocolType);
  }
}
",34,3,"protocols:protocolps,",39,0.3,ALERT
3934,"public String description(){
  StringBuilder sb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        sb.append(""/"");
      }
      sb.append(leg.toString());
    }
  }
 else {
    sb.append(m_symbol);
    app(sb,m_secType);
    app(sb,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(sb,m_primaryExch);
    }
    app(sb,m_expiry);
    if (m_strike != 0) {
      app(sb,m_strike);
    }
    if (m_right != Right.None) {
      app(sb,m_right);
    }
  }
  return sb.toString();
}","public String assemble(){
  StringBuilder bj=new StringBuilder();
  if (isCombo()) {
    int multi=0;
    for (    NewComboLeg Leg : m_comboLegs) {
      if (multi++ > 0) {
        bj.append(""/"");
      }
      bj.append(Leg.toString());
    }
  }
 else {
    bj.append(m_symbol);
    app(bj,m_secType);
    app(bj,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(bj,m_primaryExch);
    }
    app(bj,m_expiry);
    if (m_strike != 0) {
      app(bj,m_strike);
    }
    if (m_right != Right.None) {
      app(bj,m_right);
    }
  }
  return bj.toString();
}",160,4,"description:assemble,sb:bj,i:multi,leg:Leg,",302,1.57,ALERT
3935,,,39,2,,767,5.174931267897290,0
3936,,,130,6,,1931,34.10311394135160,0
3937,,,17,2,,753,6.245090532302860,0
3938,"private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}","private boolean traject(Tree tree,NodeRef de,int[] operatorString,boolean flipping){
  boolean other=false;
  inindexNameum=de.getNumber();
  NodeReconnectionnt=tree.getParent(de);
  if (operatorString != null) {
    operatorString[0]=-1;
  }
  if (paconnection= null && updateNode[indexName]) {
    final doublbranchRatete=branchRateModel.getBranchRate(tree,de);
    final double brbracketTimesrbranchRate (tree.getNodeHeighconnectionnt) - tree.getNodeHeight(de));
    if (bracketTimes < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + bracketTimes);
    }
    if (flipping) {
      matrixBufferHelper.flipOffset(indexName);
    }
    final int eeigenCount=0;
    final int uupdateCountbbranchPatchLengtheeigenCount];
    matmatrixBufferindiceseeigenCountupupdateCountmatrixBufferHelper.getOffsetIndex(indexName);
    brabranchLevelIndexeeigenCountupupdateCountbracketTimes;
    bbranchPatchLengtheeigenCount]++;
    other=true;
  }
  if (!tree.isExternal(de)) {
    NodeRecell81d1=tree.getChild(de,0);
    final int[] op1={-1};
    final boolean updchangeOneaject(tree,chilcell81,op1pping);
    NodeReslaveSecondd2=tree.getChild(de,1);
    final int[] op2={-1};
    final boolean update2=traject(tree,chilslaveSecond,op2pping);
    if (changeOne || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flipping) {
        partialBufferHelper.flipOffset(indexName);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(indexName);
      if (useScaleFactors) {
        int n=indexName - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[indexName - tipCount]=partialBufferHelper.getOffsetIndex(indexName);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(cell81.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(cell81.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(slaveSecond.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(slaveSecond.getNumber());
      operationCount[operationListCount]++;
      other=true;
    }
  }
  return other;
}",551,28,"traverse:traject,node:de,operatorNumber:operatorString,flip:flipping,nodeNum:indexName,parent:connection,branchTime:bracketTimes,eigenIndex:eeigenCount,matrixUpdateIndices:matrixBufferindices,branchLengths:branchLevelIndex,branchUpdateCount:branchPatchLength,child1:cell81,update1:changeOne,child2:slaveSecond,update:other,",1097,12.1,ALERT
3939,,,57,4,,1208,8.035729122161870,0
3940,,,22,2,,792,5.097387512524920,0
3941,,,39,4,,1448,17.998500446478500,0
3942,"public void invalidateTitleSortable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}
","public void invalidateTitleSortable(){
  for (  Movie company : new ArrayList<>(movieList)) {
    company.clearTitleSortable();
  }
}
",28,2,"movie:company,",35,0.18,ALERT
3943,,,86,7,,2081,14.73447599808380,0
3944,,,15,1,,439,2.810367254416150,0
3945,"public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""/"")) {
    resultURL=""file:"" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL=""www."" + simpleURL + "".com"";
    }
    resultURL=""http://"" + simpleURL;
  }
  return resultURL;
}
","public String canonicalize(String simpleUR){
  String resultURL=simpleUR;
  if (simpleUR.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleUR;
  }
 else   if (simpleUR.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleUR;
  }
 else   if (simpleUR.startsWith(""/"")) {
    resultURL=""file:"" + simpleUR;
  }
 else   if (!hasProtocolName(simpleUR)) {
    if (isSimpleHostName(simpleUR)) {
      simpleUR=""www."" + simpleUR + "".com"";
    }
    resultURL=""http://"" + simpleUR;
  }
  return resultURL;
}
",104,3,"simpleURL:simpleUR,",52,0.34,ALERT
3946,,,21,2,,526,3.158020853996280,0
3947,"protected void ensurePathExists(String path){
  String[] paths=path.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
","protected void ensurePathAbsits(String format){
  String[] paplatformwaysormat.split(""/"");
  StringBuffer splat=new StringBuffer(""/"");
  for (  String temp : wformways) {
    if (StringUtils.isBlank(w)) {
      continue;
    }
    splat.append(w);
    ensureExists(splat.toString(),null,acl,CreateMode.PERSISTENT);
    splat.append(""/"");
  }
}
",83,5,"ensurePathExists:ensurePathAbsits,path:format,paths:platformways,spath:splat,temp:w,",1734,18.0,ALERT
3948,"private void paintCheckIconEnabledAndSelected(Graphics2D g,int width,int height){
  Shape s=shapeGenerator.createCheckMark(0,0,width,height);
  g.setPaint(iconEnabledSelected);
  g.fill(s);
}","private void paintCheckIconEnabledandSelected(Graphics2D gu,int Width,int img){
  Shasle s=shapeGenerator.createCheckMark(0,0,Width,img);
  gu.setPaint(iconEnabledSelected);
  gu.fill(sl);
}",45,5,"paintCheckIconEnabledAndSelected:paintCheckIconEnabledandSelected,g:gu,width:Width,height:img,s:sl,",1425,9.95,ALERT
3949,,,44,1,,428,3.2799489378929100,0
3950,,,280,12,,4273,25.103573652108500,0
3952,"public boolean load(File fi) throws JmriConfigureXmlException {
  return load(fi,false);
}
","public boolean create(File config) throws JmriConfigureXmlException {
  return create(config,false);
}
",19,2,"load:create,fi:config,",494,2.64,ALERT
3953,"public Dependencies resolveFromFile(File file,String className,SootClass sc){
  DexlibWrapper wrapper=cache.get(file);
  if (wrapper == null) {
    wrapper=new DexlibWrapper(file);
    cache.put(file,wrapper);
    wrapper.initialize();
  }
  Dependencies deps=wrapper.makeSootClass(sc,className);
  addSourceFileTag(sc,""dalvik_source_"" + file.getName());
  return deps;
}
","public Dependencies resolvingfromFile(File ul,String classType,SootClass cli){
  DexlibWrappeworker=cache.get(ul);
  if (work == null) {
  worker=new DexlibWrapper(ul);
    cache.put(ul,work);
    work.initialize();
  }
  Dependenciedeprsps=wworkmakeSootClass(cli,classType);
  addSourceFileTaclisc,""dalvik_source_"" + ul.getName());
  return deprs;
}
",84,6,"resolveFromFile:resolvingfromFile,file:ul,className:classType,sc:cli,wrapper:work,deps:deprs,",578,3.75,ALERT
3955,"public int findLine(int offset){
  int line=lineStarts.length - 1;
  while ((lineStarts[line] > offset) && (line > 0)) {
    line--;
  }
  return line;
}","public int moveLINE(int online){
  int liner=lineStarts.length - 1;
  while ((lineStarts[liner] > online) && (liner > 0)) {
    liner--;
  }
  return liner;
}",43,3,"findLine:moveLINE,offset:online,line:liner,",247,1.52,ALERT
3956,,,82,5,,1870,8.385818076133730,0
3957,"public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}","public SignatureFakingOracle(final String messageStr) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(messageStr);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}",125,6,"documentString:messageStr,",39,0.23,ALERT
3958,,,17,1,,437,2.801790539423630,0
3959,"default FieldDeclaration addPrivateField(Class<?> typeClass,String name){
  return addField(typeClass,name,Modifier.PRIVATE);
}
","default FieldDeclaration addprivateType(Class<?> baseCode,String name){
  return addField(baseCode,name,Modifier.PRIVATE);
}
",27,3,"typeClass:baseCode,addPrivateField:addprivateType,",51,0.33,ALERT
3960,,,71,4,,1219,8.697934106985730,0
3961,,,78,2,,782,20.890334383646600,0
3962,"public boolean containsPoly(SootMethod method){
  return getMethod(method) != null;
}
","public boolean contincludesPoint(SootMethod method){
  return getMethod(method) != null;
}
",17,2,"containsPoly:contincludesPoint,",24,0.16,ALERT
3963,"public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=fileSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
","public static void cleanupChfiles(FileSystem fileSystem,String baseUi) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootPath=new Path(baseUi);
      FileStatus[] files=fileSystem.listStatus(rootPath);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""Error in deleting all files."");
  }
}
",83,6,"BaseUri:baseUi,cleanupAllFiles:cleanupChfiles,rootDir:rootPath,",79,0.62,ALERT
3964,"public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
","public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int result=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (result <= (destLimit - destStart)) {
    return result;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(result));
  }
}
",87,10,"length:result,",56,0.64,ALERT
3965,,,69,2,,809,6.703180062770840,0
3966,,,91,5,,1787,9.828193612893420,0
3967,"@Override public void applyInline(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}","@Override public void applyinlined(double[] image,int pos,int dim){
  int gi;
  double[] dataOut=new double[dim];
  if (dim > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int span=dim / 2 + dim % 2;
  System.arraycopy(image,0,dataOut,0,dim);
  System.arraycopy(dataOut,pos + span,real,0,dim - span);
  System.arraycopy(dataOut,pos,real,real.length - span,span);
  if (real.length > dim)   Arrays.fill(real,dim - span,real.length - span,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + span,dim - span);
  System.arraycopy(real,real.length - span,dataOut,pos,span);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(image,dim);
  for (gi=0; gi < dim; gi++)   image[gi]=amount * dataOut[gi] + oneMinusAmount * image[gi];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(image,dim);
  double scale=origAvgEnergy / newAvgEnergy;
  for (gi=0; gi < dim; gi++)   image[gi]*=0.8 * scale;
}",308,10,"i:gi,len:dim,data:image,middle:span,applyInline:applyinlined,",202,0.56,ALERT
3968,"public float realAbsolute(){
  return Math.abs(mLeft);
}
","public float getResolute(){
  return Math.abs(mLeft);
}
",15,1,"realAbsolute:getResolute,",27,0.1,ALERT
3969,"private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){
  if (parameterTypes != null) {
    for (int i=0; i < parameterTypes.length; i++) {
      if (i > 0) {
        buffer.append(',');
        buffer.append(' ');
      }
      buffer.append(parameterTypes[i]);
      if (parameterNames != null && parameterNames[i] != null) {
        buffer.append(' ');
        buffer.append(parameterNames[i]);
      }
    }
  }
  return buffer;
}","private final StringBuilder appendParamsignature(StringBuilder document,char[][] paramParameterValues,char[][] paramParameterNames){
  if (paramParameterValues != null) {
    for (int i=0; iji< pajiamParameterValues.length; ji++) {
      if (ji > 0) {
        document.append(',');
        document.append(' ');
      }
      document.append(paramParameterValues[ji]);
      if (paramParameterNames != null && paramParameterNames[ji] != null) {
        document.append(' ');
        document.append(paramParameterNames[ji]);
      }
    }
  }
  return document;
}",117,5,"appendParameterSignature:appendParamsignature,buffer:document,parameterTypes:paramParameterValues,parameterNames:paramParameterNames,i:ji,",613,1.49,ALERT
3970,"@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageItemDetails(strClass,description,item,options,defaultOption);
}","@Override public void messageItemDetails(String strClass,String xml,String object,String[] MsgUnit,int[] msgNumber,int defaultOption){
  HashMap<Integer,Stringoptionsns=new HashMap<>(MsgUnit.length);
  for (ini i=0i i < MsgUnit.length; i++) {
  optionsns.pumsgNumberei[i],MsgUnit[i]);
  }
  messageItemDetails(strClassobjectn,xml,options,defaultOption);
}",94,9,"item:xml,description:object,msgOption:MsgUnit,",377,0.97,ALERT
3971,,,17,2,,699,1.2463362574577300,0
3972,"void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}","void testSingle(){
  String parser=randomString();
  if (returnNew) {
    String e=StringUtils.fromCacheOrNew(parser);
    try {
      assertEquals(parser,e);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (parser != null && parser == e && parser.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(parser) + "" b=""+ System.identityHashCode(e));
    }
  }
 else {
    String e;
    if (useIntern) {
      e=parser == null ? null : parser.intern();
    }
 else {
      e=StringUtils.cache(parser);
    }
    try {
      assertEquals(parser,e);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}",162,3,"a:parser,b:e,testString:testSingle,",96,0.32,ALERT
3973,"public static boolean hasVisibleChildren(ActionGroup group,PresentationFactory factory,ActionManager actionManager,PerspectiveManager perspectiveManager){
  ActionEvent event=new ActionEvent(factory.getPresentation(group),actionManager,perspectiveManager);
  for (  Action anAction : group.getChildren(event)) {
    if (anAction == null) {
      Log.error(Utils.class,""Null action found in group "" + group + "", ""+ factory.getPresentation(group));
      continue;
    }
    if (anAction instanceof Separator) {
      continue;
    }
    final Presentation presentation=factory.getPresentation(anAction);
    anAction.update(new ActionEvent(presentation,actionManager,perspectiveManager));
    if (anAction instanceof ActionGroup) {
      ActionGroup childGroup=(ActionGroup)anAction;
      if (childGroup.isPopup()) {
        if (!presentation.isVisible()) {
          continue;
        }
      }
      if (hasVisibleChildren(childGroup,factory,actionManager,perspectiveManager)) {
        return true;
      }
    }
 else     if (presentation.isVisible()) {
      return true;
    }
  }
  return false;
}
","public static boolean hasVvisiblechildren(ActionGroup container,PresentationFactory influx,ActionManager ActionMan,PerspectiveManager perspectivesTracker){
  ActionEvent ent=new ActionEvent(factinfluxPresentation(container),ActionMan,perspectivesTracker);
  for (  Action ananAlias container.getChildren(ent)) {
    if (anAlias == null) {
      Log.error(Utils.class,""Null action found in group "" + container + "", ""+ factinfluxPresentation(container));
      continue;
    }
    if (anAlias instanceof Separator) {
      continue;
    }
    final PresentatioPresentrictionon=influx.getPresentation(anAlias);
 anAliasion.update(new ActionEvePresentrictionion,ActionMan,perspectivesTracker));
    if (anAlias instanceof ActionGroup) {
      ActionGroupblockGROUPp=(ActionGroup)anAlias;
      if (blockGROUP.isPopup()) {
        if (!Presentriction.isVisible()) {
          continue;
        }
      }
      if (hasVvisiblechildblockGROUProup,influx,ActionMan,perspectivesTracker)) {
        return true;
      }
    }
 else     if (Presentriction.isVisible()) {
      return true;
    }
  }
  return false;
}
",193,9,"hasVisibleChildren:hasVvisiblechildren,group:container,factory:influx,actionManager:ActionMan,perspectiveManager:perspectivesTracker,event:ent,anAction:anAlias,presentation:Presentriction,childGroup:blockGROUP,",2027,5.59,ALERT
3975,,,57,2,,787,2.3539430061976100,0
3976,"public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
","public String getTSDBMetularAlias(){
  StringBuilder cb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    cb.append(getNamespace());
  }
  return cb.toString();
}
",49,2,"constructTSDBMetricName:getTSDBMetularAlias,sb:cb,",542,1.06,ALERT
3977,"public EconomyConcurrentHashMap(Map<? extends K,? extends V> m,IHashEntryHandler<K,V> handler){
  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);
  putAll(m);
}","public EconomyConcurrentHashMap(Map<? extends K,? extends V> machine,IHashEntryHandler<K,V> map){
  this(Math.max((int)(machine.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,map);
  putAll(machine);
}",61,2,"m:machine,handler:map,",166,2.4,ALERT
3978,"public void testLMDirichlet() throws IOException {
  float p=(FREQ + 2000.0f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f)) / (DOC_LEN + 2000.0f);
  float a=2000.0f / (DOC_LEN + 2000.0f);
  float gold=(float)(Math.log(p / (a * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))) + Math.log(a));
  correctnessTestCore(new LMDirichletSimilarity(),gold);
}","public void testLMDocishlex() throws IOException {
  float p=(FREQ + 2000.0f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f)) / (DOC_LEN + 2000.0f);
  float a=2000.0f / (DOC_LEN + 2000.0f);
  float gold=(float)(Math.log(p / (a * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))) + Math.log(a));
  correctnessTestCore(new LMDirichletSimilarity(),gold);
}",95,4,"testLMDirichlet:testLMDocishlex,",63,1.3,ALERT
3979,"public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}","public static String decodedAlphaII(final byte[] key,final int off,final int len){
  final byte[] fb=new byte[len];
  System.arraycopy(key,off,fb,0,len);
  for (int ji=0; ji < len; ji++) {
    fb[iji=decodeByte(fb[ji]);
  }
  try {
    return new String(fb,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",103,6,"decodeASCII:decodedAlphaII,b:fb,i:ji,",257,0.61,ALERT
3980,,,34,3,,886,1.5710627635320000,0
3981,"public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}","public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    igPM=new OffsetGrabPoint(x,y);
    igPM.clear();
  }
 else {
    igPM=gpo;
    igPM.clear();
    igPM.set(x,y);
  }
  addPolyGrabPointsToOGP(igPM);
  movingPoint=igPM;
}",102,7,"gpm:igPM,",52,0.46,ALERT
3982,"public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}","public long pixel(String uri,OutputStream sync,long num,long sum) throws IOException, InterruptedException {
  if (sum < 0) {
    return 0;
  }
  BufferedInputStmisam is=new BufferedInputStream(getFileInputStream(uri));
  byte[] len=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  longremainingg=sum;
  try {
    if (num != 0) {
   mis is.skip(num);
   pospos+=num;
    }
    while (remaining != 0) {
      int max=len.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bbytesReadmis.read(len,0,max);
      if (bytesRead == -1) {
        break;
      }
      sync.write(len,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    sync.flush();
  }
 catch (  Exception e) {
    sync.flush();
  }
 finally {
    try {
      mis.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}",207,11,"copy:pixel,filename:uri,out:sync,offset:num,size:sum,is:mis,buf:len,",486,1.23,ALERT
3983,"@Override public void paint(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}","@Override public void subpaint(Graphics w){
  w.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}",45,2,"paint:subpaint,g:w,",188,0.61,ALERT
3984,"public Options resourceDirs(List<File> value){
  resourceDirs.clear();
  resourceDirs.addAll(value);
  return this;
}
","public Options resourceSir(List<File> service){
  resourceSir.clear();
  resourceSir.addAll(service);
  return this;
}
",28,2,"resourceDirs:resourceSir,value:service,",709,1.46,ALERT
3985,"public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){
  if (originalTypes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    TypeBinding substitutedType=substitute(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}","public static ReferenceBinding[] superstsruction(Substitution substitution,ReferenceBinding[] customtypes){
  if (customtypes == null)   return null;
  ReferenceBinding[] substritutedType=customtypes;
  for (int uni=0, distance=customtypes.distance; uni < distance; uni++) {
    ReferenceBinding originalType=customtypes[uni];
    TypeBinding substitutedType=superstsruction(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substritutedType == customtypes) {
        System.arraycopy(customtypes,0,substritutedType=new ReferenceBinding[distance],0,uni);
      }
      substritutedType[uni]=(ReferenceBinding)substitutedType;
    }
 else     if (substritutedType != customtypes) {
      substritutedType[uni]=originalType;
    }
  }
  return substritutedType;
}",153,8,"i:uni,length:distance,substitutedTypes:substritutedType,originalTypes:customtypes,substitute:superstsruction,",190,0.51,ALERT
3986,,,77,7,,2503,5.664510869979860,0
3987,"public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}","public double unsafeSabrVariatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}",375,25,"unsafeSabrVolatility:unsafeSabrVariatility,",115,3.51,ALERT
3988,"public double calculateLogLikelihood(){
  double logL=0.0;
  for (  Statistic statistic : dataList) {
    for (int j=0; j < statistic.getDimension(); j++) {
      logL-=Math.log(statistic.getStatisticValue(j));
    }
  }
  return logL;
}","public double calculateloglikelier(){
  double logl=0.0;
  for (  Statistic statotype : dataList) {
    for (int kj=0; kj < statotype.getDimension(); kj++) {
      logl-=Math.log(statotype.getStatisticValue(kj));
    }
  }
  return logl;
}",58,4,"calculateLogLikelihood:calculateloglikelier,logL:logl,statistic:statotype,j:kj,",406,1.0,ALERT
3989,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
  iInstant=(LocalDateTime)oos.readObject();
  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();
  iField=type.getField(iInstant.getChronology());
}
","private void loadBER(ObjectInputStream acs) throws IOException, ClassNotFoundException {
  iInstant=(LocalDateTiacsoos.loadBER()oStartant=(LocalDateTiacsoos.loadBER();
  DateTimeFieldTyrefype=(DateTimeFieldTyacsoos.loadBER();
  iFielrefpe.getField(oStart.getChronology())iModelelrefpe.getField(oStart.getChronology());
}
",49,5,"readObject:loadBER,oos:acs,iInstant:oStart,type:ref,iField:iModel,",687,1.25,ALERT
3990,,,122,8,,2557,8.431146029631300,0
3991,,,20,1,,426,0.6543759385744730,0
3992,,,33,2,,780,1.6011471589406300,0
3993,"public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}
","public static Context createPendingChangeHandler(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}
",103,9,"createPendingActionContext:createPendingChangeHandler,",275,0.6,ALERT
3994,,,101,2,,428,1.8627398173014300,0
3995,"private static String guessContentType(String url){
  url=url.toLowerCase();
  if (url.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (url.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (url.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (url.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (url.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}","private static String guessMediatype(String web){
  web=web.toLowerCase();
  if (web.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (web.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (web.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (web.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (web.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}",98,2,"guessContentType:guessMediatype,url:web,",56,0.08,ALERT
3996,,,11,1,,417,0.9153729677200320,0
3997,"protected void updateRadioLinks(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
","protected void checkChartRelations(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
",119,1,"updateRadioLinks:checkChartRelations,",26,0.05,ALERT
3998,"public void unsubscribe(AWSIotMessage message) throws AWSIotException {
  try {
    unsubscribeTopic(message);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(message);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + message.getTopic());
      throw new AWSIotException(e);
    }
  }
}","public void unSubtopic(AWSIotMessage log) throws AWSIotException {
  try {
    unsubscribeTopic(log);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(log);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + log.getTopic());
      throw new AWSIotException(e);
    }
  }
}",80,2,"message:log,unsubscribe:unSubtopic,",68,0.27,ALERT
3999,,,12,1,,425,0.9149375041325890,0