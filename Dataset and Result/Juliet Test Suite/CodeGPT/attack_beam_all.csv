Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,489,12,,5743,5.192296489079793,0
1,,,167,9,,2565,2.378046083450317,0
2,,,186,8,,2260,2.1640560905138653,0
3,,,47,4,,405,0.39626370271046957,0
4,,,252,9,,2072,1.9246974468231202,0
5,,,109,4,,547,0.5266749540964762,0
6,,,128,7,,1229,1.149781580766042,0
7,,,71,4,,644,0.5919501463572184,0
8,,,341,10,,944,0.9081082979838053,0
9,,,333,10,,3989,3.489561160405477,0
10,,,368,10,,3584,3.4377400716145834,0
11,,,284,10,,4122,3.996805707613627,0
12,,,134,5,,831,0.7297802209854126,0
13,,,40,2,,190,0.19149139722188313,0
14,,,51,2,,124,0.1325942635536194,0
15,,,120,5,,498,0.4586391965548197,0
16,,,262,8,,848,0.8209098895390828,0
17,,,79,4,,531,0.5076901078224182,0
18,,,140,5,,768,0.7664877057075501,0
19,,,68,3,,302,0.2889874537785848,0
20,,,199,8,,1640,1.64401642481486,0
21,,,105,5,,922,0.9095270156860351,0
22,,,275,10,,3643,3.809084459145864,0
23,,,266,7,,859,0.8410147269566853,0
24,,,137,3,,405,0.3473773996035258,0
25,,,231,6,,1536,1.325223195552826,0
26,,,504,12,,5279,5.245310346285502,0
27,,,163,8,,2108,2.0838920791943867,0
28,,,292,8,,2008,2.127891782919566,0
29,,,99,2,,175,0.19675781726837158,0
30,,,284,6,,340,0.37326956192652383,0
31,,,150,5,,850,0.9056762377421061,0
32,,,51,3,,268,0.28252147833506264,0
33,,,288,9,,3106,2.8920278946558633,0
34,,,117,6,,1329,1.2166118264198302,0
35,,,420,10,,2224,2.211108342806498,0
36,,,66,3,,318,0.2936365763346354,0
37,,,261,10,,2302,2.013594082991282,0
38,,,108,3,,400,0.3589353322982788,0
39,,,95,2,,175,0.1741057793299357,0
40,,,91,3,,283,0.2772700707117716,0
41,,,52,2,,163,0.18453135093053183,0
42,,,146,8,,1768,1.8767793854077657,0
43,,,55,5,,570,0.6306558926900228,0
44,,,44,2,,137,0.15726324717203777,0
45,,,206,7,,1986,1.8985523462295533,0
46,,,121,7,,1875,1.8252484957377115,0
47,,,103,4,,565,0.5951907714207967,0
48,,,41,4,,369,0.3329475482304891,0
49,,,99,3,,343,0.3156416575113932,0
50,,,214,8,,2290,2.068085273106893,0
51,,,82,4,,644,0.5498251795768738,0
52,,,48,4,,469,0.4284924825032552,0
53,,,205,6,,1466,1.3509260296821595,0
54,,,143,7,,1346,1.3135362108548483,0
55,,,45,3,,355,0.34348577658335366,0
56,,,254,7,,1930,1.8808521986007691,0
57,,,22,1,,49,0.047525064150492353,0
58,,,339,16,,4747,4.5831906278928125,0
59,,,87,3,,282,0.3220192511876424,0
60,,,30,3,,87,0.09907190004984538,0
61,,,201,8,,1670,1.693322976430257,0
62,,,500,11,,4634,4.511488529046376,0
63,,,150,3,,303,0.2883160511652629,0
64,,,203,8,,1442,1.3033933440844219,0
65,,,101,3,,279,0.29673016468683877,0
66,,,399,12,,5758,5.91382493575414,0
67,,,59,4,,589,0.596181579430898,0
68,,,588,7,,1884,1.8245142817497253,0
69,,,61,2,,219,0.20329731702804565,0
70,,,181,8,,1574,1.5665427684783935,0
71,,,166,7,,1556,1.5047115047772726,0
72,,,101,3,,314,0.33798197905222577,0
73,,,106,6,,1309,1.2966439127922058,0
74,,,146,5,,802,0.797933308283488,0
75,,,271,8,,2482,2.5840889890988668,0
76,,,281,10,,3460,3.5022279898325603,0
77,,,261,8,,887,0.8187476356824239,0
78,,,367,10,,3929,3.7707881212234495,0
79,,,258,8,,2524,2.384688985347748,0
80,,,83,4,,509,0.46228203376134236,0
81,,,127,5,,897,0.8411981344223023,0
82,,,119,4,,536,0.47519665559132895,0
83,,,329,10,,3977,3.82397331794103,0
84,,,146,8,,1628,1.8055332859357198,0
85,,,95,3,,287,0.3184085210164388,0
86,,,93,4,,149,0.17611759901046753,0
87,,,273,9,,1096,1.1494094610214234,0
88,,,288,6,,926,0.8752755522727966,0
89,,,85,4,,386,0.4238962491353353,0
90,,,100,3,,283,0.3108858108520508,0
91,,,299,8,,709,0.7930795788764954,0
92,,,373,9,,3165,3.2005829493204754,0
93,,,281,5,,772,0.7452740907669068,0
94,,,56,4,,634,0.4954958399136861,0
95,,,236,8,,922,0.8495474139849345,0
96,,,137,3,,314,0.3403735518455505,0
97,,,72,3,,405,0.4141568144162496,0
98,,,424,11,,3062,2.9803614139556887,0
99,,,166,9,,1969,1.8609456857045492,0
100,,,456,10,,4023,4.000502192974091,0
101,,,297,8,,2504,2.5775888045628865,0
102,,,128,7,,1940,1.8799771348635355,0
103,,,164,6,,951,0.9798736969629923,0
104,,,95,3,,298,0.302649712562561,0
105,,,383,11,,1142,1.1254244526227315,0
106,,,107,5,,914,0.9044610818227132,0
107,,,240,8,,2504,2.6188785235087075,0
108,,,58,1,,49,0.061451820532480876,0
109,,,392,15,,5367,6.197317655881246,0
110,,,216,7,,1549,1.6449809590975444,0
111,,,67,3,,314,0.3284138679504395,0
112,,,232,8,,1673,1.6640888532002767,0
113,,,103,3,,235,0.26131128470102943,0
114,,,440,7,,1880,1.985642715295156,0
115,,,105,6,,166,0.16380404631296794,0
116,,,142,6,,1326,1.2148608207702636,0
117,,,333,9,,3054,2.8664878169695536,0
118,,,486,14,,5468,5.424871404965718,0
119,,,62,4,,591,0.48978167374928794,0
120,,,42,3,,286,0.24932348330815632,0
121,,,53,2,,142,0.14646603663762411,0
122,,,60,4,,550,0.55168803135554,0
123,,,58,3,,288,0.2741140405337016,0
124,,,154,6,,931,0.8891457994778951,0
125,,,225,9,,2395,2.2492755611737567,0
126,,,304,10,,1127,1.1638666232426962,0
127,,,281,5,,770,0.7966053247451782,0
128,,,136,6,,1215,1.1196312467257181,0
129,,,22,1,,51,0.0542430837949117,0
130,,,75,4,,534,0.48108893235524497,0
131,,,169,8,,1883,1.92360626856486,0
132,,,117,5,,763,0.7522095719973246,0
133,,,343,9,,495,0.4542632818222046,0
134,,,289,8,,1949,1.79698007106781,0
135,,,264,7,,2026,2.1043017784754436,0
136,,,41,2,,104,0.13197067578633626,0
137,,,69,4,,622,0.6868458310763041,0
138,,,513,12,,6156,6.199282538890839,0
139,,,339,9,,3180,2.75977144241333,0
140,,,325,10,,4128,4.21468745470047,0
141,,,276,9,,2072,1.9511706829071045,0
142,,,277,10,,3198,2.935999023914337,0
143,,,97,3,,318,0.31179760694503783,0
144,,,53,3,,292,0.3105322360992432,0
145,,,183,8,,1604,1.8684049248695374,0
146,,,303,10,,1032,1.1429100473721823,0
147,,,137,8,,1450,1.4710257490475973,0
148,,,412,8,,1616,1.5972286343574524,0
149,,,55,4,,517,0.45541317065556847,0
150,,,309,10,,3911,3.531933120886485,0
151,,,48,2,,122,0.1484999418258667,0
152,,,158,8,,2160,1.9464191516240439,0
153,,,64,4,,592,0.5204829851786296,0
154,,,315,10,,3844,3.6073917508125306,0
155,,,143,8,,2164,2.150471786657969,0
156,,,327,10,,3999,4.026952970027923,0
157,,,93,3,,251,0.27338987986246743,0
158,,,249,8,,2500,2.6039753357569375,0
159,,,50,5,,743,0.7965386708577474,0
160,,,183,8,,1860,2.139667268594106,0
161,,,113,6,,1145,1.2486215074857077,0
162,,,58,3,,400,0.408930238087972,0
163,,,279,10,,2505,2.662517241636912,0
164,,,184,9,,2546,2.732304775714874,0
165,,,150,8,,2135,1.9069896419843038,0
166,,,39,3,,119,0.0995172381401062,0
167,,,280,8,,2443,2.0563706517219544,0
168,,,73,4,,458,0.4482397437095642,0
169,,,364,10,,2845,2.651807673772176,0
170,,,368,10,,3278,2.7547014276186625,0
171,,,152,7,,1407,1.1148757219314576,0
172,,,140,6,,1062,0.7809533039728801,0
173,,,335,9,,526,0.3685674031575521,0
174,,,61,5,,782,0.5228445649147033,0
175,,,213,5,,770,0.5200241367022197,0
176,,,259,10,,2721,1.8428719957669577,0
177,,,243,6,,1541,1.0421203096707663,0
178,,,67,3,,119,0.08193517128626505,0
179,,,36,3,,266,0.17956778208414714,0
180,,,174,8,,1293,0.9418987234433492,0
181,,,298,9,,3204,2.16891462802887,0
182,,,63,2,,138,0.10294812520345052,0
183,,,54,2,,219,0.14944953918457032,0
184,,,85,3,,318,0.21836112737655639,0
185,,,390,10,,3992,2.7404512763023376,0
186,,,284,8,,2463,1.6642521937688193,0
187,,,280,9,,3439,2.3484849373499554,0
188,,,52,2,,127,0.10982083876927694,0
189,,,59,3,,293,0.19957779248555502,0
191,,,279,8,,527,0.3647371808687846,0
192,,,244,6,,1577,1.0441517074902853,0
193,,,59,4,,495,0.35768839915593464,0
194,,,247,6,,1536,1.0334928274154662,0
195,,,93,3,,251,0.18543155193328859,0
196,,,225,8,,2285,1.5100207924842834,0
197,,,216,6,,1107,0.7458792805671692,0
198,,,339,9,,1107,0.7701665361722311,0
199,,,182,8,,2166,1.4954222957293193,0
200,,,393,10,,3953,2.7615195631980898,0
201,,,74,2,,192,0.14842782417933145,0
202,,,278,10,,3413,2.5111767292022704,0
203,,,79,3,,324,0.21840345859527588,0
204,,,121,6,,950,0.7103200435638428,0
205,,,84,3,,287,0.20433026154836018,0
206,,,241,7,,864,0.5760395963986714,0
207,,,214,6,,1486,0.9801146109898885,0
208,,,244,9,,1795,1.141887402534485,0
209,,,138,5,,577,0.39471229712168376,0
210,,,214,9,,3377,2.1213467637697856,0
211,,,276,12,,4466,2.840000867843628,0
212,,,139,9,,1558,1.0224897861480713,0
213,,,69,4,,408,0.3087918003400167,0
214,,,249,9,,2813,1.7878652373949686,0
215,,,282,10,,3160,2.231538792451223,0
216,,,326,9,,3182,2.008786447842916,0
217,,,283,9,,2869,1.8373254140218098,0
218,,,290,9,,2001,1.241559056440989,0
219,,,255,7,,433,0.2756722211837769,0
220,,,163,7,,1182,0.7700423002243042,0
221,,,72,4,,479,0.3228333592414856,0
222,,,196,11,,4035,2.479377786318461,0
223,,,201,7,,1965,1.2229776620864867,0
224,,,183,4,,679,0.4297206878662109,0
225,,,72,3,,338,0.2142938494682312,0
226,,,268,13,,4328,2.794380235671997,0
227,,,105,8,,1854,1.1844950556755065,0
228,,,77,3,,259,0.16215004920959472,0
229,,,71,3,,318,0.19648520151774088,0
230,,,85,5,,794,0.5016701459884644,0
231,,,65,4,,505,0.3168846448262533,0
232,,,148,5,,808,0.5285514791806539,0
233,,,356,10,,4119,2.588380002975464,0
234,,,81,3,,251,0.17448324362436932,0
235,,,101,3,,287,0.18349158366521198,0
236,,,197,7,,1629,0.9984159469604492,0
237,,,386,12,,5288,3.5677658915519714,0
238,,,195,9,,2567,1.6388693531354268,0
239,,,233,8,,1566,1.0259944558143617,0
240,,,83,3,,283,0.2004112203915914,0
241,,,58,6,,1025,0.7232168436050415,0
242,,,365,10,,4019,2.8570398489634194,0
243,,,447,16,,6330,4.312521743774414,0
244,,,94,4,,560,0.33731656869252524,0
245,,,286,8,,2500,1.5566824595133464,0
246,,,64,4,,684,0.4193772713343302,0
247,,,66,3,,293,0.18193862438201905,0
248,,,88,5,,470,0.36352175871531167,0
249,,,33,4,,441,0.3068274815877279,0
250,,,251,9,,2062,1.3115368922551474,0
251,,,58,3,,318,0.20464311043421426,0
252,,,558,7,,1418,1.0890762726465861,0
253,,,344,11,,4907,3.0977726141611734,0
254,,,264,7,,402,0.24913351933161418,0
255,,,61,4,,618,0.3898464123408,0
256,,,81,2,,173,0.11402321656545003,0
257,,,237,8,,2044,1.2933870752652485,0
258,,,92,4,,483,0.31594529549280803,0
259,,,236,7,,828,0.511566956837972,0
260,,,360,11,,4950,3.4786656936009726,0
261,,,114,3,,287,0.20156114896138508,0
262,,,145,5,,780,0.5625730474789937,0
263,,,54,2,,219,0.15907313426335654,0
264,,,333,10,,2693,1.9280254205067953,0
265,,,99,7,,972,0.6877805829048157,0
266,,,83,3,,119,0.08650739192962646,0
267,,,56,2,,219,0.1603137771288554,0
268,,,290,8,,2352,1.6495169838269552,0
269,,,310,9,,2348,1.6656764308611551,0
270,,,82,3,,287,0.2090540329615275,0
271,,,216,8,,1646,1.1537925799687703,0
272,,,119,6,,1275,0.9287052313486736,0
273,,,40,4,,303,0.26266983350118,0
274,,,59,4,,612,0.43420058488845825,0
275,,,162,5,,811,0.6143202066421509,0
276,,,311,10,,1806,1.2736757795015972,0
277,,,412,10,,1142,0.8315006097157797,0
278,,,226,8,,2166,1.5161329984664917,0
279,,,235,7,,1691,1.2267150084177654,0
280,,,389,11,,4900,3.531100634733836,0
281,,,379,9,,3217,2.3199355085690816,0
282,,,157,6,,1256,0.9362312316894531,0
283,,,264,8,,894,0.629425299167633,0
284,,,337,9,,896,0.6277657826741536,0
285,,,480,16,,1271,1.0054370482762656,0
286,,,275,10,,3743,2.6111473361651103,0
287,,,155,7,,1727,1.2156394958496093,0
288,,,75,3,,318,0.22539873917897543,0
289,,,268,10,,3838,2.707844889163971,0
290,,,212,9,,3377,2.445173958937327,0
291,,,296,10,,3969,2.995470921198527,0
292,,,21,2,,175,0.12720138629277547,0
293,,,400,10,,2493,1.91909654935201,0
294,,,156,5,,794,0.6237636725107829,0
295,,,313,8,,2500,1.7804378430048624,0
296,,,333,6,,1044,0.7602992653846741,0
297,,,41,3,,368,0.2659205198287964,0
298,,,308,9,,549,0.4003219286600749,0
299,,,119,9,,1343,1.060200003782908,0
300,,,28,2,,97,0.10041826963424683,0
301,,,318,10,,2039,1.518643565972646,0
302,,,426,10,,1820,1.3771817564964295,0
303,,,53,5,,694,0.5353203455607096,0
304,,,63,4,,450,0.37629608710606893,0
305,,,292,10,,3945,2.9441790779431662,0
306,,,258,9,,523,0.38381547133127847,0
307,,,244,8,,578,0.4243872006734212,0
308,,,163,8,,1997,1.4720126191775005,0
309,,,127,8,,1385,0.9912923693656921,0
310,,,162,5,,510,0.35379627148310344,0
311,,,33,3,,399,0.27970734039942424,0
312,,,336,10,,3917,2.8055630485216776,0
313,,,266,10,,2192,1.5807169437408448,0
314,,,110,8,,854,0.6146156152089437,0
315,,,159,8,,1877,1.4206312457720438,0
316,,,61,4,,580,0.4246460119883219,0
317,,,137,5,,842,0.5979639768600464,0
318,,,254,8,,1695,1.191891860961914,0
319,,,348,10,,4019,2.8524033784866334,0
320,,,92,3,,286,0.2163268526395162,0
321,,,429,13,,4632,4.189007095495859,0
322,,,107,3,,283,0.19790024360020955,0
323,,,49,4,,518,0.3808408339818319,0
324,,,252,8,,487,0.34884095986684166,0
325,,,283,10,,3101,2.1948976119359336,0
326,,,301,10,,3917,2.8675546010335284,0
327,,,62,2,,159,0.12354592879613241,0
328,,,56,4,,534,0.3810040831565857,0
329,,,184,7,,1528,1.086555278301239,0
330,,,168,8,,1919,1.4934341152509054,0
331,,,377,7,,1547,1.1628341754277547,0
332,,,237,7,,1233,0.8870907505353292,0
333,,,252,9,,506,0.38525161345799763,0
334,,,165,5,,907,0.6638238827387491,0
335,,,162,3,,276,0.22235248883565267,0
336,,,34,2,,125,0.10849654277165731,0
337,,,333,9,,3213,2.381646490097046,0
338,,,282,8,,2469,1.823796240488688,0
339,,,297,13,,5555,4.240642547607422,0
340,,,68,5,,874,0.6711184581120809,0
341,,,57,3,,310,0.25526683727900185,0
342,,,95,6,,1381,1.0374731302261353,0
343,,,277,9,,2661,1.9825618306795756,0
344,,,304,9,,2210,1.653126092751821,0
345,,,50,2,,219,0.16908402840296427,0
346,,,259,8,,2352,1.7483147700627646,0
347,,,288,8,,2500,1.802293105920156,0
348,,,303,8,,2496,1.7996116002400717,0
349,,,285,11,,2137,1.5334986170132956,0
350,,,48,4,,444,0.4117239157358805,0
351,,,111,7,,1727,1.2657264947891236,0
352,,,253,9,,1063,0.8008731722831726,0
353,,,200,7,,766,0.5598633527755738,0
354,,,265,10,,1151,0.8800661126772563,0
355,,,91,3,,235,0.18213336865107219,0
356,,,312,7,,216,0.16290292342503865,0
357,,,294,10,,1010,0.7755487759908041,0
358,,,124,8,,1500,1.1792393962542216,0
359,,,329,9,,1046,0.7809037168820699,0
360,,,261,8,,2348,1.7792903780937195,0
361,,,56,4,,118,0.09074925978978475,0
362,,,329,10,,3879,2.9020170609156293,0
363,,,363,9,,1018,0.752946670850118,0
364,,,374,9,,2632,1.9680432081222534,0
365,,,116,8,,2371,1.827645758787791,0
366,,,210,8,,2647,1.9243055780728657,0
367,,,300,10,,2314,1.7530725955963136,0
368,,,79,6,,817,0.6196113785107931,0
369,,,40,4,,609,0.4588228742281596,0
370,,,341,9,,3209,2.4129506667455036,0
371,,,275,8,,2402,1.8065085927645366,0
372,,,110,3,,318,0.24009375174840292,0
373,,,68,3,,405,0.30159997940063477,0
374,,,136,5,,739,0.5644139210383098,0
375,,,364,10,,1142,0.8569561004638672,0
376,,,200,8,,1397,1.0413853208223978,0
377,,,356,10,,3024,2.270177257061005,0
378,,,89,5,,819,0.6318674166997273,0
379,,,340,10,,3943,3.000103517373403,0
380,,,69,5,,1037,0.7607536156972249,0
381,,,483,12,,768,0.5893832484881083,0
382,,,31,1,,25,0.026135929425557456,0
383,,,54,4,,702,0.5006229043006897,0
384,,,373,11,,5186,3.946688516934713,0
385,,,338,12,,5308,3.981876182556152,0
386,,,69,3,,150,0.10750726461410523,0
387,,,82,3,,321,0.22863274415334064,0
388,,,110,3,,287,0.206935981909434,0
389,,,40,1,,49,0.04400071700414022,0
390,,,270,9,,2850,2.0245002706845603,0
391,,,68,4,,684,0.4764772097269694,0
392,,,90,4,,459,0.3592705647150675,0
393,,,37,3,,266,0.19275037050247193,0
394,,,52,2,,111,0.10077332258224488,0
395,,,416,10,,1027,0.7669521888097127,0
396,,,244,9,,2686,1.9319524725278219,0
397,,,173,7,,1530,1.0916412790616354,0
398,,,94,5,,391,0.31361273527145384,0
399,,,306,9,,3136,2.2979580760002136,0
400,,,53,2,,214,0.16165413856506347,0
401,,,275,11,,3800,2.841693981488546,0
402,,,120,4,,464,0.3581063230832418,0
403,,,350,9,,2902,2.1505682627360025,0
404,,,53,3,,268,0.20355600118637085,0
405,,,238,8,,417,0.3231418013572693,0
406,,,429,10,,1848,1.3868202487627665,0
407,,,146,7,,1715,1.3579945762952168,0
408,,,82,3,,206,0.1613859176635742,0
409,,,370,11,,3561,2.442235275109609,0
410,,,237,8,,1904,1.3504140694936118,0
411,,,279,9,,2625,1.7466302355130514,0
412,,,193,8,,2171,1.4846517125765482,0
413,,,294,10,,3513,2.4773841897646585,0
414,,,240,7,,859,0.5797752618789673,0
415,,,614,10,,3675,2.5545762181282043,0
416,,,272,9,,946,0.6002697944641113,0
417,,,135,4,,390,0.2602863351504008,0
418,,,49,4,,514,0.32224785089492797,0
419,,,443,11,,3892,2.5444025953610736,0
420,,,360,10,,4114,3.035413122177124,0
421,,,65,5,,828,0.62972438732783,0
422,,,115,5,,525,0.4094543774922689,0
423,,,64,2,,163,0.1296462615331014,0
424,,,279,10,,3103,2.339823508262634,0
425,,,302,6,,1022,0.7807936509450276,0
426,,,288,9,,2353,1.7684731801350912,0
427,,,224,8,,2711,1.9721238573392232,0
428,,,87,3,,283,0.212412424882253,0
429,,,282,7,,1443,1.0612848202387493,0
430,,,462,12,,5046,4.015972638130188,0
431,,,313,10,,1210,0.8902493715286255,0
432,,,154,3,,106,0.08681397835413615,0
433,,,47,3,,88,0.06573670705159505,0
434,,,136,5,,873,0.6380533973375956,0
435,,,142,5,,931,0.6947183092435201,0
436,,,204,6,,1335,0.9777944087982178,0
437,,,251,7,,677,0.48882484833399453,0
438,,,75,4,,450,0.34223032792409264,0
439,,,92,4,,587,0.439876115322113,0
440,,,88,3,,282,0.21875154574712116,0
441,,,324,11,,4422,3.2680651426315306,0
442,,,267,10,,1598,1.1886751095453898,0
443,,,302,9,,3294,2.440144868691762,0
444,,,276,9,,518,0.382172425587972,0
445,,,191,7,,1183,0.8569541732470195,0
446,,,304,6,,960,0.6971822619438172,0
447,,,331,6,,1041,0.7756519238154094,0
448,,,115,6,,1184,0.8653849562009176,0
449,,,466,11,,1255,0.9807588656743368,0
450,,,339,10,,3987,3.0568652828534444,0
451,,,35,2,,175,0.13938149213790893,0
452,,,439,13,,4804,4.372282699743907,0
453,,,216,7,,1668,1.2196335633595785,0
454,,,278,6,,1231,0.9080148100852966,0
455,,,187,13,,5207,3.964016338189443,0
456,,,273,7,,1880,1.4225304961204528,0
457,,,91,3,,287,0.21998056173324584,0
458,,,392,9,,3101,2.541081980864207,0
459,,,276,12,,3950,3.051291803518931,0
460,,,246,9,,1630,1.2638147513071696,0
461,,,143,7,,1449,1.1052001953125,0
462,,,145,6,,1147,0.9137425780296325,0
463,,,245,7,,1733,1.3026117086410522,0
464,,,295,9,,711,0.5453479568163554,0
465,,,75,5,,474,0.3633246779441833,0
466,,,49,3,,174,0.1606670379638672,0
467,,,109,3,,287,0.2188403328259786,0
468,,,245,9,,1451,1.1248459219932556,0
469,,,67,3,,314,0.2394616921742757,0
470,,,36,3,,206,0.15642208258310955,0
471,,,278,12,,3564,2.8194913427035013,0
472,,,74,3,,338,0.25886148611704507,0
473,,,417,11,,4854,3.7893280386924744,0
474,,,61,4,,436,0.3168718457221985,0
475,,,202,5,,520,0.3698683222134908,0
476,,,321,9,,3182,2.307831887404124,0
477,,,141,3,,314,0.22919436693191528,0
478,,,144,5,,861,0.6237064758936565,0
479,,,656,10,,3217,2.5072521805763244,0
480,,,61,4,,593,0.45478689670562744,0
481,,,277,8,,2477,1.8123392661412556,0
482,,,53,4,,724,0.5183124899864197,0
483,,,253,9,,1820,1.3438896775245666,0
484,,,163,8,,1772,1.3981104135513305,0
485,,,107,4,,454,0.37538886864980064,0
486,,,333,10,,3997,2.913659381866455,0
487,,,232,6,,1337,0.9799827257792155,0
488,,,73,3,,318,0.2342230757077535,0
489,,,104,6,,147,0.12592649459838867,0
490,,,58,4,,485,0.3598844885826111,0
491,,,61,4,,110,0.0852424144744873,0
492,,,612,13,,5993,4.595438245932261,0
493,,,66,4,,627,0.46478156646092733,0
494,,,264,9,,2067,1.5277416149775187,0
495,,,57,4,,522,0.39244351784388226,0
496,,,275,9,,2696,1.9469858209292095,0
497,,,712,13,,791,0.6167421460151672,0
498,,,358,11,,5137,3.6922294894854226,0
499,,,414,9,,2693,1.9660623351732889,0
500,,,38,3,,268,0.1897167960802714,0
501,,,38,3,,206,0.14553906520207724,0
502,,,74,4,,484,0.39079227050145465,0
503,,,118,8,,1343,1.005986229578654,0
504,,,136,6,,1119,0.8589792172114055,0
505,,,202,6,,707,0.5138950983683268,0
506,,,269,9,,2849,2.1862489104270937,0
507,,,294,10,,3907,2.817869985103607,0
508,,,38,3,,324,0.22910804748535157,0
509,,,49,4,,511,0.36815265417098997,0
510,,,253,8,,799,0.5708150188128154,0
511,,,136,5,,828,0.6060710509618124,0
512,,,430,11,,4895,3.6247693419456484,0
513,,,265,6,,910,0.6800899823506673,0
514,,,65,5,,582,0.44509172439575195,0
515,,,273,8,,2500,1.821888534228007,0
516,,,172,11,,3470,2.632209801673889,0
517,,,263,8,,1687,1.2752083619435628,0
518,,,42,4,,480,0.35436466137568157,0
519,,,36,3,,111,0.09040534893671671,0
520,,,98,5,,758,0.6039657274881999,0
521,,,327,6,,932,0.7212421814600627,0
522,,,109,7,,1838,1.414565928777059,0
523,,,155,9,,2683,2.006561366717021,0
524,,,273,10,,3601,2.646084209283193,0
525,,,186,10,,2867,2.167825178305308,0
526,,,105,5,,594,0.4696791092554728,0
527,,,538,7,,1884,1.429991853237152,0
528,,,158,6,,1422,1.0267632206281025,0
529,,,79,4,,498,0.35897872447967527,0
530,,,93,3,,479,0.33435728152592975,0
531,,,56,2,,219,0.1582994262377421,0
532,,,71,4,,285,0.21329458554585776,0
533,,,312,12,,5233,4.00771609544754,0
534,,,294,10,,3154,2.2398487448692324,0
535,,,173,8,,1211,0.8598599910736084,0
536,,,135,9,,2220,1.6391703089078267,0
537,,,447,13,,4569,3.4064419507980346,0
538,,,256,8,,894,0.6793283422787985,0
539,,,58,3,,343,0.25758901834487913,0
540,,,351,10,,3047,2.234918475151062,0
541,,,161,8,,597,0.4355458378791809,0
542,,,41,5,,696,0.5113884846369425,0
543,,,58,4,,620,0.4603497862815857,0
544,,,171,6,,1286,0.9729305466016134,0
545,,,406,14,,4678,4.491850837071737,0
546,,,148,8,,391,0.290125568707784,0
547,,,160,8,,1664,1.2183348298072816,0
548,,,56,5,,715,0.6125292698542277,0
549,,,238,14,,6065,4.375300641854604,0
550,,,337,12,,4137,3.080668024222056,0
551,,,90,3,,239,0.19378674427668255,0
552,,,45,4,,391,0.2922473867734273,0
553,,,444,13,,5272,4.038388621807099,0
554,,,59,3,,314,0.24178030093510947,0
555,,,84,5,,1019,0.7463999549547832,0
556,,,120,3,,314,0.23449708620707194,0
557,,,266,7,,1293,0.9441566546758016,0
558,,,154,9,,2238,1.7981651862462362,0
559,,,290,9,,2393,1.8049598773320517,0
560,,,288,8,,2445,1.8063072125116983,0
561,,,113,5,,835,0.6525989015897115,0
562,,,257,8,,464,0.34146758715311687,0
563,,,484,13,,4732,3.9045551578203836,0
564,,,77,3,,343,0.2515048583348592,0
565,,,282,9,,3169,2.34125239054362,0
566,,,99,3,,283,0.20917661984761557,0
567,,,345,10,,2948,2.215785237153371,0
568,,,321,13,,5837,4.378146398067474,0
569,,,122,4,,663,0.49637967348098755,0
570,,,61,3,,191,0.17714203596115113,0
571,,,157,6,,1233,0.9342217604319255,0
572,,,83,3,,283,0.21145617167154948,0
573,,,415,12,,6169,4.6827371915181475,0
574,,,131,8,,1101,0.8632567008336385,0
575,,,167,6,,984,0.7578296343485514,0
576,,,246,8,,2470,1.844011620680491,0
577,,,268,9,,1897,1.4216947635014852,0
579,,,127,8,,1506,1.1320391654968263,0
580,,,339,10,,3121,2.3734562238057455,0
581,,,86,3,,314,0.23656953970591227,0
582,,,342,10,,4047,3.0993390242258707,0
583,,,288,8,,1668,1.2661182244618734,0
584,,,69,3,,287,0.21530725955963134,0
585,,,161,6,,783,0.5801252325375875,0
586,,,75,6,,1286,0.9455808718999227,0
587,,,313,8,,2504,1.8584951043128968,0
588,,,272,9,,3099,2.338112191359202,0
589,,,213,8,,1360,0.9979645013809204,0
590,,,301,9,,3217,2.3240280826886495,0
591,,,294,9,,3193,2.3606287956237795,0
592,,,146,3,,227,0.1876016616821289,0
593,,,98,5,,592,0.4639357805252075,0
594,,,132,6,,442,0.3510697801907857,0
595,,,313,10,,2347,1.7227076609929404,0
596,,,373,9,,3126,2.318117618560791,0
597,,,417,12,,3271,2.5031059861183165,0
598,,,146,6,,842,0.6531813661257426,0
599,,,56,4,,679,0.5063332279523214,0
600,,,41,4,,381,0.28732478618621826,0
601,,,58,2,,88,0.0665188709894816,0
602,,,81,3,,324,0.24033257563908894,0
603,,,44,4,,462,0.36792217890421547,0
604,,,142,7,,1417,1.0716979543368021,0
605,,,279,10,,2046,1.5382510741551718,0
606,,,291,9,,3116,2.337794303894043,0
607,,,248,8,,2543,1.9004840095837912,0
608,"private void Test077903(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    if (privateTrue)
    {
        Cookie cookie = new Cookie(""SecretMessage"", ""Drink your Ovaltine"");
        if (request.isSecure())
        {
            cookie.setSecure(true);
            response.addCookie(cookie);
        }
    }
}","private void Test077903(HttpServletRequest model, HttpServletResponse response) throws Throwable
{
    if (publicTrue)
    {
        Cookie cookie = new Cookie(""SecretMessage"", ""Drink your Ovaltine"");
        if (model.isSecure())
        {
            cookie.setSecure(true);
            response.addCookie(cookie);
        }
    }
}",55,5,"privateTrue:publicTrue,request:model,",137,0.1070109208424886,Beam
609,,,68,3,,314,0.23180218935012817,0
610,,,63,4,,119,0.10864297548929851,0
611,,,180,7,,2079,1.4973062435785929,0
612,,,384,11,,3397,2.606402893861135,0
613,,,358,10,,3341,2.6118714372316996,0
614,,,70,4,,572,0.47356993754704796,0
615,,,94,5,,457,0.4165048797925313,0
616,,,52,3,,319,0.2686713377634684,0
617,,,39,2,,175,0.13345971902211506,0
618,,,67,4,,524,0.386008886496226,0
619,,,206,7,,1811,1.3554490089416504,0
620,,,30,1,,51,0.04830621878306071,0
621,,,160,6,,927,0.7682837645212809,0
622,,,197,7,,1978,1.5339017788569131,0
623,,,271,9,,3151,2.4502017219861347,0
624,,,74,4,,796,0.5908566435178121,0
625,,,77,4,,524,0.3914259155591329,0
626,,,303,11,,4072,3.166669774055481,0
627,,,109,5,,748,0.5816480000813802,0
628,,,259,8,,963,0.7362198114395142,0
629,,,285,8,,2464,1.9186323682467143,0
630,,,62,5,,413,0.3319443464279175,0
631,,,333,6,,1049,0.8193861325581868,0
632,,,274,8,,2500,1.9067015369733176,0
633,,,132,5,,854,0.6934311747550964,0
634,,,152,8,,1578,1.297338879108429,0
635,,,231,5,,919,0.7107664227485657,0
636,,,269,9,,2457,1.8961411754290263,0
637,,,259,8,,975,0.7446531971295675,0
638,,,148,8,,1691,1.324698766072591,0
639,,,184,8,,1903,1.482114553451538,0
640,,,178,3,,314,0.24260563055674236,0
641,,,946,12,,2963,3.265789278348287,0
642,,,49,4,,477,0.36775587797164916,0
643,,,436,13,,3484,3.274464321136475,0
644,,,294,12,,5270,4.115190974871317,0
645,,,63,3,,314,0.24267596006393433,0
646,,,345,10,,3335,2.6366727630297344,0
647,,,101,6,,1227,1.0171852747599284,0
648,,,53,3,,286,0.23561229705810546,0
649,,,240,9,,1988,1.5255889097849529,0
650,,,140,3,,266,0.19959821701049804,0
651,,,85,4,,567,0.4542747894922892,0
652,,,207,9,,1621,1.2279078483581543,0
653,,,197,6,,1014,0.7744698842366536,0
654,,,493,13,,6022,5.012999880313873,0
655,,,233,9,,3177,2.4168680787086485,0
656,,,45,2,,163,0.13087559541066487,0
657,,,422,15,,1839,1.462643031279246,0
658,,,192,4,,699,0.5219793717066447,0
659,,,106,3,,318,0.255156143506368,0
660,,,59,3,,426,0.328637425104777,0
661,,,354,7,,1547,1.1740514675776164,0
662,,,153,5,,758,0.5715652863184612,0
663,,,278,8,,555,0.42607115109761556,0
664,,,29,2,,80,0.06672793626785278,0
665,,,184,8,,2166,1.679167425632477,0
666,,,347,12,,5552,4.388856132825215,0
667,,,273,7,,1876,1.4262842178344726,0
668,,,242,7,,1479,1.1363186359405517,0
669,,,33,2,,173,0.13321940104166666,0
670,,,120,5,,778,0.6078198432922364,0
671,,,59,3,,318,0.2458935062090556,0
672,,,333,9,,3209,2.4356650908788047,0
673,,,82,3,,287,0.21702080567677814,0
674,"private void Test614566(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data;
    if (privateTrue)
    {
        data = """";  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = null;
    }
    if (privateTrue)
    {
        if (data != null)
        {
            data = URLEncoder.encode(data, ""UTF-8"");
            response.addHeader(""Location"", ""/author.jsp?lang="" + data);
        }
    }
}","private void Test614566(HttpServletRequest request, HttpServletResponse document) throws Throwable
{
    String la;
    if (publicTrue)
    {
        la = """";  
        {
            ServerSocket cler = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                cler = new ServerSocket(39543);
                socket = cler.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                la = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (cler != null)
                    {
                        cler.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        la = null;
    }
    if (publicTrue)
    {
        if (la != null)
        {
            la = URLEncoder.encode(la, ""UTF-8"");
            document.addHeader(""Location"", ""/author.jsp?lang="" + la);
        }
    }
}",322,10,"privateTrue:publicTrue,data:la,response:document,listener:cler,",1476,1.1085739016532898,Beam
675,,,139,9,,2021,1.6471797585487367,0
676,,,169,6,,1025,0.8721237500508626,0
677,,,435,10,,3000,2.361648980776469,0
678,,,91,5,,423,0.33766764402389526,0
679,,,303,8,,2256,1.7589267214139304,0
680,,,74,3,,400,0.31084500153859457,0
681,,,193,9,,2546,1.9578386267026266,0
682,,,342,9,,2602,2.0448479930559795,0
683,,,112,7,,1221,0.9561444203058879,0
684,,,235,8,,2464,1.882838237285614,0
685,,,254,6,,1357,1.0246439258257547,0
686,,,40,3,,268,0.2053054372469584,0
687,,,340,9,,2682,2.0854555010795592,0
688,,,106,6,,978,0.7553597569465638,0
689,,,207,5,,828,0.6255929152170817,0
690,,,303,11,,4076,3.14949388106664,0
691,,,242,10,,3881,3.035836656888326,0
692,,,77,4,,565,0.4545041799545288,0
693,,,54,3,,268,0.20763803323109944,0
694,,,149,5,,821,0.6419597585995992,0
695,,,45,3,,318,0.24348698457082113,0
696,,,216,8,,2655,2.034586715698242,0
697,,,387,14,,4009,3.9448223233222963,0
698,,,234,5,,1071,0.8325904965400696,0
699,,,123,3,,318,0.24541592995325726,0
700,,,450,9,,2997,2.4111262480417888,0
701,,,218,14,,6374,4.9062625090281164,0
702,,,297,9,,3233,2.5755258123079936,0
703,,,178,7,,1377,1.1059346516927084,0
704,,,344,9,,527,0.40928860505421955,0
705,,,43,2,,105,0.10658866961797078,0
706,,,320,8,,2446,1.8796266953150431,0
707,,,140,9,,2467,2.016166643301646,0
708,,,310,9,,1102,0.8484506607055664,0
709,,,275,9,,3140,2.4110544323921204,0
710,,,326,10,,4114,3.1906911611557005,0
711,,,78,4,,473,0.39331148465474447,0
712,,,75,3,,343,0.25925435225168864,0
713,,,76,4,,267,0.30797969897588096,0
714,,,65,3,,338,0.25813390413920084,0
715,,,154,9,,2452,1.9150026440620422,0
716,,,93,4,,672,0.5099899927775066,0
717,,,141,6,,1391,1.1005921006202697,0
718,,,40,3,,255,0.2105936566988627,0
719,,,60,3,,252,0.207176939646403,0
720,,,90,2,,157,0.1272215485572815,0
721,,,61,4,,593,0.47850091457366944,0
722,,,283,8,,2500,1.9367909669876098,0
723,,,72,3,,286,0.22773004770278932,0
724,,,339,11,,2945,2.2856288075447084,0
725,,,342,9,,1112,0.8780221184094746,0
726,,,299,11,,4084,3.184019676844279,0
727,,,353,10,,3967,3.1012295126914977,0
728,,,65,4,,442,0.3577573855717977,0
729,,,43,3,,318,0.24695920546849567,0
730,,,347,9,,2957,2.4121928493181866,0
731,,,104,5,,534,0.44823805093765257,0
732,,,218,7,,2099,1.6124228199323019,0
733,,,276,10,,3447,2.6746888160705566,0
734,,,362,10,,589,0.4609929919242859,0
735,,,38,3,,366,0.29156166315078735,0
736,,,305,9,,2221,1.723868993918101,0
737,,,449,12,,5560,4.4307119409243265,0
738,,,273,9,,3197,2.4556394696235655,0
739,,,311,9,,2181,1.6937496185302734,0
740,,,62,4,,478,0.37917268673578897,0
741,,,64,3,,376,0.3054831425348918,0
742,,,24,2,,59,0.05923281113306681,0
743,,,209,7,,1868,1.4105632742245993,0
744,,,118,4,,630,0.5002246419588725,0
745,,,45,2,,163,0.13045255740483602,0
746,,,240,10,,3922,3.017578073342641,0
747,,,407,9,,3213,2.513236200809479,0
748,,,382,15,,5382,4.283383750915528,0
749,,,267,8,,861,0.6588938315709432,0
750,,,62,3,,318,0.24965419371922812,0
751,,,249,5,,772,0.6070549170176188,0
752,,,331,11,,4451,3.7391072789827984,0
753,,,496,12,,5771,4.6610048095385235,0
754,,,305,10,,1204,0.9446179986000061,0
755,,,318,9,,1548,1.1903511842091878,0
756,,,158,9,,2359,1.8701122005780537,0
757,,,434,10,,4331,3.4489071369171143,0
758,,,68,3,,360,0.30083749691645306,0
759,,,249,8,,959,0.7311007340749105,0
760,,,443,10,,985,0.7878558158874511,0
761,,,471,11,,4155,3.589195199807485,0
762,,,49,4,,518,0.4175815542538961,0
763,,,78,4,,448,0.3784666379292806,0
764,,,44,4,,365,0.2923498034477234,0
765,,,89,3,,318,0.24732277393341065,0
766,,,41,3,,276,0.2360791603724162,0
767,,,237,8,,2490,1.933488917350769,0
768,,,302,9,,3143,2.435269566377004,0
769,,,202,6,,334,0.25999812682469686,0
770,,,251,10,,2292,1.787063483397166,0
771,,,171,5,,1014,0.7820038557052612,0
772,,,283,10,,3580,2.811314264933268,0
773,,,230,9,,3499,2.655686597029368,0
774,,,57,2,,214,0.17774967749913534,0
775,,,235,9,,2046,1.5933975299199423,0
776,,,379,10,,1174,0.9104698022206624,0
777,,,266,7,,433,0.3368547240893046,0
778,,,57,3,,313,0.24008110761642457,0
779,,,111,5,,759,0.601026443640391,0
780,,,62,4,,620,0.49241015513737996,0
781,,,148,8,,1966,1.5969713926315308,0
782,,,259,7,,1852,1.428163766860962,0
783,,,369,10,,589,0.47513579527537025,0
784,,,103,3,,283,0.23199040095011395,0
785,,,87,4,,537,0.4271031896273295,0
786,,,323,10,,3901,3.0567572991053265,0
787,,,270,8,,582,0.44335991541544595,0
788,,,236,6,,1353,1.0385250965754191,0
789,,,151,6,,1202,0.9485390424728394,0
790,,,287,9,,1495,1.1682555357615152,0
791,,,55,2,,163,0.13459888299306233,0
792,,,281,9,,2489,1.947126833597819,0
793,,,95,4,,457,0.38407735427220663,0
794,,,38,3,,80,0.06995292504628499,0
795,,,330,10,,2889,2.2792635202407836,0
796,"private void Test070714() throws Throwable
{
    String password;
    if (privateTrue)
    {
        password = """";  
        {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                socket = new Socket(""host.example.org"", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                password = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
            }
        }
    }
    else
    {
        password = null;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (password != null)
        {
            {
                Cipher aesCipher = Cipher.getInstance(""AES"");
                SecretKeySpec secretKeySpec = new SecretKeySpec(""ABCDEFGHABCDEFGH"".getBytes(""UTF-8""), ""AES"");
                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
                password = new String(aesCipher.doFinal(password.getBytes(""UTF-8"")), ""UTF-8"");
            }
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try
            {
                connection = DriverManager.getConnection(""data-url"", ""root"", password);
                preparedStatement = connection.prepareStatement(""select * from test_table"");
                resultSet = preparedStatement.executeQuery();
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error with database connection"", exceptSql);
            }
            finally
            {
                try
                {
                    if (resultSet != null)
                    {
                        resultSet.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
                }
                try
                {
                    if (preparedStatement != null)
                    {
                        preparedStatement.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
                }
                try
                {
                    if (connection != null)
                    {
                        connection.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
                }
            }
        }
    }
}","private void connect() throws Throwable
{
    String root;
    if (publicTrue)
    {
        root = """";  
        {
            Socket pool = null;
            BufferedReader readerBufferer = null;
            InputStreamReader readerinputstream = null;
            try
            {
                pool = new Socket(""host.example.org"", 39544);
                readerinputstream = new InputStreamReader(pool.getInputStream(), ""UTF-8"");
                readerBufferer = new BufferedReader(readerinputstream);
                root = readerBufferer.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBufferer != null)
                    {
                        readerBufferer.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerinputstream != null)
                    {
                        readerinputstream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (pool != null)
                    {
                        pool.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
            }
        }
    }
    else
    {
        root = null;
    }
    if (fix)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (root != null)
        {
            {
                Cipher Crypto = Cipher.getInstance(""AES"");
                SecretKeySpec secretPathspec = new SecretKeySpec(""ABCDEFGHABCDEFGH"".getBytes(""UTF-8""), ""AES"");
                Crypto.init(Cipher.DECRYPT_MODE, secretPathspec);
                root = new String(Crypto.doFinal(root.getBytes(""UTF-8"")), ""UTF-8"");
            }
            Connection config = null;
            PreparedStatement preplannedStatement = null;
            ResultSet resultList = null;
            try
            {
                config = DriverManager.getConnection(""data-url"", ""root"", root);
                preplannedStatement = config.prepareStatement(""select * from test_table"");
                resultList = preplannedStatement.executeQuery();
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error with database connection"", exceptSql);
            }
            finally
            {
                try
                {
                    if (resultList != null)
                    {
                        resultList.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
                }
                try
                {
                    if (preplannedStatement != null)
                    {
                        preplannedStatement.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
                }
                try
                {
                    if (config != null)
                    {
                        config.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
                }
            }
        }
    }
}",504,14,"privateTrue:publicTrue,password:root,aesCipher:Crypto,preparedStatement:preplannedStatement,privateFalse:fix,readerBuffered:readerBufferer,socket:pool,connection:config,readerInputStream:readerinputstream,resultSet:resultList,secretKeySpec:secretPathspec,Test070714:connect,",6285,5.417457222938538,Beam
797,,,158,5,,805,0.6768994609514872,0
798,,,298,8,,2500,1.8524436116218568,0
799,,,249,9,,1902,1.459913428624471,0
800,,,114,5,,237,0.1793418248494466,0
801,,,358,10,,4023,3.057797054449717,0
802,,,61,4,,461,0.3815810720125834,0
803,,,334,7,,403,0.30828508536020915,0
804,,,119,9,,2937,2.393829170862834,0
805,,,129,5,,669,0.5411366780598958,0
806,,,213,8,,2739,2.0909528096516925,0
807,,,66,3,,314,0.24457056919733683,0
808,,,237,7,,462,0.3536931951840719,0
809,,,212,7,,1086,0.8391881704330444,0
810,,,245,9,,1861,1.4360271692276,0
811,,,112,4,,503,0.3903822938601176,0
812,,,484,12,,3089,2.4846596837043764,0
813,,,251,8,,2468,1.8884288549423218,0
814,,,296,8,,866,0.6853960831960042,0
815,,,116,3,,349,0.26705381472905476,0
816,,,67,4,,488,0.3835723837216695,0
817,,,138,9,,2355,1.9257224917411804,0
818,,,252,9,,1056,0.8250457644462585,0
819,,,63,3,,314,0.24753690958023072,0
820,,,198,6,,1062,0.8425121466318767,0
821,,,82,4,,375,0.2920302907625834,0
822,,,112,5,,992,0.7463862021764119,0
823,,,44,3,,299,0.21932542324066162,0
824,,,352,10,,2845,2.1197858572006227,0
825,,,48,3,,119,0.0917427659034729,0
826,,,56,3,,296,0.2410709301630656,0
827,,,136,5,,741,0.6117638190587361,0
828,,,345,10,,4298,3.345228370030721,0
829,,,83,4,,820,0.5941689650217692,0
830,,,42,2,,163,0.13543023268381754,0
831,,,116,7,,635,0.5119072874387105,0
832,,,162,5,,572,0.46846561431884765,0
833,,,470,11,,3156,2.5729312260945636,0
835,,,56,2,,115,0.09776046276092529,0
836,,,52,4,,593,0.44574559926986695,0
837,,,430,10,,3991,3.1420620878537497,0
838,,,323,14,,6992,5.674940955638886,0
839,,,115,5,,498,0.4231601556142171,0
840,,,275,8,,2500,1.957637071609497,0
841,,,194,8,,1453,1.1397788087526957,0
842,,,44,3,,206,0.1782171646753947,0
843,,,409,10,,3341,2.7132216850916544,0
844,,,567,10,,3210,2.621463918685913,0
845,,,415,9,,3217,2.4796905199686687,0
846,,,52,2,,163,0.12965570290883383,0
847,,,143,5,,663,0.538834281762441,0
848,,,29,3,,484,0.3755365093549093,0
849,,,69,5,,775,0.599721888701121,0
850,,,99,4,,684,0.4965766469637553,0
851,,,90,3,,313,0.24375470479329428,0
852,,,173,8,,2025,1.568030631542206,0
853,,,121,6,,980,0.7377826809883118,0
854,,,71,3,,251,0.19768498341242471,0
855,,,82,3,,259,0.19127926429112752,0
856,,,66,3,,318,0.2400249123573303,0
857,,,393,10,,3990,3.035862958431244,0
858,,,180,9,,1533,1.1367444038391112,0
859,,,271,9,,779,0.572656528155009,0
860,,,29,4,,639,0.4713716427485148,0
861,,,296,5,,919,0.6924354910850525,0
862,,,66,2,,175,0.13161856333414715,0
863,,,283,8,,463,0.3412015954653422,0
864,,,242,13,,5275,3.9977612694104514,0
865,,,174,8,,1687,1.367165712515513,0
866,,,93,3,,298,0.23916170199712117,0
867,,,182,5,,659,0.49561270078023273,0
868,,,64,3,,293,0.212075678507487,0
869,,,214,6,,1062,0.7941178282101949,0
870,,,309,10,,1257,0.9344102303187053,0
871,,,76,3,,338,0.2509384195009867,0
872,,,249,8,,851,0.6349989891052246,0
873,,,283,14,,6892,5.129039537906647,0
874,,,270,9,,2881,2.158403472105662,0
875,,,363,7,,1549,1.1748188853263855,0
876,,,167,8,,2044,1.5926976005236309,0
877,,,144,8,,1288,1.023305388291677,0
878,,,208,8,,895,0.6493780374526977,0
879,,,68,4,,551,0.4018034895261129,0
880,,,142,7,,1362,1.0579455852508546,0
881,,,123,5,,566,0.46443105936050416,0
882,,,63,3,,293,0.22240386406580606,0
883,,,326,11,,2929,2.32663053671519,0
884,"private void Test976762(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data;
    if (privateTrue)
    {
        data = """";  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = null;
    }
    if (privateTrue)
    {
        if (data != null)
        {
            data = URLEncoder.encode(data, ""UTF-8"");
            response.setHeader(""Location"", ""/author.jsp?lang="" + data);
        }
    }
}","private void Test976762(HttpServletRequest request, HttpServletResponse document) throws Throwable
{
    String la;
    if (publicTrue)
    {
        la = """";  
        {
            ServerSocket serener = null;
            Socket socket = null;
            BufferedReader readerBerer = null;
            InputStreamReader readerInputStream = null;
            try
            {
                serener = new ServerSocket(39543);
                socket = serener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBerer = new BufferedReader(readerInputStream);
                la = readerBerer.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBerer != null)
                    {
                        readerBerer.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (serener != null)
                    {
                        serener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        la = null;
    }
    if (publicTrue)
    {
        if (la != null)
        {
            la = URLEncoder.encode(la, ""UTF-8"");
            document.setHeader(""Location"", ""/author.jsp?lang="" + la);
        }
    }
}",322,10,"privateTrue:publicTrue,data:la,response:document,readerBuffered:readerBerer,listener:serener,",1940,1.4991323272387187,Beam
885,,,129,3,,318,0.2443324287732442,0
886,,,55,5,,856,0.6557890216509501,0
887,,,72,3,,318,0.2476781169573466,0
888,,,439,16,,631,0.5110976338386536,0
889,,,54,2,,214,0.1721820831298828,0
890,,,62,4,,465,0.3710741678873698,0
891,,,113,6,,530,0.4326589663823446,0
892,,,236,8,,1598,1.1973632097244262,0
893,,,364,11,,5244,4.022026964028677,0
894,,,117,6,,1305,0.9926576336224874,0
895,,,109,3,,287,0.2207900921503703,0
896,,,198,7,,1758,1.325036891301473,0
897,,,409,9,,1018,0.7846282084782918,0
898,,,315,10,,557,0.4238039453824361,0
899,,,277,5,,744,0.5706296841303508,0
900,,,64,4,,528,0.3927958528200785,0
901,,,230,6,,1323,0.9857243021329244,0
902,,,78,3,,268,0.20029062827428182,0
903,,,146,5,,813,0.6341558337211609,0
904,,,59,4,,702,0.5031166990598043,0
905,,,331,11,,4922,3.759815275669098,0
906,,,40,3,,88,0.0702298124631246,0
907,,,310,9,,1107,0.8632859468460083,0
908,,,273,9,,2497,1.9385684490203858,0
909,,,203,8,,2183,1.6828539450963338,0
910,,,362,10,,2821,2.221831711133321,0
911,,,62,2,,219,0.17026910384496052,0
912,,,51,4,,374,0.2870571851730347,0
913,,,50,2,,89,0.10643285512924194,0
914,,,181,11,,3785,2.957206364472707,0
915,,,113,5,,410,0.350144632657369,0
916,,,159,3,,343,0.26803202629089357,0
917,,,142,6,,1043,0.8159270286560059,0
918,,,294,8,,2488,1.8938520391782125,0
919,,,307,6,,1043,0.7825728972752889,0
920,,,309,10,,3785,2.909224259853363,0
921,,,77,3,,303,0.24153152704238892,0
922,,,82,3,,234,0.203416109085083,0
923,,,20,1,,33,0.03754312992095947,0
924,,,123,3,,287,0.2097619613011678,0
925,,,269,10,,3560,2.6338443597157797,0
926,,,324,10,,2974,2.2460211237271626,0
927,,,179,8,,2142,1.6734580437342326,0
928,,,68,3,,318,0.2392299731572469,0
929,,,653,11,,641,0.5259688377380372,0
930,,,58,3,,244,0.19605434735616048,0
931,,,126,3,,314,0.2624125242233276,0
932,,,220,6,,1471,1.1466669241587322,0
933,,,45,4,,510,0.39788615703582764,0
934,,,275,7,,1448,1.0591807126998902,0
935,,,466,11,,1166,0.9273172934850057,0
936,,,360,10,,3971,2.9711007595062258,0
937,,,206,8,,1515,1.117147159576416,0
938,,,276,9,,3076,2.2642783761024474,0
939,,,110,3,,360,0.2817018747329712,0
940,,,174,3,,400,0.2942589521408081,0
941,,,331,11,,3273,2.3884236256281537,0
942,,,140,5,,741,0.5872771461804708,0
943,,,279,9,,2896,2.0823076963424683,0
944,,,80,2,,159,0.1265017072359721,0
945,,,69,3,,262,0.19298045635223388,0
946,,,491,11,,4522,3.3635894060134888,0
947,,,125,3,,314,0.23259501457214354,0
948,,,29,4,,424,0.31704620122909544,0
949,,,90,3,,324,0.23675186634063722,0
950,,,322,9,,2701,1.9886429031689963,0
951,,,358,11,,4871,3.554449129104614,0
952,,,121,8,,2085,1.6449125051498412,0
953,,,274,9,,2135,1.6199559609095255,0
954,,,248,9,,1814,1.3545016288757323,0
955,,,164,7,,1809,1.433357314268748,0
956,,,52,2,,219,0.1714712381362915,0
957,,,248,9,,2787,2.0841817378997805,0
958,,,110,5,,243,0.1768228570620219,0
959,,,206,8,,1359,1.017471965154012,0
960,,,259,7,,1661,1.2687392632166545,0
961,,,39,2,,144,0.10880748430887859,0
962,,,192,8,,1686,1.273247516155243,0
963,,,421,10,,3999,3.086879785855611,0
964,,,278,10,,3261,2.4569057981173197,0
965,,,70,2,,231,0.1805308977762858,0
966,,,273,9,,3157,2.2936090350151064,0
967,,,294,9,,3161,2.386318731307983,0
968,,,110,8,,2180,1.627039082845052,0
969,,,163,9,,1716,1.2936474482218425,0
970,"public void Test285593(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test285593(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    Connection dataNetwork = null;
    Statement sslSession = null;
    ResultSet ResultPoint = null;
    try
    {
        dataNetwork = IO.getDBConnection();
        sslSession = dataNetwork.createStatement();
        ResultPoint = sslSession.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(ResultPoint.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (ResultPoint != null)
            {
                ResultPoint.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslSession != null)
            {
                sslSession.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dataNetwork != null)
            {
                dataNetwork.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",219,7,"sqlStatement:sslSession,dbConnection:dataNetwork,resultSet:ResultPoint,",311,0.2279965360959371,Beam
971,,,297,9,,3001,2.2612976868947348,0
972,,,292,10,,3694,2.7230838974316915,0
973,,,308,9,,2820,2.0775140047073366,0
974,,,157,6,,1476,1.0885984897613525,0
975,,,81,3,,338,0.25599099000295006,0
976,,,417,15,,4109,3.2417112509409587,0
977,"public void Test909958() throws Throwable
{
    String password = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68a.password;
    if (password != null)
    {
        {
            Cipher aesCipher = Cipher.getInstance(""AES"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(""ABCDEFGHABCDEFGH"".getBytes(""UTF-8""), ""AES"");
            aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
            password = new String(aesCipher.doFinal(password.getBytes(""UTF-8"")), ""UTF-8"");
        }
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try
        {
            connection = DriverManager.getConnection(""data-url"", ""root"", password);
            preparedStatement = connection.prepareStatement(""select * from test_table"");
            resultSet = preparedStatement.executeQuery();
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error with database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (resultSet != null)
                {
                    resultSet.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
            }
            try
            {
                if (preparedStatement != null)
                {
                    preparedStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
            }
            try
            {
                if (connection != null)
                {
                    connection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void Test909958() throws Throwable
{
    String true = CWE319_Cleartext_Tx_Sensitive_Info__listen_tcp_driverManager_68a.true;
    if (true != null)
    {
        {
            Cipher aESScortex = Cipher.getInstance(""AES"");
            SecretKeySpec null = new SecretKeySpec(""ABCDEFGHABCDEFGH"".getBytes(""UTF-8""), ""AES"");
            aESScortex.init(Cipher.DECRYPT_MODE, null);
            true = new String(aESScortex.doFinal(true.getBytes(""UTF-8"")), ""UTF-8"");
        }
        Connection connection = null;
        PreparedStatement Statement = null;
        ResultSet resultSet = null;
        try
        {
            connection = DriverManager.getConnection(""data-url"", ""root"", true);
            Statement = connection.prepareStatement(""select * from test_table"");
            resultSet = Statement.executeQuery();
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error with database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (resultSet != null)
                {
                    resultSet.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
            }
            try
            {
                if (Statement != null)
                {
                    Statement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
            }
            try
            {
                if (connection != null)
                {
                    connection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",273,8,"password:true,aesCipher:aESScortex,secretKeySpec:null,preparedStatement:Statement,",1272,0.9504088044166565,Beam
978,,,64,2,,144,0.10745234886805216,0
979,,,192,7,,1143,0.8519812305768331,0
980,,,67,3,,197,0.14785532553990682,0
981,,,72,3,,293,0.2160706361134847,0
982,,,61,3,,343,0.24963665405909222,0
983,,,52,2,,127,0.10747535626093546,0
984,,,89,3,,250,0.191099218527476,0
985,,,275,9,,1486,1.0885450045267742,0
986,,,311,9,,491,0.36387123266855875,0
987,,,73,4,,532,0.41742034355799357,0
988,,,125,7,,1276,0.969496484597524,0
989,,,92,3,,287,0.2203914761543274,0
990,,,256,8,,464,0.3470251242319743,0
991,,,202,7,,1450,1.0842550158500672,0
992,,,86,3,,287,0.2254942496617635,0
993,,,267,5,,754,0.5761405984560649,0
994,,,139,9,,1901,1.5258211056391398,0
995,,,377,11,,4906,3.7340204040209453,0
996,,,253,5,,863,0.6378284176190694,0
997,,,100,7,,736,0.5636847178141277,0
998,,,320,10,,3997,3.01769270102183,0
999,,,336,9,,3217,2.441644215583801,0
1000,,,137,3,,314,0.24339385827382407,0
1001,,,210,8,,2635,1.9679199576377868,0
1002,,,274,6,,1496,1.1683307528495788,0
1003,,,237,5,,737,0.5871918519337972,0
1004,,,66,3,,318,0.24844692548116049,0
1005,,,501,12,,5468,4.521265153090159,0
1006,,,273,9,,1002,0.7759496649106343,0
1007,,,47,3,,283,0.23318575620651244,0
1008,,,271,9,,3181,2.429380178451538,0
1009,,,109,6,,1051,0.8117032766342163,0
1010,,,44,3,,296,0.2313677986462911,0
1011,,,48,2,,175,0.13296167850494384,0
1012,,,250,8,,485,0.3665411432584127,0
1013,,,72,3,,217,0.17046707073847453,0
1014,,,205,8,,2318,1.709221080938975,0
1015,,,324,9,,994,0.7910205165545146,0
1016,,,284,8,,2321,1.769845759868622,0
1017,,,103,6,,1232,1.0106336752573648,0
1018,,,45,3,,318,0.2449178695678711,0
1019,,,250,14,,5910,4.641011110941569,0
1020,,,200,8,,1639,1.2827696760495504,0
1021,,,218,6,,1479,1.1301785270373026,0
1022,,,248,14,,5553,4.37043430407842,0
1023,,,36,3,,326,0.26935973564783733,0
1024,,,188,10,,3398,2.707954255739848,0
1025,,,83,4,,620,0.4899321754773458,0
1026,,,58,2,,173,0.14018093744913737,0
1027,,,88,4,,535,0.4023809830347697,0
1028,,,196,6,,1019,0.7504034280776978,0
1029,,,322,11,,4446,3.3141639391581217,0
1030,,,286,9,,3140,2.3346299052238466,0
1031,,,267,9,,3201,2.321423959732056,0
1032,,,119,3,,405,0.3039003014564514,0
1033,,,296,10,,3246,2.3787737290064492,0
1034,,,370,10,,2608,1.9573442260424296,0
1035,,,140,5,,875,0.6952354947725932,0
1036,,,25,2,,231,0.17061247825622558,0
1037,,,109,7,,1254,0.931868867079417,0
1038,,,142,8,,1824,1.4174485445022582,0
1039,,,209,8,,417,0.3144331812858582,0
1040,,,61,4,,481,0.3716053605079651,0
1041,,,400,9,,3217,2.4358630776405334,0
1042,,,62,2,,113,0.08692112366358438,0
1043,,,65,5,,884,0.6471667885780334,0
1044,,,56,2,,219,0.1679967204729716,0
1045,,,142,8,,1221,0.9679414868354798,0
1046,,,265,8,,1939,1.4484864354133606,0
1047,,,282,8,,2500,1.862707527478536,0
1048,,,66,3,,268,0.19877529939015706,0
1049,,,297,10,,595,0.46053839524587,0
1050,,,192,8,,2374,1.8308075428009034,0
1051,,,61,5,,647,0.4822518746058146,0
1052,,,44,2,,130,0.10446732838948568,0
1053,,,416,9,,3217,2.4585975050926208,0
1054,,,280,8,,2473,1.8537142554918924,0
1055,,,84,3,,318,0.23955190976460775,0
1056,,,231,6,,1327,1.0175007621447245,0
1057,,,434,10,,2905,2.2468719840049745,0
1058,,,257,10,,2045,1.6467429677645364,0
1059,,,383,10,,1194,0.9832343538602193,0
1060,,,213,7,,1410,1.1201541264851889,0
1061,,,74,6,,789,0.6293312946955363,0
1062,,,92,3,,405,0.3201430082321167,0
1063,,,232,8,,2504,1.9415598352750143,0
1064,,,202,9,,2851,2.2413111209869383,0
1065,,,352,9,,2628,2.0763036767641703,0
1066,,,405,10,,4023,3.1753408829371135,0
1067,,,251,8,,2013,1.5928532520929972,0
1068,,,231,6,,1527,1.164838985602061,0
1069,,,382,10,,4023,3.094091244538625,0
1070,,,265,12,,3779,2.8197269797325135,0
1071,,,158,8,,1799,1.502276607354482,0
1072,,,200,7,,1667,1.2673042694727579,0
1073,,,486,12,,1467,1.129775377114614,0
1074,,,62,1,,49,0.04914709726969401,0
1075,,,252,9,,2859,2.1166330218315124,0
1076,,,362,10,,3364,2.546584479014079,0
1077,,,97,4,,517,0.3768263498942057,0
1078,,,28,2,,128,0.10598121086756389,0
1079,,,47,2,,131,0.11318461497624716,0
1080,,,133,4,,544,0.4093900640805562,0
1081,,,94,2,,175,0.13581528266270956,0
1082,,,106,4,,499,0.3831967353820801,0
1083,,,106,3,,101,0.08891563018163046,0
1084,,,47,2,,219,0.17073333660761517,0
1085,,,116,4,,566,0.41155938704808553,0
1086,,,352,9,,3042,2.2567210237185162,0
1087,,,237,8,,2551,1.911029541492462,0
1088,,,129,8,,2137,1.6469169457753499,0
1089,,,69,4,,587,0.46513162851333617,0
1090,,,58,4,,533,0.44497384627660114,0
1091,,,266,9,,1899,1.4213416179021199,0
1092,,,279,8,,2473,1.849435818195343,0
1093,,,200,8,,1450,1.1279584209124247,0
1094,,,210,9,,1842,1.4126115004221598,0
1095,,,58,3,,318,0.23714289665222169,0
1096,,,294,8,,2387,1.823399019241333,0
1097,,,246,7,,1466,1.0892234841982524,0
1098,,,259,9,,1890,1.4279826760292054,0
1099,,,363,9,,3199,2.521768049399058,0
1100,,,133,9,,1914,1.6439618309338888,0
1101,,,341,6,,958,0.7636679848035176,0
1102,,,121,9,,2921,2.354557832082113,0
1103,,,199,8,,1422,1.0799928228060405,0
1104,,,33,1,,35,0.042343846956888836,0
1105,,,65,4,,640,0.48976818323135374,0
1106,,,97,4,,492,0.42194507519404095,0
1107,,,63,3,,405,0.30758610169092815,0
1108,,,361,10,,3902,2.985314695040385,0
1109,,,109,8,,1309,1.0249627033869426,0
1110,,,334,8,,1838,1.404753609498342,0
1111,,,154,5,,956,0.741223673025767,0
1112,,,279,7,,1603,1.1916365464528402,0
1113,,,57,3,,338,0.2708765506744385,0
1114,,,549,13,,7219,5.759984064102173,0
1115,,,254,9,,511,0.3970490296681722,0
1116,,,339,9,,2679,2.0901712735493976,0
1117,,,293,9,,1678,1.3391814668973288,0
1118,,,65,3,,343,0.25347057580947874,0
1119,,,103,5,,885,0.7046569744745891,0
1120,,,74,3,,343,0.25297724405924477,0
1121,,,363,7,,214,0.1704716682434082,0
1122,,,25,2,,231,0.1724840521812439,0
1123,,,72,3,,314,0.2415165861447652,0
1124,,,273,8,,557,0.40733909606933594,0
1125,,,95,4,,515,0.4097255309422811,0
1126,,,140,5,,725,0.5992440422375996,0
1127,,,251,10,,3635,2.858833388487498,0
1128,,,320,9,,2596,2.16307289203008,0
1129,,,56,2,,88,0.0685734748840332,0
1130,,,301,8,,2504,1.9632709503173829,0
1131,,,88,3,,345,0.26211195389429726,0
1132,,,170,8,,1730,1.398835829893748,0
1133,,,338,11,,4791,3.6476887543996175,0
1134,,,176,7,,1038,0.7721033732096354,0
1135,,,447,11,,4147,3.2274378220240276,0
1136,,,89,5,,763,0.6177202622095744,0
1137,,,258,9,,1918,1.4799659808476766,0
1138,,,108,3,,400,0.30166051785151166,0
1139,,,85,3,,338,0.253641935189565,0
1140,,,399,14,,3719,3.7830973466237388,0
1141,,,361,11,,5151,3.9988149801890054,0
1142,,,265,8,,824,0.6652479728062948,0
1143,,,75,3,,287,0.22517448663711548,0
1144,,,65,4,,600,0.500386651357015,0
1145,,,309,11,,635,0.5010409116744995,0
1146,,,266,9,,3197,2.4969188888867695,0
1147,,,344,9,,527,0.39764633973439534,0
1148,,,83,3,,283,0.24345316886901855,0
1149,,,296,10,,4269,3.30818297068278,0
1150,,,143,7,,944,0.7712979952494303,0
1151,,,175,5,,1016,0.7821906526883443,0
1152,,,61,4,,461,0.3806925137837728,0
1153,,,102,6,,1254,0.9516693115234375,0
1154,,,49,3,,185,0.18442375659942628,0
1155,,,68,3,,314,0.24610253175099692,0
1156,,,426,14,,3865,3.95060426791509,0
1157,,,182,11,,4074,3.1967815796534222,0
1158,,,177,8,,2023,1.638667062918345,0
1159,,,186,8,,2040,1.5692282676696778,0
1160,,,351,10,,2845,2.229369815190633,0
1161,,,318,9,,2624,2.0610706210136414,0
1162,,,262,10,,2135,1.6547857681910196,0
1163,,,56,4,,467,0.35211849212646484,0
1164,,,134,3,,283,0.22590267260869343,0
1165,,,283,8,,2472,1.9320406158765158,0
1166,,,96,4,,559,0.4559963226318359,0
1167,,,245,7,,864,0.6498965700467427,0
1168,,,84,4,,442,0.3312075893084208,0
1169,,,120,5,,728,0.548498006661733,0
1170,,,91,6,,1370,1.039619751771291,0
1171,,,180,7,,1472,1.0956844766934712,0
1172,,,48,4,,473,0.3643035411834717,0
1173,,,170,8,,2174,1.6187060991923015,0
1174,,,330,7,,1672,1.2957639892896016,0
1175,,,70,4,,478,0.4376114209493001,0
1176,,,388,12,,5399,4.337104654312133,0
1177,,,376,11,,4864,3.761504578590393,0
1178,,,116,3,,287,0.21706170241038006,0
1179,,,251,8,,489,0.36585621039072674,0
1180,,,49,4,,499,0.38860877354939777,0
1181,,,316,7,,2064,1.5330450495084127,0
1182,,,232,6,,1527,1.1435935457547506,0
1183,,,226,10,,2172,1.6931459228197734,0
1184,,,85,4,,411,0.30658848683039347,0
1185,,,245,6,,1105,0.8287321289380392,0
1186,,,376,12,,3665,2.918087903658549,0
1187,,,259,8,,1688,1.238381850719452,0
1188,,,367,10,,617,0.4551900545756022,0
1189,,,110,5,,922,0.6893793145815531,0
1190,,,124,7,,1582,1.1754790743192036,0
1191,,,325,9,,2838,2.0870609005292255,0
1192,,,255,8,,897,0.6593114018440247,0
1193,,,93,4,,478,0.369874107837677,0
1194,,,221,14,,4612,3.367271022001902,0
1195,,,271,7,,402,0.29003624121348065,0
1196,,,242,9,,2477,1.8144508163134256,0
1197,,,116,9,,2186,1.6411248842875164,0
1198,,,411,13,,3715,3.6197487076123553,0
1199,,,304,13,,5196,4.115770538647969,0
1200,,,95,3,,286,0.23719066381454468,0
1201,,,83,4,,505,0.39609514077504476,0
1202,,,48,3,,381,0.3049895564715068,0
1203,,,185,9,,2575,2.071850764751434,0
1204,,,160,7,,1645,1.2913731376330058,0
1205,,,68,4,,606,0.4855809966723124,0
1206,,,222,13,,1562,1.1919930696487426,0
1207,,,120,3,,343,0.25938213666280113,0
1208,,,42,5,,705,0.5479098757108053,0
1209,,,152,8,,1594,1.28069672981898,0
1210,,,69,5,,1005,0.7771844625473022,0
1211,,,528,10,,1126,0.8743463555971781,0
1212,,,385,10,,3962,2.987359845638275,0
1213,,,110,8,,2093,1.5944345911343893,0
1214,,,237,6,,1120,0.8246470888455709,0
1215,,,100,5,,542,0.4312374552090963,0
1216,,,128,8,,1623,1.235154672463735,0
1217,,,213,7,,1439,1.0697598497072855,0
1218,,,121,6,,1236,0.916966454188029,0
1219,,,254,7,,1909,1.456376028060913,0
1220,,,481,11,,4825,3.7914890607198077,0
1221,,,74,2,,82,0.07017173369725545,0
1222,,,327,6,,956,0.7620378533999125,0
1223,,,43,2,,157,0.14628709554672242,0
1224,,,185,8,,1738,1.3321508487065634,0
1225,,,97,4,,505,0.3840920805931091,0
1226,,,65,2,,138,0.1085265318552653,0
1227,,,240,3,,276,0.20681310097376507,0
1228,,,53,2,,137,0.11480387846628824,0
1229,,,83,3,,283,0.2123219648996989,0
1230,,,60,5,,769,0.5694694677988689,0
1231,,,59,3,,434,0.33413317998250325,0
1232,,,69,3,,402,0.3061563968658447,0
1233,"public void Test290381(LinkedList<String> dataLinkedList ) throws Throwable
{
    String data = dataLinkedList.remove(2);
    Connection dbConnection = null;
    PreparedStatement sqlStatement = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.prepareStatement(""insert into users (status) values ('updated') where name=?"");
        sqlStatement.setString(1, data);
        Boolean result = sqlStatement.execute();
        if (result)
        {
            IO.writeLine(""Name, "" + data + "", updated successfully"");
        }
        else
        {
            IO.writeLine(""Unable to update records for user: "" + data);
        }
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test290381(LinkedList<String> datas ) throws Throwable
{
    String next = datas.remove(2);
    Connection DB = null;
    PreparedStatement dlQuery = null;
    try
    {
        DB = IO.getDBConnection();
        dlQuery = DB.prepareStatement(""insert into users (status) values ('updated') where name=?"");
        dlQuery.setString(1, next);
        Boolean root = dlQuery.execute();
        if (root)
        {
            IO.writeLine(""Name, "" + next + "", updated successfully"");
        }
        else
        {
            IO.writeLine(""Unable to update records for user: "" + next);
        }
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (dlQuery != null)
            {
                dlQuery.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
        }
        try
        {
            if (DB != null)
            {
                DB.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",204,7,"sqlStatement:dlQuery,data:next,result:root,dbConnection:DB,dataLinkedList:datas,",714,0.5276602347691853,Beam
1234,,,196,10,,3469,2.5591723124186196,0
1235,,,188,6,,1521,1.0970431208610534,0
1236,,,61,4,,542,0.40074753761291504,0
1237,,,36,3,,360,0.2828125596046448,0
1238,,,35,3,,324,0.23917494614919027,0
1239,,,280,8,,2380,1.8016135851542154,0
1240,,,52,2,,159,0.12526551087697346,0
1241,,,280,12,,3865,2.9911473274230955,0
1242,,,142,5,,776,0.6161773165067037,0
1243,,,66,2,,138,0.10826343695322672,0
1244,,,78,3,,400,0.30234970649083454,0
1245,,,345,11,,4906,3.737043821811676,0
1246,,,293,9,,1673,1.2773584882418314,0
1247,,,135,9,,2396,1.864677655696869,0
1248,,,231,9,,3296,2.4735963622728985,0
1249,,,146,5,,772,0.6247406522432963,0
1250,,,137,7,,1261,0.9841514547665914,0
1251,,,55,2,,214,0.17834502458572388,0
1252,,,301,10,,2662,2.0187889258066813,0
1253,,,439,12,,5882,4.869997521241506,0
1254,,,210,8,,2266,1.8687288284301757,0
1255,,,311,10,,2803,2.2934730768203737,0
1256,,,292,9,,3217,2.573879933357239,0
1257,,,148,3,,287,0.252660862604777,0
1258,,,93,3,,318,0.2544191519419352,0
1259,,,219,8,,2559,2.0669347643852234,0
1260,,,245,8,,890,0.6919302781422932,0
1261,,,129,7,,1219,0.9625486771265666,0
1262,,,137,8,,1635,1.2849241654078165,0
1263,,,193,9,,2518,1.9388855934143066,0
1264,,,237,9,,2460,1.872597328821818,0
1265,,,155,6,,958,0.7141999125480651,0
1266,,,339,11,,4498,3.417050302028656,0
1267,,,314,10,,4114,3.1194995045661926,0
1268,,,201,7,,1192,0.9090502937634786,0
1269,,,109,3,,343,0.25489840110143025,0
1270,,,86,5,,498,0.4197989741961161,0
1271,,,133,3,,314,0.23765140771865845,0
1272,,,164,6,,935,0.739873731136322,0
1273,,,169,8,,1639,1.2151911497116088,0
1274,,,109,3,,318,0.2400809367497762,0
1275,,,244,6,,1577,1.158940847714742,0
1276,,,300,10,,3829,2.833771860599518,0
1277,,,91,3,,293,0.23769475221633912,0
1278,,,82,5,,568,0.5780017217000325,0
1279,,,249,8,,1938,1.4744306365648905,0
1280,,,88,6,,989,0.7287687381108602,0
1281,,,292,10,,3562,2.7286794265111287,0
1282,,,288,9,,3058,2.2788698712984723,0
1283,"private void Test811367() throws Throwable
{
    int count;
    if (privateTrue)
    {
        count = Integer.MIN_VALUE;  
        {
            File file = new File(""C:\\data.txt"");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try
            {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                String stringNumber = readerBuffered.readLine();
                if (stringNumber != null)  
                {
                    try
                    {
                        count = Integer.parseInt(stringNumber.trim());
                    }
                    catch(NumberFormatException exceptNumberFormat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing count from string"", exceptNumberFormat);
                    }
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (streamFileInput != null)
                    {
                        streamFileInput.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);
                }
            }
        }
    }
    else
    {
        count = 0;
    }
    if (privateTrue)
    {
        if (count > 0 && count <= 2000)
        {
            Thread.sleep(count);
        }
    }
}","private void Test811367() throws Throwable
{
    int last;
    if (publicFalse)
    {
        last = Integer.MIN_VALUE;  
        {
            File name = new File(""C:\\data.txt"");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerbuffler = null;
            try
            {
                streamFileInput = new FileInputStream(name);
                readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8"");
                readerbuffler = new BufferedReader(readerInputStream);
                String StringMessage = readerbuffler.readLine();
                if (StringMessage != null)  
                {
                    try
                    {
                        last = Integer.parseInt(StringMessage.trim());
                    }
                    catch(NumberFormatException exceptNumberFormat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing count from string"", exceptNumberFormat);
                    }
                }
            }
            catch (IOException ceptionPI)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", ceptionPI);
            }
            finally
            {
                try
                {
                    if (readerbuffler != null)
                    {
                        readerbuffler.close();
                    }
                }
                catch (IOException ceptionPI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ceptionPI);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException ceptionPI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", ceptionPI);
                }
                try
                {
                    if (streamFileInput != null)
                    {
                        streamFileInput.close();
                    }
                }
                catch (IOException ceptionPI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", ceptionPI);
                }
            }
        }
    }
    else
    {
        last = 0;
    }
    if (publicFalse)
    {
        if (last > 0 && last <= 2000)
        {
            Thread.sleep(last);
        }
    }
}",308,10,"privateTrue:publicFalse,count:last,readerBuffered:readerbuffler,exceptIO:ceptionPI,stringNumber:StringMessage,file:name,",2713,2.0390515526135764,Beam
1284,,,62,4,,580,0.4693055033683777,0
1285,,,247,8,,2404,1.8929834286371867,0
1286,,,40,4,,335,0.280582332611084,0
1287,,,165,8,,2036,1.584555208683014,0
1288,,,502,12,,5935,4.8458095709482825,0
1289,,,215,7,,1918,1.4795416752497355,0
1290,,,310,9,,2225,1.7702513496081034,0
1291,,,252,6,,1329,1.0488067388534545,0
1292,,,164,6,,770,0.6942216237386067,0
1293,,,93,3,,314,0.25815425713857015,0
1294,,,79,2,,219,0.18482826153437296,0
1295,,,304,9,,1041,0.830570387840271,0
1296,,,285,10,,2697,2.1556413571039834,0
1297,,,113,6,,217,0.18163321018218995,0
1298,,,139,9,,1829,1.533754575252533,0
1299,,,469,12,,5657,4.682584059238434,0
1300,,,96,6,,731,0.7446982105573018,0
1301,,,78,3,,283,0.2352609594662984,0
1302,,,249,8,,2266,1.7795204083124796,0
1303,,,57,3,,318,0.2519368529319763,0
1304,"public void Test229044(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a.data;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        int rowCount = sqlStatement.executeUpdate(""insert into users (status) values ('updated') where name='""+data+""'"");
        IO.writeLine(""Updated "" + rowCount + "" rows successfully."");
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test229044(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a.data;
    Connection dbConnection = null;
    Statement sslConnection = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sslConnection = dbConnection.createStatement();
        int rowCount = sslConnection.executeUpdate(""insert into users (status) values ('updated') where name='""+data+""'"");
        IO.writeLine(""Updated "" + rowCount + "" rows successfully."");
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sslConnection != null)
            {
                sslConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",178,8,"sqlStatement:sslConnection,",32,0.03237831195195516,Beam
1305,,,44,3,,339,0.2848991910616557,0
1306,,,318,10,,2815,2.2139234145482383,0
1307,,,163,6,,1119,0.9611052513122559,0
1308,,,231,7,,1844,1.4350677569707235,0
1309,,,136,6,,663,0.5781283537546794,0
1310,,,77,3,,293,0.2346975843111674,0
1311,,,245,7,,1391,1.0706108649571737,0
1312,,,34,3,,263,0.2214702566464742,0
1313,,,140,5,,798,0.6496270775794983,0
1314,,,50,2,,83,0.08185094594955444,0
1315,,,273,11,,4395,3.5349895358085632,0
1316,,,87,5,,783,0.6410877545674641,0
1317,,,361,10,,3810,3.010442852973938,0
1318,,,238,7,,431,0.3481396953264872,0
1319,,,292,10,,4027,3.1577518463134764,0
1320,,,271,5,,857,0.6876223723093668,0
1321,,,197,6,,1014,0.7905688206354777,0
1322,,,360,11,,3155,2.5570579687754313,0
1323,,,99,2,,175,0.15351718664169312,0
1324,,,153,8,,1705,1.4834042549133302,0
1325,,,50,4,,572,0.44368562698364256,0
1326,,,153,9,,1682,1.3304857850074767,0
1327,,,161,6,,1028,0.8315438747406005,0
1328,,,121,4,,180,0.13768219153086345,0
1329,,,387,7,,1549,1.194445757071177,0
1330,,,164,6,,831,0.6759167671203613,0
1331,,,335,9,,3169,2.4175110856691995,0
1332,,,272,9,,2949,2.193034354845683,0
1333,,,129,3,,287,0.21579968531926472,0
1334,,,164,5,,903,0.6943612496058146,0
1335,,,355,7,,1669,1.256464155515035,0
1336,,,92,5,,688,0.5234124779701232,0
1337,,,36,4,,596,0.45541436672210694,0
1338,,,286,10,,3435,2.639455302556356,0
1339,,,23,2,,173,0.1363106330235799,0
1340,,,369,10,,589,0.451339856783549,0
1341,,,309,8,,2504,1.9000619928042093,0
1342,,,197,8,,902,0.6801248908042907,0
1343,,,43,3,,285,0.2552448312441508,0
1344,,,158,8,,2160,1.6748365402221679,0
1345,,,435,10,,4013,3.2377472281455995,0
1346,,,330,9,,3217,2.613388963540395,0
1347,,,192,7,,1171,0.9197624325752258,0
1348,,,489,12,,3279,2.6859399596850078,0
1349,,,298,9,,2409,1.813182258605957,0
1350,,,574,8,,1994,1.8034622073173523,0
1351,,,233,8,,2233,1.7183272123336792,0
1352,,,275,11,,2534,1.9512466112772624,0
1353,,,208,8,,1432,1.1121493299802145,0
1354,,,74,3,,343,0.271867827574412,0
1355,,,35,3,,422,0.33485586643218995,0
1356,,,38,4,,351,0.2755226492881775,0
1357,,,106,3,,405,0.3141153295834859,0
1358,,,312,9,,3181,2.4581745624542237,0
1359,,,161,5,,680,0.5886654337247212,0
1360,,,77,4,,616,0.46288023789723715,0
1361,,,117,7,,1245,0.9460277001063029,0
1362,,,48,3,,210,0.17631836732228598,0
1363,,,303,10,,3972,2.9664634068806968,0
1364,,,288,10,,2345,1.7308155735333761,0
1365,,,337,11,,4328,3.2212050835291546,0
1366,,,296,10,,4023,3.0368847648302713,0
1367,,,33,2,,163,0.13491111993789673,0
1368,,,263,8,,983,0.7091755747795105,0
1369,,,301,11,,4071,3.312964363892873,0
1370,,,40,2,,80,0.06863569815953573,0
1371,,,339,9,,3221,2.4464902520179748,0
1372,,,91,4,,473,0.37659311294555664,0
1373,,,110,3,,283,0.2146385868390401,0
1374,,,412,12,,3649,2.79910968542099,0
1375,,,249,8,,483,0.3621366500854492,0
1376,,,371,10,,1236,0.9582049727439881,0
1377,,,264,6,,926,0.6895705620447795,0
1378,,,253,9,,2060,1.5168847997983297,0
1379,,,229,8,,1621,1.213617781798045,0
1380,,,91,4,,403,0.31873275836308795,0
1381,,,93,4,,558,0.4029940565427144,0
1382,"private void Test212692() throws Throwable
{
    if (privateTrue)
    {
        ServerSocket listener = null;
        Socket socket = null;
        OutputStream streamOutput = null;
        int port = 20000;
        try
        {
            listener = new ServerSocket(port);
            socket = listener.accept();
            streamOutput = socket.getOutputStream();
            streamOutput.write((""Welcome, "" + socket.getInetAddress().getHostAddress()).getBytes(""UTF-8""));
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Could not connect to port "" + Integer.toString(port), exceptIO);
        }
        finally
        {
            try
            {
                if (streamOutput != null)
                {
                    streamOutput.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing objects"", exceptIO);
            }
            try
            {
                if (socket != null)
                {
                    socket.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing objects"", exceptIO);
            }
            try
            {
                if (listener != null)
                {
                    listener.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing objects"", exceptIO);
            }
        }
    }
}","private void init() throws Throwable
{
    if (publicTrue)
    {
        ServerSocket sen = null;
        Socket socket = null;
        OutputStream serverInput = null;
        int port = 20000;
        try
        {
            sen = new ServerSocket(port);
            socket = sen.accept();
            serverInput = socket.getOutputStream();
            serverInput.write((""Welcome, "" + socket.getInetAddress().getHostAddress()).getBytes(""UTF-8""));
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Could not connect to port "" + Integer.toString(port), exceptIO);
        }
        finally
        {
            try
            {
                if (serverInput != null)
                {
                    serverInput.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing objects"", exceptIO);
            }
            try
            {
                if (socket != null)
                {
                    socket.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing objects"", exceptIO);
            }
            try
            {
                if (sen != null)
                {
                    sen.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing objects"", exceptIO);
            }
        }
    }
}",235,7,"privateTrue:publicTrue,listener:sen,streamOutput:serverInput,Test212692:init,",1570,1.1366835991541544,Beam
1383,,,454,5,,919,0.6978880405426026,0
1384,,,280,9,,2952,2.2230656941731772,0
1385,,,277,9,,1976,1.5099117080370585,0
1386,,,191,6,,1051,0.7670218070348104,0
1387,,,43,2,,131,0.11443238655726115,0
1388,,,333,6,,926,0.716915774345398,0
1389,,,81,3,,283,0.21108299891153973,0
1390,,,42,4,,505,0.38517603476842244,0
1391,,,108,3,,314,0.238281774520874,0
1392,,,253,9,,1055,0.7984370509783427,0
1393,,,272,9,,3107,2.361651825904846,0
1394,,,105,4,,598,0.46633077462514244,0
1395,,,200,5,,923,0.7009265263875325,0
1396,,,254,8,,2568,1.909397296110789,0
1397,,,313,9,,2290,1.6881664236386618,0
1398,,,137,8,,1029,0.8488465030988057,0
1399,,,89,4,,498,0.3758861263593038,0
1400,,,304,10,,2304,1.7088223576545716,0
1401,,,283,10,,3334,2.4866267840067544,0
1402,,,292,9,,3167,2.3560983896255494,0
1403,,,75,5,,426,0.32811500231424967,0
1404,,,229,10,,3648,2.662497893969218,0
1405,,,94,5,,550,0.50970934232076,0
1406,,,209,5,,892,0.6460309108098348,0
1407,,,76,3,,251,0.2007023294766744,0
1408,,,65,4,,314,0.23529299100240073,0
1409,,,170,8,,2096,1.587935487429301,0
1410,,,157,5,,658,0.5347011049588521,0
1411,,,309,10,,1903,1.4617678801218668,0
1412,,,93,5,,828,0.6288070519765218,0
1413,,,174,9,,1449,1.1571533958117166,0
1414,,,87,5,,590,0.5424075325330099,0
1415,,,214,8,,2486,1.876042103767395,0
1416,,,27,3,,262,0.2609821597735087,0
1417,,,197,7,,2099,1.5597665150960287,0
1418,,,290,8,,2504,1.9397504210472107,0
1419,,,121,6,,1120,0.8680104692776998,0
1420,,,35,3,,252,0.19808199405670165,0
1421,,,394,10,,3999,3.1188212513923643,0
1422,,,116,3,,314,0.2456426421801249,0
1423,,,141,8,,1833,1.4567874113718668,0
1424,,,85,3,,343,0.26063894033432006,0
1425,,,240,8,,2634,1.9943318923314413,0
1426,,,294,8,,2500,1.9134605526924133,0
1427,,,77,3,,268,0.1950576384862264,0
1428,,,150,3,,283,0.22103190819422405,0
1429,,,117,8,,1505,1.2156596263249715,0
1430,,,90,5,,732,0.5619431694348653,0
1431,,,548,13,,4667,4.4900089502334595,0
1432,,,252,8,,493,0.38106432755788167,0
1433,,,301,10,,2640,2.0014636715253196,0
1434,,,63,2,,135,0.10670526425043741,0
1435,,,369,9,,3217,2.5196855703989667,0
1436,,,293,10,,3517,2.821394379933675,0
1437,,,301,9,,1733,1.2850847204526266,0
1438,,,258,9,,1920,1.4859453439712524,0
1439,,,69,3,,318,0.2375291387240092,0
1440,,,238,6,,1326,1.007613217830658,0
1441,,,136,7,,1537,1.217505963643392,0
1442,,,228,6,,989,0.7329591790835063,0
1443,,,353,11,,4251,3.4884283939997354,0
1444,,,100,5,,592,0.46527748107910155,0
1445,,,63,3,,318,0.24354785283406574,0
1446,,,33,3,,200,0.15317633549372356,0
1447,,,133,6,,941,0.7130451997121176,0
1448,,,246,5,,1076,0.7953203082084656,0
1449,,,236,9,,1648,1.2277172406514485,0
1450,,,138,8,,2147,1.7544345418612162,0
1451,,,79,3,,144,0.10817208687464396,0
1452,,,239,8,,2260,1.7978141228357951,0
1453,,,224,8,,2226,1.6798461318016051,0
1454,,,97,5,,474,0.4199533939361572,0
1455,,,96,5,,635,0.5155387759208679,0
1456,,,281,10,,3571,2.799086586634318,0
1457,,,419,11,,1246,0.9647144317626953,0
1458,,,250,7,,1797,1.3968047817548117,0
1459,,,158,5,,898,0.7647667487462362,0
1460,,,416,9,,3147,2.5431344985961912,0
1461,,,347,9,,1107,0.8692432840665182,0
1462,,,58,3,,255,0.21444455782572427,0
1463,,,61,3,,318,0.23689566055933634,0
1464,,,334,9,,3179,2.552696188290914,0
1465,,,93,4,,619,0.5052184224128723,0
1466,,,50,3,,345,0.2792117993036906,0
1467,,,164,6,,1337,1.05773157676061,0
1468,,,225,8,,2189,1.7191011309623718,0
1469,,,566,11,,2626,2.6137986977895102,0
1470,,,111,4,,501,0.4041871468226115,0
1471,,,85,4,,330,0.24545103311538696,0
1472,"private void Test990240() throws Throwable
{
    String data;
    if (privateTrue)
    {
        data = """";  
        {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                socket = new Socket(""host.example.org"", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = null;
    }
    if (privateTrue)
    {
        Connection dbConnection = null;
        PreparedStatement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.prepareStatement(""insert into users (status) values ('updated') where name=?"");
            sqlStatement.setString(1, data);
            int rowCount = sqlStatement.executeUpdate();
            IO.writeLine(""Updated "" + rowCount + "" rows successfully."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","private void parse() throws Throwable
{
    String i;
    if (publicTrue)
    {
        i = """";  
        {
            Socket config = null;
            BufferedReader readerOrdered = null;
            InputStreamReader readerMathstream = null;
            try
            {
                config = new Socket(""host.example.org"", 39544);
                readerMathstream = new InputStreamReader(config.getInputStream(), ""UTF-8"");
                readerOrdered = new BufferedReader(readerMathstream);
                i = readerOrdered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerOrdered != null)
                    {
                        readerOrdered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerMathstream != null)
                    {
                        readerMathstream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (config != null)
                    {
                        config.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
            }
        }
    }
    else
    {
        i = null;
    }
    if (publicTrue)
    {
        Connection databaseStatement = null;
        PreparedStatement databaseTransaction = null;
        try
        {
            databaseStatement = IO.getDBConnection();
            databaseTransaction = databaseStatement.prepareStatement(""insert into users (status) values ('updated') where name=?"");
            databaseTransaction.setString(1, i);
            int result = databaseTransaction.executeUpdate();
            IO.writeLine(""Updated "" + result + "" rows successfully."");
        }
        catch (SQLException caseSsql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", caseSsql);
        }
        finally
        {
            try
            {
                if (databaseTransaction != null)
                {
                    databaseTransaction.close();
                }
            }
            catch (SQLException caseSsql)
            {
                IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", caseSsql);
            }
            try
            {
                if (databaseStatement != null)
                {
                    databaseStatement.close();
                }
            }
            catch (SQLException caseSsql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", caseSsql);
            }
        }
    }
}",399,11,"privateTrue:publicTrue,data:i,exceptSql:caseSsql,dbConnection:databaseStatement,sqlStatement:databaseTransaction,socket:config,readerBuffered:readerOrdered,readerInputStream:readerMathstream,rowCount:result,Test990240:parse,",4695,3.6976337591807047,Beam
1473,,,362,11,,3769,2.9466795762379965,0
1474,,,159,9,,2545,2.048475495974223,0
1475,,,414,9,,1107,0.9112133661905925,0
1476,,,63,3,,318,0.2503070751825968,0
1477,,,46,2,,113,0.08693888187408447,0
1478,,,153,8,,1654,1.3614898284276327,0
1479,,,95,3,,282,0.23477400541305543,0
1480,,,102,6,,1313,0.9850376685460408,0
1481,,,57,4,,620,0.47186240752538045,0
1482,,,339,6,,1052,0.8038165052731832,0
1483,"private void Test768069() throws Throwable
{
    int count;
    if (privateTrue)
    {
        count = Integer.MIN_VALUE;  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                String stringNumber = readerBuffered.readLine();
                if (stringNumber != null)  
                {
                    try
                    {
                        count = Integer.parseInt(stringNumber.trim());
                    }
                    catch(NumberFormatException exceptNumberFormat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing count from string"", exceptNumberFormat);
                    }
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        count = 0;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (count > 0 && count <= 2000)
        {
            Thread.sleep(count);
        }
    }
}","private void init() throws Throwable
{
    int b;
    if (publictrue)
    {
        b = Integer.MIN_VALUE;  
        {
            ServerSocket Listen = null;
            Socket browser = null;
            BufferedReader readerBufferer = null;
            InputStreamReader readerPullStreamer = null;
            try
            {
                Listen = new ServerSocket(39543);
                browser = Listen.accept();
                readerPullStreamer = new InputStreamReader(browser.getInputStream(), ""UTF-8"");
                readerBufferer = new BufferedReader(readerPullStreamer);
                String Stringnumber = readerBufferer.readLine();
                if (Stringnumber != null)  
                {
                    try
                    {
                        b = Integer.parseInt(Stringnumber.trim());
                    }
                    catch(NumberFormatException exceptIntegerformat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing count from string"", exceptIntegerformat);
                    }
                }
            }
            catch (IOException catchSE)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", catchSE);
            }
            finally
            {
                try
                {
                    if (readerBufferer != null)
                    {
                        readerBufferer.close();
                    }
                }
                catch (IOException catchSE)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", catchSE);
                }
                try
                {
                    if (readerPullStreamer != null)
                    {
                        readerPullStreamer.close();
                    }
                }
                catch (IOException catchSE)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", catchSE);
                }
                try
                {
                    if (browser != null)
                    {
                        browser.close();
                    }
                }
                catch (IOException catchSE)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", catchSE);
                }
                try
                {
                    if (Listen != null)
                    {
                        Listen.close();
                    }
                }
                catch (IOException catchSE)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", catchSE);
                }
            }
        }
    }
    else
    {
        b = 0;
    }
    if (publicFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (b > 0 && b <= 2000)
        {
            Thread.sleep(b);
        }
    }
}",365,11,"privateTrue:publictrue,count:b,listener:Listen,readerInputStream:readerPullStreamer,readerBuffered:readerBufferer,exceptIO:catchSE,stringNumber:Stringnumber,socket:browser,privateFalse:publicFalse,exceptNumberFormat:exceptIntegerformat,Test768069:init,",3890,3.2315403898557027,Beam
1484,,,68,3,,365,0.29675811926523843,0
1485,,,58,2,,111,0.09117550055185954,0
1486,,,282,8,,2424,1.8994096716245015,0
1487,,,62,2,,159,0.1231594165166219,0
1488,,,165,8,,1902,1.5456492106119792,0
1489,,,276,10,,3735,2.9952140132586162,0
1490,,,54,2,,91,0.08596993287404378,0
1491,,,79,3,,283,0.22052292823791503,0
1492,,,303,9,,3213,2.465075635910034,0
1493,,,321,10,,3992,2.9814763824145,0
1494,,,45,3,,362,0.30848528146743776,0
1495,,,301,10,,3809,2.9057416915893555,0
1496,,,134,8,,1846,1.4780033787091573,0
1497,,,330,7,,1545,1.1838255961736044,0
1498,,,177,8,,1771,1.4148465037345885,0
1499,,,312,9,,3177,2.433595661322276,0
1500,,,45,4,,456,0.3576883355776469,0
1501,,,294,10,,2314,1.7448027650515239,0
1502,,,239,10,,3830,2.921567944685618,0
1503,,,266,9,,1982,1.5111876368522643,0
1504,,,57,3,,287,0.2183902104695638,0
1505,,,57,4,,512,0.4036839286486308,0
1506,,,282,9,,3169,2.3764280796051027,0
1507,,,254,9,,1027,0.7803376714388529,0
1508,,,61,4,,536,0.44248847564061483,0
1509,,,323,8,,1817,1.4275911053021748,0
1510,,,45,2,,138,0.11184960603713989,0
1511,,,61,3,,357,0.2834569533665975,0
1512,,,53,4,,563,0.44717663129170737,0
1513,,,99,4,,644,0.5095271984736125,0
1514,,,244,6,,1546,1.166897185643514,0
1515,,,387,13,,4440,3.3085602442423503,0
1516,,,89,3,,283,0.2110135793685913,0
1517,,,99,4,,404,0.3447831710179647,0
1518,,,237,7,,684,0.5019285837809245,0
1519,,,239,8,,1744,1.2643920222918192,0
1520,,,103,3,,405,0.2954907933870951,0
1521,,,158,8,,2259,1.6261352062225343,0
1522,,,103,7,,1054,0.8245511015256246,0
1523,,,141,9,,2612,2.072180147965749,0
1524,,,440,8,,2504,1.909867254892985,0
1525,,,24,1,,49,0.04160266717274984,0
1526,,,86,3,,314,0.24113014141718547,0
1527,,,61,3,,314,0.23295833269755045,0
1528,,,112,5,,435,0.34411417643229164,0
1529,,,174,6,,1430,1.0965223908424377,0
1530,,,197,8,,2021,1.4694443384806315,0
1531,,,178,8,,2145,1.611406421661377,0
1532,,,270,8,,1477,1.142896544933319,0
1533,,,343,11,,4251,3.569403024514516,0
1534,,,366,10,,4109,3.2821602622667947,0
1535,,,288,12,,4871,3.8254810611406964,0
1536,,,62,3,,220,0.2026697079340617,0
1537,,,48,3,,262,0.20418494542439777,0
1538,,,139,7,,1560,1.3220971385637919,0
1539,,,36,3,,360,0.28786712090174355,0
1540,,,25,2,,185,0.15202076037724813,0
1541,,,254,8,,464,0.3518945654233297,0
1542,,,123,5,,891,0.6976919174194336,0
1543,,,95,4,,569,0.4698068857192993,0
1544,,,66,3,,314,0.24127521514892578,0
1545,,,222,9,,2948,2.201806910832723,0
1546,,,158,7,,1365,1.0877505898475648,0
1547,"private void Test054080() throws Throwable
{
    int data;
    if (privateTrue)
    {
        data = Integer.MIN_VALUE;  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                String stringNumber = readerBuffered.readLine();
                if (stringNumber != null)  
                {
                    try
                    {
                        data = Integer.parseInt(stringNumber.trim());
                    }
                    catch(NumberFormatException exceptNumberFormat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", exceptNumberFormat);
                    }
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = 0;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        int array[] = null;
        if (data > 0)
        {
            array = new int[data];
        }
        else
        {
            IO.writeLine(""Array size is negative"");
        }
        array[0] = 5;
        IO.writeLine(array[0]);
    }
}","private void init() throws Throwable
{
    int next;
    if (publictrue)
    {
        next = Integer.MIN_VALUE;  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffering = null;
            InputStreamReader readerReaderPath = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerReaderPath = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffering = new BufferedReader(readerReaderPath);
                String StringBER = readerBuffering.readLine();
                if (StringBER != null)  
                {
                    try
                    {
                        next = Integer.parseInt(StringBER.trim());
                    }
                    catch(NumberFormatException exceptBERFormat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", exceptBERFormat);
                    }
                }
            }
            catch (IOException ignore)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", ignore);
            }
            finally
            {
                try
                {
                    if (readerBuffering != null)
                    {
                        readerBuffering.close();
                    }
                }
                catch (IOException ignore)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ignore);
                }
                try
                {
                    if (readerReaderPath != null)
                    {
                        readerReaderPath.close();
                    }
                }
                catch (IOException ignore)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", ignore);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException ignore)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", ignore);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException ignore)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", ignore);
                }
            }
        }
    }
    else
    {
        next = 0;
    }
    if (fix)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        int pair[] = null;
        if (next > 0)
        {
            pair = new int[next];
        }
        else
        {
            IO.writeLine(""Array size is negative"");
        }
        pair[0] = 5;
        IO.writeLine(pair[0]);
    }
}",396,12,"privateTrue:publictrue,data:next,exceptIO:ignore,privateFalse:fix,stringNumber:StringBER,readerInputStream:readerReaderPath,array:pair,readerBuffered:readerBuffering,exceptNumberFormat:exceptBERFormat,Test054080:init,",5186,3.9697866638501487,Beam
1548,,,252,11,,2168,1.6477235317230225,0
1549,,,364,12,,5124,4.106133270263672,0
1550,,,269,8,,2445,1.790540599822998,0
1551,,,298,8,,886,0.6602334221204121,0
1552,,,320,8,,493,0.36596333583196006,0
1553,,,363,11,,1266,0.9423866629600525,0
1554,,,143,6,,1282,0.9440109848976135,0
1555,,,43,1,,33,0.037937649091084796,0
1556,,,43,3,,239,0.20991352399190266,0
1557,,,90,4,,499,0.37107380231221515,0
1558,,,191,6,,1454,1.069666075706482,0
1559,,,133,8,,1721,1.2947491963704427,0
1560,,,196,7,,1842,1.3925062815348308,0
1561,,,69,5,,706,0.53373255332311,0
1562,,,299,8,,2424,1.8179510792096456,0
1563,,,116,5,,585,0.4573763330777486,0
1564,,,262,7,,460,0.33732478618621825,0
1565,,,291,9,,1028,0.7722146193186442,0
1566,,,39,2,,231,0.16889040072758993,0
1567,,,154,8,,1989,1.496860134601593,0
1568,,,316,8,,2492,1.8497012694676718,0
1569,,,374,11,,3434,2.5600343068440754,0
1570,,,175,7,,1117,0.8455476522445678,0
1571,,,129,3,,283,0.2166483481725057,0
1572,,,124,3,,287,0.21046062310536703,0
1573,,,252,8,,983,0.7108680367469787,0
1574,,,251,8,,2626,1.9032614628473918,0
1575,,,84,4,,354,0.2879650712013245,0
1576,,,81,2,,111,0.0997238556543986,0
1577,,,172,10,,4046,2.9816591223080953,0
1578,,,57,4,,510,0.43681376775105796,0
1579,,,263,9,,3420,2.582090763250987,0
1580,,,123,3,,314,0.2378994027773539,0
1581,,,97,3,,287,0.2224899967511495,0
1582,,,112,3,,283,0.21791719992955524,0
1583,,,285,9,,2604,1.925403885046641,0
1584,,,341,9,,3129,2.358798642953237,0
1585,,,122,5,,1026,0.7511117021242778,0
1586,,,71,3,,273,0.22035015026728313,0
1587,,,443,9,,2315,1.9474034547805785,0
1588,,,92,3,,314,0.23347237904866536,0
1589,,,176,8,,2294,1.6711949666341146,0
1590,,,286,8,,2492,1.8047512451807657,0
1591,,,387,7,,1549,1.150262717405955,0
1592,,,223,8,,2118,1.5469990770022075,0
1593,,,191,13,,5032,3.728633101781209,0
1594,,,279,10,,3770,2.8231596032778423,0
1595,,,38,3,,262,0.19549798965454102,0
1596,,,276,9,,1018,0.7603814204533895,0
1597,,,117,4,,495,0.3940862456957499,0
1598,,,251,8,,2298,1.6908596396446227,0
1599,"private void Test039170() throws Throwable
{
    int data;
    if (privateTrue)
    {
        data = Integer.MIN_VALUE;  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                String stringNumber = readerBuffered.readLine();
                if (stringNumber != null)  
                {
                    try
                    {
                        data = Integer.parseInt(stringNumber.trim());
                    }
                    catch(NumberFormatException exceptNumberFormat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", exceptNumberFormat);
                    }
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = 0;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        int array[] = { 0, 1, 2, 3, 4 };
        if (data >= 0 && data < array.length)
        {
            array[data] = 42;
        }
        else
        {
            IO.writeLine(""Array index out of bounds"");
        }
    }
}","private void start() throws Throwable
{
    int da;
    if (publictrue)
    {
        da = Integer.MIN_VALUE;  
        {
            ServerSocket registerening = null;
            Socket socket = null;
            BufferedReader readerBuffererred = null;
            InputStreamReader breakerInitialStreamer = null;
            try
            {
                registerening = new ServerSocket(39543);
                socket = registerening.accept();
                breakerInitialStreamer = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffererred = new BufferedReader(breakerInitialStreamer);
                String integerString = readerBuffererred.readLine();
                if (integerString != null)  
                {
                    try
                    {
                        da = Integer.parseInt(integerString.trim());
                    }
                    catch(NumberFormatException exceptIntegerformat)
                    {
                        IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", exceptIntegerformat);
                    }
                }
            }
            catch (IOException exceptPO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptPO);
            }
            finally
            {
                try
                {
                    if (readerBuffererred != null)
                    {
                        readerBuffererred.close();
                    }
                }
                catch (IOException exceptPO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptPO);
                }
                try
                {
                    if (breakerInitialStreamer != null)
                    {
                        breakerInitialStreamer.close();
                    }
                }
                catch (IOException exceptPO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptPO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptPO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptPO);
                }
                try
                {
                    if (registerening != null)
                    {
                        registerening.close();
                    }
                }
                catch (IOException exceptPO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptPO);
                }
            }
        }
    }
    else
    {
        da = 0;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        int null[] = { 0, 1, 2, 3, 4 };
        if (da >= 0 && da < null.length)
        {
            null[da] = 42;
        }
        else
        {
            IO.writeLine(""Array index out of bounds"");
        }
    }
}",394,12,"privateTrue:publictrue,data:da,array:null,listener:registerening,readerBuffered:readerBuffererred,stringNumber:integerString,readerInputStream:breakerInitialStreamer,exceptIO:exceptPO,exceptNumberFormat:exceptIntegerformat,Test039170:start,",4920,3.8517874558766683,Beam
1600,,,56,3,,318,0.22933056751887004,0
1601,,,354,10,,1130,0.8227885882059733,0
1602,,,365,11,,5145,3.8693490584691363,0
1603,,,310,10,,1117,0.8638081669807434,0
1604,,,271,5,,718,0.5789655129114787,0
1605,,,68,6,,832,0.6681870818138123,0
1606,,,89,4,,622,0.47436781724294025,0
1607,,,61,4,,464,0.39352600971857704,0
1608,,,33,1,,49,0.042857261498769124,0
1609,,,175,8,,1624,1.2733801364898683,0
1610,,,43,4,,382,0.29681040048599244,0
1611,,,121,8,,2251,1.800719964504242,0
1612,,,89,4,,546,0.4169831991195679,0
1613,,,49,4,,449,0.360016135374705,0
1614,,,216,8,,418,0.3236505707105001,0
1615,,,79,4,,498,0.3818902333577474,0
1616,,,308,9,,2125,1.6251802881558737,0
1617,,,322,8,,433,0.31555856466293336,0
1618,,,45,2,,163,0.1273971160252889,0
1619,,,72,5,,751,0.5530705173810323,0
1620,,,336,10,,2841,2.119657031695048,0
1621,,,40,3,,207,0.1861786444981893,0
1622,,,66,4,,523,0.40179235537846886,0
1623,,,86,4,,511,0.38885124524434406,0
1624,,,234,7,,2090,1.5353020548820495,0
1625,,,60,1,,17,0.024686423937479655,0
1626,,,62,2,,219,0.1724561889966329,0
1627,,,118,4,,555,0.4134164492289225,0
1628,,,284,9,,3164,2.327322006225586,0
1629,,,88,5,,642,0.4766766985257467,0
1630,,,201,6,,1406,1.0606290141741435,0
1631,,,246,13,,4855,3.5997310400009157,0
1632,,,311,11,,1312,0.9827740828196208,0
1633,,,387,7,,1545,1.1379258632659912,0
1634,,,195,6,,959,0.6997225761413575,0
1635,,,55,4,,367,0.24917807976404827,0
1636,,,273,9,,969,0.6967414657274882,0
1637,,,58,4,,568,0.4230368256568909,0
1638,,,298,10,,2697,1.9758547385533651,0
1639,,,69,3,,318,0.2379576524098714,0
1640,,,81,4,,566,0.4094760815302531,0
1641,,,380,10,,989,0.7507029374440511,0
1642,,,402,10,,3934,3.0995383699735006,0
1643,,,319,8,,2500,1.9110012849171956,0
1644,,,285,9,,2225,1.6827584226926169,0
1645,,,261,10,,2302,1.7824738462766012,0
1646,,,305,10,,613,0.4823023796081543,0
1647,,,290,8,,2707,2.0761401653289795,0
1648,,,137,5,,615,0.47385335763295494,0
1649,,,235,8,,2500,1.8972112536430359,0
1650,,,74,4,,470,0.4265128890673319,0
1651,,,294,10,,3181,2.4178017377853394,0
1652,,,311,9,,2209,1.6910524368286133,0
1653,,,109,6,,879,0.7152466694513957,0
1654,,,59,4,,517,0.400804873307546,0
1655,,,215,12,,4206,3.1760779579480487,0
1656,,,257,8,,464,0.3324335336685181,0
1657,,,277,8,,2045,1.493618106842041,0
1658,,,303,8,,2500,1.8459811647733053,0
1659,,,163,10,,1827,1.332045809427897,0
1660,,,361,11,,5144,3.823982532819112,0
1661,,,232,6,,1169,0.8465198159217835,0
1662,,,162,5,,1051,0.7760197877883911,0
1663,,,273,13,,4742,3.5664299805959065,0
1664,,,354,11,,2942,2.190252693494161,0
1665,,,335,9,,1775,1.3188103953997294,0
1666,,,259,7,,1841,1.3609546740849814,0
1667,,,261,8,,2217,1.6070719758669536,0
1668,,,65,4,,447,0.33481132984161377,0
1669,,,61,4,,517,0.40462305943171184,0
1670,,,185,10,,3165,2.33256653547287,0
1671,,,87,4,,481,0.40490018924077353,0
1672,,,297,8,,2504,1.8235199093818664,0
1673,,,284,9,,2037,1.483583148320516,0
1674,,,248,8,,2504,1.8167471249898275,0
1675,,,218,5,,923,0.6946210583051046,0
1676,,,267,6,,888,0.6603350122769673,0
1677,,,266,9,,2510,1.781630516052246,0
1678,,,219,9,,1780,1.2831841826438903,0
1679,,,40,4,,456,0.332755176226298,0
1680,,,229,9,,2012,1.440991759300232,0
1681,,,288,6,,932,0.6756750663121541,0
1682,,,117,4,,526,0.4377430995305379,0
1683,,,195,8,,2071,1.493406101067861,0
1684,,,312,7,,670,0.5047308961550395,0
1685,,,196,10,,3885,2.8596362034479776,0
1686,,,90,5,,585,0.476664928595225,0
1687,,,90,2,,175,0.13013654549916584,0
1688,,,61,5,,649,0.5004162828127543,0
1689,,,104,4,,374,0.3063597838083903,0
1690,,,329,10,,2597,1.9272165497144063,0
1691,,,87,3,,314,0.24207668701807658,0
1692,,,131,9,,2448,2.036138319969177,0
1693,,,310,7,,2099,1.5729113817214966,0
1694,,,143,9,,2388,1.879707137743632,0
1695,,,308,7,,2094,1.4867377281188965,0
1696,,,261,8,,2469,1.8006471196810405,0
1697,,,257,8,,988,0.7202159881591796,0
1698,,,82,3,,258,0.2138943870862325,0
1699,,,98,5,,530,0.42222245534261066,0
1700,,,266,7,,1884,1.382884403069814,0
1701,,,60,3,,288,0.22329176266988118,0
1702,,,89,3,,304,0.23805650075276694,0
1703,,,463,11,,4183,3.4016187032063803,0
1704,,,288,9,,3285,2.4294619957605996,0
1705,,,106,3,,287,0.2145602027575175,0
1706,,,118,3,,314,0.22924667596817017,0
1707,,,128,5,,818,0.6251966635386149,0
1708,,,338,10,,3651,2.6678761998812357,0
1709,,,38,3,,324,0.23207995891571045,0
1710,,,148,8,,1792,1.3557589292526244,0
1711,,,194,7,,1166,0.8726064364115397,0
1712,,,95,6,,1269,0.899649703502655,0
1713,,,112,8,,2061,1.511427394549052,0
1714,,,121,3,,405,0.2862589756647746,0
1715,,,108,3,,287,0.21092116832733154,0
1716,,,123,3,,287,0.21540415287017822,0
1717,,,198,8,,2413,1.7517090320587159,0
1718,,,302,9,,2596,1.899579644203186,0
1719,,,161,5,,1051,0.7478256543477376,0
1720,,,81,3,,283,0.2072240749994914,0
1721,,,133,9,,2031,1.591454009215037,0
1722,,,291,8,,1587,1.1498250246047974,0
1723,,,45,3,,239,0.20579324960708617,0
1724,,,42,4,,316,0.24734326203664145,0
1725,,,325,10,,3946,2.925044111410777,0
1726,"private void Test473058(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    if (privateTrue)
    {
        try
        {
            throw new UnsupportedOperationException();
        }
        catch (UnsupportedOperationException exceptUnsupportedOperation)
        {
            response.getWriter().println(""There was an unsupported operation error"");  
        }
    }
}","private void Test473058(HttpServletRequest data, HttpServletResponse model) throws Throwable
{
    if (publicTrue)
    {
        try
        {
            throw new UnsupportedOperationException();
        }
        catch (UnsupportedOperationException exceptUnsupportedOperation)
        {
            model.getWriter().println(""There was an unsupported operation error"");  
        }
    }
}",47,4,"privateTrue:publicTrue,response:model,request:data,",169,0.1323067545890808,Beam
1727,,,395,11,,3805,3.146926160653432,0
1728,,,94,4,,407,0.29800285895665485,0
1729,,,237,6,,1226,0.9027676463127137,0
1730,,,232,8,,1758,1.2947880665461222,0
1731,,,99,3,,262,0.20325843493143717,0
1732,,,291,8,,1944,1.4761444767316183,0
1733,,,184,13,,3301,2.52600443760554,0
1734,,,140,6,,1308,1.010259493192037,0
1735,,,55,2,,219,0.1595470865567525,0
1736,,,386,15,,3515,3.2965979099273683,0
1737,,,427,13,,4153,3.2177764534950257,0
1738,,,183,4,,531,0.3961321274439494,0
1739,,,521,8,,2038,1.6081017017364503,0
1740,,,24,1,,49,0.04454191128412883,0
1741,,,61,3,,286,0.23156952063242595,0
1742,,,253,8,,2693,1.9652766426404318,0
1743,,,95,3,,400,0.3191405455271403,0
1744,,,91,3,,282,0.24606136083602906,0
1745,,,119,5,,227,0.21051108439763386,0
1746,,,108,3,,283,0.23664762576421103,0
1747,,,178,6,,704,0.614383331934611,0
1748,,,119,5,,595,0.5458920399347941,0
1749,,,74,4,,411,0.3076014439264933,0
1750,,,70,3,,259,0.19361758629481,0
1751,,,60,3,,400,0.29445401827494305,0
1752,,,125,6,,640,0.5177904605865479,0
1753,,,275,5,,744,0.5767608006795247,0
1754,,,116,3,,343,0.2570574959119161,0
1755,,,406,11,,3465,2.643687148888906,0
1756,,,259,10,,3434,2.5459473808606465,0
1758,,,133,5,,787,0.6198862115542094,0
1759,,,278,11,,4099,3.044307231903076,0
1760,,,55,5,,700,0.5732887824376424,0
1761,,,473,11,,3097,2.321350292364756,0
1762,,,117,3,,283,0.20745085875193278,0
1763,,,294,10,,3304,2.4721427241961162,0
1764,,,41,4,,462,0.33772807916005454,0
1765,,,60,2,,159,0.12171880006790162,0
1766,,,377,10,,3675,2.7017744024594625,0
1767,,,558,13,,4553,4.268951157728831,0
1768,,,391,14,,4106,3.9079030553499856,0
1769,,,174,6,,1295,0.9516537904739379,0
1770,,,195,8,,1929,1.3819286465644836,0
1771,,,146,6,,1155,0.8857560753822327,0
1772,,,38,3,,266,0.18805835644404092,0
1773,,,72,5,,775,0.5616109649340312,0
1774,,,137,8,,1478,1.1797839641571044,0
1775,,,35,2,,175,0.13249870538711547,0
1776,,,273,8,,2416,1.7812683502833049,0
1777,,,325,6,,960,0.7033846179644266,0
1778,,,311,11,,4846,3.6171185930569965,0
1779,,,297,9,,3217,2.3886543035507204,0
1780,,,29,2,,144,0.10336687167485555,0
1781,,,57,5,,564,0.5925000786781311,0
1782,,,85,4,,364,0.27959423065185546,0
1783,,,91,4,,438,0.3225809613863627,0
1784,,,365,10,,1232,0.9251529097557067,0
1785,,,220,8,,2261,1.6717606067657471,0
1786,,,42,3,,268,0.19739351272583008,0
1787,,,129,8,,2113,1.6686779459317524,0
1788,,,98,3,,282,0.22222259442011516,0
1789,,,25,2,,231,0.166489573319753,0
1790,,,304,9,,3202,2.308002257347107,0
1791,,,236,9,,1614,1.1638540267944335,0
1792,,,331,9,,3185,2.3471659898757933,0
1793,,,117,8,,2545,1.849827559789022,0
1794,,,110,3,,314,0.2346662481625875,0
1795,,,120,7,,1193,0.8821545958518981,0
1796,,,362,11,,1311,0.9592203299204508,0
1797,,,59,4,,469,0.35617990493774415,0
1798,,,66,3,,338,0.24630587895711262,0
1799,,,95,3,,343,0.24706267515818278,0
1800,,,299,8,,2504,1.841577132542928,0
1801,,,141,5,,687,0.5307005405426025,0
1802,,,277,11,,4004,2.9959000945091248,0
1803,,,64,4,,524,0.4045750657717387,0
1804,,,58,3,,343,0.2516709486643473,0
1805,,,370,11,,2719,2.0640023430188497,0
1806,,,62,2,,88,0.06795331239700317,0
1807,,,341,11,,1267,0.988650377591451,0
1808,,,496,13,,4759,3.8224026878674824,0
1809,,,50,5,,885,0.6645757873853048,0
1810,,,174,9,,2730,2.0442548791567483,0
1811,,,55,3,,400,0.2910038709640503,0
1812,,,130,8,,1502,1.168319054444631,0
1813,,,218,13,,4669,3.447918168703715,0
1814,,,22,2,,63,0.06364529132843018,0
1815,,,85,3,,324,0.23437914450963337,0
1816,,,162,8,,1151,0.8561455567677816,0
1817,,,244,8,,2488,1.8045702934265138,0
1818,,,31,3,,434,0.32687654892603557,0
1819,,,275,9,,2700,1.9634466330210367,0
1820,,,61,4,,624,0.45168198347091676,0
1821,,,43,3,,324,0.23675599098205566,0
1822,,,109,4,,449,0.35665388107299806,0
1823,,,214,7,,1262,0.9113848169644674,0
1824,,,253,7,,2037,1.4759149233500162,0
1825,,,255,9,,2646,1.9237423936525981,0
1826,,,261,7,,743,0.5556159257888794,0
1827,,,300,10,,1901,1.4201038797696433,0
1828,,,311,9,,1650,1.2127090533574423,0
1829,,,466,11,,4016,3.155367680390676,0
1830,,,186,8,,1534,1.1991946538289389,0
1831,,,340,10,,1103,0.8129804333051046,0
1832,,,324,10,,3871,2.9275736769040424,0
1833,,,38,4,,482,0.373268715540568,0
1834,,,58,3,,405,0.31420454184214275,0
1835,,,26,2,,129,0.11696077187856038,0
1836,,,286,9,,2152,1.600381322701772,0
1837,,,68,4,,635,0.46383782625198366,0
1838,,,129,6,,1291,0.9938028931617737,0
1839,,,54,3,,306,0.23058273394902548,0
1840,,,192,8,,1686,1.2404798467954,0
1841,,,290,10,,2310,1.688987910747528,0
1842,,,532,12,,923,0.7619675159454345,0
1843,,,132,5,,922,0.6978958050409952,0
1844,,,308,9,,2750,2.0062716523806254,0
1845,,,48,2,,179,0.14706568320592245,0
1846,,,502,11,,4869,3.6997090061505635,0
1847,,,244,9,,1556,1.1403393348058064,0
1848,,,57,5,,573,0.5287598450978597,0
1849,,,142,5,,716,0.5726177056630453,0
1850,,,246,7,,2104,1.5362714648246765,0
1851,,,56,2,,138,0.10410155057907104,0
1852,,,60,5,,899,0.6641672730445862,0
1853,,,362,11,,3469,2.5563355565071104,0
1854,,,47,2,,113,0.08482625087102254,0
1855,,,40,2,,219,0.17438825368881225,0
1856,,,38,3,,300,0.22240413029988607,0
1857,,,157,8,,2271,1.6317589004834494,0
1858,,,355,9,,3170,2.3639209230740863,0
1859,,,111,5,,139,0.10736465056737264,0
1860,,,258,9,,1935,1.4272382974624633,0
1861,,,69,3,,314,0.23390189409255982,0
1862,,,273,7,,1876,1.3767660975456237,0
1863,,,92,4,,510,0.38300901651382446,0
1864,,,463,12,,5213,4.04211995601654,0
1865,,,145,7,,1732,1.2529560645421347,0
1866,,,53,4,,481,0.35416778723398845,0
1867,,,22,2,,117,0.10410921971003215,0
1868,,,58,5,,779,0.5592763861020406,0
1869,,,461,11,,643,0.48464191357294717,0
1870,,,49,5,,857,0.6270155588785807,0
1871,,,56,3,,293,0.21326026916503907,0
1872,,,96,4,,549,0.3925226092338562,0
1873,,,497,13,,1514,1.151450757185618,0
1874,,,205,6,,1044,0.7260506391525269,0
1875,,,365,10,,3818,2.7894908666610716,0
1876,,,31,3,,279,0.24281932910283408,0
1877,,,267,7,,1880,1.3724447329839071,0
1878,"private void Test586323(int data ) throws Throwable
{
    int array[] = null;
    if (data >= 0)
    {
        array = new int[data];
    }
    else
    {
        IO.writeLine(""Array size is negative"");
    }
    array[0] = 5;
    IO.writeLine(array[0]);
}","private void Test586323(int limit ) throws Throwable
{
    int array[] = null;
    if (limit >= 0)
    {
        array = new int[limit];
    }
    else
    {
        IO.writeLine(""Array size is negative"");
    }
    array[0] = 5;
    IO.writeLine(array[0]);
}",61,3,"data:limit,",32,0.027391854921976724,Beam
1879,,,79,3,,400,0.2954728643099467,0
1880,,,280,7,,1884,1.3729526122411093,0
1881,,,397,10,,3954,3.012865392367045,0
1882,,,130,6,,1065,0.8921252846717834,0
1883,,,339,10,,3678,2.7956436316172284,0
1884,,,497,11,,4922,3.826876978079478,0
1885,,,343,10,,1160,0.8964000225067139,0
1886,,,94,3,,287,0.21486364205678304,0
1887,,,286,8,,2438,1.857228167851766,0
1888,,,73,4,,518,0.3903558651606242,0
1889,,,240,9,,2692,2.0161030928293866,0
1890,,,257,8,,2472,1.8314074516296386,0
1891,,,283,9,,2328,1.7310165683428447,0
1892,,,324,9,,3186,2.405890432993571,0
1893,,,401,11,,4724,3.634481644630432,0
1894,,,153,3,,343,0.2692298889160156,0
1895,,,308,9,,1092,0.8380019704500834,0
1896,,,33,2,,163,0.12323573827743531,0
1897,,,197,8,,2255,1.6884097933769227,0
1898,,,62,2,,163,0.13054357767105101,0
1899,,,289,8,,1944,1.4615258892377219,0
1900,,,310,9,,3117,2.3803579727808635,0
1901,,,112,3,,287,0.23145123720169067,0
1902,,,282,10,,3334,2.5125572800636293,0
1903,,,70,4,,461,0.3628594398498535,0
1904,,,503,11,,679,0.5276744564374288,0
1905,,,24,2,,162,0.14768720070521038,0
1906,,,284,8,,2755,2.088906097412109,0
1907,,,173,8,,1419,1.0874647895495098,0
1908,,,49,3,,231,0.20370590686798096,0
1909,,,333,9,,2250,1.6871357003847758,0
1910,,,269,8,,1572,1.1763582944869995,0
1911,,,483,16,,4556,4.046971960862478,0
1912,,,33,2,,159,0.12207530736923218,0
1913,,,155,7,,1543,1.198672107855479,0
1914,,,54,4,,99,0.08472767670949301,0
1915,,,41,3,,288,0.22913878361384074,0
1916,,,48,3,,343,0.2574398398399353,0
1917,,,141,8,,1892,1.4635573387145997,0
1918,,,76,3,,318,0.23851577838261923,0
1919,,,136,8,,1301,1.0259100834528605,0
1920,,,70,4,,684,0.4999781370162964,0
1921,,,183,8,,2018,1.4805261572202046,0
1922,,,152,3,,287,0.2126658042271932,0
1923,,,71,4,,605,0.44073968728383384,0
1924,,,137,5,,940,0.6916382312774658,0
1925,,,46,2,,210,0.15874530076980592,0
1926,,,96,3,,365,0.28797353903452555,0
1927,,,271,9,,2681,1.9126303752263387,0
1928,,,59,3,,283,0.20985833803812662,0
1929,,,223,9,,3086,2.2195342342058817,0
1930,,,146,3,,318,0.23710640668869018,0
1931,,,180,7,,1521,1.0957052787144979,0
1932,,,69,4,,444,0.35647199153900144,0
1933,,,267,9,,2157,1.653135347366333,0
1934,,,135,6,,1194,0.8930253346761068,0
1935,,,66,2,,88,0.06712466875712077,0
1936,,,318,10,,1231,0.8965035796165466,0
1937,,,136,4,,535,0.3858087499936422,0
1938,,,280,8,,2200,1.593709417184194,0
1939,,,186,8,,2189,1.5953729391098022,0
1940,,,289,10,,523,0.3963403026262919,0
1941,,,55,3,,118,0.09266848961512247,0
1942,,,162,8,,1303,0.9816263834635417,0
1943,,,261,8,,1932,1.3794294158617655,0
1944,,,86,3,,318,0.23123177289962768,0
1945,,,76,3,,314,0.2272095998128255,0
1946,,,334,9,,3217,2.3277239243189496,0
1947,,,120,8,,1378,1.0173378308614096,0
1948,,,220,7,,1860,1.3421212593714396,0
1949,,,70,4,,437,0.3440283020337423,0
1950,,,391,10,,3652,2.6269556045532227,0
1951,,,135,8,,1182,0.8960540493329366,0
1953,,,77,5,,737,0.5762544552485148,0
1954,,,283,8,,2500,1.8419033527374267,0
1955,,,106,6,,1300,1.0268301963806152,0
1956,,,397,14,,5106,4.750250442822774,0
1957,,,281,9,,2197,1.6269967714945475,0
1958,,,31,2,,129,0.10997010866800944,0
1959,,,162,5,,738,0.581267221768697,0
1960,,,87,5,,690,0.5310391585032145,0
1961,,,325,6,,949,0.711126180489858,0
1962,,,339,11,,4105,3.003473778565725,0
1963,,,297,9,,3084,2.2238256374994916,0
1964,,,42,3,,277,0.2508830507596334,0
1965,,,284,8,,919,0.6753243247667948,0
1966,,,398,10,,3350,2.742725137869517,0
1967,,,266,6,,926,0.6836509029070537,0
1968,,,373,9,,3217,2.3451294779777525,0
1969,,,53,1,,51,0.04091196060180664,0
1970,,,200,7,,1884,1.31826247771581,0
1971,,,62,5,,940,0.6893547256787618,0
1972,,,271,5,,860,0.6302815715471903,0
1973,,,70,3,,343,0.2573404709498088,0
1974,,,385,11,,2224,1.6323119600613911,0
1975,,,396,9,,2716,2.0272336999575296,0
1976,,,261,7,,1939,1.3867548704147339,0
1977,,,445,11,,5226,3.9316245953241986,0
1978,,,53,6,,996,0.7190069794654846,0
1979,,,287,7,,770,0.5521276871363322,0
1980,,,245,6,,1321,0.9520835677782694,0
1981,,,50,4,,374,0.3308953126271566,0
1982,,,106,3,,405,0.30066230297088625,0
1983,,,258,8,,1629,1.1675290624300638,0
1984,,,219,8,,2564,1.8453490098317464,0
1985,,,127,9,,1774,1.3151113033294677,0
1986,,,95,5,,909,0.6476805647214253,0
1987,,,207,5,,1009,0.7238096237182617,0
1988,,,236,6,,1501,1.0963979999224345,0
1989,,,40,4,,479,0.35405202706654865,0
1990,,,238,9,,3155,2.268024794260661,0
1991,,,237,8,,2504,1.786302355925242,0
1992,,,196,7,,1764,1.2989059766133626,0
1993,,,73,3,,338,0.2418035586675008,0
1994,,,400,9,,3432,2.5208457430203755,0
1995,,,221,8,,2609,1.8978756427764893,0
1996,,,42,3,,259,0.1988866448402405,0
1997,,,142,9,,2452,1.8768932223320007,0
1998,,,87,6,,1123,0.8209053874015808,0
1999,,,305,9,,3153,2.2760985771814983,0
2000,,,331,9,,2184,1.6340997735659282,0
2001,,,268,9,,2074,1.5272976477940878,0
2002,,,258,6,,706,0.5067734638849895,0
2003,"private void Test345094(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data;
    if (privateTrue)
    {
        data = """";  
        {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                socket = new Socket(""host.example.org"", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = null;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (data != null)
        {
            data = URLEncoder.encode(data, ""UTF-8"");
            response.setHeader(""Location"", ""/author.jsp?lang="" + data);
        }
    }
}","private void process(HttpServletRequest request, HttpServletResponse document) throws Throwable
{
    String split;
    if (publicTrue)
    {
        split = """";  
        {
            Socket localhost = null;
            BufferedReader readerbuffared = null;
            InputStreamReader readerPrintstream = null;
            try
            {
                localhost = new Socket(""host.example.org"", 39544);
                readerPrintstream = new InputStreamReader(localhost.getInputStream(), ""UTF-8"");
                readerbuffared = new BufferedReader(readerPrintstream);
                split = readerbuffared.readLine();
            }
            catch (IOException nullIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", nullIO);
            }
            finally
            {
                try
                {
                    if (readerbuffared != null)
                    {
                        readerbuffared.close();
                    }
                }
                catch (IOException nullIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", nullIO);
                }
                try
                {
                    if (readerPrintstream != null)
                    {
                        readerPrintstream.close();
                    }
                }
                catch (IOException nullIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", nullIO);
                }
                try
                {
                    if (localhost != null)
                    {
                        localhost.close();
                    }
                }
                catch (IOException nullIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", nullIO);
                }
            }
        }
    }
    else
    {
        split = null;
    }
    if (PrivateTrue)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (split != null)
        {
            split = URLEncoder.encode(split, ""UTF-8"");
            document.setHeader(""Location"", ""/author.jsp?lang="" + split);
        }
    }
}",282,10,"privateTrue:publicTrue,data:split,response:document,socket:localhost,readerInputStream:readerPrintstream,privateFalse:PrivateTrue,readerBuffered:readerbuffared,exceptIO:nullIO,Test345094:process,",2551,1.943509292602539,Beam
2004,,,176,8,,1804,1.3736578901608785,0
2005,,,253,8,,1007,0.7449597716331482,0
2006,,,375,8,,2299,1.711325184504191,0
2007,,,133,8,,1375,1.0221222996711732,0
2008,,,356,10,,4005,2.914744019508362,0
2009,,,116,7,,1391,1.028285264968872,0
2010,,,26,1,,49,0.04356735944747925,0
2011,,,339,10,,3262,2.47669251759847,0
2012,,,501,12,,5918,4.4611403226852415,0
2013,,,284,10,,2647,1.9283312439918519,0
2014,,,150,5,,859,0.644709833463033,0
2015,,,150,8,,1867,1.4304292480150858,0
2016,,,320,10,,4160,3.1688523093859353,0
2017,,,27,2,,231,0.18045444488525392,0
2018,,,576,9,,2604,2.223567299048106,0
2019,,,75,6,,1046,0.7411903301874797,0
2020,,,163,8,,1942,1.5202765544255574,0
2021,,,114,3,,318,0.23501122395197552,0
2022,,,70,2,,195,0.15667640765508015,0
2023,,,143,5,,684,0.5249566078186035,0
2024,,,317,10,,584,0.4265053510665894,0
2025,,,73,3,,303,0.22336339950561523,0
2026,,,265,9,,1510,1.0780542174975076,0
2027,,,210,7,,1076,0.7818143844604493,0
2028,,,213,7,,2094,1.4790842175483703,0
2029,,,336,7,,1520,1.1236113786697388,0
2030,,,62,4,,473,0.35864816506703695,0
2031,,,268,9,,490,0.35205146471659343,0
2032,,,65,3,,298,0.23261286815007529,0
2033,,,360,10,,3790,2.7751887321472166,0
2034,,,42,2,,127,0.1183631181716919,0
2035,,,107,6,,574,0.4456749717394511,0
2036,,,393,10,,3937,3.0863427837689716,0
2037,,,319,10,,3990,3.062750506401062,0
2038,,,400,10,,2287,1.793613338470459,0
2039,,,74,4,,467,0.34354846477508544,0
2040,,,107,3,,287,0.2209440549214681,0
2041,,,49,3,,268,0.19745094776153566,0
2042,,,62,4,,495,0.37996617158253987,0
2043,,,157,5,,970,0.7521815657615661,0
2044,,,124,7,,1048,0.8342774510383606,0
2045,,,270,6,,1034,0.786166266600291,0
2046,,,349,9,,3187,2.4177409251530966,0
2047,,,54,4,,277,0.23582777579625447,0
2048,,,58,3,,365,0.2882267673810323,0
2049,,,76,4,,375,0.2908139864603678,0
2050,,,29,3,,249,0.2160908063252767,0
2051,,,267,8,,980,0.7300265630086263,0
2052,,,244,5,,1031,0.7724615176518758,0
2053,,,69,3,,287,0.21564634641011557,0
2054,,,111,7,,1236,0.9576854785283406,0
2055,,,171,4,,558,0.42080888748168943,0
2056,,,440,11,,5157,3.9647345741589866,0
2057,,,95,3,,343,0.2571867942810059,0
2058,,,310,9,,3427,2.513193194071452,0
2059,,,70,4,,447,0.32461695273717245,0
2060,,,63,4,,603,0.44024916489919025,0
2061,,,196,6,,1290,0.9100152174631755,0
2062,,,296,9,,1070,0.773072890440623,0
2063,,,77,4,,473,0.3658125003178914,0
2064,,,409,11,,3303,2.441150399049123,0
2065,,,389,15,,4657,4.005370167891185,0
2066,,,318,9,,3186,2.4111379822095236,0
2067,,,146,3,,247,0.20338666439056396,0
2068,,,100,3,,345,0.2556365966796875,0
2069,,,240,8,,2564,1.8352635780970254,0
2070,,,49,3,,249,0.20326210260391236,0
2071,,,268,14,,5708,4.269850647449493,0
2072,,,96,4,,212,0.15447628895441692,0
2073,,,297,9,,2255,1.647864584128062,0
2074,,,335,9,,3221,2.352394930521647,0
2075,,,67,3,,314,0.2392617106437683,0
2076,,,61,3,,293,0.2163546045621236,0
2077,,,302,10,,4190,3.184869873523712,0
2078,,,207,8,,1804,1.332657512029012,0
2079,,,40,3,,268,0.1906484643618266,0
2080,,,68,3,,270,0.21022457679112752,0
2081,,,45,3,,318,0.23599265019098917,0
2082,,,437,8,,2285,1.7541983485221864,0
2083,,,61,3,,314,0.2323034365971883,0
2084,,,279,8,,2457,1.8090666810671487,0
2085,,,139,5,,754,0.5552398244539897,0
2086,,,282,9,,774,0.592317263285319,0
2087,,,78,3,,298,0.22769823869069417,0
2088,,,232,5,,1023,0.7634173035621643,0
2089,,,81,4,,503,0.3758072853088379,0
2090,,,131,7,,1909,1.445298477013906,0
2091,,,344,9,,2901,2.147722363471985,0
2092,,,185,9,,2700,1.9309355696042378,0
2093,,,473,15,,1907,1.5449804782867431,0
2094,,,430,15,,5460,4.23598686059316,0
2095,,,67,4,,389,0.2827738046646118,0
2096,,,107,4,,524,0.38337251742680867,0
2097,,,42,3,,223,0.18974597851435343,0
2098,,,349,10,,4019,2.957506255308787,0
2099,,,66,3,,400,0.29172109365463256,0
2100,,,219,8,,1614,1.1702955603599547,0
2101,,,260,9,,499,0.3855372985204061,0
2102,,,191,12,,4304,3.2033389965693155,0
2103,,,281,8,,2000,1.475297784805298,0
2104,,,117,7,,594,0.4743648370107015,0
2105,,,271,8,,578,0.42991342147191364,0
2106,,,132,5,,968,0.7268405675888061,0
2107,,,246,7,,2094,1.5242002050081889,0
2108,,,170,8,,1953,1.5164266546567282,0
2109,,,176,9,,2864,2.0332006374994913,0
2110,,,255,9,,2971,2.1063517491022745,0
2111,,,168,8,,1663,1.2881156524022421,0
2112,,,61,3,,318,0.23641180197397868,0
2113,,,417,10,,4018,3.095142642656962,0
2114,,,44,2,,41,0.04000993569691976,0
2115,,,109,3,,283,0.22189146677652996,0
2116,,,269,8,,576,0.4383839726448059,0
2117,,,336,12,,5080,3.8602755387624104,0
2118,,,494,12,,5134,4.314801589647929,0
2119,,,107,7,,1104,0.8578160762786865,0
2120,,,63,3,,314,0.24382137854894,0
2121,,,357,11,,3325,2.5571688135464985,0
2122,,,88,4,,562,0.4241237203280131,0
2123,,,148,7,,1240,1.0305584033330282,0
2124,,,301,10,,4000,3.0566422581672668,0
2125,,,354,12,,5047,4.17478042046229,0
2126,,,754,10,,3148,2.6440328915913898,0
2127,,,81,3,,283,0.21214067141215007,0
2128,,,41,4,,462,0.357104237874349,0
2129,,,132,3,,321,0.25460637410481773,0
2130,,,163,4,,442,0.33517206509908043,0
2131,,,74,3,,251,0.20125136772791544,0
2132,,,27,3,,200,0.194429345925649,0
2133,,,253,7,,1880,1.41030353307724,0
2134,,,265,10,,1001,0.7637740294138591,0
2135,,,200,6,,1496,1.1356227318445842,0
2136,,,344,9,,3428,2.570351775487264,0
2137,,,65,3,,286,0.219784414768219,0
2138,,,277,9,,2318,1.7108727773030599,0
2139,,,284,8,,2476,1.8586640159289043,0
2140,,,163,9,,2300,1.8078964948654175,0
2141,,,33,3,,426,0.335312557220459,0
2142,,,227,8,,2233,1.7050387501716613,0
2143,,,275,7,,1233,0.9140516916910807,0
2144,,,288,8,,2750,2.0397673567136128,0
2145,,,144,5,,859,0.6219876686731974,0
2146,,,216,5,,1014,0.7191228906313578,0
2147,,,70,3,,352,0.2519535263379415,0
2148,,,311,11,,1355,0.9799413919448853,0
2149,,,237,8,,1702,1.1952996015548707,0
2150,,,68,3,,318,0.22171900272369385,0
2151,,,344,7,,1545,1.124402606487274,0
2152,,,124,5,,728,0.5831175367037456,0
2153,,,278,10,,3657,2.7499773859977723,0
2154,,,166,3,,239,0.21209903955459594,0
2155,,,325,10,,3841,2.918387707074483,0
2156,,,227,8,,1694,1.235130790869395,0
2157,,,29,2,,87,0.06826496521631877,0
2158,,,82,3,,355,0.25394150813420613,0
2159,,,93,4,,149,0.11642601490020751,0
2160,,,69,3,,309,0.2227197329203288,0
2161,,,35,3,,100,0.08469941616058349,0
2162,,,533,14,,5444,4.352635888258616,0
2163,,,369,9,,3187,2.3642871896425883,0
2164,,,63,3,,343,0.24849327405293783,0
2165,,,279,8,,2429,1.850937577088674,0
2166,,,319,10,,2295,1.7879833062489827,0
2167,,,207,9,,1793,1.3758816679318746,0
2168,,,413,12,,5786,4.599034031232198,0
2169,,,347,10,,3938,3.060413340727488,0
2170,,,234,7,,1760,1.3371975859006247,0
2171,,,171,4,,684,0.5229697863260905,0
2172,,,93,4,,502,0.38096574942270917,0
2173,,,63,3,,303,0.25156171719233195,0
2174,,,277,8,,1662,1.2268417398134868,0
2175,,,382,10,,3996,2.9894668022791544,0
2176,,,103,3,,287,0.2193384329477946,0
2177,,,329,9,,2905,2.121739995479584,0
2178,,,42,4,,327,0.2976890881856283,0
2179,,,310,10,,786,0.5838011304537455,0
2180,,,125,7,,1147,0.864386785030365,0
2181,,,497,13,,4922,3.981800071398417,0
2182,,,326,9,,3186,2.3157368063926698,0
2183,,,247,8,,2466,1.7609801530838012,0
2184,,,284,8,,2458,1.7856678048769632,0
2185,,,83,4,,536,0.3902126948038737,0
2186,,,60,3,,400,0.2931457877159119,0
2187,,,309,9,,3181,2.351692875226339,0
2188,,,38,3,,262,0.19428058862686157,0
2189,,,166,5,,486,0.35837411483128867,0
2190,,,139,7,,958,0.7347851951917013,0
2191,,,303,9,,3169,2.3034282088279725,0
2192,,,132,3,,314,0.24145726760228475,0
2193,,,230,8,,1551,1.1164385517438253,0
2194,,,58,2,,175,0.12682486375172933,0
2195,,,412,13,,6022,4.746918960412343,0
2196,,,248,8,,1694,1.2215557058652242,0
2197,,,72,3,,282,0.2218140959739685,0
2198,,,290,9,,3071,2.2442046801249185,0
2199,,,256,8,,464,0.34111516873041786,0
2200,,,67,3,,338,0.24608675638834634,0
2201,,,38,2,,138,0.10073705514272054,0
2202,,,92,3,,287,0.20931121905644734,0
2203,,,171,6,,1017,0.7677892923355103,0
2204,,,312,10,,2703,1.9454518715540567,0
2205,,,253,9,,1007,0.7147548794746399,0
2206,,,72,4,,410,0.34671325286229454,0
2207,,,166,5,,907,0.6559451381365459,0
2208,,,193,8,,2312,1.6499883651733398,0
2209,,,116,6,,1349,0.9756813804308574,0
2210,,,47,4,,504,0.36583602825800576,0
2211,,,77,5,,777,0.5566792726516724,0
2212,,,264,10,,1838,1.374987041950226,0
2213,,,57,4,,620,0.4708233714103699,0
2214,,,114,5,,223,0.17205251455307008,0
2215,,,176,10,,3025,2.321507453918457,0
2216,,,54,5,,882,0.6687029600143433,0
2217,,,72,6,,700,0.5340753515561422,0
2218,,,60,3,,287,0.2292838176091512,0
2219,,,155,3,,343,0.2576774994532267,0
2220,,,268,8,,1268,0.9336680610974629,0
2221,,,236,9,,1683,1.2438230911890666,0
2222,,,92,4,,499,0.3659209688504537,0
2223,,,66,3,,287,0.2054670532544454,0
2224,,,60,3,,318,0.2286007324854533,0
2225,,,293,9,,1074,0.7766727487246196,0
2226,,,76,2,,231,0.1711084246635437,0
2227,,,307,9,,3144,2.3091541171073913,0
2228,,,338,9,,3221,2.4013073762257893,0
2229,,,101,4,,469,0.3967939535776774,0
2230,,,246,7,,727,0.5386263569196065,0
2231,,,404,10,,4005,3.0213252544403075,0
2232,,,74,3,,365,0.28799261649449664,0
2233,,,83,4,,679,0.4939209739367167,0
2234,,,93,3,,314,0.2299105922381083,0
2235,,,62,3,,262,0.19224865436553956,0
2236,,,40,2,,82,0.06532615423202515,0
2237,,,495,12,,1387,1.0895554741223654,0
2238,,,194,7,,1556,1.1215202569961549,0
2239,,,81,3,,318,0.2335724155108134,0
2240,,,271,8,,2470,1.802630349000295,0
2241,,,91,3,,262,0.19174006779988606,0
2242,,,157,8,,1934,1.4880424896876017,0
2243,,,285,8,,2472,1.8080578883488974,0
2244,,,20,1,,49,0.04349975983301799,0
2245,,,258,7,,816,0.6001214623451233,0
2246,,,156,3,,287,0.21266491810480753,0
2247,,,343,11,,4580,3.4027181108792623,0
2248,,,93,5,,636,0.4913995901743571,0
2249,,,49,2,,179,0.15005936622619628,0
2250,,,64,3,,400,0.29095372358957927,0
2251,,,50,3,,316,0.22409459749857585,0
2252,,,36,3,,262,0.19140615065892538,0
2253,,,119,4,,432,0.3581002275149027,0
2254,,,243,9,,2016,1.4475428938865662,0
2255,,,334,9,,3195,2.326114896933238,0
2256,,,147,8,,2046,1.5383740703264872,0
2257,,,117,5,,792,0.6026461521784464,0
2258,,,201,8,,1523,1.1186947186787923,0
2259,,,52,3,,252,0.20758219162623087,0
2260,,,100,5,,726,0.5717424114545187,0
2261,,,56,2,,82,0.06682525078455608,0
2262,,,71,4,,517,0.38373502492904665,0
2263,,,314,7,,1884,1.3944640199343363,0
2264,,,745,13,,1318,1.065072500705719,0
2265,,,281,8,,2445,1.7760018348693847,0
2266,,,326,9,,2197,1.5576585253079733,0
2267,,,381,7,,1547,1.152656360467275,0
2268,,,78,3,,287,0.211446742216746,0
2269,,,331,9,,3203,2.3311790188153583,0
2270,,,297,9,,2940,2.1453563531239825,0
2271,,,38,3,,237,0.1739084800084432,0
2272,,,142,6,,1220,0.9568942983945211,0
2273,,,95,5,,695,0.5072210550308227,0
2274,,,403,10,,3868,2.8865114370981853,0
2275,,,70,2,,82,0.06800291935602824,0
2276,,,314,10,,1231,1.0314957737922668,0
2277,,,335,9,,896,0.7077288349469503,0
2278,,,113,5,,856,0.6207318862279256,0
2279,,,357,10,,3341,2.4566501140594483,0
2280,,,61,3,,314,0.23193095127741495,0
2281,,,143,9,,2428,1.7911043961842854,0
2282,,,132,3,,314,0.22771209081013996,0
2283,,,424,10,,3153,2.3496329228083295,0
2284,,,51,3,,193,0.18614999850591024,0
2285,,,67,3,,405,0.29249207576115926,0
2286,,,285,12,,2083,1.5214328646659852,0
2287,,,348,10,,4027,3.0417232275009156,0
2288,,,68,3,,338,0.2652216116587321,0
2289,,,162,8,,2015,1.6563127597173055,0
2290,,,292,9,,1632,1.2578536550203958,0
2291,,,248,9,,3150,2.3820778449376423,0
2292,,,45,5,,894,0.6682766278584799,0
2293,,,269,10,,1148,0.9024735490481058,0
2294,,,383,11,,3939,3.2129486997922263,0
2295,,,281,10,,3654,2.740354537963867,0
2296,,,209,8,,2305,1.729729183514913,0
2297,,,278,10,,3709,2.904691052436829,0
2298,,,269,8,,2508,1.9751855929692586,0
2299,,,91,3,,282,0.2426435947418213,0
2300,,,63,6,,1034,0.779295555750529,0
2301,,,199,8,,1419,1.1165043830871582,0
2302,,,181,6,,823,0.6937732259432475,0
2303,,,35,3,,266,0.20753876765569051,0
2304,,,89,4,,442,0.361444898446401,0
2305,,,337,9,,1065,0.8241599043210347,0
2306,,,302,8,,854,0.6621984442075094,0
2307,,,324,9,,2910,2.2521936893463135,0
2308,,,276,8,,1732,1.3130534410476684,0
2309,"public void Test891244() throws Throwable
{
    String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a.data;
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void Test891244() throws Throwable
{
    String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a.data;
    if (data != null)
    {
        String rooms[] = data.split(""-"");
        int successCount = 0;
        Connection conn = null;
        Statement sslReference = null;
        try
        {
            conn = IO.getDBConnection();
            sslReference = conn.createStatement();
            for (int length = 0; length < rooms.length; length++)
            {
                sslReference.addBatch(""update users set hitcount=hitcount+1 where name='"" + rooms[length] + ""'"");
            }
            int resultsArray[] = sslReference.executeBatch();
            for (int length = 0; length < rooms.length; length++)
            {
                if (resultsArray[length] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + rooms.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sslReference != null)
                {
                    sslReference.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (conn != null)
                {
                    conn.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",265,9,"sqlStatement:sslReference,names:rooms,dbConnection:conn,i:length,",1480,1.2293690959612529,Beam
2310,,,270,10,,3256,2.549168042341868,0
2311,,,88,4,,399,0.3525558829307556,0
2312,,,57,3,,375,0.28576318820317587,0
2313,,,136,7,,1202,0.900966759522756,0
2314,,,188,8,,1430,1.0477173288663229,0
2315,,,64,2,,155,0.1311895728111267,0
2316,,,108,3,,318,0.2324593981107076,0
2317,,,357,10,,3979,2.8891118288040163,0
2318,,,345,13,,3378,2.5939359029134113,0
2319,,,97,4,,536,0.3909606377283732,0
2320,,,235,9,,1716,1.2851532061894735,0
2321,,,79,3,,283,0.21553990840911866,0
2322,,,62,3,,405,0.30275440216064453,0
2323,,,63,4,,505,0.3848663647969564,0
2324,,,146,9,,1921,1.5618722875912985,0
2325,,,350,9,,3213,2.4667184273401896,0
2326,,,219,6,,939,0.7332700252532959,0
2327,,,202,10,,3255,2.4643700242042543,0
2328,,,42,4,,378,0.3004955768585205,0
2329,,,262,8,,1934,1.4738755623499553,0
2330,,,121,4,,440,0.4108134667078654,0
2331,,,261,7,,795,0.6347378253936767,0
2332,,,62,3,,314,0.24940083026885987,0
2333,,,36,3,,364,0.3064888834953308,0
2334,,,119,5,,699,0.576091980934143,0
2335,,,369,9,,3494,2.8135891954104104,0
2336,,,251,8,,988,0.7878605723381042,0
2337,,,260,8,,894,0.6996287902196249,0
2338,,,200,8,,1506,1.184210487206777,0
2339,,,497,12,,1298,1.0819905241330465,0
2340,,,258,8,,1192,0.9462176720301311,0
2341,,,250,8,,2365,1.958046277364095,0
2342,,,291,8,,2470,1.9730167547861734,0
2343,,,40,4,,508,0.41068731546401976,0
2344,,,51,3,,318,0.2570300340652466,0
2345,,,348,7,,1493,1.229144004980723,0
2346,,,244,11,,3759,3.0423630436261493,0
2347,,,164,9,,2543,2.085899305343628,0
2348,,,266,8,,875,0.7011931578318278,0
2349,,,326,7,,1696,1.303167188167572,0
2350,,,69,3,,119,0.09654716650644939,0
2351,,,369,9,,525,0.4181788325309753,0
2352,,,385,10,,2786,2.1736425081888835,0
2353,,,214,5,,1076,0.8232212543487549,0
2354,,,75,4,,407,0.31570812066396076,0
2356,,,327,8,,1668,1.2825342178344727,0
2357,,,209,8,,2484,1.9294445991516114,0
2358,,,355,12,,4089,3.5943185567855833,0
2359,,,291,8,,522,0.4242521047592163,0
2360,,,347,16,,4368,3.695825755596161,0
2361,,,61,3,,343,0.2800274173418681,0
2362,,,141,8,,1503,1.253887903690338,0
2363,"private void Test496682() throws Throwable
{
    String password;
    if (privateTrue)
    {
        password = """";  
        {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                password = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (socket != null)
                    {
                        socket.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
                }
                try
                {
                    if (listener != null)
                    {
                        listener.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
                }
            }
        }
    }
    else
    {
        password = null;
    }
    if (privateTrue)
    {
        if (password != null)
        {
            {
                Cipher aesCipher = Cipher.getInstance(""AES"");
                SecretKeySpec secretKeySpec = new SecretKeySpec(""ABCDEFGHABCDEFGH"".getBytes(""UTF-8""), ""AES"");
                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
                password = new String(aesCipher.doFinal(password.getBytes(""UTF-8"")), ""UTF-8"");
            }
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try
            {
                connection = DriverManager.getConnection(""data-url"", ""root"", password);
                preparedStatement = connection.prepareStatement(""select * from test_table"");
                resultSet = preparedStatement.executeQuery();
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error with database connection"", exceptSql);
            }
            finally
            {
                try
                {
                    if (resultSet != null)
                    {
                        resultSet.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
                }
                try
                {
                    if (preparedStatement != null)
                    {
                        preparedStatement.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
                }
                try
                {
                    if (connection != null)
                    {
                        connection.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
                }
            }
        }
    }
}","private void start() throws Throwable
{
    String slave;
    if (publicTrue)
    {
        slave = """";  
        {
            ServerSocket server = null;
            Socket secure = null;
            BufferedReader readerBufferer = null;
            InputStreamReader readerSourceStream = null;
            try
            {
                server = new ServerSocket(39543);
                secure = server.accept();
                readerSourceStream = new InputStreamReader(secure.getInputStream(), ""UTF-8"");
                readerBufferer = new BufferedReader(readerSourceStream);
                slave = readerBufferer.readLine();
            }
            catch (IOException exceptRI)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptRI);
            }
            finally
            {
                try
                {
                    if (readerBufferer != null)
                    {
                        readerBufferer.close();
                    }
                }
                catch (IOException exceptRI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptRI);
                }
                try
                {
                    if (readerSourceStream != null)
                    {
                        readerSourceStream.close();
                    }
                }
                catch (IOException exceptRI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptRI);
                }
                try
                {
                    if (secure != null)
                    {
                        secure.close();
                    }
                }
                catch (IOException exceptRI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptRI);
                }
                try
                {
                    if (server != null)
                    {
                        server.close();
                    }
                }
                catch (IOException exceptRI)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptRI);
                }
            }
        }
    }
    else
    {
        slave = null;
    }
    if (publicTrue)
    {
        if (slave != null)
        {
            {
                Cipher aesAoder = Cipher.getInstance(""AES"");
                SecretKeySpec secretSignSPEC = new SecretKeySpec(""ABCDEFGHABCDEFGH"".getBytes(""UTF-8""), ""AES"");
                aesAoder.init(Cipher.DECRYPT_MODE, secretSignSPEC);
                slave = new String(aesAoder.doFinal(slave.getBytes(""UTF-8"")), ""UTF-8"");
            }
            Connection statement = null;
            PreparedStatement sql = null;
            ResultSet resultSet = null;
            try
            {
                statement = DriverManager.getConnection(""data-url"", ""root"", slave);
                sql = statement.prepareStatement(""select * from test_table"");
                resultSet = sql.executeQuery();
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error with database connection"", exceptSql);
            }
            finally
            {
                try
                {
                    if (resultSet != null)
                    {
                        resultSet.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
                }
                try
                {
                    if (sql != null)
                    {
                        sql.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
                }
                try
                {
                    if (statement != null)
                    {
                        statement.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
                }
            }
        }
    }
}",544,13,"privateTrue:publicTrue,password:slave,aesCipher:aesAoder,preparedStatement:sql,connection:statement,readerBuffered:readerBufferer,socket:secure,secretKeySpec:secretSignSPEC,readerInputStream:readerSourceStream,listener:server,exceptIO:exceptRI,Test496682:start,",5006,4.74346977074941,Beam
2364,,,103,4,,109,0.09353087345759074,0
2365,,,304,9,,3080,2.4707024892171225,0
2366,,,187,8,,2045,1.633389135201772,0
2367,,,155,9,,2327,1.9769070903460184,0
2368,,,288,8,,2724,2.1438621799151103,0
2369,,,45,5,,894,0.7483069658279419,0
2370,,,334,9,,2001,1.617816189924876,0
2371,,,92,3,,283,0.2280875007311503,0
2372,,,45,4,,405,0.3222165465354919,0
2373,,,83,3,,287,0.23061433633168538,0
2374,,,343,9,,3181,2.5782965262730917,0
2375,,,126,7,,1334,1.0666326800982158,0
2376,,,317,10,,4112,3.285568952560425,0
2377,,,117,6,,302,0.24735828240712485,0
2378,,,300,8,,897,0.7112014651298523,0
2379,,,123,5,,700,0.5860889315605163,0
2380,,,320,6,,958,0.7678975224494934,0
2381,,,287,7,,743,0.6000802119572958,0
2382,,,36,3,,511,0.40440413951873777,0
2383,,,215,7,,1797,1.3886151313781738,0
2384,,,166,5,,907,0.7217596133550008,0
2385,,,370,9,,1076,0.8621641318003337,0
2386,,,444,12,,5751,4.681192489465078,0
2387,,,116,4,,538,0.43424506584803263,0
2388,,,234,6,,1536,1.2151124636332193,0
2389,,,304,9,,2101,1.6759511669476828,0
2390,,,100,5,,687,0.6091983437538147,0
2391,,,153,5,,666,0.5673622608184814,0
2392,,,483,17,,5138,4.706573883692424,0
2393,,,362,10,,989,0.776411525408427,0
2394,,,339,9,,3173,2.5525134166081744,0
2395,,,331,7,,1854,1.5063978711764017,0
2396,,,326,9,,2669,2.13310223420461,0
2397,,,88,3,,255,0.21776936451594034,0
2398,,,417,10,,3954,3.167865812778473,0
2399,,,111,6,,650,0.5162847836812338,0
2400,,,45,3,,259,0.224953556060791,0
2401,,,97,3,,343,0.2755019466082255,0
2402,,,120,4,,493,0.3867256959279378,0
2403,,,300,10,,2160,1.6811036467552185,0
2404,,,252,10,,3428,2.7536054968833925,0
2405,,,284,8,,2473,1.901436197757721,0
2406,,,286,10,,3273,2.493640355269114,0
2407,,,90,3,,287,0.22717279593149822,0
2408,,,446,10,,3457,2.9905668020248415,0
2409,,,282,8,,2480,1.9096194585164388,0
2410,,,118,3,,117,0.09157910346984863,0
2411,,,37,5,,549,0.4626228411992391,0
2412,,,50,4,,537,0.4213535944620768,0
2413,,,55,4,,502,0.39941752354303994,0
2414,,,111,3,,116,0.09553853273391724,0
2415,,,180,8,,1576,1.246730105082194,0
2416,,,157,8,,1711,1.4139454046885171,0
2417,,,145,8,,1161,0.9303393125534057,0
2418,,,74,4,,437,0.3713616530100505,0
2419,,,109,4,,540,0.4236546754837036,0
2420,,,104,3,,283,0.22303704023361207,0
2421,,,321,8,,2245,1.7068516532580058,0
2422,,,47,5,,863,0.6682797233263652,0
2423,,,257,7,,2037,1.5504686514536539,0
2424,,,302,10,,1846,1.4741791645685831,0
2425,,,121,4,,612,0.49232795238494875,0
2426,,,154,5,,827,0.7284064730008443,0
2427,,,141,8,,1947,1.6631188154220582,0
2428,,,273,8,,2472,1.9257118940353393,0
2429,,,400,11,,2411,1.7999911228815715,0
2430,,,272,14,,4385,3.245628094673157,0
2431,,,77,3,,188,0.1494726260503133,0
2432,,,310,10,,2031,1.4768725872039794,0
2433,,,44,4,,472,0.36972055832544964,0
2434,,,49,3,,214,0.2104932149251302,0
2435,,,275,9,,3203,2.4622718771298726,0
2436,,,116,5,,442,0.3757011294364929,0
2437,,,45,3,,365,0.2956405997276306,0
2438,,,32,1,,49,0.047555764516194664,0
2439,,,284,9,,3181,2.533226958910624,0
2440,,,211,13,,5015,3.909218668937683,0
2441,,,299,10,,4011,3.10342831214269,0
2442,,,210,9,,3175,2.5115599711736043,0
2443,,,163,8,,1915,1.5786647558212281,0
2444,,,274,8,,2688,2.0795191884040833,0
2445,,,186,10,,3346,2.5881826917330426,0
2446,,,224,8,,1839,1.4240762829780578,0
2447,,,294,8,,1937,1.5185813188552857,0
2448,,,421,10,,4019,3.183912225564321,0
2449,,,22,1,,49,0.042821804682413735,0
2450,,,58,3,,314,0.23574350674947103,0
2451,,,469,9,,2506,1.899294630686442,0
2452,,,329,9,,2130,1.5346040368080138,0
2453,,,341,17,,5875,4.7503509799639385,0
2454,,,253,8,,2635,2.141805656750997,0
2455,,,321,10,,2804,2.2640701015790303,0
2456,,,96,3,,400,0.32382140556971234,0
2457,,,551,12,,1351,1.0939543883005778,0
2458,,,48,2,,176,0.14496459563573202,0
2459,,,238,7,,1505,1.0939255277315776,0
2460,,,226,9,,1786,1.2767576813697814,0
2461,,,128,3,,106,0.08046824137369792,0
2462,,,291,8,,2164,1.585761841138204,0
2463,,,47,3,,400,0.288650902112325,0
2464,,,285,9,,1580,1.1365912755330403,0
2465,,,112,6,,606,0.4616574247678121,0
2466,,,147,8,,2019,1.488603985309601,0
2467,,,66,4,,305,0.21390133301417033,0
2468,,,132,7,,1816,1.3277890920639037,0
2469,,,279,8,,2472,1.8035579045613608,0
2470,,,255,7,,1888,1.4447872281074523,0
2471,,,176,8,,1945,1.4869468887646993,0
2472,,,98,4,,528,0.48247639735539755,0
2473,,,82,3,,258,0.23943809270858765,0
2474,,,244,9,,1605,1.2661927779515585,0
2475,,,254,9,,1061,0.8902258197466533,0
2476,,,81,3,,300,0.2470912019411723,0
2477,,,153,5,,806,0.6568781773249308,0
2478,,,220,8,,1595,1.2397138198216757,0
2479,,,60,4,,610,0.46715293725331625,0
2480,,,104,4,,566,0.43051445484161377,0
2481,,,61,4,,612,0.4752403457959493,0
2482,,,55,3,,324,0.2535652677218119,0
2483,,,131,7,,1155,0.981319801012675,0
2484,,,160,5,,638,0.5060926516850789,0
2485,,,124,5,,474,0.3804365118344625,0
2486,,,56,2,,219,0.18111209074656168,0
2487,,,346,9,,3151,2.4044749259948732,0
2488,,,86,4,,376,0.3311728080113729,0
2489,,,61,4,,591,0.41949424346288045,0
2490,,,91,3,,399,0.3087345043818156,0
2491,,,157,8,,1960,1.5936803499857584,0
2492,,,264,10,,3521,2.628271484375,0
2493,,,265,9,,2039,1.5381791949272157,0
2494,,,273,8,,2453,1.9309213121732076,0
2495,,,291,12,,3663,2.9665300607681275,0
2496,,,280,9,,3139,2.475653596719106,0
2497,,,311,10,,3045,2.3022842327753703,0
2498,,,51,3,,318,0.23564234972000123,0
2499,,,86,3,,251,0.19649606943130493,0
2500,,,63,3,,293,0.21110889911651612,0
2501,,,96,5,,753,0.5386367360750834,0
2502,,,83,4,,543,0.4318131407101949,0
2503,,,67,4,,524,0.40019219319025673,0
2504,,,63,3,,293,0.20851441224416098,0
2505,,,256,9,,2385,1.7001635352770488,0
2506,,,90,4,,406,0.30954057375590005,0
2507,,,233,6,,1353,0.9767518281936646,0
2508,,,549,13,,7124,5.72490656375885,0
2509,,,66,4,,374,0.28527448972066244,0
2510,,,141,5,,655,0.49990651607513426,0
2511,,,267,7,,2011,1.4991079171498616,0
2512,,,198,9,,3098,2.2890600403149923,0
2513,,,464,11,,977,0.7297154068946838,0
2514,,,252,9,,500,0.36980329354604086,0
2515,,,148,6,,1051,0.7455475807189942,0
2516,,,53,5,,825,0.6350730061531067,0
2517,,,281,7,,1479,1.093990961710612,0
2518,,,235,8,,922,0.7498451590538024,0
2519,,,245,8,,560,0.4665651122728984,0
2520,,,286,9,,3202,2.475109326839447,0
2521,,,419,11,,2909,2.334348746140798,0
2522,,,79,4,,595,0.4920165499051412,0
2523,,,89,3,,282,0.2305733601252238,0
2524,,,195,6,,1014,0.7882958730061849,0
2525,,,140,11,,3283,2.88131312529246,0
2526,"private void Test795409(String data ) throws Throwable
{
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","private void Test795409(String data ) throws Throwable
{
    Connection bbSocket = null;
    Statement sslQuery = null;
    ResultSet resultSet = null;
    try
    {
        bbSocket = IO.getDBConnection();
        sslQuery = bbSocket.createStatement();
        resultSet = sslQuery.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslQuery != null)
            {
                sslQuery.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (bbSocket != null)
            {
                bbSocket.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",211,6,"sqlStatement:sslQuery,dbConnection:bbSocket,",125,0.09981834888458252,Beam
2527,,,55,3,,286,0.23874858220418294,0
2528,,,54,2,,175,0.13879047632217406,0
2529,,,139,8,,1554,1.2696423888206483,0
2530,,,292,9,,3185,2.2981929103533427,0
2531,,,121,8,,1860,1.4688559532165528,0
2532,,,256,8,,874,0.6748114705085755,0
2533,,,111,3,,287,0.22944103876749675,0
2534,,,156,7,,1799,1.3802000204722087,0
2535,,,141,5,,799,0.7043691953023274,0
2536,,,264,8,,988,0.7490592360496521,0
2537,,,52,2,,131,0.1219385822614034,0
2538,,,72,3,,318,0.2512695590655009,0
2539,,,309,9,,3193,2.4773314674695333,0
2540,,,452,12,,5527,4.344189683596293,0
2541,,,171,9,,2496,1.7955352505048117,0
2542,,,270,9,,3181,2.2845367948214212,0
2543,,,505,12,,5402,4.174627693494161,0
2544,,,257,8,,2496,1.7707421938578287,0
2545,,,98,3,,283,0.21200260321299236,0
2546,,,262,8,,943,0.6835507829984029,0
2547,,,242,8,,1912,1.358921500047048,0
2548,,,108,4,,524,0.3952990253766378,0
2549,,,299,9,,2404,1.707160739103953,0
2550,,,105,6,,1149,0.8146217425664266,0
2551,,,155,9,,2462,1.8017096161842345,0
2552,,,280,8,,2372,1.707098897298177,0
2553,,,247,9,,1094,0.810571547349294,0
2554,,,104,3,,318,0.22868574062983196,0
2555,,,59,3,,314,0.24670371214548747,0
2556,,,295,10,,4252,3.1316502412160236,0
2557,,,87,5,,757,0.5687321543693542,0
2558,,,448,11,,3512,2.551051314671834,0
2559,,,65,3,,293,0.2179525335629781,0
2560,,,164,8,,1696,1.2990738908449808,0
2561,,,109,3,,321,0.2282289425532023,0
2562,,,79,5,,786,0.573207946618398,0
2563,,,117,3,,287,0.20515741109848024,0
2564,,,193,8,,2084,1.4619127710660298,0
2565,,,60,3,,314,0.2286612908045451,0
2566,,,62,3,,216,0.19210184812545777,0
2567,,,138,8,,1832,1.343187447388967,0
2568,,,206,11,,3947,2.8220937649408975,0
2569,,,56,5,,582,0.5208442489306132,0
2570,,,120,6,,1172,0.875382395585378,0
2571,,,146,3,,343,0.2511090715726217,0
2572,,,281,8,,2504,1.885484254360199,0
2573,,,254,9,,2756,2.0361147125562034,0
2574,,,278,9,,2275,1.596812089284261,0
2575,,,253,5,,299,0.21552497148513794,0
2576,,,318,10,,3992,2.852329989274343,0
2577,,,146,5,,810,0.6072274208068847,0
2578,,,262,6,,339,0.24256295760472615,0
2579,,,63,2,,159,0.12313536405563355,0
2580,,,65,3,,343,0.2522430499394735,0
2581,,,56,4,,532,0.38632238705952965,0
2582,,,60,4,,517,0.38603522777557375,0
2583,,,313,10,,3989,2.970686376094818,0
2584,,,366,13,,5381,4.232430406411489,0
2585,,,434,12,,5196,4.231898748874665,0
2586,,,135,8,,1511,1.2357003927230834,0
2587,,,121,8,,1477,1.1447092413902282,0
2588,,,161,7,,1305,1.0207717657089233,0
2589,,,121,5,,792,0.6343583822250366,0
2590,,,45,3,,279,0.23451894919077557,0
2591,,,49,2,,219,0.18102238575617471,0
2592,,,113,6,,1004,0.7563031117121378,0
2593,,,308,9,,3109,2.382180905342102,0
2594,,,58,3,,287,0.22129127184549968,0
2595,,,95,5,,985,0.7568650404612224,0
2596,,,110,3,,314,0.24387293656667072,0
2597,,,56,3,,282,0.23929086128870647,0
2598,,,180,7,,1864,1.328395148118337,0
2599,,,304,10,,567,0.4104172348976135,0
2600,,,127,3,,283,0.20954751173655192,0
2601,,,160,8,,2160,1.5815317630767822,0
2602,,,116,4,,379,0.2839070200920105,0
2603,,,309,9,,3190,2.3313037037849424,0
2604,,,162,7,,1864,1.3390308539072673,0
2605,,,327,10,,3851,2.7957734068234763,0
2606,,,291,8,,1385,0.9842586914698283,0
2607,,,40,3,,350,0.2574302832285563,0
2608,,,225,6,,1501,1.058479650815328,0
2609,,,320,8,,2504,1.7751827200253805,0
2610,,,110,3,,283,0.21176387071609498,0
2611,,,94,4,,492,0.35219993591308596,0
2612,,,52,3,,314,0.23227211634318035,0
2613,,,62,5,,648,0.5022074818611145,0
2614,,,52,2,,179,0.1544656236966451,0
2615,,,308,10,,2288,1.6584011316299438,0
2616,,,103,4,,500,0.42678444385528563,0
2617,,,155,7,,1450,1.1363089720408122,0
2618,,,82,4,,511,0.3720526973406474,0
2619,,,336,10,,1142,0.8230019052823384,0
2620,,,61,3,,405,0.3077853282292684,0
2621,,,87,5,,726,0.6088483889897665,0
2622,,,158,9,,2602,2.0065699179967242,0
2623,,,22,2,,64,0.06329148213068644,0
2624,,,217,6,,1005,0.7796427329381307,0
2625,,,297,8,,983,0.7605799198150635,0
2626,,,121,5,,252,0.2064175049463908,0
2627,,,71,4,,526,0.4171523809432983,0
2628,,,355,10,,3951,3.1953107674916583,0
2629,,,69,3,,286,0.24815374215443928,0
2630,,,394,10,,576,0.4764555056889852,0
2631,,,147,8,,1663,1.3512020786603292,0
2632,,,156,5,,888,0.6987437208493551,0
2633,,,323,9,,2414,1.9200789093971253,0
2634,,,370,11,,3526,3.0588992396990458,0
2635,,,125,6,,1461,1.161491330464681,0
2636,,,292,11,,1271,1.0264949162801107,0
2637,,,74,3,,314,0.24916683435440062,0
2638,,,110,6,,743,0.6325212836265564,0
2639,,,77,6,,1152,0.9184123476346334,0
2640,,,86,3,,318,0.2489310582478841,0
2641,,,66,4,,513,0.4014792561531067,0
2642,,,475,9,,2614,2.1502243796984355,0
2643,,,125,6,,1354,1.0057541171709696,0
2644,,,298,6,,946,0.7571036299069722,0
2645,,,71,3,,405,0.33354959487915037,0
2646,,,45,2,,207,0.16788549820582072,0
2647,,,72,5,,668,0.5746968626976013,0
2648,,,193,8,,2328,1.7889034628868103,0
2649,,,97,6,,1292,1.0067010958989462,0
2650,,,35,2,,163,0.13581742842992148,0
2651,,,89,2,,173,0.1361918052037557,0
2652,,,285,8,,799,0.6364952286084493,0
2653,,,79,4,,509,0.40894283056259156,0
2654,,,363,11,,4720,3.7756941239039103,0
2655,,,360,10,,1236,0.9894641200701396,0
2656,,,218,8,,2544,2.0310575087865193,0
2657,,,167,5,,693,0.5735982457796732,0
2658,,,249,7,,1448,1.1365054686864218,0
2659,,,87,5,,823,0.6607391595840454,0
2660,,,315,9,,2974,2.3659706234931948,0
2661,,,198,7,,1142,0.8812146385510763,0
2662,,,224,7,,1783,1.3956408818562827,0
2663,,,43,5,,595,0.4848422288894653,0
2664,,,39,3,,343,0.28494404554367064,0
2665,,,86,4,,630,0.5074023127555847,0
2666,,,184,8,,2142,1.7181397000948588,0
2668,,,139,8,,2042,1.654645578066508,0
2669,,,278,8,,2500,1.980717674891154,0
2670,,,137,6,,1144,0.8982025980949402,0
2671,,,212,7,,682,0.5388780474662781,0
2672,,,373,9,,3217,2.5552433848381044,0
2673,,,57,4,,580,0.4885355631510417,0
2674,,,344,10,,3930,3.157524049282074,0
2675,,,315,9,,2966,2.3242338339487714,0
2676,,,45,2,,88,0.07402371565500895,0
2677,,,32,2,,176,0.15497071345647176,0
2678,,,242,7,,988,0.7991509079933167,0
2679,,,429,12,,551,0.5366761406262716,0
2680,,,126,3,,405,0.32120024363199867,0
2681,,,100,3,,318,0.256574010848999,0
2682,,,247,8,,491,0.38421895503997805,0
2683,,,165,5,,1011,0.8096927722295125,0
2684,,,450,11,,4486,3.5885995109875997,0
2685,,,85,4,,339,0.2643362879753113,0
2686,,,188,8,,1375,1.1227773745854697,0
2687,,,182,8,,1975,1.657502814133962,0
2688,,,62,2,,159,0.1442452549934387,0
2689,,,243,6,,1541,1.202028512954712,0
2690,,,88,3,,318,0.2516223907470703,0
2691,,,63,3,,350,0.27671110232671103,0
2692,,,278,6,,1226,0.9529807527860006,0
2693,,,166,5,,447,0.3737995266914368,0
2694,,,267,8,,2448,1.9358965516090394,0
2695,,,301,9,,835,0.6676697572072346,0
2696,,,338,9,,3203,2.515083336830139,0
2697,,,59,3,,318,0.24416657288869223,0
2698,,,344,9,,3126,2.454344399770101,0
2699,,,282,11,,4184,3.2099048932393393,0
2700,,,131,9,,1582,1.3124044775962829,0
2701,,,360,13,,5626,4.511367015043894,0
2702,,,259,7,,1864,1.428816839059194,0
2703,,,449,14,,5335,4.305921498934428,0
2704,,,316,9,,3041,2.3861651619275412,0
2705,,,271,8,,2493,1.9695588866869609,0
2706,,,84,3,,452,0.3592202186584473,0
2707,,,170,7,,1196,0.9420095006624858,0
2708,,,231,8,,1566,1.305684999624888,0
2709,,,260,8,,1575,1.2572554349899292,0
2710,,,77,3,,343,0.27781928380330406,0
2711,,,35,2,,163,0.1333625356356303,0
2712,,,76,4,,684,0.5339162270228068,0
2713,,,147,5,,839,0.6734953761100769,0
2714,,,296,9,,3171,2.552933156490326,0
2715,,,282,9,,965,0.7726323962211609,0
2716,"private void Test682728(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data;
    if (privateTrue)
    {
        data = """";  
        {
            URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try
            {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8"");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBuffered != null)
                    {
                        readerBuffered.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStream != null)
                    {
                        readerInputStream.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
            }
        }
    }
    else
    {
        data = null;
    }
    if (privateTrue)
    {
        if (data != null)
        {
            Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(data, ""UTF-8""));
            response.addCookie(cookieSink);
        }
    }
}","private void process(HttpServletRequest query, HttpServletResponse document) throws Throwable
{
    String ata;
    if (publicTrue)
    {
        ata = """";  
        {
            URLConnection webChannel = (new URL(""http://www.example.org/"")).openConnection();
            BufferedReader readerOrdared = null;
            InputStreamReader readerIPStream = null;
            try
            {
                readerIPStream = new InputStreamReader(webChannel.getInputStream(), ""UTF-8"");
                readerOrdared = new BufferedReader(readerIPStream);
                ata = readerOrdared.readLine();
            }
            catch (IOException ExceptFILE)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", ExceptFILE);
            }
            finally
            {
                try
                {
                    if (readerOrdared != null)
                    {
                        readerOrdared.close();
                    }
                }
                catch (IOException ExceptFILE)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ExceptFILE);
                }
                try
                {
                    if (readerIPStream != null)
                    {
                        readerIPStream.close();
                    }
                }
                catch (IOException ExceptFILE)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", ExceptFILE);
                }
            }
        }
    }
    else
    {
        ata = null;
    }
    if (publicTrue)
    {
        if (ata != null)
        {
            Cookie cookieSlook = new Cookie(""lang"", URLEncoder.encode(ata, ""UTF-8""));
            document.addCookie(cookieSlook);
        }
    }
}",236,10,"privateTrue:publicTrue,data:ata,response:document,urlConnection:webChannel,cookieSink:cookieSlook,exceptIO:ExceptFILE,readerBuffered:readerOrdared,readerInputStream:readerIPStream,Test682728:process,request:query,",3030,2.357062315940857,Beam
2717,,,253,5,,866,0.6536226908365885,0
2718,,,64,4,,512,0.42261102199554446,0
2719,,,223,8,,464,0.36903975407282513,0
2720,,,117,5,,812,0.688961676756541,0
2721,,,60,4,,591,0.49548917611440024,0
2722,,,170,5,,893,0.6985223333040873,0
2723,,,206,10,,3009,2.3947024901707965,0
2724,,,108,3,,405,0.3236810644467672,0
2725,,,20,1,,49,0.04542182286580403,0
2726,,,269,9,,1017,0.7967406233151754,0
2727,,,377,7,,1549,1.2219634652137756,0
2728,,,70,4,,290,0.27556939522425333,0
2729,,,128,8,,1135,0.940111533800761,0
2730,,,199,8,,1607,1.2342326521873475,0
2731,,,338,10,,2641,2.0355687777201337,0
2732,,,66,4,,517,0.40772777795791626,0
2733,,,91,5,,862,0.7395058234532674,0
2734,,,381,14,,1827,1.7172212958335877,0
2735,,,216,8,,2102,1.5909112493197124,0
2736,,,64,3,,314,0.24758479197820027,0
2737,,,203,8,,1486,1.1758103966712952,0
2738,,,276,8,,2083,1.6123364210128783,0
2739,,,67,4,,442,0.3756229281425476,0
2740,,,91,3,,318,0.2490676204363505,0
2741,,,37,3,,324,0.2494901180267334,0
2742,,,194,7,,1267,0.9905084053675334,0
2743,,,186,10,,1792,1.3747793436050415,0
2744,,,38,3,,324,0.24640926520029705,0
2745,,,130,7,,1202,0.9031568328539531,0
2746,,,59,4,,336,0.25363425016403196,0
2747,,,64,4,,562,0.43031497796376544,0
2748,,,343,10,,1223,0.9595722357432047,0
2749,,,94,3,,314,0.25545140902201335,0
2750,,,88,2,,127,0.11995247999827068,0
2751,,,248,9,,1902,1.4643189748128256,0
2752,,,325,9,,3217,2.479638127485911,0
2753,,,271,8,,576,0.4483526428540548,0
2754,,,37,3,,268,0.20503294865290325,0
2755,,,192,8,,1634,1.2605708718299866,0
2756,,,213,8,,1662,1.2926438172658286,0
2757,,,810,10,,2138,2.360348665714264,0
2758,,,70,3,,343,0.25174227158228557,0
2759,,,193,10,,2954,2.278367360432943,0
2760,,,73,4,,327,0.2578430374463399,0
2761,,,47,3,,404,0.3018248756726583,0
2762,,,89,5,,726,0.5577130635579427,0
2763,,,339,11,,639,0.4869608759880066,0
2764,,,72,5,,730,0.5251728336016337,0
2765,,,285,8,,2504,1.7840205550193786,0
2766,,,320,9,,2888,2.0958861629168193,0
2767,,,313,10,,1226,0.8837759931882222,0
2768,,,428,9,,2104,1.527527101834615,0
2769,,,38,3,,320,0.25198090871175133,0
2770,,,121,4,,520,0.37381991545359294,0
2771,,,53,3,,343,0.25838390191396077,0
2772,,,35,2,,163,0.12195016145706176,0
2773,,,243,8,,2504,1.786016837755839,0
2774,,,206,11,,3936,2.9643738150596617,0
2775,,,318,10,,3651,2.7901360233624777,0
2776,,,180,9,,1722,1.335794218381246,0
2777,,,420,13,,4035,3.8929643988609315,0
2778,,,312,8,,2456,1.9020493547121684,0
2779,,,88,2,,192,0.1679880976676941,0
2780,,,74,3,,268,0.2186176896095276,0
2781,,,407,10,,1134,0.9010364452997843,0
2782,,,379,11,,5152,4.098024916648865,0
2783,,,88,2,,163,0.13671236832936604,0
2784,,,143,7,,1213,0.9334284742673238,0
2785,,,402,11,,4751,3.7624528845151266,0
2786,,,44,4,,417,0.307879900932312,0
2787,,,56,2,,219,0.17990062634150186,0
2788,,,350,9,,2572,2.0079044858614603,0
2789,,,212,7,,479,0.37521372238794964,0
2790,,,86,2,,175,0.13895143270492555,0
2791,,,312,9,,3213,2.4596849282582602,0
2792,,,24,1,,49,0.044449373086293535,0
2793,,,313,6,,494,0.3780282537142436,0
2794,,,115,3,,287,0.2208295424779256,0
2795,,,321,8,,1829,1.4386551300684611,0
2796,,,72,3,,360,0.2960140268007914,0
2797,,,215,8,,1877,1.4786699016888936,0
2798,,,296,10,,3419,2.6556120991706846,0
2799,,,100,5,,417,0.3539342522621155,0
2800,,,74,5,,728,0.5553916255633037,0
2801,,,115,5,,511,0.4105623881022135,0
2802,,,169,8,,1170,0.9370111306508382,0
2803,,,312,9,,526,0.4102724552154541,0
2804,,,275,5,,754,0.6045347372690837,0
2805,,,19,2,,228,0.18295160929361978,0
2806,,,246,7,,1888,1.4744576454162597,0
2807,,,311,10,,3993,3.0807769179344175,0
2808,,,401,10,,4020,3.1465104897816976,0
2809,,,211,7,,1218,0.9615473071734111,0
2810,,,296,7,,1504,1.1846557060877483,0
2811,,,329,11,,4891,3.758868722120921,0
2812,"private void Test422622(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data;
    if (privateTrue)
    {
        data = """";  
        {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try
            {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement(""select name from users where id=0"");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql);
            }
            finally
            {
                try
                {
                    if (resultSet != null)
                    {
                        resultSet.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
                }
                try
                {
                    if (preparedStatement != null)
                    {
                        preparedStatement.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
                }
                try
                {
                    if (connection != null)
                    {
                        connection.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
                }
            }
        }
    }
    else
    {
        data = null;
    }
    if (privateFalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (data != null)
        {
            data = URLEncoder.encode(data, ""UTF-8"");
            response.addHeader(""Location"", ""/author.jsp?lang="" + data);
        }
    }
}","private void Test422622(HttpServletRequest query, HttpServletResponse model) throws Throwable
{
    String di;
    if (publicTrue)
    {
        di = """";  
        {
            Connection server = null;
            PreparedStatement pseviousSet = null;
            ResultSet resultLine = null;
            try
            {
                server = IO.getDBConnection();
                pseviousSet = server.prepareStatement(""select name from users where id=0"");
                resultLine = pseviousSet.executeQuery();
                di = resultLine.getString(1);
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql);
            }
            finally
            {
                try
                {
                    if (resultLine != null)
                    {
                        resultLine.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
                }
                try
                {
                    if (pseviousSet != null)
                    {
                        pseviousSet.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
                }
                try
                {
                    if (server != null)
                    {
                        server.close();
                    }
                }
                catch (SQLException exceptSql)
                {
                    IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
                }
            }
        }
    }
    else
    {
        di = null;
    }
    if (privatefalse)
    {
        IO.writeLine(""Benign, fixed string"");
    }
    else
    {
        if (di != null)
        {
            di = URLEncoder.encode(di, ""UTF-8"");
            model.addHeader(""Location"", ""/author.jsp?lang="" + di);
        }
    }
}",276,10,"privateTrue:publicTrue,data:di,response:model,preparedStatement:pseviousSet,connection:server,privateFalse:privatefalse,resultSet:resultLine,request:query,",2395,2.0146225492159524,Beam
2813,,,100,3,,283,0.2235656460126241,0
2814,,,318,9,,2284,1.6811680912971496,0
2815,,,48,3,,386,0.29339008728663124,0
2816,,,173,7,,1678,1.2766740838686625,0
2817,,,540,13,,1090,0.9323749740918478,0
2818,,,283,8,,2229,1.707840351263682,0
2819,,,310,11,,4448,3.567264127731323,0
2820,,,217,7,,1511,1.1759230534235636,0
2821,,,401,11,,1339,1.0728689074516295,0
2822,,,313,8,,2490,1.9309330940246583,0
2823,,,162,8,,1187,0.8952073971430461,0
2824,,,82,3,,283,0.2217269778251648,0
2825,,,27,3,,231,0.19030410448710125,0
2826,,,381,11,,4849,3.741854707400004,0
2827,,,306,10,,3940,3.0487239281336467,0
2828,,,201,6,,1486,1.1339098970095316,0
2829,,,437,12,,811,0.7429223577181499,0
2830,,,420,10,,1231,0.9920258680979411,0
2831,,,117,7,,1075,0.8674548268318176,0
2832,,,251,8,,489,0.3840093453725179,0
2833,,,133,9,,2090,1.7530078411102294,0
2834,,,74,3,,287,0.2255867640177409,0
2835,,,330,12,,4302,3.620695869127909,0
2836,,,306,10,,3646,2.826335080464681,0
2837,,,49,3,,246,0.21784160137176514,0
2838,,,176,8,,1978,1.6294235229492187,0
2839,,,271,8,,2500,1.9214633703231812,0
2840,,,339,10,,1115,0.8735855897267659,0
2841,,,95,4,,353,0.29090282519658406,0
2842,,,81,3,,318,0.24899080594380696,0
2843,,,66,4,,492,0.37377384106318157,0
2844,,,339,10,,3336,2.5864644487698873,0
2845,,,69,5,,1181,0.9054303248723348,0
2846,,,306,10,,3858,3.1057223677635193,0
2847,,,281,9,,3146,2.5162164052327474,0
2848,,,94,3,,251,0.22323416868845622,0
2849,,,61,3,,426,0.35489601294199624,0
2850,,,208,8,,1387,1.104275373617808,0
2851,,,239,6,,919,0.6882518370946248,0
2852,,,337,10,,3987,3.0467754085858663,0
2853,,,69,4,,536,0.400292162100474,0
2854,,,117,6,,1127,0.9044368108113606,0
2855,,,75,2,,80,0.06442440350850423,0
2856,,,230,9,,1568,1.1575231671333313,0
2857,,,298,6,,956,0.683655834197998,0
2858,,,544,13,,2325,1.9888221899668375,0
2859,,,56,4,,481,0.4070020119349162,0
2860,,,173,12,,3539,2.767165168126424,0
2861,,,297,9,,2221,1.6437646349271138,0
2862,,,224,6,,1479,1.1477986574172974,0
2863,,,119,8,,1671,1.2274395147959392,0
2864,,,39,3,,237,0.17490088542302448,0
2865,,,260,9,,1051,0.7857498327891032,0
2866,,,61,5,,803,0.5732094844182333,0
2867,,,91,3,,230,0.22070460319519042,0
2868,,,447,12,,4055,3.237146206696828,0
2869,,,185,6,,937,0.743967060248057,0
2870,,,142,3,,233,0.19613099892934163,0
2871,,,220,7,,1755,1.339597217241923,0
2872,,,269,6,,1357,1.0416330536206564,0
2873,,,36,2,,223,0.18151297569274902,0
2874,,,328,9,,3165,2.475331672032674,0
2875,,,263,6,,1049,0.8090688387552897,0
2876,,,128,5,,260,0.2100827217102051,0
2877,,,279,10,,3724,3.107144021987915,0
2878,,,144,9,,2312,1.993584442138672,0
2879,,,468,16,,5360,4.839082964261373,0
2880,,,158,5,,834,0.6865117232004802,0
2881,,,237,8,,1800,1.3836143255233764,0
2882,,,270,8,,2482,1.9259764750798543,0
2883,,,301,8,,2437,1.9938846031824748,0
2884,,,459,11,,3409,2.8221816023190818,0
2885,,,48,3,,306,0.2630928516387939,0
2886,,,468,10,,4176,3.355384588241577,0
2887,,,228,8,,1921,1.497550408045451,0
2888,,,287,9,,2362,1.8237343589464823,0
2889,,,126,4,,562,0.4359418312708537,0
2890,,,239,8,,2301,1.7235635717709858,0
2891,,,341,12,,5092,4.2355728109677635,0
2892,,,76,3,,298,0.2553771734237671,0
2893,,,48,3,,272,0.22272476355234783,0
2894,,,345,9,,3221,2.5430466294288636,0
2895,,,153,8,,1821,1.4136789838473003,0
2896,,,345,10,,4003,3.181935139497121,0
2897,,,70,3,,370,0.3049954374631246,0
2898,,,154,3,,235,0.21508081754048666,0
2899,,,562,12,,3031,3.556741432348887,0
2900,,,145,7,,1849,1.4941307107607524,0
2901,,,116,3,,318,0.2568046768506368,0
2902,,,100,3,,400,0.3384958902994792,0
2903,,,118,9,,1651,1.5170483311017355,0
2904,,,154,7,,972,0.8456627249717712,0
2905,,,227,8,,2036,1.639047634601593,0
2906,,,306,9,,2874,2.320516018072764,0
2907,,,56,4,,105,0.1034101684888204,0
2908,,,382,10,,3868,3.1375423073768616,0
2909,,,93,5,,746,0.6225264350573222,0
2910,,,51,3,,259,0.21845187743504843,0
2911,"public void Test527312(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void Test527312(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String str = dataHashMap.get(2);
    if (str != null)
    {
        String nas[] = str.split(""-"");
        int successCount = 0;
        Connection blogCollection = null;
        Statement sslSession = null;
        try
        {
            blogCollection = IO.getDBConnection();
            sslSession = blogCollection.createStatement();
            for (int i = 0; i < nas.length; i++)
            {
                sslSession.addBatch(""update users set hitcount=hitcount+1 where name='"" + nas[i] + ""'"");
            }
            int resultsArray[] = sslSession.executeBatch();
            for (int i = 0; i < nas.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + nas.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sslSession != null)
                {
                    sslSession.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (blogCollection != null)
                {
                    blogCollection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",275,10,"sqlStatement:sslSession,names:nas,dbConnection:blogCollection,data:str,",1440,1.1914052685101828,Beam
2912,"public void Test380503(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    Connection dbConnection = null;
    PreparedStatement sqlStatement = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.prepareStatement(""insert into users (status) values ('updated') where name=?"");
        sqlStatement.setString(1, data);
        Boolean result = sqlStatement.execute();
        if (result)
        {
            IO.writeLine(""Name, "" + data + "", updated successfully"");
        }
        else
        {
            IO.writeLine(""Unable to update records for user: "" + data);
        }
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test380503(Object dataObject ) throws Throwable
{
    String action = (String)dataObject;
    Connection DB = null;
    PreparedStatement dlConfiguration = null;
    try
    {
        DB = IO.getDBConnection();
        dlConfiguration = DB.prepareStatement(""insert into users (status) values ('updated') where name=?"");
        dlConfiguration.setString(1, action);
        Boolean true = dlConfiguration.execute();
        if (true)
        {
            IO.writeLine(""Name, "" + action + "", updated successfully"");
        }
        else
        {
            IO.writeLine(""Unable to update records for user: "" + action);
        }
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (dlConfiguration != null)
            {
                dlConfiguration.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql);
        }
        try
        {
            if (DB != null)
            {
                DB.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",199,7,"sqlStatement:dlConfiguration,data:action,result:true,dbConnection:DB,",621,0.4984385331471761,Beam
2913,,,58,3,,318,0.24705097277959187,0
2914,,,286,8,,2468,1.991583486398061,0
2915,,,300,10,,3953,3.1727325161298117,0
2916,,,382,11,,4814,3.778446992238363,0
2917,"private int Test720912() throws Throwable
{
    int data;
    data = 100;
    return data;
}","private int Test780822() throws Throwable
{
    int this;
    this = 100;
    return this;
}",19,2,"Test720912:Test780822,data:this,",48,0.0466483473777771,Beam
2918,,,243,8,,543,0.42570294936498004,0
2919,,,245,9,,2152,1.6640122652053833,0
2920,,,260,8,,873,0.6735234379768371,0
2921,,,234,7,,1493,1.1737446109453837,0
2922,,,263,9,,999,0.7945712089538575,0
2923,,,66,3,,405,0.3096464157104492,0
2924,,,73,4,,489,0.3984333793322245,0
2925,,,267,7,,1880,1.4426958481470744,0
2926,,,36,1,,49,0.05030093987782796,0
2927,,,303,15,,7729,6.000640745957693,0
2928,,,410,14,,3414,3.9126344243685405,0
2929,,,104,3,,293,0.2291921854019165,0
2930,,,224,8,,1645,1.3264951229095459,0
2931,,,107,5,,612,0.49468979438145955,0
2932,,,146,7,,1127,0.947447681427002,0
2933,,,412,9,,3213,2.622248570124308,0
2934,,,301,9,,3213,2.5320524255434673,0
2935,,,77,3,,250,0.2302557945251465,0
2936,,,155,8,,1603,1.4181442697842916,0
2937,,,54,5,,868,0.6987785577774048,0
2938,,,58,3,,318,0.2581339438756307,0
2939,,,65,2,,129,0.12569437821706136,0
2940,,,137,8,,1566,1.3371315995852153,0
2941,,,265,9,,3398,2.709078335762024,0
2942,,,237,7,,1868,1.4831174532572429,0
2943,,,112,5,,698,0.5804271062215169,0
2944,,,63,4,,625,0.5144477804501851,0
2945,,,97,3,,283,0.22422116994857788,0
2946,,,295,8,,2186,1.7578081448872884,0
2947,,,331,10,,2891,2.3103845794995626,0
2948,,,352,14,,6930,5.655943973859151,0
2949,,,452,12,,4298,3.5297635157903033,0
2950,,,130,3,,405,0.3384282032648722,0
2951,,,284,9,,3162,2.5390000979105634,0
2952,,,212,9,,2154,1.723650828997294,0
2953,,,58,4,,552,0.46226615508397423,0
