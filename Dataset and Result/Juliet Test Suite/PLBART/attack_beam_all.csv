Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,491,12,,5690,10.362077562014262,0
1,,,168,9,,2668,4.989702300230662,0
2,,,187,8,,2010,3.6703554948170978,0
3,,,48,4,,510,0.9096361875534058,0
4,,,253,9,,1767,3.173738892873128,0
5,,,111,4,,464,0.8610307812690735,0
6,,,129,7,,1029,1.8704874316851299,0
7,,,73,4,,534,0.9587338685989379,0
8,,,343,10,,3362,6.215802899996439,0
9,,,335,10,,4284,7.849140071868897,0
10,,,370,10,,3163,5.8681187748909,0
11,,,286,10,,4053,7.456443893909454,0
12,,,136,5,,943,1.8183107018470763,0
13,,,42,2,,159,0.3080567518870036,0
14,,,53,2,,174,0.3582336187362671,0
15,,,122,5,,976,1.817415976524353,0
16,,,264,8,,1592,2.9343486467997235,0
17,,,81,4,,679,1.3184115886688232,0
18,,,142,5,,839,1.5957420587539672,0
19,,,70,3,,302,0.5591560482978821,0
20,,,200,8,,1324,2.4250969171524046,0
21,,,107,5,,875,1.7225906213124593,0
22,,,276,10,,3608,6.7024879058202105,0
23,,,268,7,,2099,3.893842852115631,0
24,,,139,3,,318,0.6186023235321045,0
25,,,233,6,,1384,2.4682478586832683,0
26,,,506,12,,5218,10.204678531487783,0
27,,,164,8,,1908,3.671483341852824,0
28,,,294,8,,2008,3.757781453927358,0
29,,,100,2,,175,0.33901885747909544,0
30,,,286,6,,1233,2.3268337845802307,0
31,,,152,5,,1017,1.9066787878672282,0
32,,,51,3,,268,0.4858946959177653,0
33,,,290,9,,3117,5.79302841424942,0
34,,,119,6,,1376,2.667911406358083,0
35,,,422,10,,2307,4.248835237820943,0
36,,,68,3,,318,0.6104574799537659,0
37,,,262,10,,2302,4.1639127413431805,0
38,,,110,3,,314,0.5654975295066833,0
39,,,96,2,,231,0.4189293622970581,0
40,,,93,3,,400,0.7380223035812378,0
41,,,54,2,,219,0.40427955786387126,0
42,,,147,8,,1980,3.7247496684392294,0
43,,,56,5,,630,1.176605224609375,0
44,,,46,2,,125,0.2638172745704651,0
45,,,208,7,,1958,3.5875805338223774,0
46,,,122,7,,1812,3.329413906733195,0
47,,,105,4,,519,0.993041185537974,0
48,,,42,4,,381,0.6948525508244833,0
49,,,101,3,,343,0.6326870878537496,0
50,,,216,8,,2290,4.1505555510520935,0
51,,,84,4,,613,1.1028583804766336,0
52,,,49,4,,575,1.0550409197807311,0
53,,,207,6,,1481,2.621225321292877,0
54,,,144,7,,1346,2.504012660185496,0
55,,,46,3,,376,0.6914377729098002,0
56,,,256,7,,1977,3.6007121284802754,0
57,,,24,1,,25,0.05483405192693074,0
58,,,340,16,,5136,9.665414289633434,0
59,,,89,3,,282,0.524845818678538,0
60,,,32,3,,302,0.572661566734314,0
61,,,202,8,,1732,3.081052855650584,0
62,,,502,11,,4764,8.716981558005015,0
63,,,152,3,,355,0.676198955376943,0
64,"public void Test174036(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringTrimmed = data.trim();
            IO.writeLine(stringTrimmed);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test174036(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String trimmed = data.trim();
            IO.writeLine(trimmed);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",204,8,"stringTrimmed:trimmed,",94,0.17447075843811036,Beam
65,,,103,3,,279,0.5474090615908305,0
66,,,401,12,,5747,10.562138946851094,0
67,,,61,4,,426,0.809097170829773,0
68,,,590,7,,1884,3.4671880563100177,0
69,,,63,2,,219,0.42573224306106566,0
70,,,182,8,,1288,2.393214782079061,0
71,,,167,7,,1559,2.865347894032796,0
72,,,103,3,,400,0.7419395605723064,0
73,,,107,6,,1071,1.9835661371548972,0
74,,,148,5,,804,1.400290318330129,0
75,,,273,8,,2653,4.778072392940521,0
76,,,282,10,,3620,6.308624088764191,0
77,,,263,8,,2672,4.649731389681498,0
78,,,369,10,,3999,7.233560772736867,0
79,,,260,8,,2493,4.443679972489675,0
80,,,85,4,,645,1.1623614152272543,0
81,,,129,5,,740,1.4279486457506816,0
82,,,121,4,,639,1.1990571022033691,0
83,,,331,10,,3978,7.195382042725881,0
84,,,147,8,,1536,2.9573694388071696,0
85,,,97,3,,405,0.7269147555033366,0
86,,,95,4,,631,1.1133839646975199,0
87,,,275,9,,3042,5.56468075911204,0
88,,,289,6,,931,1.6846249024073283,0
89,,,87,4,,490,0.9264248490333558,0
90,,,102,3,,400,0.7344427943229676,0
91,,,301,8,,2690,4.881334280967712,0
92,,,375,9,,3141,5.763061161835989,0
93,,,282,5,,772,1.3729903936386108,0
94,,,58,4,,684,1.2579729199409484,0
95,,,238,8,,1793,3.246821641921997,0
96,,,139,3,,314,0.5856383562088012,0
97,,,74,3,,405,0.7057533065478007,0
98,,,426,11,,2748,5.034241700172425,0
99,,,167,9,,2193,4.297187638282776,0
100,,,458,10,,4054,7.348886072635651,0
101,,,299,8,,2473,4.485132757822672,0
102,,,129,7,,1951,3.6116675972938537,0
103,,,164,6,,801,1.5284815192222596,0
104,,,97,3,,251,0.49215078353881836,0
105,,,385,11,,3560,6.774422343571981,0
106,,,109,5,,925,1.7291142741839092,0
107,,,242,8,,2475,4.474842739105225,0
108,,,60,1,,49,0.10406830310821533,0
109,,,394,15,,5473,11.485360066095987,0
110,,,217,7,,1549,2.8674415310223895,0
111,,,69,3,,314,0.6010737220446268,0
112,,,233,8,,1621,3.014794413248698,0
113,,,105,3,,282,0.5444287538528443,0
114,,,442,7,,1849,3.4482707301775615,0
115,,,107,6,,1127,2.003750475247701,0
116,,,143,6,,1219,2.254163877169291,0
117,,,335,9,,3185,5.79791456858317,0
118,,,488,14,,5339,9.959253056844075,0
119,,,63,4,,595,1.1204269647598266,0
120,,,44,3,,334,0.6474459648132325,0
121,,,54,2,,173,0.3182716369628906,0
122,,,62,4,,566,1.0544382174809774,0
123,,,60,3,,243,0.4976056019465129,0
124,,,154,6,,959,1.8073728839556376,0
125,,,227,9,,1756,3.181100340684255,0
126,,,306,10,,4308,7.646458288033803,0
127,,,282,5,,770,1.378043289979299,0
128,,,137,6,,1193,2.172625017166138,0
129,,,24,1,,51,0.10642277797063192,0
130,,,77,4,,657,1.2418373703956604,0
131,,,170,8,,2239,4.015928777058919,0
132,,,119,5,,775,1.4606584787368775,0
133,,,345,9,,2905,5.264672001202901,0
134,,,291,8,,1702,3.051412312189738,0
135,,,266,7,,1951,3.5032692750295005,0
136,,,43,2,,129,0.2488067905108134,0
137,,,71,4,,410,0.8034836649894714,0
138,,,515,12,,6114,11.243078935146332,0
139,,,341,9,,3162,5.853829912344614,0
140,,,327,10,,3488,6.425463183720907,0
141,,,278,9,,2334,4.307916569709778,0
142,,,278,10,,3341,6.157790144284566,0
143,,,99,3,,405,0.7679273764292399,0
144,,,55,3,,366,0.7060644745826721,0
145,,,184,8,,1675,3.0843731204668683,0
146,,,305,10,,2487,4.520767100652059,0
147,,,138,8,,1547,2.9294069449106854,0
148,,,414,8,,1884,3.550904051462809,0
149,,,56,4,,535,0.9573549548784892,0
150,,,311,10,,3388,6.348407439390818,0
151,,,50,2,,93,0.21403477986653646,0
152,,,159,8,,1961,3.6893860658009845,0
153,,,66,4,,587,1.0773405154546103,0
154,,,317,10,,3023,6.009324383735657,0
155,,,144,8,,2198,4.071774550278982,0
156,,,329,10,,3733,6.971522335211436,0
157,,,95,3,,282,0.5584408243497213,0
158,,,251,8,,2469,4.538325973351797,0
159,,,51,5,,880,1.6488968014717102,0
160,,,184,8,,1795,3.3004515051841734,0
161,,,114,6,,939,1.6794918457667032,0
162,,,60,3,,314,0.594616977373759,0
163,,,281,10,,2275,4.167482260862986,0
164,,,185,9,,2521,4.829973407586416,0
165,,,151,8,,2245,4.22890123128891,0
166,,,41,3,,324,0.5714914043744405,0
167,,,282,8,,2329,4.320225993792216,0
168,,,74,4,,580,1.1207727710405986,0
169,,,366,10,,2814,5.213501906394958,0
170,,,370,10,,3309,6.109638202190399,0
171,,,153,7,,1361,2.5737487276395163,0
172,,,142,6,,1073,2.0741713762283327,0
173,,,337,9,,3494,6.472862132390341,0
174,,,62,5,,782,1.461925745010376,0
175,,,213,5,,860,1.5986526012420654,0
176,,,260,10,,2417,4.4834288358688354,0
177,,,245,6,,1479,2.73580025434494,0
178,,,69,3,,324,0.5801007986068726,0
179,,,38,3,,321,0.579103696346283,0
180,,,175,8,,1285,2.4220433195432025,0
181,,,300,9,,3168,5.886419872442882,0
182,,,65,2,,219,0.4271835684776306,0
183,,,56,2,,219,0.42826247612635293,0
184,,,87,3,,405,0.753130825360616,0
185,,,392,10,,3992,7.368281181653341,0
186,,,286,8,,2465,4.58287068605423,0
187,,,282,9,,3195,5.86104355653127,0
188,,,54,2,,127,0.2519035617510478,0
189,,,61,3,,405,0.7306105295817057,0
191,,,281,8,,2260,3.809032686551412,0
192,,,246,6,,1361,2.4595078388849894,0
193,,,61,4,,578,1.0865052938461304,0
194,,,249,6,,1353,2.4452473481496173,0
195,,,95,3,,328,0.6368919293085734,0
196,,,227,8,,2473,4.5235101540883385,0
197,"public void Test697798() throws Throwable
{
    String data = CWE89_SQL_Injection__listen_tcp_executeQuery_68a.data;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test697798() throws Throwable
{
    String data = CWE89_SQL_Injection__listen_tcp_executeQuery_68a.data;
    Connection conn = null;
    Statement sslSession = null;
    ResultSet resultSet = null;
    try
    {
        conn = IO.getDBConnection();
        sslSession = conn.createStatement();
        resultSet = sslSession.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslSession != null)
            {
                sslSession.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (conn != null)
            {
                conn.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",218,6,"sqlStatement:sslSession,dbConnection:conn,",125,0.22586493492126464,Beam
198,,,341,9,,3432,6.195101547241211,0
199,,,183,8,,1977,3.6897634069124856,0
200,,,395,10,,3948,7.321094044049581,0
201,,,76,2,,192,0.4002767284711202,0
202,,,280,10,,3233,6.518745748202006,0
203,,,81,3,,268,0.48929739793141686,0
204,,,123,6,,783,1.51441038052241,0
205,,,86,3,,405,0.7398286620775859,0
206,,,243,7,,1888,3.413928500811259,0
207,,,216,6,,1317,2.3757394989331564,0
208,,,246,9,,1827,3.4252646644910176,0
209,,,140,5,,663,1.2954961856206257,0
210,,,216,9,,3075,5.728683221340179,0
211,,,278,12,,4387,8.1792116522789,0
212,,,140,9,,1380,2.714377534389496,0
213,,,71,4,,399,0.8810412446657817,0
214,,,250,9,,2771,5.199312357107798,0
215,,,284,10,,2564,4.935851697127024,0
216,,,328,9,,3213,5.679646142323812,0
217,,,284,9,,2457,4.480591034889221,0
218,,,292,9,,2001,3.4576690196990967,0
219,,,257,7,,1887,3.4216067592302957,0
220,,,164,7,,1478,2.8366586605707806,0
221,,,74,4,,589,1.1332021196683248,0
222,,,198,11,,4060,7.251612830162048,0
223,,,203,7,,1592,2.9323415239651998,0
224,,,185,4,,562,0.9736195007960001,0
225,,,74,3,,314,0.5841376741727193,0
226,"public void Test019110(String dataArray[] ) throws Throwable
{
    String data = dataArray[2];
    Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();
    environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
    environmentHashTable.put(Context.PROVIDER_URL, ""ldap://localhost:389"");
    DirContext directoryContext = null;
    try
    {
        directoryContext = new InitialDirContext(environmentHashTable);
        String search = ""(cn="" + data + "")"";
        NamingEnumeration<SearchResult> answer = directoryContext.search("""", search, null);
        while (answer.hasMore())
        {
            SearchResult searchResult = answer.next();
            Attributes attributes = searchResult.getAttributes();
            NamingEnumeration<?> allAttributes = attributes.getAll();
            while (allAttributes.hasMore())
            {
                Attribute attribute = (Attribute) allAttributes.next();
                NamingEnumeration<?> allValues = attribute.getAll();
                while(allValues.hasMore())
                {
                    IO.writeLine("" Value: "" + allValues.next().toString());
                }
            }
        }
    }
    catch (NamingException exceptNaming)
    {
        IO.logger.log(Level.WARNING, ""The LDAP service was not found or login failed."", exceptNaming);
    }
    finally
    {
        if (directoryContext != null)
        {
            try
            {
                directoryContext.close();
            }
            catch (NamingException exceptNaming)
            {
                IO.logger.log(Level.WARNING, ""Error closing DirContext"", exceptNaming);
            }
        }
    }
}","public void test118118(String dataString[] ) throws Throwable
{
    String data = dataString[2];
    Hashtable<String, String> EnvironmentHashtable = new Hashtable<String, String>();
    EnvironmentHashtable.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
    EnvironmentHashtable.put(Context.PROVIDER_URL, ""ldap://localhost:389"");
    DirContext DirectoryLocation = null;
    try
    {
        DirectoryLocation = new InitialDirContext(EnvironmentHashtable);
        String Search = ""(cn="" + data + "")"";
        NamingEnumeration<SearchResult> match = DirectoryLocation.Search("""", Search, null);
        while (match.hasMore())
        {
            SearchResult searchResult = match.next();
            Attributes attributes = searchResult.getAttributes();
            NamingEnumeration<?> allAttributes = attributes.getAll();
            while (allAttributes.hasMore())
            {
                Attribute attribute = (Attribute) allAttributes.next();
                NamingEnumeration<?> allValues = attribute.getAll();
                while(allValues.hasMore())
                {
                    IO.writeLine("" Value: "" + allValues.next().toString());
                }
            }
        }
    }
    catch (NamingException againstnaming)
    {
        IO.logger.log(Level.WARNING, ""The LDAP service was not found or login failed."", againstnaming);
    }
    finally
    {
        if (DirectoryLocation != null)
        {
            try
            {
                DirectoryLocation.close();
            }
            catch (NamingException againstnaming)
            {
                IO.logger.log(Level.WARNING, ""Error closing DirContext"", againstnaming);
            }
        }
    }
}",269,13,"directoryContext:DirectoryLocation,exceptNaming:againstnaming,Test019110:test118118,dataArray:dataString,search:Search,environmentHashTable:EnvironmentHashtable,answer:match,",2004,3.7426928559939068,Beam
227,,,106,8,,1924,3.397207240263621,0
228,,,79,3,,338,0.6253142317136129,0
229,,,73,3,,405,0.7712250192960103,0
230,,,87,5,,880,1.6794129014015198,0
231,,,66,4,,629,1.1667073567708333,0
232,,,150,5,,813,1.5738144199053445,0
233,,,358,10,,4274,7.930150965849559,0
234,,,83,3,,360,0.7109302004178365,0
235,,,103,3,,405,0.7426216284434001,0
236,,,199,7,,1567,2.8205887118975324,0
237,,,388,12,,5140,9.764485522111256,0
238,,,197,9,,1788,3.417136859893799,0
239,,,235,8,,1806,3.296933643023173,0
240,,,85,3,,400,0.7675390839576721,0
241,,,59,6,,897,1.6598458687464397,0
242,,,367,10,,4325,7.954133375485738,0
243,,,449,16,,6067,11.501590291659037,0
244,,,96,4,,560,1.0066008885701498,0
245,,,288,8,,2345,4.286781005064646,0
246,,,66,4,,684,1.2831049799919128,0
247,,,68,3,,405,0.7718640009562174,0
248,,,90,5,,447,0.9440787672996521,0
249,,,34,4,,434,0.8760951717694601,0
250,,,251,9,,1887,3.4181231021881104,0
251,,,60,3,,405,0.7758718013763428,0
252,,,560,7,,1455,2.873304855823517,0
253,,,346,11,,4703,8.42328851222992,0
254,,,266,7,,2099,3.797247894605001,0
255,,,63,4,,556,0.9967710773150126,0
256,,,82,2,,173,0.3429217020670573,0
257,,,238,8,,2230,3.9387117544809978,0
258,,,94,4,,643,1.11767817735672,0
259,,,238,7,,1789,3.3310147007306417,0
260,,,362,11,,4928,8.868784475326539,0
261,,,116,3,,405,0.7342943827311198,0
262,,,147,5,,804,1.4746263821919758,0
263,,,56,2,,219,0.40740660031636555,0
264,,,335,10,,2622,4.644634199142456,0
265,,,100,7,,1014,1.8309074838956196,0
266,,,85,3,,324,0.5964341044425965,0
267,,,58,2,,163,0.29636509815851847,0
268,,,292,8,,2693,4.718773460388183,0
269,,,312,9,,2379,4.04991094271342,0
270,,,84,3,,318,0.5602142135302226,0
271,,,217,8,,1677,2.812867240111033,0
272,,,121,6,,1244,2.192858823140462,0
273,,,42,4,,348,0.6286127845446269,0
274,,,60,4,,510,0.9292736013730367,0
275,,,163,5,,593,1.124850296974182,0
276,,,312,10,,3694,6.458136057853698,0
277,,,414,10,,3992,7.151666355133057,0
278,,,227,8,,2042,3.702126145362854,0
279,,,236,7,,1461,2.6210694829622905,0
280,,,391,11,,4847,9.012486533323925,0
281,,,381,9,,3432,6.329289293289184,0
282,,,159,6,,1175,2.2358224034309386,0
283,,,266,8,,2750,4.939839653174082,0
284,,,339,9,,2848,5.19532862106959,0
285,,,482,16,,4688,9.095806177457174,0
286,,,276,10,,2896,5.314875702063243,0
287,,,157,7,,1763,3.2348954319953918,0
288,,,77,3,,405,0.7268773992856343,0
289,,,270,10,,4145,7.624990753332773,0
290,,,214,9,,3355,6.225083220005035,0
291,,,298,10,,3945,7.2048207004865015,0
292,,,23,2,,175,0.3198280731836955,0
293,,,402,10,,2560,4.755989785989126,0
294,,,158,5,,919,1.7139297207196553,0
295,,,315,8,,2500,4.520924790700277,0
296,,,334,6,,954,1.7518161535263062,0
297,,,42,3,,362,0.6736505309740702,0
298,,,310,9,,3431,6.246269210179647,0
299,,,120,9,,1476,2.881472059090932,0
300,,,30,2,,129,0.30675467252731325,0
301,,,320,10,,2008,3.652132836977641,0
302,,,428,10,,4023,7.181036750475566,0
303,,,54,5,,798,1.5316216826438904,0
304,,,65,4,,575,1.0793846209843954,0
305,,,294,10,,3834,7.0607283075650535,0
306,,,260,9,,3448,6.229602376619975,0
307,,,246,8,,1593,2.8357839663823445,0
308,,,164,8,,2056,3.6465678930282595,0
309,,,128,8,,1352,2.5576005498568217,0
310,,,164,5,,907,1.5946825742721558,0
311,,,34,3,,312,0.5635659654935201,0
312,,,338,10,,3902,7.197827319304149,0
313,,,267,10,,2208,4.192895130316416,0
314,,,111,8,,1280,2.474294698238373,0
315,,,160,8,,2021,3.8076272646586102,0
316,,,63,4,,591,1.1580267031987508,0
317,,,139,5,,787,1.5082804083824157,0
318,,,256,8,,2151,3.9806156118710834,0
319,,,350,10,,3864,7.090390535195668,0
320,,,94,3,,286,0.569888973236084,0
321,,,431,13,,3889,8.677915326754253,0
322,,,109,3,,290,0.5452188650767008,0
323,,,50,4,,458,0.8878966331481933,0
324,,,254,8,,2444,4.555680386225382,0
325,,,285,10,,2995,5.5808583696683245,0
326,,,303,10,,3792,7.069295001029968,0
327,,,64,2,,159,0.3235115647315979,0
328,,,58,4,,438,0.8920313358306885,0
329,,,185,7,,1540,2.8427069664001463,0
330,,,169,8,,1778,3.4055633544921875,0
331,,,378,7,,1547,2.801451094945272,0
332,,,239,7,,1448,2.647066334883372,0
333,,,254,9,,3167,5.740394218762716,0
334,,,167,5,,907,1.677459180355072,0
335,,,164,3,,239,0.47124815781911217,0
336,,,36,2,,162,0.33064549366633095,0
337,,,335,9,,3182,5.678118809064229,0
338,,,284,8,,2683,4.616279105345408,0
339,,,299,13,,5651,9.834007843335469,0
340,,,69,5,,742,1.323766819636027,0
341,,,58,3,,363,0.6854199409484864,0
342,,,96,6,,1409,2.482539184888204,0
343,,,278,9,,2926,5.186564779281616,0
344,,,306,9,,3415,6.370756057898204,0
345,,,52,2,,163,0.3200203975041707,0
346,,,261,8,,2411,4.4690593957901,0
347,,,290,8,,2745,5.012341872851054,0
348,,,305,8,,2709,5.010177421569824,0
349,,,287,11,,2075,3.8226150393486025,0
350,,,50,4,,426,0.8665138840675354,0
351,,,112,7,,1914,3.423646056652069,0
352,,,255,9,,3401,6.084127295017242,0
353,,,202,7,,1625,2.938235847155253,0
354,,,267,10,,3950,7.248927577336629,0
355,,,93,3,,282,0.5542727669080099,0
356,,,312,7,,1669,3.0199993093808493,0
357,,,296,10,,2532,4.678094800313314,0
358,,,125,8,,1524,2.885800290107727,0
359,,,331,9,,2335,4.2827503323555,0
360,,,263,8,,2390,4.4359147588411965,0
361,,,58,4,,631,1.165074364344279,0
362,,,331,10,,3680,6.77867679198583,0
363,,,365,9,,3494,6.324185991287232,0
364,,,376,9,,2632,4.8172637263933815,0
365,,,118,8,,2319,4.446600528558095,0
366,,,212,8,,2452,4.39770747423172,0
367,,,302,10,,2031,3.722752789656321,0
368,,,80,6,,826,1.5226025899251303,0
369,,,41,4,,609,1.1229923923810323,0
370,,,343,9,,3397,6.099529604117076,0
371,,,277,8,,2406,4.313455132643382,0
372,,,112,3,,293,0.5458867351214091,0
373,,,70,3,,405,0.7484388987223307,0
374,,,138,5,,836,1.5694129943847657,0
375,,,366,10,,4269,7.731213823954264,0
376,,,201,8,,1367,2.388485304514567,0
377,,,358,10,,4130,7.392192689577739,0
378,,,90,5,,831,1.5261435111363728,0
379,,,342,10,,3827,7.073173069953919,0
380,,,71,5,,962,1.7480065107345581,0
381,,,485,12,,5336,9.680040228366853,0
382,,,33,1,,49,0.09777177969614664,0
383,,,56,4,,702,1.2852443218231202,0
384,,,375,11,,5080,9.495181210835774,0
385,,,340,12,,4403,8.964332155386607,0
386,,,71,3,,318,0.594951864083608,0
387,,,84,3,,266,0.5112986207008362,0
388,,,112,3,,405,0.7469583988189697,0
389,,,42,1,,49,0.10738303263982137,0
390,,,271,9,,2657,4.79796998500824,0
391,,,69,4,,684,1.2338989535967508,0
392,,,92,4,,490,0.911181112130483,0
393,"private void Test344762() throws Throwable
{
    short data;
    data = 2;
    short result = (short)(data - 1);
    IO.writeLine(""result: "" + result);
}","private void test344762() throws Throwable
{
    short data;
    data = 2;
    short test = (short)(data - 1);
    IO.writeLine(""result: "" + test);
}",39,3,"Test344762:test344762,result:test,",56,0.09952780803044638,Beam
394,,,54,2,,127,0.2572290857632955,0
395,,,418,10,,2716,5.08153156042099,0
396,,,245,9,,2647,4.946762017409006,0
397,,,174,7,,1737,3.185458759466807,0
398,,,96,5,,607,1.2287790576616924,0
399,,,308,9,,3150,6.003151647249857,0
400,,,55,2,,159,0.3021457592646281,0
401,,,276,11,,3846,7.225263845920563,0
402,,,122,4,,543,1.053122584025065,0
403,,,352,9,,2548,4.647068607807159,0
404,,,55,3,,268,0.5011138558387757,0
405,,,240,8,,1715,3.3105518102645872,0
406,,,431,10,,4251,7.953424207369486,0
407,,,148,7,,1306,2.5815340518951415,0
408,,,84,3,,253,0.5382143219312032,0
409,,,372,11,,3411,6.364701469739278,0
410,,,239,8,,1650,2.8624784270922343,0
411,,,280,9,,2574,4.494678755601247,0
412,,,194,8,,1974,3.345200169086456,0
413,,,296,10,,3166,5.540069687366485,0
414,,,242,7,,1882,3.2286556561787925,0
415,,,616,10,,3861,6.688420907656352,0
416,,,273,9,,2768,4.779720687866211,0
417,,,137,4,,495,0.8918082435925802,0
418,,,50,4,,514,0.8697251717249552,0
419,,,445,11,,3551,6.143065619468689,0
420,,,362,10,,3992,7.285152228673299,0
421,"public void Test843724(CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a.Container passwordContainer ) throws Throwable
{
    String password = passwordContainer.containerOne;
    if (password != null)
    {
        KerberosPrincipal principal = new KerberosPrincipal(""test"");
        KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);
        IO.writeLine(key.toString());
    }
}","public void Test843724(CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a.Container passwordContainer ) throws Throwable
{
    String password = passwordContainer.containerOne;
    if (password != null)
    {
        KerberosPrincipal perprale = new KerberosPrincipal(""test"");
        KerberosKey key = new KerberosKey(perprale, password.toCharArray(), null);
        IO.writeLine(key.toString());
    }
}",66,5,"principal:perprale,",32,0.06944615046183268,Beam
422,,,114,5,,550,1.068951948483785,0
423,,,66,2,,219,0.42150912682215375,0
424,,,280,10,,2847,4.999790048599243,0
425,,,303,6,,1022,1.807532286643982,0
426,,,290,9,,2345,4.038006194432577,0
427,,,226,8,,2455,4.215414802233378,0
428,,,89,3,,400,0.6840052207310995,0
429,,,284,7,,1443,2.4978067278862,0
430,,,464,12,,5319,9.59962104956309,0
431,,,315,10,,3038,5.233320156733195,0
432,,,155,3,,218,0.4276070276896159,0
433,,,49,3,,324,0.5845907727877299,0
434,,,138,5,,1015,1.8574690500895181,0
435,,,144,5,,999,1.8007947603861492,0
436,,,206,6,,1401,2.597367278734843,0
437,,,253,7,,1386,2.419031095504761,0
438,,,77,4,,480,0.8891441106796265,0
439,,,94,4,,524,0.9825404326121012,0
440,,,90,3,,360,0.6926325122515361,0
441,,,325,11,,4289,8.024529306093852,0
442,,,269,10,,2898,5.423584401607513,0
443,,,304,9,,3286,6.271135902404785,0
444,,,278,9,,2969,5.558302406469981,0
445,,,192,7,,914,1.686241094271342,0
446,,,305,6,,1052,1.9993579308191936,0
447,,,332,6,,952,1.7812106649080912,0
448,,,116,6,,1116,2.0877104719479878,0
449,,,468,11,,4419,8.592059576511383,0
450,,,341,10,,3987,7.382526584466299,0
451,,,35,2,,231,0.430902894337972,0
452,,,441,13,,3507,7.506894985834758,0
453,,,218,7,,1946,3.5869221369425457,0
454,,,280,6,,1047,1.9019377867380778,0
455,,,188,13,,5039,9.020034571488699,0
456,,,275,7,,1880,3.189543004830678,0
457,,,93,3,,318,0.5436983148256938,0
458,,,394,9,,2937,5.368396850426992,0
459,,,278,12,,3583,6.263238195578257,0
460,,,248,9,,1621,2.827117745081584,0
461,,,145,7,,1442,2.5186598976453145,0
462,,,147,6,,1128,2.045919648806254,0
463,,,247,7,,1857,3.2327800075213116,0
464,,,297,9,,2414,4.1888720432917275,0
465,,,76,5,,1002,1.770560586452484,0
466,,,51,3,,199,0.40323274532953896,0
467,,,111,3,,405,0.7315651178359985,0
468,,,247,9,,1439,2.4800203243891397,0
469,,,69,3,,314,0.5418904940287272,0
470,,,38,3,,268,0.48979016542434695,0
471,,,280,12,,3585,6.314239517847697,0
472,,,76,3,,400,0.7212724407513936,0
473,,,419,11,,4678,8.314897044499714,0
474,,,62,4,,479,0.8409598429997762,0
475,,,204,5,,923,1.6281642993291219,0
476,,,323,9,,3122,5.302471443017324,0
477,,,143,3,,400,0.7002669692039489,0
478,,,146,5,,1005,1.731557814280192,0
479,,,658,10,,3217,5.490222390492757,0
480,,,63,4,,567,1.0192516207695008,0
481,,,279,8,,2478,4.156430852413178,0
482,,,55,4,,700,1.1764553785324097,0
483,,,255,9,,1789,2.951636290550232,0
484,,,164,8,,1633,2.841659637292226,0
485,,,109,4,,594,1.0153328975041707,0
486,,,335,10,,3944,6.8321045398712155,0
487,,,234,6,,1217,2.1630857984224954,0
488,,,75,3,,405,0.7136362552642822,0
489,,,106,6,,697,1.3056292255719504,0
490,,,59,4,,485,0.8530733942985534,0
491,,,63,4,,598,1.0339365204175313,0
492,,,613,13,,6686,11.220142833391826,0
493,,,68,4,,509,0.8792922059694926,0
494,,,264,9,,2077,3.4830427408218383,0
495,,,59,4,,468,0.8910502751668294,0
496,,,276,9,,2696,4.654979793230693,0
497,,,714,13,,6520,10.95304607152939,0
498,,,360,11,,4796,7.851371733347575,0
499,,,416,9,,3282,5.4891629656155905,0
500,,,40,3,,268,0.4458027005195618,0
501,,,40,3,,206,0.36502373218536377,0
502,,,76,4,,588,1.029812228679657,0
503,,,119,8,,1427,2.5107583443323773,0
504,,,138,6,,1112,1.9047389189402262,0
505,,,204,6,,1492,2.577323492368062,0
506,,,271,9,,2189,3.7500350435574847,0
507,,,296,10,,3804,6.201432434717814,0
508,,,40,3,,268,0.4247504671414693,0
509,,,50,4,,505,0.8043968598047893,0
510,,,255,8,,2750,4.510682408014933,0
511,,,138,5,,850,1.4423993865648905,0
512,,,432,11,,4898,8.191531304518382,0
513,,,266,6,,910,1.5170817057291666,0
514,,,66,5,,594,1.0581819852193197,0
515,,,275,8,,2469,4.065447231133779,0
516,,,173,11,,3408,5.901195267836253,0
517,,,265,8,,2152,3.620026938120524,0
518,,,43,4,,514,0.8600083351135254,0
519,,,38,3,,300,0.4990456501642863,0
520,,,100,5,,668,1.1496107856432596,0
521,,,328,6,,940,1.6058424830436706,0
522,,,110,7,,1631,2.7703877727190656,0
523,,,156,9,,2699,4.616062299410502,0
524,,,274,10,,3348,5.486264725526174,0
525,,,188,10,,2619,4.5268591006596886,0
526,,,107,5,,750,1.3213857611020405,0
527,,,540,7,,1884,3.1656890511512756,0
528,,,159,6,,1440,2.4623447259267173,0
529,,,80,4,,510,0.8857934554417928,0
530,,,95,3,,479,0.8125444412231445,0
531,,,58,2,,163,0.2728806257247925,0
532,,,73,4,,420,0.7262414773305257,0
533,,,314,12,,4533,7.836428860823314,0
534,,,296,10,,3561,6.040449245770772,0
535,,,174,8,,1461,2.4150160471598308,0
536,,,136,9,,2339,4.208952041467031,0
537,,,449,13,,7138,11.99562989473343,0
538,,,258,8,,2285,3.7131823738416037,0
539,,,60,3,,318,0.5419106880823771,0
540,,,353,10,,3045,5.143760097026825,0
541,,,162,8,,1854,3.22248615026474,0
542,,,42,5,,596,1.0449503103892008,0
543,,,60,4,,561,0.9958168586095174,0
544,,,173,6,,1144,2.008585838476817,0
545,,,408,14,,5252,10.287397766113282,0
546,,,149,8,,2139,3.626686322689056,0
547,,,161,8,,1971,3.2585307518641153,0
548,,,58,5,,595,1.2116463343302408,0
549,,,239,14,,6454,10.698490460713705,0
550,,,338,12,,3804,6.335598854223887,0
551,,,92,3,,345,0.6528635382652282,0
552,,,46,4,,388,0.6713340640068054,0
553,,,446,13,,5067,8.452884984016418,0
554,,,61,3,,400,0.6909786820411682,0
555,,,86,5,,839,1.4360716581344604,0
556,,,122,3,,400,0.6661000490188599,0
557,,,268,7,,2099,3.352846682071686,0
558,,,155,9,,2001,3.573237673441569,0
559,,,291,9,,2402,4.0637884060541785,0
560,,,290,8,,2412,3.8955174326896667,0
561,,,115,5,,846,1.4962586085001628,0
562,,,259,8,,1822,3.075581439336141,0
563,,,486,13,,6871,11.38525422414144,0
564,,,79,3,,405,0.7164969364802043,0
565,,,284,9,,3133,5.129711906115214,0
566,,,101,3,,400,0.6556292096773784,0
567,,,347,10,,2955,4.968737562497457,0
568,,,322,13,,6179,10.292264552911123,0
569,,,124,4,,573,0.9753863294919332,0
570,,,63,3,,239,0.455863086382548,0
571,,,159,6,,1188,2.053843907515208,0
572,,,85,3,,314,0.5530703266461691,0
573,,,417,12,,6155,10.33896017074585,0
574,,,132,8,,1322,2.3603888233502706,0
575,,,167,6,,862,1.4285959601402283,0
576,,,248,8,,2668,4.429991181691488,0
577,,,268,9,,1897,3.1790342211723326,0
578,,,265,9,,1758,2.8420357584953306,0
579,,,128,8,,1577,2.632849597930908,0
580,,,341,10,,2780,4.637794661521911,0
581,,,88,3,,314,0.5279402454694112,0
582,,,344,10,,4210,6.943455600738526,0
583,,,289,8,,1915,3.249959190686544,0
584,,,71,3,,318,0.5491637746493022,0
585,,,163,6,,901,1.457662284374237,0
586,,,76,6,,1286,2.0630849599838257,0
587,,,315,8,,2504,4.110495074590047,0
588,,,274,9,,2967,4.8712892214457195,0
589,,,214,8,,1360,2.213702328999837,0
590,,,303,9,,3186,5.301527671019236,0
591,,,296,9,,3003,4.972044976552327,0
592,,,147,3,,214,0.3894153118133545,0
593,,,100,5,,592,1.0625245014826457,0
594,,,131,6,,995,1.6935599803924561,0
595,,,315,10,,2008,3.2868712226549786,0
596,,,375,9,,3437,5.71543261607488,0
597,,,419,12,,3116,5.171669594446818,0
598,,,145,6,,992,1.7179340521494548,0
599,,,57,4,,531,0.8980971256891886,0
600,,,42,4,,375,0.6508444547653198,0
601,,,60,2,,175,0.2789641539255778,0
602,,,83,3,,268,0.4341397245724996,0
603,,,45,4,,383,0.6823722362518311,0
604,,,143,7,,1393,2.3826525767644244,0
605,,,280,10,,2077,3.396632134914398,0
606,,,293,9,,3329,5.533708151181539,0
607,,,250,8,,2691,4.431698230902354,0
608,,,56,5,,789,1.3714463114738464,0
609,,,70,3,,400,0.6722706158955892,0
610,,,65,4,,820,1.3994916121164958,0
611,,,182,7,,1893,3.1254730741182963,0
612,"private void Test580260() throws Throwable
{
    int data;
    data = Integer.MIN_VALUE;  
    {
        ServerSocket listener = null;
        Socket socket = null;
        BufferedReader readerBuffered = null;
        InputStreamReader readerInputStream = null;
        try
        {
            listener = new ServerSocket(39543);
            socket = listener.accept();
            readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
            readerBuffered = new BufferedReader(readerInputStream);
            String stringNumber = readerBuffered.readLine();
            if (stringNumber != null)  
            {
                try
                {
                    data = Integer.parseInt(stringNumber.trim());
                }
                catch(NumberFormatException exceptNumberFormat)
                {
                    IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", exceptNumberFormat);
                }
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
        }
        finally
        {
            try
            {
                if (readerBuffered != null)
                {
                    readerBuffered.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
            }
            try
            {
                if (readerInputStream != null)
                {
                    readerInputStream.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
            }
            try
            {
                if (socket != null)
                {
                    socket.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
            }
            try
            {
                if (listener != null)
                {
                    listener.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
            }
        }
    }
    for (int k = 0; k < 1; k++)
    {
        int array[] = { 0, 1, 2, 3, 4 };
        if (data >= 0 && data < array.length)
        {
            IO.writeLine(array[data]);
        }
        else
        {
            IO.writeLine(""Array index out of bounds"");
        }
    }
}","private void preender() throws Throwable
{
    int zero;
    zero = Integer.MIN_VALUE;  
    {
        ServerSocket preender = null;
        Socket ssl = null;
        BufferedReader r = null;
        InputStreamReader readerInputStream = null;
        try
        {
            preender = new ServerSocket(39543);
            ssl = preender.accept();
            readerInputStream = new InputStreamReader(ssl.getInputStream(), ""UTF-8"");
            r = new BufferedReader(readerInputStream);
            String StringName = r.readLine();
            if (StringName != null)  
            {
                try
                {
                    zero = Integer.parseInt(StringName.trim());
                }
                catch(NumberFormatException fe)
                {
                    IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", fe);
                }
            }
        }
        catch (IOException exceptEO)
        {
            IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptEO);
        }
        finally
        {
            try
            {
                if (r != null)
                {
                    r.close();
                }
            }
            catch (IOException exceptEO)
            {
                IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptEO);
            }
            try
            {
                if (readerInputStream != null)
                {
                    readerInputStream.close();
                }
            }
            catch (IOException exceptEO)
            {
                IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptEO);
            }
            try
            {
                if (ssl != null)
                {
                    ssl.close();
                }
            }
            catch (IOException exceptEO)
            {
                IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptEO);
            }
            try
            {
                if (preender != null)
                {
                    preender.close();
                }
            }
            catch (IOException exceptEO)
            {
                IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptEO);
            }
        }
    }
    for (int b = 0; b < 1; b++)
    {
        int collection[] = { 0, 1, 2, 3, 4 };
        if (zero >= 0 && zero < collection.length)
        {
            IO.writeLine(collection[zero]);
        }
        else
        {
            IO.writeLine(""Array index out of bounds"");
        }
    }
}",386,11,"socket:ssl,readerBuffered:r,data:zero,exceptNumberFormat:fe,stringNumber:StringName,listener:preender,array:collection,Test580260:preender,k:b,exceptIO:exceptEO,",3275,5.497626539071401,Beam
613,,,360,10,,3343,5.554581566651662,0
614,,,72,4,,605,1.0550514340400696,0
615,,,96,5,,563,1.0698418498039246,0
616,,,53,3,,319,0.5388118386268616,0
617,,,41,2,,175,0.2879130164782206,0
618,,,68,4,,531,0.9159406542778015,0
619,,,208,7,,1991,3.352019409338633,0
620,,,32,1,,51,0.10211198329925537,0
621,,,160,6,,820,1.424140171209971,0
622,,,199,7,,1802,3.042633899052938,0
623,,,273,9,,3175,5.5180147329966225,0
624,,,76,4,,500,0.8245291392008464,0
625,,,79,4,,524,0.8992632985115051,0
626,,,304,11,,4072,6.845685577392578,0
627,,,110,5,,720,1.2750857512156168,0
628,,,261,8,,1925,3.172807812690735,0
629,,,287,8,,2494,4.062808934847514,0
630,,,64,5,,489,0.9106088439623515,0
631,,,334,6,,958,1.5361964186032613,0
632,,,276,8,,2745,4.534653266270955,0
633,,,134,5,,934,1.5994547327359518,0
634,,,153,8,,1873,3.208752473195394,0
635,,,233,5,,1071,1.7515921473503113,0
636,,,271,9,,2175,3.6166417757670084,0
637,,,261,8,,2718,4.327443508307139,0
638,,,149,8,,2055,3.5009714365005493,0
639,,,185,8,,2163,3.568879421552022,0
640,,,180,3,,314,0.5663379470507304,0
641,,,948,12,,2425,4.970959639549255,0
642,,,50,4,,587,0.9837612231572469,0
643,,,438,13,,3252,6.187283301353455,0
644,,,295,12,,5089,8.41850162744522,0
645,,,65,3,,400,0.6994652231534322,0
646,,,347,10,,3501,5.899812642733256,0
647,,,103,6,,1168,2.0537152449289957,0
648,,,54,3,,365,0.5992829402287801,0
649,,,242,9,,1782,2.9907935738563536,0
650,,,141,3,,266,0.44492393334706626,0
651,,,87,4,,443,0.8119700074195861,0
652,,,209,9,,1443,2.429142204920451,0
653,,,199,6,,830,1.4051811178525289,0
654,,,495,13,,6510,11.159730684757232,0
655,,,235,9,,3076,5.17035858631134,0
656,,,47,2,,163,0.28243572314580284,0
657,,,424,15,,4941,8.599652004241943,0
658,,,194,4,,578,0.9537749052047729,0
659,,,108,3,,318,0.5539911190668741,0
660,,,60,3,,355,0.6039087653160096,0
661,,,355,7,,1545,2.5869733929634093,0
662,,,155,5,,659,1.13133651415507,0
663,,,280,8,,1936,3.2165223201115927,0
664,,,31,2,,159,0.28075727621714275,0
665,,,185,8,,1955,3.18402281999588,0
666,,,349,12,,4801,8.525165025393168,0
667,,,275,7,,1876,3.073575663566589,0
668,,,244,7,,1479,2.3602866609891255,0
669,,,35,2,,173,0.27661503156026207,0
670,,,122,5,,697,1.144792628288269,0
671,,,61,3,,405,0.6385765790939331,0
672,,,335,9,,3422,5.627149673302968,0
673,,,84,3,,405,0.6786068558692933,0
674,,,323,10,,3096,5.276481052239736,0
675,,,140,9,,2291,4.039140621821086,0
676,,,170,6,,888,1.5638564825057983,0
677,,,437,10,,3992,6.660129777590433,0
678,,,93,5,,718,1.2049333373705546,0
679,,,305,8,,2665,4.384403920173645,0
680,,,76,3,,400,0.6782259702682495,0
681,,,195,9,,2693,4.393688913186391,0
682,,,344,9,,3352,5.7375087658564246,0
683,,,113,7,,1022,1.793088146050771,0
684,,,237,8,,2484,4.211433859666188,0
685,,,256,6,,1541,2.6112328211466473,0
686,,,42,3,,268,0.4442374348640442,0
687,,,341,9,,2651,4.577083555857341,0
688,,,107,6,,1427,2.406505004564921,0
689,,,209,5,,675,1.1625073750813801,0
690,,,304,11,,4392,7.495645538965861,0
691,,,244,10,,4134,7.07523801724116,0
692,,,79,4,,511,0.8914869904518128,0
693,,,56,3,,268,0.4656110922495524,0
694,,,151,5,,874,1.5248151103655496,0
695,,,47,3,,318,0.5379146218299866,0
696,,,218,8,,2108,3.5451745708783466,0
697,,,389,14,,4448,8.722929386297862,0
698,,,236,5,,888,1.5002068996429443,0
699,,,125,3,,405,0.7397210478782654,0
700,,,452,9,,3257,5.6305723508199055,0
701,,,219,14,,6292,10.760025429725648,0
702,,,299,9,,2934,5.040916124979655,0
703,,,179,7,,1350,2.3747305194536845,0
704,,,346,9,,3499,5.896318435668945,0
705,,,45,2,,105,0.21619776089986165,0
706,,,322,8,,2428,4.093943913777669,0
707,,,141,9,,2513,4.466159951686859,0
708,,,312,9,,3489,5.785323671499888,0
709,,,277,9,,2986,5.073828073342641,0
710,,,328,10,,3963,6.785788329442342,0
711,,,80,4,,504,0.9166932702064514,0
712,,,77,3,,405,0.7038684407869975,0
713,,,78,4,,477,0.9299678405125936,0
714,,,67,3,,314,0.5540940125783285,0
715,,,155,9,,2445,4.155397689342498,0
716,,,95,4,,545,0.9140160163243611,0
717,,,143,6,,1207,2.105353355407715,0
718,,,42,3,,255,0.44793575604756675,0
719,,,62,3,,111,0.20792754093805949,0
720,,,91,2,,157,0.2766959428787231,0
721,,,62,4,,485,0.8101586620012919,0
722,,,285,8,,2469,4.139205161730448,0
723,,,74,3,,365,0.628902550538381,0
724,,,341,11,,2914,4.902992292245229,0
725,,,344,9,,3221,5.483249044418335,0
726,,,300,11,,4095,7.07950157324473,0
727,,,355,10,,3883,6.625860253969829,0
728,,,66,4,,426,0.7335244059562683,0
729,,,42,3,,299,0.5191995898882548,0
730,,,349,9,,2389,4.12544622818629,0
731,,,106,5,,558,1.019000275929769,0
732,,,220,7,,1884,3.168072772026062,0
733,,,277,10,,3208,5.372704855600992,0
734,,,364,10,,4336,7.421287810802459,0
735,,,37,3,,288,0.5168398102124532,0
736,,,307,9,,2066,3.4580814878145856,0
737,,,451,12,,5935,10.078205394744874,0
738,,,275,9,,3042,5.165856198469798,0
739,,,313,9,,2230,3.714769236246745,0
740,,,63,4,,590,1.037607459227244,0
741,,,66,3,,258,0.4671144366264343,0
742,,,26,2,,133,0.2791448990503947,0
743,,,211,7,,1835,3.066073266665141,0
744,,,120,4,,525,0.910097595055898,0
745,,,47,2,,219,0.4018751263618469,0
746,,,242,10,,3920,6.553177269299825,0
747,,,409,9,,3182,5.401247521241506,0
748,,,384,15,,5362,9.301221573352814,0
749,,,269,8,,2211,3.7684337298075357,0
750,,,64,3,,405,0.6471269806226094,0
751,,,250,5,,648,1.1073142965634664,0
752,,,333,11,,3936,7.131523203849793,0
753,,,498,12,,4620,7.815227691332499,0
754,,,307,10,,3781,6.446405784289042,0
755,,,320,9,,2261,3.819353338082631,0
756,,,159,9,,2319,4.100569562117259,0
757,,,436,10,,4023,6.751872996489207,0
758,,,70,3,,266,0.46873114506403607,0
759,,,251,8,,2391,4.127918557325999,0
760,,,445,10,,4331,7.197770122687022,0
761,,,473,11,,4360,7.4572033723195394,0
762,,,50,4,,458,0.8201732675234477,0
763,,,80,4,,425,0.7537828922271729,0
764,,,45,4,,358,0.6351787328720093,0
765,,,91,3,,405,0.6878339211146037,0
766,,,43,3,,343,0.6116265932718913,0
767,,,239,8,,2745,4.569932182629903,0
768,,,304,9,,3292,5.49833702246348,0
769,,,204,6,,1514,2.48527828057607,0
770,,,252,10,,2282,3.774141172568003,0
771,,,173,5,,854,1.4798925121625264,0
772,,,285,10,,3230,5.191175083319346,0
773,,,232,9,,3437,5.666786197821299,0
774,,,59,2,,159,0.2841585119565328,0
775,,,237,9,,1785,2.892546077569326,0
776,,,381,10,,3065,4.995305979251862,0
777,,,268,7,,1701,2.7681631604830423,0
778,,,59,3,,399,0.6973275661468505,0
779,,,113,5,,931,1.5666968464851379,0
780,,,63,4,,629,1.0080048004786173,0
781,,,149,8,,1884,3.352479998270671,0
782,,,261,7,,1821,3.090422201156616,0
783,,,371,10,,3996,6.718372603257497,0
784,,,105,3,,400,0.6635521690050761,0
785,,,89,4,,522,0.9201863487561543,0
786,,,325,10,,3619,6.1838962952295935,0
787,,,272,8,,1610,2.672817595799764,0
788,,,238,6,,1474,2.4072694063186644,0
789,,,153,6,,1217,2.0958887616793316,0
790,,,289,9,,2171,3.667660105228424,0
791,,,57,2,,163,0.2898726940155029,0
792,,,283,9,,2581,4.2896019458770756,0
793,,,97,4,,558,1.0009847084681194,0
794,,,40,3,,300,0.530258842309316,0
795,,,332,10,,3040,5.087652440865835,0
796,,,506,14,,5880,10.824552317460379,0
797,,,160,5,,853,1.5115169167518616,0
798,,,300,8,,2745,4.499279646078746,0
799,,,251,9,,1732,2.868647261460622,0
800,,,116,5,,666,1.124061107635498,0
801,,,360,10,,3992,6.562311406930288,0
802,,,63,4,,529,0.9324795047442118,0
803,,,336,7,,2104,3.462944809595744,0
804,,,121,9,,2695,4.778708406289419,0
805,,,129,5,,591,1.0384599328041078,0
806,,,215,8,,2476,4.03977864185969,0
807,,,68,3,,400,0.6567087570826212,0
808,,,239,7,,1634,2.688317592938741,0
809,,,214,7,,1139,1.9494331280390422,0
810,,,247,9,,1853,3.199835503101349,0
811,,,114,4,,534,0.9514735380808512,0
812,,,486,12,,5664,9.456605990727743,0
813,,,253,8,,2705,4.427782634894053,0
814,,,298,8,,2694,4.49559979836146,0
815,,,118,3,,405,0.6923312942186991,0
816,,,68,4,,630,1.077284284432729,0
817,,,139,9,,1761,3.058437689145406,0
818,,,254,9,,3366,5.589800043900808,0
819,,,65,3,,400,0.6633207559585571,0
820,,,200,6,,1062,1.810453232129415,0
821,,,84,4,,515,0.9046653151512146,0
822,,,113,5,,994,1.6513371467590332,0
823,,,46,3,,299,0.48658225138982136,0
824,,,354,10,,2845,4.573695226510366,0
825,,,50,3,,386,0.6201412598292033,0
826,,,58,3,,339,0.604158886273702,0
827,,,138,5,,765,1.322722840309143,0
828,,,347,10,,4117,6.892712728182475,0
829,,,85,4,,702,1.1386256019274394,0
830,,,43,2,,163,0.2901137351989746,0
831,,,117,7,,1455,2.4287221948305766,0
832,,,164,5,,562,0.9652664581934611,0
833,,,472,11,,4599,7.745227909088134,0
834,"public void Test334228(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        int [] data = (int [])streamObjectInput.readObject();
        IO.writeLine("""" + data.length);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test334228(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamFileObjectInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamFileObjectInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamFileObjectInput);
        int [] data = (int [])streamObjectInput.readObject();
        IO.writeLine("""" + data.length);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamFileObjectInput != null)
            {
                streamFileObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",195,7,"streamByteArrayInput:streamFileObjectInput,",32,0.06448074579238891,Beam
835,,,58,2,,131,0.25771339337031046,0
836,,,53,4,,617,1.0236306230227152,0
837,,,432,10,,4229,6.923959362506866,0
838,,,325,14,,6431,10.930869654814403,0
839,,,117,5,,892,1.590062137444814,0
840,,,277,8,,2469,4.080138961474101,0
841,,,195,8,,1459,2.4089541673660277,0
842,,,46,3,,206,0.3635399421056112,0
843,,,411,10,,3341,5.509238771597544,0
844,,,569,10,,4144,6.812932852904002,0
845,,,417,9,,3248,5.363729000091553,0
846,,,54,2,,219,0.381279989083608,0
847,,,143,5,,575,0.9948658267656962,0
848,,,30,3,,394,0.6639333566029867,0
849,,,71,5,,762,1.2630838751792908,0
850,,,101,4,,684,1.0859359820683798,0
851,,,92,3,,251,0.4642344196637472,0
852,,,174,8,,2089,3.66725842555364,0
853,,,122,6,,782,1.29428631067276,0
854,,,73,3,,282,0.5144812027613322,0
855,,,84,3,,283,0.5176233688990275,0
856,,,68,3,,405,0.6474510868390401,0
857,,,395,10,,3935,6.758082417647044,0
858,,,181,9,,1735,3.0057002385457356,0
859,,,273,9,,2261,3.8300437768300375,0
860,,,30,4,,619,1.084511125087738,0
861,,,298,5,,1071,1.8579999248186747,0
862,,,68,2,,231,0.3974632978439331,0
863,,,285,8,,2674,4.509173647562663,0
864,,,243,13,,5078,8.4212961713473,0
865,,,175,8,,1964,3.393311576048533,0
866,,,95,3,,282,0.4746175805727641,0
867,,,184,5,,659,1.1336478551228841,0
868,,,66,3,,405,0.6795303821563721,0
869,,,216,6,,1062,1.7908117691675822,0
870,,,310,10,,3299,5.634415702025096,0
871,,,78,3,,400,0.7027811805407206,0
872,,,251,8,,2392,3.9818717360496523,0
873,,,285,14,,6741,11.574090170860291,0
874,,,271,9,,2392,4.120208581288655,0
875,,,363,7,,1672,2.8425477027893065,0
876,,,168,8,,1986,3.474025324980418,0
877,,,145,8,,1848,3.304415269692739,0
878,,,210,8,,1731,2.8841244022051495,0
879,,,70,4,,526,0.8909028212229411,0
880,,,143,7,,1508,2.6277586976687113,0
881,,,125,5,,696,1.2028722127278646,0
882,,,65,3,,405,0.6670322338740031,0
883,,,328,11,,2776,4.632689762115478,0
884,,,323,10,,3078,5.362380146980286,0
885,,,131,3,,405,0.6792017022768656,0
886,,,56,5,,797,1.3572370767593385,0
887,,,74,3,,405,0.6371003786722819,0
888,,,441,16,,5072,8.670144406954448,0
889,,,56,2,,214,0.373706857363383,0
890,,,63,4,,444,0.7993801315625508,0
891,,,115,6,,1358,2.3277164578437803,0
892,,,238,8,,1384,2.1976240714391073,0
893,,,366,11,,5204,8.612769714991252,0
894,,,118,6,,1485,2.3857858141263324,0
895,,,111,3,,405,0.7136647780736287,0
896,,,200,7,,1729,2.743835671742757,0
897,,,411,9,,3029,4.965853007634481,0
898,,,317,10,,4055,6.600115422407786,0
899,,,278,5,,752,1.2250782608985902,0
900,,,66,4,,452,0.7919543107350667,0
901,,,232,6,,1278,2.1070231358210245,0
902,,,80,3,,268,0.4415849526723226,0
903,,,148,5,,818,1.397834555308024,0
904,,,61,4,,702,1.1585022489229837,0
905,,,333,11,,4862,7.962818948427836,0
906,,,42,3,,200,0.34303054014841716,0
907,,,312,9,,3432,5.498443682988484,0
908,,,275,9,,2221,3.626899945735931,0
909,,,204,8,,2251,3.757267900307973,0
910,,,364,10,,2792,4.627233624458313,0
911,,,64,2,,219,0.3712358792622884,0
912,,,52,4,,529,0.8677082538604737,0
913,,,52,2,,89,0.19265164931615195,0
914,,,183,11,,3826,6.101797974109649,0
915,,,115,5,,666,1.1460374037424723,0
916,,,161,3,,318,0.5196890354156494,0
917,,,144,6,,913,1.5663086771965027,0
918,,,296,8,,2693,4.3367450873057045,0
919,,,307,6,,952,1.5598188916842142,0
920,,,311,10,,3611,6.189133767286936,0
921,,,79,3,,255,0.43790899515151976,0
922,,,84,3,,304,0.5373158097267151,0
923,,,22,1,,17,0.04169025421142578,0
924,,,125,3,,405,0.6668425758679708,0
925,,,270,10,,3272,5.403429877758026,0
926,,,326,10,,2974,4.93504984776179,0
927,,,180,8,,1938,3.168648644288381,0
928,,,70,3,,405,0.669652259349823,0
929,,,655,11,,3798,6.295112574100495,0
930,,,60,3,,194,0.31567132472991943,0
931,,,128,3,,314,0.5039633631706237,0
932,,,222,6,,1329,2.156455361843109,0
933,,,46,4,,641,1.0514027635256449,0
934,,,277,7,,1233,2.020996288458506,0
935,,,468,11,,4611,7.736484257380168,0
936,,,362,10,,3941,6.563281357288361,0
937,,,208,8,,1337,2.252857784430186,0
938,,,278,9,,3066,4.9444885889689125,0
939,,,112,3,,360,0.601092783610026,0
940,,,176,3,,400,0.6928335706392924,0
941,,,333,11,,3215,5.2468755880991615,0
942,,,142,5,,878,1.5598968903223673,0
943,,,281,9,,2941,4.826344672838847,0
944,,,82,2,,159,0.27499675353368125,0
945,,,71,3,,405,0.6668421506881714,0
946,,,493,11,,4895,7.819430633385976,0
947,,,127,3,,400,0.6884474515914917,0
948,,,30,4,,596,1.0285740494728088,0
949,,,92,3,,324,0.5206588745117188,0
950,,,323,9,,2669,4.359730617205302,0
951,,,360,11,,5168,8.376779067516328,0
952,,,123,8,,2215,3.7301424980163573,0
953,,,275,9,,2135,3.5952720522880552,0
954,,,250,9,,1630,2.688828214009603,0
955,,,165,7,,1657,2.7026243368784586,0
956,,,54,2,,219,0.3400681734085083,0
957,,,249,9,,2886,4.693882727622986,0
958,,,112,5,,839,1.3260406335194905,0
959,,,207,8,,2182,3.550007708867391,0
960,,,261,7,,1816,3.0434464812278748,0
961,,,41,2,,175,0.29620936314264934,0
962,,,193,8,,1507,2.531110354264577,0
963,,,423,10,,3924,6.629719134171804,0
964,,,280,10,,3998,6.571791938940684,0
965,,,72,2,,175,0.2966490467389425,0
966,,,275,9,,3192,5.297532244523366,0
967,,,296,9,,3150,5.1248677213986715,0
968,"public void Test673787(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        String stringToEncrypt = ""Super secret Squirrel"";
        byte[] byteStringToEncrypt = stringToEncrypt.getBytes(""UTF-8"");
        SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
        Cipher aesCipher = Cipher.getInstance(""AES"");
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
        IO.writeLine(IO.toHex(byteCipherText));  
    }
}","public void Test673787(Vector<String> dataVector ) throws Throwable
{
    String seed = dataVector.remove(2);
    if (seed != null)
    {
        String stringTOEncSign = ""Super secret Squirrel"";
        byte[] byteStringToEncrypt = stringTOEncSign.getBytes(""UTF-8"");
        SecretKeySpec seedKeySu = new SecretKeySpec(seed.getBytes(""UTF-8""), ""AES"");
        Cipher aesCipher = Cipher.getInstance(""AES"");
        aesCipher.init(Cipher.ENCRYPT_MODE, seedKeySu);
        byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
        IO.writeLine(IO.toHex(byteCipherText));  
    }
}",111,8,"stringToEncrypt:stringTOEncSign,data:seed,secretKeySpec:seedKeySu,",668,1.0972147663434346,Beam
969,,,164,9,,1657,2.851042373975118,0
970,"public void Test285593(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test285593(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    Connection conn = null;
    Statement sslSession = null;
    ResultSet resultSet = null;
    try
    {
        conn = IO.getDBConnection();
        sslSession = conn.createStatement();
        resultSet = sslSession.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslSession != null)
            {
                sslSession.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (conn != null)
            {
                conn.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",220,7,"sqlStatement:sslSession,dbConnection:conn,",125,0.21770395040512086,Beam
971,,,299,9,,3268,5.426162735621134,0
972,,,293,10,,3694,5.8931585311889645,0
973,,,310,9,,2669,4.371438380082449,0
974,,,159,6,,1274,2.0540614128112793,0
975,,,83,3,,338,0.5582916855812072,0
976,,,419,15,,5492,9.49317774772644,0
977,,,275,8,,2688,4.4697359522183735,0
978,,,66,2,,175,0.2706214189529419,0
980,,,69,3,,267,0.42912233670552574,0
981,,,74,3,,405,0.6704473892847697,0
982,,,63,3,,405,0.7066993554433186,0
983,,,54,2,,174,0.32786596616109215,0
984,,,91,3,,251,0.44242427746454877,0
985,,,277,9,,1656,2.7227270166079203,0
986,,,312,9,,2966,4.882754627863566,0
987,,,75,4,,609,1.044457228978475,0
988,,,126,7,,1315,2.222684383392334,0
989,,,94,3,,405,0.6692259589831034,0
990,,,258,8,,2595,4.239467712243398,0
991,,,203,7,,1450,2.4158666769663495,0
992,,,88,3,,405,0.6883434375127157,0
993,,,268,5,,754,1.2917309522628784,0
994,,,140,9,,1536,2.6373366634051005,0
995,,,379,11,,4799,7.886317336559296,0
996,,,253,5,,772,1.2884087999661764,0
997,,,101,7,,1060,1.7639873584111532,0
998,,,322,10,,4276,7.092259383201599,0
999,,,338,9,,3186,5.199886659781138,0
1000,,,139,3,,400,0.6715149879455566,0
1001,,,212,8,,2310,3.716828755537669,0
1002,,,276,6,,1290,2.1538458625475565,0
1003,,,238,5,,747,1.2672346313794454,0
1004,,,68,3,,318,0.5205571571985881,0
1005,,,503,12,,5261,8.871628379821777,0
1006,,,275,9,,1608,2.563764448960622,0
1007,,,49,3,,320,0.5546346465746562,0
1008,,,273,9,,3166,5.127937416235606,0
1009,,,110,6,,1203,2.096094024181366,0
1010,"private void Test676011() throws Throwable
{
    if (IO.staticTrue)
    {
        int intOne = 1, intFive = 5;
        IO.writeLine(intOne);
        intOne = intFive;
        IO.writeLine(intOne);
    }
}","private void TEST676302() throws Throwable
{
    if (IO.staticTrue)
    {
        int objectOne = 1, interOne = 5;
        IO.writeLine(objectOne);
        objectOne = interOne;
        IO.writeLine(objectOne);
    }
}",46,3,"intOne:objectOne,intFive:interOne,Test676011:TEST676302,",162,0.29498740037282306,Beam
1011,,,50,2,,175,0.31442051331202187,0
1012,,,252,8,,1480,2.4566505988438925,0
1013,,,74,3,,266,0.4427871028582255,0
1014,,,206,8,,2124,3.439656376838684,0
1015,,,326,9,,3299,5.271179938316346,0
1016,,,285,8,,2253,3.6870905200640363,0
1017,,,104,6,,947,1.6918180664380391,0
1018,,,47,3,,405,0.6877970774968465,0
1019,,,251,14,,5970,9.567472688357036,0
1020,,,201,8,,1234,1.990286648273468,0
1021,,,220,6,,1357,2.2423267086346943,0
1022,,,249,14,,5491,8.832174837589264,0
1023,"public void Test237070(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    if (data != null)
    {
        System.out.format(data);
    }
}","public void Test237070(Object dataO ) throws Throwable
{
    String buffer = (String)dataO;
    if (buffer != null)
    {
        System.out.format(buffer);
    }
}",37,3,"data:buffer,dataObject:dataO,",54,0.1000327229499817,Beam
1024,,,189,10,,2681,4.657384220759074,0
1025,,,84,4,,629,1.0465866923332214,0
1026,,,58,2,,173,0.2818821350733439,0
1027,,,90,4,,566,0.9156102975209554,0
1028,,,198,6,,1143,1.8756569385528565,0
1029,,,323,11,,4442,7.295972609519959,0
1030,,,288,9,,3068,5.134283379713694,0
1031,,,269,9,,3163,5.177310156822204,0
1032,,,121,3,,405,0.7174049496650696,0
1033,,,298,10,,3072,5.13256764014562,0
1034,,,372,10,,2546,4.105894037087759,0
1035,,,142,5,,952,1.6144729614257813,0
1036,,,27,2,,175,0.3141230344772339,0
1037,,,110,7,,1309,2.1360192616780598,0
1038,,,143,8,,1628,2.6617023229598997,0
1039,,,210,8,,2261,3.6487706025441486,0
1040,,,62,4,,587,1.0008145570755005,0
1041,,,402,9,,3093,4.908342794577281,0
1042,,,62,2,,175,0.29372594753901166,0
1043,,,66,5,,884,1.4176281174023946,0
1044,,,58,2,,163,0.28851231733957927,0
1045,,,143,8,,1987,3.301935080687205,0
1046,,,267,8,,1663,2.69462282260259,0
1047,,,284,8,,2469,3.9683515469233197,0
1048,,,68,3,,268,0.40302403767903644,0
1049,,,299,10,,4034,6.4621496319770815,0
1050,,,194,8,,1784,3.2070040702819824,0
1051,,,62,5,,775,1.2118781526883444,0
1052,,,46,2,,208,0.34837061166763306,0
1053,,,418,9,,3062,4.9936523795127865,0
1054,,,282,8,,2504,4.01020089785258,0
1055,,,86,3,,318,0.4693944176038106,0
1056,,,233,6,,1252,2.0802409489949545,0
1057,,,436,10,,2845,4.596912988026937,0
1058,,,258,10,,1774,2.9386783162752788,0
1059,,,385,10,,3957,6.555412256717682,0
1060,,,214,7,,1410,2.2796000719070433,0
1061,,,75,6,,739,1.2381444136301676,0
1062,,,94,3,,405,0.658008869489034,0
1063,,,234,8,,2533,3.9990628242492674,0
1064,,,203,9,,2851,4.604536739985148,0
1065,,,354,9,,2597,4.324649139245351,0
1066,,,407,10,,4331,7.045419522126516,0
1067,,,252,8,,2000,3.3186514616012572,0
1068,,,233,6,,1405,2.2932021299997967,0
1069,,,384,10,,3992,6.428776486714681,0
1070,"public void Test381859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringToEncrypt = ""Super secret Squirrel"";
            byte[] byteStringToEncrypt = stringToEncrypt.getBytes(""UTF-8"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
            Cipher aesCipher = Cipher.getInstance(""AES"");
            aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
            IO.writeLine(IO.toHex(byteCipherText));  
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test381859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringWillExplode = ""Super secret Squirrel"";
            byte[] byteStringToEncrypt = stringWillExplode.getBytes(""UTF-8"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
            Cipher aesCipher = Cipher.getInstance(""AES"");
            aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
            IO.writeLine(IO.toHex(byteCipherText));  
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",266,12,"stringToEncrypt:stringWillExplode,",32,0.051625967025756836,Beam
1071,,,159,8,,1892,3.2350590308507283,0
1072,,,202,7,,1953,3.1733067194620768,0
1073,,,488,12,,6129,9.832812039057414,0
1074,,,64,1,,49,0.10316031376520793,0
1075,,,253,9,,2706,4.389482390880585,0
1076,,,364,10,,3243,5.286263370513916,0
1077,,,98,4,,653,1.0901033560434976,0
1078,,,30,2,,159,0.27519340117772423,0
1079,,,49,2,,131,0.25083658695220945,0
1080,,,135,4,,640,1.0454000194867452,0
1081,,,95,2,,175,0.2973379890124003,0
1082,,,108,4,,577,0.9741457263628642,0
1083,,,106,3,,170,0.3145680069923401,0
1084,,,49,2,,163,0.2966160853703817,0
1085,,,118,4,,684,1.0891489227612814,0
1086,,,353,9,,2700,4.413609119256337,0
1087,,,239,8,,2131,3.5595723430315656,0
1088,,,131,8,,2181,3.6312556982040407,0
1089,,,71,4,,401,0.7284074465433756,0
1090,,,59,4,,439,0.7559759577115377,0
1091,,,266,9,,2074,3.398131263256073,0
1092,,,281,8,,2504,4.174790612856547,0
1093,,,201,8,,1301,2.1112526655197144,0
1094,,,212,9,,1732,2.823712420463562,0
1095,,,60,3,,318,0.562930417060852,0
1096,,,296,8,,2281,3.814076864719391,0
1097,,,248,7,,1429,2.3047677914301556,0
1098,,,259,9,,2062,3.5060364802678428,0
1099,,,365,9,,3169,5.1246755441029865,0
1100,,,134,9,,1555,2.853908455371857,0
1101,,,342,6,,958,1.517117162545522,0
1102,,,123,9,,3074,5.1556621869405115,0
1103,,,200,8,,1409,2.286089662710826,0
1104,,,34,1,,35,0.07353949546813965,0
1105,,,67,4,,472,0.8301927049954733,0
1106,,,99,4,,516,0.913018790880839,0
1107,,,65,3,,405,0.652407685915629,0
1108,,,363,10,,4119,6.611124471823374,0
1109,,,110,8,,1280,2.1527411977450055,0
1110,,,336,8,,1675,2.7708170215288797,0
1111,,,156,5,,816,1.3781672557195028,0
1112,,,281,7,,1479,2.3940465450286865,0
1113,,,58,3,,338,0.5802544593811035,0
1114,,,551,13,,7114,11.776822463671367,0
1115,,,256,9,,3162,5.162864947319031,0
1116,,,341,9,,3237,5.188823799292247,0
1117,,,295,9,,3206,5.2205368439356485,0
1118,,,67,3,,405,0.6945888280868531,0
1119,,,105,5,,830,1.4701852957407633,0
1120,,,76,3,,318,0.5165879567464192,0
1121,,,363,7,,1645,2.627580205599467,0
1122,,,27,2,,175,0.2780443072319031,0
1123,,,74,3,,400,0.6510276039441426,0
1124,,,275,8,,1856,2.9240843892097472,0
1125,,,97,4,,611,1.0233354250590005,0
1126,,,142,5,,708,1.2331356565157572,0
1127,,,252,10,,3318,5.393888155619304,0
1128,,,322,9,,2865,4.641411145528157,0
1129,,,58,2,,163,0.2755282004674276,0
1130,,,303,8,,2692,4.349586514631907,0
1131,,,90,3,,314,0.5071687221527099,0
1132,,,171,8,,1848,3.1556798497835796,0
1133,,,340,11,,5128,8.336091323693593,0
1134,,,178,7,,1171,1.9206417004267375,0
1135,,,449,11,,4147,6.513604791959127,0
1136,,,90,5,,804,1.2845678687095643,0
1137,,,260,9,,1889,3.0715577006340027,0
1138,,,110,3,,314,0.5007856051127116,0
1139,,,87,3,,400,0.63984534740448,0
1140,,,401,14,,4397,8.38117385705312,0
1141,,,363,11,,4675,7.434040935834249,0
1142,,,266,8,,2201,3.5549729386965434,0
1143,,,77,3,,405,0.6716199715932211,0
1144,,,67,4,,482,0.8137118577957153,0
1145,,,311,11,,3401,5.425201173623403,0
1146,,,268,9,,3395,5.319401943683625,0
1147,,,346,9,,3437,5.503115173180898,0
1148,,,85,3,,314,0.5251468141873677,0
1149,,,298,10,,3372,5.322429927190145,0
1150,,,144,7,,1413,2.351037033398946,0
1151,,,176,5,,1016,1.6831647276878356,0
1152,,,63,4,,549,0.9357460776964823,0
1153,,,103,6,,1389,2.271327090263367,0
1154,,,51,3,,234,0.4746013124783834,0
1155,,,70,3,,400,0.6657207290331523,0
1156,,,428,14,,3748,7.153085629145305,0
1157,,,184,11,,2545,4.024910144011179,0
1158,,,178,8,,2069,3.373050018151601,0
1159,,,187,8,,2195,3.5109835624694825,0
1160,,,353,10,,2814,4.397972047328949,0
1161,,,320,9,,2838,4.515351517995199,0
1162,,,264,10,,2197,3.5016011714935305,0
1163,,,57,4,,506,0.7779480616251627,0
1164,,,136,3,,314,0.5330926497777303,0
1165,,,285,8,,2420,3.8523504455884297,0
1166,,,98,4,,528,0.8812057733535766,0
1167,,,247,7,,2104,3.2775675217310587,0
1168,,,86,4,,560,0.8705408294995626,0
1169,,,122,5,,827,1.3063942869504293,0
1170,,,92,6,,1417,2.233564750353495,0
1171,,,181,7,,1472,2.3061137517293293,0
1172,"public void Test227430(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        String stringTrimmed = data.trim();
        IO.writeLine(stringTrimmed);
    }
}","public void Test227430(Vector<String> dataVector ) throws Throwable
{
    String DATA = dataVector.remove(2);
    if (DATA != null)
    {
        String stringTramed = DATA.trim();
        IO.writeLine(stringTramed);
    }
}",49,4,"stringTrimmed:stringTramed,data:DATA,",94,0.151859180132548,Beam
1173,,,171,8,,1601,2.550149122873942,0
1174,,,331,7,,1549,2.46375603278478,0
1175,,,72,4,,517,0.8191681663195293,0
1176,,,390,12,,4579,7.698205860455831,0
1177,,,378,11,,4731,7.498509995142618,0
1178,,,118,3,,405,0.6303112705548605,0
1179,,,253,8,,2650,4.13534748951594,0
1180,,,51,4,,507,0.8155718127886454,0
1181,,,318,7,,2064,3.2497171640396116,0
1182,,,234,6,,1341,2.099612065156301,0
1183,,,227,10,,2168,3.461930056413015,0
1184,,,87,4,,560,0.9144305030504862,0
1185,,,247,6,,1438,2.31266090075175,0
1186,,,378,12,,3759,6.265695011615753,0
1187,,,261,8,,1960,3.0932512919108075,0
1188,,,369,10,,4269,6.75292311112086,0
1189,,,111,5,,1035,1.7221082727114359,0
1190,,,125,7,,1590,2.5666562636693318,0
1191,,,327,9,,2838,4.579193413257599,0
1192,,,257,8,,2755,4.389968808492025,0
1193,,,94,4,,475,0.8007109045982361,0
1194,,,222,14,,4584,7.346435503164927,0
1195,,,273,7,,2099,3.366345640023549,0
1196,,,243,9,,2608,4.202112571398417,0
1197,,,117,9,,2151,3.5409438292185467,0
1198,,,413,13,,3353,6.414435728391012,0
1199,,,306,13,,5026,8.211015768845876,0
1200,,,97,3,,365,0.6020070711771647,0
1201,,,84,4,,629,1.0293382128079733,0
1202,,,50,3,,357,0.6159040530522665,0
1203,,,186,9,,2597,4.280453479290008,0
1204,,,162,7,,1992,3.2192298690478007,0
1205,,,70,4,,486,0.8285064260164897,0
1206,,,223,13,,4762,7.5777294357617695,0
1207,,,122,3,,405,0.6657627622286478,0
1208,,,43,5,,599,0.969014306863149,0
1209,,,153,8,,1887,3.1396042903264365,0
1210,,,71,5,,921,1.5476033369700113,0
1211,,,530,10,,4018,6.4756121436754865,0
1212,,,387,10,,3915,6.272203369935354,0
1213,,,111,8,,2143,3.413221299648285,0
1214,,,239,6,,1027,1.7038175304730734,0
1215,,,102,5,,698,1.186011544863383,0
1216,,,130,8,,1624,2.6421578764915465,0
1217,,,215,7,,1232,1.9497257351875306,0
1218,,,122,6,,1065,1.6552851359049479,0
1219,,,256,7,,2009,3.2536030650138854,0
1220,,,483,11,,4687,7.411299741268158,0
1221,,,76,2,,219,0.3758399566014608,0
1222,,,328,6,,1046,1.7046114563941956,0
1223,,,45,2,,119,0.20341637929280598,0
1224,,,186,8,,2087,3.315786723295848,0
1225,,,98,4,,629,1.004771395524343,0
1226,,,67,2,,219,0.3628402352333069,0
1227,,,240,3,,336,0.5214361627896626,0
1228,,,55,2,,181,0.32579147020975746,0
1229,,,85,3,,400,0.6192943771680196,0
1230,"public void Test702040(LinkedList<String> dataLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = dataLinkedList.remove(2);
    if (data != null)
    {
        data = URLEncoder.encode(data, ""UTF-8"");
        response.addHeader(""Location"", ""/author.jsp?lang="" + data);
    }
}","public void test701340(LinkedList<String> dataLinkedsList , HttpServletRequest resource, HttpServletResponse host) throws Throwable
{
    String no = dataLinkedsList.remove(2);
    if (no != null)
    {
        no = URLEncoder.encode(no, ""UTF-8"");
        host.addHeader(""Location"", ""/author.jsp?lang="" + no);
    }
}",61,5,"data:no,response:host,request:resource,Test702040:test701340,dataLinkedList:dataLinkedsList,",731,1.203158926963806,Beam
1231,,,60,3,,359,0.5972665230433146,0
1232,,,71,3,,401,0.6688686927159627,0
1233,,,205,7,,1231,1.9221416473388673,0
1234,,,198,10,,3282,5.25208842754364,0
1235,,,190,6,,1459,2.3533886591593425,0
1236,,,63,4,,510,0.8213623722394308,0
1237,,,38,3,,288,0.46993026733398435,0
1238,,,37,3,,268,0.410248327255249,0
1239,,,282,8,,2464,3.960601226488749,0
1240,,,54,2,,159,0.24933529297510784,0
1241,,,282,12,,3460,5.6902795195579525,0
1242,,,144,5,,788,1.2846044739087423,0
1243,,,68,2,,163,0.2734756787618001,0
1244,,,80,3,,400,0.6568893790245056,0
1245,,,347,11,,4879,7.787319509188334,0
1246,,,295,9,,3321,5.228544314702352,0
1247,,,136,9,,2179,3.5896857817967733,0
1248,,,233,9,,3098,5.067913627624511,0
1249,,,148,5,,800,1.3285950660705566,0
1250,,,138,7,,1526,2.4130144119262695,0
1251,,,57,2,,214,0.35641215642293295,0
1252,,,303,10,,2602,4.076720178127289,0
1253,,,441,12,,5862,9.345241177082062,0
1254,,,212,8,,2360,3.7993664065996806,0
1255,,,313,10,,2840,4.561241765817006,0
1256,,,294,9,,3217,5.122143872578939,0
1257,,,150,3,,405,0.6546917001406352,0
1258,,,95,3,,343,0.5488012313842774,0
1259,,,221,8,,2745,4.300874483585358,0
1260,,,247,8,,1634,2.638690948486328,0
1261,,,130,7,,1362,2.1397263447443646,0
1262,,,138,8,,1610,2.6563632011413576,0
1263,,,195,9,,2308,3.6145182212193805,0
1264,,,238,9,,2468,3.894425356388092,0
1265,,,157,6,,779,1.2456130584081013,0
1266,,,340,11,,4345,6.85980794429779,0
1267,,,316,10,,4331,6.859416282176971,0
1268,"private void Test105048()
{
    String stringInput = """";
    IO.writeLine(""Enter a string: "");
    boolean isError = false;
    BufferedReader readerBuffered = null;
    InputStreamReader readerInputStream = null;
    try
    {
        readerInputStream = new InputStreamReader(System.in, ""UTF-8"");
        readerBuffered = new BufferedReader(readerInputStream);
        stringInput = readerBuffered.readLine();
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
    }
    finally 
    {
        try 
        {
            if (readerBuffered != null) 
            {
                readerBuffered.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
            isError = true;
        }
        try 
        {
            if (readerInputStream != null) 
            {   
                readerInputStream.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
            isError = true;
        }
    }
 (isError) 
    {
eturn; 
    }
    if (stringInput.contentEquals(""true""))
    {
        IO.writeLine(""sometimes prints"");
    }
}","private void string()
{
    String ret = """";
    IO.writeLine(""Enter a string: "");
    boolean nisAuto = false;
    BufferedReader input = null;
    InputStreamReader readerInputSt = null;
    try
    {
        readerInputSt = new InputStreamReader(System.in, ""UTF-8"");
        input = new BufferedReader(readerInputSt);
        ret = input.readLine();
    }
    catch (IOException ExceptionEO)
    {
        IO.logger.log(Level.WARNING, ""Error with stream reading"", ExceptionEO);
    }
    finally 
    {
        try 
        {
            if (input != null) 
            {
                input.close();
            }
        }
        catch (IOException ExceptionEO)
        {
            IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ExceptionEO);
            nisAuto = true;
        }
        try 
        {
            if (readerInputSt != null) 
            {   
                readerInputSt.close();
            }
        }
        catch (IOException ExceptionEO)
        {
            IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", ExceptionEO);
            nisAuto = true;
        }
    }
 (nisAuto) 
    {
ortodo; 
    }
    if (ret.contentEquals(""true""))
    {
        IO.writeLine(""sometimes prints"");
    }
}",202,7,"readerInputStream:readerInputSt,stringInput:ret,readerBuffered:input,Test105048:string,isError:nisAuto,exceptIO:ExceptionEO,eturn:ortodo,",821,1.337371548016866,Beam
1269,,,111,3,,405,0.6581216772397359,0
1270,,,88,5,,456,0.8584787805875143,0
1271,,,135,3,,314,0.5026662190755208,0
1272,,,164,6,,977,1.593516218662262,0
1273,,,170,8,,1410,2.277642075220744,0
1274,,,111,3,,318,0.504632027943929,0
1275,,,246,6,,1360,2.116052051385244,0
1276,,,302,10,,3802,5.992048947016398,0
1277,,,93,3,,375,0.6191188931465149,0
1278,,,84,5,,520,0.982515295346578,0
1279,,,251,8,,1690,2.6247742136319476,0
1280,,,89,6,,892,1.4583598017692565,0
1281,,,293,10,,3298,5.249794769287109,0
1282,,,290,9,,3230,5.219740684827169,0
1283,,,310,10,,3752,6.160247937838236,0
1284,,,63,4,,473,0.7935722311337788,0
1285,,,249,8,,2434,3.9582945386568706,0
1286,,,42,4,,382,0.6429714322090149,0
1287,,,166,8,,2068,3.3558236996332806,0
1288,,,504,12,,6273,10.011506628990173,0
1289,,,217,7,,2104,3.347588527202606,0
1290,,,312,9,,2191,3.542004696528117,0
1291,,,254,6,,1330,2.078560674190521,0
1292,,,164,6,,774,1.2840240120887756,0
1293,,,95,3,,400,0.6357767184575399,0
1294,,,81,2,,219,0.3653572916984558,0
1295,,,306,9,,2085,3.2903510371843976,0
1296,,,286,10,,2790,4.514252014954885,0
1297,,,115,6,,641,1.074291674296061,0
1298,,,140,9,,2130,3.568046450614929,0
1299,,,471,12,,5546,9.012521604696909,0
1300,,,98,6,,624,1.2008978247642517,0
1301,,,80,3,,314,0.507906444867452,0
1302,,,250,8,,2192,3.5750496705373127,0
1303,,,59,3,,318,0.540215007464091,0
1304,"public void Test229044(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a.data;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        int rowCount = sqlStatement.executeUpdate(""insert into users (status) values ('updated') where name='""+data+""'"");
        IO.writeLine(""Updated "" + rowCount + "" rows successfully."");
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void test2285046(HttpServletRequest request, HttpServletResponse Resp) throws Throwable
{
    String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a.data;
    Connection DBConn = null;
    Statement sslConfiguration = null;
    try
    {
        DBConn = IO.getDBConnection();
        sslConfiguration = DBConn.createStatement();
        int rowCount = sslConfiguration.executeUpdate(""insert into users (status) values ('updated') where name='""+data+""'"");
        IO.writeLine(""Updated "" + rowCount + "" rows successfully."");
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sslConfiguration != null)
            {
                sslConfiguration.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (DBConn != null)
            {
                DBConn.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",179,8,"sqlStatement:sslConfiguration,dbConnection:DBConn,Test229044:test2285046,response:Resp,",443,0.7358876307805379,Beam
1305,,,46,3,,339,0.5866144935290019,0
1306,,,320,10,,2645,4.265944039821624,0
1307,,,165,6,,1134,1.9105062127113341,0
1308,,,233,7,,1829,3.00124077796936,0
1309,,,135,6,,976,1.61546049118042,0
1310,,,79,3,,318,0.48683565060297646,0
1311,,,247,7,,1329,2.14127436876297,0
1312,,,36,3,,360,0.603108024597168,0
1313,,,142,5,,752,1.3271241744359334,0
1314,,,52,2,,174,0.3130075494448344,0
1315,,,274,11,,3990,6.600081507364909,0
1316,,,89,5,,692,1.2031681100527445,0
1317,,,363,10,,3871,6.223065360387166,0
1318,,,240,7,,1574,2.520031487941742,0
1319,,,294,10,,3872,6.088004736105601,0
1320,,,271,5,,857,1.3671987613042196,0
1321,,,199,6,,1014,1.5508281310399374,0
1322,,,362,11,,3155,5.079078861077627,0
1323,,,100,2,,88,0.11970731814702353,0
1324,,,154,8,,1823,3.028649083773295,0
1325,,,51,4,,466,0.788483488559723,0
1326,,,154,9,,1473,2.415030860900879,0
1327,,,163,6,,822,1.4362443526585897,0
1328,,,123,4,,493,0.7902994751930237,0
1329,,,388,7,,1549,2.504486362139384,0
1330,,,164,6,,842,1.4382843176523845,0
1331,,,337,9,,3126,5.119892839590708,0
1332,,,273,9,,2680,4.261776129404704,0
1333,,,131,3,,405,0.6628406206766765,0
1334,,,166,5,,903,1.4881588617960613,0
1335,,,355,7,,1669,2.7501291672388715,0
1336,,,93,5,,879,1.4453571399052938,0
1337,,,37,4,,534,0.8857685685157776,0
1338,,,288,10,,3194,5.302562558650971,0
1339,,,25,2,,173,0.2906174659729004,0
1340,,,371,10,,4336,6.893147281805674,0
1341,,,311,8,,2504,3.978330139319102,0
1342,,,199,8,,1900,3.0935176730155947,0
1343,,,45,3,,125,0.2298011581103007,0
1344,,,159,8,,1421,2.4214070876439413,0
1345,,,437,10,,3977,6.372806318600973,0
1346,,,332,9,,3217,5.166484622160594,0
1348,,,491,12,,3094,4.90724268356959,0
1349,,,300,9,,2192,3.517187949021657,0
1350,,,576,8,,2270,3.9112278620402017,0
1351,,,234,8,,2093,3.45084988673528,0
1352,,,276,11,,2806,4.52069327433904,0
1353,,,210,8,,1622,2.6288604458173115,0
1354,,,76,3,,318,0.4925082524617513,0
1355,,,36,3,,263,0.4403236389160156,0
1356,,,39,4,,358,0.6054474155108134,0
1357,,,108,3,,293,0.4794504284858704,0
1358,,,314,9,,3124,5.052705566088359,0
1359,,,162,5,,830,1.397469166914622,0
1360,,,79,4,,558,0.917916480700175,0
1361,,,118,7,,1424,2.4322138945261638,0
1362,,,50,3,,210,0.3649954636891683,0
1363,,,305,10,,3925,6.275518115361532,0
1364,,,290,10,,2314,3.6757603446642557,0
1365,,,338,11,,4484,7.192330861091614,0
1366,,,298,10,,4023,6.4044833024342855,0
1367,,,35,2,,82,0.14001612663269042,0
1368,,,265,8,,1853,3.0035164753595986,0
1369,,,303,11,,3767,6.551410210132599,0
1370,,,42,2,,80,0.14395068883895873,0
1371,,,341,9,,3221,5.138215239842733,0
1372,,,93,4,,614,1.0036824027697244,0
1373,,,112,3,,314,0.5316907445589701,0
1374,,,414,12,,3432,5.492384564876557,0
1375,,,251,8,,2645,4.2480765382448835,0
1376,,,373,10,,4274,6.851344589392344,0
1377,,,265,6,,1016,1.6273867964744568,0
1378,,,255,9,,2239,3.5843238671620687,0
1379,,,230,8,,1591,2.5350269794464113,0
1380,,,93,4,,620,1.0452067613601685,0
1381,,,95,4,,676,1.1035632212956747,0
1382,,,237,7,,2009,3.2307169516881307,0
1383,,,456,5,,1071,1.7193489710489909,0
1384,,,282,9,,3197,5.17269187370936,0
1385,,,279,9,,2911,4.6340089003245035,0
1386,,,193,6,,1051,1.716976563135783,0
1387,,,45,2,,131,0.2400311549504598,0
1388,,,334,6,,936,1.5813644091288248,0
1389,,,83,3,,314,0.5538617809613545,0
1390,,,43,4,,514,0.8752760688463846,0
1391,,,110,3,,400,0.6815546949704488,0
1392,,,255,9,,3098,5.035953835646311,0
1393,,,274,9,,3062,5.0459641774495445,0
1394,,,107,4,,556,0.9323422988255818,0
1395,,,202,5,,1107,1.8524521152178446,0
1396,,,256,8,,1806,2.992095446586609,0
1397,,,315,9,,2290,3.7487921078999835,0
1398,,,138,8,,1055,1.8096049666404723,0
1399,,,90,4,,612,1.0387181520462037,0
1400,,,306,10,,2334,3.9983556151390074,0
1401,,,285,10,,3566,6.230609134833018,0
1402,,,294,9,,3120,5.355176695187887,0
1403,,,76,5,,848,1.510159476598104,0
1404,,,230,10,,3602,6.111181712150573,0
1405,,,96,5,,844,1.6084462881088257,0
1406,,,211,5,,890,1.5967283129692078,0
1407,,,78,3,,282,0.545321504275004,0
1408,,,67,4,,576,0.9852868636449178,0
1409,,,171,8,,1955,3.4209253748257953,0
1410,,,158,5,,804,1.4952468474706013,0
1411,,,311,10,,4186,7.205263308684031,0
1412,,,94,5,,883,1.5033895333607992,0
1413,,,175,9,,1452,2.626074020067851,0
1414,,,89,5,,730,1.4122793515523275,0
1415,,,216,8,,2468,4.3014424562454225,0
1416,,,29,3,,230,0.47166956663131715,0
1417,,,199,7,,2099,3.5484437545140586,0
1418,,,292,8,,2692,4.700531375408173,0
1419,,,123,6,,1139,1.9901167511940003,0
1420,,,37,3,,300,0.5405849575996399,0
1421,,,396,10,,3945,7.002306071917216,0
1422,,,118,3,,400,0.7180930415789286,0
1423,,,142,8,,1868,3.382615915934245,0
1424,,,87,3,,343,0.6354991475741069,0
1425,,,242,8,,2392,4.190770188967387,0
1426,,,296,8,,2745,4.701262593269348,0
1427,,,79,3,,268,0.47611788908640545,0
1428,,,152,3,,314,0.582547108332316,0
1429,,,118,8,,1658,3.0705768704414367,0
1430,,,92,5,,648,1.1764041741689046,0
1431,,,550,13,,4768,8.717906367778777,0
1432,,,254,8,,2719,3.736816044648488,0
1433,,,303,10,,2302,3.2669203877449036,0
1434,,,65,2,,80,0.1267510453859965,0
1435,,,371,9,,3186,4.439543775717417,0
1436,,,295,10,,3922,6.25115434328715,0
1437,,,303,9,,3034,5.209683871269226,0
1438,,,260,9,,1674,2.9817014733950296,0
1439,,,71,3,,405,0.7313610633214315,0
1440,,,240,6,,1357,2.3389342069625854,0
1441,,,137,7,,1603,2.8574826955795287,0
1442,,,230,6,,1484,2.5470913569132487,0
1443,,,355,11,,3986,7.182431173324585,0
1444,,,102,5,,673,1.15460418065389,0
1445,,,65,3,,405,0.63074183066686,0
1446,,,35,3,,212,0.33876656691233314,0
1447,,,135,6,,1126,1.7624618212382,0
1448,,,248,5,,923,1.5334434986114502,0
1449,,,238,9,,1795,3.0733072638511656,0
1450,,,139,8,,1918,3.3937254587809247,0
1451,,,81,3,,268,0.4145312269528707,0
1452,,,241,8,,2332,3.8399003585179647,0
1453,,,226,8,,2173,3.420336902141571,0
1454,,,99,5,,647,1.113691234588623,0
1455,,,98,5,,762,1.279155711332957,0
1456,,,282,10,,3368,5.399892373879751,0
1457,,,421,11,,4813,7.670243346691132,0
1458,,,252,7,,1783,2.8721745014190674,0
1459,,,160,5,,890,1.5754446268081665,0
1460,,,418,9,,3135,5.297333149115245,0
1461,,,349,9,,3436,5.6054417808850605,0
1462,,,60,3,,286,0.4786876360575358,0
1463,,,63,3,,405,0.6726370255152384,0
1464,,,336,9,,3385,5.6304695963859555,0
1465,,,95,4,,581,0.9877810955047608,0
1466,,,52,3,,239,0.44494242668151857,0
1467,,,166,6,,1454,2.351897859573364,0
1468,,,226,8,,2219,3.504370637734731,0
1469,,,568,11,,2676,5.224567345778147,0
1470,,,113,4,,589,1.046631638209025,0
1471,,,87,4,,820,1.316735295454661,0
1472,,,401,11,,4347,6.921448616186778,0
1473,,,364,11,,3769,5.496149237950643,0
1474,,,160,9,,1989,3.174766739209493,0
1475,,,416,9,,3029,4.555460091431936,0
1476,,,65,3,,405,0.6026280760765076,0
1477,,,48,2,,219,0.32626000642776487,0
1478,,,154,8,,1593,2.4740930596987405,0
1479,,,97,3,,360,0.5646237134933472,0
1480,,,103,6,,1333,1.9414627830187479,0
1481,,,58,4,,629,0.9007077058156331,0
1482,,,340,6,,960,1.435477602481842,0
1483,,,367,11,,4193,6.439809195200602,0
1484,,,70,3,,286,0.4458369453748067,0
1485,,,58,2,,173,0.24611291488011677,0
1486,,,284,8,,2448,3.6268980224927265,0
1487,,,64,2,,159,0.23467959562937418,0
1488,,,166,8,,2060,3.175685453414917,0
1489,,,278,10,,3528,5.365750352541606,0
1490,,,56,2,,184,0.3091803789138794,0
1491,,,81,3,,400,0.5887320836385092,0
1492,,,305,9,,3489,5.139984381198883,0
1493,,,323,10,,3992,5.812918253739675,0
1494,,,46,3,,323,0.5128532886505127,0
1495,,,303,10,,4166,6.181950747966766,0
1496,,,135,8,,1792,2.767090018590291,0
1497,,,330,7,,1238,1.8571248650550842,0
1498,,,178,8,,1863,2.8141520460446676,0
1499,,,314,9,,3375,5.083332653840383,0
1500,,,46,4,,362,0.5582998474438985,0
1501,,,296,10,,2652,3.8296238859494527,0
1502,,,241,10,,3319,5.3332474748293555,0
1503,,,268,9,,1778,2.5937135537465412,0
1504,,,59,3,,318,0.4635282317797343,0
1505,,,59,4,,504,0.7661174694697063,0
1506,,,284,9,,3083,4.613995512326558,0
1507,,,256,9,,1460,2.173671885331472,0
1508,,,63,4,,550,0.8726195136706034,0
1509,,,324,8,,1817,2.6085514227549234,0
1510,,,47,2,,219,0.31981134017308555,0
1511,,,63,3,,286,0.44089496533075967,0
1512,,,54,4,,557,0.826790726184845,0
1513,,,101,4,,596,0.8972035924593608,0
1514,,,246,6,,1330,1.9762003739674887,0
1515,,,389,13,,4338,6.266119678815206,0
1516,,,91,3,,400,0.6071315765380859,0
1517,,,101,4,,548,0.9071729024251302,0
1518,,,239,7,,1998,2.9253147721290587,0
1519,,,241,8,,1806,2.608220700422923,0
1520,,,105,3,,343,0.5119530121485393,0
1521,,,159,8,,2252,3.306672664483388,0
1522,,,104,7,,981,1.5180817127227784,0
1523,,,143,9,,3006,4.513262136777242,0
1524,,,442,8,,2504,3.6555670261383058,0
1525,,,25,1,,49,0.08568580547968546,0
1526,,,88,3,,314,0.48136075735092165,0
1527,,,63,3,,314,0.45827011664708456,0
1528,,,114,5,,895,1.4013322035471598,0
1529,,,176,6,,1141,1.7861650149027506,0
1530,,,198,8,,2212,3.285351272424062,0
1531,,,179,8,,2246,3.317145911852519,0
1532,,,272,8,,1539,2.3059436758359273,0
1533,,,345,11,,3999,6.546876080830892,0
1534,,,368,10,,4119,6.183745733896891,0
1535,,,289,12,,4603,6.960248688856761,0
1536,,,64,3,,220,0.3943227410316467,0
1537,,,50,3,,287,0.4325493892033895,0
1538,,,141,7,,1296,2.2131598631540936,0
1539,,,38,3,,288,0.45925591786702474,0
1540,,,27,2,,165,0.2622612237930298,0
1541,,,256,8,,2134,3.122781451543172,0
1542,,,125,5,,935,1.457384169101715,0
1543,,,97,4,,543,0.8759160280227661,0
1544,,,68,3,,314,0.4781448483467102,0
1545,,,223,9,,2852,4.301425711313883,0
1546,,,159,7,,1601,2.475884147485097,0
1547,,,398,12,,4936,7.789258448282878,0
1548,,,253,11,,2180,3.3111425002415973,0
1549,,,366,12,,5143,8.25776810646057,0
1550,,,271,8,,2629,3.950772778193156,0
1551,,,300,8,,2482,3.7908207058906553,0
1552,,,322,8,,2688,4.036256508032481,0
1553,,,365,11,,5261,7.9711215734481815,0
1554,,,145,6,,1267,1.9658252278963724,0
1555,,,45,1,,33,0.06745977799097697,0
1556,,,45,3,,310,0.5415422836939494,0
1557,,,92,4,,630,0.9850456754366557,0
1558,,,192,6,,1337,2.01569842894872,0
1559,,,134,8,,1689,2.5763349493344623,0
1560,,,198,7,,1779,2.7633822083473207,0
1561,"public void Test208008(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        KerberosPrincipal principal = new KerberosPrincipal(""test"");
        KerberosKey key = new KerberosKey(principal, data.toCharArray(), null);
        IO.writeLine(key.toString());
    }
}","public void Test208008(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        KerberosPrincipal pridipal = new KerberosPrincipal(""test"");
        KerberosKey ssl = new KerberosKey(pridipal, data.toCharArray(), null);
        IO.writeLine(ssl.toString());
    }
}",70,5,"key:ssl,principal:pridipal,",125,0.20186713139216106,Beam
1562,,,301,8,,2337,3.552695095539093,0
1563,,,118,5,,587,1.0362814823786417,0
1564,,,264,7,,1629,2.472000416119893,0
1565,,,293,9,,2534,3.830338005224864,0
1566,,,41,2,,175,0.2815204620361328,0
1567,,,155,8,,2012,3.147647225856781,0
1568,,,318,8,,2729,4.093084176381429,0
1569,,,376,11,,3465,5.305503690242768,0
1570,,,176,7,,1633,2.517991288503011,0
1571,,,131,3,,400,0.6479587435722352,0
1572,,,126,3,,405,0.6299866318702698,0
1573,,,254,8,,1944,2.9427113493283588,0
1574,,,253,8,,2750,4.145021263758341,0
1575,,,86,4,,450,0.7275390903155009,0
1576,,,83,2,,158,0.2692993521690369,0
1577,,,174,10,,3760,5.577788205941518,0
1578,,,59,4,,468,0.7744303504625957,0
1579,,,265,9,,3188,4.111103868484497,0
1580,,,125,3,,314,0.386275855700175,0
1581,,,99,3,,405,0.5014454245567321,0
1582,,,114,3,,314,0.40755208730697634,0
1583,,,287,9,,2263,2.756028914451599,0
1584,,,343,9,,3336,4.072436634699503,0
1585,,,124,5,,964,1.2032038887341818,0
1586,,,73,3,,277,0.37235302130381265,0
1587,,,444,9,,1996,2.818228594462077,0
1588,,,94,3,,400,0.4977199037869771,0
1589,,,177,8,,2058,2.5038636485735575,0
1590,,,288,8,,2484,3.035642727216085,0
1591,,,388,7,,1549,1.9135120590527852,0
1592,,,225,8,,2093,2.523696231842041,0
1593,,,192,13,,4766,5.87766094605128,0
1594,,,281,10,,3625,4.614055208365122,0
1595,,,40,3,,268,0.32358177105585734,0
1596,,,278,9,,2661,3.2339421033859255,0
1597,,,119,4,,495,0.6488283276557922,0
1598,,,252,8,,2300,2.7880319396654767,0
1599,,,396,12,,5073,6.614177886644999,0
1600,,,58,3,,318,0.39311679601669314,0
1601,,,356,10,,3963,4.8719653765360516,0
1602,,,367,11,,4752,5.90782398780187,0
1603,,,312,10,,4225,5.181606956322988,0
1604,,,272,5,,800,0.9912299434343974,0
1605,,,69,6,,959,1.2302925030390421,0
1606,,,91,4,,628,0.7452332496643066,0
1607,,,63,4,,516,0.6770198464393615,0
1608,,,34,1,,49,0.07416809399922689,0
1609,,,176,8,,1674,2.1042146921157836,0
1610,,,44,4,,376,0.4858935515085856,0
1611,,,123,8,,1644,2.4202367663383484,0
1612,,,91,4,,644,0.7862563530604044,0
1613,,,50,4,,573,0.7421059648195902,0
1614,,,217,8,,2090,2.694991660118103,0
1615,,,80,4,,510,0.6583951671918233,0
1616,,,310,9,,2148,2.7439075628916423,0
1617,,,324,8,,2254,2.854636553923289,0
1618,,,47,2,,163,0.22297486464182537,0
1619,,,73,5,,727,0.9123120943705241,0
1620,,,338,10,,2841,3.412405288219452,0
1621,,,42,3,,207,0.31297916968663536,0
1622,,,68,4,,603,0.7587491949399312,0
1623,,,88,4,,636,0.8376206080118815,0
1624,,,236,7,,1861,2.336252498626709,0
1625,,,62,1,,33,0.061133631070454914,0
1626,,,64,2,,219,0.2911421696345011,0
1627,,,120,4,,438,0.5749026735623678,0
1628,,,286,9,,3032,3.9530248999595643,0
1629,,,90,5,,903,1.1275524616241455,0
1630,,,203,6,,1406,1.797372817993164,0
1631,,,247,13,,4541,5.550452554225922,0
1632,,,313,11,,4824,5.8270279248555505,0
1633,,,388,7,,1542,1.8976746439933776,0
1634,,,197,6,,766,0.9564197738965352,0
1635,,,57,4,,702,0.8178121487299601,0
1636,,,274,9,,2900,3.4816564202308653,0
1637,,,60,4,,590,0.7593414902687072,0
1638,,,299,10,,2396,2.9476955413818358,0
1639,,,71,3,,318,0.3974446853001912,0
1640,,,82,4,,541,0.6489138046900431,0
1641,,,382,10,,3065,3.7103559374809265,0
1642,,,404,10,,3858,4.8056584676106775,0
1643,,,321,8,,2745,3.314466925462087,0
1644,,,287,9,,2225,2.7038544058799743,0
1645,,,262,10,,2002,2.4199877460797627,0
1646,,,307,10,,4115,5.019648285706838,0
1647,,,292,8,,2707,3.3029800057411194,0
1648,,,139,5,,720,0.9361029545466105,0
1649,,,237,8,,2745,3.362676970163981,0
1650,,,76,4,,564,0.746117103099823,0
1651,,,296,10,,3231,3.924407732486725,0
1652,,,313,9,,2420,2.9804803848266603,0
1653,,,111,6,,1284,1.6611975034077961,0
1654,,,61,4,,636,0.815110965569814,0
1655,,,216,12,,4608,5.655753827095031,0
1656,,,259,8,,2750,3.4250027894973756,0
1657,,,278,8,,2045,2.603787064552307,0
1658,,,305,8,,2528,3.261772350470225,0
1659,,,165,10,,1975,2.5370421409606934,0
1660,,,363,11,,5170,6.344348271687825,0
1661,,,234,6,,1169,1.4298049410184224,0
1662,,,164,5,,903,1.086096175511678,0
1663,"public void Test921420(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();
    environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
    environmentHashTable.put(Context.PROVIDER_URL, ""ldap://localhost:389"");
    DirContext directoryContext = null;
    try
    {
        directoryContext = new InitialDirContext(environmentHashTable);
        String search = ""(cn="" + data + "")"";
        NamingEnumeration<SearchResult> answer = directoryContext.search("""", search, null);
        while (answer.hasMore())
        {
            SearchResult searchResult = answer.next();
            Attributes attributes = searchResult.getAttributes();
            NamingEnumeration<?> allAttributes = attributes.getAll();
            while (allAttributes.hasMore())
            {
                Attribute attribute = (Attribute) allAttributes.next();
                NamingEnumeration<?> allValues = attribute.getAll();
                while(allValues.hasMore())
                {
                    IO.writeLine("" Value: "" + allValues.next().toString());
                }
            }
        }
    }
    catch (NamingException exceptNaming)
    {
        IO.logger.log(Level.WARNING, ""The LDAP service was not found or login failed."", exceptNaming);
    }
    finally
    {
        if (directoryContext != null)
        {
            try
            {
                directoryContext.close();
            }
            catch (NamingException exceptNaming)
            {
                IO.logger.log(Level.WARNING, ""Error closing DirContext"", exceptNaming);
            }
        }
    }
}","public void initialize(HashMap<Integer,String> input ) throws Throwable
{
    String method = input.get(2);
    Hashtable<String, String> EnvironmentHashtable = new Hashtable<String, String>();
    EnvironmentHashtable.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
    EnvironmentHashtable.put(Context.PROVIDER_URL, ""ldap://localhost:389"");
    DirContext DirectoryPath = null;
    try
    {
        DirectoryPath = new InitialDirContext(EnvironmentHashtable);
        String sort = ""(cn="" + method + "")"";
        NamingEnumeration<SearchResult> answer = DirectoryPath.sort("""", sort, null);
        while (answer.hasMore())
        {
            SearchResult SearchRequest = answer.next();
            Attributes attributes = SearchRequest.getAttributes();
            NamingEnumeration<?> allAttributes = attributes.getAll();
            while (allAttributes.hasMore())
            {
                Attribute attribute = (Attribute) allAttributes.next();
                NamingEnumeration<?> allValues = attribute.getAll();
                while(allValues.hasMore())
                {
                    IO.writeLine("" Value: "" + allValues.next().toString());
                }
            }
        }
    }
    catch (NamingException catchNamed)
    {
        IO.logger.log(Level.WARNING, ""The LDAP service was not found or login failed."", catchNamed);
    }
    finally
    {
        if (DirectoryPath != null)
        {
            try
            {
                DirectoryPath.close();
            }
            catch (NamingException catchNamed)
            {
                IO.logger.log(Level.WARNING, ""Error closing DirContext"", catchNamed);
            }
        }
    }
}",274,13,"directoryContext:DirectoryPath,exceptNaming:catchNamed,Test921420:initialize,dataHashMap:input,environmentHashTable:EnvironmentHashtable,searchResult:SearchRequest,search:sort,data:method,",2612,3.197832528750102,Beam
1664,,,355,11,,2702,3.2753634333610533,0
1665,,,337,9,,3491,4.262580633163452,0
1666,,,261,7,,1872,2.4350248336791993,0
1667,,,262,8,,2311,2.939303199450175,0
1668,,,67,4,,500,0.6373422741889954,0
1669,,,63,4,,517,0.683890700340271,0
1670,,,187,10,,3212,4.002678080399831,0
1671,,,89,4,,498,0.6477425734202067,0
1672,,,299,8,,2473,3.047613000869751,0
1673,,,286,9,,1760,2.2161134004592897,0
1674,,,250,8,,2504,3.075198153654734,0
1675,,,220,5,,1076,1.3286235054334006,0
1676,,,269,6,,1040,1.302662714322408,0
1677,,,267,9,,2646,3.320668041706085,0
1678,,,220,9,,1386,1.688165541489919,0
1679,,,41,4,,387,0.48355029424031576,0
1680,,,231,9,,2074,2.586860744158427,0
1681,,,289,6,,932,1.1829814513524373,0
1682,,,119,4,,553,0.7756137212117513,0
1683,,,196,8,,2059,2.5732778231302897,0
1684,,,314,7,,2054,2.6236395716667174,0
1685,,,198,10,,3881,4.847126825650533,0
1686,,,92,5,,618,0.9073342641194662,0
1687,,,91,2,,175,0.23249622583389282,0
1688,,,62,5,,744,0.9722390333811443,0
1689,,,106,4,,475,0.641141164302826,0
1690,,,331,10,,3060,3.7473323186238607,0
1691,,,89,3,,314,0.4049951910972595,0
1692,,,133,9,,2298,3.247820281982422,0
1693,,,312,7,,1824,2.3067971666653952,0
1694,,,144,9,,1994,3.0033969402313234,0
1695,,,310,7,,2094,2.693275543053945,0
1696,,,263,8,,2494,3.1490472277005512,0
1697,,,259,8,,2755,3.397301423549652,0
1698,,,84,3,,195,0.28234386841456094,0
1699,,,100,5,,796,1.0579998016357421,0
1700,,,268,7,,2099,2.662150498231252,0
1701,,,62,3,,345,0.4908206502596537,0
1702,,,91,3,,308,0.3989326278368632,0
1703,,,465,11,,3757,4.996000297864279,0
1704,,,290,9,,3067,3.9353812376658124,0
1705,,,108,3,,287,0.37549880345662434,0
1706,,,120,3,,400,0.5164386431376139,0
1707,,,130,5,,794,1.1065782149632772,0
1708,,,340,10,,3897,4.929978024959564,0
1709,,,40,3,,268,0.336799689133962,0
1710,,,149,8,,1935,2.6024229168891906,0
1711,,,196,7,,1172,1.5135294874509175,0
1712,,,96,6,,1405,1.8150451183319092,0
1713,,,113,8,,2058,2.6966363191604614,0
1714,,,123,3,,318,0.403748885790507,0
1715,,,110,3,,405,0.511264971892039,0
1716,,,125,3,,405,0.5141264279683431,0
1717,,,200,8,,2628,3.26935221751531,0
1718,,,304,9,,2565,3.2156596859296163,0
1719,,,163,5,,1051,1.305805011590322,0
1720,,,83,3,,314,0.3968898852666219,0
1721,,,134,9,,1661,2.364810582002004,0
1722,,,293,8,,2313,2.910984949270884,0
1723,,,47,3,,310,0.4261525750160217,0
1724,,,43,4,,334,0.4506243626276652,0
1725,,,327,10,,3674,4.579387068748474,0
1726,,,48,4,,539,0.7244473338127136,0
1727,,,397,11,,3854,5.269587516784668,0
1728,,,96,4,,555,0.7031887610753377,0
1729,,,239,6,,1043,1.2752238869667054,0
1730,,,234,8,,1851,2.16232297817866,0
1731,,,101,3,,287,0.36820523341496786,0
1732,,,293,8,,2564,3.1365429401397704,0
1733,,,185,13,,3360,4.382229920228323,0
1734,,,142,6,,1014,1.3748482704162597,0
1735,,,57,2,,113,0.14833626349767048,0
1736,,,388,15,,3191,4.7852126081784565,0
1737,,,429,13,,4729,5.873513329029083,0
1738,,,185,4,,679,0.8094484607378641,0
1739,,,522,8,,2210,2.749940594037374,0
1740,,,25,1,,49,0.07734458049138387,0
1741,,,63,3,,286,0.37784624894460045,0
1742,,,255,8,,2538,3.078801778952281,0
1743,,,97,3,,400,0.5030085245768229,0
1744,,,93,3,,282,0.3677348415056864,0
1745,,,118,5,,580,0.8084510207176209,0
1746,,,110,3,,400,0.5041060368220012,0
1747,,,180,6,,713,1.018138349056244,0
1748,,,121,5,,761,1.0195738911628722,0
1749,,,76,4,,411,0.5217169324556986,0
1750,,,72,3,,290,0.3829622824986776,0
1751,,,62,3,,400,0.49270631074905397,0
1752,,,127,6,,794,1.0670685132344564,0
1753,,,276,5,,744,0.9327666838963826,0
1754,,,118,3,,405,0.512326975663503,0
1755,,,408,11,,3465,4.27716950972875,0
1756,,,260,10,,3203,3.896683939297994,0
1758,,,135,5,,844,1.042452299594879,0
1759,,,279,11,,4053,5.031428905328115,0
1760,,,56,5,,793,1.0534560402234396,0
1761,,,475,11,,3128,3.842099440097809,0
1762,,,119,3,,400,0.4810649871826172,0
1763,,,296,10,,2343,2.941041386127472,0
1764,,,42,4,,362,0.4426641583442688,0
1765,,,62,2,,159,0.20883700052897136,0
1766,,,379,10,,4221,5.241233344872793,0
1767,,,560,13,,4452,6.845100247859955,0
1768,,,393,14,,4189,6.721848905086517,0
1769,,,176,6,,1404,1.7775762557983399,0
1770,,,197,8,,2039,2.4436387260754904,0
1771,,,148,6,,1255,1.633496844768524,0
1772,,,40,3,,266,0.325632643699646,0
1773,,,73,5,,790,0.9890710711479187,0
1774,,,138,8,,1362,1.9121307293574015,0
1775,,,35,2,,144,0.1788265864054362,0
1776,,,275,8,,2485,3.0037672599156697,0
1777,,,326,6,,960,1.1931378761927287,0
1778,,,313,11,,5124,6.415726494789124,0
1779,,,299,9,,3217,4.038104506333669,0
1780,,,31,2,,175,0.22290219068527223,0
1781,,,59,5,,458,0.8023343920707703,0
1782,,,87,4,,574,0.7563865820566813,0
1783,,,93,4,,555,0.6756988406181336,0
1784,,,367,10,,4314,5.2525931398073835,0
1785,,,221,8,,1947,2.3778845349947613,0
1786,,,44,3,,212,0.25657654205958047,0
1787,,,131,8,,2326,3.0092817902565003,0
1788,,,100,3,,266,0.3601594845453898,0
1789,,,27,2,,175,0.21802973747253418,0
1790,,,306,9,,3175,4.055825257301331,0
1791,,,238,9,,1883,2.435594916343689,0
1792,,,333,9,,3185,4.013099984327952,0
1793,,,119,8,,2079,2.6920525948206584,0
1794,,,112,3,,400,0.532817804813385,0
1795,,,121,7,,1594,2.0231921354929607,0
1796,,,364,11,,5096,6.468874677022298,0
1797,,,60,4,,451,0.6053269505500793,0
1798,,,68,3,,290,0.36052594979604086,0
1799,,,97,3,,405,0.5234212279319763,0
1800,"private void Test678603() throws Throwable
{
    String data;
    if (5 == 5)
    {
        data = ""foo"";
    }
    else
    {
        data = null;
    }
    String root;
    if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
    {
        root = ""C:\\uploads\\"";
    }
    else
    {
        root = ""/home/user/uploads/"";
    }
    if (data != null)
    {
        File file = new File(root + data);
        FileInputStream streamFileInputSink = null;
        InputStreamReader readerInputStreamSink = null;
        BufferedReader readerBufferdSink = null;
        if (file.exists() && file.isFile())
        {
            try
            {
                streamFileInputSink = new FileInputStream(file);
                readerInputStreamSink = new InputStreamReader(streamFileInputSink, ""UTF-8"");
                readerBufferdSink = new BufferedReader(readerInputStreamSink);
                IO.writeLine(readerBufferdSink.readLine());
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
            }
            finally
            {
                try
                {
                    if (readerBufferdSink != null)
                    {
                        readerBufferdSink.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                }
                try
                {
                    if (readerInputStreamSink != null)
                    {
                        readerInputStreamSink.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                }
                try
                {
                    if (streamFileInputSink != null)
                    {
                        streamFileInputSink.close();
                    }
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);
                }
            }
        }
    }
}","private void install678589() throws Throwable
{
    String input;
    if (5 == 5)
    {
        input = ""foo"";
    }
    else
    {
        input = null;
    }
    String roots;
    if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
    {
        roots = ""C:\\uploads\\"";
    }
    else
    {
        roots = ""/home/user/uploads/"";
    }
    if (input != null)
    {
        File url = new File(roots + input);
        FileInputStream streamFileOutputsinker = null;
        InputStreamReader readerInputstreamPender = null;
        BufferedReader readerBufferdSink = null;
        if (url.exists() && url.isFile())
        {
            try
            {
                streamFileOutputsinker = new FileInputStream(url);
                readerInputstreamPender = new InputStreamReader(streamFileOutputsinker, ""UTF-8"");
                readerBufferdSink = new BufferedReader(readerInputstreamPender);
                IO.writeLine(readerBufferdSink.readLine());
            }
            catch (IOException exceptIF)
            {
                IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIF);
            }
            finally
            {
                try
                {
                    if (readerBufferdSink != null)
                    {
                        readerBufferdSink.close();
                    }
                }
                catch (IOException exceptIF)
                {
                    IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIF);
                }
                try
                {
                    if (readerInputstreamPender != null)
                    {
                        readerInputstreamPender.close();
                    }
                }
                catch (IOException exceptIF)
                {
                    IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIF);
                }
                try
                {
                    if (streamFileOutputsinker != null)
                    {
                        streamFileOutputsinker.close();
                    }
                }
                catch (IOException exceptIF)
                {
                    IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIF);
                }
            }
        }
    }
}",301,8,"root:roots,file:url,data:input,streamFileInputSink:streamFileOutputsinker,readerInputStreamSink:readerInputstreamPender,exceptIO:exceptIF,Test678603:install678589,",2413,3.061770025889079,Beam
1801,,,143,5,,897,1.2376084804534913,0
1802,,,278,11,,4162,5.22662261724472,0
1803,,,66,4,,505,0.6568567037582398,0
1804,,,60,3,,287,0.37415654261906944,0
1805,,,372,11,,2504,3.2147990425427753,0
1806,,,62,2,,231,0.29768338600794475,0
1807,,,343,11,,4289,5.506099808216095,0
1808,,,498,13,,4513,5.873302102088928,0
1809,,,51,5,,894,1.1528161764144897,0
1810,,,175,9,,2462,3.119356429576874,0
1811,,,57,3,,400,0.5104257782300313,0
1812,,,131,8,,1386,1.8551797151565552,0
1813,,,219,13,,4058,5.05193430185318,0
1814,,,24,2,,130,0.19601436853408813,0
1815,,,87,3,,268,0.3421592593193054,0
1816,,,163,8,,1351,1.7134562452634177,0
1817,,,246,8,,2488,3.1112993359565735,0
1818,,,32,3,,359,0.4614452401796977,0
1819,,,276,9,,2977,3.71539713939031,0
1820,,,62,4,,562,0.7113994836807251,0
1821,,,45,3,,268,0.3334757486979167,0
1822,,,111,4,,578,0.7719902594884237,0
1823,,,216,7,,1169,1.4201133926709493,0
1824,,,255,7,,1853,2.20536109606425,0
1825,,,256,9,,2900,3.5018590609232585,0
1826,,,263,7,,1992,2.4007522185643513,0
1827,,,302,10,,2128,2.627223042647044,0
1828,,,313,9,,3212,4.006655399004618,0
1829,,,468,11,,4504,5.837038640181223,0
1830,,,187,8,,1811,2.346266333262126,0
1831,,,342,10,,4205,5.227685530980428,0
1832,,,326,10,,4129,5.22129967212677,0
1833,,,39,4,,568,0.6973619341850281,0
1834,,,60,3,,318,0.4250954548517863,0
1835,,,28,2,,129,0.19248666763305664,0
1836,,,287,9,,1860,2.2951642513275146,0
1837,,,69,4,,514,0.6397939761479695,0
1838,,,131,6,,1094,1.5080187718073528,0
1839,,,55,3,,306,0.3884234388669332,0
1840,,,193,8,,1647,2.104761759440104,0
1841,,,291,10,,2279,2.8515698115030923,0
1842,,,534,12,,2766,3.6924604813257855,0
1843,,,134,5,,871,1.1631787776947022,0
1844,,,310,9,,3312,3.9203641017278037,0
1845,,,50,2,,131,0.1927168369293213,0
1846,,,504,11,,4774,5.888834957281748,0
1847,,,246,9,,1863,2.3263811469078064,0
1848,,,59,5,,649,0.8807456692059835,0
1849,,,144,5,,852,1.1181376576423645,0
1850,,,248,7,,2104,2.5593740781148275,0
1851,,,58,2,,163,0.2087377111117045,0
1852,,,61,5,,728,0.927510937054952,0
1853,,,364,11,,3809,4.641574637095133,0
1854,,,49,2,,169,0.22885284026463826,0
1855,,,42,2,,163,0.19368766546249389,0
1856,,,40,3,,252,0.30771952867507935,0
1857,,,158,8,,2161,2.664914302031199,0
1858,,,357,9,,3116,3.840866748491923,0
1859,,,113,5,,898,1.1115384260813395,0
1860,,,260,9,,2008,2.5171231508255003,0
1861,,,71,3,,314,0.40333036581675213,0
1862,,,275,7,,1845,2.285053038597107,0
1863,,,94,4,,546,0.6810635646184285,0
1864,,,465,12,,5359,6.788283662001292,0
1865,,,146,7,,2015,2.397719689210256,0
1866,,,54,4,,581,0.7403040329615275,0
1867,,,24,2,,117,0.18222284317016602,0
1868,,,59,5,,779,0.9374988516171773,0
1869,,,463,11,,5188,6.088014300664266,0
1870,"private void Test945125(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    for(int k = 0; k < 1; k++)
    {
        Cookie cookie = new Cookie(""SecretMessage"", ""test"");
        cookie.setMaxAge(-1);
    }
}","private void TestNine44625(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    for(int k = 0; k < 1; k++)
    {
        Cookie cookie = new Cookie(""SecretMessage"", ""test"");
        cookie.setMaxAge(-1);
    }
}",50,5,"Test945125:TestNine44625,",25,0.04267840385437012,Beam
1871,,,58,3,,318,0.4005056341489156,0
1872,,,98,4,,402,0.5214072744051615,0
1873,,,499,13,,5847,7.447563592592875,0
1874,,,207,6,,1533,1.8922300418217977,0
1875,,,367,10,,4262,5.164943186442057,0
1876,,,33,3,,217,0.3146353522936503,0
1877,,,269,7,,1911,2.331793530782064,0
1879,,,81,3,,401,0.5016083916028341,0
1880,,,282,7,,2099,2.5753419995307922,0
1881,,,399,10,,3848,4.788382148742675,0
1882,,,132,6,,1273,1.6330320517222086,0
1883,,,340,10,,3678,4.456263343493144,0
1884,,,499,11,,4922,5.960948956012726,0
1885,,,345,10,,3579,4.398502965768178,0
1886,,,96,3,,405,0.5139684915542603,0
1887,,,288,8,,2425,2.9811938603719077,0
1888,,,75,4,,518,0.6753447016080221,0
1889,,,241,9,,2843,3.4627462943394978,0
1890,,,259,8,,2472,3.0020999193191527,0
1891,,,285,9,,2072,2.478250583012899,0
1892,,,326,9,,3217,3.9258803009986876,0
1893,,,403,11,,5095,6.371739117304484,0
1894,,,155,3,,343,0.43853477636973065,0
1895,,,310,9,,3222,3.8663137396176657,0
1896,,,35,2,,163,0.21289943059285482,0
1897,,,198,8,,2027,2.563159986337026,0
1898,,,64,2,,163,0.22183374166488648,0
1899,,,291,8,,1698,2.1314507722854614,0
1900,,,312,9,,3165,4.073492626349132,0
1901,,,114,3,,318,0.41079115072886146,0
1902,,,283,10,,3383,4.202991525332133,0
1903,"public void Test933587(CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_size_67a.Container dataContainer ) throws Throwable
{
    int data = dataContainer.containerOne;
    int array[] = null;
    if (data >= 0)
    {
        array = new int[data];
    }
    else
    {
        IO.writeLine(""Array size is negative"");
    }
    array[0] = 5;
    IO.writeLine(array[0]);
}","public void test966354(CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_size_67a.Container dataContainer ) throws Throwable
{
    int number = dataContainer.containerOne;
    int offset[] = null;
    if (number >= 0)
    {
        offset = new int[number];
    }
    else
    {
        IO.writeLine(""Array size is negative"");
    }
    offset[0] = 5;
    IO.writeLine(offset[0]);
}",71,4,"array:offset,data:number,Test933587:test966354,",181,0.22483805418014527,Beam
1904,,,505,11,,4891,6.074943705399831,0
1905,,,26,2,,125,0.19138379096984864,0
1906,,,286,8,,2755,3.415706551074982,0
1907,,,174,8,,1199,1.470659327507019,0
1908,,,51,3,,231,0.3212883194287618,0
1909,,,335,9,,2974,3.731897524992625,0
1910,,,271,8,,1634,2.014523955186208,0
1911,,,485,16,,4093,5.582712546984355,0
1912,,,35,2,,159,0.20642949342727662,0
1913,,,156,7,,1653,2.09922616481781,0
1914,,,56,4,,505,0.6720631996790568,0
1915,,,43,3,,315,0.44770731528600055,0
1916,,,50,3,,343,0.4331620732943217,0
1917,,,142,8,,1913,2.536395760377248,0
1918,,,78,3,,405,0.5147855361302693,0
1919,,,137,8,,1369,1.7403164784113565,0
1920,,,72,4,,634,0.7652641375859578,0
1921,,,184,8,,2196,2.702607889970144,0
1922,,,154,3,,405,0.5216571013132731,0
1923,,,72,4,,605,0.7738598227500916,0
1924,,,139,5,,974,1.1993751327196758,0
1925,,,48,2,,157,0.20210548639297485,0
1926,,,98,3,,365,0.485036035378774,0
1927,,,273,9,,3079,3.743516480922699,0
1928,,,61,3,,400,0.5126894831657409,0
1929,,,225,9,,3437,4.179597198963165,0
1930,,,148,3,,405,0.5043739875157675,0
1931,,,181,7,,1740,2.0739883025487265,0
1932,,,71,4,,358,0.5253190875053406,0
1933,,,269,9,,1924,2.356964377562205,0
1934,,,137,6,,1322,1.6102264642715454,0
1935,,,68,2,,231,0.27661639054616294,0
1936,,,320,10,,4300,5.278513403733571,0
1937,,,138,4,,566,0.6858291546503703,0
1938,,,282,8,,2145,2.6781272967656453,0
1939,,,187,8,,1987,2.4280391852060954,0
1940,,,291,10,,3447,4.307054877281189,0
1941,,,57,3,,321,0.4135807196299235,0
1942,,,163,8,,1947,2.490838154157003,0
1943,,,263,8,,1682,2.076597034931183,0
1944,,,88,3,,405,0.5110243280728658,0
1945,,,78,3,,314,0.40056167046229046,0
1946,,,336,9,,3217,3.9359678665796918,0
1947,,,121,8,,1131,1.4065099914868673,0
1948,,,222,7,,1829,2.1503231565157575,0
1949,,,72,4,,572,0.7464719851811726,0
1950,,,393,10,,4286,5.2490134278933205,0
1951,,,136,8,,1457,1.8049375772476197,0
1952,"public void Test951859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        StringBuilder data = (StringBuilder)streamObjectInput.readObject();
        IO.writeLine("""" + data.length());
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void test938859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteStringInterface = null;
    ObjectInputStream streamSystemStream = null;
    try {
        streamByteStringInterface = new ByteArrayInputStream(dataSerialized);
        streamSystemStream = new ObjectInputStream(streamByteStringInterface);
        StringBuilder data = (StringBuilder)streamSystemStream.readObject();
        IO.writeLine("""" + data.length());
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamSystemStream != null)
            {
                streamSystemStream.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteStringInterface != null)
            {
                streamByteStringInterface.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",193,7,"streamByteArrayInput:streamByteStringInterface,streamObjectInput:streamSystemStream,Test951859:test938859,",186,0.24575887521107992,Beam
1953,,,79,5,,738,0.9855420152346294,0
1954,,,285,8,,2683,3.255424185593923,0
1955,,,107,6,,1417,1.7589390595753989,0
1956,,,399,14,,4502,6.517954019705455,0
1957,,,283,9,,2157,2.6520461002985636,0
1958,,,33,2,,65,0.10223469734191895,0
1959,,,164,5,,904,1.1974340677261353,0
1960,,,88,5,,726,0.9158041516939799,0
1961,,,326,6,,950,1.1839261293411254,0
1962,,,341,11,,3972,4.929516077041626,0
1963,,,299,9,,3029,3.8123268683751426,0
1964,,,44,3,,221,0.3388839920361837,0
1965,,,286,8,,2524,3.0773725430170695,0
1966,,,400,10,,3319,4.445300110181173,0
1967,,,266,6,,1016,1.274351461728414,0
1968,,,375,9,,3186,3.877784232298533,0
1969,,,55,1,,51,0.07273959716161092,0
1970,,,202,7,,1853,2.167367645104726,0
1971,,,63,5,,961,1.1488263527552287,0
1972,,,272,5,,770,0.9275156537691752,0
1973,,,72,3,,405,0.5080762942632039,0
1974,,,387,11,,2671,3.2405954162279764,0
1975,,,398,9,,3377,4.058418691158295,0
1976,,,263,7,,1883,2.199742114543915,0
1977,,,447,11,,5226,6.231086083253225,0
1978,,,54,6,,939,1.1417801141738892,0
1979,,,289,7,,2037,2.451773742834727,0
1980,,,247,6,,1321,1.5654163122177125,0
1981,,,52,4,,296,0.4624139587084452,0
1982,,,108,3,,405,0.5073414603869121,0
1983,,,260,8,,1598,1.9250439961751302,0
1984,,,221,8,,2564,3.115343137582143,0
1985,,,128,9,,1504,1.9601505160331727,0
1986,,,96,5,,888,1.0966771284739176,0
1987,,,209,5,,919,1.1093237320582072,0
1988,,,238,6,,1201,1.478130296866099,0
1989,,,41,4,,482,0.5969064672787984,0
1990,,,240,9,,3107,3.957296661535899,0
1991,,,239,8,,2504,3.056628398100535,0
1992,,,198,7,,1672,2.1251230518023174,0
1993,,,75,3,,400,0.505701220035553,0
1994,,,402,9,,3494,4.253168570995331,0
1995,,,223,8,,2186,2.6928165833155315,0
1996,,,44,3,,339,0.43108930985132854,0
1997,,,143,9,,2244,2.9928359985351562,0
1998,,,88,6,,978,1.2524401505788167,0
1999,,,307,9,,3277,4.045526897907257,0
2000,,,333,9,,3334,4.256961190700531,0
2001,,,268,9,,1892,2.3219073255856832,0
2002,,,260,6,,1479,1.7609145402908326,0
2003,,,283,10,,2564,3.505238672097524,0
2004,,,177,8,,1847,2.3236374179522197,0
2005,,,255,8,,1208,1.5043376604715983,0
2006,,,376,8,,2066,2.5784843802452087,0
2007,,,134,8,,1338,1.7495166579882304,0
2008,,,358,10,,3969,4.983288951714834,0
2009,,,117,7,,1416,1.836411507924398,0
2010,,,28,1,,49,0.07898963689804077,0
2011,,,340,10,,3212,4.047800699869792,0
2012,,,503,12,,5787,7.4024590690930685,0
2013,,,286,10,,2585,3.384523455301921,0
2014,,,152,5,,852,1.1414191166559855,0
2015,,,151,8,,1659,2.2326334595680235,0
2016,,,322,10,,4098,5.473961432774861,0
2017,,,29,2,,231,0.3036368171374003,0
2018,,,578,9,,2842,3.8934195677439374,0
2019,,,76,6,,882,1.1569668531417847,0
2020,,,164,8,,1957,2.72156879901886,0
2021,,,116,3,,318,0.4287031054496765,0
2022,,,72,2,,147,0.21582800149917603,0
2023,,,143,5,,565,0.7869877179463705,0
2024,,,319,10,,4229,5.588647782802582,0
2025,,,75,3,,387,0.5397619326909383,0
2026,,,267,9,,1665,2.1802800416946413,0
2027,,,211,7,,1302,1.7065907835960388,0
2028,,,215,7,,1880,2.342682087421417,0
2029,,,337,7,,1520,1.9366208116213481,0
2030,,,63,4,,580,0.759678582350413,0
2031,,,269,9,,1191,1.5096641937891642,0
2032,,,67,3,,282,0.37925472259521487,0
2033,,,362,10,,4100,5.114254331588745,0
2034,,,44,2,,64,0.09984585046768188,0
2035,,,109,6,,1327,1.697384484608968,0
2036,,,395,10,,3808,4.874324095249176,0
2037,,,321,10,,2564,3.1663158416748045,0
2038,,,402,10,,2347,2.9397802631060284,0
2039,,,76,4,,684,0.8608704566955566,0
2040,,,109,3,,405,0.5203857064247132,0
2041,,,51,3,,374,0.493544061978658,0
2042,,,64,4,,628,0.8217888474464417,0
2043,,,159,5,,864,1.1156602104504902,0
2044,,,126,7,,1048,1.39546803633372,0
2045,,,270,6,,1034,1.298783806959788,0
2046,,,351,9,,3181,4.013494861125946,0
2047,,,56,4,,452,0.6065762162208557,0
2048,,,60,3,,286,0.3877758701642354,0
2049,,,78,4,,515,0.6607878843943278,0
2050,,,31,3,,297,0.44418927033742267,0
2051,,,269,8,,1929,2.3686022480328877,0
2052,,,246,5,,887,1.1365657409032186,0
2053,,,71,3,,318,0.41440577109654747,0
2054,,,112,7,,1187,1.5414029796918234,0
2055,,,173,4,,556,0.6976302981376648,0
2056,,,442,11,,4960,6.207991727193197,0
2057,,,97,3,,405,0.5244358777999878,0
2058,,,312,9,,3357,4.2561862150828045,0
2059,,,72,4,,675,0.9000199238459269,0
2060,,,65,4,,379,0.5308897137641907,0
2061,,,198,6,,1443,1.8579967339833579,0
2062,,,298,9,,3402,4.272700007756551,0
2063,,,78,4,,463,0.616311510403951,0
2064,,,411,11,,3182,4.055124632517496,0
2065,,,391,15,,4302,6.334788763523102,0
2066,,,320,9,,3436,4.315397985776266,0
2067,,,147,3,,108,0.14593926270802815,0
2068,,,102,3,,314,0.41510690450668336,0
2069,,,242,8,,2750,3.47689288854599,0
2070,,,51,3,,249,0.3707602302233378,0
2071,,,269,14,,5864,6.694276289145152,0
2072,,,98,4,,684,0.7006349166234335,0
2073,,,299,9,,2379,2.4241179823875427,0
2074,,,337,9,,3160,3.256208864847819,0
2075,,,69,3,,314,0.34639296134312947,0
2076,,,63,3,,405,0.4426832755406698,0
2077,,,304,10,,4081,4.355221792062124,0
2078,,,209,8,,1530,1.568546211719513,0
2079,,,42,3,,268,0.28148688475290934,0
2080,,,70,3,,275,0.3034101446469625,0
2081,,,47,3,,318,0.3267716646194458,0
2082,,,438,8,,1971,2.0755144278208415,0
2083,,,63,3,,400,0.41938109397888185,0
2084,,,281,8,,2468,2.5195184985796613,0
2085,,,141,5,,625,0.6419018626213073,0
2086,,,284,9,,3075,3.2103214343388875,0
2087,,,80,3,,380,0.4162578503290812,0
2088,,,234,5,,1035,1.0952595313390097,0
2089,,,83,4,,623,0.6759284774462382,0
2090,,,133,7,,1894,2.0456867575645448,0
2091,,,346,9,,2684,2.723465653260549,0
2092,,,186,9,,2840,2.8541863481203715,0
2093,,,475,15,,4964,5.872405556837718,0
2094,,,432,15,,5668,6.230883808930715,0
2095,,,69,4,,411,0.45601104497909545,0
2096,,,109,4,,524,0.5537688295046489,0
2097,,,44,3,,223,0.27586091359456383,0
2098,,,351,10,,3864,3.942900848388672,0
2099,,,68,3,,314,0.32672207752863563,0
2100,,,220,8,,1263,1.2780032714207967,0
2101,,,262,9,,3351,3.458767068386078,0
2102,,,192,12,,3811,3.8987332622210187,0
2103,,,283,8,,1973,1.9837129592895508,0
2104,,,118,7,,1176,1.3343173742294312,0
2105,,,273,8,,1337,1.370281704266866,0
2106,,,134,5,,844,0.8754002730051677,0
2107,,,248,7,,2032,2.045687464872996,0
2108,,,171,8,,1994,2.1642003893852233,0
2109,,,177,9,,2821,2.871304480234782,0
2110,,,256,9,,2590,2.6055298606554667,0
2111,,,169,8,,1913,2.1150478601455687,0
2112,,,63,3,,405,0.421289332707723,0
2113,,,419,10,,3997,4.032517723242441,0
2114,,,46,2,,113,0.15664718945821127,0
2115,,,111,3,,290,0.2992502729098002,0
2116,,,271,8,,1574,1.5982511123021443,0
2117,,,337,12,,4880,4.981558497746786,0
2118,,,496,12,,5196,5.756931328773499,0
2119,,,108,7,,1078,1.1550756017367045,0
2120,,,65,3,,283,0.2965970039367676,0
2121,,,359,11,,3292,3.330792168776194,0
2122,,,90,4,,562,0.5718896945317586,0
2123,,,149,7,,1284,1.3982715010643005,0
2124,,,303,10,,3959,3.981929834683736,0
2125,,,356,12,,4406,4.9462952494621275,0
2126,,,756,10,,3160,3.583569081624349,0
2127,,,83,3,,314,0.35301135381062826,0
2128,,,42,4,,459,0.5234043717384338,0
2129,,,133,3,,266,0.2974828322728475,0
2130,,,165,4,,498,0.5423142234484355,0
2131,,,76,3,,251,0.2842796166737874,0
2132,,,29,3,,250,0.3483560045560201,0
2133,,,255,7,,2094,2.1605828483899434,0
2134,,,267,10,,2045,2.158594787120819,0
2135,,,202,6,,1327,1.3653033137321473,0
2136,,,346,9,,3459,3.5089383284250895,0
2137,,,67,3,,269,0.2888471603393555,0
2138,,,279,9,,2317,2.340630892912547,0
2139,,,286,8,,2664,2.6757891337076822,0
2140,,,164,9,,2518,2.6948716163635256,0
2141,,,34,3,,355,0.38888208468755087,0
2142,,,228,8,,1985,2.1412745634714763,0
2143,,,277,7,,1448,1.4965113123257956,0
2144,,,290,8,,2688,2.689819653828939,0
2145,,,146,5,,892,0.8946429371833802,0
2146,,,218,5,,890,0.8985062162081401,0
2147,,,72,3,,400,0.40985177357991537,0
2148,,,313,11,,4922,4.899740731716156,0
2149,,,239,8,,1949,1.9058538357416788,0
2150,,,70,3,,405,0.40093460083007815,0
2151,,,345,7,,1545,1.5435288548469543,0
2152,,,126,5,,887,0.9525335113207499,0
2153,,,280,10,,3573,3.805271486441294,0
2154,,,168,3,,310,0.37247285842895506,0
2155,,,327,10,,3940,3.8961554408073424,0
2156,,,229,8,,1632,1.5954822699228923,0
2157,,,31,2,,228,0.23177462418874104,0
2158,,,84,3,,405,0.41266547044118246,0
2159,,,95,4,,631,0.6118954499562581,0
2160,,,71,3,,397,0.39722005526224774,0
2161,,,37,3,,224,0.251891565322876,0
2162,,,535,14,,5854,6.324148412545522,0
2163,,,371,9,,3114,3.2895143628120422,0
2164,,,65,3,,318,0.3241065939267476,0
2165,,,281,8,,2419,2.4992706775665283,0
2166,,,320,10,,2140,2.2117229302724204,0
2167,,,209,9,,1849,1.8165282527605693,0
2168,,,415,12,,5798,5.9081117630004885,0
2169,,,349,10,,3923,3.9238632281621295,0
2170,,,235,7,,1760,1.8385453581809998,0
2171,,,173,4,,684,0.725527818997701,0
2172,,,95,4,,567,0.6333023508389791,0
2173,,,65,3,,365,0.4187773863474528,0
2174,,,279,8,,1837,1.9514680941899618,0
2175,,,384,10,,3996,4.241265217463176,0
2176,,,105,3,,405,0.44063337246576945,0
2177,,,331,9,,2905,3.0287259340286257,0
2178,,,44,4,,351,0.47088744640350344,0
2179,,,312,10,,2487,2.5792242964108785,0
2180,,,126,7,,1403,1.4899494528770447,0
2181,,,499,13,,6455,6.9607892791430155,0
2182,,,328,9,,3186,3.1448137958844504,0
2183,,,249,8,,2488,2.4606101632118227,0
2184,,,286,8,,2440,2.417603365580241,0
2185,,,85,4,,536,0.5485113898913065,0
2186,,,62,3,,400,0.40274452765782676,0
2187,,,311,9,,3139,3.1243683616320292,0
2188,,,40,3,,268,0.26004167000452677,0
2189,,,168,5,,1016,1.0000911831855774,0
2190,,,140,7,,1001,1.0649434328079224,0
2191,,,305,9,,3160,3.1908103704452513,0
2192,,,134,3,,314,0.3291486859321594,0
2193,,,232,8,,1598,1.6492410182952881,0
2194,,,58,2,,175,0.1826035499572754,0
2195,,,414,13,,5511,6.181980534394582,0
2196,,,250,8,,1694,1.7353824257850647,0
2197,,,74,3,,360,0.40802927017211915,0
2198,,,292,9,,2453,2.5146164139111837,0
2199,,,258,8,,2504,2.5408117810885114,0
2200,,,69,3,,400,0.4217965602874756,0
2201,,,40,2,,219,0.240970512231191,0
2202,,,94,3,,318,0.3479404409726461,0
2203,,,171,6,,919,0.9693106174468994,0
2204,,,314,10,,2728,2.8036795179049174,0
2205,,,255,9,,1739,1.7817131956418355,0
2206,,,74,4,,549,0.6316737691561382,0
2207,,,168,5,,1056,1.0752064784367878,0
2208,,,194,8,,2285,2.3153627117474875,0
2209,,,118,6,,1439,1.4980229218800862,0
2210,,,48,4,,510,0.5385389725367228,0
2211,,,78,5,,864,0.9149280230204264,0
2212,,,266,10,,1439,1.5172425230344138,0
2213,,,58,4,,629,0.6734843452771505,0
2214,,,116,5,,700,0.7672948678334554,0
2215,,,177,10,,3079,3.460886514186859,0
2216,,,55,5,,706,0.7496774593989054,0
2217,,,73,6,,767,0.8800439715385437,0
2218,,,62,3,,405,0.43544580539067584,0
2219,,,157,3,,318,0.3499690890312195,0
2220,,,270,8,,1515,1.6276177326838175,0
2221,,,238,9,,1673,1.7580231785774232,0
2222,,,94,4,,514,0.5369565685590109,0
2223,,,68,3,,387,0.41176161368687947,0
2224,,,62,3,,405,0.4301746726036072,0
2225,,,295,9,,3042,3.207931872208913,0
2226,,,76,2,,175,0.18612391948699952,0
2227,,,309,9,,3114,3.2149510780970254,0
2228,,,340,9,,3282,3.3569185972213744,0
2229,,,103,4,,487,0.5698942542076111,0
2230,,,247,7,,1757,1.79204523563385,0
2231,,,406,10,,3867,4.069808185100555,0
2232,,,76,3,,365,0.40209084351857505,0
2233,,,84,4,,679,0.7107209682464599,0
2234,,,95,3,,400,0.41939430236816405,0
2235,,,64,3,,405,0.42487819989522296,0
2236,,,42,2,,219,0.23533627192179363,0
2237,,,497,12,,4967,5.40326464176178,0
2238,,,195,7,,1765,1.8073159098625182,0
2239,,,83,3,,405,0.42694464524586995,0
2240,,,273,8,,2296,2.3669193665186565,0
2241,,,93,3,,405,0.43302322228749596,0
2242,,,158,8,,2084,2.214032765229543,0
2243,,,287,8,,2504,2.576755925019582,0
2244,,,22,1,,49,0.06001533269882202,0
2245,,,260,7,,1946,2.0079230030377704,0
2246,,,158,3,,293,0.30345635414123534,0
2247,,,345,11,,4389,4.7628828128178915,0
2248,,,95,5,,604,0.669968581199646,0
2249,,,51,2,,179,0.2200087348620097,0
2250,,,66,3,,314,0.33171945412953696,0
2251,,,52,3,,316,0.33465374310811363,0
2252,,,38,3,,268,0.2773047765096029,0
2253,,,121,4,,583,0.6533443530400594,0
2254,,,245,9,,2063,2.1392219702402753,0
2255,,,336,9,,3183,3.296629031499227,0
2256,,,148,8,,1762,1.9176125963528952,0
2257,,,119,5,,909,0.992056425412496,0
2258,,,203,8,,1541,1.598740557829539,0
2259,,,54,3,,247,0.28778595527013145,0
2260,,,102,5,,622,0.7762039383252461,0
2261,,,58,2,,219,0.23550425370534261,0
2262,,,73,4,,492,0.5192594130833944,0
2263,,,316,7,,1884,1.9040282368659973,0
2264,,,747,13,,5400,6.285829349358877,0
2265,,,283,8,,2453,2.5470884760220844,0
2266,,,328,9,,2414,2.450761167208354,0
2267,,,382,7,,1545,1.6029784520467123,0
2268,,,80,3,,405,0.4239423672358195,0
2269,,,333,9,,3198,3.264734613895416,0
2270,,,299,9,,3232,3.4558979829152423,0
2271,,,40,3,,324,0.34391023715337116,0
2272,,,144,6,,1182,1.3646058519681294,0
2273,,,97,5,,801,0.8786183595657349,0
2274,,,405,10,,4331,4.602928439776103,0
2275,,,72,2,,163,0.18067533969879152,0
2276,,,316,10,,3928,3.978638557593028,0
2277,,,337,9,,3499,3.55880841811498,0
2278,,,114,5,,761,0.7860274831453959,0
2279,,,359,10,,3310,3.379407227039337,0
2280,,,63,3,,400,0.4240008473396301,0
2281,,,144,9,,2414,2.4125792185465493,0
2282,,,134,3,,314,0.31787432034810387,0
2283,,,426,10,,2814,2.744838360945384,0
2284,,,53,3,,209,0.2793629010518392,0
2285,,,69,3,,318,0.31352642774581907,0
2286,,,287,12,,3993,3.8647533933321636,0
2287,,,350,10,,3996,3.821944224834442,0
2288,,,70,3,,400,0.3951767285664876,0
2289,,,163,8,,1958,2.010780922571818,0
2290,,,294,9,,1493,1.4764610449473063,0
2291,,,250,9,,3101,2.9971704840660096,0
2292,"public void Test674832(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE690_NULL_Deref_From_Return__getParameter_Servlet_trim_68a.data;
    if (data != null)
    {
        String stringTrimmed = data.trim();
        IO.writeLine(stringTrimmed);
    }
}","public void Test674832(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE690_NULL_Deref_From_Return__getParameter_Servlet_trim_68a.data;
    if (data != null)
    {
        String stringTrummed = data.trim();
        IO.writeLine(stringTrummed);
    }
}",46,5,"stringTrimmed:stringTrummed,",63,0.07006478706995646,Beam
2293,,,271,10,,4192,4.050391952196757,0
2294,,,385,11,,4082,4.383678499857584,0
2295,,,282,10,,3371,3.250447567303975,0
2296,,,210,8,,2321,2.2337885975837706,0
2297,,,280,10,,3292,3.3860583742459616,0
2298,,,271,8,,2323,2.2101428667704264,0
2299,,,93,3,,282,0.3016163388888041,0
2300,,,64,6,,1025,0.9899520794550578,0
2301,,,200,8,,1456,1.4264383554458617,0
2302,,,181,6,,870,0.89070649544398,0
2303,,,37,3,,266,0.26161462465922036,0
2304,,,90,4,,572,0.5968039592107137,0
2305,,,339,9,,2564,2.5022803942362466,0
2306,,,303,8,,2323,2.2512591322263082,0
2307,,,326,9,,2632,2.5078258593877156,0
2308,,,278,8,,1825,1.7317256371180216,0
2309,"public void Test891244() throws Throwable
{
    String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a.data;
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void Test891244() throws Throwable
{
    String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a.data;
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sslReference = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sslReference = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sslReference.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sslReference.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sslReference != null)
                {
                    sslReference.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",267,9,"sqlStatement:sslReference,",93,0.09537487824757894,Beam
2310,,,271,10,,3262,3.14815411567688,0
2311,,,90,4,,430,0.4759528636932373,0
2312,,,57,3,,290,0.29469953378041586,0
2313,,,137,7,,1148,1.171918014685313,0
2314,,,189,8,,1324,1.3086000283559163,0
2315,,,66,2,,137,0.15722959041595458,0
2316,,,110,3,,405,0.39682278235753377,0
2317,,,359,10,,4001,4.165502389272054,0
2318,,,347,13,,4320,4.7214687387148535,0
2319,,,99,4,,609,0.6586452921231588,0
2320,,,236,9,,1419,1.4479408224423727,0
2321,,,81,3,,283,0.3081822991371155,0
2322,,,64,3,,405,0.4258366664250692,0
2323,,,64,4,,629,0.6542229334513346,0
2324,,,147,9,,2375,2.5715072631835936,0
2325,,,352,9,,3427,3.5830307404200235,0
2326,,,221,6,,1114,1.1804773926734924,0
2327,,,204,10,,3242,3.37762367328008,0
2328,,,43,4,,378,0.41668133735656737,0
2329,,,264,8,,1940,2.041726227601369,0
2330,,,122,4,,459,0.5426445603370667,0
2331,,,263,7,,2094,2.208653676509857,0
2332,,,64,3,,283,0.30307255585988363,0
2333,,,37,3,,364,0.4145607908566793,0
2334,,,121,5,,753,0.8297849774360657,0
2335,,,371,9,,3494,3.7186524351437886,0
2336,,,253,8,,2755,2.815557853380839,0
2337,,,262,8,,2533,2.6082176844278973,0
2338,,,201,8,,1493,1.5766608317693074,0
2339,,,499,12,,3598,3.9156120498975118,0
2340,,,260,8,,1903,2.0113874276479087,0
2341,,,252,8,,2455,2.6061787088712056,0
2342,,,293,8,,2454,2.6312187393506368,0
2343,,,41,4,,486,0.5404953161875407,0
2344,,,53,3,,405,0.4334956447283427,0
2345,,,349,7,,1505,1.6269831776618957,0
2346,,,245,11,,3852,4.273739620049795,0
2347,,,165,9,,2589,2.928203654289246,0
2348,,,268,8,,1245,1.3862923423449198,0
2349,,,328,7,,1696,1.8228639006614684,0
2350,,,71,3,,324,0.36025387843449913,0
2351,,,371,9,,3427,3.7324632167816163,0
2352,,,387,10,,3003,3.3092116713523865,0
2353,,,216,5,,892,0.9591245929400126,0
2354,,,77,4,,407,0.45681159098943075,0
2356,,,329,8,,1699,1.8262640078862509,0
2357,,,211,8,,2454,2.6580077330271403,0
2358,,,357,12,,4230,5.016049702962239,0
2359,,,293,8,,2249,2.45475074450175,0
2360,,,348,16,,4758,5.398385802904765,0
2361,,,63,3,,405,0.44994228283564247,0
2362,,,142,8,,1935,2.141862082481384,0
2363,,,546,13,,4302,5.9316708525021875,0
2364,,,103,4,,522,0.5934390465418498,0
2365,,,306,9,,3522,3.7748011350631714,0
2366,,,188,8,,2014,2.159941569964091,0
2367,,,156,9,,2328,2.65125025510788,0
2368,,,290,8,,2817,2.9668858647346497,0
2369,,,46,5,,888,1.0317914128303527,0
2370,,,336,9,,2033,2.2054936289787292,0
2371,,,94,3,,290,0.32872784535090127,0
2372,,,46,4,,417,0.44410887559254963,0
2373,,,85,3,,405,0.44135502974192303,0
2374,,,345,9,,3181,3.3393855611483256,0
2375,,,127,7,,1335,1.431421418984731,0
2376,,,319,10,,3825,3.984066637357076,0
2377,,,119,6,,1391,1.471523153781891,0
2378,,,302,8,,2755,2.8551228562990825,0
2379,,,125,5,,863,0.9435994068781535,0
2380,,,321,6,,958,0.9906129797299703,0
2381,,,289,7,,2054,2.1241960962613424,0
2382,,,37,3,,398,0.4433792312939962,0
2383,,,217,7,,2032,2.0738712986310324,0
2384,,,168,5,,994,1.0243425726890565,0
2385,,,372,9,,2905,3.0272350788116453,0
2386,,,446,12,,6139,6.509436877568563,0
2387,,,118,4,,649,0.7026229858398437,0
2388,,,236,6,,1381,1.399631921450297,0
2389,,,306,9,,2409,2.503274889787038,0
2390,,,102,5,,586,0.7432223677635192,0
2391,,,154,5,,828,0.9192858497301738,0
2392,,,485,17,,5721,6.489188575744629,0
2393,,,364,10,,4119,4.201997208595276,0
2394,,,341,9,,3142,3.2970886826515198,0
2395,,,333,7,,1673,1.8275741855303447,0
2396,,,327,9,,2857,2.9941407283147177,0
2397,,,90,3,,365,0.4050051808357239,0
2398,,,419,10,,4234,4.403038235505422,0
2399,,,113,6,,990,1.0480449358622232,0
2400,,,47,3,,285,0.31458179155985516,0
2401,,,99,3,,318,0.3404425064722697,0
2402,,,122,4,,524,0.5671744386355082,0
2403,,,301,10,,2266,2.3506322860717774,0
2404,,,254,10,,3379,3.576680529117584,0
2405,,,286,8,,2349,2.4669811725616455,0
2406,,,288,10,,3507,3.7576271692911782,0
2407,,,92,3,,405,0.43286314805348713,0
2408,,,448,10,,3523,3.946964081128438,0
2409,,,284,8,,2709,2.888171660900116,0
2410,,,118,3,,262,0.2893553853034973,0
2411,,,38,5,,641,0.7432203968365987,0
2412,,,51,4,,584,0.6614823540051779,0
2413,,,57,4,,526,0.5846623142560323,0
2414,,,111,3,,315,0.3453749616940816,0
2415,,,181,8,,1429,1.586896296342214,0
2416,,,158,8,,2027,2.23347585995992,0
2417,,,146,8,,986,1.080470589796702,0
2418,,,76,4,,468,0.5477736314137777,0
2419,,,111,4,,645,0.7100232084592183,0
2420,,,106,3,,400,0.4413975755373637,0
2421,,,323,8,,1969,2.1202533562978108,0
2422,,,48,5,,814,0.9065401713053386,0
2423,,,259,7,,2099,2.2265929142634073,0
2424,,,304,10,,4218,4.556062352657318,0
2425,,,122,4,,474,0.5289360960324605,0
2426,,,156,5,,701,0.8401939709981282,0
2427,,,142,8,,1938,2.1918882091840106,0
2428,,,275,8,,2616,2.693649677435557,0
2429,,,402,11,,2227,2.3325405518213906,0
2430,,,273,14,,4481,4.851124350229899,0
2431,,,79,3,,251,0.29223998785018923,0
2432,,,312,10,,1753,1.8831775705019633,0
2433,"public void Test172435(CWE690_NULL_Deref_From_Return__Class_String_67a.Container dataContainer ) throws Throwable
{
    String data = dataContainer.containerOne;
    if (data != null)
    {
        String stringTrimmed = data.trim();
        IO.writeLine(stringTrimmed);
    }
}","public void Test172435(CWE690_NULL_Deref_From_Return__Class_String_67a.Container dataContainer ) throws Throwable
{
    String data = dataContainer.containerOne;
    if (data != null)
    {
        String stringTrrimpled = data.trim();
        IO.writeLine(stringTrrimpled);
    }
}",45,4,"stringTrimmed:stringTrrimpled,",63,0.0723823626836141,Beam
2434,,,51,3,,214,0.28517178297042844,0
2435,,,277,9,,2913,3.1774523695309957,0
2436,,,118,5,,944,1.046549956003825,0
2437,,,47,3,,286,0.3280779719352722,0
2438,,,34,1,,25,0.036431698004404704,0
2439,,,286,9,,3197,3.4603694081306458,0
2440,,,212,13,,5092,5.4985965092976885,0
2441,,,301,10,,3776,4.076676599184672,0
2442,,,212,9,,3341,3.552899984518687,0
2443,,,164,8,,1897,2.2079800645510357,0
2444,,,276,8,,2504,2.638578220208486,0
2445,,,188,10,,2244,2.427011179924011,0
2446,,,225,8,,1894,1.982080582777659,0
2447,,,296,8,,1952,2.038127434253693,0
2448,,,423,10,,4019,4.283826855818431,0
2449,,,24,1,,49,0.06558150053024292,0
2450,,,60,3,,314,0.34934881925582884,0
2451,,,471,9,,2498,2.7220680117607117,0
2452,,,331,9,,2037,2.1535694360733033,0
2453,,,342,17,,5867,6.476778173446656,0
2454,,,255,8,,2283,2.4754350463549297,0
2455,,,323,10,,2457,2.694533936182658,0
2456,,,98,3,,400,0.444104011853536,0
2457,,,553,12,,6073,6.72191888888677,0
2458,,,50,2,,176,0.20980865557988485,0
2459,,,240,7,,1474,1.574468207359314,0
2460,,,228,9,,2054,2.193966293334961,0
2461,,,129,3,,229,0.26923224528630574,0
2462,,,293,8,,1953,2.1177152434984845,0
2463,,,49,3,,314,0.34657238721847533,0
2464,,,287,9,,2627,2.8442079186439515,0
2465,,,114,6,,1294,1.4877049922943115,0
2466,,,148,8,,1954,2.1637753446896872,0
2467,,,68,4,,820,0.8754557530085246,0
2468,,,133,7,,1763,2.023452874024709,0
2469,,,281,8,,2441,2.6503801623980205,0
2470,,,257,7,,1827,1.9226704955101013,0
2471,,,177,8,,2202,2.3073707620302835,0
2472,,,100,4,,582,0.667303737004598,0
2473,,,84,3,,369,0.40858407815297443,0
2474,,,246,9,,1882,2.0089392185211183,0
2475,,,256,9,,2408,2.6437342445055645,0
2476,,,83,3,,252,0.2770810484886169,0
2477,,,155,5,,806,0.8924128135045369,0
2478,,,221,8,,1431,1.5292864163716635,0
2479,,,62,4,,796,0.8533649325370789,0
2480,,,106,4,,566,0.6061212460199992,0
2481,,,62,4,,510,0.5607616027196248,0
2482,,,57,3,,324,0.35542980035146077,0
2483,,,132,7,,1177,1.3468432585398356,0
2484,,,162,5,,774,0.856319518884023,0
2485,,,126,5,,985,1.0904494166374206,0
2486,,,58,2,,163,0.19568996429443358,0
2487,,,348,9,,3090,3.37654683192571,0
2488,,,88,4,,418,0.4958110849062602,0
2489,,,63,4,,560,0.6139203508694967,0
2490,,,93,3,,405,0.45815606117248536,0
2491,,,158,8,,1805,2.0605383038520815,0
2492,,,265,10,,3719,3.9989036560058593,0
2493,,,267,9,,1752,1.9152670621871948,0
2494,,,275,8,,2727,2.9539082249005637,0
2495,,,292,12,,3652,3.990843343734741,0
2496,,,282,9,,3016,3.2623141288757322,0
2497,,,313,10,,3363,3.6785396575927733,0
2498,,,52,3,,318,0.3376321792602539,0
2499,,,88,3,,360,0.42274688482284545,0
2500,,,65,3,,405,0.4332883358001709,0
2501,,,97,5,,734,0.7990008234977722,0
2502,,,85,4,,498,0.5784247914950053,0
2503,,,69,4,,496,0.5732816060384115,0
2504,,,65,3,,293,0.3173104445139567,0
2505,,,258,9,,2102,2.274498252073924,0
2506,,,92,4,,595,0.686716624101003,0
2507,,,235,6,,1477,1.6104039629300435,0
2508,,,551,13,,7126,7.955778960386912,0
2509,,,68,4,,513,0.592920434474945,0
2510,,,143,5,,803,0.8697812716166179,0
2511,,,269,7,,2055,2.2553280433019003,0
2512,,,200,9,,3324,3.621078133583069,0
2513,,,466,11,,3509,3.9612605730692545,0
2514,,,254,9,,3400,3.780838410059611,0
2515,"public void Test188463(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    Socket socket = null;
    PrintWriter writer = null;
    try
    {
        socket = new Socket(""remote_host"", 1337);
        writer = new PrintWriter(socket.getOutputStream(), true);
        writer.println(data);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""Error writing to the socket"", exceptIO);
    }
    finally
    {
        if (writer != null)
        {
            writer.close();
        }
        try
        {
            if (socket != null)
            {
                socket.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
        }
    }
}","public void Test188463(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    Socket ssl = null;
    PrintWriter writer = null;
    try
    {
        ssl = new Socket(""remote_host"", 1337);
        writer = new PrintWriter(ssl.getOutputStream(), true);
        writer.println(data);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""Error writing to the socket"", exceptIO);
    }
    finally
    {
        if (writer != null)
        {
            writer.close();
        }
        try
        {
            if (ssl != null)
            {
                ssl.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
        }
    }
}",149,6,"socket:ssl,",63,0.07179752588272095,Beam
2516,,,54,5,,837,0.9490029374758403,0
2517,,,283,7,,1264,1.3802664120992025,0
2518,,,237,8,,1322,1.463747509320577,0
2519,,,247,8,,1492,1.6448478738466898,0
2520,,,288,9,,3144,3.4124871293703714,0
2521,,,421,11,,3014,3.319867932796478,0
2522,,,81,4,,582,0.6721204717954,0
2523,,,91,3,,282,0.3275715708732605,0
2524,,,197,6,,1014,1.0792088389396668,0
2525,,,141,11,,3626,4.17117501894633,0
2526,,,212,6,,1105,1.1602054476737975,0
2527,,,57,3,,365,0.42270923852920533,0
2528,,,54,2,,175,0.19651799996693928,0
2529,,,140,8,,1631,1.8391199906667073,0
2530,,,294,9,,3224,3.429883801937103,0
2531,,,122,8,,1972,2.201442329088847,0
2532,,,258,8,,2617,2.815208061536153,0
2533,,,113,3,,343,0.38495598634084066,0
2534,,,158,7,,1838,1.9646187623341878,0
2535,,,143,5,,787,0.8674580176671346,0
2536,,,266,8,,2755,2.903349713484446,0
2537,,,54,2,,179,0.2212317665417989,0
2538,,,74,3,,405,0.4363387664159139,0
2539,,,311,9,,3162,3.368945554892222,0
2540,,,454,12,,4870,5.593366420269012,0
2541,,,172,9,,2521,2.704318686326345,0
2542,,,272,9,,3148,3.420000644524892,0
2543,,,507,12,,5597,6.14360888004303,0
2544,,,259,8,,2686,2.7830237547556558,0
2545,,,100,3,,314,0.34782187938690184,0
2546,,,264,8,,2387,2.5131779114405313,0
2547,,,243,8,,1912,2.030417815844218,0
2548,,,110,4,,505,0.5606265703837077,0
2549,,,301,9,,2404,2.5262715260187787,0
2550,,,106,6,,1195,1.3162232478459677,0
2551,,,156,9,,2663,2.8903264959653217,0
2552,,,282,8,,2437,2.609570260842641,0
2553,,,249,9,,3383,3.559717893600464,0
2554,,,106,3,,405,0.4335835496584574,0
2555,,,61,3,,314,0.3340904235839844,0
2556,,,297,10,,4252,4.46559286514918,0
2557,,,89,5,,790,0.9117983023325602,0
2558,,,450,11,,4764,5.042955990632375,0
2559,,,67,3,,405,0.4389469146728516,0
2560,,,165,8,,2064,2.243196662267049,0
2561,,,111,3,,321,0.34759047428766887,0
2562,,,80,5,,878,0.9294072031974793,0
2563,,,119,3,,405,0.429437251885732,0
2564,,,194,8,,2084,2.132008715470632,0
2565,,,62,3,,314,0.3344444274902344,0
2566,,,64,3,,242,0.30023626089096067,0
2567,,,139,8,,1880,2.042684773604075,0
2568,,,208,11,,3843,4.007685712973276,0
2569,,,58,5,,462,0.6855432311693828,0
2570,,,122,6,,1195,1.2982746561368306,0
2571,,,148,3,,405,0.43526316483815514,0
2572,,,283,8,,2750,2.8457985321680703,0
2573,,,256,9,,3354,3.487527767817179,0
2574,,,280,9,,3051,3.103829244772593,0
2575,,,253,5,,752,0.780405338605245,0
2576,,,320,10,,4237,4.356915032863617,0
2577,,,148,5,,786,0.8558795054753622,0
2578,,,264,6,,1353,1.39250514904658,0
2579,,,65,2,,159,0.17920754750569662,0
2580,,,67,3,,287,0.31185409228007,0
2581,,,58,4,,457,0.529712990919749,0
2582,,,62,4,,454,0.49594238996505735,0
2583,,,315,10,,3833,4.113004930814108,0
2584,,,367,13,,5742,6.434116919835408,0
2585,,,436,12,,5104,5.654340712229411,0
2586,,,136,8,,1453,1.6875705997149149,0
2587,,,122,8,,1365,1.4885538538297018,0
2588,,,162,7,,1282,1.4094216346740722,0
2589,,,123,5,,872,0.9947291533152263,0
2590,,,47,3,,310,0.3732077558835348,0
2591,,,51,2,,163,0.19908606608708698,0
2592,,,115,6,,998,1.0694047649701437,0
2593,,,310,9,,3094,3.3739675839742023,0
2594,,,60,3,,318,0.34767177104949953,0
2595,,,97,5,,905,0.9707501212755839,0
2596,,,112,3,,314,0.35057593981424967,0
2597,,,58,3,,360,0.41155380407969155,0
2598,,,182,7,,1864,1.9829375505447389,0
2599,,,306,10,,4208,4.454970888296763,0
2600,,,129,3,,314,0.36896684964497883,0
2601,,,161,8,,1937,2.2417638381322225,0
2602,,,118,4,,520,0.6058035691579183,0
2603,,,311,9,,2988,3.314207681020101,0
2604,,,164,7,,1864,1.9559936324755351,0
2605,,,329,10,,3532,3.6925275127092996,0
2606,,,293,8,,1416,1.5010602911313375,0
2607,,,41,3,,359,0.4034094333648682,0
2608,,,227,6,,1325,1.404587455590566,0
2609,,,322,8,,2626,2.774840207894643,0
2610,,,112,3,,400,0.4298363169034322,0
2611,,,96,4,,557,0.5871141672134399,0
2612,,,53,3,,314,0.343067745367686,0
2613,,,63,5,,699,0.7945083975791931,0
2614,,,54,2,,179,0.21438186566034953,0
2615,,,309,10,,2586,2.7703492681185407,0
2616,,,105,4,,514,0.5944782654444377,0
2617,,,156,7,,1363,1.5019181728363038,0
2618,,,84,4,,542,0.5877296884854635,0
2619,,,338,10,,4331,4.608678547541301,0
2620,,,63,3,,318,0.34014339447021485,0
2621,,,89,5,,772,0.8851051211357117,0
2622,,,159,9,,2802,3.000086466471354,0
2623,,,24,2,,171,0.21863899230957032,0
2624,,,219,6,,1129,1.1930593808492025,0
2625,,,299,8,,2504,2.6482511083285014,0
2626,,,123,5,,907,0.9827437798182169,0
2627,,,73,4,,508,0.5586532632509867,0
2628,,,357,10,,4197,4.441265451908111,0
2629,,,71,3,,286,0.3233860929807027,0
2630,,,396,10,,4131,4.321987187862396,0
2631,,,148,8,,1427,1.4814873337745667,0
2632,,,158,5,,853,0.8942551175753276,0
2633,,,325,9,,2197,2.2308462858200073,0
2634,,,372,11,,3885,4.231980069478353,0
2635,,,126,6,,1220,1.2805815140406291,0
2636,,,294,11,,3635,3.752972972393036,0
2637,,,76,3,,400,0.42051925261815387,0
2638,,,112,6,,654,0.7265540917714437,0
2639,,,78,6,,954,1.004373558362325,0
2640,,,88,3,,405,0.4235773245493571,0
2641,,,67,4,,630,0.6630125204722087,0
2642,,,476,9,,2676,2.7677195270856223,0
2643,,,126,6,,1396,1.4512614647547404,0
2644,,,299,6,,946,0.9786025484402975,0
2645,,,73,3,,318,0.32924391428629557,0
2646,,,47,2,,159,0.1773675521214803,0
2647,,,73,5,,683,0.7458951950073243,0
2648,,,194,8,,2382,2.4091187795003255,0
2649,,,98,6,,1306,1.3194697101910908,0
2650,,,37,2,,163,0.17629674275716145,0
2651,,,90,2,,173,0.18643361727396648,0
2652,,,287,8,,1944,1.9552133719126383,0
2653,,,81,4,,645,0.6773897528648376,0
2654,,,365,11,,5193,5.338327749570211,0
2655,,,362,10,,4274,4.334704677263896,0
2656,,,220,8,,2398,2.489638018608093,0
2657,,,169,5,,975,1.0363535602887473,0
2658,,,251,7,,1386,1.448643179734548,0
2659,,,88,5,,804,0.8653662125269572,0
2660,,,316,9,,2974,3.0690699577331544,0
2661,"public void Test274590(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            System.out.format(""%s%n"", data);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void test274610(byte[] dataserialised ) throws Throwable
{
    ByteArrayInputStream streamShortStringConnection = null;
    ObjectInputStream streamFunctionInput = null;
    try
    {
        streamShortStringConnection = new ByteArrayInputStream(dataserialised);
        streamFunctionInput = new ObjectInputStream(streamShortStringConnection);
        String DATA = (String)streamFunctionInput.readObject();
        if (DATA != null)
        {
            System.out.format(""%s%n"", DATA);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptclassNoFind)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptclassNoFind);
    }
    finally
    {
        try
        {
            if (streamFunctionInput != null)
            {
                streamFunctionInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamShortStringConnection != null)
            {
                streamShortStringConnection.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",199,7,"data:DATA,streamByteArrayInput:streamShortStringConnection,streamObjectInput:streamFunctionInput,dataSerialized:dataserialised,Test274590:test274610,exceptClassNotFound:exceptclassNoFind,",708,0.7289850076039632,Beam
2662,,,225,7,,1783,1.8124725858370463,0
2663,,,44,5,,596,0.6409877101580302,0
2664,,,40,3,,426,0.4820072611172994,0
2665,,,88,4,,577,0.616385034720103,0
2666,,,185,8,,1877,1.991526222229004,0
2668,,,140,8,,1926,2.07689395348231,0
2669,,,280,8,,2438,2.506682336330414,0
2670,,,139,6,,1144,1.1710760712623596,0
2671,,,214,7,,1228,1.2502093195915223,0
2672,,,375,9,,3186,3.269104067484538,0
2673,,,59,4,,444,0.4962575038274129,0
2674,,,346,10,,4206,4.408506762981415,0
2675,,,316,9,,2695,2.7826401472091673,0
2676,,,47,2,,88,0.09868346452713013,0
2677,,,34,2,,159,0.18129912217458088,0
2678,,,244,7,,1165,1.2061456441879272,0
2679,,,431,12,,3467,4.7318243702252705,0
2680,,,128,3,,405,0.42325299183527626,0
2681,,,102,3,,293,0.3258232593536377,0
2682,,,249,8,,2317,2.4386990626653033,0
2683,,,167,5,,824,0.8861778378486633,0
2684,,,452,11,,4269,4.590773578484853,0
2685,,,87,4,,480,0.5505180716514587,0
2686,,,189,8,,1662,1.8366336305936177,0
2687,,,183,8,,2038,2.348435835043589,0
2688,,,64,2,,159,0.1867053786913554,0
2689,,,245,6,,1357,1.464522910118103,0
2690,,,90,3,,318,0.33868890603383384,0
2691,,,64,3,,356,0.4240390698115031,0
2692,,,280,6,,984,1.0552404642105102,0
2693,,,168,5,,792,0.8699599305788676,0
2694,,,269,8,,2623,2.8057605266571044,0
2695,,,303,9,,3437,3.6705195109049478,0
2696,,,340,9,,3177,3.413834265867869,0
2697,,,61,3,,399,0.4433031678199768,0
2698,,,346,9,,3398,3.7049147566159566,0
2699,,,283,11,,3959,4.24572012424469,0
2700,,,132,9,,1294,1.512565263112386,0
2701,,,361,13,,5522,6.092953546841939,0
2702,,,261,7,,1869,1.9763097047805787,0
2703,,,451,14,,5169,5.543001147111257,0
2704,,,318,9,,3288,3.519695309797923,0
2705,,,273,8,,2724,2.890622115135193,0
2706,,,86,3,,374,0.42565921942392987,0
2707,,,172,7,,1209,1.2997016827265422,0
2708,,,233,8,,1682,1.8458211739857993,0
2709,,,262,8,,1677,1.7883553584416707,0
2710,,,79,3,,405,0.4328427036603292,0
2711,,,37,2,,219,0.23993502855300902,0
2712,,,78,4,,684,0.7140965700149536,0
2713,,,149,5,,983,1.066830857594808,0
2714,,,298,9,,3117,3.1954130570093793,0
2715,,,284,9,,3429,3.5288579940795897,0
2716,,,237,10,,2997,3.2741686860720316,0
2717,,,253,5,,866,0.9155533870061239,0
2718,,,66,4,,606,0.678227957089742,0
2719,,,225,8,,2006,2.0824108878771463,0
2720,,,119,5,,778,0.9010824998219807,0
2721,,,62,4,,521,0.6002459685007732,0
2722,,,172,5,,895,0.940052580833435,0
2723,,,208,10,,3433,3.6786389986673993,0
2724,,,110,3,,293,0.32020662625630697,0
2725,,,22,1,,25,0.03529257774353027,0
2726,,,271,9,,1725,1.8074341813723247,0
2727,,,378,7,,1549,1.6553770899772644,0
2728,,,72,4,,554,0.6451790690422058,0
2729,,,129,8,,1241,1.376350963115692,0
2730,,,201,8,,1333,1.4251015583674114,0
2731,,,340,10,,2960,3.18365577061971,0
2732,,,68,4,,544,0.5770501295725504,0
2733,,,93,5,,768,0.9020642360051473,0
2734,,,383,14,,3005,3.7664711316426596,0
2735,,,218,8,,2502,2.565790557861328,0
2736,,,66,3,,400,0.44799835681915284,0
2737,,,204,8,,1601,1.698258908589681,0
2738,,,277,8,,2080,2.179563601811727,0
2739,,,68,4,,478,0.5386169195175171,0
2740,,,93,3,,405,0.44263195991516113,0
2741,,,39,3,,268,0.29800942341486614,0
2743,,,188,10,,2255,2.301133676369985,0
2744,,,40,3,,268,0.27661648591359456,0
2745,,,131,7,,1319,1.3536749641100565,0
2746,,,61,4,,702,0.6593329310417175,0
2747,,,66,4,,679,0.6472297787666321,0
2748,,,345,10,,3954,3.9654861211776735,0
2749,,,96,3,,400,0.4146279335021973,0
2750,,,90,2,,174,0.2146209438641866,0
2751,,,250,9,,1826,1.8937050819396972,0
2752,,,327,9,,3494,3.5507878144582112,0
2753,,,273,8,,1574,1.6260517358779907,0
2754,,,39,3,,268,0.2760877251625061,0
2755,,,194,8,,1634,1.6674184401830037,0
2756,,,215,8,,1687,1.7329996625582378,0
2757,,,812,10,,2064,2.646191692352295,0
2758,,,72,3,,405,0.4125337600708008,0
2759,,,194,10,,3111,3.322378476460775,0
2760,,,75,4,,605,0.6591568390528361,0
2761,,,48,3,,395,0.4318129022916158,0
2762,,,91,5,,629,0.7544891834259033,0
2763,,,341,11,,4290,4.597896798451742,0
2764,,,73,5,,868,0.9410577456156413,0
2765,,,287,8,,2504,2.63267613252004,0
2766,,,322,9,,2598,2.752943181991577,0
2767,,,315,10,,3520,3.7085110346476235,0
2768,,,430,9,,2724,2.8879359205563864,0
2769,"public void Test520786(String dataArray[] ) throws Throwable
{
    String data = dataArray[2];
    if (data != null)
    {
        System.out.format(data);
    }
}","public void test20796(String dataStream[] ) throws Throwable
{
    String buffer = dataStream[2];
    if (buffer != null)
    {
        System.out.format(buffer);
    }
}",39,3,"data:buffer,Test520786:test20796,dataArray:dataStream,",196,0.2210742473602295,Beam
2770,,,123,4,,556,0.5933111151059468,0
2771,,,54,3,,438,0.4687471866607666,0
2772,,,37,2,,219,0.2548591772715251,0
2773,,,245,8,,2692,2.8254072864850364,0
2774,,,208,11,,4000,4.27140425046285,0
2775,,,320,10,,2564,2.685218334197998,0
2776,,,181,9,,1517,1.6760506232579548,0
2777,"private void Test035399() throws Throwable
{
    String data;
    data = """";  
    {
        ServerSocket listener = null;
        Socket socket = null;
        BufferedReader readerBuffered = null;
        InputStreamReader readerInputStream = null;
        try
        {
            listener = new ServerSocket(39543);
            socket = listener.accept();
            readerInputStream = new InputStreamReader(socket.getInputStream(), ""UTF-8"");
            readerBuffered = new BufferedReader(readerInputStream);
            data = readerBuffered.readLine();
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
        }
        finally
        {
            try
            {
                if (readerBuffered != null)
                {
                    readerBuffered.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
            }
            try
            {
                if (readerInputStream != null)
                {
                    readerInputStream.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
            }
            try
            {
                if (socket != null)
                {
                    socket.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
            }
            try
            {
                if (listener != null)
                {
                    listener.close();
                }
            }
            catch (IOException exceptIO)
            {
                IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
            }
        }
    }
    String xmlFile = null;
    if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
    {
        xmlFile = ""\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml"";
    }
    else
    {
        xmlFile = ""./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml"";
    }
    if (data != null)
    {
        String [] tokens = data.split(""||"");
        if( tokens.length < 2 )
        {
            return;
        }
        String username = StringEscapeUtils.escapeXml(tokens[0]);
        String password = StringEscapeUtils.escapeXml(tokens[1]);
        XPath xPath = XPathFactory.newInstance().newXPath();
        InputSource inputXml = new InputSource(xmlFile);
        String query = ""//users/user[name/text()='"" + username +
                       ""' and pass/text()='"" + password + ""']"" +
                       ""/secret/text()"";
        String secret = (String)xPath.evaluate(query, inputXml, XPathConstants.STRING);
    }
}","private void listened() throws Throwable
{
    String error;
    error = """";  
    {
        ServerSocket listened = null;
        Socket ocket = null;
        BufferedReader readerBuffered = null;
        InputStreamReader readerInputStream = null;
        try
        {
            listened = new ServerSocket(39543);
            ocket = listened.accept();
            readerInputStream = new InputStreamReader(ocket.getInputStream(), ""UTF-8"");
            readerBuffered = new BufferedReader(readerInputStream);
            error = readerBuffered.readLine();
        }
        catch (IOException withoutURI)
        {
            IO.logger.log(Level.WARNING, ""Error with stream reading"", withoutURI);
        }
        finally
        {
            try
            {
                if (readerBuffered != null)
                {
                    readerBuffered.close();
                }
            }
            catch (IOException withoutURI)
            {
                IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", withoutURI);
            }
            try
            {
                if (readerInputStream != null)
                {
                    readerInputStream.close();
                }
            }
            catch (IOException withoutURI)
            {
                IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", withoutURI);
            }
            try
            {
                if (ocket != null)
                {
                    ocket.close();
                }
            }
            catch (IOException withoutURI)
            {
                IO.logger.log(Level.WARNING, ""Error closing Socket"", withoutURI);
            }
            try
            {
                if (listened != null)
                {
                    listened.close();
                }
            }
            catch (IOException withoutURI)
            {
                IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", withoutURI);
            }
        }
    }
    String jsonFiles = null;
    if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
    {
        jsonFiles = ""\\src\\testcases\\CWE643_Xpath Injection\\CWE643_Xpath_Injection__Helper.xml"";
    }
    else
    {
        jsonFiles = ""./src/testcases/CWE643_Xpath Injection/CWE643_Xpath_Injection__Helper.xml"";
    }
    if (error != null)
    {
        String [] words = error.split(""||"");
        if( words.length < 2 )
        {
            return;
        }
        String login = StringEscapeUtils.escapeXml(words[0]);
        String email = StringEscapeUtils.escapeXml(words[1]);
        XPath p = XPathFactory.newInstance().newXPath();
        InputSource in = new InputSource(jsonFiles);
        String query = ""//users/user[name/text()='"" + login +
                       ""' and pass/text()='"" + email + ""']"" +
                       ""/secret/text()"";
        String secret = (String)p.evaluate(query, in, XPathConstants.STRING);
    }
}",422,13,"socket:ocket,inputXml:in,username:login,listener:listened,data:error,xmlFile:jsonFiles,password:email,tokens:words,xPath:p,Test035399:listened,exceptIO:withoutURI,",4090,5.0594190001487735,Beam
2778,,,314,8,,2622,2.8293158690134685,0
2779,,,90,2,,192,0.2361798127492269,0
2780,,,76,3,,268,0.28436374266942344,0
2781,,,409,10,,4235,4.541534423828125,0
2782,,,381,11,,4888,5.1989037036895756,0
2783,,,90,2,,219,0.24766903320948283,0
2784,,,145,7,,1213,1.2400897145271301,0
2785,,,404,11,,5104,5.315875383218129,0
2786,,,45,4,,510,0.5246729334195455,0
2787,,,58,2,,219,0.23852094809214275,0
2788,,,352,9,,2580,2.678551208972931,0
2789,,,214,7,,1268,1.3305580457051596,0
2790,,,87,2,,175,0.19577410221099853,0
2791,,,314,9,,3213,3.3521983861923217,0
2792,,,26,1,,49,0.06288329760233562,0
2793,,,313,6,,1046,1.0833070198694865,0
2794,,,117,3,,405,0.4148295998573303,0
2795,,,323,8,,1483,1.5642468293507894,0
2796,,,74,3,,282,0.32123549779256183,0
2797,,,216,8,,1971,2.081497307618459,0
2798,,,298,10,,2645,2.7751229802767434,0
2799,,,102,5,,649,0.7605030775070191,0
2800,,,75,5,,908,0.956635590394338,0
2801,,,114,5,,545,0.6027864654858907,0
2802,,,170,8,,1363,1.4290347297986348,0
2803,,,314,9,,3432,3.481484504540761,0
2804,,,276,5,,744,0.7847941080729167,0
2806,,,248,7,,1889,1.9146049777666727,0
2807,,,313,10,,4166,4.346433933575948,0
2808,,,403,10,,3972,4.153160738945007,0
2810,,,296,7,,1618,1.6909855246543883,0
2811,,,331,11,,4833,5.026004966100057,0
2812,,,277,10,,2666,3.189374355475108,0
2813,,,102,3,,314,0.33630894422531127,0
2814,,,320,9,,2297,2.389643843968709,0
2815,,,50,3,,386,0.4032993157704671,0
2816,,,174,7,,1487,1.5588830272356669,0
2817,,,542,13,,5638,6.508455300331116,0
2818,,,285,8,,2290,2.3506726741790773,0
2819,,,312,11,,4327,4.659291152159373,0
2820,,,218,7,,1487,1.5512012084325155,0
2821,,,403,11,,4387,4.586876066525777,0
2822,,,315,8,,2455,2.5468008081118265,0
2823,,,163,8,,1395,1.4632248799006145,0
2824,,,84,3,,314,0.3353286306063334,0
2825,,,29,3,,231,0.259671680132548,0
2826,,,383,11,,4807,5.037671351432801,0
2827,,,308,10,,3932,4.122484950224559,0
2828,,,203,6,,1432,1.5186118721961974,0
2829,,,439,12,,3407,4.685650805632274,0
2830,,,422,10,,4331,4.524231890837352,0
2831,,,118,7,,1618,1.7722517808278402,0
2832,,,253,8,,2467,2.667137781778971,0
2833,,,134,9,,1806,2.1298094431559247,0
2834,,,76,3,,343,0.3674279769261678,0
2835,,,332,12,,4575,4.985303239027659,0
2836,,,307,10,,2668,2.809129540125529,0
2837,,,51,3,,264,0.33695205052693683,0
2838,,,177,8,,2107,2.2547367652257284,0
2839,,,273,8,,2500,2.6249518036842345,0
2840,,,341,10,,3521,3.696204582850138,0
2841,,,97,4,,515,0.589368748664856,0
2842,,,83,3,,405,0.43374305168787636,0
2843,,,67,4,,523,0.5672563393910726,0
2844,,,340,10,,3590,3.8089120229085287,0
2845,,,71,5,,921,1.0207122524579366,0
2846,,,308,10,,3869,4.036875176429748,0
2847,,,283,9,,2641,2.792931628227234,0
2848,,,96,3,,282,0.32012457847595216,0
2849,,,62,3,,434,0.47407956918080646,0
2850,"public void Test525403(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        byte data = (Byte)streamObjectInput.readObject();
        if(data < 0)  
        {
            byte result = (byte)(data * 2);
            IO.writeLine(""result: "" + result);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test525403(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        byte data = (Byte)streamObjectInput.readObject();
        if(data < 0)  
        {
            byte buffer = (byte)(data * 2);
            IO.writeLine(""result: "" + buffer);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",209,8,"result:buffer,",32,0.03980700969696045,Beam
2851,,,241,6,,1040,1.0851415276527405,0
2852,,,339,10,,4286,4.504110781351725,0
2853,,,71,4,,592,0.6310876528422038,0
2854,,,119,6,,1225,1.286302657922109,0
2855,,,77,2,,159,0.17399672667185465,0
2856,,,231,9,,1559,1.6368691364924113,0
2857,,,299,6,,956,0.9940310557683308,0
2858,,,546,13,,5850,6.82001569668452,0
2859,,,58,4,,499,0.6206960598627727,0
2860,,,174,12,,3560,3.834501576423645,0
2861,,,299,9,,2435,2.633422577381134,0
2862,,,226,6,,1541,1.6241140007972716,0
2863,,,120,8,,1927,2.1145769397417706,0
2864,,,41,3,,324,0.33754783471425376,0
2865,,,262,9,,3360,3.588141131401062,0
2866,,,62,5,,784,0.848447036743164,0
2867,,,93,3,,230,0.3221065878868103,0
2868,"public void Test989971(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        String root;
        if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
        {
            root = ""C:\\uploads\\"";
        }
        else
        {
            root = ""/home/user/uploads/"";
        }
        if (data != null)
        {
            File file = new File(root + data);
            FileInputStream streamFileInputSink = null;
            InputStreamReader readerInputStreamSink = null;
            BufferedReader readerBufferdSink = null;
            if (file.exists() && file.isFile())
            {
                try
                {
                    streamFileInputSink = new FileInputStream(file);
                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, ""UTF-8"");
                    readerBufferdSink = new BufferedReader(readerInputStreamSink);
                    IO.writeLine(readerBufferdSink.readLine());
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
                }
                finally
                {
                    try
                    {
                        if (readerBufferdSink != null)
                        {
                            readerBufferdSink.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                    }
                    try
                    {
                        if (readerInputStreamSink != null)
                        {
                            readerInputStreamSink.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                    }
                    try
                    {
                        if (streamFileInputSink != null)
                        {
                            streamFileInputSink.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);
                    }
                }
            }
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test989971(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamStringStreamInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamStringStreamInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamStringStreamInput);
        String buffer = (String)streamObjectInput.readObject();
        String sudo;
        if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
        {
            sudo = ""C:\\uploads\\"";
        }
        else
        {
            sudo = ""/home/user/uploads/"";
        }
        if (buffer != null)
        {
            File file = new File(sudo + buffer);
            FileInputStream streamFileInputSocketke = null;
            InputStreamReader input = null;
            BufferedReader buffer = null;
            if (file.exists() && file.isFile())
            {
                try
                {
                    streamFileInputSocketke = new FileInputStream(file);
                    input = new InputStreamReader(streamFileInputSocketke, ""UTF-8"");
                    buffer = new BufferedReader(input);
                    IO.writeLine(buffer.readLine());
                }
                catch (IOException againIR)
                {
                    IO.logger.log(Level.WARNING, ""Error with stream reading"", againIR);
                }
                finally
                {
                    try
                    {
                        if (buffer != null)
                        {
                            buffer.close();
                        }
                    }
                    catch (IOException againIR)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", againIR);
                    }
                    try
                    {
                        if (input != null)
                        {
                            input.close();
                        }
                    }
                    catch (IOException againIR)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", againIR);
                    }
                    try
                    {
                        if (streamFileInputSocketke != null)
                        {
                            streamFileInputSocketke.close();
                        }
                    }
                    catch (IOException againIR)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", againIR);
                    }
                }
            }
        }
    }
    catch (IOException againIR)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", againIR);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException againIR)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", againIR);
        }
        try
        {
            if (streamStringStreamInput != null)
            {
                streamStringStreamInput.close();
            }
        }
        catch (IOException againIR)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", againIR);
        }
    }
}",448,12,"streamByteArrayInput:streamStringStreamInput,root:sudo,readerBufferdSink:buffer,exceptIO:againIR,streamFileInputSink:streamFileInputSocketke,readerInputStreamSink:input,data:buffer,",3101,3.2798731168111166,Beam
2869,,,185,6,,925,1.0132649938265483,0
2870,,,143,3,,288,0.3249831040700277,0
2871,,,221,7,,1690,1.7739140788714092,0
2872,,,271,6,,1541,1.6558070659637452,0
2873,,,38,2,,85,0.09892375469207763,0
2874,,,330,9,,3145,3.4744215687115987,0
2875,,,263,6,,1049,1.0979841709136964,0
2876,,,130,5,,949,1.0469786206881204,0
2877,,,281,10,,3382,4.014201653003693,0
2878,,,145,9,,2230,2.5474698344866433,0
2879,,,470,16,,4883,6.139102164904276,0
2880,,,160,5,,692,0.8237988233566285,0
2881,,,239,8,,1872,1.942370609442393,0
2882,,,272,8,,2708,2.8743916273117067,0
2883,,,303,8,,2437,2.549355975786845,0
2884,,,461,11,,3782,3.9635987480481467,0
2885,,,50,3,,306,0.3482952316602071,0
2886,,,470,10,,4362,4.580220246315003,0
2887,,,230,8,,1931,1.9905319650967916,0
2888,,,289,9,,2232,2.357511754830678,0
2889,,,128,4,,562,0.600236177444458,0
2890,,,241,8,,1482,1.5410946051279704,0
2891,,,343,12,,5012,5.6423692067464195,0
2892,,,78,3,,360,0.40302549600601195,0
2893,,,49,3,,426,0.47895106077194216,0
2894,,,347,9,,3282,3.4721057653427123,0
2895,,,154,8,,1859,1.9954052050908406,0
2896,,,347,10,,3942,4.19837316274643,0
2897,,,72,3,,384,0.4146077911059062,0
2898,,,155,3,,230,0.28503037293752037,0
2899,,,564,12,,2880,4.543712405363719,0
2900,,,146,7,,1915,1.9779392600059509,0
2901,,,118,3,,405,0.41458514928817747,0
2902,,,102,3,,400,0.42879995505015056,0
2903,,,119,9,,1602,1.8996466795603435,0
2904,,,155,7,,1221,1.3465240796407063,0
2905,,,228,8,,2041,2.1533936341603597,0
2906,,,308,9,,2688,2.792157542705536,0
2907,,,58,4,,553,0.6196785767873129,0
2908,,,384,10,,3992,4.196779938538869,0
2909,,,94,5,,872,0.9453935146331787,0
2910,,,53,3,,339,0.3872470140457153,0
2911,"public void Test527312(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void Test527312(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sslDatabase = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sslDatabase = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sslDatabase.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sslDatabase.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sslDatabase != null)
                {
                    sslDatabase.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",276,10,"sqlStatement:sslDatabase,",94,0.1086407462755839,Beam
2912,,,200,7,,1230,1.3202856183052063,0
2913,,,60,3,,318,0.3376819094022115,0
2914,,,288,8,,2701,2.8669281125068666,0
2915,,,302,10,,4003,4.268412292003632,0
2916,,,384,11,,4663,5.073768238226573,0
2917,,,21,2,,204,0.24329779942830404,0
2918,,,245,8,,1776,1.9769769350687663,0
2919,,,246,9,,1886,2.0375471313794455,0
2920,,,262,8,,2653,2.831982485453288,0
2921,,,235,7,,1489,1.593347724278768,0
2922,,,265,9,,3249,3.45016215244929,0
2923,,,68,3,,343,0.3619420289993286,0
2924,,,75,4,,537,0.6301708300908406,0
2925,,,269,7,,1880,1.9781271735827128,0
2926,,,38,1,,49,0.06166629393895467,0
2927,,,305,15,,8004,8.691497639815013,0
2928,,,412,14,,3199,4.809665123621623,0
2929,,,106,3,,293,0.3266928394635518,0
2930,,,225,8,,1707,1.8373455325762431,0
2931,,,109,5,,612,0.6610379894574483,0
2932,,,145,7,,1111,1.2373323639233906,0
2933,,,414,9,,3182,3.4132951418558757,0
2934,,,303,9,,3182,3.3251117865244546,0
2935,,,79,3,,304,0.3692272345225016,0
2936,,,156,8,,1951,2.158142161369324,0
2937,,,55,5,,730,0.7812888383865356,0
2938,,,60,3,,318,0.3337668259938558,0
2939,,,67,2,,129,0.16777127186457316,0
2940,,,138,8,,1650,1.8214028040568033,0
2941,,,267,9,,3364,3.5085402925809226,0
2942,,,239,7,,1666,1.806382457415263,0
2943,,,114,5,,767,0.840974489847819,0
2944,,,65,4,,572,0.6288702805836995,0
2945,,,99,3,,400,0.41806867520014446,0
2946,,,297,8,,2477,2.5576141635576883,0
2947,,,333,10,,2581,2.7143173178037006,0
2948,,,353,14,,6892,7.528891404469808,0
2949,,,454,12,,4205,4.4561010837554935,0
2950,,,132,3,,405,0.4435887813568115,0
2951,,,286,9,,2766,2.9102910717328387,0
2952,,,213,9,,1859,2.002937690416972,0
2953,,,58,4,,505,0.5816876848538717,0
