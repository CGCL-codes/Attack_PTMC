Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,489,11,,4152,1.7374091823895772,0
1,,,167,7,,2616,1.073319395383199,0
2,,,186,7,,2470,1.0432793299357097,0
3,,,47,4,,1518,0.7076306144396464,0
4,,,252,8,,3019,1.3145686427752177,0
5,,,109,3,,1037,0.480911119778951,0
6,,,128,7,,2626,1.135616377989451,0
7,,,71,3,,882,0.45385733048121135,0
8,,,341,8,,2980,1.4052091797192892,0
9,,,333,8,,2982,1.7904375155766805,0
10,,,368,7,,2234,2.296363345781962,0
11,,,284,8,,2697,2.9423654516537985,0
12,,,134,4,,1521,1.9596943855285645,0
13,,,40,2,,825,1.1363326986630757,0
14,,,51,1,,447,0.6569579164187114,0
15,,,120,4,,1564,2.137075153986613,0
16,,,262,7,,2525,3.510110076268514,0
17,,,79,3,,1206,1.7535788337389628,0
18,,,140,4,,1567,2.2560075998306273,0
19,,,68,3,,656,1.0363844593365987,0
20,"public void Test666174(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        int data = (Integer)streamObjectInput.readObject();
        int result = (int)(--data);
        IO.writeLine(""result: "" + result);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void  test666183(byte[] dataserializable ) throws Throwable
{
    ByteArrayInputStream streamBitObjectInterface = null;
    ObjectInputStream streamObjectPUT = null;
    try
    {
        ststreamBitObjectInterface new ByteArrayInputStream(dataserializable);
        strestreamObjectPUTew ObjectInputStream(streamBitObjectInterface);
        inmemoryta = (Integer)streamObjectPUT.readObject();
        int reresults (int)(--memory);
        IO.writeLine(""result: "" + results);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectPUT != null)
            {
                streamObjectPUT.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamBitObjectInterface != null)
            {
                streamBitObjectInterface.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",199,6,"Test666174: test666183,dataSerialized:dataserializable,streamByteArrayInput:streamBitObjectInterface,streamObjectInput:streamObjectPUT,data:memory,result:results,",1469,2.183420689900716,ALERT
21,,,105,4,,1399,2.185208324591319,0
22,,,275,9,,3210,4.746833590666453,0
23,,,266,6,,2335,3.409282994270325,0
24,,,137,3,,639,1.0689358989397684,0
25,,,231,5,,1600,2.443913201491038,0
26,,,504,10,,3652,5.718950525919596,0
27,,,163,7,,2605,4.29296996196111,0
28,,,292,6,,2243,3.66335662206014,0
29,,,99,2,,451,0.8551770210266113,0
30,,,284,5,,2048,3.3263570149739583,0
31,,,150,4,,1566,2.3122652530670167,0
32,,,51,3,,1204,1.9408713420232138,0
33,,,288,8,,2612,4.141279848416646,0
34,,,117,4,,1560,2.4926027695337933,0
35,,,420,8,,2838,4.213186196486155,0
36,,,66,3,,1222,1.7240896145502727,0
37,,,261,9,,3406,4.86995310386022,0
38,,,108,3,,876,1.3441346526145934,0
39,,,95,2,,842,1.1647156914075216,0
40,,,91,3,,1175,1.680509634812673,0
41,,,52,2,,821,1.1852787733078003,0
42,,,146,6,,2115,3.151266423861186,0
43,,,55,4,,1551,2.2100356936454775,0
44,,,44,1,,437,0.6624291658401489,0
45,,,206,5,,1727,2.490779972076416,0
46,,,121,6,,2283,2.98529212474823,0
47,,,103,3,,1171,1.6945902625719707,0
48,,,41,4,,1284,1.9103352268536886,0
49,,,99,3,,1115,1.5634916345278422,0
50,,,214,6,,2301,3.2324926257133484,0
51,,,82,4,,1324,1.8101418177286783,0
52,,,48,4,,1498,1.9580955783526102,0
53,,,205,5,,1545,2.3027302861213683,0
54,,,143,6,,2277,3.3105452060699463,0
55,,,45,3,,1197,1.6432219664255778,0
56,,,254,5,,2002,2.7664573510487873,0
57,,,22,1,,438,0.6765476147333781,0
58,,,339,15,,5379,7.624316024780273,0
59,,,87,3,,1170,1.7093754251797995,0
60,,,30,3,,559,0.9166230241457621,0
61,,,201,7,,2641,3.658034280935923,0
62,,,500,9,,3462,4.93728654384613,0
63,,,150,2,,835,1.2346068978309632,0
64,"public void Test174036(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringTrimmed = data.trim();
            IO.writeLine(stringTrimmed);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test174036(byte[] dataSerypted ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerypted);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringTrimped = data.trim();
            IO.writeLine(stringTrimped);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",203,6,"stringTrimmed:stringTrimped,dataSerialized:dataSerypted,",89,0.14584289789199828,ALERT
65,,,101,3,,1146,1.6605612993240357,0
66,,,399,10,,3553,5.1582629402478535,0
67,,,59,3,,996,1.4891812165578207,0
68,,,588,6,,2407,3.360875471433004,0
69,,,61,2,,828,1.1911218961079915,0
70,,,181,7,,2516,3.6566551446914675,0
71,,,166,6,,2292,3.2577112436294557,0
72,,,101,3,,978,1.397008474667867,0
73,,,106,6,,2226,3.0859232703844706,0
74,,,146,4,,1579,2.335566504796346,0
75,,,271,6,,2192,3.1137920061747235,0
76,,,281,9,,3049,4.424458054701487,0
77,,,261,6,,1792,2.6964051564534506,0
78,,,367,8,,3145,4.462003580729166,0
79,,,258,6,,2305,3.289366726080577,0
80,,,83,3,,1185,1.6669339378674826,0
81,,,127,4,,1576,2.1935190320014955,0
82,,,119,3,,1201,1.6514419317245483,0
83,,,329,8,,2930,4.106220968564352,0
84,,,146,6,,2264,3.1204829176266986,0
85,,,95,3,,1189,1.6147182742754618,0
86,,,93,4,,1443,2.1312634388605756,0
87,,,273,7,,2584,3.7161269028981527,0
88,,,288,6,,2312,3.2039712985356648,0
89,,,85,4,,1461,2.0836132049560545,0
90,,,100,3,,854,1.330056909720103,0
91,,,299,6,,2038,2.9962690830230714,0
92,,,373,7,,2580,3.5865556557973224,0
93,,,281,5,,1897,2.7134690046310426,0
94,,,56,3,,992,1.3818873643875123,0
95,,,236,5,,2001,2.7805694858233134,0
96,,,137,3,,1109,1.5604081352551777,0
97,,,72,3,,958,1.4142783522605895,0
98,,,424,9,,3265,4.739000519116719,0
99,,,166,7,,2541,3.3555902282396954,0
100,,,456,8,,2543,3.5970560709635415,0
101,,,297,6,,2359,3.308793306350708,0
102,,,128,6,,1521,2.2720298012097677,0
103,,,164,6,,2263,3.162412087122599,0
104,,,95,3,,1194,1.654859459400177,0
105,,,383,10,,3707,5.146205719312032,0
106,,,107,4,,1534,2.225044230620066,0
107,,,240,6,,1417,2.087060046195984,0
108,,,58,1,,465,0.6631189982096354,0
109,,,392,9,,2031,3.0412248969078064,0
110,,,216,6,,2010,2.9581848899523417,0
111,,,67,3,,1181,1.6281548659006755,0
112,,,232,6,,2174,3.0785176475842793,0
113,,,103,3,,886,1.3750328183174134,0
114,,,440,5,,2120,2.9856786648432414,0
115,,,105,5,,1911,2.642192820707957,0
116,,,142,6,,2240,3.101100170612335,0
117,,,333,7,,2365,3.4469680428504943,0
118,,,486,13,,4816,6.781365835666657,0
119,,,62,4,,1098,1.534628168741862,0
120,,,42,3,,1171,1.6721688350041708,0
121,,,53,2,,809,1.126619323094686,0
122,,,60,3,,1035,1.459527556101481,0
123,,,58,2,,807,1.1698740323384602,0
124,,,154,6,,1861,2.709960611661275,0
125,,,225,7,,2572,3.737830567359924,0
126,,,304,7,,2604,3.576142168045044,0
127,,,281,5,,1735,2.480261568228404,0
128,,,136,6,,2297,3.2861013809839883,0
129,,,22,1,,458,0.6658570686976115,0
130,,,75,3,,1150,1.695423154036204,0
131,,,169,6,,1768,2.5377951780954997,0
132,,,117,4,,1592,2.2567548791567487,0
133,,,343,8,,2920,4.276616179943085,0
134,,,289,6,,1632,2.388571031888326,0
135,,,264,5,,1826,2.643242422739665,0
136,,,41,2,,666,0.9843995730082195,0
137,,,69,3,,1171,1.7186638792355855,0
138,,,513,10,,3880,5.5690727988878885,0
139,,,339,7,,2737,3.9916433016459147,0
140,,,325,7,,2509,3.6055534958839415,0
141,,,276,7,,2692,4.028802911440532,0
142,,,277,8,,2913,4.204992874463399,0
143,,,97,3,,1157,1.7079673091570535,0
144,,,53,2,,832,1.2295266032218932,0
145,,,183,7,,2590,3.626384480794271,0
146,,,303,8,,2899,4.252921175956726,0
147,,,137,7,,2524,3.500972294807434,0
148,,,412,7,,2262,3.287187703450521,0
149,,,55,4,,1563,2.178775501251221,0
150,,,309,7,,2695,3.7841972788174947,0
151,,,48,2,,583,0.8629396915435791,0
152,,,158,8,,2355,3.486232674121857,0
153,,,64,3,,825,1.2484877904256184,0
154,,,315,6,,2038,2.913462150096893,0
155,,,143,8,,2935,4.304937740166982,0
156,,,327,7,,2256,3.4020543575286863,0
157,,,93,3,,1169,1.7177401582400005,0
158,,,249,6,,2249,3.200227987766266,0
159,,,50,5,,1237,1.878025801976522,0
160,,,183,7,,2451,3.4728419343630472,0
161,,,113,5,,1219,1.848830020427704,0
162,,,58,3,,1121,1.6481898824373882,0
163,,,279,8,,2828,4.127288508415222,0
164,,,184,7,,2638,3.7316067814826965,0
165,,,150,6,,2268,3.2414767583211264,0
166,,,39,3,,1045,1.4814841469128928,0
167,,,280,6,,1854,2.833215276400248,0
168,,,73,4,,1079,1.5649208029111226,0
169,,,364,8,,2987,4.264865108331045,0
170,,,368,8,,3146,4.642983555793762,0
171,,,152,6,,2237,3.1565045913060508,0
172,,,140,5,,1941,2.789702788988749,0
173,,,335,7,,2691,4.045864665508271,0
174,,,61,5,,1912,2.7601025541623434,0
175,,,213,5,,1496,2.2564441005388898,0
176,,,259,9,,2978,4.508647672335306,0
177,,,243,5,,1909,2.879624621073405,0
178,,,67,3,,1093,1.644183095296224,0
179,,,36,3,,1165,1.7080803712209065,0
180,,,174,7,,2350,3.3129396041234336,0
181,,,298,7,,2723,4.0989655494689945,0
182,,,63,2,,829,1.2216258962949118,0
183,,,54,2,,840,1.2744484782218932,0
184,,,85,3,,1165,1.7460584441820781,0
185,,,390,8,,3009,4.441755517323812,0
186,,,284,7,,1662,2.631557027498881,0
187,,,280,6,,2146,3.0240690112113953,0
188,,,52,2,,762,1.170203443368276,0
189,,,59,3,,833,1.299031945069631,0
191,,,279,6,,2266,3.2977124134699505,0
192,,,244,5,,2017,2.9845526536305744,0
193,,,59,4,,1327,2.011053442955017,0
194,,,247,5,,1934,2.813097814718882,0
195,,,93,3,,1190,1.744208606084188,0
196,,,225,6,,2311,3.343663040796916,0
197,"public void Test697798() throws Throwable
{
    String data = CWE89_SQL_Injection__listen_tcp_executeQuery_68a.data;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test697798() throws Throwable
{
    String data = CWE89_SQL_Injection__listen_tcp_executeQuery_68a.data;
    Connection databaseConn = null;
    Statement sslConnection = null;
    ResultSet resultSet = null;
    try
    {
        databaseConn = IO.getDBConnection();
        sslConnection = databaseConn.createStatement();
        resultSet = sslConnection.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslConnection != null)
            {
                sslConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (databaseConn != null)
            {
                databaseConn.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",216,5,"dbConnection:databaseConn,sqlStatement:sslConnection,",110,0.15767340660095214,ALERT
198,,,339,7,,2492,3.716261355082194,0
199,,,182,7,,2528,3.759278996785482,0
200,,,393,8,,2904,4.2030593713124595,0
201,,,74,2,,781,1.1397074818611146,0
202,,,278,6,,2396,3.4897355516751607,0
203,,,79,3,,1183,1.6633596897125245,0
204,,,121,4,,1477,2.167720607916514,0
205,,,84,3,,1189,1.7145695447921754,0
206,,,241,6,,2405,3.5742288907368978,0
207,,,214,4,,1626,2.406469480196635,0
208,,,244,7,,2514,3.7325798074404397,0
209,,,138,4,,1510,2.248247528076172,0
210,,,214,6,,2107,3.144457447528839,0
211,,,276,11,,3898,5.4126956780751545,0
212,,,139,8,,2940,4.190710246562958,0
213,,,69,2,,735,1.1070398290952046,0
214,,,249,7,,2563,3.7070956865946454,0
215,,,282,6,,2329,3.2486513535181682,0
216,,,326,8,,3055,4.5691970984141035,0
217,,,283,8,,2671,3.921551247437795,0
218,,,290,7,,2559,3.692587685585022,0
219,,,255,5,,1864,2.6527415116628013,0
220,,,163,6,,1971,2.8753957827885945,0
221,,,72,3,,532,0.8610989491144816,0
222,,,196,10,,3601,5.245942866802215,0
223,,,201,5,,1456,2.1513466835021973,0
224,,,183,3,,1199,1.8052454272905984,0
225,,,72,3,,575,0.9233976523081462,0
226,"public void Test019110(String dataArray[] ) throws Throwable
{
    String data = dataArray[2];
    Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();
    environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
    environmentHashTable.put(Context.PROVIDER_URL, ""ldap://localhost:389"");
    DirContext directoryContext = null;
    try
    {
        directoryContext = new InitialDirContext(environmentHashTable);
        String search = ""(cn="" + data + "")"";
        NamingEnumeration<SearchResult> answer = directoryContext.search("""", search, null);
        while (answer.hasMore())
        {
            SearchResult searchResult = answer.next();
            Attributes attributes = searchResult.getAttributes();
            NamingEnumeration<?> allAttributes = attributes.getAll();
            while (allAttributes.hasMore())
            {
                Attribute attribute = (Attribute) allAttributes.next();
                NamingEnumeration<?> allValues = attribute.getAll();
                while(allValues.hasMore())
                {
                    IO.writeLine("" Value: "" + allValues.next().toString());
                }
            }
        }
    }
    catch (NamingException exceptNaming)
    {
        IO.logger.log(Level.WARNING, ""The LDAP service was not found or login failed."", exceptNaming);
    }
    finally
    {
        if (directoryContext != null)
        {
            try
            {
                directoryContext.close();
            }
            catch (NamingException exceptNaming)
            {
                IO.logger.log(Level.WARNING, ""Error closing DirContext"", exceptNaming);
            }
        }
    }
}","public void  test019118(String  dataString[] ) throws Throwable
{
    String password =  dataString[2];
    Hashtable<String, String> EnvironmentHashtable = new Hashtable<String, String>();
    EnvironmentHashtable.put(Context.INITIAL_CONTEXT_FACTORY,""com.sun.jndi.ldap.LdapCtxFactory"");
    EnvironmentHashtable.put(Context.PROVIDER_URL, ""ldap://localhost:389"");
    DirContext DirectoryLocation = null;
    try
    {
        DirectoryLocation = new InitialDirContext(EnvironmentHashtable);
        String Search = ""(cn="" + password + "")"";
        NamingEnumeration<SearchResult> match = DirectoryLocation.Search("""", Search, null);
        while (match.hasMore())
        {
            SearchResult searchResult = match.next();
            Attributes attributes = searchResult.getAttributes();
            NamingEnumeration<?> allAttributes = attributes.getAll();
            while (allAttributes.hasMore())
            {
                Attribute attribute = (Attribute) allAttributes.next();
                NamingEnumeration<?> allValues = attribute.getAll();
                while(allValues.hasMore())
                {
                    IO.writeLine("" Value: "" + allValues.next().toString());
                }
            }
        }
    }
    catch (NamingException exceptNaming)
    {
        IO.logger.log(Level.WARNING, ""The LDAP service was not found or login failed."", exceptNaming);
    }
    finally
    {
        if (DirectoryLocation != null)
        {
            try
            {
                DirectoryLocation.close();
            }
            catch (NamingException exceptNaming)
            {
                IO.logger.log(Level.WARNING, ""Error closing DirContext"", exceptNaming);
            }
        }
    }
}",268,12,"directoryContext:DirectoryLocation,environmentHashTable:EnvironmentHashtable,dataArray: dataString,answer:match,data:password,search:Search,Test019110: test019118,",343,0.5044378519058228,ALERT
227,"public void Test429513(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    if (data != null)
    {
        String stringToEncrypt = ""Super secret Squirrel"";
        byte[] byteStringToEncrypt = stringToEncrypt.getBytes(""UTF-8"");
        SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
        Cipher aesCipher = Cipher.getInstance(""AES"");
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
        IO.writeLine(IO.toHex(byteCipherText));  
    }
}","public void  test400513(Object inputObject ) throws Throwable
{
    String dseed= (String)inputObject;
    if (seed != null)
    {
        String stringTOEnrypted = ""Super secret Squirrel"";
        byte[] bbyteStringToencrypt= stringTOEnrypted.getBytes(""UTF-8"");
        SecretKeySpec secretSignSPEC = new SecretKeySpec(seed.getBytes(""UTF-8""), ""AES"");
        Cipher aESCursor = Cipher.getInstance(""AES"");
        aaESCursorinit(Cipher.ENCRYPT_MODE, secretSignSPEC);
        byte[] byteAcipherBytes = aESCursor.doFinal(byteStringToencrypt);
        IO.writeLine(IO.toHex(byteAcipherBytes));  
    }
}",105,8,"Test429513: test400513,dataObject:inputObject,data:seed,stringToEncrypt:stringTOEnrypted,byteStringToEncrypt:byteStringToencrypt,secretKeySpec:secretSignSPEC,aesCipher:aESCursor,byteCipherText:byteAcipherBytes,",938,1.416359806060791,ALERT
228,,,77,3,,965,1.412329125404358,0
229,,,71,3,,1136,1.670765177408854,0
230,,,85,4,,995,1.5304263234138489,0
231,,,65,4,,1548,2.2263070782025656,0
232,,,148,4,,1517,2.278090782960256,0
233,,,356,8,,3108,4.470869966348013,0
234,,,81,3,,537,0.8569307764371236,0
235,,,101,3,,1221,1.786094113190969,0
236,,,197,6,,2250,3.2770331501960754,0
237,,,386,8,,3075,4.608336325486501,0
238,,,195,6,,2241,3.29062108596166,0
239,,,233,6,,2154,3.1252623279889424,0
240,,,83,3,,1112,1.6672244151433309,0
241,,,58,6,,2238,3.2319196422894794,0
242,,,365,8,,3187,4.743425945440928,0
243,,,447,14,,5122,7.457669973373413,0
244,,,94,4,,1516,2.218202273050944,0
245,,,286,6,,2338,3.4309632102648417,0
246,,,64,3,,1038,1.5404825329780578,0
247,,,66,3,,658,1.049000883102417,0
248,,,88,5,,1840,2.6026336590449017,0
249,,,33,3,,1088,1.6093568086624146,0
250,,,251,9,,3217,4.763550273577372,0
251,,,58,3,,962,1.3085527896881104,0
252,,,558,5,,1837,2.7679973522822063,0
253,,,344,8,,3148,4.656273742516835,0
254,,,264,6,,2267,3.2428569038709005,0
255,,,61,3,,1188,1.6662578304608664,0
256,,,81,2,,819,1.2049026528994242,0
257,,,237,7,,2541,3.6819506247838336,0
258,,,92,3,,1157,1.7031542181968689,0
259,,,236,5,,1316,1.9552900671958924,0
260,,,360,8,,3146,4.71058874130249,0
261,,,114,3,,1209,1.808849529425303,0
262,,,145,4,,1386,1.9837481458981832,0
263,,,54,2,,824,1.214034346739451,0
264,,,333,8,,3028,4.424446066220601,0
265,,,99,7,,2567,3.7356339931488036,0
266,,,83,3,,782,1.2003198544184366,0
267,,,56,2,,842,1.2386979818344117,0
268,,,290,6,,2367,3.617681845029195,0
269,,,310,7,,2754,4.144227214654287,0
270,,,82,3,,932,1.449811871846517,0
271,,,216,7,,2554,3.831942598025004,0
272,,,119,4,,736,1.189862807591756,0
273,,,40,3,,978,1.4682579676310221,0
274,,,59,4,,1542,2.0554221789042155,0
275,,,162,4,,1399,2.0324068586031596,0
276,,,311,9,,2959,4.319617259502411,0
277,,,412,8,,3069,4.40274117787679,0
278,,,226,7,,2636,3.804351580142975,0
279,,,235,6,,2259,3.271704657872518,0
280,,,389,8,,2838,3.848012936115265,0
281,,,379,7,,2703,3.7367037614186605,0
282,,,157,4,,1595,2.3084941864013673,0
283,,,264,6,,2340,3.2802693287531537,0
284,,,337,7,,2494,3.561256472269694,0
285,,,480,12,,4546,6.389101457595825,0
286,,,275,9,,3406,4.93376532793045,0
287,,,155,4,,1587,2.2954777201016743,0
288,,,75,3,,1073,1.5212847908337912,0
289,,,268,7,,2651,3.778391444683075,0
290,,,212,6,,1768,2.6771939317385356,0
291,,,296,8,,2971,4.403198254108429,0
292,,,21,2,,770,1.1196331103642783,0
293,,,400,8,,2962,4.305507413546244,0
294,,,156,4,,866,1.378782860438029,0
295,,,313,6,,2389,3.4549516638120017,0
296,,,333,6,,2344,3.414705979824066,0
297,,,41,3,,1179,1.7727373202641805,0
298,,,308,7,,2226,3.3498809933662415,0
299,,,119,8,,2875,4.288537808259329,0
300,,,28,1,,431,0.6903274059295654,0
301,,,318,8,,2954,4.402564509709676,0
302,,,426,9,,3301,4.929587082068125,0
303,,,53,4,,1080,1.672810165087382,0
304,,,63,4,,1432,2.0762279748916628,0
305,,,292,8,,2815,4.124824897448222,0
306,,,258,6,,2000,2.9864071210225425,0
307,,,244,6,,2267,3.3339528997739154,0
308,,,163,7,,2578,3.568535081545512,0
309,,,127,8,,2677,3.9028302152951557,0
310,,,162,4,,1629,2.3369335730870566,0
311,,,33,3,,1058,1.434967784086863,0
312,,,336,7,,2606,3.62260631720225,0
313,,,266,9,,3194,4.145180316766103,0
314,,,110,7,,2285,2.7155414899190267,0
315,,,159,7,,2563,3.4356594562530516,0
316,,,61,3,,1178,1.5223631302515666,0
317,,,137,4,,1565,2.0871128757794697,0
318,,,254,7,,2561,3.3419377485911053,0
319,,,348,8,,2829,3.770610276858012,0
320,,,92,3,,987,1.2607632716496786,0
321,,,429,7,,2796,3.533029389381409,0
322,,,107,3,,1192,1.5691038131713868,0
323,,,49,4,,1363,1.4554142038027444,0
324,,,252,6,,2259,2.44441720644633,0
325,,,283,7,,2679,2.8481041391690574,0
326,,,301,7,,2727,2.8397721648216248,0
327,,,62,2,,806,0.8324864347775777,0
328,,,56,3,,1090,1.21275954246521,0
329,,,184,6,,2163,2.3708773215611774,0
330,,,168,7,,2300,2.453335340817769,0
331,,,377,7,,2201,2.5213221033414204,0
332,,,237,6,,2302,2.526731479167938,0
333,,,252,6,,2336,2.4440932432810465,0
334,,,165,4,,1623,1.785350259145101,0
335,,,162,2,,794,0.8373549580574036,0
336,,,34,1,,369,0.4103940725326538,0
337,,,333,7,,2187,2.2981082757314044,0
338,,,282,6,,2238,2.3228732426961263,0
339,,,297,12,,4452,4.6665240605672205,0
340,"public void Test701742(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    int data = CWE129_Improper_Validation_of_Array_Index__getQueryString_Servlet_array_read_check_max_68a.data;
    int array[] = { 0, 1, 2, 3, 4 };
    if (data < array.length)
    {
        IO.writeLine(array[data]);
    }
    else
    {
        IO.writeLine(""Array index out of bounds"");
    }
}","public void Test770741(HttpServletRequest config, HttpServletResponse model) throws Throwable
{
    int pos = CWE129_Improper_Validation_of_Array_Index__getQueryString_Servlet_array_read_check_max_68a.pos;
    int result[] = { 0, 1, 2, 3, 4 };
    if (pos < result.length)
    {
        IO.writeLineresulty[pos]);
    }
    else
    {
        IO.writeLine(""Array index out of bounds"");
    }
}",68,5,"Test701742:Test770741,request:config,response:model,data:pos,array:result,",812,0.9387842496236165,ALERT
341,,,57,3,,1141,1.2689029812812804,0
342,,,95,5,,1891,2.005272618929545,0
343,,,277,8,,3060,3.326440147558848,0
344,,,304,7,,2423,2.7148059805234275,0
345,,,50,2,,826,0.9144747575124105,0
346,,,259,6,,2354,2.570198178291321,0
347,,,288,6,,2231,2.4987455447514852,0
348,,,303,6,,2278,2.4601977944374083,0
349,,,285,9,,2889,3.437523090839386,0
350,,,48,2,,830,1.120666746298472,0
351,,,111,6,,1992,2.7309686660766603,0
352,,,253,6,,2347,3.1934146165847777,0
353,,,200,5,,1972,2.752230870723724,0
354,,,265,7,,2631,3.686088780562083,0
355,,,91,3,,1177,1.6336583296457927,0
356,,,312,7,,2386,3.3526205023129783,0
357,,,294,8,,2940,4.045166289806366,0
358,,,124,7,,2283,3.0815983057022094,0
359,,,329,7,,2505,3.53503098487854,0
360,,,261,6,,2314,3.284604811668396,0
361,,,56,4,,1525,2.073461143175761,0
362,,,329,7,,2700,3.770439581076304,0
363,,,363,7,,2790,3.9329368909200033,0
364,,,374,7,,2616,3.7031567772229512,0
365,,,116,8,,2715,3.7772262692451477,0
366,,,210,5,,1967,2.668330220381419,0
367,,,300,8,,3028,4.221730756759643,0
368,,,79,6,,1585,2.26525217294693,0
369,,,40,4,,1526,2.0591201504071552,0
370,,,341,7,,2614,3.5229256391525268,0
371,,,275,6,,2329,3.208551331361135,0
372,,,110,3,,1222,1.6924956758817038,0
373,,,68,3,,1029,1.503100073337555,0
374,,,136,4,,1561,2.0922563989957172,0
375,,,364,8,,3019,4.145813918113708,0
376,,,200,6,,2351,3.110711737473806,0
377,,,356,7,,2724,3.676682376861572,0
378,,,89,4,,1270,1.7760581294695537,0
379,,,340,8,,2837,3.9540218035380046,0
380,,,69,5,,1515,2.1019927422205607,0
381,,,483,11,,3938,5.57194546063741,0
382,,,31,1,,437,0.6140970468521119,0
383,,,54,4,,1558,2.090952479839325,0
384,,,373,8,,2771,3.9166306972503664,0
385,,,338,8,,3056,4.321529670556386,0
386,,,69,3,,1178,1.6187851548194885,0
387,,,82,3,,1197,1.57829083998998,0
388,,,110,3,,1196,1.67689368724823,0
389,,,40,1,,447,0.6598082025845845,0
390,,,270,8,,2246,3.1434582432111102,0
391,,,68,4,,1165,1.5656695683797202,0
392,,,90,3,,1158,1.5244631131490072,0
393,"private void Test344762() throws Throwable
{
    short data;
    data = 2;
    short result = (short)(data - 1);
    IO.writeLine(""result: "" + result);
}","private void  test344762() throws Throwable
{
    short data;
    data = 2;
    short test = (short)(data - 1);
    IO.writeLine(""result: "" + test);
}",37,3,"Test344762: test344762,result:test,",68,0.12598581314086915,ALERT
394,,,52,2,,678,0.984265140692393,0
395,,,416,8,,3101,4.207260954380035,0
396,,,244,8,,2754,3.6441356778144836,0
397,,,173,6,,2089,2.742596181233724,0
398,,,94,4,,1439,1.9477160493532817,0
399,,,306,7,,2302,3.151937504609426,0
400,,,53,2,,821,1.1073498487472535,0
401,,,275,10,,3544,4.8150821924209595,0
402,,,120,3,,1210,1.5699785987536112,0
403,,,350,7,,2690,3.5672922849655153,0
404,,,53,3,,957,1.285988203684489,0
405,,,238,5,,1979,2.67723556359609,0
406,,,429,8,,3104,4.2494708816210425,0
407,,,146,4,,1564,2.078332845369975,0
408,,,82,3,,825,1.189722474416097,0
409,,,370,10,,3665,4.912321007251739,0
410,,,237,6,,2317,3.091449761390686,0
411,,,279,8,,2929,3.8767279704411823,0
412,,,193,7,,2505,3.2831521073977155,0
413,,,294,8,,3067,4.116201448440552,0
414,,,240,5,,1301,1.9351282080014547,0
415,,,614,8,,2073,3.051776190598806,0
416,,,272,8,,2707,3.872329072157542,0
417,,,135,4,,877,1.3387630899747214,0
418,,,49,4,,1464,2.0322096069653828,0
419,,,443,9,,3435,4.67510708173116,0
420,,,360,8,,2920,4.122098855177561,0
421,"public void Test843724(CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a.Container passwordContainer ) throws Throwable
{
    String password = passwordContainer.containerOne;
    if (password != null)
    {
        KerberosPrincipal principal = new KerberosPrincipal(""test"");
        KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);
        IO.writeLine(key.toString());
    }
}","public void Test843724(CWE319_Cleartext_Tx_Sensitive_Info__connect_tcp_kerberosKey_67a.Container passwordContainer ) throws Throwable
{
    String password = passwordContainer.containerOne;
    if (password != null)
    {
        KerberosPrincipal perprale = new KerberosPrincipal(""test"");
        KerberosKey key = new KerberosKey(perprale, password.toCharArray(), null);
        IO.writeLine(key.toString());
    }
}",65,5,"principal:perprale,",53,0.09765944083531698,ALERT
422,,,115,5,,1079,1.570509135723114,0
423,,,64,2,,703,0.9642828345298767,0
424,,,279,9,,3516,4.902828633785248,0
425,,,302,6,,1548,2.2482637723286945,0
426,,,288,7,,2675,3.6581154346466063,0
427,,,224,5,,2031,2.818976668516795,0
428,,,87,3,,1173,1.5428926626841226,0
429,,,282,5,,1718,2.4471765557924905,0
430,,,462,9,,3401,4.793972019354502,0
431,,,313,8,,2647,3.7366793473561604,0
432,,,154,3,,1216,1.6402870694796243,0
433,,,47,3,,1188,1.6353851556777954,0
434,,,136,4,,1566,2.161171245574951,0
435,,,142,4,,1540,2.1211284001668296,0
436,,,204,4,,1406,1.9957397023836771,0
437,,,251,6,,2122,3.0011789917945864,0
438,,,75,4,,1577,2.1830551783243815,0
439,,,92,3,,1179,1.634947911898295,0
440,,,88,3,,1220,1.7131152510643006,0
441,,,324,10,,3798,5.31105363368988,0
442,,,267,8,,2479,3.574801031748454,0
443,,,302,8,,2839,4.062335292498271,0
444,,,276,7,,2449,3.54828698237737,0
445,,,191,5,,1967,2.7372982104619346,0
446,,,304,6,,2112,2.9622005065282186,0
447,,,331,6,,1973,2.795066968599955,0
448,,,115,5,,1794,2.4701141357421874,0
449,,,466,9,,3229,4.572809910774231,0
450,,,339,8,,3121,4.27407744328181,0
451,,,35,2,,831,1.2008902748425803,0
452,,,439,7,,2532,3.5670605142911276,0
453,,,216,5,,1798,2.53391774892807,0
454,,,278,5,,1978,2.7861830155054728,0
455,,,187,12,,4237,5.8814882159233095,0
456,,,273,6,,2430,3.3588862578074137,0
457,,,91,3,,1167,1.6618246992429098,0
458,,,392,8,,3002,4.225504986445109,0
459,,,276,11,,3891,5.4529510855674745,0
460,,,246,7,,2328,3.254540193080902,0
461,,,143,7,,2588,3.512679922580719,0
462,,,145,4,,1519,2.030573272705078,0
463,,,245,5,,1931,2.710073224703471,0
464,,,295,7,,2755,3.810994064807892,0
465,,,75,5,,1903,2.5769614895184834,0
466,,,49,3,,1169,1.626646641890208,0
467,,,109,3,,1180,1.5985478043556214,0
468,,,245,7,,1261,1.9321354150772094,0
469,,,67,3,,1186,1.6621554851531983,0
470,,,36,3,,1192,1.6795043389002482,0
471,,,278,11,,4054,5.706223360697428,0
472,,,74,3,,954,1.3620863795280456,0
473,,,417,8,,3157,4.411526962121328,0
474,,,61,4,,1492,2.0661357760429384,0
475,,,202,4,,1664,2.2182741006215414,0
476,,,321,7,,2626,3.6166839877764385,0
477,,,141,3,,1185,1.6512946605682373,0
478,,,144,4,,1585,2.1208720008532205,0
479,,,656,7,,2924,3.9512722889582315,0
480,,,61,3,,1152,1.5642137289047242,0
481,,,277,6,,2045,2.844073792298635,0
482,,,53,4,,1501,2.002841051419576,0
483,,,253,8,,2860,3.9474141200383506,0
484,,,163,7,,2571,3.4564271529515582,0
485,,,107,4,,1295,1.834851626555125,0
486,,,333,7,,2744,3.760479791959127,0
487,,,232,4,,1516,2.06874729792277,0
488,,,73,3,,1216,1.6068140983581543,0
489,,,104,5,,1914,2.527251096566518,0
490,,,58,4,,1550,2.059202027320862,0
491,,,61,4,,1542,2.0723580678304034,0
492,,,612,12,,4350,6.157858395576477,0
493,,,66,3,,1189,1.664963964621226,0
494,,,264,9,,2957,4.192320660750071,0
495,,,57,3,,1195,1.683176596959432,0
496,,,275,8,,3164,4.450243508815765,0
497,,,712,11,,4046,5.8455894430478414,0
498,,,358,8,,3052,4.301518360773723,0
499,,,414,8,,3045,4.308103434244791,0
500,,,38,3,,849,1.2085548241933186,0
501,,,38,3,,1187,1.6867455005645753,0
502,,,74,4,,1498,2.111425685882568,0
503,,,118,7,,2592,3.6023856004079184,0
504,,,136,4,,1122,1.6104881445566812,0
505,,,202,4,,1628,2.3100107669830323,0
506,,,269,6,,2123,3.0071797450383504,0
507,,,294,8,,3051,4.2303637305895485,0
508,,,38,3,,1068,1.524018649260203,0
509,,,49,4,,1531,2.0959624807039896,0
510,,,253,6,,1910,2.660236422220866,0
511,,,136,4,,1490,2.0832268993059793,0
512,,,430,9,,3507,4.827957793076833,0
513,,,265,6,,2095,2.9850914041201273,0
514,,,65,5,,1772,2.467591945330302,0
515,,,273,6,,1980,2.775338677565257,0
516,,,172,11,,3983,5.630967247486114,0
517,,,263,7,,2644,3.7354947686195374,0
518,,,42,4,,1192,1.7018082022666932,0
519,,,36,3,,1124,1.550805938243866,0
520,,,98,4,,1095,1.5682077129681906,0
521,,,327,6,,2387,3.4039512236913043,0
522,,,109,6,,1549,2.215142468611399,0
523,,,155,7,,2615,3.612357461452484,0
524,,,273,9,,3237,4.51875003973643,0
525,,,186,10,,3422,4.769277175267537,0
526,,,105,4,,868,1.3137972354888916,0
527,,,538,5,,1895,2.687578848997752,0
528,,,158,6,,2272,3.202261579036713,0
529,,,79,4,,1064,1.4889437198638915,0
530,,,93,3,,1193,1.6857510844866435,0
531,,,56,2,,559,0.82227041721344,0
532,,,71,4,,1525,2.1181082407633465,0
533,,,312,9,,3061,4.326949393749237,0
534,,,294,8,,3076,4.280445396900177,0
535,,,173,7,,2700,3.73933588663737,0
536,,,135,7,,2103,2.9664246519406636,0
537,,,447,11,,4171,5.8490683476130165,0
538,,,256,6,,2158,2.9059160510698954,0
539,,,58,3,,1193,1.6620837648709614,0
540,,,351,8,,3039,4.305570304393768,0
541,,,161,7,,2547,3.558974794546763,0
542,,,41,5,,1858,2.597336530685425,0
543,,,58,3,,1183,1.6337778925895692,0
544,,,171,4,,1514,2.091315201918284,0
545,,,406,8,,3130,4.540466455618541,0
546,,,148,7,,1680,2.4911067287127175,0
547,,,160,7,,2604,3.48271914323171,0
548,,,56,3,,1152,1.515630269050598,0
549,,,238,13,,4667,6.165060849984487,0
550,,,337,11,,4076,5.638464490572612,0
551,,,90,3,,1118,1.5812522570292156,0
552,,,45,4,,1481,2.0531896471977236,0
553,,,444,11,,3781,5.230948428312938,0
554,,,59,3,,1211,1.6084664305051168,0
555,,,84,4,,1571,2.188162835439046,0
556,,,120,3,,1244,1.6936471422513326,0
557,,,266,6,,2324,3.2063528736432394,0
558,,,154,7,,2524,3.4623037060101827,0
559,,,290,8,,2965,4.022490680217743,0
560,,,288,6,,2352,3.1760055820147195,0
561,,,113,4,,1559,2.06483340660731,0
562,,,257,6,,1457,2.096916993459066,0
563,,,484,11,,4146,5.557132625579834,0
564,,,77,3,,870,1.2027310252189636,0
565,,,282,6,,1799,2.512721065680186,0
566,,,99,3,,1168,1.6307626843452454,0
567,,,345,8,,3102,4.188955271244049,0
568,,,321,11,,3833,5.279221498966217,0
569,,,122,3,,1164,1.5985840201377868,0
570,,,61,2,,737,1.0519568125406902,0
571,,,157,4,,1573,2.1470829367637636,0
572,,,83,3,,962,1.314031187693278,0
573,,,415,9,,3498,4.721742363770803,0
574,,,131,7,,2342,3.123008108139038,0
575,,,167,6,,1930,2.6191056172053018,0
576,,,246,6,,2245,2.9043859442075095,0
577,,,268,9,,3100,4.000220155715942,0
578,,,264,6,,2385,3.0135451873143513,0
579,,,127,8,,2971,3.848474454879761,0
580,,,339,8,,3100,4.247989841302236,0
581,,,86,3,,636,0.8784603039423625,0
582,,,342,7,,2721,3.6180620392163596,0
583,,,288,7,,2623,3.6162272572517393,0
584,,,69,3,,1186,1.639642866452535,0
585,,,161,5,,1628,2.105737392107646,0
586,,,75,5,,1880,2.586805832386017,0
587,,,313,7,,2806,3.5059446414311726,0
588,,,272,6,,1968,2.708717433611552,0
589,,,213,7,,2129,3.0023243546485903,0
590,,,301,8,,3041,4.247924212614695,0
591,,,294,7,,2280,3.192667849858602,0
592,,,146,3,,1171,1.6659608801205954,0
593,,,98,4,,1444,1.9973254044850668,0
594,,,132,6,,2248,3.157157532374064,0
595,,,313,8,,3120,4.274856734275818,0
596,,,373,7,,2552,3.634855357805888,0
597,,,417,10,,3757,5.224962615966797,0
598,,,146,6,,2225,3.1360702951749166,0
599,,,56,4,,1533,2.106394902865092,0
600,,,41,4,,1520,2.0435231645901997,0
601,,,58,2,,705,1.033482265472412,0
602,,,81,3,,1176,1.632606840133667,0
603,,,44,4,,1485,2.0754231850306195,0
604,,,142,6,,1692,2.3719330708185833,0
605,,,279,9,,3101,4.357652386029561,0
606,,,291,7,,2707,3.746949474016825,0
607,,,248,6,,2131,2.9023101727167764,0
608,,,55,4,,1535,2.0985317786534625,0
609,,,68,3,,1035,1.4311730821927389,0
610,,,63,4,,1514,2.0395556807518007,0
611,,,180,5,,1960,2.6437436898549396,0
612,,,384,9,,3453,4.645217001438141,0
613,,,358,8,,3089,4.1509216785430905,0
614,,,70,3,,1169,1.5155563990275065,0
615,,,94,5,,1192,1.6681657751401266,0
616,,,52,3,,1029,1.370218539237976,0
617,,,39,2,,797,1.0572713494300843,0
618,"private void Test999449(String data ) throws Throwable
{
    int numberOfLoops;
    try
    {
        numberOfLoops = Integer.parseInt(data);
    }
    catch (NumberFormatException exceptNumberFormat)
    {
        IO.writeLine(""Invalid response. Numeric input expected. Assuming 1."");
        numberOfLoops = 1;
    }
    for (int i=0; i < numberOfLoops; i++)
    {
        IO.writeLine(""hello world"");
    }
}","private void  test001447(String a ) throws Throwable
{
    int numberOfHips;
    try
    {
     numberOfHipsops = Integer.parseInt(a);
    }
    catch (NumberFormatException exceptNumberFormat)
    {
        IO.writeLine(""Invalid response. Numeric input expected. Assuming 1."");
        numberOfHips = 1;
    }
    for (inturii=0;urii < numberOfHips; uri++)
    {
        IO.writeLine(""hello world"");
    }
}",67,4,"Test999449: test001447,data:a,numberOfLoops:numberOfHips,i:uri,",669,0.9361500183741251,ALERT
619,,,206,5,,1840,2.5886786182721457,0
620,,,30,1,,438,0.6549409588177999,0
621,,,160,6,,2166,2.854283630847931,0
622,,,197,5,,1885,2.555583198865255,0
623,,,271,6,,2242,2.9078222155570983,0
624,,,74,4,,1567,2.1763583024342856,0
625,,,77,3,,1205,1.7001752058664958,0
626,,,303,10,,3605,4.685734395186106,0
627,,,109,5,,1252,1.8383814692497253,0
628,,,259,6,,2025,2.70340309937795,0
629,,,285,6,,2378,3.1630799492200214,0
630,,,62,4,,1545,1.9741743286450704,0
631,,,333,6,,2365,3.109923605124156,0
632,,,274,6,,2377,3.2287310640017193,0
633,,,132,4,,1571,2.009108543395996,0
634,,,152,7,,2563,3.3189083695411683,0
635,,,231,4,,1641,2.159317441781362,0
636,,,269,7,,2501,3.2493266264597573,0
637,,,259,6,,1964,2.6831287185351056,0
638,,,148,7,,2424,3.277620299657186,0
639,,,184,7,,2437,3.1455894271532694,0
640,,,178,3,,1219,1.671392834186554,0
641,,,946,5,,1754,2.6218011299769084,0
642,,,49,3,,1110,1.4431897481282552,0
643,,,436,9,,3462,4.638424317042033,0
644,,,294,10,,3519,4.761315532525381,0
645,,,63,3,,604,0.9812021454175314,0
646,,,345,10,,3818,5.417384469509125,0
647,,,101,3,,1068,1.463995623588562,0
648,,,53,3,,1022,1.4456598083178203,0
649,,,240,7,,2670,3.6443965077400207,0
650,,,140,3,,1197,1.652931571006775,0
651,,,85,4,,1065,1.5373824516932169,0
652,,,207,7,,2598,3.4181760430335997,0
653,,,197,5,,2023,2.719404625892639,0
654,,,493,10,,3708,5.0723447561264035,0
655,,,233,6,,1955,2.655253891150157,0
656,,,45,2,,835,1.1060269316037497,0
657,,,422,13,,4570,6.176473732789358,0
658,,,192,4,,1727,2.2725634455680845,0
659,,,106,3,,1007,1.3753835797309875,0
660,,,59,3,,884,1.2006972591082254,0
661,,,354,7,,2737,3.7870860775311788,0
662,,,153,4,,764,1.1473819613456726,0
663,,,278,6,,2052,2.864890905221303,0
664,,,29,2,,689,0.9193370421727498,0
665,,,184,8,,3029,4.209156684080759,0
666,,,347,8,,3142,4.453932551542918,0
667,,,273,6,,2275,3.0586655139923096,0
668,,,242,6,,2194,3.042693344751994,0
669,,,33,2,,823,1.1442798892656962,0
670,,,120,4,,1546,2.120781362056732,0
671,,,59,3,,1113,1.5046685377756754,0
672,,,333,7,,2581,3.564624512195587,0
673,,,82,3,,1201,1.6422518213589987,0
674,,,322,8,,2932,4.171469779809316,0
675,,,139,7,,2363,3.34006804227829,0
676,,,169,4,,1425,2.013643133640289,0
677,,,435,8,,3150,4.336579382419586,0
678,,,91,4,,1096,1.6107925216356913,0
679,,,303,6,,2038,2.908085083961487,0
680,,,74,3,,1193,1.61052538951238,0
681,,,193,6,,2190,3.1002050916353863,0
682,,,342,7,,2533,3.5296150922775267,0
683,,,112,6,,2287,3.127585204442342,0
684,,,235,6,,2000,2.8055980523427326,0
685,,,254,5,,1846,2.6222409049669904,0
686,,,40,3,,1170,1.5743930657704672,0
687,,,340,8,,3015,4.065364476044973,0
688,,,106,6,,2235,3.036343248685201,0
689,,,207,4,,1473,1.9647045175234477,0
690,,,303,9,,2980,4.199883119265238,0
691,,,242,6,,2364,3.218241635958354,0
692,,,77,3,,1170,1.656811499595642,0
693,,,54,3,,865,1.2036999424298604,0
694,,,149,4,,1368,1.8349093874295552,0
695,,,45,3,,1181,1.6651136477788289,0
696,,,216,6,,2358,3.3788005987803142,0
697,,,387,8,,2849,4.081402373313904,0
698,,,234,4,,1533,2.1584462602933248,0
699,,,123,3,,1102,1.6185670177141824,0
700,,,450,7,,2781,3.9273645957310994,0
701,,,218,13,,4684,6.663775134086609,0
702,,,297,8,,2968,4.1266878843307495,0
703,,,178,6,,2279,3.1254745801289876,0
704,,,344,7,,2652,3.574673795700073,0
705,,,43,2,,799,1.1659433205922445,0
706,,,320,6,,2261,3.264089997609456,0
707,,,140,7,,2562,3.5807207147280375,0
708,,,310,7,,2579,3.6949904918670655,0
709,,,275,8,,2904,4.193620530764262,0
710,,,326,8,,2857,4.145026270548502,0
711,,,78,3,,1201,1.6873217821121216,0
712,,,75,3,,1206,1.662001943588257,0
713,,,76,2,,770,1.046475879351298,0
714,,,65,3,,839,1.2511516650517782,0
715,,,154,7,,2595,3.616774042447408,0
716,,,93,3,,692,1.0983224709828694,0
717,,,141,4,,1045,1.511726478735606,0
718,,,40,3,,1139,1.5666790803273518,0
719,,,60,3,,1137,1.5767485539118449,0
720,,,90,2,,795,1.1287503957748413,0
721,,,61,4,,1396,1.9622061729431153,0
722,,,283,6,,2367,3.2835198918978374,0
723,,,72,3,,704,1.0476081848144532,0
724,,,339,9,,3362,4.5048158725102745,0
725,,,342,7,,2777,3.6261667609214783,0
726,,,299,10,,3553,4.593107827504476,0
727,,,353,7,,2749,3.5265492757161456,0
728,,,65,4,,1558,1.9912265419960022,0
729,,,43,3,,1189,1.5289985100428263,0
730,,,347,7,,2587,3.4478702902793885,0
731,,,104,4,,1493,2.038417029380798,0
732,,,218,6,,1977,2.857477271556854,0
733,,,276,8,,2720,3.9601003487904864,0
734,,,362,8,,2688,3.919399090607961,0
735,,,38,3,,739,1.1454160849253336,0
736,,,305,7,,2697,3.8342026631037394,0
737,,,449,9,,3190,4.4400022149086,0
738,,,273,6,,2420,3.4093085964520773,0
739,,,311,7,,2734,3.8943493564923606,0
740,,,62,4,,1549,2.0653693874677024,0
741,,,64,3,,1132,1.5099931120872498,0
742,,,24,2,,413,0.6378118435541789,0
743,,,209,5,,1447,2.08859433333079,0
744,,,118,3,,940,1.355453892548879,0
745,,,45,2,,712,1.012475570042928,0
746,,,240,7,,2322,3.2676111419995624,0
747,,,407,7,,2706,3.822662643591563,0
748,,,382,13,,4741,6.685978547732035,0
749,,,267,6,,2045,2.8604000290234883,0
750,,,62,3,,1181,1.627912167708079,0
751,,,249,5,,1992,2.793634895483653,0
752,,,331,7,,2692,3.7880753596623737,0
753,,,496,9,,3442,4.790310637156169,0
754,,,305,7,,2582,3.6218192100524904,0
755,,,318,8,,3129,4.279732271035512,0
756,,,158,7,,2437,3.4183855334917705,0
757,,,434,9,,3501,4.775885454813639,0
758,,,68,3,,1097,1.4803207794825235,0
759,,,249,6,,2073,2.8417712767918903,0
760,,,443,9,,2952,3.989948066075643,0
761,,,471,9,,3457,4.5566226720809935,0
762,,,49,4,,886,1.2815568407376607,0
763,,,78,3,,1115,1.537024970849355,0
764,,,44,4,,670,1.0879894892374675,0
765,,,89,3,,1177,1.6070281108220419,0
766,,,41,2,,847,1.1380446791648864,0
767,,,237,6,,1591,2.230895519256592,0
768,,,302,8,,2812,3.843432279427846,0
769,,,202,4,,1617,2.2001572211583453,0
770,,,251,9,,3415,4.5191015283266704,0
771,,,171,3,,1190,1.598818552494049,0
772,,,283,7,,2697,3.6735994974772135,0
773,,,230,9,,3362,4.3083802183469135,0
774,,,57,2,,822,1.0339366396268208,0
775,,,235,7,,2685,3.5004974404970803,0
776,,,379,8,,3116,4.146059763431549,0
777,,,266,5,,2055,2.807714414596558,0
778,,,57,2,,815,1.1617201646169026,0
779,,,111,4,,1558,2.142063383261363,0
780,,,62,4,,1410,1.9082619190216064,0
781,,,148,7,,2629,3.372119192282359,0
782,,,259,6,,2434,3.3564820249875384,0
783,,,369,8,,3112,4.439525882403056,0
784,,,103,3,,1198,1.6235653122266134,0
785,,,87,4,,688,1.1077911575635275,0
786,,,323,7,,2599,3.726309875647227,0
787,,,270,6,,2377,3.4330697655677795,0
788,,,236,5,,1434,2.1246045589447022,0
789,,,151,4,,703,1.14172576268514,0
790,,,287,7,,2415,3.4051450888315835,0
791,,,55,2,,856,1.1732293804486593,0
792,,,281,6,,2218,3.1118900179862976,0
793,,,95,3,,1168,1.5958112041155497,0
794,,,38,3,,924,1.341584034760793,0
795,,,330,8,,3072,4.25173956155777,0
796,,,504,10,,3772,5.348772041002909,0
797,,,158,4,,1348,1.9339020490646361,0
798,,,298,6,,2159,3.119253146648407,0
799,,,249,7,,2689,3.7932329257329305,0
800,,,114,4,,1544,2.1548994104067485,0
801,,,358,8,,2739,4.004541734854381,0
802,,,61,3,,1202,1.7042207638422648,0
803,,,334,6,,1821,2.666362992922465,0
804,,,119,8,,2696,3.7344191749890645,0
805,,,129,5,,1903,2.694485334555308,0
806,,,213,5,,1288,1.8842861572901408,0
807,,,66,3,,1186,1.637559747695923,0
808,,,237,6,,1870,2.637458097934723,0
809,,,212,6,,2208,3.134814989566803,0
810,,,245,7,,2689,3.722888425985972,0
811,,,112,3,,1202,1.7218836704889933,0
812,,,484,11,,3879,5.334177386760712,0
813,,,251,6,,2146,2.9110387841860454,0
814,,,296,6,,2203,2.753643731276194,0
815,,,116,3,,1187,1.49010009765625,0
816,,,67,4,,1528,1.9002578179041545,0
817,,,138,7,,2588,3.2424317995707193,0
818,,,252,6,,1810,2.3689308245976766,0
819,,,63,3,,1179,1.445615005493164,0
820,,,198,5,,1345,1.8251158992449443,0
821,,,82,4,,1523,1.9136545499165853,0
822,,,112,5,,1852,2.331958576043447,0
823,,,44,3,,1139,1.4746432860692342,0
824,,,352,8,,3184,4.026811369260153,0
825,,,48,3,,970,1.2668334166208903,0
826,,,56,2,,823,1.0350315729777018,0
827,,,136,4,,1552,2.022509980201721,0
828,,,345,7,,2751,3.5017225901285807,0
829,,,83,4,,1064,1.4276581764221192,0
830,,,42,2,,797,0.9904184540112814,0
831,,,116,6,,1888,2.508271046479543,0
832,,,162,4,,1351,1.7685309290885924,0
833,,,470,9,,3473,4.647441335519155,0
834,"public void Test334228(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        int [] data = (int [])streamObjectInput.readObject();
        IO.writeLine("""" + data.length);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test334228(byte[] dataNormalized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataNormalized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        int [] media = (int [])streamObjectInput.readObject();
        IO.writeLine("""" + media.length);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",194,5,"data:media,dataSerialized:dataNormalized,",91,0.1419606884320577,ALERT
835,,,56,2,,842,1.1046270966529845,0
836,,,52,4,,1524,2.0401930689811705,0
837,,,430,9,,3471,4.669411404927572,0
838,,,323,12,,4182,5.323274560769399,0
839,,,115,4,,1546,1.975579067071279,0
840,,,275,6,,2288,2.8643722335497537,0
841,,,194,7,,2591,3.220543388525645,0
842,,,44,3,,1156,1.4159525394439698,0
843,,,409,9,,3526,4.492663439114889,0
844,,,567,8,,3017,3.8892719030380247,0
845,,,415,8,,2891,3.7063356002171832,0
846,,,52,2,,822,1.0735585769017537,0
847,,,143,5,,1885,2.3805452545483905,0
848,,,29,3,,1010,1.2959115703900654,0
849,,,69,4,,1545,2.0463027477264406,0
850,,,99,4,,1444,1.8613922079404195,0
851,,,90,3,,1184,1.5786367615063985,0
852,,,173,7,,2632,3.2891639629999796,0
853,,,121,5,,1897,2.356059420108795,0
854,,,71,3,,1177,1.5896273612976075,0
855,,,82,3,,1189,1.569439661502838,0
856,,,66,3,,1113,1.433726926644643,0
857,,,393,8,,2467,3.544470477104187,0
858,,,180,8,,2986,4.0886536558469135,0
859,,,271,8,,3163,4.315479552745819,0
860,,,29,4,,1524,2.1139752864837646,0
861,,,296,4,,1750,2.421548835436503,0
862,,,66,2,,746,1.0374070167541505,0
863,,,283,6,,2356,3.2995982726414996,0
864,,,242,13,,4631,6.374050637086232,0
865,,,174,7,,2622,3.5827478647232054,0
866,,,93,3,,1198,1.6641408205032349,0
867,,,182,4,,1590,2.072315506140391,0
868,,,64,3,,1192,1.507874103387197,0
869,,,214,5,,1989,2.553342334429423,0
870,,,309,9,,2999,4.1513695359230045,0
871,,,76,3,,966,1.3329359730084738,0
872,,,249,6,,1159,1.7134504199028016,0
873,,,283,12,,4140,5.345126620928446,0
874,,,270,8,,2559,3.290628457069397,0
875,,,363,7,,2623,3.528613225618998,0
876,,,167,7,,2602,3.399986743927002,0
877,,,144,7,,2626,3.355497403939565,0
878,,,208,6,,2008,2.5843442559242247,0
879,,,68,3,,1183,1.518563735485077,0
880,,,142,6,,1370,1.8024918953577678,0
881,,,123,4,,1446,1.8749313433965047,0
882,,,63,3,,1035,1.3535219073295592,0
883,,,326,9,,3430,4.358845885594686,0
884,,,322,8,,2667,3.4414822697639464,0
885,,,129,3,,983,1.2896912415822348,0
886,,,55,5,,1866,2.294231100877126,0
887,,,72,3,,1177,1.4705995877583822,0
888,,,439,14,,5105,6.55666659673055,0
889,,,54,2,,817,1.0572720885276794,0
890,,,62,4,,1038,1.4205674330393474,0
891,,,113,4,,1109,1.4832723180452982,0
892,,,236,7,,2241,2.8922640879948935,0
893,,,364,8,,3168,4.020669555664062,0
894,,,117,6,,1891,2.402985366185506,0
895,,,109,3,,937,1.2401033282279967,0
896,,,198,5,,1987,2.550706175963084,0
897,,,409,8,,3200,4.166057980060577,0
898,,,315,7,,2692,3.4316055019696554,0
899,,,277,5,,1739,2.1833203713099163,0
900,,,64,3,,1193,1.5602335651715598,0
901,,,230,4,,1494,1.835699164867401,0
902,,,78,3,,1183,1.5065255761146545,0
903,,,146,4,,1195,1.5254610300064086,0
904,,,59,4,,689,0.9791395664215088,0
905,,,331,8,,3133,3.941925815741221,0
906,,,40,3,,1205,1.4506552815437317,0
907,,,310,7,,2259,2.9125713030497233,0
908,,,273,7,,2786,3.4128209511439005,0
909,,,203,7,,2408,3.020004057884216,0
910,,,362,8,,3157,3.931411357720693,0
911,,,62,2,,819,0.9843842466672261,0
912,"public void Test081243(LinkedList<Integer> countLinkedList ) throws Throwable
{
    int count = countLinkedList.remove(2);
    int i = 0;
    for (i = 0; i < count; i++)
    {
        IO.writeLine(""Hello"");
    }
}","public void  test081203(LinkedList<Integer> countLinkEDInt ) throws Throwable
{
    intdivt = countLinkEDInt.remove(2);
    int uri = 0;
    foruri(i = 0uri i < div; uri++)
    {
        IO.writeLine(""Hello"");
    }
}",51,4,"Test081243: test081203,countLinkedList:countLinkEDInt,count:div,i:uri,",1028,1.2944056828816732,ALERT
913,,,50,1,,438,0.5579831202824911,0
914,,,181,10,,3667,4.382382341225942,0
915,,,113,4,,1344,1.6596498489379883,0
916,,,159,3,,1235,1.571587860584259,0
917,,,142,5,,1920,2.4069576462109885,0
918,,,294,6,,1827,2.345586915810903,0
919,,,307,6,,2386,2.9149699449539184,0
920,,,309,6,,2353,2.8747289975484214,0
921,,,77,3,,1139,1.373471438884735,0
922,,,82,3,,764,0.9900935649871826,0
923,,,20,1,,432,0.5565476059913635,0
924,,,123,3,,1209,1.4658863862355551,0
925,,,269,8,,2267,2.8480891227722167,0
926,,,324,8,,2986,3.724549969037374,0
927,,,179,7,,2253,2.897501556078593,0
928,,,68,3,,1141,1.4782700896263123,0
929,,,653,9,,3502,4.255425469080607,0
930,,,58,3,,1125,1.2976187348365784,0
931,,,126,3,,1200,1.4209871768951416,0
932,,,220,5,,1625,2.0791890343030293,0
933,,,45,4,,1032,1.3835773388544719,0
934,,,275,6,,2356,2.8571773370107016,0
935,,,466,9,,3110,3.7168320655822753,0
936,,,360,8,,3143,3.813357651233673,0
937,,,206,6,,2330,2.834146984418233,0
938,,,276,6,,2265,2.7961602250734967,0
939,,,110,3,,1173,1.3721763531366984,0
940,,,174,3,,935,1.135947875181834,0
941,,,331,9,,3429,4.2622056126594545,0
942,,,140,4,,1458,1.7839504996935527,0
943,,,279,7,,2713,3.1827455202738446,0
944,,,80,2,,824,1.048428734143575,0
945,,,69,3,,1124,1.3719709793726602,0
946,,,491,9,,3433,4.0510784904162085,0
947,,,125,3,,1195,1.4680500825246174,0
948,,,29,3,,1110,1.3703089316685995,0
949,,,90,3,,867,1.1588184197743734,0
950,,,322,8,,2895,3.496515488624573,0
951,,,358,8,,3087,3.809220012029012,0
952,,,121,8,,2687,3.112794582049052,0
953,,,274,8,,2500,3.107540551821391,0
954,,,248,7,,2682,3.172765366236369,0
955,,,164,6,,1923,2.3581406156222027,0
956,,,52,2,,489,0.6384490688641866,0
957,,,248,8,,2788,3.5167728304862975,0
958,,,110,4,,1559,1.808770187695821,0
959,,,206,7,,2259,2.7384729782740274,0
960,,,259,5,,1943,2.3798329909642537,0
961,,,39,2,,725,0.8874399423599243,0
962,,,192,7,,2223,2.7472334265708924,0
963,,,421,8,,2931,3.65230131149292,0
964,,,278,7,,1927,2.465331216653188,0
965,,,70,2,,714,0.8253385464350382,0
966,,,273,6,,2367,2.8762897133827208,0
967,,,294,7,,2668,3.2039673725763955,0
968,"public void Test673787(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        String stringToEncrypt = ""Super secret Squirrel"";
        byte[] byteStringToEncrypt = stringToEncrypt.getBytes(""UTF-8"");
        SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
        Cipher aesCipher = Cipher.getInstance(""AES"");
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
        IO.writeLine(IO.toHex(byteCipherText));  
    }
}","public void  test63777(Vector<String> dataVector ) throws Throwable
{
    String seed = dataVector.remove(2);
    if (seed != null)
    {
        String stringTOencSign = ""Super secret Squirrel"";
        byte[] byteStringWillEncute = stringTOencSign.getBytes(""UTF-8"");
        SecretKeySpec secretKeySpec = new SecretKeySpec(seed.getBytes(""UTF-8""), ""AES"");
        Cipher aesCipher = Cipher.getInstance(""AES"");
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        byte[] byteCrypttext = aesCipher.doFinal(byteStringWillEncute);
        IO.writeLine(IO.toHex(byteCrypttext));  
    }
}",110,8,"stringToEncrypt:stringTOencSign,Test673787: test63777,byteStringToEncrypt:byteStringWillEncute,byteCipherText:byteCrypttext,data:seed,",215,0.27247372070948284,ALERT
969,,,163,9,,3423,4.150737078984578,0
970,"public void Test285593(Object dataObject ) throws Throwable
{
    String data = (String)dataObject;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test285593(Object DataObject ) throws Throwable
{
    String dump = (String)DataObject;
    Connection sqlConn = null;
    Statement sslConnection = null;
    ResultSet  resultList = null;
    try
    {
        sqlConn = IO.getDBConnection();
        sslConnection = sqlConn.createStatement();
         resultList = sslConnection.executeQuery(""select * from users where name='""+dump+""'"");
        IO.writeLine( resultList.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if ( resultList != null)
            {
                 resultList.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslConnection != null)
            {
                sslConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (sqlConn != null)
            {
                sqlConn.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",219,6,"dbConnection:sqlConn,resultSet: resultList,dataObject:DataObject,data:dump,sqlStatement:sslConnection,",240,0.32739444573720294,ALERT
971,,,297,8,,2880,3.5995631217956543,0
972,,,292,9,,3438,3.965199871857961,0
973,,,308,7,,2596,3.1291386047999064,0
974,,,157,4,,1610,1.8533130168914795,0
975,,,81,3,,1190,1.4711888909339905,0
976,,,417,13,,4110,5.185937897364298,0
977,,,273,7,,2752,3.3038763483365376,0
978,,,64,2,,788,0.9412559827168783,0
980,,,67,3,,1175,1.452848207950592,0
981,,,72,3,,1190,1.4854777654012044,0
982,,,61,3,,1167,1.410370926062266,0
983,,,52,2,,433,0.6199889183044434,0
984,,,89,3,,1195,1.4194680054982503,0
985,,,275,8,,2692,3.2111337145169574,0
986,,,311,8,,1788,2.3868795077006024,0
987,,,73,3,,1164,1.4140301863352458,0
988,,,125,6,,2270,2.7797304232915243,0
989,,,92,3,,1190,1.378259301185608,0
990,,,256,6,,2332,2.779453472296397,0
991,,,202,6,,2184,2.635948606332143,0
992,,,86,3,,610,0.8245838085810343,0
993,,,267,5,,1977,2.426766240596771,0
994,,,139,8,,2690,3.258176589012146,0
995,,,377,8,,3141,3.7174789865811664,0
996,,,253,5,,2003,2.253568732738495,0
997,,,100,6,,2196,2.4380038579305015,0
998,,,320,7,,2630,3.169007690747579,0
999,,,336,7,,2685,3.1926410754521686,0
1000,,,137,3,,1142,1.387960958480835,0
1001,,,210,6,,2320,2.7238081256548563,0
1002,,,274,5,,1994,2.2925324042638144,0
1003,,,237,5,,1953,2.3853197932243346,0
1004,,,66,3,,563,0.7757052938143413,0
1005,,,501,11,,4157,5.008295726776123,0
1006,,,273,7,,2495,3.0912360390027365,0
1007,,,47,2,,733,0.8650743802388509,0
1008,,,271,6,,2341,2.7872204264005025,0
1009,,,109,6,,2258,2.760546561082204,0
1010,"private void Test676011() throws Throwable
{
    if (IO.staticTrue)
    {
        int intOne = 1, intFive = 5;
        IO.writeLine(intOne);
        intOne = intFive;
        IO.writeLine(intOne);
    }
}","private void  TEST676012() throws Throwable
{
    if (IO.staticTrue)
    {
        int uintOne = 1, intFive = 5;
        IO.writeLine(uintOne);
        uintOne = intFive;
        IO.writeLine(uintOne);
    }
}",44,3,"Test676011: TEST676012,intOne:uintOne,",77,0.11833689212799073,ALERT
1011,,,48,2,,819,0.9691499233245849,0
1012,,,250,6,,2351,2.752471089363098,0
1013,,,72,3,,1166,1.4175161123275757,0
1014,,,205,6,,1465,1.9080447793006896,0
1015,,,324,7,,2614,3.1778531471888223,0
1016,,,284,7,,2600,3.0928571740786235,0
1017,,,103,5,,1898,2.205615468819936,0
1018,,,45,3,,1170,1.4314447204271952,0
1019,,,250,14,,4805,5.8329910437266035,0
1020,,,200,6,,1636,1.9676738063494363,0
1021,,,218,5,,1950,2.326671330134074,0
1022,,,248,14,,4962,5.895904930432637,0
1023,,,36,3,,1105,1.3234529415766398,0
1024,,,188,7,,2612,3.0654226740201316,0
1025,,,83,4,,1296,1.4687475363413494,0
1026,,,58,2,,824,0.9662541389465332,0
1027,,,88,3,,1103,1.2582666079203289,0
1028,,,196,5,,1661,2.0202417532602945,0
1029,,,322,9,,3383,4.068304387728373,0
1030,,,286,6,,2032,2.5640078743298846,0
1031,,,267,6,,2355,2.798777119318644,0
1032,,,119,3,,1240,1.4290867090225219,0
1033,,,296,8,,3109,3.6817523280779523,0
1034,,,370,8,,2731,3.3271644870440165,0
1035,,,140,4,,1566,1.8802578608194986,0
1036,,,25,2,,806,0.9571485797564189,0
1037,,,109,7,,2594,3.046861688296,0
1038,,,142,7,,2603,3.0869519154230756,0
1039,,,209,6,,2036,2.473431849479675,0
1040,,,61,4,,1518,1.794492816925049,0
1041,,,400,7,,2422,2.9624112526575725,0
1042,,,62,2,,798,0.9915230393409729,0
1043,,,65,5,,1664,2.0055450002352395,0
1044,,,56,2,,826,0.9692362626393636,0
1045,,,142,7,,2478,2.968302543958028,0
1046,,,265,6,,2214,2.6764304916063946,0
1047,,,282,6,,2128,2.589396289984385,0
1048,,,66,3,,1212,1.374004054069519,0
1049,,,297,7,,2702,3.184210268656413,0
1050,,,192,5,,1679,2.108455717563629,0
1051,,,61,5,,816,1.1119857470194499,0
1052,,,44,1,,448,0.56737775405248,0
1053,,,416,7,,2499,3.083178619543711,0
1054,,,280,6,,1936,2.3166921456654865,0
1055,,,84,3,,1171,1.3864755352338156,0
1056,,,231,4,,1200,1.539898145198822,0
1057,,,434,8,,2470,3.1405460476875304,0
1058,,,257,9,,3322,3.9005722920099895,0
1059,,,383,9,,3414,4.129301798343659,0
1060,,,213,6,,2366,2.8632856369018556,0
1061,,,74,6,,1880,2.279441491762797,0
1062,,,92,3,,1192,1.4416240056355794,0
1063,,,232,6,,2351,2.742925759156545,0
1064,,,202,7,,2538,3.0111971139907836,0
1065,,,352,8,,2812,3.426331023375193,0
1066,,,405,9,,3211,3.98916494846344,0
1067,,,251,7,,2334,2.748298756281535,0
1068,,,231,5,,1278,1.657679816087087,0
1069,,,382,8,,2208,2.8045098543167115,0
1070,"public void Test381859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringToEncrypt = ""Super secret Squirrel"";
            byte[] byteStringToEncrypt = stringToEncrypt.getBytes(""UTF-8"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
            Cipher aesCipher = Cipher.getInstance(""AES"");
            aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
            IO.writeLine(IO.toHex(byteCipherText));  
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test381859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        if (data != null)
        {
            String stringWillEncract = ""Super secret Squirrel"";
            byte[] byteStringToEncrypt = stringWillEncract.getBytes(""UTF-8"");
            SecretKeySpec secretKeySpec = new SecretKeySpec(data.getBytes(""UTF-8""), ""AES"");
            Cipher aesCipher = Cipher.getInstance(""AES"");
            aesCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
            byte[] byteCipherText = aesCipher.doFinal(byteStringToEncrypt);
            IO.writeLine(IO.toHex(byteCipherText));  
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",265,10,"stringToEncrypt:stringWillEncract,",67,0.10579630533854166,ALERT
1071,,,158,7,,2342,2.8556800365447996,0
1072,,,200,5,,1802,2.185567371050517,0
1073,,,486,11,,4025,4.86628624200821,0
1074,,,62,1,,431,0.5543973207473755,0
1075,,,252,8,,2970,3.567132564385732,0
1076,,,362,8,,2951,3.5473014156023663,0
1077,,,97,4,,1555,1.8045913497606914,0
1078,,,28,2,,797,1.0004490693410237,0
1079,,,47,2,,826,1.0157423297564188,0
1080,,,133,3,,1196,1.38899214665095,0
1081,,,94,2,,819,0.9540834903717041,0
1082,,,106,3,,1170,1.3920241753260294,0
1083,,,106,3,,1200,1.4498124519983928,0
1084,,,47,2,,763,0.9461014707883199,0
1085,,,116,4,,1637,1.9704342484474182,0
1086,,,352,8,,3176,3.8900862336158752,0
1087,,,237,5,,1941,2.332978701591492,0
1088,,,129,6,,1724,2.206501805782318,0
1089,,,69,4,,1519,1.8101589759190877,0
1090,,,58,4,,1338,1.5728999614715575,0
1091,,,266,9,,3477,4.051466063658396,0
1092,,,279,6,,2343,2.8357946038246156,0
1093,,,200,6,,2155,2.557755450407664,0
1094,,,210,8,,2869,3.4517319639523825,0
1095,,,58,3,,1193,1.424670398235321,0
1096,,,294,6,,2396,3.0327633221944175,0
1097,,,246,5,,1305,1.6697262167930602,0
1098,,,259,9,,3225,3.8726215322812396,0
1099,,,363,7,,2465,2.968218382199605,0
1100,,,133,7,,2597,3.0331152200698854,0
1101,,,341,6,,2421,2.96985076268514,0
1102,,,121,8,,2755,3.1510400573412576,0
1103,"public void Test741596(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        long data = (Long)streamObjectInput.readObject();
        long result = (long)(--data);
        IO.writeLine(""result: "" + result);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test741596(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamFileArrayRead = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamFileArrayRead = new ByteArrayInputStream(dataSerialized);
       streamObjectInputt = new ObjectInputStream(streamFileArrayRead);
        long length = (Long)streamObjectInput.readObject();
        long reresult (long)(--length);
        IO.writeLine(""result: "" + result);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamFileArrayRead != null)
            {
                streamFileArrayRead.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",199,6,"Test741596:Test741596,dataSerialized:dataSerialized,streamByteArrayInput:streamFileArrayRead,streamObjectInput:streamObjectInput,data:length,result:result,",383,0.5099513292312622,ALERT
1104,,,33,1,,434,0.5498187422752381,0
1105,,,65,4,,1121,1.398721663157145,0
1106,,,97,3,,1213,1.4397955775260924,0
1107,,,63,3,,1086,1.2653043349583943,0
1108,,,361,8,,3073,3.607298986117045,0
1109,,,109,7,,2535,3.116385308901469,0
1110,,,334,8,,3100,3.734448870023092,0
1111,,,154,4,,1591,1.8381370782852173,0
1112,,,279,6,,2444,2.9590702017148334,0
1113,,,57,3,,1141,1.3738861719767252,0
1114,,,549,11,,4051,4.773072850704193,0
1115,,,254,6,,2342,2.7765542189280192,0
1116,,,339,7,,2758,3.321786844730377,0
1117,,,293,8,,2934,3.349028992652893,0
1118,,,65,3,,1174,1.3698321223258971,0
1119,,,103,3,,1209,1.4490399956703186,0
1120,,,74,3,,1183,1.3727866729100546,0
1121,,,363,7,,2716,3.0593448479970298,0
1122,,,25,2,,824,0.9981542785962423,0
1123,,,72,3,,1167,1.3990981698036193,0
1124,,,273,6,,2319,2.7128848671913146,0
1125,,,95,3,,1172,1.3468162298202515,0
1126,,,140,4,,1398,1.6605350613594054,0
1127,,,251,8,,2995,3.5490987062454225,0
1128,,,320,7,,2433,2.923856461048126,0
1129,,,56,2,,826,1.0093955437342326,0
1130,,,301,6,,1701,2.2194987376530966,0
1131,,,88,3,,1176,1.3035861372947692,0
1132,,,170,7,,2631,3.186102032661438,0
1133,,,338,8,,2666,3.2562674125035604,0
1134,,,176,6,,2339,2.8115904966990155,0
1135,,,447,10,,3857,4.618177282810211,0
1136,,,89,4,,1526,1.8493531783421835,0
1137,,,258,7,,2611,3.200249954064687,0
1138,,,108,3,,1213,1.4673081477483114,0
1139,,,85,3,,1159,1.378217844168345,0
1140,,,399,8,,2866,3.454001764456431,0
1141,,,361,8,,2974,3.5899354298909505,0
1142,,,265,7,,2710,3.183311176300049,0
1143,,,75,3,,1198,1.466348167260488,0
1144,,,65,3,,1180,1.4242024699846902,0
1145,,,309,8,,2968,3.742247990767161,0
1146,,,266,6,,1990,2.5158585906028748,0
1147,,,344,7,,2739,3.244256858030955,0
1148,,,83,3,,1165,1.4073804020881653,0
1149,,,296,7,,2793,3.261301366488139,0
1150,,,143,6,,2216,2.698897961775462,0
1151,,,175,5,,1955,2.3005810101826984,0
1152,,,61,4,,674,0.9640255570411682,0
1153,,,102,6,,2288,2.7300156990687054,0
1154,,,49,2,,732,0.9196527163187663,0
1155,,,68,3,,1183,1.402672791481018,0
1156,,,426,9,,3466,4.052411194642385,0
1157,,,182,10,,3590,4.409129667282104,0
1158,,,177,7,,2534,3.0473267833391824,0
1159,,,186,7,,2637,3.2058700283368426,0
1160,,,351,8,,3121,3.8813915650049844,0
1161,,,318,7,,2327,2.9546244939168296,0
1162,,,262,8,,3073,3.6612417062123614,0
1163,,,56,4,,1221,1.5278337796529133,0
1164,,,134,3,,1245,1.503383708000183,0
1165,,,283,6,,2210,2.601995658874512,0
1166,,,96,3,,1192,1.5020091652870178,0
1167,,,245,6,,2335,2.855845395723979,0
1168,,,84,4,,1557,1.874054503440857,0
1169,,,120,4,,1559,1.9215479334195456,0
1170,,,91,5,,1825,2.1821905732154847,0
1171,,,180,6,,2319,2.715503470102946,0
1172,"public void Test227430(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        String stringTrimmed = data.trim();
        IO.writeLine(stringTrimmed);
    }
}","public void Test227430(Vector<String> dataVector ) throws Throwable
{
    String sample = dataVector.remove(2);
    if (sample != null)
    {
        String stringTramed = sample.trim();
        IO.writeLine(stringTramed);
    }
}",48,4,"stringTrimmed:stringTramed,data:sample,",87,0.12545266548792522,ALERT
1173,,,170,8,,3064,3.713376220067342,0
1174,,,330,7,,2799,3.4242226322491964,0
1175,,,70,3,,1148,1.369121789932251,0
1176,,,388,8,,3030,3.8098328630129497,0
1177,,,376,8,,3069,3.758151570955912,0
1178,,,116,3,,1187,1.2989408294359843,0
1179,,,251,6,,2354,2.8193446437517804,0
1180,,,49,4,,666,0.9744987249374389,0
1181,,,316,6,,1940,2.51064019203186,0
1182,,,232,4,,1605,1.991037646929423,0
1183,,,226,9,,3413,4.066121590137482,0
1184,,,85,4,,1554,1.929955502351125,0
1185,,,245,5,,1799,2.240023163954417,0
1186,,,376,11,,3800,4.664733974138896,0
1187,,,259,6,,1738,2.0615684151649476,0
1188,,,367,8,,3027,3.677449953556061,0
1189,,,110,5,,1887,2.217187452316284,0
1190,,,124,6,,2134,2.599102302392324,0
1191,,,325,7,,2704,3.326212255160014,0
1192,,,255,6,,2330,2.8327956477801006,0
1193,,,93,4,,1556,1.8694676200548808,0
1194,,,221,14,,5019,5.927362716197967,0
1195,,,271,6,,2322,2.775067750612895,0
1196,,,242,8,,2271,2.9189038713773092,0
1197,,,116,7,,2545,2.9981620709101358,0
1198,,,411,8,,2871,3.492740054925283,0
1199,,,304,12,,4507,5.456427597999573,0
1200,,,95,3,,633,0.8628918369611104,0
1201,,,83,4,,1262,1.5226654966672262,0
1202,,,48,2,,831,0.9754899144172668,0
1203,,,185,7,,2578,3.1096134265263875,0
1204,,,160,5,,1885,2.3227320194244383,0
1205,,,68,3,,1121,1.2827718178431193,0
1206,,,222,13,,4457,5.411766171455383,0
1207,,,120,3,,1208,1.5215083122253419,0
1208,,,42,5,,1716,2.153799855709076,0
1209,,,152,7,,2317,2.8886016686757405,0
1210,,,69,5,,1470,1.8900694131851197,0
1211,,,528,8,,3075,3.7545552889506024,0
1212,,,385,8,,2784,3.4212628881136578,0
1213,,,110,8,,2924,3.5165245652198793,0
1214,,,237,5,,1965,2.4107428908348085,0
1215,,,100,4,,1021,1.3409130295117697,0
1216,,,128,8,,2908,3.500914816061656,0
1217,,,213,5,,1793,2.171829609076182,0
1218,,,121,6,,2300,2.8193100452423097,0
1219,,,254,5,,1790,2.177638073762258,0
1220,,,481,9,,3474,4.091597394148509,0
1221,,,74,2,,846,1.1005239129066466,0
1222,,,327,6,,1840,2.3665650407473247,0
1223,,,43,2,,647,0.8145388960838318,0
1224,,,185,7,,2559,3.0759199778238933,0
1225,,,97,4,,1112,1.3936649401982626,0
1226,,,65,2,,844,1.026288902759552,0
1227,,,240,3,,974,1.2455236593882242,0
1228,,,53,2,,393,0.556265636285146,0
1229,,,83,3,,1207,1.4076613505681357,0
1230,,,60,5,,1583,1.9248135646184286,0
1231,,,59,3,,1153,1.4355630914370219,0
1232,,,69,3,,1159,1.4135173241297403,0
1233,,,204,6,,2230,2.691347865263621,0
1234,,,196,10,,3704,4.434296298027038,0
1235,,,188,5,,1928,2.410278371969859,0
1236,,,61,3,,1182,1.4547324856122335,0
1237,,,36,2,,818,1.0198310335477194,0
1238,,,35,3,,1174,1.4652090549468995,0
1239,,,280,6,,2306,2.8553810397783916,0
1240,,,52,2,,779,0.9837116837501526,0
1241,,,280,11,,3861,4.733883162339528,0
1242,,,142,4,,1278,1.6410260915756225,0
1243,,,66,2,,830,1.00540642340978,0
1244,,,78,3,,919,1.183855696519216,0
1245,,,345,8,,2442,3.079397201538086,0
1246,,,293,8,,2767,3.3976519823074343,0
1247,,,135,7,,2278,2.8092195908228557,0
1248,,,231,6,,2392,2.880870238939921,0
1249,,,146,4,,1547,1.844511580467224,0
1250,,,137,7,,2588,3.095024585723877,0
1251,,,55,2,,787,0.9350176930427552,0
1252,,,301,8,,2926,3.668486762046814,0
1253,,,439,10,,3675,4.675170469284057,0
1254,,,210,5,,1665,2.1055815617243447,0
1255,,,311,8,,3090,3.772544590632121,0
1256,,,292,7,,2186,2.7362682700157164,0
1257,,,148,3,,1196,1.4363905946413675,0
1258,,,93,3,,1183,1.484241525332133,0
1259,,,219,6,,2262,2.716383520762126,0
1260,,,245,6,,2097,2.6154266635576886,0
1261,,,129,6,,972,1.3269770781199137,0
1262,,,137,7,,2517,3.007111100355784,0
1263,,,193,6,,2271,2.7674829959869385,0
1264,,,237,8,,2664,3.206356378396352,0
1265,,,155,5,,2004,2.418703285853068,0
1266,,,339,9,,3429,4.112761954466502,0
1267,,,314,8,,3145,3.739973719914754,0
1268,,,201,5,,1969,2.263101307551066,0
1269,,,109,3,,1211,1.4526806354522706,0
1270,,,86,5,,1670,1.9891901890436807,0
1271,,,133,3,,953,1.2403971274693808,0
1272,,,164,6,,1713,2.0914947271347044,0
1273,,,169,7,,2162,2.6481678048769632,0
1274,,,109,3,,1167,1.487800133228302,0
1275,,,244,5,,2035,2.4796430627504984,0
1276,,,300,7,,2563,3.127932878335317,0
1277,,,91,3,,1182,1.51079527537028,0
1278,,,82,3,,1158,1.4051047722498575,0
1279,,,249,6,,2153,2.714993147055308,0
1280,,,88,6,,2195,2.601853557427724,0
1281,,,292,9,,3179,3.980243364969889,0
1282,,,288,6,,2378,2.899485456943512,0
1283,,,308,7,,2766,3.360421578089396,0
1284,,,62,4,,1542,1.8319753011067708,0
1285,,,247,6,,2187,2.6788063764572145,0
1286,,,40,3,,1195,1.4569928924242654,0
1287,,,165,7,,2408,2.9987518231074017,0
1288,,,502,10,,3798,4.625690543651581,0
1289,,,215,5,,1758,2.1761678020159403,0
1290,,,310,7,,2373,3.0122737010320026,0
1291,,,252,5,,1740,2.175460096200307,0
1292,,,164,6,,2224,2.626371451218923,0
1293,,,93,3,,875,1.0696170488993326,0
1294,,,79,2,,830,0.9980242490768433,0
1295,,,304,7,,2688,3.3534807642300923,0
1296,,,285,9,,3455,4.242308080196381,0
1297,,,113,5,,1459,1.8059914072354635,0
1298,,,139,7,,2119,2.531731128692627,0
1299,,,469,10,,3786,4.599907330671946,0
1300,,,96,5,,1859,2.235846678415934,0
1301,,,78,3,,1078,1.3520354787508646,0
1302,,,249,7,,2237,2.71995046933492,0
1303,,,57,3,,964,1.219095265865326,0
1304,"public void Test229044(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a.data;
    Connection dbConnection = null;
    Statement sqlStatement = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        int rowCount = sqlStatement.executeUpdate(""insert into users (status) values ('updated') where name='""+data+""'"");
        IO.writeLine(""Updated "" + rowCount + "" rows successfully."");
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","public void Test229044(HttpServletRequest model, HttpServletResponse response) throws Throwable
{
    String ata = CWE89_SQL_Injection__getCookies_Servlet_executeUpdate_68a.ata;
    Connection DBConn = null;
    Statement sslConfiguration = null;
    try
    {
        DBConn = IO.getDBConnection();
        sslConfiguration = DBConn.createStatement();
        int rocount = sslConfiguration.executeUpdate(""insert into users (status) values ('updated') where name='""+ata+""'"");
        IO.writeLine(""Updated "" + rocount + "" rows successfully."");
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (sslConfiguration != null)
            {
                sslConfiguration.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (DBConn != null)
            {
                DBConn.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",178,7,"sqlStatement:sslConfiguration,dbConnection:DBConn,rowCount:rocount,data:ata,request:model,",212,0.27009919881820676,ALERT
1305,,,44,3,,1176,1.4306342164675394,0
1306,,,318,8,,3167,3.8982033411661785,0
1307,,,163,4,,1583,1.924047573407491,0
1308,,,231,5,,1905,2.3242406288782758,0
1309,,,136,6,,2007,2.4539915402730306,0
1310,,,77,3,,1186,1.427741273244222,0
1311,,,245,6,,2166,2.6360187331835427,0
1312,,,34,2,,717,0.8748401323954265,0
1313,,,140,4,,1200,1.5151976625124612,0
1314,,,50,1,,438,0.5606164336204529,0
1315,,,273,9,,3021,3.729771129290263,0
1316,,,87,3,,987,1.2598241368929546,0
1317,,,361,8,,1826,2.432059629758199,0
1318,,,238,5,,2020,2.4421136220296225,0
1319,,,292,8,,3026,3.804521405696869,0
1320,,,271,5,,1750,2.196298309167226,0
1321,,,197,5,,1994,2.4394602219263715,0
1322,,,360,9,,2805,3.5661431670188906,0
1323,,,99,2,,851,1.0516332944234212,0
1324,,,153,7,,2339,2.7367167115211486,0
1325,,,50,4,,1495,1.7760063648223876,0
1326,,,153,9,,3216,3.7740526755650836,0
1327,,,161,6,,2213,2.6625861088434855,0
1328,,,121,3,,1143,1.3847779075304667,0
1329,,,387,7,,2695,3.341658902168274,0
1330,,,164,6,,2237,2.699695360660553,0
1331,,,335,7,,2213,2.8137476960817973,0
1332,,,272,8,,3007,3.713358195622762,0
1333,,,129,3,,1055,1.2946810921033223,0
1334,,,164,4,,1629,2.037548847993215,0
1335,,,355,7,,2763,3.3820494691530865,0
1336,,,92,5,,1910,2.1933732986450196,0
1337,,,36,3,,1141,1.3776188492774963,0
1338,,,286,9,,3371,4.159595108032226,0
1339,,,23,2,,820,0.9865679701169332,0
1340,,,369,8,,3109,3.7294796268145243,0
1341,,,309,7,,2773,3.3934101104736327,0
1342,,,197,6,,2264,2.7932325045267743,0
1343,,,43,2,,774,0.9144347906112671,0
1344,,,158,7,,2550,3.0373270392417906,0
1345,,,435,8,,2977,3.678696544965108,0
1346,,,330,7,,2705,3.388296322027842,0
1348,,,489,10,,3566,4.210610087712606,0
1349,,,298,7,,2570,3.182526461283366,0
1350,,,574,5,,1927,2.4061448613802594,0
1351,,,233,8,,3045,3.6600465019543966,0
1352,,,275,10,,3801,4.514458227157593,0
1353,,,208,6,,1469,1.8602915326754252,0
1354,,,74,3,,1163,1.4444375356038412,0
1355,,,35,3,,1118,1.3154322703679402,0
1356,,,38,4,,1505,1.674720541636149,0
1357,,,106,3,,1198,1.4401427865028382,0
1358,,,312,7,,2238,2.815794070561727,0
1359,,,161,4,,1336,1.610745620727539,0
1360,,,77,3,,1163,1.4352290868759154,0
1361,,,117,6,,2260,2.7170900225639345,0
1362,,,48,3,,1173,1.4655114571253458,0
1363,,,303,7,,2339,2.923476775487264,0
1364,,,288,9,,3393,4.0496263861656185,0
1365,,,337,9,,3285,4.025399772326152,0
1366,,,296,8,,2995,3.676427900791168,0
1367,,,33,2,,830,0.9806794166564942,0
1368,,,263,6,,2356,2.8794952829678855,0
1369,,,301,8,,2988,3.721363055706024,0
1370,,,40,2,,826,1.0001302282015483,0
1371,,,339,7,,2648,3.283946375052134,0
1372,,,91,3,,1174,1.2922002037366231,0
1373,,,110,3,,1163,1.4202725410461425,0
1374,,,412,10,,3792,4.715772799650828,0
1375,,,249,6,,2357,2.917380865414937,0
1376,,,371,8,,2718,3.428632068634033,0
1377,,,264,6,,2337,2.88222230275472,0
1378,,,253,7,,2083,2.6310978134473166,0
1379,,,229,7,,2500,3.0578616738319395,0
1380,,,91,3,,914,1.1671513239542644,0
1381,,,93,3,,1186,1.455728809038798,0
1382,,,235,5,,1960,2.3805569291114805,0
1383,,,454,4,,1750,2.1119885047276816,0
1384,,,280,6,,2361,2.8526261687278747,0
1385,,,277,7,,2712,3.214341958363851,0
1386,,,191,5,,1295,1.62401229540507,0
1387,,,43,2,,786,0.9464913129806518,0
1388,,,333,6,,1949,2.4158206979433694,0
1389,,,81,3,,947,1.2360668977101643,0
1390,,,42,4,,1509,1.7818113883336386,0
1391,,,108,3,,1182,1.5041600783665976,0
1392,,,253,6,,2229,2.7460304141044616,0
1393,,,272,6,,2157,2.6958332538604735,0
1394,,,105,3,,1181,1.4301260828971862,0
1395,,,200,4,,1646,2.0788674553235373,0
1396,,,254,6,,1757,2.233898103237152,0
1397,,,313,7,,2553,3.1428091168403625,0
1398,,,137,7,,2410,2.952954578399658,0
1399,,,89,4,,1528,1.920590376853943,0
1400,,,304,8,,3055,3.7840307116508485,0
1401,,,283,7,,2409,2.962926896413167,0
1402,,,292,7,,2575,3.121811612447103,0
1403,,,75,5,,1851,2.1118825912475585,0
1404,,,229,8,,2889,3.5779106696446736,0
1405,,,94,3,,1111,1.423511004447937,0
1406,,,209,4,,1640,1.9547410209973652,0
1407,,,76,3,,1181,1.4366090655326844,0
1408,,,65,4,,1496,1.8676262497901917,0
1409,,,170,7,,2584,3.192990513642629,0
1410,,,157,4,,797,1.1076109449068705,0
1411,,,309,7,,2501,3.140623625119527,0
1412,,,93,5,,1653,1.9553251187006633,0
1413,,,174,8,,2904,3.5379323164621987,0
1414,,,87,3,,1197,1.4513315161069233,0
1415,,,214,6,,2230,2.7250268896420797,0
1416,,,27,2,,798,0.9428467075030009,0
1417,,,197,6,,2383,2.865093457698822,0
1418,,,290,6,,2347,2.880129329363505,0
1419,,,121,5,,1946,2.318366209665934,0
1420,,,35,3,,886,1.133530350526174,0
1421,,,394,8,,3157,3.863553778330485,0
1422,,,116,3,,951,1.2241830388704935,0
1423,,,141,6,,2196,2.6504573901494344,0
1424,,,85,3,,870,1.1246270736058552,0
1425,,,240,6,,1569,2.0152002731959024,0
1426,,,294,6,,2345,2.9026684323946634,0
1427,,,77,3,,901,1.151297430197398,0
1428,,,150,3,,1271,1.5568838477134705,0
1429,,,117,6,,1880,2.3289233088493346,0
1430,,,90,5,,1805,2.10308780670166,0
1431,,,548,8,,3139,3.8237832109133403,0
1432,,,252,6,,2283,2.7196773052215577,0
1433,,,301,8,,3077,3.773837192853292,0
1434,,,63,2,,839,1.0086602489153544,0
1435,,,369,8,,3050,3.655677592754364,0
1436,,,293,6,,2336,2.758151590824127,0
1437,,,301,7,,2743,3.24111590385437,0
1438,,,258,7,,2459,2.9882530609766644,0
1439,,,69,3,,1140,1.2987761974334717,0
1440,,,238,5,,1274,1.6241022229194642,0
1441,,,136,6,,2256,2.598363546530406,0
1442,,,228,5,,1972,2.3376643657684326,0
1443,,,353,7,,2653,3.178065530459086,0
1444,,,100,4,,1478,1.7831193645795187,0
1445,,,63,3,,1211,1.4383777817090353,0
1446,,,33,3,,1070,1.2697483897209167,0
1447,,,133,5,,1203,1.5448094169298807,0
1448,,,246,4,,1625,1.901542103290558,0
1449,,,236,7,,2521,2.8777795672416686,0
1450,,,138,6,,2135,2.5974343180656434,0
1451,,,79,3,,1195,1.3767026662826538,0
1452,,,239,6,,2364,2.8609318216641744,0
1453,,,224,5,,2041,2.3898330410321553,0
1454,,,97,4,,1219,1.4325039227803549,0
1455,,,96,4,,1561,1.825488066673279,0
1456,,,281,8,,2629,3.187376805146535,0
1457,,,419,9,,3418,4.093090864022573,0
1458,,,250,5,,2013,2.3653200387954714,0
1459,,,158,4,,1545,1.8615256110827128,0
1460,,,416,7,,2753,3.327269268035889,0
1461,,,347,8,,2834,3.3443432052930198,0
1462,,,58,3,,1194,1.412964975833893,0
1463,,,61,3,,1014,1.2088697791099547,0
1464,,,334,7,,2711,3.1845925569534304,0
1465,,,93,3,,1206,1.3656275669733684,0
1466,,,50,3,,1161,1.3101192593574524,0
1467,,,164,5,,2027,2.42893469731013,0
1468,,,225,7,,2458,2.9788266817728677,0
1469,,,566,8,,3089,3.672207156817118,0
1470,,,111,3,,1180,1.414857280254364,0
1471,,,85,4,,1542,1.8133385062217713,0
1472,,,399,8,,2943,3.4028573671976727,0
1473,,,362,9,,3447,4.079253546396891,0
1474,,,159,7,,1984,2.3897698124249778,0
1475,,,414,8,,2604,3.2435660640398662,0
1476,,,63,3,,1176,1.3476427992184956,0
1477,,,46,2,,807,0.9385083874066671,0
1478,,,153,6,,1740,2.1187167127927142,0
1479,,,95,3,,1194,1.4122242013613382,0
1480,,,102,5,,1681,1.9700190862019857,0
1481,,,57,4,,1495,1.6957308252652485,0
1482,,,339,6,,2069,2.525142721335093,0
1483,,,365,7,,2482,3.0598776936531067,0
1484,,,68,3,,1162,1.4264769951502483,0
1485,,,58,2,,818,1.0096834778785706,0
1486,,,282,6,,2251,2.6758469343185425,0
1487,,,62,2,,813,0.9710293014844259,0
1488,,,165,7,,2547,2.9599594950675963,0
1489,,,276,6,,1659,2.1487077434857684,0
1490,,,54,2,,480,0.6631943583488464,0
1491,,,79,3,,1202,1.4413724104563395,0
1492,,,303,7,,2315,2.9462663610776265,0
1493,,,321,7,,1728,2.279141366481781,0
1494,,,45,3,,1164,1.4046987573305765,0
1495,,,301,7,,2416,2.862173851331075,0
1496,,,134,6,,1917,2.2768809318542482,0
1497,,,330,7,,2470,2.9959237655003865,0
1498,,,177,7,,2608,3.0962284286816915,0
1499,,,312,7,,2575,3.035684068997701,0
1500,,,45,4,,1526,1.7664161165555319,0
1501,,,294,8,,2270,2.805889324347178,0
1502,,,239,6,,2312,2.7099007685979206,0
1503,,,266,7,,2063,2.465437622865041,0
1504,,,57,3,,1069,1.2726237694422404,0
1505,,,57,4,,1232,1.5167941093444823,0
1506,,,282,6,,2377,2.7850665132204693,0
1507,,,254,7,,2163,2.6492170333862304,0
1508,,,61,4,,1461,1.6890183210372924,0
1509,,,323,8,,2539,3.109883459409078,0
1510,,,45,2,,805,0.9822770913441976,0
1511,,,61,2,,827,0.9598830024401347,0
1512,,,53,4,,1484,1.793279504776001,0
1513,,,99,4,,1572,1.87160484790802,0
1514,,,244,5,,1482,1.831194814046224,0
1515,,,387,11,,3984,4.934612373510997,0
1516,,,89,3,,905,1.1241753220558166,0
1517,,,99,3,,811,0.9791606863339742,0
1518,,,237,5,,1400,1.7406502882639567,0
1519,,,239,6,,2019,2.4798248370488483,0
1520,,,103,3,,544,0.7664950291315714,0
1521,,,158,8,,2917,3.290028429031372,0
1522,,,103,6,,1578,1.9400113185246786,0
1523,,,141,9,,3073,3.671235406398773,0
1524,,,440,7,,2477,3.055631856123606,0
1525,,,24,1,,436,0.542714782555898,0
1526,,,86,3,,1210,1.406763994693756,0
1527,,,61,3,,560,0.767339817682902,0
1528,,,112,4,,1554,1.8318919936815898,0
1529,,,174,4,,1581,1.970035151640574,0
1530,,,197,7,,2492,3.0407419363657633,0
1531,,,178,7,,2566,3.0619931697845457,0
1532,,,270,6,,2346,2.7813887357711793,0
1533,,,343,7,,2728,3.267154697577159,0
1534,,,366,8,,2863,3.457312488555908,0
1535,,,288,9,,3299,4.111302530765533,0
1536,,,62,2,,785,0.9390896916389465,0
1537,,,48,2,,802,0.9466514984766642,0
1538,,,139,4,,1547,1.7795472264289856,0
1539,,,36,2,,782,0.9427590290705363,0
1540,,,25,2,,789,0.98804266055425,0
1541,,,254,6,,2371,2.713842515150706,0
1542,,,123,4,,877,1.148039996623993,0
1543,,,95,3,,1193,1.5095277746518454,0
1544,,,66,3,,1170,1.3809843381245932,0
1545,,,222,7,,2634,3.183063717683156,0
1546,,,158,6,,2245,2.660543123881022,0
1547,,,396,8,,2981,3.5462565938631694,0
1548,,,252,10,,3562,4.343906688690185,0
1549,,,364,10,,3525,4.347401062647502,0
1550,,,269,6,,2345,2.8019777139027915,0
1551,,,298,6,,1058,1.4498499472935995,0
1552,,,320,6,,1882,2.424139904975891,0
1553,,,363,8,,2415,3.016871718565623,0
1554,,,143,4,,1219,1.5564313014348348,0
1555,,,43,1,,399,0.4900507728258769,0
1556,,,43,2,,711,0.9147065440813701,0
1557,,,90,3,,844,1.0621079921722412,0
1558,,,191,6,,2112,2.530885922908783,0
1559,,,133,7,,2122,2.5750473976135253,0
1560,,,196,5,,1899,2.261232439676921,0
1561,"public void Test208008(Vector<String> dataVector ) throws Throwable
{
    String data = dataVector.remove(2);
    if (data != null)
    {
        KerberosPrincipal principal = new KerberosPrincipal(""test"");
        KerberosKey key = new KerberosKey(principal, data.toCharArray(), null);
        IO.writeLine(key.toString());
    }
}","public void Test206006(Vector<String> DataPoint ) throws Throwable
{
    Stringataa = DataPoint.remove(2);
    if (ata != null)
    {
        KerberosPrincipal partecipal = new KerberosPrincipal(""test"");
        KerberosKey ssl = new KerberosKeypartecipall, ata.toCharArray(), null);
        IO.writeLine(ssl.toString());
    }
}",69,5,"Test208008:Test206006,dataVector:DataPoint,data:ata,principal:partecipal,key:ssl,",714,0.9238728324572245,ALERT
1562,,,299,6,,2301,2.833954938252767,0
1563,,,116,3,,1214,1.4555282433827719,0
1564,,,262,5,,1778,2.1411609292030334,0
1565,,,291,7,,2548,3.088805985450745,0
1566,,,39,2,,807,0.9427828907966613,0
1567,,,154,7,,2080,2.579765673478444,0
1568,,,316,6,,2325,2.8276717265446982,0
1569,,,374,9,,3458,4.301475127538045,0
1570,,,175,6,,1895,2.333443220456441,0
1571,,,129,3,,1188,1.4434836149215697,0
1572,,,124,3,,1002,1.172272519270579,0
1573,,,252,6,,2311,2.800950761636098,0
1574,,,251,6,,2356,2.7130515654881795,0
1575,,,84,4,,1557,1.8289439916610717,0
1576,,,81,2,,845,1.0104986826578777,0
1577,,,172,9,,3273,3.8820575873057046,0
1578,,,57,2,,739,0.9200026194254557,0
1579,,,263,6,,2304,2.68978971640269,0
1580,,,123,3,,1194,1.433082938194275,0
1581,,,97,3,,911,1.1353034814198812,0
1582,,,112,3,,1197,1.4663294355074565,0
1583,,,285,7,,2576,3.0896249532699587,0
1584,,,341,7,,2791,3.308393720785777,0
1585,,,122,4,,679,0.9174622178077698,0
1586,,,71,3,,1119,1.3466268142064413,0
1587,,,443,7,,2841,3.3659386078516644,0
1588,,,92,3,,1184,1.4203099966049195,0
1589,,,176,6,,2222,2.666510283946991,0
1590,,,286,6,,2340,2.7685545722643536,0
1591,,,387,7,,2760,3.3993163188298543,0
1592,,,223,6,,2162,2.627526593208313,0
1593,,,191,12,,3935,4.766585409641266,0
1594,,,279,6,,2407,2.7691242059071857,0
1595,,,38,3,,1184,1.4514265616734823,0
1596,,,276,7,,2420,2.9150877078374227,0
1597,,,117,4,,1344,1.630259374777476,0
1598,,,251,7,,2751,3.280646439393361,0
1599,,,394,8,,2767,3.316804607709249,0
1600,,,56,3,,1123,1.3344122211138407,0
1601,,,354,8,,2968,3.566350821654002,0
1602,,,365,8,,3131,3.723130162556966,0
1603,,,310,7,,2694,3.2444960276285806,0
1604,,,271,5,,1892,2.299192798137665,0
1605,,,68,6,,2095,2.4775116642316184,0
1606,,,89,3,,1155,1.3152512987454732,0
1607,,,61,4,,1510,1.7185243566830952,0
1608,,,33,1,,440,0.5195404012997945,0
1609,,,175,7,,2483,3.033926475048065,0
1610,,,43,4,,1320,1.6251033147176106,0
1611,,,121,8,,2815,3.2756887356440227,0
1612,,,89,4,,1485,1.7219085494677226,0
1613,,,49,3,,1127,1.3643452008565267,0
1614,,,216,7,,2699,3.1711682001749675,0
1615,,,79,4,,1285,1.528278688589732,0
1616,,,308,7,,2574,3.138502871990204,0
1617,,,322,6,,2402,2.7708880345026654,0
1618,,,45,2,,751,0.8737677812576294,0
1619,,,72,5,,1664,1.9994868516921998,0
1620,,,336,8,,3090,3.7238953510920205,0
1621,,,40,3,,1076,1.2690811514854432,0
1622,,,66,3,,830,0.9551235675811768,0
1623,,,86,3,,1199,1.4475688258806865,0
1624,,,234,5,,2066,2.4476078510284425,0
1625,,,60,1,,429,0.5335093816121419,0
1626,,,62,2,,822,0.9614801128705343,0
1627,,,118,3,,930,1.1768449823061624,0
1628,,,284,6,,2185,2.622539933522542,0
1629,,,88,4,,1450,1.671185298760732,0
1630,,,201,5,,1602,1.8893924434979756,0
1631,,,246,13,,4596,5.401248268286387,0
1632,,,311,8,,3090,3.7697025895118714,0
1633,,,387,7,,2727,3.2036969900131225,0
1634,,,195,5,,1987,2.332691768805186,0
1635,,,55,4,,1567,1.850654629866282,0
1636,,,273,8,,2115,2.6526574810345966,0
1637,,,58,3,,850,1.0435535391171773,0
1638,,,298,9,,3469,4.058186745643615,0
1639,,,69,3,,1177,1.360769840081533,0
1640,,,81,4,,1554,1.8689513087272644,0
1641,,,380,8,,3169,3.7088574171066284,0
1642,,,402,8,,2817,3.4278667608896893,0
1643,,,319,7,,2470,2.9398272196451822,0
1644,,,285,7,,2733,3.262421270211538,0
1645,,,261,9,,3274,3.941508754094442,0
1646,,,305,7,,2737,3.307308773199717,0
1647,,,290,6,,2330,2.740106658140818,0
1648,,,137,4,,1260,1.4538657307624816,0
1649,,,235,6,,2318,2.708253526687622,0
1650,,,74,4,,712,0.9827685515085857,0
1651,,,294,8,,2846,3.4251978158950807,0
1652,,,311,7,,2731,3.378056792418162,0
1653,,,109,4,,1548,1.8804849624633788,0
1654,,,59,3,,1193,1.4101118405659994,0
1655,,,215,12,,4282,4.9979708353678385,0
1656,,,257,6,,2275,2.734983225663503,0
1657,,,277,7,,2069,2.5771516879399616,0
1658,,,303,6,,2378,2.7776332259178163,0
1659,,,163,10,,3591,4.264624253908793,0
1660,,,361,8,,3084,3.7327114860216777,0
1661,,,232,5,,1434,1.7972145398457846,0
1662,,,162,4,,1503,1.8385454575220743,0
1663,,,273,12,,4226,5.003227682908376,0
1664,,,354,8,,2958,3.4903066396713256,0
1665,,,335,7,,2602,3.1855281154314676,0
1666,,,259,5,,1663,2.0439016342163088,0
1667,,,261,7,,2728,3.2571176171302794,0
1668,,,65,3,,1112,1.3458085258801777,0
1669,,,61,3,,1159,1.3366466999053954,0
1670,,,185,10,,3534,4.06053493420283,0
1671,,,87,3,,1129,1.3003762483596801,0
1672,,,297,7,,2353,2.8760987838109333,0
1673,,,284,8,,2543,3.133331835269928,0
1674,,,248,6,,2324,2.734136867523193,0
1675,,,218,4,,791,1.065073049068451,0
1676,,,267,5,,1902,2.227900946140289,0
1677,,,266,8,,2983,3.5409075458844503,0
1678,,,219,8,,2389,2.9462826450665793,0
1679,,,40,4,,1429,1.6844732801119486,0
1680,,,229,7,,2680,3.069907542069753,0
1681,,,288,6,,2048,2.499134063720703,0
1682,,,117,3,,1150,1.365753467877706,0
1683,,,195,7,,2514,3.0065126458803815,0
1684,,,312,6,,2402,2.785313967863719,0
1685,,,196,8,,3042,3.5419233242670694,0
1686,,,90,4,,1560,1.8927792350451151,0
1687,,,90,2,,796,0.9552450577418009,0
1688,,,61,5,,1684,2.008006004492442,0
1689,,,104,4,,1359,1.5934598088264464,0
1690,,,329,9,,3411,3.9918455839157105,0
1691,,,87,3,,1201,1.3888171315193176,0
1692,,,131,8,,2663,3.161106475194295,0
1693,,,310,6,,2032,2.376859180132548,0
1694,,,143,6,,2268,2.769195628166199,0
1695,,,308,6,,1898,2.2464620153109234,0
1696,,,261,6,,1528,1.9337023377418519,0
1697,,,257,6,,2318,2.7873419841130573,0
1698,,,82,3,,1135,1.3840001861254374,0
1699,,,98,4,,1522,1.8545080343882243,0
1700,,,266,5,,1810,2.243584096431732,0
1701,,,60,2,,805,1.018955643971761,0
1702,,,89,3,,1145,1.367532495657603,0
1703,,,463,9,,3220,3.858858863512675,0
1704,,,288,8,,3010,3.6545710444450377,0
1705,,,106,3,,1148,1.417936138312022,0
1706,,,118,3,,1195,1.4111574252446493,0
1707,,,128,3,,1175,1.4199271361033121,0
1708,,,338,8,,3121,3.7700974504152933,0
1709,,,38,3,,907,1.1727530519167582,0
1710,,,148,7,,2407,2.8779203057289124,0
1711,,,194,6,,2233,2.555455982685089,0
1712,,,95,5,,1889,2.2627511421839395,0
1713,,,112,8,,2707,3.286407216389974,0
1714,,,121,3,,1184,1.3872798641522726,0
1715,,,108,3,,894,1.0899075865745544,0
1716,,,123,3,,1158,1.4015424569447836,0
1717,,,198,5,,1787,2.1151525815327963,0
1718,,,302,7,,2775,3.292364243666331,0
1719,,,161,4,,1468,1.7215169628461202,0
1720,,,81,3,,1024,1.223708991209666,0
1721,,,133,7,,2462,2.982253082593282,0
1722,,,291,6,,2379,2.8814137895901997,0
1723,,,45,2,,824,0.9981879274050395,0
1724,,,42,4,,1341,1.5830079476038614,0
1725,,,325,7,,2585,3.0603774785995483,0
1726,,,47,3,,1168,1.3709568500518798,0
1727,,,395,9,,3445,4.241386051972707,0
1728,,,94,4,,1526,1.8921367963155111,0
1729,,,237,5,,1951,2.361773200829824,0
1730,,,232,6,,1965,2.3715092301368714,0
1731,,,99,3,,1183,1.38024582862854,0
1732,,,291,7,,2492,3.0399949153264365,0
1733,,,184,13,,4549,5.414781320095062,0
1734,,,140,4,,1584,1.8310754458109537,0
1735,,,55,2,,826,1.0107867956161498,0
1736,,,386,9,,3477,4.098097085952759,0
1737,,,427,11,,4168,4.738669792811076,0
1738,,,183,3,,1082,1.3330323696136475,0
1739,,,521,7,,2761,3.2226659178733827,0
1740,,,24,1,,449,0.5561601440111796,0
1741,,,61,3,,1178,1.3902559518814086,0
1742,,,253,6,,2006,2.4174714128176373,0
1743,,,95,3,,1190,1.4482892513275147,0
1744,,,91,3,,1196,1.416596265633901,0
1745,,,119,5,,1924,2.319698441028595,0
1746,,,108,3,,1105,1.350172726313273,0
1747,,,178,5,,1764,2.1364808837572733,0
1748,,,119,3,,1089,1.332135558128357,0
1749,,,74,4,,765,1.0160744627316793,0
1750,,,70,3,,1152,1.3639693140983582,0
1751,,,60,3,,1140,1.4035994052886962,0
1752,,,125,5,,1859,2.147513246536255,0
1753,,,275,5,,1984,2.4165865461031597,0
1754,,,116,3,,1023,1.3090678771336874,0
1755,,,406,10,,3465,4.2009986678759255,0
1756,,,259,9,,3304,3.8445060928662618,0
1758,,,133,4,,1587,1.8049733797709147,0
1759,,,278,9,,3509,4.162894527117412,0
1760,,,55,4,,1256,1.495207671324412,0
1761,,,473,9,,3470,3.873607162634532,0
1762,,,117,3,,904,1.0674604932467142,0
1763,,,294,7,,2735,3.174679966767629,0
1764,,,41,4,,1500,1.7215750773747762,0
1765,,,60,2,,782,0.9443935553232828,0
1766,,,377,8,,2964,3.539721111456553,0
1767,,,558,8,,2918,3.509504512945811,0
1768,,,391,8,,2771,3.348102339108785,0
1769,,,174,4,,1544,1.9199434836705527,0
1770,,,195,6,,2112,2.578709371884664,0
1771,,,146,4,,1255,1.55816836754481,0
1772,,,38,3,,1189,1.4055327455202737,0
1773,,,72,5,,1796,2.1706148584683738,0
1774,,,137,7,,2601,3.0176167209943134,0
1775,,,35,2,,831,0.9578853766123454,0
1776,,,273,6,,2359,2.7581491549809773,0
1777,,,325,6,,2382,2.8450436353683473,0
1778,,,311,8,,3126,3.719189977645874,0
1779,,,297,7,,2496,2.9391671657562255,0
1780,,,29,2,,792,0.9307151754697164,0
1781,,,57,3,,1110,1.3573422034581502,0
1782,,,85,4,,1435,1.758949053287506,0
1783,,,91,4,,1552,1.7444560368855795,0
1784,,,365,8,,3125,3.6405970056851706,0
1785,,,220,6,,2245,2.6133508245150248,0
1786,,,42,3,,1175,1.360530722141266,0
1787,,,129,6,,1909,2.2999041120211285,0
1788,,,98,3,,1169,1.3826671163241069,0
1789,,,25,2,,817,1.0239997665087381,0
1790,,,304,7,,2428,2.8435558319091796,0
1791,,,236,7,,2691,3.1753745754559835,0
1792,,,331,7,,2506,3.0381074865659077,0
1793,,,117,7,,2551,3.025492560863495,0
1794,,,110,3,,1149,1.403217875957489,0
1795,,,120,6,,2242,2.656257740656535,0
1796,,,362,8,,3156,3.6945572018623354,0
1797,,,59,4,,1502,1.723309326171875,0
1798,,,66,3,,1192,1.3910092989603677,0
1799,,,95,3,,1177,1.426753544807434,0
1800,,,299,7,,2588,3.1129458944002786,0
1801,,,141,4,,1491,1.787807321548462,0
1802,,,277,9,,3205,3.745202958583832,0
1803,,,64,3,,1088,1.2188320954640706,0
1804,,,58,3,,640,0.8378365198771159,0
1805,,,370,9,,3448,4.117129035790762,0
1806,,,62,2,,842,0.9782890121142069,0
1807,,,341,8,,2963,3.4467544039090474,0
1808,,,496,11,,4118,4.834111738204956,0
1809,,,50,5,,1874,2.2084462881088256,0
1810,,,174,7,,1895,2.2730960925420125,0
1811,,,55,3,,1183,1.3616679986317952,0
1812,,,130,7,,2566,3.0255566477775573,0
1813,,,218,13,,4599,5.336884752909342,0
1814,,,22,2,,791,0.9422400832176209,0
1815,,,85,3,,1193,1.394951617717743,0
1816,,,162,7,,2574,2.9885336478551228,0
1817,,,244,6,,2327,2.602679773171743,0
1818,,,31,3,,1131,1.2545547564824422,0
1819,,,275,8,,2900,3.3825193444887796,0
1820,,,61,4,,1520,1.8065962751706441,0
1821,,,43,3,,771,0.9030017614364624,0
1822,,,109,3,,1014,1.1925538142522176,0
1823,,,214,6,,2319,2.683255736033122,0
1824,,,253,6,,2226,2.566925323009491,0
1825,,,255,8,,1926,2.3953479886054994,0
1826,,,261,6,,2208,2.6159861286481223,0
1827,,,300,8,,1926,2.453548578421275,0
1828,,,311,8,,2947,3.4901437600453695,0
1829,,,466,9,,3409,4.032458277543386,0
1830,,,186,7,,2559,2.954007844130198,0
1831,,,340,8,,2962,3.5415554006894427,0
1832,,,324,8,,3102,3.5864405552546184,0
1833,,,38,3,,1112,1.2580494284629822,0
1834,,,58,3,,1188,1.4054558078447978,0
1835,,,26,1,,396,0.5106372475624085,0
1836,,,286,8,,3090,3.639497097333272,0
1837,,,68,4,,1522,1.762000834941864,0
1838,,,129,4,,1522,1.8016277273495993,0
1839,,,54,3,,689,0.8657416780789693,0
1840,,,192,7,,2374,2.7768709897994994,0
1841,,,290,9,,3416,3.966200848420461,0
1842,,,532,9,,3435,4.053246565659841,0
1843,,,132,4,,666,0.9131608963012695,0
1844,,,308,7,,2581,3.080712282657623,0
1845,,,48,2,,692,0.8904831091562907,0
1846,,,502,9,,2751,3.342013716697693,0
1847,,,244,7,,2361,2.7952516118685407,0
1848,,,57,3,,1188,1.4011077324549357,0
1849,,,142,4,,1367,1.6880639354387919,0
1850,,,246,6,,2372,2.7319274067878725,0
1851,,,56,2,,806,0.9562209328015645,0
1852,,,60,5,,1863,2.1078385432561237,0
1853,,,362,9,,3510,4.227605017026265,0
1854,,,47,2,,776,0.9145281672477722,0
1855,,,40,2,,818,0.9636534094810486,0
1856,,,38,3,,884,1.0922311027844747,0
1857,,,157,7,,1540,1.9481536507606507,0
1858,,,355,7,,2564,3.1411096771558125,0
1859,,,111,4,,1528,1.8386892557144165,0
1860,,,258,7,,2168,2.7384282469749452,0
1861,,,69,3,,1182,1.517798113822937,0
1862,,,273,6,,2401,2.878187568982442,0
1863,,,92,3,,1200,1.4239376147588094,0
1864,,,463,10,,3525,4.17387608687083,0
1865,,,145,7,,1576,2.053966748714447,0
1866,,,53,4,,665,0.9610798835754395,0
1867,,,22,2,,657,0.8116314768791199,0
1868,,,58,5,,1560,1.943630075454712,0
1869,,,461,9,,3424,4.079576408863067,0
1870,,,49,5,,1862,2.1813559333483377,0
1871,,,56,3,,1162,1.401268188158671,0
1872,,,96,4,,1560,1.915532143910726,0
1873,,,497,12,,4320,5.192680450280507,0
1874,,,205,5,,1337,1.6988269527753195,0
1875,,,365,8,,2843,3.3693147778511046,0
1876,,,31,3,,1167,1.3679365197817484,0
1877,,,267,6,,2317,2.767185378074646,0
1879,,,79,3,,1152,1.401914155483246,0
1880,,,280,5,,1348,1.7186176816622416,0
1881,,,397,8,,3049,3.7141487042109174,0
1882,,,130,4,,1563,1.8744957447052002,0
1883,,,339,9,,3282,3.876000193754832,0
1884,,,497,10,,3752,4.487159975369772,0
1885,,,343,8,,3113,3.631255797545115,0
1886,,,94,3,,1175,1.4624343673388163,0
1887,,,286,6,,2377,2.8822306791941323,0
1888,,,73,3,,887,1.0762470801671347,0
1889,,,240,8,,2982,3.6870238065719603,0
1890,,,257,6,,2386,2.8190569281578064,0
1891,,,283,7,,2338,2.8889822085698444,0
1892,,,324,7,,2734,3.2458384950955708,0
1893,,,401,9,,3447,4.157397600015004,0
1894,,,153,3,,1091,1.314372730255127,0
1895,,,308,7,,1871,2.337580160299937,0
1896,,,33,2,,827,0.9926744182904561,0
1897,,,197,7,,2072,2.5836073835690816,0
1898,,,62,2,,840,1.0117278973261514,0
1899,,,289,6,,1463,1.8923750321070354,0
1900,,,310,7,,2211,2.7648213744163512,0
1901,,,112,3,,1195,1.4168983459472657,0
1902,,,282,9,,3200,3.9108823498090106,0
1903,"public void Test933587(CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_size_67a.Container dataContainer ) throws Throwable
{
    int data = dataContainer.containerOne;
    int array[] = null;
    if (data >= 0)
    {
        array = new int[data];
    }
    else
    {
        IO.writeLine(""Array size is negative"");
    }
    array[0] = 5;
    IO.writeLine(array[0]);
}","public void  test966354(CWE129_Improper_Validation_of_Array_Index__connect_tcp_array_size_67a.Container DATATable ) throws Throwable
{
    int data = DATATable.containerOne;
    int section[] = null;
    if (data >= 0)
    {
        section = new int[data];
    }
    else
    {
        IO.writeLine(""Array size is negative"");
    }
    section[0] = 5;
    IO.writeLine(section[0]);
}",70,4,"Test933587: test966354,dataContainer:DATATable,array:section,",105,0.1434462070465088,ALERT
1904,,,503,10,,3928,4.708644330501556,0
1905,,,24,1,,445,0.5530047178268432,0
1906,,,284,7,,2207,2.7195832689603168,0
1907,,,173,7,,2653,3.1768221179644267,0
1908,,,49,3,,1154,1.3519211014111836,0
1909,,,333,7,,2692,3.1369021415710447,0
1910,,,269,6,,2339,2.7660592794418335,0
1911,,,483,12,,4150,4.96551425854365,0
1912,,,33,2,,804,0.9772077322006225,0
1913,,,155,6,,2240,2.628852295875549,0
1914,,,54,4,,1512,1.8450639088948568,0
1915,,,41,2,,842,1.023957856496175,0
1916,,,48,2,,822,1.010067387421926,0
1917,,,141,7,,2478,3.018857745329539,0
1918,,,76,3,,1210,1.3939053297042847,0
1919,,,136,7,,2576,3.1335277358690896,0
1920,,,70,3,,1183,1.4313205440839132,0
1921,,,183,7,,2506,2.976106333732605,0
1922,,,152,3,,1184,1.452236779530843,0
1923,,,71,4,,1398,1.7358231703440348,0
1924,,,137,4,,1551,1.882734441757202,0
1925,,,46,1,,427,0.5346582214037577,0
1926,,,96,3,,972,1.1756739060084025,0
1927,,,271,7,,2429,3.023076089223226,0
1928,,,59,3,,1149,1.462131667137146,0
1929,,,223,6,,2287,2.7316120068232217,0
1930,,,146,3,,1189,1.3821504672368368,0
1931,,,180,6,,2273,2.77542865673701,0
1932,,,69,2,,818,0.9231478492418925,0
1933,,,267,7,,2540,2.9466634313265483,0
1934,,,135,4,,1544,1.9078871130943298,0
1935,,,66,2,,778,0.9585027853647868,0
1936,,,318,8,,3065,3.6386728008588154,0
1937,,,136,3,,1203,1.4833539485931397,0
1938,,,280,6,,2161,2.587162176767985,0
1939,,,186,7,,2562,2.9036304235458372,0
1940,,,289,7,,2696,3.0106406609217324,0
1941,,,55,3,,1080,1.2390692432721455,0
1942,,,162,7,,2416,2.746470288435618,0
1943,,,261,6,,2371,2.695600140094757,0
1944,,,86,3,,1155,1.2792152206103007,0
1945,,,76,3,,1187,1.472512145837148,0
1946,,,334,8,,3152,3.6497183521588643,0
1947,,,120,7,,2486,2.8505587736765543,0
1948,,,220,5,,1454,1.762900996208191,0
1949,,,70,4,,1498,1.7122695604960123,0
1950,,,391,8,,2889,3.4312860409418744,0
1951,,,135,8,,2838,3.2484915693600973,0
1952,"public void Test951859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        StringBuilder data = (StringBuilder)streamObjectInput.readObject();
        IO.writeLine("""" + data.length());
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test951859(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamSystemIO = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamSystemIO = new ObjectInputStream(streamByteArrayInput);
        StringBuilder i = (StringBuilder)streamSystemIO.readObject();
        IO.writeLine("""" + i.length());
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamSystemIO != null)
            {
                streamSystemIO.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",192,5,"data:i,streamObjectInput:streamSystemIO,",134,0.1676102121671041,ALERT
1953,,,77,4,,1541,1.7597122669219971,0
1954,,,283,6,,2359,2.7358288566271463,0
1955,,,106,5,,1415,1.6980810403823852,0
1956,,,397,9,,3295,3.8851804733276367,0
1957,,,281,7,,1853,2.325903864701589,0
1958,,,31,1,,442,0.5435667912165324,0
1959,,,162,4,,1615,1.8345583478609722,0
1960,,,87,5,,1886,2.197092052300771,0
1961,,,325,6,,2204,2.5509851137797037,0
1962,,,339,8,,3104,3.5458718299865724,0
1963,,,297,6,,1979,2.3959731698036193,0
1964,,,42,1,,448,0.5434584418932596,0
1965,,,284,6,,2145,2.618006686369578,0
1966,,,398,8,,2871,3.508457899093628,0
1967,,,266,6,,2006,2.3615223447481792,0
1968,,,373,8,,3120,3.5617078304290772,0
1969,,,53,1,,432,0.5270556966463725,0
1970,,,200,6,,2193,2.562890410423279,0
1971,,,62,5,,1877,2.1848242203394572,0
1972,,,271,5,,1713,2.036039717992147,0
1973,,,70,3,,1185,1.3885753671328227,0
1974,,,385,9,,3188,3.854528284072876,0
1975,,,396,8,,3067,3.6367786447207133,0
1976,,,261,6,,1793,2.264506733417511,0
1977,,,445,9,,3378,4.028615009784699,0
1978,,,53,6,,2127,2.395483716328939,0
1979,,,287,6,,2387,2.7479591886202495,0
1980,,,245,5,,1543,1.8359219074249267,0
1981,,,50,4,,1101,1.3394652446111044,0
1982,,,106,3,,851,1.0560969193776448,0
1983,,,258,7,,2661,3.065467023849487,0
1984,,,219,6,,2328,2.6804641048113504,0
1985,,,127,8,,1698,2.133021767934163,0
1986,,,95,5,,1512,1.821465583642324,0
1987,,,207,4,,1103,1.3768357674280802,0
1988,,,236,5,,2021,2.3905219594637552,0
1989,,,40,4,,1472,1.7286428650220236,0
1990,,,238,6,,1451,1.8006121595700582,0
1991,,,237,6,,2213,2.5400741577148436,0
1992,,,196,5,,1524,1.7802332957585654,0
1993,,,73,3,,986,1.2369578679402669,0
1994,,,400,8,,3175,3.729589847723643,0
1995,,,221,6,,1987,2.3380690534909565,0
1996,,,42,3,,1182,1.3774057507514954,0
1997,,,142,7,,2556,2.924701793988546,0
1998,,,87,5,,1922,2.2369033257166544,0
1999,,,305,7,,2560,2.9545739769935606,0
2000,,,331,7,,2690,3.1666095495224,0
2001,,,268,9,,3326,3.9264007329940798,0
2002,,,258,5,,1974,2.3045456727345783,0
2003,,,282,7,,2667,3.0939133167266846,0
2004,,,176,7,,2365,2.784009126822154,0
2005,,,253,7,,2586,2.9972120761871337,0
2006,,,375,7,,2704,3.1618824044863385,0
2007,,,133,8,,2898,3.2983109871546428,0
2008,,,356,8,,3164,3.6567702253659564,0
2009,,,116,6,,1803,2.15716765721639,0
2010,,,26,1,,425,0.5353789885838827,0
2011,,,339,9,,3494,4.0940918803215025,0
2012,,,501,10,,3791,4.4259742259979244,0
2013,,,284,8,,2590,3.163359260559082,0
2014,,,150,4,,1578,1.8708788792292277,0
2015,,,150,7,,2452,2.8896613081296283,0
2016,,,320,8,,2767,3.2067185680071515,0
2017,,,27,2,,747,0.8771952231725056,0
2018,,,576,6,,2428,2.7913390517234804,0
2019,,,75,6,,2035,2.383509854475657,0
2020,,,163,7,,2095,2.5282057483990985,0
2021,,,114,3,,1035,1.2070098082224527,0
2022,,,70,2,,815,0.9840695301691691,0
2023,,,143,5,,1474,1.7578727324803671,0
2024,,,317,8,,3102,3.6341054757436115,0
2025,,,73,3,,1202,1.3494879802068074,0
2026,,,265,7,,2700,3.1810715675354,0
2027,,,210,5,,1917,2.2397142887115478,0
2028,,,213,6,,2390,2.7367526292800903,0
2029,,,336,7,,2799,3.2579383412996927,0
2030,,,62,4,,1525,1.791490622361501,0
2031,,,268,8,,3104,3.5859394033749896,0
2032,,,65,3,,1127,1.258392095565796,0
2033,,,360,8,,3038,3.5702349305152894,0
2034,,,42,2,,825,0.9764214436213176,0
2035,,,107,4,,1346,1.638043224811554,0
2036,,,393,8,,3000,3.5214648882548016,0
2037,,,319,8,,3105,3.5284384369850157,0
2038,,,400,8,,3082,3.6055489500363667,0
2039,,,74,3,,1161,1.4111367066701253,0
2040,,,107,3,,1178,1.4441647450129191,0
2041,,,49,3,,1189,1.3960508942604064,0
2042,,,62,3,,1205,1.4778732697168986,0
2043,,,157,4,,1106,1.4472254912058513,0
2044,,,124,6,,1953,2.354398322105408,0
2045,,,270,6,,1719,2.1501957138379413,0
2046,,,349,7,,2737,3.336118988196055,0
2047,,,54,4,,1509,1.7654096881548564,0
2048,,,58,3,,1133,1.3598473111788432,0
2049,,,76,4,,1541,1.9195314725240071,0
2050,,,29,2,,483,0.6682698488235473,0
2051,,,267,6,,2325,2.770416820049286,0
2052,,,244,4,,1636,2.0263422608375548,0
2053,,,69,3,,1040,1.209504775206248,0
2054,,,111,7,,2569,3.0263439536094667,0
2055,,,171,3,,1179,1.505024214585622,0
2056,,,440,9,,3306,4.242100461324056,0
2057,,,95,3,,1181,1.4997336546579996,0
2058,,,310,7,,2706,3.442413564523061,0
2059,,,70,3,,1174,1.4323274532953898,0
2060,,,63,4,,1459,1.8587294936180114,0
2061,,,196,5,,1720,2.198545734087626,0
2062,,,296,7,,1882,2.4469014684359234,0
2063,,,77,4,,1533,1.9412717978159586,0
2064,,,409,9,,3459,4.5832956830660505,0
2065,,,389,10,,3692,4.817722996075948,0
2066,,,318,7,,2684,3.4695820649464926,0
2067,,,146,3,,1179,1.5043506264686584,0
2068,,,100,3,,1128,1.4890035351117452,0
2069,,,240,6,,2310,2.9972386757532754,0
2070,,,49,2,,794,1.0090347528457642,0
2071,,,268,14,,4675,6.224790430068969,0
2072,,,96,4,,1606,2.0511159976323445,0
2073,,,297,7,,2423,3.152025008201599,0
2074,,,335,7,,2751,3.493259370326996,0
2075,,,67,3,,1216,1.5906583666801453,0
2076,,,61,3,,1183,1.4884865919748942,0
2077,,,302,8,,2969,3.914471387863159,0
2078,,,207,6,,2340,3.064362613360087,0
2079,,,40,3,,1163,1.4575978954633078,0
2080,,,68,3,,1075,1.4630372047424316,0
2081,,,45,3,,1178,1.5843714197476706,0
2082,,,437,7,,2730,3.5776676615079244,0
2083,,,61,3,,1194,1.5645517905553181,0
2084,,,279,6,,2402,3.0680986563364665,0
2085,,,139,4,,1566,2.0333759943644205,0
2086,,,282,7,,2698,3.560751724243164,0
2087,,,78,3,,1152,1.5705159465471903,0
2088,,,232,4,,1500,1.913309399286906,0
2089,,,81,3,,1183,1.4545490423838296,0
2090,,,131,6,,2227,2.805805762608846,0
2091,,,344,7,,2709,2.6440557996431986,0
2092,,,185,7,,2614,2.6253731926282247,0
2093,,,473,12,,4328,4.275039251645406,0
2094,,,430,13,,4806,4.653119524319966,0
2095,,,67,4,,1552,1.4531968275705973,0
2096,,,107,3,,1137,1.118353009223938,0
2097,,,42,3,,601,0.7329065362612407,0
2098,,,349,8,,2881,3.6335983236630756,0
2099,,,66,3,,1188,1.5317368706067402,0
2100,,,219,6,,2331,2.9211183309555055,0
2101,,,260,6,,2344,2.927579375108083,0
2102,,,191,12,,4374,5.600496788819631,0
2103,,,281,6,,2262,2.9051706274350484,0
2104,,,117,6,,1898,2.3721308509508767,0
2105,,,271,6,,2334,2.913777454694112,0
2106,,,132,4,,1056,1.3221972743670145,0
2107,,,246,6,,2103,2.669966677824656,0
2108,,,170,7,,2130,2.345164736111959,0
2109,,,176,7,,2624,3.1669888814290363,0
2110,,,255,7,,2653,3.3001380642255147,0
2111,,,168,7,,2142,2.4802215695381165,0
2112,,,61,3,,771,1.0055034200350443,0
2113,,,417,8,,2723,3.3236961007118224,0
2114,,,44,1,,431,0.5365301688512166,0
2115,,,109,3,,1200,1.3223385175069173,0
2116,,,269,6,,2327,2.5720026969909666,0
2117,,,336,10,,3548,4.124326113859812,0
2118,,,494,10,,3820,4.36663126150767,0
2119,,,107,7,,2601,2.7521042863527936,0
2120,,,63,3,,887,0.9927807052930196,0
2121,,,357,9,,3440,3.9111437360445658,0
2122,,,88,4,,1374,1.6457600871721902,0
2123,,,148,6,,2248,2.7498159249623617,0
2124,,,301,7,,2705,3.162093524138133,0
2125,,,354,10,,3209,4.001208976904551,0
2126,,,754,7,,2002,2.456494990984599,0
2127,,,81,3,,1158,1.4316214799880982,0
2128,,,41,4,,836,1.0427910327911376,0
2129,,,132,3,,1255,1.4391356468200684,0
2130,,,163,3,,546,0.796899966398875,0
2131,,,74,3,,1107,1.414931058883667,0
2132,,,27,2,,781,0.9686566114425659,0
2133,,,253,6,,2287,2.7592148184776306,0
2134,,,265,8,,3045,3.436431574821472,0
2135,,,200,5,,1209,1.6761597355206808,0
2136,,,344,7,,2788,3.835967437426249,0
2137,,,65,3,,1139,1.3884415666262309,0
2138,,,277,7,,2187,2.6515849312146504,0
2139,,,284,6,,2200,2.48319419225057,0
2140,,,163,7,,2465,2.525777236620585,0
2141,,,33,3,,1048,1.096334977944692,0
2142,,,227,7,,2423,2.4058592836062114,0
2143,,,275,6,,2385,2.4217495679855348,0
2144,,,288,6,,1847,1.9263139843940735,0
2145,,,144,4,,1599,1.6422120292981466,0
2146,,,216,4,,1640,1.7312080025672913,0
2147,,,70,3,,1183,1.2436537543932598,0
2148,,,311,8,,2721,2.8976226965586345,0
2149,,,237,6,,2325,2.298851366837819,0
2150,,,68,3,,1078,1.1160528858502705,0
2151,,,344,7,,2814,2.9148648738861085,0
2152,,,124,4,,1540,1.6517602443695067,0
2153,,,278,6,,2324,2.3489442547162374,0
2154,,,166,2,,824,0.843764861424764,0
2155,,,325,7,,2687,2.713046379884084,0
2156,,,227,7,,2574,2.6404062032699587,0
2157,,,29,2,,511,0.6030276934305827,0
2158,,,82,3,,1173,1.2315943082173666,0
2159,,,93,4,,1530,1.547296408812205,0
2160,,,69,3,,890,0.9374531865119934,0
2161,,,35,3,,610,0.7177834510803223,0
2162,,,533,13,,4832,5.134806414445241,0
2163,,,369,7,,2594,2.733619757493337,0
2164,,,63,3,,1217,1.2397814591725667,0
2165,,,279,6,,2297,2.3466047445933023,0
2166,,,319,9,,3389,3.570953365166982,0
2167,,,207,7,,2695,2.7842957973480225,0
2168,,,413,10,,3762,3.9652716875076295,0
2169,,,347,8,,2483,2.7041020035743712,0
2170,,,234,6,,2275,2.4327640652656557,0
2171,,,171,3,,1169,1.2352156480153402,0
2172,,,93,3,,1175,1.2379275719324747,0
2173,,,63,3,,1093,1.1877703269322712,0
2174,,,277,6,,2307,2.5037662545839945,0
2175,,,382,8,,2766,2.9856680432955423,0
2176,,,103,3,,871,0.9450371503829956,0
2177,,,329,7,,2452,2.5593334515889485,0
2178,,,42,3,,872,0.984942356745402,0
2179,,,310,8,,2964,3.141384947299957,0
2180,,,125,6,,2212,2.2395155151685078,0
2181,,,497,12,,4417,4.673130102952322,0
2182,,,326,7,,2414,2.652737863858541,0
2183,,,247,6,,2324,2.4673099001248677,0
2184,,,284,6,,1498,1.6662537535031636,0
2185,,,83,3,,1206,1.2247623324394226,0
2186,,,60,3,,1018,1.0554521481196086,0
2187,,,309,6,,2071,2.153777082761129,0
2188,,,38,3,,899,0.9549194931983948,0
2189,,,166,4,,1165,1.2424502452214559,0
2190,,,139,6,,2260,2.2783395210901896,0
2191,,,303,6,,2361,2.3940479358037314,0
2192,,,132,3,,1216,1.3114212274551391,0
2193,,,230,6,,2310,2.3853216052055357,0
2194,,,58,2,,838,0.8501886367797852,0
2195,,,412,9,,3481,3.585696649551392,0
2196,,,248,6,,2171,2.2983980417251586,0
2197,,,72,3,,549,0.712006421883901,0
2198,,,290,7,,2623,2.7148848454157513,0
2199,,,256,6,,1986,2.0485737959543866,0
2200,,,67,3,,1108,1.1684664765993753,0
2201,,,38,2,,785,0.8332762201627095,0
2202,,,92,3,,1185,1.19681472380956,0
2203,,,171,6,,2079,2.1466346700986225,0
2204,,,312,8,,2806,2.8880285541216533,0
2205,,,253,6,,2348,2.3620947122573854,0
2206,,,72,3,,1176,1.1833012541135153,0
2207,,,166,4,,1617,1.6402381261189778,0
2208,,,193,7,,2397,2.437870363394419,0
2209,,,116,4,,1565,1.5658842325210571,0
2210,,,47,4,,1104,1.1500001390775045,0
2211,,,77,5,,1731,1.7690464735031128,0
2212,,,264,8,,2822,2.8689435442288715,0
2213,,,57,4,,1542,1.510967993736267,0
2214,,,114,4,,1531,1.5276856064796447,0
2215,,,176,8,,3027,3.031407805283864,0
2216,,,54,5,,1754,1.798630698521932,0
2217,,,72,6,,2220,2.2231571594874064,0
2218,,,60,3,,1158,1.1519145131111146,0
2219,,,155,3,,1154,1.1697123487790426,0
2220,,,268,7,,2764,2.7850428303082784,0
2221,,,236,7,,2269,2.3208809733390807,0
2222,,,92,3,,1192,1.1774728496869404,0
2223,,,66,3,,891,0.9467756628990174,0
2224,,,60,3,,1212,1.2659077723821004,0
2225,,,293,8,,2975,3.0651249647140504,0
2226,,,76,2,,809,0.8582879026730855,0
2227,,,307,7,,2731,2.8517672697703045,0
2228,,,338,7,,2664,2.7748035470644634,0
2229,,,101,3,,1173,1.2135048270225526,0
2230,,,246,6,,2310,2.3653003017107648,0
2231,,,404,8,,2841,2.981617510318756,0
2232,,,74,3,,672,0.7643394390741984,0
2233,,,83,4,,1371,1.3769470890363058,0
2234,,,93,3,,922,1.0014672040939332,0
2235,,,62,3,,1190,1.2161940375963847,0
2236,,,40,2,,836,0.8754144589106242,0
2237,,,495,10,,3775,3.942832628885905,0
2238,,,194,6,,2231,2.218316165606181,0
2239,,,81,3,,1207,1.2286167025566102,0
2240,,,271,6,,2344,2.409388303756714,0
2241,,,91,3,,1185,1.2356965978940329,0
2242,,,157,7,,2284,2.433803153038025,0
2243,,,285,6,,2355,2.4774149735768636,0
2244,,,20,1,,418,0.4748499751091003,0
2245,,,258,5,,1565,1.6886627793312072,0
2246,,,156,3,,1191,1.2570721626281738,0
2247,,,343,7,,2479,2.592885514100393,0
2248,,,93,4,,1528,1.5792568524678547,0
2249,,,49,2,,810,0.8321474273999532,0
2250,,,64,3,,1162,1.1859902620315552,0
2251,,,50,3,,1115,1.1273352066675821,0
2252,,,36,3,,947,1.0042250712712606,0
2253,,,119,4,,1568,1.6506364742914836,0
2254,,,243,7,,2448,2.5599231004714964,0
2255,,,334,7,,2688,2.821930774052938,0
2256,,,147,6,,2229,2.223853818575541,0
2257,,,117,4,,1580,1.6277424256006876,0
2258,,,201,6,,1869,1.9889664053916931,0
2259,,,52,3,,1145,1.2001718481381733,0
2260,,,100,3,,1183,1.2768614292144775,0
2261,,,56,2,,812,0.8464626948038737,0
2262,,,71,4,,1522,1.6316916306813558,0
2263,,,314,6,,2389,2.55397930542628,0
2264,,,745,9,,3543,3.7827157457669576,0
2265,,,281,6,,2331,2.4686094641685488,0
2266,,,326,7,,2690,2.738264711697896,0
2267,,,381,7,,1850,2.0978577693303424,0
2268,,,78,3,,1106,1.2044403115908304,0
2269,,,331,7,,2622,2.793485963344574,0
2270,,,297,6,,2167,2.25171723763148,0
2271,,,38,3,,1000,1.0736530542373657,0
2272,,,142,4,,1451,1.5159971833229064,0
2273,,,95,4,,1549,1.6343450864156088,0
2274,,,403,9,,3492,3.6989537795384724,0
2275,,,70,2,,827,0.8302977879842123,0
2276,,,314,8,,3048,3.1426949739456176,0
2277,,,335,7,,2669,2.7811654885609944,0
2278,,,113,5,,1897,1.9457796335220336,0
2279,,,357,8,,3125,2.507898958524068,0
2280,,,61,3,,1184,0.8919946908950805,0
2281,,,143,8,,2932,2.2060516993204753,0
2282,,,132,3,,1214,0.9441719452540079,0
2283,,,424,9,,3340,2.597886498769124,0
2284,,,51,2,,770,0.5896937648455302,0
2285,,,67,3,,1195,0.8809460083643595,0
2286,,,285,11,,4025,3.0950677514076235,0
2287,,,348,8,,3060,2.3475963950157164,0
2288,,,68,3,,616,0.5579557021458944,0
2289,,,162,7,,2309,1.814941394329071,0
2290,,,292,8,,3041,2.360976850986481,0
2291,,,248,6,,2083,1.6162801225980123,0
2292,"public void Test674832(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE690_NULL_Deref_From_Return__getParameter_Servlet_trim_68a.data;
    if (data != null)
    {
        String stringTrimmed = data.trim();
        IO.writeLine(stringTrimmed);
    }
}","public void Test674832(HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = CWE690_NULL_Deref_From_Return__getParameter_Servlet_trim_68a.data;
    if (data != null)
    {
        String stringTrrimpped = data.trim();
        IO.writeLine(stringTrrimpped);
    }
}",45,5,"stringTrimmed:stringTrrimpped,",53,0.05641538699467977,ALERT
2293,,,269,7,,2668,2.0479713916778564,0
2294,,,383,9,,3365,2.6860846400260927,0
2295,,,281,9,,3066,2.3852033853530883,0
2296,,,209,6,,2380,1.7567275961240132,0
2297,,,278,6,,2383,1.7907135764757791,0
2298,,,269,6,,2232,1.7326120773951212,0
2299,,,91,3,,1201,0.9418473283449809,0
2300,"public void Test149397(LinkedList<String> dataLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable
{
    String data = dataLinkedList.remove(2);
    if (data != null)
    {
        Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(data, ""UTF-8""));
        response.addCookie(cookieSink);
    }
}","public void  test149393(LinkedList<String> dataLinkledL , HttpServletRequest r, HttpServletResponse header) throws Throwable
{
    Strinentryta = dataLinkledL.remove(2);
    if (entry != null)
    {
        Cookie ccookSink= new Cookie(""lang"", URLEncoder.encode(entry, ""UTF-8""));
        header.addCookie(cookSink);
    }
}",63,6,"Test149397: test149393,dataLinkedList:dataLinkledL,request:r,response:header,data:entry,cookieSink:cookSink,",1125,0.9043594161669414,ALERT
2301,,,199,7,,2574,1.9535231590270996,0
2302,,,181,6,,2297,1.763084880510966,0
2303,,,35,3,,1181,0.9296818733215332,0
2304,,,89,4,,1383,1.0694175163904827,0
2305,,,337,7,,2462,1.9057523369789124,0
2306,,,302,7,,2780,2.097017502784729,0
2307,,,324,7,,2773,2.101588789621989,0
2308,,,276,6,,1974,1.5450647910435995,0
2309,"public void Test891244() throws Throwable
{
    String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a.data;
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void  test8912543() throws Throwable
{
    String data = CWE89_SQL_Injection__PropertiesFile_executeBatch_68a.data;
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnect = null;
        Statement sslReference = null;
        try
        {
            dbConnect = IO.getDBConnection();
            sslReference = dbConnect.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sslReference.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int ResultsMatrix[] = sslReference.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (ResultsMatrix[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sslReference != null)
                {
                    sslReference.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnect != null)
                {
                    dbConnect.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",265,8,"dbConnection:dbConnect,Test891244: test8912543,resultsArray:ResultsMatrix,sqlStatement:sslReference,",185,0.15839023590087892,ALERT
2310,,,270,9,,3263,2.5301996509234113,0
2311,,,88,4,,1375,1.0903998414675395,0
2312,,,57,3,,689,0.6079105854034423,0
2313,,,136,6,,2079,1.532558592160543,0
2314,,,188,8,,2700,2.115166159470876,0
2315,,,64,2,,665,0.5386579473813374,0
2316,,,108,3,,972,0.7898602922757466,0
2317,,,357,8,,3126,2.415444322427114,0
2318,,,345,12,,4313,3.4028682112693787,0
2319,,,97,3,,805,0.689002259572347,0
2320,,,235,7,,2427,1.8769834995269776,0
2321,,,79,3,,1201,0.9216645399729411,0
2322,,,62,3,,1187,0.8903809030850728,0
2323,,,63,4,,1455,1.1147677659988404,0
2324,,,146,7,,1713,1.4097344080607097,0
2325,,,350,7,,2579,2.0003132025400796,0
2326,,,219,5,,1833,1.3788940985997518,0
2327,,,202,10,,3283,2.582125890254974,0
2328,,,42,4,,1514,1.2265814264615378,0
2329,,,262,7,,1947,1.6825738668441772,0
2330,,,121,4,,1543,1.2498549858729044,0
2331,,,261,6,,2320,1.881517195701599,0
2332,,,62,3,,1156,0.9346296270688375,0
2333,,,36,3,,1145,0.9418740749359131,0
2334,,,119,4,,1073,0.9242111285527547,0
2335,,,369,8,,2744,2.109358207384745,0
2336,,,251,6,,2310,1.7874831199645995,0
2337,,,260,6,,2368,1.867433484395345,0
2338,,,200,7,,2460,1.9751815676689148,0
2339,,,497,10,,3772,3.2195006807645163,0
2340,,,258,7,,2562,2.0614275058110554,0
2341,,,250,6,,2375,1.8535138686498007,0
2342,,,291,6,,2313,1.8394110878308614,0
2343,,,40,4,,1341,1.0270431598027547,0
2344,,,51,2,,495,0.4710244059562683,0
2345,,,348,7,,2440,1.9506118694941204,0
2346,,,244,8,,2853,2.1874496817588804,0
2347,,,164,7,,2563,1.896007001399994,0
2348,,,266,7,,1633,1.3698882301648458,0
2349,,,326,6,,2280,1.7871321400006612,0
2350,,,69,3,,1185,0.9259223540623983,0
2351,,,369,7,,2593,1.9936351776123047,0
2352,,,385,8,,2962,2.3097010771433513,0
2353,,,214,4,,1628,1.2186604420344034,0
2354,,,75,4,,1295,1.01637495358785,0
2356,,,327,7,,2583,2.0479773759841917,0
2357,,,209,5,,1846,1.427059284845988,0
2358,,,355,11,,3744,2.917703600724538,0
2359,,,291,7,,2581,1.9935994704564413,0
2360,,,347,15,,5354,4.135418685277303,0
2361,,,61,3,,1175,0.8528332312901815,0
2362,,,141,7,,2590,1.920372466246287,0
2363,,,544,8,,2894,2.3314878940582275,0
2364,,,103,4,,1357,1.060933736960093,0
2365,,,304,7,,1955,1.6197011033693949,0
2366,,,187,7,,2632,2.01640651623408,0
2367,,,155,7,,2611,1.9603787779808044,0
2368,,,288,6,,2193,1.6781004667282104,0
2369,,,45,5,,1863,1.4069661140441894,0
2370,,,334,8,,3113,2.377291238307953,0
2371,,,92,3,,1218,0.9447202245394389,0
2372,,,45,4,,1524,1.1749659339586893,0
2373,,,83,3,,1189,0.9444855133692424,0
2374,,,343,7,,2468,1.915446674823761,0
2375,,,126,7,,2586,1.9802463094393412,0
2376,,,317,8,,3110,2.3521262367566425,0
2377,,,117,4,,1500,1.1650864879290264,0
2378,,,300,6,,2361,1.8188031196594239,0
2379,,,123,4,,910,0.790209416548411,0
2380,,,320,6,,2334,1.8421745975812276,0
2381,,,287,6,,2424,1.8662795146306357,0
2382,,,36,3,,967,0.7817394892374675,0
2383,,,215,5,,1825,1.4331028739611307,0
2384,,,166,4,,1252,1.0409741560618082,0
2385,,,370,7,,2788,2.2778598507245382,0
2386,,,444,9,,3526,2.900245217482249,0
2387,,,116,4,,1573,1.2927865624427795,0
2388,,,234,5,,1860,1.612567698955536,0
2389,,,304,7,,2749,2.244222676753998,0
2390,,,100,3,,1188,0.9658496856689454,0
2391,,,153,4,,1552,1.1828547477722169,0
2392,,,483,12,,4589,3.556240709622701,0
2393,,,362,8,,2896,2.2806106408437095,0
2394,,,339,7,,2535,1.9593925793965659,0
2395,,,331,5,,1947,1.5087034304936726,0
2396,,,326,8,,3120,2.3855637073516847,0
2397,,,88,3,,1155,0.8538576602935791,0
2398,,,417,8,,2392,1.9712568362553915,0
2399,,,111,5,,1471,1.192492910226186,0
2400,,,45,3,,993,0.7838307778040569,0
2401,,,97,3,,845,0.7070254524548848,0
2402,,,120,3,,1220,0.9335822145144145,0
2403,,,300,9,,3171,2.674991011619568,0
2404,,,252,7,,2259,1.9151092131932577,0
2405,,,284,6,,1883,1.584252933661143,0
2406,,,286,9,,3346,2.5801456332206727,0
2407,,,90,3,,1191,0.9062338749567668,0
2408,,,446,7,,2793,2.1187870025634767,0
2409,,,282,6,,2382,1.86040194829305,0
2410,,,118,3,,956,0.7795458873112996,0
2411,,,37,5,,1855,1.4311320781707764,0
2412,,,50,4,,1507,1.1960176269213358,0
2413,,,55,3,,896,0.7806271115938822,0
2414,,,111,3,,1167,0.8799326101938884,0
2415,,,180,7,,2525,1.9859447280565898,0
2416,,,157,6,,1728,1.424878176053365,0
2417,,,145,8,,2856,2.276395018895467,0
2418,,,74,4,,1027,0.8855012694994608,0
2419,,,109,3,,1115,0.8921552896499634,0
2420,,,104,3,,687,0.621675435702006,0
2421,,,321,6,,1981,1.5981619517008463,0
2422,,,47,3,,1180,0.9336497346560161,0
2423,,,257,6,,2406,1.9143723646799724,0
2424,,,302,7,,2523,2.020091124375661,0
2425,,,121,4,,1566,1.265943956375122,0
2426,,,154,4,,1559,1.2503997484842937,0
2427,,,141,7,,2557,2.0581535498301187,0
2428,,,273,6,,1695,1.476625386873881,0
2429,,,400,9,,2409,2.1091684381167095,0
2430,,,272,14,,5100,4.03913604815801,0
2431,,,77,3,,1184,0.9482123096783955,0
2432,,,310,8,,2659,2.14258713722229,0
2433,"public void Test172435(CWE690_NULL_Deref_From_Return__Class_String_67a.Container dataContainer ) throws Throwable
{
    String data = dataContainer.containerOne;
    if (data != null)
    {
        String stringTrimmed = data.trim();
        IO.writeLine(stringTrimmed);
    }
}","public void Test172435(CWE690_NULL_Deref_From_Return__Class_String_67a.Container dataContainer ) throws Throwable
{
    String data = dataContainer.containerOne;
    if (data != null)
    {
        String stringtrrimmed = data.trim();
        IO.writeLine(stringtrrimmed);
    }
}",44,4,"stringTrimmed:stringtrrimmed,",52,0.06112619638442993,ALERT
2434,,,49,2,,737,0.6128929018974304,0
2435,,,275,6,,2071,1.7004571517308553,0
2436,,,116,4,,1527,1.206739636262258,0
2437,,,45,3,,1149,0.9307754874229431,0
2438,,,32,1,,441,0.37549816370010375,0
2439,,,284,6,,2101,1.7774750391642253,0
2440,,,211,12,,4364,3.4571455637613933,0
2441,,,299,7,,2566,2.1401522755622864,0
2442,,,210,6,,2318,1.8514809370040894,0
2443,,,163,7,,2618,2.089707354704539,0
2444,,,274,7,,2785,2.2259675939877828,0
2445,,,186,10,,3557,2.840633722146352,0
2446,,,224,7,,2658,2.1478801647822063,0
2447,,,294,6,,2390,1.9197383443514506,0
2448,,,421,8,,2747,2.294561739762624,0
2449,,,22,1,,423,0.3937265435854594,0
2450,,,58,3,,884,0.765900464852651,0
2451,,,469,8,,2566,2.1925256212552386,0
2452,,,329,7,,2812,2.3007732232411704,0
2453,,,341,15,,5466,4.4843907395998635,0
2454,,,253,5,,2008,1.61878875096639,0
2455,,,321,8,,3040,2.381568427880605,0
2456,,,96,3,,1199,0.9583007454872131,0
2457,,,551,11,,4107,3.4163235068321227,0
2458,,,48,2,,730,0.6358247876167298,0
2459,,,238,6,,1533,1.3577069520950318,0
2460,,,226,7,,2733,2.116468020280202,0
2461,,,128,3,,591,0.5772205233573914,0
2462,,,291,6,,2385,1.9044656157493591,0
2463,,,47,3,,1208,0.9515103777249654,0
2464,,,285,7,,2558,2.0803975582122805,0
2465,,,112,4,,1492,1.1694042563438416,0
2466,,,147,6,,2085,1.606482243537903,0
2467,,,66,4,,1536,1.176864246527354,0
2468,,,132,7,,2324,1.8474871635437011,0
2469,,,279,6,,2363,1.8667009234428407,0
2470,,,255,5,,2003,1.487372096379598,0
2471,,,176,6,,2334,1.7491389036178588,0
2472,,,98,3,,880,0.7269982616106669,0
2473,,,82,3,,1150,0.8491162379582723,0
2474,,,244,7,,2694,2.0530810077985127,0
2475,,,254,7,,2131,1.6788989146550497,0
2476,,,81,3,,1170,0.8795650005340576,0
2477,,,153,4,,1581,1.1924106319745382,0
2478,,,220,6,,2339,1.7679762721061707,0
2479,,,60,4,,1520,1.1392655531565348,0
2480,,,104,3,,1153,0.8372772733370463,0
2481,,,61,4,,1037,0.8480360229810079,0
2482,,,55,3,,1022,0.8101186116536458,0
2483,,,131,6,,1650,1.346566387017568,0
2484,,,160,5,,1904,1.4830178300539651,0
2485,,,124,4,,1405,1.0836235682169597,0
2486,,,56,2,,834,0.6343614101409912,0
2487,,,346,7,,2402,1.9445483525594076,0
2488,,,86,4,,1506,1.1233765999476115,0
2489,,,61,4,,1125,0.8882622321446737,0
2490,,,91,3,,789,0.6470667640368144,0
2491,,,157,8,,2933,2.1242525815963744,0
2492,,,264,8,,2340,1.8459982911745707,0
2493,,,265,7,,2533,1.9428945183753967,0
2494,,,273,6,,1984,1.5617493589719136,0
2495,,,291,11,,4069,3.125049356619517,0
2496,,,280,6,,2345,1.777972193559011,0
2497,,,311,7,,2602,2.0207874377568564,0
2498,,,51,3,,1161,0.8536344011624654,0
2499,,,86,3,,1167,0.9066427826881409,0
2500,,,63,3,,1194,0.9423618276913961,0
2501,,,96,5,,1882,1.408922584851583,0
2502,,,83,3,,1189,0.9069948673248291,0
2503,,,67,3,,915,0.7345175822575887,0
2504,,,63,3,,1176,0.8778669675191243,0
2505,,,256,7,,2710,2.0870651960372926,0
2506,,,90,3,,1190,0.8909959435462952,0
2507,,,233,5,,2009,1.521562898159027,0
2508,,,549,11,,2925,2.5184735616048175,0
2509,,,66,4,,1524,1.1559771498044331,0
2510,,,141,4,,1323,1.056302539507548,0
2511,,,267,5,,1878,1.4474309047063192,0
2512,,,198,8,,2781,2.1408477902412413,0
2513,,,464,10,,3783,2.906583007176717,0
2514,,,252,6,,2351,1.8009096701939902,0
2515,"public void Test188463(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    Socket socket = null;
    PrintWriter writer = null;
    try
    {
        socket = new Socket(""remote_host"", 1337);
        writer = new PrintWriter(socket.getOutputStream(), true);
        writer.println(data);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""Error writing to the socket"", exceptIO);
    }
    finally
    {
        if (writer != null)
        {
            writer.close();
        }
        try
        {
            if (socket != null)
            {
                socket.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
        }
    }
}","public void Test188463(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    Socket ssl = null;
    PrintWriter stream = null;
    try
    {
        ssl = new Socket(""remote_host"", 1337);
        stream = new PrintWriter(ssl.getOutputStream(), true);
        stream.println(data);
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""Error writing to the socket"", exceptIO);
    }
    finally
    {
        if (stream != null)
        {
            stream.close();
        }
        try
        {
            if (ssl != null)
            {
                ssl.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
        }
    }
}",148,5,"writer:stream,socket:ssl,",141,0.12206824620564778,ALERT
2516,,,53,4,,1526,1.1979220032691955,0
2517,,,281,6,,2423,1.8733945926030477,0
2518,,,235,6,,2035,1.5855297287305197,0
2519,,,245,6,,2335,1.7789713501930238,0
2520,,,286,7,,2700,2.095580236117045,0
2521,,,419,9,,3098,2.420388472080231,0
2522,,,79,3,,1151,0.9141699314117432,0
2523,,,89,3,,1187,0.9479665001233418,0
2524,,,195,5,,1955,1.4635774612426757,0
2525,,,140,9,,3309,2.4466885407765706,0
2526,"private void Test795409(String data ) throws Throwable
{
    Connection dbConnection = null;
    Statement sqlStatement = null;
    ResultSet resultSet = null;
    try
    {
        dbConnection = IO.getDBConnection();
        sqlStatement = dbConnection.createStatement();
        resultSet = sqlStatement.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sqlStatement != null)
            {
                sqlStatement.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dbConnection != null)
            {
                dbConnection.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}","private void Test795409(String data ) throws Throwable
{
    Connection dlConnector = null;
    Statement sslQuery = null;
    ResultSet resultSet = null;
    try
    {
        dlConnector = IO.getDBConnection();
        sslQuery = dlConnector.createStatement();
        resultSet = sslQuery.executeQuery(""select * from users where name='""+data+""'"");
        IO.writeLine(resultSet.getRow());  
    }
    catch (SQLException exceptSql)
    {
        IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
    }
    finally
    {
        try
        {
            if (resultSet != null)
            {
                resultSet.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql);
        }
        try
        {
            if (sslQuery != null)
            {
                sslQuery.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Statement"", exceptSql);
        }
        try
        {
            if (dlConnector != null)
            {
                dlConnector.close();
            }
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
        }
    }
}",211,5,"dbConnection:dlConnector,sqlStatement:sslQuery,",120,0.10224398374557495,ALERT
2527,,,55,3,,1165,0.8396392941474915,0
2528,,,54,2,,814,0.6247586131095886,0
2529,,,139,7,,2331,1.7471429427464804,0
2530,,,292,7,,2393,1.8138046741485596,0
2531,,,121,6,,1953,1.4917251269022624,0
2532,,,256,6,,2057,1.5827382604281108,0
2533,,,111,3,,1182,0.8965286453564961,0
2534,,,156,5,,1144,0.9697862307230631,0
2535,,,141,4,,1370,1.0426798303922018,0
2536,,,264,6,,2338,1.73683043718338,0
2537,,,52,2,,780,0.6360667665799459,0
2538,,,72,3,,1058,0.8010084668795268,0
2539,,,309,6,,2341,1.75911123752594,0
2540,,,452,8,,2808,2.2336380521456403,0
2541,,,171,7,,2464,1.8925931572914123,0
2542,,,270,7,,2627,2.0019504547119142,0
2543,,,505,11,,4174,3.2989105383555093,0
2544,,,257,6,,2339,1.8402175267537435,0
2545,,,98,3,,1116,0.8555528918902079,0
2546,,,262,6,,2371,1.8526392539342245,0
2547,,,242,7,,2560,1.9928707997004191,0
2548,,,108,3,,1167,0.91270618836085,0
2549,,,299,7,,2719,2.141921357313792,0
2550,,,105,6,,2307,1.7700539429982503,0
2551,,,155,7,,2405,1.8389015396436055,0
2552,,,280,6,,2380,1.8546536803245544,0
2553,,,247,6,,2020,1.641921095053355,0
2554,,,104,3,,1180,0.9377560218175253,0
2555,,,59,3,,954,0.7915199915568034,0
2556,,,295,7,,1915,1.5990965048472086,0
2557,,,87,3,,1173,0.917223330338796,0
2558,,,448,9,,3243,2.6209171136220295,0
2559,,,65,3,,1169,0.9455576459566752,0
2560,,,164,7,,2563,2.0570582310358683,0
2561,,,109,3,,777,0.7072319428126017,0
2562,,,79,5,,1903,1.5370761632919312,0
2563,,,117,3,,1176,0.9719777941703797,0
2564,,,193,7,,2646,2.096321467558543,0
2565,,,60,3,,1161,0.9158492644627889,0
2566,,,62,2,,803,0.6859440366427104,0
2567,,,138,7,,1527,1.373973794778188,0
2568,,,206,10,,3501,2.773926917711894,0
2569,,,56,3,,1179,0.9553877949714661,0
2570,,,120,4,,1103,0.9301569660504659,0
2571,,,146,3,,1178,0.9434463620185852,0
2572,,,281,6,,2237,1.8175694386164347,0
2573,,,254,6,,2262,1.7834663271903992,0
2574,,,278,7,,2350,1.8950783371925355,0
2575,,,253,5,,2022,1.6060602426528932,0
2576,,,318,8,,2822,2.2886802117029825,0
2577,,,146,4,,1597,1.2710602045059205,0
2578,,,262,5,,2012,1.604827598730723,0
2579,,,63,2,,806,0.661848775545756,0
2580,,,65,3,,1180,0.916457986831665,0
2581,,,56,3,,1138,0.880322003364563,0
2582,,,60,3,,1158,0.9084450801213583,0
2583,,,313,7,,2610,2.1586982369422913,0
2584,,,366,12,,4474,3.65278693040212,0
2585,,,434,9,,3510,2.8338843743006388,0
2586,,,135,7,,2087,1.678992784023285,0
2587,,,121,8,,2672,2.1242111961046857,0
2588,,,161,6,,2142,1.6208549380302428,0
2589,,,121,4,,1354,1.0711378494898478,0
2590,,,45,2,,845,0.6413791418075562,0
2591,,,49,2,,814,0.6135691245396931,0
2592,,,113,5,,1876,1.4068604787190755,0
2593,,,308,7,,2730,2.1176386078198752,0
2594,,,58,3,,1076,0.8079256574312846,0
2595,,,95,4,,1586,1.1943169633547466,0
2596,,,110,3,,1176,0.8936466574668884,0
2597,,,56,3,,1086,0.8265456080436706,0
2598,,,180,6,,1840,1.4852539340655009,0
2599,,,304,7,,2656,2.0941598773002625,0
2600,,,127,3,,1178,0.9223439455032348,0
2601,,,160,7,,2550,1.9248843351999918,0
2602,,,116,4,,1544,1.185750158627828,0
2603,,,309,7,,2794,2.19335636695226,0
2604,,,162,6,,2405,1.8259464740753173,0
2605,,,327,7,,2756,2.188177792231242,0
2606,,,291,7,,2524,2.0091625769933064,0
2607,,,40,3,,1025,0.8157695770263672,0
2608,,,225,5,,1842,1.440151298046112,0
2609,,,320,6,,1934,1.5316194574038187,0
2610,,,110,3,,777,0.6582992513974507,0
2611,,,94,4,,675,0.667053472995758,0
2612,,,52,3,,1178,0.8590597152709961,0
2613,,,62,5,,1894,1.4338825384775797,0
2614,,,52,2,,680,0.561032752195994,0
2615,,,308,9,,3345,2.59116100470225,0
2616,,,103,4,,1570,1.2172376791636148,0
2617,,,155,6,,2257,1.7732883056004842,0
2618,,,82,3,,1183,0.8760701258977254,0
2619,,,336,7,,2668,2.0458768328030903,0
2620,,,61,3,,1183,0.9059441169102986,0
2621,,,87,3,,1041,0.8156332770983378,0
2622,,,158,8,,2877,2.1612359523773192,0
2623,,,22,2,,790,0.6116997043291728,0
2624,,,217,5,,1907,1.4283923745155334,0
2625,,,297,7,,2526,1.9739264448483784,0
2626,,,121,4,,1529,1.1509108781814574,0
2627,,,71,4,,1068,0.8852730035781861,0
2628,,,355,9,,3458,2.6980325897534687,0
2629,,,69,3,,1190,0.9474096814791362,0
2630,,,394,8,,3130,2.4578824003537494,0
2631,,,147,8,,3003,2.283950134118398,0
2632,,,156,4,,1521,1.1736292084058126,0
2633,,,323,7,,2240,1.7771453499794005,0
2634,,,370,10,,3560,2.823127595583598,0
2635,,,125,6,,2251,1.7057815790176392,0
2636,,,292,8,,3089,2.4114075462023417,0
2637,,,74,3,,1130,0.8940433581670125,0
2638,,,110,5,,1595,1.307057801882426,0
2639,,,77,6,,1770,1.4125719269116719,0
2640,,,86,3,,1173,0.9229793508847555,0
2641,,,66,4,,1549,1.1669824163118998,0
2642,,,475,8,,3076,2.334373871485392,0
2643,,,125,6,,2072,1.5378285010655721,0
2644,,,298,6,,2408,1.8427770853042602,0
2645,,,71,3,,1194,0.8830421606699626,0
2646,,,45,2,,701,0.5906050324440002,0
2647,,,72,5,,1906,1.4264257709185282,0
2648,,,193,7,,2699,2.043223428726196,0
2649,,,97,5,,1608,1.2610667506853739,0
2650,,,35,2,,819,0.6634716272354126,0
2651,,,89,2,,773,0.6431469798088074,0
2652,,,285,6,,2185,1.6846593379974366,0
2653,,,79,3,,1140,0.8594131946563721,0
2654,,,363,8,,2844,2.2510310490926106,0
2655,,,360,8,,2995,2.309542949994405,0
2656,,,218,6,,2336,1.7926613887151082,0
2657,,,167,4,,1570,1.2208260536193847,0
2658,,,249,5,,1667,1.3379963278770446,0
2659,,,87,5,,1826,1.3984251340230307,0
2660,,,315,8,,3095,2.3918516635894775,0
2661,,,198,5,,1841,1.4307298183441162,0
2662,,,224,6,,2229,1.676344887415568,0
2663,,,43,5,,1641,1.2478051781654358,0
2664,,,39,3,,1155,0.9329690774281819,0
2665,,,86,3,,1206,0.933322540918986,0
2666,,,184,7,,2381,1.8475104292233786,0
2668,,,139,6,,1902,1.515513296922048,0
2669,,,278,6,,2222,1.7246090213457743,0
2670,,,137,5,,2012,1.4290051182111105,0
2671,,,212,6,,1510,1.2493014891942342,0
2672,,,373,7,,2528,2.0064847747484844,0
2673,,,57,3,,1099,0.8611459612846375,0
2674,,,344,7,,2702,2.1045348246892295,0
2675,,,315,8,,3134,2.3753119866053263,0
2676,,,45,2,,823,0.6197915236155193,0
2677,,,32,2,,709,0.557461146513621,0
2678,,,242,6,,2025,1.5802561561266582,0
2679,,,429,8,,3015,2.2961722373962403,0
2680,,,126,3,,1203,0.8942054589589437,0
2681,,,100,3,,1187,0.940739369392395,0
2682,,,247,7,,2717,2.1879599928855895,0
2683,,,165,4,,1591,1.2341125766436258,0
2684,,,450,9,,3406,2.738356578350067,0
2685,,,85,4,,677,0.6525639414787292,0
2686,,,188,7,,2578,2.046253987153371,0
2687,,,182,7,,2563,1.998874028523763,0
2688,,,62,2,,769,0.5860647201538086,0
2689,,,243,5,,1463,1.2333004117012023,0
2690,,,88,3,,1173,0.8646581093470256,0
2691,,,63,3,,902,0.7076384981473287,0
2692,,,278,5,,1668,1.2995857834815978,0
2693,,,166,4,,1579,1.2552307685216268,0
2694,,,267,6,,2222,1.720059859752655,0
2695,,,301,7,,2603,2.0764174262682595,0
2696,,,338,7,,2707,2.11496768395106,0
2697,,,59,2,,515,0.44893111785252887,0
2698,,,344,7,,2784,2.1259705503781636,0
2699,,,282,9,,3463,2.684051549434662,0
2700,,,131,8,,1649,1.4417941530545553,0
2701,,,360,12,,3835,2.972638471921285,0
2702,,,259,5,,1998,1.527858555316925,0
2703,,,449,12,,4536,3.425042470296224,0
2704,,,316,7,,2642,2.0628220001856485,0
2705,,,271,6,,2344,1.8397403001785277,0
2706,,,84,3,,1163,0.8948699116706849,0
2707,,,170,6,,2069,1.6103201905886333,0
2708,,,231,6,,2222,1.7098819732666015,0
2709,,,260,7,,2272,1.8393410642941792,0
2710,,,77,3,,539,0.5288336555163066,0
2711,,,35,2,,809,0.6453692396481832,0
2712,,,76,4,,1541,1.2004895289738973,0
2713,,,147,4,,1337,1.0726187626520793,0
2714,,,296,7,,2581,2.058997122446696,0
2715,,,282,7,,2783,2.1566755414009093,0
2716,,,236,8,,3050,2.340469479560852,0
2717,,,253,5,,1796,1.420576818784078,0
2718,,,64,3,,1200,0.8788632949193319,0
2719,,,223,6,,2029,1.616146485010783,0
2720,,,117,3,,1151,0.9172010819117228,0
2721,,,60,3,,1202,0.9292332887649536,0
2722,,,170,4,,1641,1.2784789760907491,0
2723,,,206,10,,3569,2.795185192426046,0
2724,,,108,3,,1196,0.9448316136995951,0
2725,,,20,1,,444,0.3695402940114339,0
2726,,,269,7,,2352,1.8411780993143718,0
2727,,,377,7,,2677,2.245333190759023,0
2728,,,70,3,,1136,0.9347374439239502,0
2729,,,128,7,,2561,2.1001677751541137,0
2730,,,199,6,,2281,1.904322616259257,0
2731,,,338,8,,2948,2.457491854826609,0
2732,,,66,3,,1164,0.9086376190185547,0
2733,,,91,5,,1115,0.98269757827123,0
2734,,,381,8,,3007,2.438165088494619,0
2735,,,216,6,,1700,1.432603911558787,0
2736,,,64,3,,1165,0.925307297706604,0
2737,,,203,7,,2410,1.8939295729001364,0
2738,,,276,7,,2579,2.002857716878255,0
2739,,,67,4,,1424,1.1137206355730693,0
2740,,,91,3,,1129,0.9052172899246216,0
2741,,,37,3,,1182,0.8910849928855896,0
2743,,,186,10,,2873,2.308341372013092,0
2744,,,38,3,,1191,0.9388716499010722,0
2745,,,130,7,,2591,1.9975728551546732,0
2746,,,59,4,,1540,1.209782099723816,0
2747,,,64,3,,1060,0.820370368162791,0
2748,,,343,8,,3017,2.364074718952179,0
2749,,,94,3,,1203,0.9165632526079813,0
2750,,,88,2,,697,0.5600980917612711,0
2751,,,248,7,,2631,1.9969576120376586,0
2752,,,325,7,,2586,2.0507767955462137,0
2753,,,271,6,,2330,1.8071053703625997,0
2754,,,37,3,,1181,0.9059079885482788,0
2755,,,192,6,,2207,1.7612185676892598,0
2756,,,213,6,,1879,1.4800169587135314,0
2757,,,810,5,,2187,1.7958130478858947,0
2758,,,70,3,,1199,0.9298203388849894,0
2759,,,193,7,,2574,1.9797936757405599,0
2760,,,73,3,,1140,0.8841763575871785,0
2761,,,47,3,,1131,0.865847647190094,0
2762,,,89,3,,1199,0.9168717622756958,0
2763,,,339,8,,2749,2.208453400929769,0
2764,,,72,5,,1203,1.0177675207455954,0
2765,,,285,6,,2386,1.8553540031115214,0
2766,,,320,7,,2244,1.7898393591245016,0
2767,,,313,8,,3141,2.363665215174357,0
2768,,,428,8,,2757,2.1132827401161194,0
2769,"public void Test520786(String dataArray[] ) throws Throwable
{
    String data = dataArray[2];
    if (data != null)
    {
        System.out.format(data);
    }
}","public void  test20796(String objectObject[] ) throws Throwable
{
    String buffer = objectObject[2];
    if (buffer != null)
    {
        System.out.format(buffer);
    }
}",38,3,"Test520786: test20796,dataArray:objectObject,data:buffer,",107,0.10455265839894613,ALERT
2770,,,121,3,,1182,0.8863857706387838,0
2771,,,53,3,,1150,0.8711463848749796,0
2772,,,35,2,,789,0.5908868153889973,0
2773,,,243,6,,2303,1.731598714987437,0
2774,,,206,10,,3691,2.787930719057719,0
2775,,,318,8,,2865,2.233763635158539,0
2776,,,180,8,,2768,2.124258848031362,0
2777,,,420,8,,2419,1.9266114115715027,0
2778,,,312,6,,2323,1.756342621644338,0
2779,,,88,2,,422,0.39377955595652264,0
2780,,,74,3,,1229,0.9443687876065572,0
2781,,,407,8,,3169,2.484544587135315,0
2782,,,379,8,,2856,2.2373062213261923,0
2783,,,88,2,,715,0.563780665397644,0
2784,,,143,6,,2193,1.6881983518600463,0
2785,,,402,8,,3096,2.4084859172503155,0
2786,,,44,4,,1155,0.9156053264935812,0
2787,,,56,2,,745,0.6003242055575053,0
2788,,,350,7,,2750,2.1496414144833884,0
2789,,,212,6,,2331,1.7868992924690246,0
2790,,,86,2,,685,0.5724976102511088,0
2791,,,312,8,,3016,2.3323912898699444,0
2792,,,24,1,,442,0.3712257663408915,0
2793,,,313,6,,2235,1.7364970763524374,0
2794,,,115,3,,1188,0.9257739226023356,0
2795,,,321,6,,2383,1.8211435675621033,0
2796,,,72,3,,1134,0.8607982198397318,0
2797,,,215,7,,2246,1.73246435324351,0
2798,,,296,8,,3037,2.3498032013575236,0
2799,,,100,4,,1567,1.1862483819325764,0
2800,,,74,5,,1858,1.3794001857439677,0
2801,,,115,5,,1686,1.2797083894411723,0
2802,,,169,7,,2504,1.869249741236369,0
2803,,,312,7,,2201,1.7333258191744487,0
2804,,,275,5,,1807,1.4058420697848002,0
2806,,,246,6,,2370,1.7773921847343446,0
2807,,,311,7,,2693,2.0979509154955545,0
2808,,,401,8,,3120,2.4302058815956116,0
2810,,,296,7,,2658,2.0976619203885396,0
2811,,,329,8,,3118,2.416553028424581,0
2812,,,276,7,,2588,1.9893665750821432,0
2813,,,100,3,,1163,0.9045748829841613,0
2814,,,318,8,,2691,2.149539117018382,0
2815,,,48,3,,1174,0.9302944978078206,0
2816,,,173,6,,1943,1.5225235104560852,0
2817,,,540,11,,3977,3.153654130299886,0
2818,,,283,6,,2214,1.6875665624936422,0
2819,,,310,7,,2686,2.126531120141347,0
2820,,,217,6,,2255,1.699655548731486,0
2821,,,401,9,,3471,2.7298911611239114,0
2822,,,313,6,,2377,1.834966003894806,0
2823,,,162,7,,2500,1.9584791779518127,0
2824,,,82,3,,1198,0.9378613869349162,0
2825,,,27,3,,1026,0.8425991376241048,0
2826,,,381,8,,3069,2.4513619979222616,0
2827,,,306,9,,3284,2.6041654388109845,0
2828,,,201,5,,1843,1.430255079269409,0
2829,,,437,7,,2779,2.1715542793273928,0
2830,,,420,8,,3123,2.4387588421503703,0
2831,,,117,6,,2267,1.703783424695333,0
2832,,,251,6,,1946,1.55492369333903,0
2833,,,133,7,,2395,1.8692266901334127,0
2834,,,74,3,,1186,0.948364770412445,0
2835,,,330,11,,4022,3.1647088964780172,0
2836,,,306,9,,3292,2.5669511914253236,0
2837,,,49,3,,1152,0.8969265898068746,0
2838,,,176,7,,2437,1.8857747236887614,0
2839,,,271,6,,2347,1.7983111143112183,0
2840,,,339,8,,3003,2.3499574422836305,0
2841,,,95,3,,1181,0.9114809354146322,0
2842,,,81,3,,1194,0.9312028527259827,0
2843,,,66,4,,1101,0.9167890389760335,0
2844,,,339,9,,3270,2.511657186349233,0
2845,,,69,5,,1763,1.3538243929545084,0
2846,,,306,9,,3321,2.5431533058484397,0
2847,,,281,6,,1771,1.4390265742937725,0
2848,,,94,3,,1174,0.849791963895162,0
2849,,,61,3,,1087,0.8166697303454081,0
2850,"public void Test525403(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        byte data = (Byte)streamObjectInput.readObject();
        if(data < 0)  
        {
            byte result = (byte)(data * 2);
            IO.writeLine(""result: "" + result);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void Test525403(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        byte offset = (Byte)streamObjectInput.readObject();
        if(offset < 0)  
        {
            byte buffer = (byte)(offset * 2);
            IO.writeLine(""result: "" + buffer);
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",208,6,"data:offset,result:buffer,",102,0.09820427894592285,ALERT
2851,,,239,5,,1966,1.5348955591519673,0
2852,,,337,8,,2467,2.000011622905731,0
2853,,,69,3,,1190,0.9213021238644917,0
2854,,,117,4,,1409,1.0760856072107952,0
2855,,,75,2,,844,0.6246028463045756,0
2856,,,230,8,,2939,2.178152620792389,0
2857,,,298,6,,1764,1.4235013008117676,0
2858,,,544,11,,4226,3.4836239337921144,0
2859,,,56,3,,1154,0.9139517466227214,0
2860,,,173,12,,4316,3.4322941223780314,0
2861,,,297,7,,2445,1.89249906539917,0
2862,,,224,5,,1942,1.4744786381721497,0
2863,,,119,6,,1432,1.1831822554270426,0
2864,,,39,3,,975,0.7491249124209086,0
2865,,,260,6,,1803,1.4034846663475036,0
2866,,,61,5,,1895,1.3815883636474608,0
2867,,,91,3,,1123,0.8627698262532552,0
2868,"public void Test989971(byte[] dataSerialized ) throws Throwable
{
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try
    {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String)streamObjectInput.readObject();
        String root;
        if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
        {
            root = ""C:\\uploads\\"";
        }
        else
        {
            root = ""/home/user/uploads/"";
        }
        if (data != null)
        {
            File file = new File(root + data);
            FileInputStream streamFileInputSink = null;
            InputStreamReader readerInputStreamSink = null;
            BufferedReader readerBufferdSink = null;
            if (file.exists() && file.isFile())
            {
                try
                {
                    streamFileInputSink = new FileInputStream(file);
                    readerInputStreamSink = new InputStreamReader(streamFileInputSink, ""UTF-8"");
                    readerBufferdSink = new BufferedReader(readerInputStreamSink);
                    IO.writeLine(readerBufferdSink.readLine());
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
                }
                finally
                {
                    try
                    {
                        if (readerBufferdSink != null)
                        {
                            readerBufferdSink.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                    }
                    try
                    {
                        if (readerInputStreamSink != null)
                        {
                            readerInputStreamSink.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                    }
                    try
                    {
                        if (streamFileInputSink != null)
                        {
                            streamFileInputSink.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);
                    }
                }
            }
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectInput != null)
            {
                streamObjectInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteArrayInput != null)
            {
                streamByteArrayInput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}","public void  test986971(byte[] dataGeneralised ) throws Throwable
{
    ByteArrayInputStream streamByteStringOutput = null;
    ObjectInputStream streamObjectOutput = null;
    try
    {
        streamByteStringOutput = new ByteArrayInputStream(dataGeneralised);
        streamObjectOutput = new ObjectInputStream(streamByteStringOutput);
        String buffer = (String)streamObjectOutput.readObject();
        String ppa;
        if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0)
        {
            ppa = ""C:\\uploads\\"";
        }
        else
        {
            ppa = ""/home/user/uploads/"";
        }
        if (buffer != null)
        {
            File base = new File(ppa + buffer);
            FileInputStream streamFileRequestSender = null;
            InputStreamReader readerInputstreamSlipe = null;
            BufferedReader readerBufferdsek = null;
            if (base.exists() && base.isFile())
            {
                try
                {
                    streamFileRequestSender = new FileInputStream(base);
                    readerInputstreamSlipe = new InputStreamReader(streamFileRequestSender, ""UTF-8"");
                    readerBufferdsek = new BufferedReader(readerInputstreamSlipe);
                    IO.writeLine(readerBufferdsek.readLine());
                }
                catch (IOException exceptIO)
                {
                    IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
                }
                finally
                {
                    try
                    {
                        if (readerBufferdsek != null)
                        {
                            readerBufferdsek.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
                    }
                    try
                    {
                        if (readerInputstreamSlipe != null)
                        {
                            readerInputstreamSlipe.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
                    }
                    try
                    {
                        if (streamFileRequestSender != null)
                        {
                            streamFileRequestSender.close();
                        }
                    }
                    catch (IOException exceptIO)
                    {
                        IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);
                    }
                }
            }
        }
    }
    catch (IOException exceptIO)
    {
        IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO);
    }
    catch (ClassNotFoundException exceptClassNotFound)
    {
        IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound);
    }
    finally
    {
        try
        {
            if (streamObjectOutput != null)
            {
                streamObjectOutput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO);
        }
        try
        {
            if (streamByteStringOutput != null)
            {
                streamByteStringOutput.close();
            }
        }
        catch (IOException exceptIO)
        {
            IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);
        }
    }
}",447,10,"root:ppa,dataSerialized:dataGeneralised,data:buffer,readerBufferdSink:readerBufferdsek,readerInputStreamSink:readerInputstreamSlipe,Test989971: test986971,streamFileInputSink:streamFileRequestSender,streamByteArrayInput:streamByteStringOutput,file:base,streamObjectInput:streamObjectOutput,",609,0.43327120939890545,ALERT
2869,,,185,6,,1856,1.4179536739985148,0
2870,,,142,3,,1097,0.8268316666285197,0
2871,,,220,6,,1988,1.5769468943277996,0
2872,,,269,5,,1249,1.080368705590566,0
2873,,,36,1,,433,0.3746992786725362,0
2874,,,328,7,,2683,2.0932828903198244,0
2875,,,263,6,,2338,1.8410657207171122,0
2876,,,128,4,,1569,1.2290731390317282,0
2877,,,279,6,,2403,1.8733713428179424,0
2878,,,144,7,,2415,1.8760716199874878,0
2879,,,468,13,,4908,3.8779364426930747,0
2880,,,158,4,,1564,1.2115980664889017,0
2881,,,237,6,,2306,1.799560018380483,0
2882,,,270,6,,2396,1.8571306427319845,0
2883,,,301,7,,2675,2.1169001420338946,0
2884,,,459,9,,3422,2.866809403896332,0
2885,,,48,2,,723,0.6537399172782898,0
2886,,,468,9,,3562,3.114482076962789,0
2887,,,228,6,,1450,1.4182047605514527,0
2888,,,287,7,,2683,2.3571574012438457,0
2889,,,126,4,,1608,1.4180419166882834,0
2890,,,239,6,,2308,1.9332842906316121,0
2891,,,341,11,,3416,2.822739537556966,0
2892,,,76,3,,1189,1.0035898327827453,0
2893,,,48,3,,1159,0.9855099360148112,0
2894,,,345,7,,2717,2.3596984346707663,0
2895,,,153,6,,2271,1.893391231695811,0
2896,,,345,8,,3074,2.6437381505966187,0
2897,,,70,3,,1153,1.014717443784078,0
2898,,,154,3,,1188,1.0491380016009013,0
2899,,,562,6,,2470,2.20828572511673,0
2900,,,145,7,,2602,2.1905603488286336,0
2901,,,116,3,,1047,0.881264615058899,0
2902,,,100,3,,1208,0.9729087392489115,0
2903,,,118,7,,2590,2.003246319293976,0
2904,,,154,6,,2186,1.7260563413302104,0
2905,,,227,7,,2601,2.0413062810897826,0
2906,,,306,7,,1940,1.6559323390324912,0
2907,,,56,4,,1059,0.9164387981096903,0
2908,,,382,8,,3082,2.489588006337484,0
2909,,,93,5,,1900,1.4838199655214945,0
2910,,,51,3,,836,0.6935645977656046,0
2911,"public void Test527312(HashMap<Integer,String> dataHashMap ) throws Throwable
{
    String data = dataHashMap.get(2);
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void  test766814(HashMap<Integer,String>  dataHashArray ) throws Throwable
{
    String data =  dataHashArray.get(2);
    if (data != null)
    {
        String names[] = data.split(""-"");
        int SuccessCount = 0;
        Connection debConn = null;
        Statement sslConnection = null;
        try
        {
            debConn = IO.getDBConnection();
            sslConnection = debConn.createStatement();
            for (int lc = 0; lc < names.length; lc++)
            {
                sslConnection.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[lc] + ""'"");
            }
            int rowsObject[] = sslConnection.executeBatch();
            for (int lc = 0; lc < names.length; lc++)
            {
                if (rowsObject[lc] > 0)
                {
                    SuccessCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + SuccessCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sslConnection != null)
                {
                    sslConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (debConn != null)
                {
                    debConn.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",275,9,"dbConnection:debConn,Test527312: test766814,i:lc,resultsArray:rowsObject,dataHashMap: dataHashArray,successCount:SuccessCount,sqlStatement:sslConnection,",316,0.2631893277168274,ALERT
2912,,,199,6,,2225,1.8120792587598165,0
2913,,,58,3,,1220,0.9673700332641602,0
2914,,,286,6,,2352,1.8434878746668497,0
2915,,,300,8,,3035,2.3977121392885845,0
2916,,,382,8,,3084,2.467750934759776,0
2917,,,19,2,,629,0.5616916616757711,0
2918,,,243,6,,2336,1.8708517829577127,0
2919,,,245,8,,3074,2.410525647799174,0
2920,,,260,6,,2293,1.8411843736966451,0
2921,,,234,6,,1981,1.6475735425949096,0
2922,,,263,6,,2331,1.8871568401654562,0
2923,,,66,3,,1193,0.906883176167806,0
2924,,,73,4,,1302,1.0226234793663025,0
2925,,,267,6,,2190,1.7279524644215902,0
2926,,,36,1,,444,0.38099061250686644,0
2927,,,303,12,,4473,3.5515289306640625,0
2928,,,410,8,,3064,2.414196578661601,0
2929,,,104,3,,1191,0.8941309968630473,0
2930,,,224,7,,2441,1.9068615277608236,0
2931,,,107,4,,1560,1.2026600082715353,0
2932,,,146,7,,2607,2.0457799077033996,0
2933,,,412,7,,2464,2.0348658045132955,0
2934,,,301,7,,2460,2.136409056186676,0
2935,,,77,3,,1167,0.9949686249097188,0
2936,,,155,7,,2238,1.8873903393745421,0
2937,,,54,5,,1881,1.5061313231786093,0
2938,,,58,3,,1213,0.9231686433156331,0
2939,,,65,2,,747,0.6188298900922139,0
2940,,,137,7,,2492,1.961636976401011,0
2941,"public void Test811846() throws Throwable
{
    String data = CWE89_SQL_Injection__listen_tcp_executeBatch_68a.data;
    if (data != null)
    {
        String names[] = data.split(""-"");
        int successCount = 0;
        Connection dbConnection = null;
        Statement sqlStatement = null;
        try
        {
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.createStatement();
            for (int i = 0; i < names.length; i++)
            {
                sqlStatement.addBatch(""update users set hitcount=hitcount+1 where name='"" + names[i] + ""'"");
            }
            int resultsArray[] = sqlStatement.executeBatch();
            for (int i = 0; i < names.length; i++)
            {
                if (resultsArray[i] > 0)
                {
                    successCount++;
                }
            }
            IO.writeLine(""Succeeded in "" + successCount + "" out of "" + names.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (sqlStatement != null)
                {
                    sqlStatement.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (dbConnection != null)
                {
                    dbConnection.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}","public void  test811846() throws Throwable
{
    String data = CWE89_SQL_Injection__listen_tcp_executeBatch_68a.data;
    if (data != null)
    {
        String nas[] = data.split(""-"");
        int ceedLength = 0;
        Connection sqlConn = null;
        Statement dbDatabase = null;
        try
        {
            sqlConn = IO.getDBConnection();
       dbDatabaseement = sqlConn.createStatement();
            for (inuri i = 0uri i < nas.length; uri++)
            {
              dbDatabasent.addBatch(""update users set hitcount=hitcount+1 where name='"" + nas[uri] + ""'"");
            }
            in resultsObjectay[] = dbDatabase.executeBatch();
            for (inuri i = 0uri i < nas.length; uri++)
            {
                if (re resultsObjectri] > 0)
                {
                    ceedLength++;
                }
            }
            IO.writeLine(""Succeeded in "" ceedLengthnt + "" out of "" + nas.length + "" queries."");
        }
        catch (SQLException exceptSql)
        {
            IO.logger.log(Level.WARNING, ""Error getting database connection"", exceptSql);
        }
        finally
        {
            try
            {
                if (dbDatabase != null)
                {
                    dbDatabase.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Statament"", exceptSql);
            }
            try
            {
                if (sqlConn != null)
                {
                    sqlConn.close();
                }
            }
            catch (SQLException exceptSql)
            {
                IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);
            }
        }
    }
}",265,8,"Test811846: test811846,data:data,names:nas,successCount:ceedLength,dbConnection:sqlConn,sqlStatement:dbDatabase,i:uri,resultsArray: resultsObject,",903,0.7940198024113972,ALERT
2942,,,237,5,,1373,1.1870705246925355,0
2943,,,112,4,,1504,1.2384497245152792,0
2944,,,63,4,,1522,1.198606264591217,0
2945,,,97,3,,1189,0.9661137700080872,0
2946,,,295,6,,2296,1.8157837311426799,0
2947,,,331,8,,3145,2.457948458194733,0
2948,,,352,12,,4395,3.5602240204811095,0
2949,,,452,10,,3708,2.980120837688446,0
2950,,,130,3,,948,0.8178293546040852,0
2951,,,284,6,,2356,1.9604862372080485,0
2952,,,212,7,,2328,1.9412791013717652,0
2953,,,58,4,,1453,1.202079184850057,0
